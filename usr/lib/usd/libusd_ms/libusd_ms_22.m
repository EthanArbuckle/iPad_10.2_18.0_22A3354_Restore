void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Close(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this)
{
  sub_20BDEBF08((_QWORD *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Write(uint64_t *a1, std::string *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  const std::string *v12;
  uint64_t v13;
  void **v14;
  void *__p[2];
  char v18;
  uint64_t *v19[4];
  std::string __dst;
  uint64_t v21;
  int v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_20BEB59B0((uint64_t)&v21, (uint64_t)"UsdAbc_AlembicData", (uint64_t)"UsdAbc_AlembicData::Write");
  if (*(char *)(a3 + 23) < 0)
    sub_20BDDBFAC(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  else
    __dst = *(std::string *)a3;
  v6 = sub_20C0E9774(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (!size)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0A6678(a1);
      v10 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
      v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v11)
        v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      (*(void (**)(char **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(&v23, v9, v10, (uint64_t)v11 + 48);
      if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
      {
        if ((v24 & 4) != 0)
          v12 = (const std::string *)(*(uint64_t (**)(char **))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
        else
          v12 = (const std::string *)v23;
        std::string::operator=(&__dst, v12);
      }
      sub_20BF4C2D8((uint64_t)&v23);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::UsdAbc_AlembicDataWriter((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)v19);
  if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Open((uint64_t)v19, a2, (uint64_t)&__dst))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Write(v19, a1)
      && (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Close((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)v19) & 1) != 0)
    {
      v13 = 1;
      goto LABEL_26;
    }
    pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)a2);
  }
  v23 = "usdAbc/alembicData.cpp";
  v24 = (unint64_t)"Write";
  v25 = 197;
  v26 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Write(const SdfAbstractDataConstPtr &, const s"
        "td::string &, const std::string &)";
  v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::GetErrors((char *)v19, (uint64_t)__p);
  if (v18 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic error: %s", (const char *)v14);
  if (v18 < 0)
    operator delete(__p[0]);
  v13 = 0;
LABEL_26:
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::~UsdAbc_AlembicDataWriter((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)v19);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
  return v13;
}

void sub_20C728450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20BF4C2D8(v27 - 80);
  if (a25 < 0)
    operator delete(__p);
  sub_20BEB24F4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::StreamsData(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this)
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::CreateSpec()
{
  _QWORD v0[4];
  char v1;

  v0[0] = "usdAbc/alembicData.cpp";
  v0[1] = "CreateSpec";
  v0[2] = 210;
  v0[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::CreateSpec(const SdfPath &, SdfSpecType)";
  v1 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v0, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file CreateSpec() not supported");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::HasSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (v2)
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasSpec(v2, a2);
  else
    return *(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD v2[4];
  char v3;

  v2[0] = "usdAbc/alembicData.cpp";
  v2[1] = "EraseSpec";
  v2[2] = 223;
  v2[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseSpec(const SdfPath &)";
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file EraseSpec() not supported");
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::MoveSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD v3[4];
  char v4;

  v3[0] = "usdAbc/alembicData.cpp";
  v3[1] = "MoveSpec";
  v3[2] = 231;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::MoveSpec(const SdfPath &, const SdfPath &)";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file MoveSpec() not supported");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetSpecType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (v2)
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetSpecType(v2, a2);
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0))
    return 7;
  return 0;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::_VisitSpecs(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  if (result)
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::VisitSpecs(result, this, a2);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Has(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 24);
  if (result)
    return (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(result, a2, a3, a4);
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Has(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;

  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (result)
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(result, a2, a3, a4);
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;

  *((_QWORD *)a4 + 1) = 0;
  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (result)
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(result, a2, a3, a4);
  return result;
}

void sub_20C7286DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  _QWORD v4[4];
  char v5;

  v4[0] = "usdAbc/alembicData.cpp";
  v4[1] = "Set";
  v4[2] = 290;
  v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set(const SdfPath &, const TfToken &, const VtValue &)";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file Set() not supported", a4);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set()
{
  _QWORD v0[4];
  char v1;

  v0[0] = "usdAbc/alembicData.cpp";
  v0[1] = "Set";
  v0[2] = 299;
  v0[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set(const SdfPath &, const TfToken &, const"
          " SdfAbstractDataConstValue &)";
  v1 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v0, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file Set() not supported");
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Erase(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD v3[4];
  char v4;

  v3[0] = "usdAbc/alembicData.cpp";
  v3[1] = "Erase";
  v3[2] = 307;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Erase(const SdfPath &, const TfToken &)";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file Erase() not supported");
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::List@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;

  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (result)
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::List(result, a2, (uint64_t)a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::ListAllTimeSamples@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  uint64_t v4;

  result = (uint64_t *)*((_QWORD *)this + 3);
  if (result)
  {
    v4 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListAllTimeSamples((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)result);
    return sub_20C728C44(a2, v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;
  uint64_t *v5;

  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (result)
  {
    v5 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetTimes((double **)v5, (uint64_t)a3);
  }
  else
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **this, double a2, double *a3, double *a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListAllTimeSamples(this[3]);
  return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Bracket<std::set<double>>(v7, a3, a4, a2);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;
  uint64_t *v3;

  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (result)
  {
    v3 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetSize((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v3);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;
  uint64_t *v9;

  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((_QWORD *)this + 3);
  if (result)
  {
    v9 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Bracket((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v9, a3, a4, a5);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::QueryTimeSample(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *result;
  uint64_t *v9;
  uint64_t v10;

  result = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **)(a1 + 24);
  if (result)
  {
    v10 = 0;
    v9 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::FindIndex((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v9, a4, &v10);
    if ((_DWORD)result)
      return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue(*(std::recursive_mutex ****)(a1 + 24), a2, v10, a3);
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::QueryTimeSample(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t *v8;
  _QWORD *result;
  uint64_t v10;

  v10 = 0;
  v8 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(this[3], a2);
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::FindIndex((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v8, a3, &v10);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue((std::recursive_mutex ***)this[3], a2, v10, a4);
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::SetTimeSample(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  _QWORD v4[4];
  char v5;

  v4[0] = "usdAbc/alembicData.cpp";
  v4[1] = "SetTimeSample";
  v4[2] = 383;
  v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::SetTimeSample(const SdfPath &, double, const VtValue &)";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file SetTimeSample() not supported", a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseTimeSample(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  _QWORD v3[4];
  char v4;

  v3[0] = "usdAbc/alembicData.cpp";
  v3[1] = "EraseTimeSample";
  v3[2] = 389;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseTimeSample(const SdfPath &, double)";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file EraseTimeSample() not supported", a3);
}

_QWORD *sub_20C728ADC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C542B60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C728B24(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v1;
  void *v3;

  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::~UsdAbc_AlembicDataReader(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C728B44(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C728B58(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *v1;
  void *v2;

  v1 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **)(a1 + 24);
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::~UsdAbc_AlembicDataReader(v1);
    operator delete(v2);
  }
}

uint64_t sub_20C728B7C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542BB0))
    return a1 + 24;
  else
    return 0;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *sub_20C728BBC(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *result;
  void *v4;

  result = sub_20C728C04();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::~UsdAbc_AlembicContextFlagNames_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *sub_20C728C04()
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::UsdAbc_AlembicContextFlagNames_StaticTokenType(v0);
  return v0;
}

void sub_20C728C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C728C44(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C0E5E30(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_20C728C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::~UsdAbcAlembicFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)((char *)this + 24);
  sub_20BEEB2B8(&v10);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::UsdAbcAlembicFileFormatTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "abc", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "usd", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *)this;
}

void sub_20C728EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C728FB4()
{
  uint64_t *v0;

  v0 = sub_20C72958C();
  return sub_20C7296AC(v0);
}

pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::UsdAbcAlembicFileFormat(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *this)
{
  uint64_t *v2;
  unsigned int **v3;
  unsigned int **v4;
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v9;

  v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v2)
    v2 = (uint64_t *)sub_20C7297D4(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v3)
    v3 = sub_20C7297D4(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v4)
    v4 = sub_20C7297D4(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  v5 = (uint64_t *)(v3 + 1);
  v6 = (uint64_t *)(v4 + 2);
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v7)
    v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7297D4(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, v5, v6, (uint64_t)EmptyString);
  *(_QWORD *)this = off_24C542BD8;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v9)
    v9 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v9, (uint64_t *)this + 14);
  return this;
}

void sub_20C7290D4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v1;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::~UsdAbcAlembicFileFormat(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_24C542BD8;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::~UsdAbcAlembicFileFormat(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::InitData(const void ***a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  sub_20BDEBF8C(v3, a1);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::New(v3, &v4);
  *a2 = v4;
  v4 = 0;
  sub_20C72985C(&v4);
  sub_20BDE9D48((uint64_t)v3, (_QWORD *)v3[1]);
}

void sub_20C7291B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20BDE9D48((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::CanRead(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, uint64_t a2)
{
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::TfToken *FormatId;
  uint64_t v5;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfGetExtension(a2, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v5 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return v5;
    goto LABEL_5;
  }
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
  v5 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(FormatId, (unsigned __int8 *)&__p);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20C729248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::Read(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a3)
{
  uint64_t FileFormatArguments;
  uint64_t v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;

  FileFormatArguments = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(this);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v11, a1, FileFormatArguments);
  v10 = v11;
  sub_20BF1DD04((uint64_t *)&v10);
  v7 = sub_20C729324((uint64_t *)&v10);
  v8 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(v7, a3);
  if (v8)
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(this, (uint64_t *)&v11);
  sub_20C72985C(&v10);
  sub_20C0EA270(&v11);
  return v8;
}

void sub_20C729300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C729324(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAF96DCLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::_ReadDetached(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadAndCopyLayerDataToMemory(a1, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToFile(int a1, pxrInternal__aapl__pxrReserved__::SdfFileFormat *this, std::string *a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD v14[4];
  char v15;
  uint64_t v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::_GetLayerData(&v16, this, this);
  v6 = sub_20C0E9774(&v16);
  if (v7 & 1 | (unint64_t)v6
    || (v14[0] = "usdAbc/alembicFileFormat.cpp",
        v14[1] = "WriteToFile",
        v14[2] = 124,
        v14[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToFile(const SdfLayer &, c"
                 "onst std::string &, const std::string &, const FileFormatArguments &) const",
        v15 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "data", 0)))
  {
    v8 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Write(&v16, a3, a4);
  }
  else
  {
    v8 = 0;
  }
  v9 = v17;
  if (v17)
  {
    v10 = (unsigned int *)(v17 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return v8;
}

void sub_20C729488(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 - 24);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::ReadFromString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_20BFCF6F4((uint64_t *)(a1 + 112));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_20BFCF6F4((uint64_t *)(a1 + 112));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_20BFCF6F4((uint64_t *)(a1 + 112));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, a2, a3, a4);
}

uint64_t *sub_20C72958C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1BA13C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C729660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7296AC(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C542C90;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C729710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C72973C(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C729750@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *)operator new(0x80uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::UsdAbcAlembicFileFormat(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C7297A8(&v4);
}

void sub_20C729794(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7297A8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

unsigned int **sub_20C7297D4(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C72981C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::~UsdAbcAlembicFileFormatTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C72981C()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::UsdAbcAlembicFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C729848(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C72985C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Bracket<std::set<double>>(_QWORD *a1, double *a2, double *a3, double a4)
{
  uint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t *v9;
  double *v10;
  double v11;
  BOOL v12;
  double v13;
  double *v14;
  double *v15;

  v4 = a1[2];
  if (v4)
  {
    v5 = (double *)(a1 + 1);
    v6 = (double *)a1[1];
    if (v6)
    {
      v7 = (double *)(a1 + 1);
      v8 = a1[1];
      do
      {
        v9 = (uint64_t *)(v8 + 8);
        if (*(double *)(v8 + 32) >= a4)
        {
          v9 = (uint64_t *)v8;
          v7 = (double *)v8;
        }
        v8 = *v9;
      }
      while (*v9);
      if (v7 != v5)
      {
        v10 = (double *)*a1;
        v11 = v7[4];
        *a3 = v11;
        v12 = v7 == v10 || v11 == a4;
        if (!v12)
        {
          v13 = *v7;
          if (*(_QWORD *)v7)
          {
            do
            {
              v14 = *(double **)&v13;
              v13 = *(double *)(*(_QWORD *)&v13 + 8);
            }
            while (v13 != 0.0);
          }
          else
          {
            do
            {
              v14 = (double *)*((_QWORD *)v7 + 2);
              v12 = *(_QWORD *)v14 == (_QWORD)v7;
              v7 = v14;
            }
            while (v12);
          }
          v11 = v14[4];
        }
        goto LABEL_21;
      }
      do
      {
        v15 = v6;
        v6 = (double *)*((_QWORD *)v6 + 1);
      }
      while (v6);
    }
    else
    {
      do
      {
        v15 = (double *)*((_QWORD *)v5 + 2);
        v12 = *(_QWORD *)v15 == (_QWORD)v5;
        v5 = v15;
      }
      while (v12);
    }
    v11 = v15[4];
    *a3 = v11;
LABEL_21:
    *a2 = v11;
  }
  return v4 != 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__24UsdAbc_AlembicDataReader11TimeSamples7BracketINSt3__13setIdNS3_4lessIdEENS3_9allocatorIdEEEEEEbRKT_dPdSD_(a1, a2, a3, a4);
}

void sub_20C729950()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES);
  }
}

void sub_20C729994()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS);
  }
}

void sub_20C7299D8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
  }
}

void sub_20C729A1C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE);
  }
}

void sub_20C729A60()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::TimeSamples(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::TimeSamples(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BDDF5DC(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BDDF5DC(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::IsEmpty(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *this)
{
  return *(_QWORD *)this == *((_QWORD *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetSize(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *this)
{
  return (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetTimes@<X0>(double **this@<X0>, uint64_t a2@<X8>)
{
  return sub_20C29F5F0(a2, *this, this[1]);
}

double pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::operator[](_QWORD *a1, uint64_t a2)
{
  return *(double *)(*a1 + 8 * a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::AddTo(uint64_t *result, uint64_t **a2)
{
  double *v2;
  double *v3;
  double *v5;

  v2 = (double *)*result;
  v3 = (double *)result[1];
  if ((double *)*result != v3)
  {
    v5 = (double *)(a2 + 1);
    do
    {
      result = sub_20C0E7A88(a2, v5, v2, (uint64_t *)v2);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::FindIndex(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *this, double a2, uint64_t *a3)
{
  double *v3;
  unint64_t v4;
  double *v5;
  unint64_t v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (double *)*((_QWORD *)this + 1);
  if (v3 == *(double **)this)
  {
    v5 = (double *)*((_QWORD *)this + 1);
  }
  else
  {
    v4 = ((uint64_t)v3 - *(_QWORD *)this) >> 3;
    v5 = *(double **)this;
    do
    {
      v6 = v4 >> 1;
      v7 = &v5[v4 >> 1];
      v9 = *v7;
      v8 = v7 + 1;
      v4 += ~(v4 >> 1);
      if (v9 < a2)
        v5 = v8;
      else
        v4 = v6;
    }
    while (v4);
  }
  if (v3 == v5 || *v5 != a2)
    return 0;
  *a3 = ((uint64_t)v5 - *(_QWORD *)this) >> 3;
  return 1;
}

BOOL sub_20C729C88(double **a1, double *a2, double *a3, double a4)
{
  double *v4;
  double *v5;
  unint64_t v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  double v12;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = v5 - v4;
    v7 = *a1;
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[v6 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v6 += ~(v6 >> 1);
      if (v11 < a4)
        v7 = v10;
      else
        v6 = v8;
    }
    while (v6);
    if (v7 == v5)
    {
      v12 = *(v5 - 1);
      *a3 = v12;
    }
    else
    {
      v12 = *v7;
      *a3 = *v7;
      if (v7 != v4 && v12 != a4)
        v12 = *(v7 - 1);
    }
    *a2 = v12;
  }
  return v4 != v5;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::UsdAbc_AlembicDataReader(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  char *v2;
  unsigned __int8 v3;

  v2 = (char *)operator new(0xD0uLL);
  *(_QWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_20CAF9730;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  *((_QWORD *)v2 + 5) = 0;
  *((_DWORD *)v2 + 12) = 2;
  sub_20BDDC0E4((_QWORD *)v2 + 7, "");
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = 0;
  *((_QWORD *)v2 + 12) = 0;
  *((_QWORD *)v2 + 13) = v2 + 112;
  *((_QWORD *)v2 + 17) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 16) = v2 + 136;
  *((_QWORD *)v2 + 21) = 0;
  *((_QWORD *)v2 + 20) = 0;
  *((_QWORD *)v2 + 18) = 0;
  *((_QWORD *)v2 + 19) = v2 + 160;
  *((_QWORD *)v2 + 25) = 0;
  *((_QWORD *)v2 + 24) = 0;
  *((_QWORD *)v2 + 23) = v2 + 192;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_25498CA88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498CA88))
  {
    sub_20C72D5B8();
    __cxa_atexit((void (*)(void *))sub_20C72EAB8, &unk_25498CA58, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CA88);
  }
  *((_QWORD *)v2 + 12) = &unk_25498CA58;
  return this;
}

void sub_20C729E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v12;

  __cxa_guard_abort(&qword_25498CA88);
  if (*(char *)(v10 + 31) < 0)
    operator delete(*a10);
  v12 = *(_QWORD *)v10;
  *(_QWORD *)v10 = 0;
  if (v12)
    sub_20C75ED3C(v10, v12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::~UsdAbc_AlembicDataReader(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  uint64_t v2;

  sub_20C72BB58(*(_QWORD *)this);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    sub_20C75ED3C((uint64_t)this, v2);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::Close(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  sub_20C72BB58(*(_QWORD *)this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::Open(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  _BYTE *v21;
  pxrInternal__aapl__pxrReserved__ *v22;
  int *v23;
  int ConcurrencyLimit;
  int v25;
  _BYTE *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  void **v37;
  char v38;
  int v39;
  void **v40;
  char *v41;
  void **v42;
  void *v43;
  pxrInternal__aapl__pxrReserved__::SdfPath *v44;
  _DWORD *v45;
  uint64_t *v46;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v47;
  uint64_t *v48;
  uint64_t NumChildren;
  uint64_t i;
  uint64_t ChildHeader;
  uint64_t Name;
  uint64_t PropertyHeader;
  uint64_t v54;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v60;
  uint64_t v61;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v62;
  uint64_t *v63;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD **v92;
  _QWORD *v93;
  uint64_t **v94;
  uint64_t **v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD **v99;
  _QWORD *v100;
  _QWORD **v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  char v109;
  uint64_t *v110;
  pxrInternal__aapl__pxrReserved__::SdfPath *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  pxrInternal__aapl__pxrReserved__::SdfPath *v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t *v128;
  const void **v129;
  char *v130;
  _BYTE *v131;
  __int128 v132;
  uint64_t *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD **v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  int v142;
  BOOL v143;
  char *v145;
  char v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t *v152;
  uint64_t *v153;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v154;
  _QWORD *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t *v165;
  const char *v166;
  _QWORD *v167;
  _QWORD *v168;
  unint64_t v169;
  int64x2_t v170;
  const char *v171;
  unsigned int *v172;
  unsigned int v173;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  char v178;
  _QWORD *v179;
  _DWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  uint64_t *NameToken;
  uint64_t *v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  char *v190;
  uint64_t *v191;
  int64x2_t *v192;
  int64x2_t *v193;
  uint64_t v194;
  uint64_t v195;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  BOOL v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t v209;
  BOOL v210;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v211;
  uint64_t v212;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v217;
  pxrInternal__aapl__pxrReserved__::TfToken *v218;
  uint64_t v219;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v220;
  uint64_t v221;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v222;
  uint64_t v223;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v224;
  uint64_t v225;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v226;
  uint64_t v227;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v228;
  unsigned int *v229;
  unsigned int v230;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t **v236;
  uint64_t *v237;
  _QWORD *v238[2];
  unint64_t v239;
  _QWORD *v240[2];
  void *v241;
  int64x2_t v242;
  const char *v243;
  _QWORD *v244;
  char **v245;
  char *v246[2];
  __int128 __p;
  uint64_t v248;
  const char *v249;
  unint64_t *v250;
  int v251;
  int v252;
  void *v253[2];
  uint64_t v254;
  void *v255[2];
  uint64_t v256;
  void *v257[2];
  uint64_t v258;
  void *v259[2];
  uint64_t v260;
  unsigned int v261;
  void *v262[2];
  uint64_t v263;
  char *v264;
  std::string v265;
  uint64_t v266;
  int v267;
  _QWORD v268[2];
  int v269;
  int v270;
  uint64_t v271;
  _BYTE *v272;
  unint64_t v273;
  uint64_t v274;
  char v275;
  int v276;
  int v277;
  std::string __dst;

  if (*(char *)(a1 + 31) < 0)
  {
    **(_BYTE **)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 31) = 0;
  }
  v6 = a1 + 8;
  v7 = *(_QWORD *)a1;
  sub_20C72BB58(*(_QWORD *)a1);
  v271 = 0;
  v272 = 0;
  v273 = 0;
  sub_20BDDC0E4(&__p, "abcLayers");
  v8 = sub_20BDEEBA4(a3, (const void **)&__p);
  if (SHIBYTE(v248) < 0)
    operator delete((void *)__p);
  v233 = a3 + 8;
  v235 = v7;
  if (a3 + 8 != v8)
  {
    sub_20BDDC0E4(&__p, ",");
    pxrInternal__aapl__pxrReserved__::TfStringSplit((std::string *)(v8 + 56), (char *)&__p, (uint64_t *)&v241);
    if (SHIBYTE(v248) < 0)
      operator delete((void *)__p);
    v9 = v241;
    v10 = (_QWORD *)v242.i64[0];
    if (v241 != (void *)v242.i64[0])
    {
      v11 = v272;
      do
      {
        if ((unint64_t)v11 >= v273)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v271] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          if (0x5555555555555556 * ((uint64_t)(v273 - v271) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(v273 - v271) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v273 - v271) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v250 = &v273;
          if (v15)
            v16 = (char *)sub_20BDE4FF4((uint64_t)&v273, v15);
          else
            v16 = 0;
          v17 = &v16[24 * v13];
          *(_QWORD *)&__p = v16;
          *((_QWORD *)&__p + 1) = v17;
          v249 = &v16[24 * v15];
          v18 = *(_OWORD *)v9;
          *((_QWORD *)v17 + 2) = v9[2];
          *(_OWORD *)v17 = v18;
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          v248 = (uint64_t)(v17 + 24);
          sub_20BDF34C0(&v271, &__p);
          v11 = v272;
          sub_20BDF3648((uint64_t)&__p);
        }
        else
        {
          v12 = *(_OWORD *)v9;
          *((_QWORD *)v11 + 2) = v9[2];
          *(_OWORD *)v11 = v12;
          v11 += 24;
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
        }
        v272 = v11;
        v9 += 3;
      }
      while (v9 != v10);
    }
    *(_QWORD *)&__p = &v241;
    sub_20BDE5038((void ***)&__p);
    v6 = a1 + 8;
  }
  v19 = (__int128 *)v272;
  if ((unint64_t)v272 >= v273)
  {
    v21 = (_BYTE *)sub_20BF3E2A4(&v271, a2);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20BDDBFAC(v272, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v20 = *a2;
      *((_QWORD *)v272 + 2) = *((_QWORD *)a2 + 2);
      *v19 = v20;
    }
    v21 = (char *)v19 + 24;
  }
  v272 = v21;
  v22 = (pxrInternal__aapl__pxrReserved__ *)Alembic::AbcCoreFactory::v12::IFactory::IFactory((uint64_t)v268);
  v267 = 0;
  v270 = 0;
  v23 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS);
  if (!v23)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS);
    v23 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS);
  }
  ConcurrencyLimit = pxrInternal__aapl__pxrReserved__::WorkGetConcurrencyLimit(v22);
  v25 = *v23;
  if (ConcurrencyLimit < *v23)
    v25 = ConcurrencyLimit;
  v268[1] = v25;
  v26 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP);
  if (!v26)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP);
    v26 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP);
  }
  if (!*v26)
    v269 = 0;
  Alembic::AbcCoreFactory::v12::IFactory::getArchive((uint64_t)v268, (uint64_t)&v271, &v267, (uint64_t)&v264);
  v262[0] = 0;
  v262[1] = 0;
  v263 = 0;
  v27 = "Unknown";
  if (v267 == 2)
    v27 = "Layer";
  if (v267 == 1)
    v28 = "Ogawa";
  else
    v28 = v27;
  MEMORY[0x212B929D0](v262, v28);
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v265.__r_.__value_.__l.__size_)
      goto LABEL_48;
LABEL_58:
    v37 = v262;
    if (v263 < 0)
      v37 = (void **)v262[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported format: '%s'", v29, v30, v37);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)v6);
    v38 = 0;
    *(_OWORD *)v6 = __p;
    *(_QWORD *)(v6 + 16) = v248;
    goto LABEL_354;
  }
  if (*((_BYTE *)&v265.__r_.__value_.__s + 23))
    goto LABEL_58;
LABEL_48:
  if (!v266)
    goto LABEL_58;
  v261 = 0;
  v259[0] = 0;
  v259[1] = 0;
  v260 = 0;
  v257[0] = 0;
  v257[1] = 0;
  v258 = 0;
  v255[0] = 0;
  v255[1] = 0;
  v256 = 0;
  v253[0] = 0;
  v253[1] = 0;
  v254 = 0;
  Alembic::Abc::v12::GetArchiveInfo(&v264, (uint64_t)v259, (uint64_t)v257, &v261, (uint64_t)v255, (uint64_t)v253);
  v33 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!v33)
    v33 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  v34 = *(_QWORD **)(v7 + 32);
  if (v34)
  {
    v35 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v36 = v34[4] & 0xFFFFFFFFFFFFFFF8;
      if (v35 >= v36)
      {
        if (v36 >= v35)
        {
          *(_QWORD *)&__p = "usdAbc/alembicReader.cpp";
          *((_QWORD *)&__p + 1) = "Open";
          v248 = 936;
          v249 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReaderContext::Open(const std::string &,"
                 " std::string *, const SdfFileFormat::FileFormatArguments &)";
          LOBYTE(v250) = 0;
          v39 = SHIBYTE(v263);
          v40 = (void **)v262[0];
          pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_FormatAlembicVersion((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil *)v261, v31, v32);
          v42 = v262;
          if (v39 < 0)
            v42 = v40;
          if (v242.i8[15] >= 0)
            v43 = &v241;
          else
            v43 = v241;
          pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Opened %s file written by Alembic %s", v41, v42, v43);
          if (v242.i8[15] < 0)
            operator delete(v241);
          break;
        }
        ++v34;
      }
      v34 = (_QWORD *)*v34;
    }
    while (v34);
  }
  *(_DWORD *)(v7 + 48) = (_DWORD)v264;
  std::string::operator=((std::string *)(v7 + 56), &v265);
  v234 = a3;
  v232 = (uint64_t *)a2;
  v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDE881C((_QWORD *)(v7 + 80), &v266);
  v45 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v44);
  sub_20BFD6E54(&v251, v45);
  sub_20BFD6EA4(&v252, v45 + 1);
  v236 = (uint64_t **)(v7 + 152);
  v46 = sub_20C7395F0((uint64_t **)(v7 + 152), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v251);
  *(_QWORD *)(v7 + 176) = v46;
  v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v47)
    v47 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  *(_QWORD *)&__p = (char *)v47 + 136;
  v48 = sub_20C73B2A8((uint64_t **)v46 + 16, (uint64_t *)v47 + 17, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p);
  sub_20C1D1478((uint64_t)(v48 + 5), (uint64_t)v253);
  Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)(v7 + 48), (uint64_t)&__p);
  v246[0] = 0;
  v246[1] = 0;
  v245 = v246;
  NumChildren = Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)&__p);
  if (NumChildren)
  {
    for (i = 0; i != NumChildren; ++i)
    {
      ChildHeader = Alembic::Abc::v12::IObject::getChildHeader((Alembic::Abc::v12::IObject *)&__p);
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
      sub_20BE5206C((uint64_t)&v241, (uint64_t)&__p, ChildHeader, (uint64_t **)&__dst);
      Name = Alembic::Abc::v12::IObject::getName((Alembic::Abc::v12::IObject *)&v241);
      sub_20C73F0B0(Name, " _", (uint64_t)&v245, (uint64_t)&__dst);
      sub_20BE74FC0((uint64_t **)&v245, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v241);
    }
  }
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&__p, (uint64_t)&v241);
  sub_20BDDC0E4(&__dst, "Usd");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v241);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v241);
  if (PropertyHeader)
  {
    v54 = *(_QWORD *)(v7 + 176);
    v55 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v55)
      v55 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v241 = (char *)v55 + 440;
    v56 = sub_20C73B2A8((uint64_t **)(v54 + 128), (uint64_t *)v55 + 55, (uint64_t)&unk_20CAC184C, (uint64_t **)&v241);
    v57 = v56;
    v58 = v56[6];
    if (v58 && (v56[6] & 3) != 3)
      (*(void (**)(uint64_t *))((v58 & 0xFFFFFFFFFFFFFFF8) + 32))(v56 + 5);
    v57[5] = 0x4038000000000000;
    v57[6] = (uint64_t)&unk_24C52064B;
    v59 = *(_QWORD *)(v7 + 176);
    v60 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v60)
      v60 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C75BF3C((pxrInternal__aapl__pxrReserved__::TfToken *)(PropertyHeader + 32), (uint64_t **)(v59 + 128), (uint64_t *)v60 + 55);
    v61 = *(_QWORD *)(v7 + 176);
    v62 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v62)
      v62 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v241 = (char *)v62 + 440;
    v63 = sub_20C73B2A8((uint64_t **)(v61 + 128), (uint64_t *)v62 + 55, (uint64_t)&unk_20CAC184C, (uint64_t **)&v241);
    *(_QWORD *)(v7 + 8) = *(_QWORD *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)(v63 + 5));
  }
  v64 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!v64)
    v64 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  v65 = *(_QWORD **)(v7 + 32);
  if (v65)
  {
    v66 = *((_QWORD *)v64 + 1) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v67 = v65[4] & 0xFFFFFFFFFFFFFFF8;
      if (v66 >= v67)
      {
        if (v67 >= v66)
          goto LABEL_213;
        ++v65;
      }
      v65 = (_QWORD *)*v65;
    }
    while (v65);
  }
  v240[0] = 0;
  v240[1] = 0;
  v239 = (unint64_t)v240;
  sub_20C75C0C4((Alembic::Abc::v12::IObject *)&__p, (uint64_t **)&v239);
  v238[0] = 0;
  v238[1] = 0;
  v237 = (uint64_t *)v238;
  v68 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!v68)
    v68 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  v69 = *(_QWORD **)(v7 + 32);
  if (v69)
  {
    v70 = *((_QWORD *)v68 + 3) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v71 = v69[4] & 0xFFFFFFFFFFFFFFF8;
      if (v70 >= v71)
      {
        if (v71 >= v70)
        {
          v72 = (_QWORD *)v239;
          if ((_QWORD **)v239 != v240)
          {
            do
            {
              v74 = v72 + 4;
              v73 = v72[4];
              if (v73)
              {
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v73 + 32))(&v241);
                v75 = (*(uint64_t (**)(void *))(*(_QWORD *)v241 + 48))(v241);
                v76 = (std::__shared_weak_count *)v242.i64[0];
                if (v242.i64[0])
                {
                  v77 = (unint64_t *)(v242.i64[0] + 8);
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                if (v75 == 1)
                {
                  v79 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v74 + 16))(*v74);
                  if (sub_20C75D744(v79 + 48, 0))
                  {
                    (*(void (**)(void **__return_ptr))(*(_QWORD *)*v74 + 32))(&v241);
                    v80 = (*(uint64_t (**)(void *))(*(_QWORD *)v241 + 16))(v241);
                    v81 = sub_20C740344(v80 + 48, 0);
                    v82 = (std::__shared_weak_count *)v242.i64[0];
                    if (v242.i64[0])
                    {
                      v83 = (unint64_t *)(v242.i64[0] + 8);
                      do
                        v84 = __ldaxr(v83);
                      while (__stlxr(v84 - 1, v83));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                    }
                    if ((v81 & 1) != 0)
                    {
                      v85 = (_QWORD *)v72[6];
                      if (v85 != v72 + 7)
                      {
                        do
                        {
                          (*(void (**)(void **__return_ptr))(*(_QWORD *)v85[4] + 32))(&v241);
                          (*(void (**)(void *))(*(_QWORD *)v241 + 48))(v241);
                          v86 = (std::__shared_weak_count *)v242.i64[0];
                          if (v242.i64[0])
                          {
                            v87 = (unint64_t *)(v242.i64[0] + 8);
                            do
                              v88 = __ldaxr(v87);
                            while (__stlxr(v88 - 1, v87));
                            if (!v88)
                            {
                              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                              std::__shared_weak_count::__release_weak(v86);
                            }
                          }
                          v89 = (_QWORD *)v85[1];
                          if (v89)
                          {
                            do
                            {
                              v90 = v89;
                              v89 = (_QWORD *)*v89;
                            }
                            while (v89);
                          }
                          else
                          {
                            do
                            {
                              v90 = (_QWORD *)v85[2];
                              v200 = *v90 == (_QWORD)v85;
                              v85 = v90;
                            }
                            while (!v200);
                          }
                          v85 = v90;
                        }
                        while (v90 != v72 + 7);
                      }
                      sub_20C215CE8(&v237, v72 + 4, v72 + 4);
                    }
                  }
                }
              }
              v91 = (_QWORD *)v72[1];
              if (v91)
              {
                do
                {
                  v92 = (_QWORD **)v91;
                  v91 = (_QWORD *)*v91;
                }
                while (v91);
              }
              else
              {
                do
                {
                  v92 = (_QWORD **)v72[2];
                  v200 = *v92 == v72;
                  v72 = v92;
                }
                while (!v200);
              }
              v72 = v92;
            }
            while (v92 != v240);
          }
          break;
        }
        ++v69;
      }
      v69 = (_QWORD *)*v69;
    }
    while (v69);
  }
  v93 = (_QWORD *)v239;
  if ((_QWORD **)v239 != v240)
  {
    v94 = (uint64_t **)(v7 + 128);
    v95 = (uint64_t **)(v235 + 112);
    v96 = (_QWORD *)(v235 + 120);
    do
    {
      v97 = v93[4];
      if (v97)
      {
        v98 = v238[0];
        if (!v238[0])
          goto LABEL_153;
        v99 = v238;
        do
        {
          v100 = v98;
          v101 = v99;
          v102 = v98[4];
          v103 = v98 + 1;
          if (v102 >= v97)
          {
            v103 = v100;
            v99 = (_QWORD **)v100;
          }
          v98 = (_QWORD *)*v103;
        }
        while (v98);
        if (v99 == v238)
          goto LABEL_153;
        if (v102 < v97)
          v100 = v101;
        if (v97 >= v100[4])
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v97 + 32))(&v241);
          v112 = (*(uint64_t (**)(void *))(*(_QWORD *)v241 + 16))(v241);
          v113 = (std::__shared_weak_count *)v242.i64[0];
          if (v242.i64[0])
          {
            v114 = (unint64_t *)(v242.i64[0] + 8);
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v104 = v112 + 24;
          v116 = (_QWORD *)v93[6];
          if (v116 != v93 + 7)
          {
            do
            {
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v116[4] + 32))(&v241);
              __dst.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *))(*(_QWORD *)v241 + 16))(v241)
                                                 + 24;
              v117 = sub_20BDDDFDC(v94, (const void **)__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&__dst);
              std::string::operator=((std::string *)(v117 + 7), (const std::string *)v104);
              v118 = (std::__shared_weak_count *)v242.i64[0];
              if (v242.i64[0])
              {
                v119 = (unint64_t *)(v242.i64[0] + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
              v121 = (_QWORD *)v116[1];
              if (v121)
              {
                do
                {
                  v122 = v121;
                  v121 = (_QWORD *)*v121;
                }
                while (v121);
              }
              else
              {
                do
                {
                  v122 = (_QWORD *)v116[2];
                  v200 = *v122 == (_QWORD)v116;
                  v116 = v122;
                }
                while (!v200);
              }
              v116 = v122;
            }
            while (v122 != v93 + 7);
          }
          v109 = 1;
        }
        else
        {
LABEL_153:
          v104 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v97 + 16))(v97) + 24;
          v105 = (_QWORD *)v93[6];
          if (v105 != v93 + 7)
          {
            do
            {
              v241 = (void *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v105[4] + 16))(v105[4]) + 24);
              v106 = sub_20BDDDFDC(v94, (const void **)v241, (uint64_t)&unk_20CAC184C, (__int128 **)&v241);
              std::string::operator=((std::string *)(v106 + 7), (const std::string *)v104);
              v107 = (_QWORD *)v105[1];
              if (v107)
              {
                do
                {
                  v108 = v107;
                  v107 = (_QWORD *)*v107;
                }
                while (v107);
              }
              else
              {
                do
                {
                  v108 = (_QWORD *)v105[2];
                  v200 = *v108 == (_QWORD)v105;
                  v105 = v108;
                }
                while (!v200);
              }
              v105 = v108;
            }
            while (v108 != v93 + 7);
          }
          v109 = 0;
        }
        v241 = (void *)v104;
        v110 = sub_20BDDDFDC(v94, (const void **)v104, (uint64_t)&unk_20CAC184C, (__int128 **)&v241);
        std::string::operator=((std::string *)(v110 + 7), (const std::string *)v104);
        v111 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::string::rfind((const std::string *)v104, 47, 0xFFFFFFFFFFFFFFFFLL);
        if (v111 == (pxrInternal__aapl__pxrReserved__::SdfPath *)-1)
        {
          if (*(char *)(v104 + 23) < 0)
            v111 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(&__dst, *(void **)v104, *(_QWORD *)(v104 + 8));
          else
            __dst = *(std::string *)v104;
        }
        else
        {
          v111 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::string::basic_string(&__dst, (const std::string *)v104, (std::string::size_type)v111 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v241);
        }
        v123 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v111);
        sub_20C73F0B0((uint64_t)&__dst, " _", (uint64_t)&v245, (uint64_t)&v241);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v274);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v123, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v274, &v276);
        if ((v274 & 7) != 0)
        {
          v124 = (unsigned int *)(v274 & 0xFFFFFFFFFFFFFFF8);
          do
            v125 = __ldxr(v124);
          while (__stlxr(v125 - 2, v124));
        }
        if (v242.i8[15] < 0)
          operator delete(v241);
        sub_20BFD6E54(&v274, &v276);
        sub_20BFD6EA4((_DWORD *)&v274 + 1, &v277);
        v275 = v109;
        v126 = *v95;
        v127 = (uint64_t **)(v235 + 112);
        v128 = (uint64_t *)(v235 + 112);
        if (!*v95)
          goto LABEL_198;
        v127 = (uint64_t **)(v235 + 112);
        while (1)
        {
          while (1)
          {
            v128 = v126;
            v129 = (const void **)(v126 + 4);
            if (!sub_20BDDDF74((uint64_t)v96, (const void **)v104, (const void **)v126 + 4))
              break;
            v126 = (uint64_t *)*v128;
            v127 = (uint64_t **)v128;
            if (!*v128)
              goto LABEL_198;
          }
          if (!sub_20BDDDF74((uint64_t)v96, v129, (const void **)v104))
            break;
          v127 = (uint64_t **)(v128 + 1);
          v126 = (uint64_t *)v128[1];
          if (!v126)
            goto LABEL_198;
        }
        if (!*v127)
        {
LABEL_198:
          v130 = (char *)operator new(0x48uLL);
          v241 = v130;
          v242.i64[0] = v235 + 112;
          v242.i8[8] = 0;
          v131 = v130 + 32;
          if (*(char *)(v104 + 23) < 0)
          {
            sub_20BDDBFAC(v131, *(void **)v104, *(_QWORD *)(v104 + 8));
            v133 = (uint64_t *)v241;
          }
          else
          {
            v132 = *(_OWORD *)v104;
            *((_QWORD *)v130 + 6) = *(_QWORD *)(v104 + 16);
            *(_OWORD *)v131 = v132;
            v133 = (uint64_t *)v130;
          }
          sub_20BFD38A4((_DWORD *)v130 + 14, &v274);
          sub_20BFD38DC((_DWORD *)v130 + 15, (_DWORD *)&v274 + 1);
          v130[64] = v275;
          v242.i8[8] = 1;
          *v133 = 0;
          v133[1] = 0;
          v133[2] = (uint64_t)v128;
          *v127 = v133;
          v134 = **(_QWORD **)(v235 + 104);
          if (v134)
          {
            *(_QWORD *)(v235 + 104) = v134;
            v133 = *v127;
          }
          sub_20BDDE208(*v95, v133);
          ++*v96;
          v241 = 0;
          sub_20C75D8C8((uint64_t)&v241);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v274 + 1);
        sub_20BFD265C(&v274);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v277);
        sub_20BFD265C(&v276);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v135 = (_QWORD *)v93[1];
      if (v135)
      {
        do
        {
          v136 = (_QWORD **)v135;
          v135 = (_QWORD *)*v135;
        }
        while (v135);
      }
      else
      {
        do
        {
          v136 = (_QWORD **)v93[2];
          v200 = *v136 == v93;
          v93 = v136;
        }
        while (!v200);
      }
      v93 = v136;
    }
    while (v136 != v240);
  }
  sub_20C2162E8((uint64_t)&v237, v238[0]);
  sub_20C75D954((uint64_t)&v239, v240[0]);
  v7 = v235;
LABEL_213:
  v239 = 0;
  sub_20BDDC0E4(&v241, "abcReRoot");
  v138 = sub_20BDEEBA4(v234, (const void **)&v241);
  if (v242.i8[15] < 0)
    operator delete(v241);
  if (v233 != v138)
  {
    v141 = *(char **)(v138 + 56);
    v140 = (char *)(v138 + 56);
    v139 = v141;
    if (v140[23] >= 0)
      v139 = v140;
    v142 = *v139;
    if (*v139)
      v143 = (v142 - 48) >= 0xA;
    else
      v143 = 0;
    if (v143 && (v142 == 95 || (v142 & 0xFFFFFFDF) - 65 <= 0x19))
    {
      v145 = v139;
      do
      {
        v147 = *v145++;
        v146 = v147;
        v148 = (v147 & 0xFFFFFFDF) - 65;
        v149 = v147 - 48;
      }
      while (v147 == 95 || v148 < 0x1A || v149 < 0xA);
      if (!v146)
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v241);
        if ((v239 & 7) != 0)
        {
          v172 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
          do
            v173 = __ldxr(v172);
          while (__stlxr(v173 - 2, v172));
        }
        v239 = (unint64_t)v241;
        if (v241)
          goto LABEL_242;
        goto LABEL_265;
      }
    }
    v241 = "usdAbc/alembicReader.cpp";
    v242.i64[0] = (uint64_t)"Open";
    v242.i64[1] = 998;
    v243 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReaderContext::Open(const std::string &, std::"
           "string *, const SdfFileFormat::FileFormatArguments &)";
    LOBYTE(v244) = 0;
    if (*((char *)v232 + 23) >= 0)
      v152 = v232;
    else
      v152 = (uint64_t *)*v232;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v241, (pxrInternal__aapl__pxrReserved__ *)"[usdAbc] Ignoring re-root because identifer '%s' is not valid (%s).", v137, v139, v152);
  }
  if (v239)
  {
LABEL_242:
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v251, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v239, &__dst);
    v153 = sub_20C7395F0(v236, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
    v154 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v154)
      v154 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    sub_20BF32220(v153, (_QWORD *)v154 + 9);
    *((_DWORD *)v153 + 14) = 0;
    sub_20C75C288(v7, (Alembic::Abc::v12::IObject *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst, v153);
    v155 = *(_QWORD **)(v7 + 176);
    v156 = (unint64_t *)v155[2];
    v157 = v155[3];
    if ((unint64_t)v156 >= v157)
    {
      v159 = v155[1];
      v160 = ((uint64_t)v156 - v159) >> 3;
      if ((unint64_t)(v160 + 1) >> 61)
        sub_20BDDF694();
      v161 = v157 - v159;
      v162 = v161 >> 2;
      if (v161 >> 2 <= (unint64_t)(v160 + 1))
        v162 = v160 + 1;
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
        v163 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v163 = v162;
      v244 = v155 + 3;
      if (v163)
        v164 = (char *)sub_20BDDF6A8((uint64_t)(v155 + 3), v163);
      else
        v164 = 0;
      v165 = (unint64_t *)&v164[8 * v160];
      v166 = &v164[8 * v163];
      v243 = v166;
      *v165 = v239;
      v158 = v165 + 1;
      v239 = 0;
      v242.i64[1] = (uint64_t)(v165 + 1);
      v168 = (_QWORD *)v155[1];
      v167 = (_QWORD *)v155[2];
      if (v167 == v168)
      {
        v170 = vdupq_n_s64((unint64_t)v167);
      }
      else
      {
        do
        {
          v169 = *--v167;
          *--v165 = v169;
          *v167 = 0;
        }
        while (v167 != v168);
        v170 = *(int64x2_t *)(v155 + 1);
        v158 = (_QWORD *)v242.i64[1];
        v166 = v243;
      }
      v155[1] = v165;
      v155[2] = v158;
      v242 = v170;
      v171 = (const char *)v155[3];
      v155[3] = v166;
      v243 = v171;
      v241 = (void *)v170.i64[0];
      sub_20BF1EE98((uint64_t)&v241);
    }
    else
    {
      *v156 = v239;
      v158 = v156 + 1;
      v239 = 0;
    }
    v155[2] = v158;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst.__r_.__value_.__r.__words + 1);
    sub_20BFD265C(&__dst);
    goto LABEL_266;
  }
LABEL_265:
  sub_20C75C288(v7, (Alembic::Abc::v12::IObject *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v251, *(_QWORD **)(v7 + 176));
LABEL_266:
  if (*(_QWORD *)(v7 + 120))
  {
    v174 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v174)
      v174 = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    v175 = *(_QWORD **)(v7 + 32);
    if (v175)
    {
      v176 = *((_QWORD *)v174 + 2) & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v177 = v175[4] & 0xFFFFFFFFFFFFFFF8;
        if (v176 >= v177)
        {
          if (v177 >= v176)
          {
            v178 = 0;
            goto LABEL_277;
          }
          ++v175;
        }
        v175 = (_QWORD *)*v175;
      }
      while (v175);
    }
    v178 = 1;
LABEL_277:
    v242 = 0uLL;
    v241 = &v242;
    v179 = *(_QWORD **)(v7 + 104);
    if (v179 != (_QWORD *)(v7 + 112))
    {
      do
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v179 + 7);
        v180 = sub_20C75DF40((uint64_t **)&v241, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v179 + 7), (uint64_t)&unk_20CAC184C, &__dst);
        std::string::operator=((std::string *)(v180 + 10), (const std::string *)(v179 + 4));
        v181 = (_QWORD *)v179[1];
        if (v181)
        {
          do
          {
            v182 = v181;
            v181 = (_QWORD *)*v181;
          }
          while (v181);
        }
        else
        {
          do
          {
            v182 = (_QWORD *)v179[2];
            v200 = *v182 == (_QWORD)v179;
            v179 = v182;
          }
          while (!v200);
        }
        v179 = v182;
      }
      while (v182 != (_QWORD *)(v7 + 112));
      v183 = (char *)v241;
      if (v241 != &v242)
      {
        do
        {
          v184 = *(_QWORD *)(v7 + 176);
          NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v183 + 32));
          v186 = *(uint64_t **)(v184 + 16);
          if ((unint64_t)v186 >= *(_QWORD *)(v184 + 24))
          {
            v190 = sub_20BFCA068((char **)(v184 + 8), NameToken);
          }
          else
          {
            v187 = *NameToken;
            *v186 = *NameToken;
            if ((v187 & 7) != 0)
            {
              v188 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
              do
                v189 = __ldxr(v188);
              while (__stxr(v189 + 2, v188));
              if ((v189 & 1) == 0)
                *v186 &= 0xFFFFFFFFFFFFFFF8;
            }
            v190 = (char *)(v186 + 1);
          }
          *(_QWORD *)(v184 + 16) = v190;
          v191 = sub_20C7395F0(v236, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v183 + 32));
          std::string::operator=((std::string *)(v191 + 23), (const std::string *)(v183 + 40));
          *((_BYTE *)sub_20C7395F0(v236, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v183 + 32)) + 208) = v178;
          v192 = (int64x2_t *)*((_QWORD *)v183 + 1);
          if (v192)
          {
            do
            {
              v193 = v192;
              v192 = (int64x2_t *)v192->i64[0];
            }
            while (v192);
          }
          else
          {
            do
            {
              v193 = (int64x2_t *)*((_QWORD *)v183 + 2);
              v200 = v193->i64[0] == (_QWORD)v183;
              v183 = (char *)v193;
            }
            while (!v200);
          }
          v183 = (char *)v193;
        }
        while (v193 != &v242);
      }
    }
    sub_20C75E084((uint64_t)&v241, v242.i64[0]);
  }
  if (*(_QWORD *)(v7 + 200))
  {
    v194 = *(_QWORD *)(v7 + 176);
    v195 = *(_QWORD *)(*(_QWORD *)(v7 + 184) + 32);
    v196 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v196)
      v196 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v241 = (char *)v196 + 320;
    v197 = sub_20C73B2A8((uint64_t **)(v194 + 128), (uint64_t *)v196 + 40, (uint64_t)&unk_20CAC184C, (uint64_t **)&v241);
    v198 = v197;
    v199 = v197[6];
    if (v199)
      v200 = (v197[6] & 3) == 3;
    else
      v200 = 1;
    if (!v200)
      (*(void (**)(uint64_t *))((v199 & 0xFFFFFFFFFFFFFFF8) + 32))(v197 + 5);
    v198[6] = (uint64_t)&unk_24C52064B;
    v198[5] = v195;
    v201 = (_QWORD *)(v7 + 192);
    v202 = *(_QWORD **)(v7 + 192);
    if (v202)
    {
      do
      {
        v203 = v202;
        v202 = (_QWORD *)v202[1];
      }
      while (v202);
    }
    else
    {
      do
      {
        v203 = (_QWORD *)v201[2];
        v200 = *v203 == (_QWORD)v201;
        v201 = v203;
      }
      while (v200);
    }
    v204 = v203[4];
    v205 = *(_QWORD *)(v7 + 176);
    v206 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v206)
      v206 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v241 = (char *)v206 + 144;
    v207 = sub_20C73B2A8((uint64_t **)(v205 + 128), (uint64_t *)v206 + 18, (uint64_t)&unk_20CAC184C, (uint64_t **)&v241);
    v208 = v207;
    v209 = v207[6];
    if (v209)
      v210 = (v207[6] & 3) == 3;
    else
      v210 = 1;
    if (!v210)
      (*(void (**)(uint64_t *))((v209 & 0xFFFFFFFFFFFFFFF8) + 32))(v207 + 5);
    v208[6] = (uint64_t)&unk_24C52064B;
    v208[5] = v204;
  }
  v211 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v211)
    v211 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v212 = *(_QWORD *)(v7 + 176);
  v213 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v213)
    v213 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v241 = (char *)v213 + 1184;
  v214 = sub_20C73B2A8((uint64_t **)(v212 + 128), (uint64_t *)v213 + 148, (uint64_t)&unk_20CAC184C, (uint64_t **)&v241);
  sub_20C1D1768(v214 + 5, (uint64_t *)v211 + 168);
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&__p, (uint64_t)&v241);
  sub_20BDDC0E4(&__dst, "Usd");
  v215 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v241);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v241);
  if (v215)
  {
    v216 = *(_QWORD *)(v7 + 176);
    v217 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v217)
      v217 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v218 = (pxrInternal__aapl__pxrReserved__::TfToken *)(v215 + 32);
    sub_20C75BF3C(v218, (uint64_t **)(v216 + 128), (uint64_t *)v217 + 40);
    v219 = *(_QWORD *)(v7 + 176);
    v220 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v220)
      v220 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C75BF3C(v218, (uint64_t **)(v219 + 128), (uint64_t *)v220 + 18);
    v221 = *(_QWORD *)(v7 + 176);
    v222 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v222)
      v222 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C75BF3C(v218, (uint64_t **)(v221 + 128), (uint64_t *)v222 + 21);
    v223 = *(_QWORD *)(v7 + 176);
    v224 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v224)
      v224 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    sub_20C75D3C0(v218, (uint64_t **)(v223 + 128), (uint64_t *)v224 + 148);
    v225 = *(_QWORD *)(v7 + 176);
    v226 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v226)
      v226 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C75D3C0(v218, (uint64_t **)(v225 + 128), (uint64_t *)v226 + 12);
  }
  v227 = *(_QWORD *)(v7 + 176);
  if (*(_QWORD *)(v227 + 8) != *(_QWORD *)(v227 + 16))
  {
    v228 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v228)
      v228 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v241 = (char *)v228 + 96;
    __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v7 + 176) + 8);
    sub_20C75E0CC((uint64_t **)(v227 + 128), (uint64_t)&unk_20CAC184C, (uint64_t **)&v241, (uint64_t **)&__dst);
  }
  if ((v239 & 7) != 0)
  {
    v229 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v230 = __ldxr(v229);
    while (__stlxr(v230 - 2, v229));
  }
  sub_20BDECAB8((uint64_t)&v245, v246[0]);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v252);
  sub_20BFD265C(&v251);
  if (SHIBYTE(v254) < 0)
    operator delete(v253[0]);
  if (SHIBYTE(v256) < 0)
    operator delete(v255[0]);
  if (SHIBYTE(v258) < 0)
    operator delete(v257[0]);
  if (SHIBYTE(v260) < 0)
    operator delete(v259[0]);
  v38 = 1;
LABEL_354:
  if (SHIBYTE(v263) < 0)
    operator delete(v262[0]);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v264);
  Alembic::AbcCoreFactory::v12::IFactory::~IFactory((Alembic::AbcCoreFactory::v12::IFactory *)v268);
  *(_QWORD *)&__p = &v271;
  sub_20BDE5038((void ***)&__p);
  return (v38 & 1) != 0;
}

void sub_20C72BB44()
{
  __cxa_end_catch();
  JUMPOUT(0x20C72BB4CLL);
}

void sub_20C72BB58(uint64_t a1)
{
  _QWORD *v2;
  std::recursive_mutex *v3;
  int v4;
  std::string v5;
  uint64_t v6[2];

  v2 = (_QWORD *)(a1 + 160);
  sub_20C75E278(*(char **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = v2;
  *v2 = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  sub_20BE6100C(a1 + 184, *(_QWORD **)(a1 + 192));
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20C75E378(a1 + 104, *(_QWORD **)(a1 + 112));
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_20BDE9D48(a1 + 128, *(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(std::recursive_mutex **)a1;
  if (*(_QWORD *)a1)
    std::recursive_mutex::lock(*(std::recursive_mutex **)a1);
  v4 = 2;
  sub_20BDDC0E4(&v5, "");
  v6[0] = 0;
  v6[1] = 0;
  *(_DWORD *)(a1 + 48) = 2;
  std::string::operator=((std::string *)(a1 + 56), &v5);
  sub_20BDE881C((_QWORD *)(a1 + 80), v6);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v4);
  *(_QWORD *)a1 = 0;
  if (v3)
    std::recursive_mutex::unlock(v3);
}

void sub_20C72BC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&a9);
  if (v9)
    std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetErrors@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[31] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a2, *((void **)this + 1), *((_QWORD *)this + 2));
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
  return this;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  uint64_t **v3;

  v3 = (uint64_t **)(*(_QWORD *)this + 24);
  if (a3)
    return sub_20C129930((uint64_t)v3, a2, (uint64_t *)a2);
  else
    return (uint64_t *)sub_20C75E3C0(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)sub_20C75E404(*(_QWORD *)this, a2);
  if (result)
  {
    v4 = result;
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2) || sub_20C75E4C4(v4, a2) != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetSpecType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)this;
  result = (uint64_t)sub_20C75E404(*(_QWORD *)this, a2);
  if (result)
  {
    v5 = result;
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
    {
      if (v5 == *(_QWORD *)(v3 + 176))
        return 7;
      else
        return 6;
    }
    else
    {
      return sub_20C75E4C4(v5, a2) != 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  v4 = *a1;
  v7 = 0;
  if (a4)
  {
    v7 = 2;
    v6 = a4;
  }
  return sub_20C72BDC0(v4, a2, a3, (uint64_t)&v6);
}

uint64_t sub_20C72BDC0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  _QWORD *v19;
  __int128 v20;
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t *v50;
  unsigned int *v52;
  void *__p[2];
  uint64_t v54;
  int v55;
  int v56;
  __int128 v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD **v63;
  void **v64;
  int v65;
  std::type_info ***v66;
  _QWORD *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::type_info **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[4];

  v79[3] = *MEMORY[0x24BDAC8D0];
  v8 = sub_20C75E404(a1, a2);
  if (!v8)
    return 0;
  v9 = (uint64_t)v8;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
  {
    v23 = sub_20C75E4C4(v9, a2);
    if (!v23)
      return 0;
    v24 = (uint64_t)v23;
    v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v25)
      v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 11) & 0xFFFFFFFFFFFFFFF8))
    {
      if (!*(_BYTE *)(v24 + 56) && *(_QWORD *)(v24 + 32) != *(_QWORD *)(v24 + 40))
      {
        v72 = 0;
        v73 = 0;
        LODWORD(v74) = 2;
        return sub_20C75E528((std::recursive_mutex **)a1, v24, (uint64_t)&v72, a4);
      }
    }
    else
    {
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 54) & 0xFFFFFFFFFFFFFFF8))
      {
        if (*(_BYTE *)(v24 + 56))
        {
          v35 = 1;
          if (*(_DWORD *)(a4 + 8))
          {
            v70 = 0;
            v65 = 1;
            v64 = &v69;
            v73 = 0;
            v74 = 0;
            v72 = (unint64_t)&v73;
            v38 = *(_QWORD *)(v24 + 40) - *(_QWORD *)(v24 + 32);
            if (v38)
            {
              v39 = 0;
              v40 = v38 >> 3;
              do
              {
                __p[0] = v39;
                __p[1] = 0;
                LODWORD(v54) = 2;
                if (sub_20C75E528((std::recursive_mutex **)a1, v24, (uint64_t)__p, (uint64_t)&v64))
                {
                  v63 = *(_QWORD ***)(*(_QWORD *)(v24 + 32) + 8 * (_QWORD)v39);
                  __p[0] = &v63;
                  v41 = sub_20C0E7D0C((uint64_t **)&v72, (double *)&v63, (uint64_t)&unk_20CAC184C, (uint64_t **)__p);
                  sub_20BF4A9BC(v41 + 5, &v69);
                }
                v39 = (char *)v39 + 1;
              }
              while ((void *)v40 != v39);
            }
            sub_20BFECEF8((uint64_t *)&v66, (uint64_t)&v72);
            v35 = sub_20C75E5E0(a4, (uint64_t)&v66);
            sub_20BFED2B4((uint64_t)&v66, v67);
            sub_20BFED2B4((uint64_t)&v72, v73);
            sub_20BF4C2D8((uint64_t)&v69);
          }
          return v35;
        }
      }
      else
      {
        v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v27)
          v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 56) & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v24, &v52);
          v35 = sub_20C73D728(a4, (uint64_t)&v52);
          if ((v52 & 7) != 0)
          {
            v45 = (unsigned int *)((unint64_t)v52 & 0xFFFFFFFFFFFFFFF8);
            do
              v46 = __ldxr(v45);
            while (__stlxr(v46 - 2, v45));
          }
          return v35;
        }
        v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v28)
          v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v28 + 58) & 0xFFFFFFFFFFFFFFF8))
          return sub_20C75E630(a4, *(unsigned __int8 *)(v24 + 57));
      }
    }
    v42 = sub_20C0D8030(v24 + 8, a3);
    v43 = (_QWORD *)(v24 + 16);
    goto LABEL_95;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v10)
    v10 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = *(uint64_t **)(v9 + 8);
    v31 = *(uint64_t **)(v9 + 16);
    if (v30 != v31)
      goto LABEL_81;
  }
  if (*(_QWORD *)(a1 + 176) == v9)
    goto LABEL_94;
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    v32 = *(_QWORD *)v9;
    v72 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        v72 = (unint64_t)v33;
    }
    v35 = sub_20C73D728(a4, (uint64_t)&v72);
    if ((v72 & 7) != 0)
    {
      v36 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    return v35;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12)
    v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(_BYTE *)(v9 + 88))
      goto LABEL_94;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    sub_20BFE538C(&v72, *(uint64_t **)(v9 + 64), *(uint64_t **)(v9 + 72), (uint64_t)(*(_QWORD *)(v9 + 72) - *(_QWORD *)(v9 + 64)) >> 3);
    v44 = sub_20C75E828(a4, (uint64_t)&v72);
LABEL_82:
    v35 = v44;
    __p[0] = &v72;
    sub_20BEEB2B8((void ***)__p);
    return v35;
  }
  v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13)
    v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 34) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(_BYTE *)(v9 + 120))
      goto LABEL_94;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    sub_20BFE538C(&v72, *(uint64_t **)(v9 + 96), *(uint64_t **)(v9 + 104), (uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3);
    v44 = sub_20C75E828(a4, (uint64_t)&v72);
    goto LABEL_82;
  }
  v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14)
    v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 39) & 0xFFFFFFFFFFFFFFF8))
    return sub_20C75E878(a4, *(_DWORD *)(v9 + 56));
  v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v15)
    v15 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = *(uint64_t **)(v9 + 32);
    v31 = *(uint64_t **)(v9 + 40);
    if (v30 != v31)
    {
LABEL_81:
      v72 = 0;
      v73 = 0;
      v74 = 0;
      sub_20BFE538C(&v72, v30, v31, v31 - v30);
      v44 = sub_20C75E828(a4, (uint64_t)&v72);
      goto LABEL_82;
    }
    goto LABEL_94;
  }
  v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16)
    v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v16 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v17 + 25) & 0xFFFFFFFFFFFFFFF8))
    {
      v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v18)
        v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 35) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v9 + 176)))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)&v72);
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v64, 0.0, 1.0);
        v63 = 0;
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, &v69, v9 + 176, &v64, &v63);
        v19 = v67;
        if ((unint64_t)v67 >= v68)
        {
          v22 = (_QWORD *)sub_20C12E84C((uint64_t *)&v66, (__int128 *)__p);
        }
        else
        {
          v20 = *(_OWORD *)__p;
          v67[2] = v54;
          *(_OWORD *)v19 = v20;
          __p[1] = 0;
          v54 = 0;
          __p[0] = 0;
          sub_20BFD38A4((_DWORD *)v19 + 6, &v55);
          sub_20BFD38DC((_DWORD *)v19 + 7, &v56);
          *((_OWORD *)v19 + 2) = v57;
          v21 = v58;
          v58 = 0;
          v19[6] = v21;
          v22 = v19 + 7;
        }
        v67 = v22;
        sub_20BF49F14(&v58, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
        sub_20BFD265C(&v55);
        if (SHIBYTE(v54) < 0)
          operator delete(__p[0]);
        sub_20BF49F14(&v63, 0);
        if (SHIBYTE(v71) < 0)
          operator delete(v69);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems((unsigned __int8 *)&v72, (__int128 **)&v66);
        sub_20C02BDC4((uint64_t)__p, (uint64_t)&v72);
        v35 = sub_20C75E970(a4, (uint64_t)__p);
        v69 = &v62;
        sub_20C021740((void ***)&v69);
        v69 = &v61;
        sub_20C021740((void ***)&v69);
        v69 = &v60;
        sub_20C021740((void ***)&v69);
        v69 = &v59;
        sub_20C021740((void ***)&v69);
        v69 = &v57;
        sub_20C021740((void ***)&v69);
        v69 = &__p[1];
        sub_20C021740((void ***)&v69);
        v69 = &v66;
        sub_20C021740((void ***)&v69);
        v66 = (std::type_info ***)v79;
        sub_20C021740((void ***)&v66);
        v66 = (std::type_info ***)&v78;
        sub_20C021740((void ***)&v66);
        v66 = (std::type_info ***)&v77;
        sub_20C021740((void ***)&v66);
        v66 = (std::type_info ***)&v76;
        sub_20C021740((void ***)&v66);
        v66 = (std::type_info ***)&v75;
        sub_20C021740((void ***)&v66);
        v66 = &v73;
        sub_20C021740((void ***)&v66);
        return v35;
      }
      goto LABEL_94;
    }
    if (*(char *)(v9 + 207) < 0)
      v48 = *(_QWORD *)(v9 + 192);
    else
      v48 = *(unsigned __int8 *)(v9 + 207);
    if (v48)
      return sub_20C75E920(a4, *(_BYTE *)(v9 + 208));
LABEL_94:
    v42 = sub_20C0D8030(v9 + 128, a3);
    v43 = (_QWORD *)(v9 + 136);
LABEL_95:
    if (v43 != v42)
      return sub_20C7430F4(a4, (uint64_t)(v42 + 5));
    return 0;
  }
  if (*(char *)(v9 + 207) < 0)
    v47 = *(_QWORD *)(v9 + 192);
  else
    v47 = *(unsigned __int8 *)(v9 + 207);
  if (!v47)
    goto LABEL_94;
  v49 = atomic_load((unsigned __int8 *)&qword_25498CB78);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_25498CB78))
  {
    sub_20BDDC0E4(&xmmword_25498CB60, "abcInstanceSourcePath");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25498CB60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CB78);
  }
  __p[0] = 0;
  v73 = &off_24C520700;
  sub_20BF77444((unsigned int **)&v72, v9 + 184);
  v50 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)__p, &xmmword_25498CB60);
  sub_20BF4B5D8(v50, &v72);
  sub_20BF4C2D8((uint64_t)&v72);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v72, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
  v35 = sub_20C75E8D0(a4, (uint64_t)&v72);
  sub_20BF49F14((_QWORD ***)&v72, 0);
  sub_20BF49F14((_QWORD ***)__p, 0);
  return v35;
}

void sub_20C72C748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46)
{
  __cxa_guard_abort(&qword_25498CB78);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  int v7;

  v4 = *(_QWORD *)this;
  v7 = 0;
  if (a4)
  {
    v7 = 1;
    v6 = a4;
  }
  return sub_20C72BDC0(v4, a2, (uint64_t *)a3, (uint64_t)&v6);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue(std::recursive_mutex ***a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  std::recursive_mutex **v4;
  uint64_t v6;
  int v7;

  v4 = *a1;
  v7 = 0;
  if (a4)
  {
    v7 = 2;
    v6 = a4;
  }
  return sub_20C72CA18(v4, a2, a3, (uint64_t)&v6);
}

_QWORD *sub_20C72CA18(std::recursive_mutex **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[2];
  int v11;

  result = sub_20C75E404((uint64_t)a1, a2);
  if (result)
  {
    v9 = (uint64_t)result;
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
    {
      return 0;
    }
    else
    {
      result = sub_20C75E4C4(v9, a2);
      if (result)
      {
        v10[0] = a3;
        v10[1] = 0;
        v11 = 2;
        return (_QWORD *)sub_20C75E528(a1, (uint64_t)result, (uint64_t)v10, a4);
      }
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue(std::recursive_mutex ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::recursive_mutex **v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  int v7;

  v4 = *this;
  v7 = 0;
  if (a4)
  {
    v7 = 1;
    v6 = a4;
  }
  return sub_20C72CA18(v4, a2, a3, (uint64_t)&v6);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::VisitSpecs(_DWORD *this, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *a2, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;

  v3 = *(_QWORD *)this;
  v4 = *(_QWORD **)(*(_QWORD *)this + 152);
  v5 = *(_QWORD *)this + 160;
  if (v4 != (_QWORD *)v5)
  {
    do
    {
      this = (_DWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, _QWORD *))(*(_QWORD *)a3 + 16))(a3, a2, v4 + 4);
      if (!(_DWORD)this)
        break;
      if (v4 + 5 != *(_QWORD **)(v3 + 176))
      {
        v8 = (_QWORD *)v4[24];
        if (v8 != v4 + 25)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 4), &v15);
            v9 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, int *))(*(_QWORD *)a3 + 16))(a3, a2, &v15);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
            this = sub_20BFD265C(&v15);
            if ((v9 & 1) == 0)
              return this;
            v10 = (_QWORD *)v8[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v8[2];
                v12 = *v11 == (_QWORD)v8;
                v8 = v11;
              }
              while (!v12);
            }
            v8 = v11;
          }
          while (v11 != v4 + 25);
        }
      }
      v13 = (_QWORD *)v4[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v4[2];
          v12 = *v14 == (_QWORD)v4;
          v4 = v14;
        }
        while (!v12);
      }
      v4 = v14;
    }
    while (v14 != (_QWORD *)v5);
  }
  return this;
}

void sub_20C72CC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _DWORD *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C((int *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::List@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  unint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v42;
  uint64_t v43;
  unsigned int *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  char *v60;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  char *v67;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  char *v74;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  char *v81;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  _QWORD *v112;
  _QWORD *v113;

  v5 = *(_QWORD *)this;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  result = (unint64_t)sub_20C75E404(v5, a2);
  v7 = result;
  if (!result)
    return result;
  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2);
  if ((result & 1) != 0)
  {
    if (v7 == *(_QWORD *)(v5 + 176))
      goto LABEL_172;
    if (*(_QWORD *)v7)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v8)
        v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v9 = (uint64_t *)((char *)v8 + 448);
      v10 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v10 >= *(_QWORD *)(a3 + 16))
      {
        v14 = sub_20BFCA068((char **)a3, v9);
      }
      else
      {
        v11 = *v9;
        *v10 = *v9;
        if ((v11 & 7) != 0)
        {
          v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 2, v12));
          if ((v13 & 1) == 0)
            *v10 &= 0xFFFFFFFFFFFFFFF8;
        }
        v14 = (char *)(v10 + 1);
      }
      *(_QWORD *)(a3 + 8) = v14;
    }
    v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v54)
      v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v55 = (uint64_t *)((char *)v54 + 312);
    v56 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v56 >= *(_QWORD *)(a3 + 16))
    {
      v60 = sub_20BFCA068((char **)a3, v55);
    }
    else
    {
      v57 = *v55;
      *v56 = *v55;
      if ((v57 & 7) != 0)
      {
        v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 2, v58));
        if ((v59 & 1) == 0)
          *v56 &= 0xFFFFFFFFFFFFFFF8;
      }
      v60 = (char *)(v56 + 1);
    }
    *(_QWORD *)(a3 + 8) = v60;
    if (*(_QWORD *)(v7 + 32) != *(_QWORD *)(v7 + 40))
    {
      v61 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v61)
        v61 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      v62 = (uint64_t *)((char *)v61 + 40);
      v63 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v63 >= *(_QWORD *)(a3 + 16))
      {
        v67 = sub_20BFCA068((char **)a3, v62);
      }
      else
      {
        v64 = *v62;
        *v63 = *v62;
        if ((v64 & 7) != 0)
        {
          v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 2, v65));
          if ((v66 & 1) == 0)
            *v63 &= 0xFFFFFFFFFFFFFFF8;
        }
        v67 = (char *)(v63 + 1);
      }
      *(_QWORD *)(a3 + 8) = v67;
    }
    if (*(_BYTE *)(v7 + 88))
    {
      v68 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v68)
        v68 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v69 = (uint64_t *)((char *)v68 + 216);
      v70 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v70 >= *(_QWORD *)(a3 + 16))
      {
        v74 = sub_20BFCA068((char **)a3, v69);
      }
      else
      {
        v71 = *v69;
        *v70 = *v69;
        if ((v71 & 7) != 0)
        {
          v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 2, v72));
          if ((v73 & 1) == 0)
            *v70 &= 0xFFFFFFFFFFFFFFF8;
        }
        v74 = (char *)(v70 + 1);
      }
      *(_QWORD *)(a3 + 8) = v74;
    }
    if (*(_BYTE *)(v7 + 120))
    {
      v75 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v75)
        v75 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v76 = (uint64_t *)((char *)v75 + 272);
      v77 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v77 >= *(_QWORD *)(a3 + 16))
      {
        v81 = sub_20BFCA068((char **)a3, v76);
      }
      else
      {
        v78 = *v76;
        *v77 = *v76;
        if ((v78 & 7) != 0)
        {
          v79 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 2, v79));
          if ((v80 & 1) == 0)
            *v77 &= 0xFFFFFFFFFFFFFFF8;
        }
        v81 = (char *)(v77 + 1);
      }
      *(_QWORD *)(a3 + 8) = v81;
    }
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v7 + 176));
    if ((_DWORD)result)
    {
      v82 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v82)
        v82 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v83 = (uint64_t *)((char *)v82 + 280);
      v84 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v84 >= *(_QWORD *)(a3 + 16))
      {
        result = (unint64_t)sub_20BFCA068((char **)a3, v83);
      }
      else
      {
        v85 = *v83;
        *v84 = *v83;
        if ((v85 & 7) != 0)
        {
          v86 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 2, v86));
          if ((v87 & 1) == 0)
            *v84 &= 0xFFFFFFFFFFFFFFF8;
        }
        result = (unint64_t)(v84 + 1);
      }
      *(_QWORD *)(a3 + 8) = result;
    }
    if (*(char *)(v7 + 207) < 0)
    {
      if (!*(_QWORD *)(v7 + 192))
        goto LABEL_156;
    }
    else if (!*(_BYTE *)(v7 + 207))
    {
      goto LABEL_156;
    }
    v88 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v88)
      v88 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v89 = (uint64_t *)((char *)v88 + 72);
    v90 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v90 >= *(_QWORD *)(a3 + 16))
    {
      result = (unint64_t)sub_20BFCA068((char **)a3, v89);
    }
    else
    {
      v91 = *v89;
      *v90 = *v89;
      if ((v91 & 7) != 0)
      {
        v92 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 2, v92));
        if ((v93 & 1) == 0)
          *v90 &= 0xFFFFFFFFFFFFFFF8;
      }
      result = (unint64_t)(v90 + 1);
    }
    *(_QWORD *)(a3 + 8) = result;
LABEL_156:
    if (*(_BYTE *)(v7 + 208))
    {
      if ((*(char *)(v7 + 207) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v7 + 207))
          goto LABEL_172;
LABEL_161:
        v94 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v94)
          v94 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v95 = (uint64_t *)((char *)v94 + 200);
        v96 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v96 >= *(_QWORD *)(a3 + 16))
        {
          result = (unint64_t)sub_20BFCA068((char **)a3, v95);
        }
        else
        {
          v97 = *v95;
          *v96 = *v95;
          if ((v97 & 7) != 0)
          {
            v98 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 2, v98));
            if ((v99 & 1) == 0)
              *v96 &= 0xFFFFFFFFFFFFFFF8;
          }
          result = (unint64_t)(v96 + 1);
        }
        *(_QWORD *)(a3 + 8) = result;
        goto LABEL_172;
      }
      if (*(_QWORD *)(v7 + 192))
        goto LABEL_161;
    }
LABEL_172:
    if (*(_QWORD *)(v7 + 8) != *(_QWORD *)(v7 + 16))
    {
      v100 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v100)
        v100 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      v101 = (uint64_t *)((char *)v100 + 32);
      v102 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v102 >= *(_QWORD *)(a3 + 16))
      {
        result = (unint64_t)sub_20BFCA068((char **)a3, v101);
      }
      else
      {
        v103 = *v101;
        *v102 = *v101;
        if ((v103 & 7) != 0)
        {
          v104 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 2, v104));
          if ((v105 & 1) == 0)
            *v102 &= 0xFFFFFFFFFFFFFFF8;
        }
        result = (unint64_t)(v102 + 1);
      }
      *(_QWORD *)(a3 + 8) = result;
    }
    v106 = *(_QWORD **)(v7 + 128);
    v107 = (_QWORD *)(v7 + 136);
    if (v106 != v107)
    {
      result = *(_QWORD *)(a3 + 8);
      do
      {
        v108 = v106 + 4;
        if (result >= *(_QWORD *)(a3 + 16))
        {
          result = (unint64_t)sub_20BFCA068((char **)a3, v108);
        }
        else
        {
          v109 = *v108;
          *(_QWORD *)result = *v108;
          if ((v109 & 7) != 0)
          {
            v110 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
            do
              v111 = __ldxr(v110);
            while (__stxr(v111 + 2, v110));
            if ((v111 & 1) == 0)
              *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
          }
          result += 8;
        }
        *(_QWORD *)(a3 + 8) = result;
        v112 = (_QWORD *)v106[1];
        if (v112)
        {
          do
          {
            v113 = v112;
            v112 = (_QWORD *)*v112;
          }
          while (v112);
        }
        else
        {
          do
          {
            v113 = (_QWORD *)v106[2];
            v53 = *v113 == (_QWORD)v106;
            v106 = v113;
          }
          while (!v53);
        }
        v106 = v113;
      }
      while (v113 != v107);
    }
    return result;
  }
  result = (unint64_t)sub_20C75E4C4(v7, a2);
  v15 = result;
  if (!result)
    return result;
  v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16)
    v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v17 = (uint64_t *)((char *)v16 + 448);
  v18 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v18 >= *(_QWORD *)(a3 + 16))
  {
    v22 = sub_20BFCA068((char **)a3, v17);
  }
  else
  {
    v19 = *v17;
    *v18 = *v17;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        *v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 = (char *)(v18 + 1);
  }
  *(_QWORD *)(a3 + 8) = v22;
  v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23)
    v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v24 = (uint64_t *)((char *)v23 + 64);
  v25 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v25 >= *(_QWORD *)(a3 + 16))
  {
    v29 = sub_20BFCA068((char **)a3, v24);
  }
  else
  {
    v26 = *v24;
    *v25 = *v24;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        *v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (char *)(v25 + 1);
  }
  *(_QWORD *)(a3 + 8) = v29;
  v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v30)
    v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v31 = (uint64_t *)((char *)v30 + 464);
  v32 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v32 >= *(_QWORD *)(a3 + 16))
  {
    result = (unint64_t)sub_20BFCA068((char **)a3, v31);
  }
  else
  {
    v33 = *v31;
    *v32 = *v31;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        *v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    result = (unint64_t)(v32 + 1);
  }
  *(_QWORD *)(a3 + 8) = result;
  if (*(_BYTE *)(v15 + 56))
  {
    v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v36)
      v36 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v37 = (uint64_t *)((char *)v36 + 432);
    v38 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v38 < *(_QWORD *)(a3 + 16))
    {
      v39 = *v37;
      *v38 = *v37;
      if ((v39 & 7) != 0)
      {
        v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 2, v40));
        goto LABEL_60;
      }
      goto LABEL_62;
    }
LABEL_63:
    result = (unint64_t)sub_20BFCA068((char **)a3, v37);
    goto LABEL_64;
  }
  if (*(_QWORD *)(v15 + 32) == *(_QWORD *)(v15 + 40))
    goto LABEL_65;
  v42 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v42)
    v42 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v37 = (uint64_t *)((char *)v42 + 88);
  v38 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v38 >= *(_QWORD *)(a3 + 16))
    goto LABEL_63;
  v43 = *v37;
  *v38 = *v37;
  if ((v43 & 7) != 0)
  {
    v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v44);
    while (__stxr(v41 + 2, v44));
LABEL_60:
    if ((v41 & 1) == 0)
      *v38 &= 0xFFFFFFFFFFFFFFF8;
  }
LABEL_62:
  result = (unint64_t)(v38 + 1);
LABEL_64:
  *(_QWORD *)(a3 + 8) = result;
LABEL_65:
  v45 = *(_QWORD **)(v15 + 8);
  v46 = (_QWORD *)(v15 + 16);
  if (v45 != v46)
  {
    do
    {
      v47 = v45 + 4;
      if (result >= *(_QWORD *)(a3 + 16))
      {
        result = (unint64_t)sub_20BFCA068((char **)a3, v47);
      }
      else
      {
        v48 = *v47;
        *(_QWORD *)result = *v47;
        if ((v48 & 7) != 0)
        {
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 2, v49));
          if ((v50 & 1) == 0)
            *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
        }
        result += 8;
      }
      *(_QWORD *)(a3 + 8) = result;
      v51 = (_QWORD *)v45[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v45[2];
          v53 = *v52 == (_QWORD)v45;
          v45 = v52;
        }
        while (!v53);
      }
      v45 = v52;
    }
    while (v52 != v46);
  }
  return result;
}

void sub_20C72D4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListAllTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  return *(_QWORD *)this + 184;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 v7;

  v3 = *(_QWORD *)this;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    v4 = sub_20C75E404(v3, a2);
    if (v4)
    {
      v5 = sub_20C75E4C4((uint64_t)v4, a2);
      if (v5)
      {
        if (*((_BYTE *)v5 + 56))
          return v5 + 4;
      }
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25498CB98);
  if ((v7 & 1) != 0)
    return &qword_25498CB80;
  if (__cxa_guard_acquire(&qword_25498CB98))
  {
    qword_25498CB80 = 0;
    *(_QWORD *)algn_25498CB88 = 0;
    qword_25498CB90 = 0;
    __cxa_atexit((void (*)(void *))sub_20C739824, &qword_25498CB80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CB98);
  }
  return &qword_25498CB80;
}

uint64_t (***sub_20C72D5B8())()
{
  _QWORD *v0;
  uint64_t (***v1)();
  uint64_t v2;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t (***v15)();
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;
  uint64_t (***v49)();
  uint64_t v50;
  uint64_t (***v51)();
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t (***v55)();
  uint64_t v56;
  uint64_t (***v57)();
  uint64_t v58;
  uint64_t (***v59)();
  uint64_t v60;
  uint64_t (***v61)();
  uint64_t v62;
  uint64_t (***v63)();
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t (***v69)();
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t (***v73)();
  uint64_t v74;
  uint64_t (***v75)();
  uint64_t v76;
  uint64_t (***v77)();
  uint64_t v78;
  uint64_t (***v79)();
  uint64_t v80;
  uint64_t (***v81)();
  uint64_t v82;
  uint64_t (***v83)();
  uint64_t v84;
  uint64_t (***v85)();
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t (***v97)();
  uint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t **v101;
  _QWORD *v102;
  _BYTE *v103;
  uint64_t (***v104)();
  uint64_t v105;
  uint64_t (***v106)();
  uint64_t v107;
  uint64_t (***v108)();
  uint64_t v109;
  uint64_t (***v110)();
  uint64_t v111;
  uint64_t (***v112)();
  uint64_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t (***result)();
  uint64_t v117;
  char **v118;
  uint64_t (**v119)();
  void (*v120)(uint64_t);
  char ***v121;
  uint64_t (**v122)();
  void *v123;
  uint64_t (***v124)();
  uint64_t (**v125)();
  void (*v126)(uint64_t **);
  char ***v127;
  uint64_t (**v128)();
  void *v129;
  char ***v130;
  uint64_t (**v131)();
  void *v132;
  uint64_t **v133;
  uint64_t (**v134)();
  void (*v135)(uint64_t **);
  uint64_t (***v136)();
  __int128 v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t (**v140)();
  uint64_t *v141;
  char v142;
  uint64_t (***v143)();
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v0 = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions::UsdAbc_AlembicConversions((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *)&unk_25498CA58);
  v0[4] = 0;
  v0[5] = 0;
  v0[3] = v0 + 4;
  v119 = (uint64_t (**)())sub_20C72EAF8("AbcGeom_GeomBase_v1");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C72EDE0;
  v143 = &v140;
  sub_20C72EBC4((char ***)&v119, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C72EFF0;
  v139 = &v137;
  sub_20C72EBC4((char ***)&v119, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C72F5D0;
  v136 = &v134;
  sub_20C72EBC4((char ***)&v119, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C72FBDC;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4((char ***)&v119, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C730170;
  v130 = (char ***)&v128;
  sub_20C72EBC4((char ***)&v119, &v128);
  v125 = &off_24C542CD0;
  v126 = sub_20C73026C;
  v127 = (char ***)&v125;
  sub_20C72EBC4((char ***)&v119, &v125);
  v122 = &off_24C542CD0;
  v123 = sub_20C730368;
  v124 = &v122;
  sub_20C72EBC4((char ***)&v119, &v122);
  v1 = v124;
  if (v124 == &v122)
  {
    v2 = 4;
    v1 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_6;
    v2 = 5;
  }
  (*v1)[v2]();
LABEL_6:
  v3 = (uint64_t (***)())v127;
  if (v127 == (char ***)&v125)
  {
    v4 = 4;
    v3 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_11;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_11:
  v5 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v6 = 4;
    v5 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_16;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_16:
  v7 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v8 = 4;
    v7 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_21;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_21:
  v9 = v136;
  if (v136 == &v134)
  {
    v10 = 4;
    v9 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_26;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_26:
  v11 = v139;
  if (v139 == &v137)
  {
    v12 = 4;
    v11 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_31;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_31:
  v13 = v143;
  if (v143 == &v140)
  {
    v14 = 4;
    v13 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_36;
    v14 = 5;
  }
  (*v13)[v14]();
LABEL_36:
  v125 = (uint64_t (**)())sub_20C72EAF8("AbcGeom_Xform_v3");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C730830;
  v143 = &v140;
  sub_20C72EBC4((char ***)&v125, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C72FBDC;
  v139 = &v137;
  sub_20C72EBC4((char ***)&v125, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C730170;
  v136 = &v134;
  sub_20C72EBC4((char ***)&v125, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C73026C;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4((char ***)&v125, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C730368;
  v130 = (char ***)&v128;
  sub_20C72EBC4((char ***)&v125, &v128);
  v15 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v16 = 4;
    v15 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_41;
    v16 = 5;
  }
  (*v15)[v16]();
LABEL_41:
  v17 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v18 = 4;
    v17 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_46;
    v18 = 5;
  }
  (*v17)[v18]();
LABEL_46:
  v19 = v136;
  if (v136 == &v134)
  {
    v20 = 4;
    v19 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_51;
    v20 = 5;
  }
  (*v19)[v20]();
LABEL_51:
  v21 = v139;
  if (v139 == &v137)
  {
    v22 = 4;
    v21 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_56;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_56:
  v23 = v143;
  if (v143 == &v140)
  {
    v24 = 4;
    v23 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_61;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_61:
  v118 = (char **)sub_20C72EAF8("AbcGeom_SubD_v1");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C73112C;
  v143 = &v140;
  sub_20C72EBC4(&v118, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C731738;
  v139 = &v137;
  sub_20C72EBC4(&v118, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C72EFF0;
  v136 = &v134;
  sub_20C72EBC4(&v118, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C72F5D0;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4(&v118, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C72FBDC;
  v130 = (char ***)&v128;
  sub_20C72EBC4(&v118, &v128);
  v125 = &off_24C542CD0;
  v126 = sub_20C730170;
  v127 = (char ***)&v125;
  sub_20C72EBC4(&v118, &v125);
  v122 = &off_24C542CD0;
  v123 = sub_20C73026C;
  v124 = &v122;
  sub_20C72EBC4(&v118, &v122);
  v119 = &off_24C542CD0;
  v120 = sub_20C730368;
  v121 = (char ***)&v119;
  sub_20C72EBC4(&v118, &v119);
  v25 = (uint64_t (***)())v121;
  if (v121 == (char ***)&v119)
  {
    v26 = 4;
    v25 = &v119;
  }
  else
  {
    if (!v121)
      goto LABEL_66;
    v26 = 5;
  }
  (*v25)[v26]();
LABEL_66:
  v27 = v124;
  if (v124 == &v122)
  {
    v28 = 4;
    v27 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_71;
    v28 = 5;
  }
  (*v27)[v28]();
LABEL_71:
  v29 = (uint64_t (***)())v127;
  if (v127 == (char ***)&v125)
  {
    v30 = 4;
    v29 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_76;
    v30 = 5;
  }
  (*v29)[v30]();
LABEL_76:
  v31 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v32 = 4;
    v31 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_81;
    v32 = 5;
  }
  (*v31)[v32]();
LABEL_81:
  v33 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v34 = 4;
    v33 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v34 = 5;
  }
  (*v33)[v34]();
LABEL_86:
  v35 = v136;
  if (v136 == &v134)
  {
    v36 = 4;
    v35 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_91;
    v36 = 5;
  }
  (*v35)[v36]();
LABEL_91:
  v37 = v139;
  if (v139 == &v137)
  {
    v38 = 4;
    v37 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_96;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_96:
  v39 = v143;
  if (v143 == &v140)
  {
    v40 = 4;
    v39 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_101;
    v40 = 5;
  }
  (*v39)[v40]();
LABEL_101:
  v118 = (char **)sub_20C72EAF8("AbcGeom_PolyMesh_v1");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C73112C;
  v143 = &v140;
  sub_20C72EBC4(&v118, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C732CF8;
  v139 = &v137;
  sub_20C72EBC4(&v118, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C72EFF0;
  v136 = &v134;
  sub_20C72EBC4(&v118, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C72F5D0;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4(&v118, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C72FBDC;
  v130 = (char ***)&v128;
  sub_20C72EBC4(&v118, &v128);
  v125 = &off_24C542CD0;
  v126 = sub_20C730170;
  v127 = (char ***)&v125;
  sub_20C72EBC4(&v118, &v125);
  v122 = &off_24C542CD0;
  v123 = sub_20C73026C;
  v124 = &v122;
  sub_20C72EBC4(&v118, &v122);
  v119 = &off_24C542CD0;
  v120 = sub_20C730368;
  v121 = (char ***)&v119;
  sub_20C72EBC4(&v118, &v119);
  v41 = (uint64_t (***)())v121;
  if (v121 == (char ***)&v119)
  {
    v42 = 4;
    v41 = &v119;
  }
  else
  {
    if (!v121)
      goto LABEL_106;
    v42 = 5;
  }
  (*v41)[v42]();
LABEL_106:
  v43 = v124;
  if (v124 == &v122)
  {
    v44 = 4;
    v43 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_111;
    v44 = 5;
  }
  (*v43)[v44]();
LABEL_111:
  v45 = (uint64_t (***)())v127;
  if (v127 == (char ***)&v125)
  {
    v46 = 4;
    v45 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_116;
    v46 = 5;
  }
  (*v45)[v46]();
LABEL_116:
  v47 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v48 = 4;
    v47 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_121;
    v48 = 5;
  }
  (*v47)[v48]();
LABEL_121:
  v49 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v50 = 4;
    v49 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_126;
    v50 = 5;
  }
  (*v49)[v50]();
LABEL_126:
  v51 = v136;
  if (v136 == &v134)
  {
    v52 = 4;
    v51 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_131;
    v52 = 5;
  }
  (*v51)[v52]();
LABEL_131:
  v53 = v139;
  if (v139 == &v137)
  {
    v54 = 4;
    v53 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_136;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_136:
  v55 = v143;
  if (v143 == &v140)
  {
    v56 = 4;
    v55 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_141;
    v56 = 5;
  }
  (*v55)[v56]();
LABEL_141:
  *(_QWORD *)&v137 = sub_20C72EAF8("AbcGeom_FaceSet_v1");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C7333F4;
  v143 = &v140;
  sub_20C72EBC4((char ***)&v137, &v140);
  v57 = v143;
  if (v143 == &v140)
  {
    v58 = 4;
    v57 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_146;
    v58 = 5;
  }
  (*v57)[v58]();
LABEL_146:
  v118 = (char **)sub_20C72EAF8("AbcGeom_Curve_v2");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C73112C;
  v143 = &v140;
  sub_20C72EBC4(&v118, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C733E54;
  v139 = &v137;
  sub_20C72EBC4(&v118, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C72EFF0;
  v136 = &v134;
  sub_20C72EBC4(&v118, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C72F5D0;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4(&v118, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C72FBDC;
  v130 = (char ***)&v128;
  sub_20C72EBC4(&v118, &v128);
  v125 = &off_24C542CD0;
  v126 = sub_20C730170;
  v127 = (char ***)&v125;
  sub_20C72EBC4(&v118, &v125);
  v122 = &off_24C542CD0;
  v123 = sub_20C73026C;
  v124 = &v122;
  sub_20C72EBC4(&v118, &v122);
  v119 = &off_24C542CD0;
  v120 = sub_20C730368;
  v121 = (char ***)&v119;
  sub_20C72EBC4(&v118, &v119);
  v59 = (uint64_t (***)())v121;
  if (v121 == (char ***)&v119)
  {
    v60 = 4;
    v59 = &v119;
  }
  else
  {
    if (!v121)
      goto LABEL_151;
    v60 = 5;
  }
  (*v59)[v60]();
LABEL_151:
  v61 = v124;
  if (v124 == &v122)
  {
    v62 = 4;
    v61 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_156;
    v62 = 5;
  }
  (*v61)[v62]();
LABEL_156:
  v63 = (uint64_t (***)())v127;
  if (v127 == (char ***)&v125)
  {
    v64 = 4;
    v63 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_161;
    v64 = 5;
  }
  (*v63)[v64]();
LABEL_161:
  v65 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v66 = 4;
    v65 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_166;
    v66 = 5;
  }
  (*v65)[v66]();
LABEL_166:
  v67 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v68 = 4;
    v67 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_171;
    v68 = 5;
  }
  (*v67)[v68]();
LABEL_171:
  v69 = v136;
  if (v136 == &v134)
  {
    v70 = 4;
    v69 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_176;
    v70 = 5;
  }
  (*v69)[v70]();
LABEL_176:
  v71 = v139;
  if (v139 == &v137)
  {
    v72 = 4;
    v71 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_181;
    v72 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_181:
  v73 = v143;
  if (v143 == &v140)
  {
    v74 = 4;
    v73 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_186;
    v74 = 5;
  }
  (*v73)[v74]();
LABEL_186:
  v118 = (char **)sub_20C72EAF8("AbcGeom_Points_v1");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C73112C;
  v143 = &v140;
  sub_20C72EBC4(&v118, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C735A90;
  v139 = &v137;
  sub_20C72EBC4(&v118, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C72EFF0;
  v136 = &v134;
  sub_20C72EBC4(&v118, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C72F5D0;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4(&v118, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C72FBDC;
  v130 = (char ***)&v128;
  sub_20C72EBC4(&v118, &v128);
  v125 = &off_24C542CD0;
  v126 = sub_20C730170;
  v127 = (char ***)&v125;
  sub_20C72EBC4(&v118, &v125);
  v122 = &off_24C542CD0;
  v123 = sub_20C73026C;
  v124 = &v122;
  sub_20C72EBC4(&v118, &v122);
  v119 = &off_24C542CD0;
  v120 = sub_20C730368;
  v121 = (char ***)&v119;
  sub_20C72EBC4(&v118, &v119);
  v75 = (uint64_t (***)())v121;
  if (v121 == (char ***)&v119)
  {
    v76 = 4;
    v75 = &v119;
  }
  else
  {
    if (!v121)
      goto LABEL_191;
    v76 = 5;
  }
  (*v75)[v76]();
LABEL_191:
  v77 = v124;
  if (v124 == &v122)
  {
    v78 = 4;
    v77 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_196;
    v78 = 5;
  }
  (*v77)[v78]();
LABEL_196:
  v79 = (uint64_t (***)())v127;
  if (v127 == (char ***)&v125)
  {
    v80 = 4;
    v79 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_201;
    v80 = 5;
  }
  (*v79)[v80]();
LABEL_201:
  v81 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v82 = 4;
    v81 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_206;
    v82 = 5;
  }
  (*v81)[v82]();
LABEL_206:
  v83 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v84 = 4;
    v83 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_211;
    v84 = 5;
  }
  (*v83)[v84]();
LABEL_211:
  v85 = v136;
  if (v136 == &v134)
  {
    v86 = 4;
    v85 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_216;
    v86 = 5;
  }
  (*v85)[v86]();
LABEL_216:
  v87 = v139;
  if (v139 == &v137)
  {
    v88 = 4;
    v87 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_221;
    v88 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v87 + 8 * v88))();
LABEL_221:
  v89 = v143;
  if (v143 == &v140)
  {
    v90 = 4;
    v89 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_226;
    v90 = 5;
  }
  (*v89)[v90]();
LABEL_226:
  v128 = (uint64_t (**)())sub_20C72EAF8("AbcGeom_Camera_v1");
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C73638C;
  v143 = &v140;
  sub_20C72EBC4((char ***)&v128, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C730170;
  v139 = &v137;
  sub_20C72EBC4((char ***)&v128, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C73026C;
  v136 = &v134;
  sub_20C72EBC4((char ***)&v128, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C730368;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4((char ***)&v128, &v131);
  v91 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v92 = 4;
    v91 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_231;
    v92 = 5;
  }
  (*v91)[v92]();
LABEL_231:
  v93 = v136;
  if (v136 == &v134)
  {
    v94 = 4;
    v93 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_236;
    v94 = 5;
  }
  (*v93)[v94]();
LABEL_236:
  v95 = v139;
  if (v139 == &v137)
  {
    v96 = 4;
    v95 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_241;
    v96 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v95 + 8 * v96))();
LABEL_241:
  v97 = v143;
  if (v143 == &v140)
  {
    v98 = 4;
    v97 = &v140;
  }
  else
  {
    if (!v143)
      goto LABEL_246;
    v98 = 5;
  }
  (*v97)[v98]();
LABEL_246:
  v137 = 0uLL;
  v138 = 0;
  v99 = sub_20C7391D0((uint64_t **)&v131, (const void **)&v137);
  v100 = (_QWORD *)*v99;
  if (!*v99)
  {
    v101 = (uint64_t **)v99;
    v102 = operator new(0x50uLL);
    v140 = (uint64_t (**)())v102;
    v141 = &qword_25498CA78;
    v142 = 0;
    v103 = v102 + 4;
    if (SHIBYTE(v138) < 0)
    {
      sub_20BDDBFAC(v103, (void *)v137, *((unint64_t *)&v137 + 1));
      v100 = v140;
    }
    else
    {
      *(_OWORD *)v103 = v137;
      v102[6] = v138;
      v100 = v102;
    }
    v102[7] = 0;
    v102[8] = 0;
    v102[9] = 0;
    v142 = 1;
    sub_20C73927C((uint64_t)v131, v101, v100);
    v140 = 0;
    sub_20C7392D8((uint64_t)&v140);
  }
  if (SHIBYTE(v138) < 0)
    operator delete((void *)v137);
  v119 = (uint64_t (**)())(v100 + 7);
  v140 = &off_24C542CD0;
  v141 = (uint64_t *)sub_20C72EDE0;
  v143 = &v140;
  sub_20C72EBC4((char ***)&v119, &v140);
  *(_QWORD *)&v137 = &off_24C542CD0;
  *((_QWORD *)&v137 + 1) = sub_20C72EFF0;
  v139 = &v137;
  sub_20C72EBC4((char ***)&v119, &v137);
  v134 = &off_24C542CD0;
  v135 = sub_20C72F5D0;
  v136 = &v134;
  sub_20C72EBC4((char ***)&v119, &v134);
  v131 = &off_24C542CD0;
  v132 = sub_20C72FBDC;
  v133 = (uint64_t **)&v131;
  sub_20C72EBC4((char ***)&v119, &v131);
  v128 = &off_24C542CD0;
  v129 = sub_20C730170;
  v130 = (char ***)&v128;
  sub_20C72EBC4((char ***)&v119, &v128);
  v125 = &off_24C542CD0;
  v126 = sub_20C73026C;
  v127 = (char ***)&v125;
  sub_20C72EBC4((char ***)&v119, &v125);
  v122 = &off_24C542CD0;
  v123 = sub_20C730368;
  v124 = &v122;
  sub_20C72EBC4((char ***)&v119, &v122);
  v104 = v124;
  if (v124 == &v122)
  {
    v105 = 4;
    v104 = &v122;
  }
  else
  {
    if (!v124)
      goto LABEL_258;
    v105 = 5;
  }
  (*v104)[v105]();
LABEL_258:
  v106 = (uint64_t (***)())v127;
  if (v127 == (char ***)&v125)
  {
    v107 = 4;
    v106 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_263;
    v107 = 5;
  }
  (*v106)[v107]();
LABEL_263:
  v108 = (uint64_t (***)())v130;
  if (v130 == (char ***)&v128)
  {
    v109 = 4;
    v108 = &v128;
  }
  else
  {
    if (!v130)
      goto LABEL_268;
    v109 = 5;
  }
  (*v108)[v109]();
LABEL_268:
  v110 = (uint64_t (***)())v133;
  if (v133 == (uint64_t **)&v131)
  {
    v111 = 4;
    v110 = &v131;
  }
  else
  {
    if (!v133)
      goto LABEL_273;
    v111 = 5;
  }
  (*v110)[v111]();
LABEL_273:
  v112 = v136;
  if (v136 == &v134)
  {
    v113 = 4;
    v112 = &v134;
  }
  else
  {
    if (!v136)
      goto LABEL_278;
    v113 = 5;
  }
  (*v112)[v113]();
LABEL_278:
  v114 = v139;
  if (v139 == &v137)
  {
    v115 = 4;
    v114 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_283;
    v115 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v114 + 8 * v115))();
LABEL_283:
  result = v143;
  if (v143 == &v140)
  {
    v117 = 4;
    result = &v140;
  }
  else
  {
    if (!v143)
      return result;
    v117 = 5;
  }
  return (uint64_t (***)())(*result)[v117]();
}

void sub_20C72E78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  uint64_t v31;

  sub_20C7392D8(v31 - 128);
  if (*(char *)(v31 - 137) < 0)
    operator delete(*(void **)(v31 - 160));
  sub_20C75BDEC((uint64_t)&qword_25498CA70, (_QWORD *)qword_25498CA78);
  a31 = (void **)&unk_25498CA58;
  sub_20C75BE34(&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20C72EAB8(uint64_t a1)
{
  void **v3;

  sub_20C75BDEC(a1 + 24, *(_QWORD **)(a1 + 32));
  v3 = (void **)a1;
  sub_20C75BE34(&v3);
  return a1;
}

uint64_t sub_20C72EAF8(char *__s)
{
  uint64_t *v1;
  _OWORD *v2;
  uint64_t **v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t *v10;

  sub_20BDDC0E4(__p, __s);
  v1 = sub_20C7391D0(&v10, (const void **)__p);
  v2 = (_OWORD *)*v1;
  if (!*v1)
  {
    v3 = (uint64_t **)v1;
    v2 = operator new(0x50uLL);
    v8[1] = &qword_25498CA78;
    v2[2] = *(_OWORD *)__p;
    v4 = v7;
    __p[0] = 0;
    __p[1] = 0;
    v7 = 0;
    *((_QWORD *)v2 + 6) = v4;
    *((_QWORD *)v2 + 7) = 0;
    *((_QWORD *)v2 + 8) = 0;
    *((_QWORD *)v2 + 9) = 0;
    v9 = 1;
    sub_20C73927C((uint64_t)v10, v3, (uint64_t *)v2);
    v8[0] = 0;
    sub_20C7392D8((uint64_t)v8);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return (uint64_t)v2 + 56;
}

void sub_20C72EBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20C72EBC4(char ***a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = *a1;
  v5 = (unint64_t)(*a1)[1];
  v6 = (unint64_t)(*a1)[2];
  if (v5 < v6)
  {
    v7 = a2[3];
    if (v7)
    {
      if ((_QWORD *)v7 == a2)
      {
        *(_QWORD *)(v5 + 24) = v5;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)a2[3] + 24))(a2[3], v5);
        goto LABEL_21;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    *(_QWORD *)(v5 + 24) = v7;
LABEL_21:
    v15 = (char *)(v5 + 32);
    v4[1] = (char *)(v5 + 32);
    goto LABEL_34;
  }
  v8 = (uint64_t)(v5 - (_QWORD)*v4) >> 5;
  if ((unint64_t)(v8 + 1) >> 59)
    sub_20BDDF694();
  v9 = v6 - (_QWORD)*v4;
  v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1))
    v10 = v8 + 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v30 = (uint64_t)(*a1 + 2);
  if (v11)
  {
    if (v11 >> 59)
      sub_20BDDF5B4();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v8];
  v26 = v12;
  v27 = v13;
  v28 = v13;
  v29 = &v12[32 * v11];
  v14 = a2[3];
  if (!v14)
    goto LABEL_19;
  if ((_QWORD *)v14 != a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_19:
    *((_QWORD *)v13 + 3) = v14;
    goto LABEL_23;
  }
  *((_QWORD *)v13 + 3) = v13;
  (*(void (**)(_QWORD *, char *))(*a2 + 24))(a2, v13);
LABEL_23:
  v16 = v27;
  v15 = v28 + 32;
  v28 += 32;
  v18 = *v4;
  v17 = v4[1];
  if (v17 != *v4)
  {
    v19 = v27 - 8;
    while (1)
    {
      v20 = (char *)*((_QWORD *)v17 - 1);
      v21 = v17 - 32;
      v22 = v19;
      if (v20)
      {
        if (v21 == v20)
        {
          *(_QWORD *)v19 = v19 - 24;
          (*(void (**)(_QWORD))(**((_QWORD **)v17 - 1) + 24))(*((_QWORD *)v17 - 1));
          goto LABEL_30;
        }
        *(_QWORD *)v19 = v20;
        v22 = v17 - 8;
      }
      *(_QWORD *)v22 = 0;
LABEL_30:
      v19 -= 32;
      v17 = v21;
      if (v21 == v18)
      {
        v23 = *v4;
        v17 = v4[1];
        v16 = v19 + 8;
        v15 = v28;
        goto LABEL_33;
      }
    }
  }
  v23 = v4[1];
LABEL_33:
  *v4 = v16;
  v26 = v23;
  v27 = v23;
  v4[1] = v15;
  v28 = v17;
  v24 = v4[2];
  v4[2] = v29;
  v29 = v24;
  sub_20C7393E0((uint64_t)&v26);
LABEL_34:
  v4[1] = v15;
  return a1;
}

void sub_20C72EDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7393E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C72EDE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t Header;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v10;
  void *__p;
  char v12;
  void *v13[2];
  char v14;
  void *v15;
  char v16;
  uint64_t v17;

  v2 = a1 + 8;
  v3 = sub_20C7395F0((uint64_t **)(*(_QWORD *)a1 + 152), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 152));
  sub_20BE04EB0((uint64_t)v13, v2);
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)v13);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v5 + 56) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  std::operator+<char>();
  sub_20BE01E1C(Header + 48, (const void **)&__p, &v15);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17);
  if (&v17 == v3)
  {
    if ((v17 & 7) != 0)
    {
      v8 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  else
  {
    if ((*v3 & 7) != 0)
    {
      v6 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    *v3 = v17;
    v17 = 0;
  }
  if (v16 < 0)
    operator delete(v15);
  if (v12 < 0)
    operator delete(__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v13);
  if (!*v3 && !*((_DWORD *)v3 + 14))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v10)
      v10 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    sub_20BF32220(v3, (_QWORD *)v10 + 8);
  }
  sub_20BDDC0E4(v13, ".geom");
  sub_20C73945C(a1, (uint64_t)v13);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_20C72EF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C72EFF0(uint64_t **a1)
{
  unsigned __int8 v2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v3;
  uint64_t PropertyHeader;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  int v24;
  int v25;
  int v26[4];
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *__p;
  char v31;
  void *v32;
  void *__src[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498CA98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498CA98))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498CA90, "primvars:displayColor");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498CA90, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CA98);
  }
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3)
    v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v22, "adskDiffuseColor");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v22, (uint64_t)&v24);
  if (v28 < 0)
  {
    if (v27)
      goto LABEL_15;
  }
  else if (v28)
  {
    goto LABEL_15;
  }
  if (v29)
  {
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v26);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 10
        && *(_BYTE *)(PropertyHeader + 60) == 4
        && *(_DWORD *)(PropertyHeader + 24) == 1
        && sub_20C73BF4C(PropertyHeader + 32, 0))
      {
        LODWORD(v47) = 0;
        LODWORD(v48) = 0;
        LODWORD(v42) = 0;
        LODWORD(v43) = 0;
        sub_20C73C028((uint64_t)&v32, v26, (uint64_t)&__p, (uint64_t **)&v47, (uint64_t **)&v42);
        goto LABEL_16;
      }
    }
  }
LABEL_15:
  LODWORD(v32) = 2;
  sub_20BDDC0E4(__src, "");
  v35 = 0;
  v36 = 0;
LABEL_16:
  if (SHIBYTE(v34) < 0)
  {
    if (!__src[1] && v35)
    {
      LODWORD(v42) = (_DWORD)v32;
      sub_20BDDBFAC(&v43, __src[0], 0);
      v5 = v35;
LABEL_23:
      v45 = v5;
      v46 = v36;
      if (v36)
      {
        v6 = (unint64_t *)(v36 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v55 = 0;
      v8 = operator new(0x38uLL);
      *v8 = off_24C542D80;
      sub_20C389C80((uint64_t)(v8 + 1), (uint64_t)&v42);
      v55 = v8;
      LODWORD(v37) = (_DWORD)v32;
      if (SHIBYTE(v34) < 0)
      {
        sub_20BDDBFAC(&v38, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v38 = *(_OWORD *)__src;
        v39 = v34;
      }
      v40 = v35;
      v41 = v36;
      if (v36)
      {
        v9 = (unint64_t *)(v36 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v53 = 0;
      v11 = operator new(0x38uLL);
      *v11 = off_24C542E28;
      sub_20C389C80((uint64_t)(v11 + 1), (uint64_t)&v37);
      v53 = v11;
      v12 = sub_20C739A90(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498CA90, (_QWORD *)v3 + 92, (uint64_t)v54, (uint64_t)v52);
      LODWORD(v47) = (_DWORD)v32;
      if (SHIBYTE(v34) < 0)
      {
        sub_20BDDBFAC(&v48, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v48 = *(_OWORD *)__src;
        v49 = v34;
      }
      v50 = v35;
      v51 = v36;
      if (v36)
      {
        v13 = (unint64_t *)(v36 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = operator new(0x38uLL);
      *v15 = off_24C542EA8;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v47);
      v57 = v15;
      sub_20C73BC1C(v56, (_QWORD *)v12 + 8);
      v16 = v57;
      if (v57 == v56)
      {
        v17 = 4;
        v16 = v56;
      }
      else
      {
        if (!v57)
          goto LABEL_43;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_43:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v47);
      v18 = v53;
      if (v53 == v52)
      {
        v19 = 4;
        v18 = v52;
      }
      else
      {
        if (!v53)
          goto LABEL_48;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_48:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v37);
      v20 = v55;
      if (v55 == v54)
      {
        v21 = 4;
        v20 = v54;
      }
      else
      {
        if (!v55)
        {
LABEL_53:
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v42);
          goto LABEL_54;
        }
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
      goto LABEL_53;
    }
  }
  else if (!HIBYTE(v34))
  {
    v5 = v35;
    if (v35)
    {
      LODWORD(v42) = (_DWORD)v32;
      v43 = *(_OWORD *)__src;
      v44 = v34;
      goto LABEL_23;
    }
  }
LABEL_54:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v32);
  if (v31 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23 < 0)
    operator delete(v22[0]);
}

void sub_20C72F498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  __cxa_guard_abort(&qword_25498CA98);
  _Unwind_Resume(a1);
}

void sub_20C72F5D0(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v3;
  uint64_t PropertyHeader;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27[2];
  char v28;
  void *v29;
  int v30[3];
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *__p;
  char v36;
  void *v37;
  __int128 __src;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3)
    v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v27, ".selfBnds");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v27, (uint64_t)&v29);
  if (v33 < 0)
  {
    if (v32)
      goto LABEL_16;
  }
  else if (v33)
  {
    goto LABEL_16;
  }
  if (v34)
  {
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v30);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 11
        && *(_BYTE *)(PropertyHeader + 60) == 6
        && *(_DWORD *)(PropertyHeader + 24) == 1
        && sub_20BE14070(PropertyHeader + 32, 0))
      {
        LODWORD(v52) = 0;
        LODWORD(v53) = 0;
        LODWORD(v47) = 0;
        LODWORD(v48) = 0;
        sub_20BE13A80((uint64_t)&v37, v30, (uint64_t)&__p, (uint64_t **)&v52, (uint64_t **)&v47);
        goto LABEL_17;
      }
    }
  }
LABEL_16:
  LODWORD(v37) = 2;
  sub_20BDDC0E4(&__src, "");
  v40 = 0;
  v41 = 0;
LABEL_17:
  if (SHIBYTE(v39) < 0)
  {
    if (!*((_QWORD *)&__src + 1) && v40)
    {
      LODWORD(v47) = (_DWORD)v37;
      sub_20BDDBFAC(&v48, (void *)__src, 0);
      v5 = v40;
LABEL_24:
      v50 = v5;
      v51 = v41;
      if (v41)
      {
        v6 = (unint64_t *)(v41 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v60 = 0;
      v8 = operator new(0x38uLL);
      *v8 = off_24C542F40;
      sub_20C389C80((uint64_t)(v8 + 1), (uint64_t)&v47);
      v60 = v8;
      LODWORD(v42) = (_DWORD)v37;
      if (SHIBYTE(v39) < 0)
      {
        sub_20BDDBFAC(&v43, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        v43 = __src;
        v44 = v39;
      }
      v45 = v40;
      v46 = v41;
      if (v41)
      {
        v9 = (unint64_t *)(v41 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v58 = 0;
      v11 = operator new(0x38uLL);
      *v11 = off_24C542FD8;
      sub_20C389C80((uint64_t)(v11 + 1), (uint64_t)&v42);
      v58 = v11;
      v12 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 296), (_QWORD *)v3 + 77, (uint64_t)v59, (uint64_t)v57);
      LODWORD(v52) = (_DWORD)v37;
      if (SHIBYTE(v39) < 0)
      {
        sub_20BDDBFAC(&v53, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        v53 = __src;
        v54 = v39;
      }
      v55 = v40;
      v56 = v41;
      if (v41)
      {
        v13 = (unint64_t *)(v41 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = operator new(0x38uLL);
      *v15 = off_24C543048;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v52);
      v62 = v15;
      sub_20C73BC1C(v61, (_QWORD *)v12 + 8);
      v16 = v62;
      if (v62 == v61)
      {
        v17 = 4;
        v16 = v61;
      }
      else
      {
        if (!v62)
          goto LABEL_44;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_44:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v52);
      v18 = v58;
      if (v58 == v57)
      {
        v19 = 4;
        v18 = v57;
      }
      else
      {
        if (!v58)
          goto LABEL_49;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_49:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v42);
      v20 = v60;
      if (v60 == v59)
      {
        v21 = 4;
        v20 = v59;
      }
      else
      {
        if (!v60)
        {
LABEL_54:
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v47);
          goto LABEL_55;
        }
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
      goto LABEL_54;
    }
  }
  else if (!HIBYTE(v39))
  {
    v5 = v40;
    if (v40)
    {
      LODWORD(v47) = (_DWORD)v37;
      v48 = __src;
      v49 = v39;
      goto LABEL_24;
    }
  }
LABEL_55:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v37);
  if (v36 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
  sub_20BFD265C(&v29);
  if (v28 < 0)
    operator delete(v27[0]);
  sub_20BDDC0E4(&v29, ".geom");
  sub_20C73C618((uint64_t)a1, (uint64_t)&v29, (uint64_t)&v22);
  if (v26 < 0)
    operator delete(v25);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (v31 < 0)
    operator delete(v29);
}

void sub_20C72FAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;

  v52 = *(_QWORD **)(v50 - 112);
  if (v52 == (_QWORD *)(v50 - 136))
  {
    v53 = 4;
    v52 = (_QWORD *)(v50 - 136);
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_6:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&a50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&a38);
  sub_20C739A4C((uint64_t)&a25);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C72FBDC(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v3;
  uint64_t PropertyHeader;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  int v24;
  int v25;
  int v26[4];
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *__p;
  char v31;
  void *v32;
  void *__src[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3)
    v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v22, "visible");
  sub_20C73C618((uint64_t)a1, (uint64_t)v22, (uint64_t)&v24);
  if (v28 < 0)
  {
    if (v27)
      goto LABEL_16;
  }
  else if (v28)
  {
    goto LABEL_16;
  }
  if (v29)
  {
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v26);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 2
        && *(_BYTE *)(PropertyHeader + 60) == 1
        && *(_DWORD *)(PropertyHeader + 24) == 1
        && sub_20BE5F574(PropertyHeader + 32, 0))
      {
        LODWORD(v47) = 0;
        LODWORD(v48) = 0;
        LODWORD(v42) = 0;
        LODWORD(v43) = 0;
        sub_20BE5EF84((uint64_t)&v32, v26, (uint64_t)&__p, (uint64_t **)&v47, (uint64_t **)&v42);
        goto LABEL_17;
      }
    }
  }
LABEL_16:
  LODWORD(v32) = 2;
  sub_20BDDC0E4(__src, "");
  v35 = 0;
  v36 = 0;
LABEL_17:
  if (SHIBYTE(v34) < 0)
  {
    if (!__src[1] && v35)
    {
      LODWORD(v42) = (_DWORD)v32;
      sub_20BDDBFAC(&v43, __src[0], 0);
      v5 = v35;
LABEL_24:
      v45 = v5;
      v46 = v36;
      if (v36)
      {
        v6 = (unint64_t *)(v36 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v55 = 0;
      v8 = operator new(0x38uLL);
      *v8 = off_24C5430B8;
      sub_20C389C80((uint64_t)(v8 + 1), (uint64_t)&v42);
      v55 = v8;
      LODWORD(v37) = (_DWORD)v32;
      if (SHIBYTE(v34) < 0)
      {
        sub_20BDDBFAC(&v38, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v38 = *(_OWORD *)__src;
        v39 = v34;
      }
      v40 = v35;
      v41 = v36;
      if (v36)
      {
        v9 = (unint64_t *)(v36 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v53 = 0;
      v11 = operator new(0x38uLL);
      *v11 = off_24C543150;
      sub_20C389C80((uint64_t)(v11 + 1), (uint64_t)&v37);
      v53 = v11;
      v12 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1256), (_QWORD *)v3 + 11, (uint64_t)v54, (uint64_t)v52);
      LODWORD(v47) = (_DWORD)v32;
      if (SHIBYTE(v34) < 0)
      {
        sub_20BDDBFAC(&v48, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v48 = *(_OWORD *)__src;
        v49 = v34;
      }
      v50 = v35;
      v51 = v36;
      if (v36)
      {
        v13 = (unint64_t *)(v36 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = operator new(0x38uLL);
      *v15 = off_24C5431C0;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v47);
      v57 = v15;
      sub_20C73BC1C(v56, (_QWORD *)v12 + 8);
      v16 = v57;
      if (v57 == v56)
      {
        v17 = 4;
        v16 = v56;
      }
      else
      {
        if (!v57)
          goto LABEL_44;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_44:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v47);
      v18 = v53;
      if (v53 == v52)
      {
        v19 = 4;
        v18 = v52;
      }
      else
      {
        if (!v53)
          goto LABEL_49;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_49:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v37);
      v20 = v55;
      if (v55 == v54)
      {
        v21 = 4;
        v20 = v54;
      }
      else
      {
        if (!v55)
        {
LABEL_54:
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v42);
          goto LABEL_55;
        }
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
      goto LABEL_54;
    }
  }
  else if (!HIBYTE(v34))
  {
    v5 = v35;
    if (v35)
    {
      LODWORD(v42) = (_DWORD)v32;
      v43 = *(_OWORD *)__src;
      v44 = v34;
      goto LABEL_24;
    }
  }
LABEL_55:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v32);
  if (v31 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23 < 0)
    operator delete(v22[0]);
}

void sub_20C73004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;

  v39 = *(_QWORD **)(v37 - 112);
  if (v39 == (_QWORD *)(v37 - 136))
  {
    v40 = 4;
    v39 = (_QWORD *)(v37 - 136);
  }
  else
  {
    if (!v39)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_6:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&a37);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&a25);
  sub_20C739A4C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C730170(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v2;
  uint64_t *EmptyString;
  void *v4[2];
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  void *__p;
  char v10;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v2)
    v2 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if ((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  sub_20BDDC0E4(v4, ".arbGeomParams");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v4, (uint64_t)&v6);
  sub_20C73E44C(a1, (unsigned __int8 *)EmptyString, (uint64_t)&v6);
  if (v10 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_20C730240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20C739A4C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C73026C(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v2;
  uint64_t *EmptyString;
  void *v4[2];
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  void *__p;
  char v10;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v2)
    v2 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if ((*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  sub_20BDDC0E4(v4, ".userProperties");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v4, (uint64_t)&v6);
  sub_20C73E44C(a1, (unsigned __int8 *)EmptyString, (uint64_t)&v6);
  if (v10 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_20C73033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20C739A4C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C730368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  __int128 v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string::size_type i;
  __int128 v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  const char *v15;
  char *v16;
  std::string *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  std::string *p_dst;
  std::string *v22;
  std::string __p[2];
  void *v24;
  char v25;
  std::string v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  std::string __dst;
  std::string v32;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_20BE78B98((char *)&v27, *(__int128 **)(a1 + 160), *(__int128 **)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3));
  v2 = v27;
  v3 = v28;
  if (v27 != v28)
  {
    v4 = a1 + 216;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)v2))
      {
        v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__p);
        if ((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
        if (*((char *)EmptyString + 23) < 0)
        {
          sub_20BDDBFAC(&v26, (void *)*EmptyString, EmptyString[1]);
        }
        else
        {
          v12 = *(_OWORD *)EmptyString;
          v26.__r_.__value_.__r.__words[2] = EmptyString[2];
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
        }
        if ((__p[0].__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v13 = (unsigned int *)(__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        goto LABEL_55;
      }
      if (*(char *)(v2 + 23) < 0)
      {
        sub_20BDDBFAC(&__dst, *(void **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v7 = *(_OWORD *)v2;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v7;
      }
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __dst.__r_.__value_.__l.__size_;
      if (size)
      {
        pxrInternal__aapl__pxrReserved__::TfStringTrimLeft(" .", &__dst, __p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst = __p[0];
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)&__dst) & 1) == 0)
        {
          sub_20BDDC0E4(__p, ":");
          pxrInternal__aapl__pxrReserved__::TfStringSplit(&__dst, (char *)__p, (uint64_t *)&v32);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v9 = v32.__r_.__value_.__l.__size_;
          for (i = v32.__r_.__value_.__r.__words[0]; i != v9; i += 24)
          {
            pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier((unsigned __int8 *)i, __p);
            if (*(char *)(i + 23) < 0)
              operator delete(*(void **)i);
            v11 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
            *(_QWORD *)(i + 16) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
            *(_OWORD *)i = v11;
          }
          pxrInternal__aapl__pxrReserved__::TfStringJoin(":", (std::string **)&v32, &v30);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
          sub_20BDE5038((void ***)__p);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst = v30;
        }
      }
      else
      {
        std::string::operator=(&__dst, 95);
      }
      if (v4 != sub_20BDEEBA4(a1 + 208, (const void **)&__dst.__r_.__value_.__l.__data_))
      {
        v17 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__dst
            : (std::string *)__dst.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v15, v16, v17, 1);
        v18 = 2;
        while (v4 != sub_20BDEEBA4(a1 + 208, (const void **)&__p[0].__r_.__value_.__l.__data_))
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v19, v20, p_dst, v18);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          __p[0] = v32;
          v18 = (v18 + 1);
        }
        std::string::operator=(&__dst, __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__dst.__r_.__value_.__l.__size_ == 4)
        {
          v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
LABEL_53:
          if (LODWORD(v22->__r_.__value_.__l.__data_) == 1936482678)
          {
            sub_20BDDC0E4(&v26, "");
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_55;
          }
        }
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) == 4)
      {
        v22 = &__dst;
        goto LABEL_53;
      }
      v26 = __dst;
LABEL_55:
      sub_20C73C618(a1, v2, (uint64_t)__p);
      sub_20C73E44C((uint64_t **)a1, (unsigned __int8 *)&v26, (uint64_t)__p);
      if (v25 < 0)
        operator delete(v24);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p[0].__r_.__value_.__r.__words[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p[0].__r_.__value_.__r.__words + 1);
      sub_20BFD265C(__p);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v2 += 24;
    }
    while (v2 != v3);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_20BDE5038((void ***)__p);
}

void sub_20C73075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 96) = v36 - 120;
  sub_20BDE5038((void ***)(v36 - 96));
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  a36 = &a33;
  sub_20BDE5038((void ***)&a36);
  _Unwind_Resume(a1);
}

void sub_20C730830(uint64_t **a1)
{
  uint64_t v2;
  uint64_t Header;
  char v4;
  uint64_t NumSamples;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v8;
  uint64_t *v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  double SampleTime;
  const char *Text;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  char *v37;
  __int128 v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  void *v50;
  char v51;
  void (**v52)(Alembic::Abc::v12::IObject *__hidden);
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[4];
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  void *v67;
  int v68;
  __int128 __src;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  std::__shared_weak_count *v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[64];
  uint64_t v84;
  uint64_t *v85;
  int v86;
  __int128 __p;
  __int128 v88;
  _QWORD *v89;
  _BYTE v90[24];
  _BYTE *v91;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v92;
  std::type_info **v93;
  _QWORD **v94;
  _QWORD *v95[54];
  _BYTE v96[24];
  _BYTE *v97;
  _QWORD v98[3];
  _QWORD *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t)(a1 + 1);
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v4 = sub_20C740344(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v4 & 1) == 0)
    return;
  sub_20BE04EB0((uint64_t)&__p, v2);
  LODWORD(v92) = 0;
  LODWORD(v93) = 0;
  LODWORD(v85) = 0;
  v86 = 0;
  sub_20C740778((Alembic::Abc::v12::IObject *)&v67, (uint64_t)&__p, 0, (uint64_t **)&v92, &v85);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  sub_20BDDC0E4(&__p, ".xform");
  sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
  if (SBYTE7(v88) < 0)
    operator delete((void *)__p);
  NumSamples = Alembic::AbcGeom::v12::IXformSchema::getNumSamples((Alembic::AbcGeom::v12::IXformSchema *)&v77);
  if (v83[48])
    v6 = NumSamples != 0;
  else
    v6 = NumSamples;
  if (v6 >= 1)
  {
    v7 = 0;
    while (1)
    {
      __p = (unint64_t)v7;
      LODWORD(v88) = 2;
      if (!Alembic::AbcGeom::v12::IXformSchema::getInheritsXforms((uint64_t)&v77, (uint64_t)&__p))
        break;
      if (v6 == ++v7)
        goto LABEL_11;
    }
    *(_QWORD *)&__p = "usdAbc/alembicReader.cpp";
    *((_QWORD *)&__p + 1) = "_ReadXform";
    *(_QWORD *)&v88 = 3144;
    *((_QWORD *)&v88 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadXform(_PrimReaderContext *)";
    LOBYTE(v89) = 0;
    Alembic::AbcGeom::v12::IXformSchema::getTimeSampling((Alembic::AbcGeom::v12::IXformSchema *)&v77, &v92);
    SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v92, v7);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Ignoring transform that doesn't inherit at samples at time %f at <%s>", v14, *(_QWORD *)&SampleTime, Text);
    v15 = (std::__shared_weak_count *)v93;
    if (v93)
    {
      v16 = (unint64_t *)(v93 + 1);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    goto LABEL_74;
  }
LABEL_11:
  v8 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v8)
    v8 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v9 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_20BF32220(v9, (_QWORD *)v8 + 9);
  if (v6 >= 1)
  {
    v10 = sub_20C73FBF8();
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v11)
      v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v53 = v68;
    if (SHIBYTE(v70) < 0)
    {
      sub_20BDDBFAC(&v54, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      v54 = __src;
      v55 = v70;
    }
    v52 = off_24C518E68;
    v56 = v71;
    v57 = v72;
    if (v72)
    {
      v18 = (unint64_t *)(v72 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v58 = v73;
    v59 = v74;
    if (v74)
    {
      v20 = (unint64_t *)(v74 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (SHIBYTE(v76) < 0)
    {
      sub_20BDDBFAC(&v60, (void *)v75, *((unint64_t *)&v75 + 1));
    }
    else
    {
      v60 = v75;
      v61 = v76;
    }
    v52 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C543370;
    sub_20C741A2C((uint64_t)v62, (uint64_t)&v77);
    v65 = 0;
    v66 = 0;
    if (SHIBYTE(v55) < 0)
    {
      if (*((_QWORD *)&v54 + 1))
        goto LABEL_59;
    }
    else if (HIBYTE(v55))
    {
      goto LABEL_59;
    }
    if (v56)
    {
      if (v63 < 0)
      {
        if (v62[3])
          goto LABEL_59;
      }
      else if (v63)
      {
        goto LABEL_59;
      }
      if (v64)
      {
        sub_20C74195C((uint64_t)&v92, (uint64_t)&v52);
        v97 = 0;
        v22 = operator new(0x1D0uLL);
        *v22 = off_24C543428;
        sub_20C7420C0((uint64_t)(v22 + 1), (uint64_t)&v92);
        v97 = v22;
        sub_20C74195C((uint64_t)&v85, (uint64_t)&v52);
        v91 = 0;
        v23 = operator new(0x1D0uLL);
        *v23 = off_24C5434A8;
        sub_20C7420C0((uint64_t)(v23 + 1), (uint64_t)&v85);
        v91 = v23;
        v24 = sub_20C739A90(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8), (_QWORD *)v11 + 45, (uint64_t)v96, (uint64_t)v90);
        sub_20C74195C((uint64_t)&__p, (uint64_t)&v52);
        v25 = operator new(0x1D0uLL);
        *v25 = off_24C543518;
        sub_20C7420C0((uint64_t)(v25 + 1), (uint64_t)&__p);
        v99 = v25;
        sub_20C73BC1C(v98, (_QWORD *)v24 + 8);
        v26 = v99;
        if (v99 == v98)
        {
          v27 = 4;
          v26 = v98;
        }
        else
        {
          if (!v99)
            goto LABEL_48;
          v27 = 5;
        }
        (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_48:
        sub_20C73FEA4((uint64_t)&__p);
        v28 = v91;
        if (v91 == v90)
        {
          v29 = 4;
          v28 = v90;
        }
        else
        {
          if (!v91)
            goto LABEL_53;
          v29 = 5;
        }
        (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_53:
        sub_20C73FEA4((uint64_t)&v85);
        v30 = v97;
        if (v97 == v96)
        {
          v31 = 4;
          v30 = v96;
        }
        else
        {
          if (!v97)
          {
LABEL_58:
            sub_20C73FEA4((uint64_t)&v92);
            goto LABEL_59;
          }
          v31 = 5;
        }
        (*(void (**)(void))(*v30 + 8 * v31))();
        goto LABEL_58;
      }
    }
LABEL_59:
    sub_20C73FEA4((uint64_t)&v52);
    sub_20C008C78((uint64_t)&__p, 1uLL);
    v32 = sub_20C73FBF8();
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__p, v33, v34);
    sub_20BF32220(v89, (_QWORD *)(v32 + 8));
    v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v35)
      v35 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v36)
      v36 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v93 = off_24C525500;
    v37 = (char *)operator new(0x30uLL);
    v38 = v88;
    *(_OWORD *)v37 = __p;
    *((_OWORD *)v37 + 1) = v38;
    v39 = v89;
    *((_QWORD *)v37 + 4) = v89;
    if (v39)
    {
      v40 = v39 - 2;
      if (*((_QWORD *)v37 + 3))
        v40 = (unint64_t *)*((_QWORD *)v37 + 3);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = (unsigned int *)(v37 + 40);
    atomic_store(0, (unsigned int *)v37 + 10);
    v92 = (Alembic::AbcCoreAbstract::v12::TimeSampling *)v37;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v95[1] = 0;
    v95[0] = 0;
    v94 = v95;
    sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v35 + 1336), (_QWORD *)v36 + 68, (uint64_t)&v92);
    sub_20BDE9D48((uint64_t)&v94, v95[0]);
    sub_20BF4C2D8((uint64_t)&v92);
    sub_20C00918C(&__p);
  }
  sub_20BDDC0E4(&__p, ".xform");
  sub_20C73C618((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v47);
  if (v51 < 0)
    operator delete(v50);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v49);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
  sub_20BFD265C(&v47);
  if (SBYTE7(v88) < 0)
    operator delete((void *)__p);
LABEL_74:
  v67 = &unk_24C543370;
  v77 = &unk_24C5433A8;
  *(_QWORD *)&__p = &v84;
  sub_20BE67B24((void ***)&__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v83);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v82);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v81);
  v44 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v79);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v78);
  Alembic::Abc::v12::IObject::~IObject(&v67);
}

void sub_20C730F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  unint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a13);
  operator delete(v13);
  sub_20C73FEA4((uint64_t)&STACK[0x598]);
  v16 = (unint64_t *)STACK[0x778];
  if ((unint64_t *)STACK[0x778] == &STACK[0x760])
  {
    v17 = 4;
    v16 = &STACK[0x760];
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  sub_20C73FEA4((uint64_t)&STACK[0x3D0]);
  v18 = *(_QWORD **)(v14 - 144);
  if (v18 == (_QWORD *)(v14 - 168))
  {
    v19 = 4;
    v18 = (_QWORD *)(v14 - 168);
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_11:
  sub_20C73FEA4((uint64_t)&STACK[0x780]);
  sub_20C73FEA4((uint64_t)va);
  sub_20C7402B8((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C73112C(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v30;
  void *__src[2];
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  void *__p;
  char v39;
  void *v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[24];
  _BYTE *v51;
  _BYTE v52[24];
  _BYTE *v53;
  unsigned int *v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*((_QWORD *)v2 + 91) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  std::operator+<char>();
  sub_20C73C618((uint64_t)a1, (uint64_t)&v54, (uint64_t)&v35);
  if (SHIBYTE(v55) < 0)
    operator delete(v54);
  sub_20C743188((uint64_t)&v35, (uint64_t)&v54);
  if (SHIBYTE(v56) < 0)
  {
    if (*((_QWORD *)&v55 + 1))
      goto LABEL_9;
LABEL_23:
    v9 = v57;
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&v54);
    if (!v9)
      goto LABEL_10;
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10)
      v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v11)
      v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20C743188((uint64_t)&v35, (uint64_t)&v30);
    if (SHIBYTE(v32) < 0)
    {
      if (__src[1] || !v33)
        goto LABEL_66;
      LODWORD(v45) = (_DWORD)v30;
      sub_20BDDBFAC(&v46, __src[0], 0);
      v12 = v33;
    }
    else
    {
      if (HIBYTE(v32))
        goto LABEL_66;
      v12 = v33;
      if (!v33)
        goto LABEL_66;
      LODWORD(v45) = (_DWORD)v30;
      v46 = *(_OWORD *)__src;
      v47 = v32;
    }
    v48 = v12;
    v49 = v34;
    if (v34)
    {
      v13 = (unint64_t *)(v34 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v53 = 0;
    v15 = operator new(0x38uLL);
    *v15 = off_24C543718;
    sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v45);
    v53 = v15;
    LODWORD(v40) = (_DWORD)v30;
    if (SHIBYTE(v32) < 0)
    {
      sub_20BDDBFAC(&v41, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v41 = *(_OWORD *)__src;
      v42 = v32;
    }
    v43 = v33;
    v44 = v34;
    if (v34)
    {
      v16 = (unint64_t *)(v34 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v51 = 0;
    v18 = operator new(0x38uLL);
    *v18 = off_24C5437B0;
    sub_20C389C80((uint64_t)(v18 + 1), (uint64_t)&v40);
    v51 = v18;
    v19 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 728), (_QWORD *)v11 + 11, (uint64_t)v52, (uint64_t)v50);
    LODWORD(v54) = (_DWORD)v30;
    if (SHIBYTE(v32) < 0)
    {
      sub_20BDDBFAC(&v55, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v55 = *(_OWORD *)__src;
      v56 = v32;
    }
    v57 = v33;
    v58 = v34;
    if (v34)
    {
      v20 = (unint64_t *)(v34 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = operator new(0x38uLL);
    *v22 = off_24C543820;
    sub_20C389C80((uint64_t)(v22 + 1), (uint64_t)&v54);
    v60 = v22;
    sub_20C73BC1C(v59, (_QWORD *)v19 + 8);
    v23 = v60;
    if (v60 == v59)
    {
      v24 = 4;
      v23 = v59;
    }
    else
    {
      if (!v60)
        goto LABEL_55;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_55:
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&v54);
    v25 = v51;
    if (v51 == v50)
    {
      v26 = 4;
      v25 = v50;
    }
    else
    {
      if (!v51)
        goto LABEL_60;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_60:
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v40);
    v27 = v53;
    if (v53 == v52)
    {
      v28 = 4;
      v27 = v52;
    }
    else
    {
      if (!v53)
      {
LABEL_65:
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v45);
LABEL_66:
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v30);
        goto LABEL_67;
      }
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
    goto LABEL_65;
  }
  if (!HIBYTE(v56))
    goto LABEL_23;
LABEL_9:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&v54);
LABEL_10:
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4)
    v4 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5)
    v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v6 = *((_QWORD *)v5 + 66);
  v54 = (unsigned int *)v6;
  *(_QWORD *)&v55 = (char *)&off_24C5207B8 + 1;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v54 = v7;
  }
  v56 = 0;
  v57 = 0;
  *((_QWORD *)&v55 + 1) = &v56;
  sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 728), (_QWORD *)v4 + 11, (uint64_t)&v54);
  sub_20BDE9D48((uint64_t)&v55 + 8, v56);
  sub_20BF4C2D8((uint64_t)&v54);
LABEL_67:
  if (v39 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v37);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  return sub_20BFD265C(&v35);
}

void sub_20C7315F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C739A4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C731738(uint64_t **a1)
{
  uint64_t Header;
  char v3;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void **v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v33;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned __int8 **v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned __int8 **v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned __int8 **v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v72;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v73;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v74;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v75;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v76;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v77;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v78;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v79;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v80;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v81;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  void *v88[2];
  char v89;
  void *v90;
  void *__src[2];
  void **v92;
  uint64_t v93;
  uint64_t v94;
  void *__p;
  _BYTE v96[48];
  void *v97;
  char v98;
  void *v99;
  __int128 v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[24];
  _BYTE *v110;
  unsigned __int8 *v111[2];
  char v112;
  unsigned __int8 **v113;
  void *v114;
  __int128 v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v3 = sub_20C746BCC(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v3 & 1) == 0)
    return;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v4)
    v4 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v5 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_20BF32220(v5, (_QWORD *)v4 + 3);
  sub_20BDDC0E4(&__p, ".geom");
  sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
  if ((v96[15] & 0x80000000) != 0)
    operator delete(__p);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6)
    v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, "P");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C747898((uint64_t)&v114, (uint64_t)&__p, 1);
  sub_20C743930(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 816), (_QWORD *)v7 + 83, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".velocities");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C7440C8((uint64_t)&v114, (uint64_t)&__p);
  sub_20C743CFC(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (_QWORD *)v9 + 86, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10)
    v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v11)
    v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".faceIndices");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C744570((uint64_t)&v114, (uint64_t)&__p);
  sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 344), (_QWORD *)v11 + 58, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12)
    v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13)
    v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".faceCounts");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C744570((uint64_t)&v114, (uint64_t)&__p);
  sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 336), (_QWORD *)v13 + 58, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14)
    v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15)
    v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v111, ".scheme");
  sub_20C739988((uint64_t)a1, v111, (uint64_t)&__p);
  sub_20C743188((uint64_t)&__p, (uint64_t)&v90);
  if (SHIBYTE(v92) < 0)
  {
    if (!__src[1] && v93)
    {
      LODWORD(v104) = (_DWORD)v90;
      sub_20BDDBFAC(&v105, __src[0], 0);
      v16 = v93;
LABEL_49:
      v107 = v16;
      v108 = v94;
      if (v94)
      {
        v17 = (unint64_t *)(v94 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v116 = 0;
      v19 = (void **)operator new(0x38uLL);
      *v19 = off_24C543CB0;
      sub_20C389C80((uint64_t)(v19 + 1), (uint64_t)&v104);
      v116 = v19;
      LODWORD(v99) = (_DWORD)v90;
      if (SHIBYTE(v92) < 0)
      {
        sub_20BDDBFAC(&v100, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v100 = *(_OWORD *)__src;
        v101 = v92;
      }
      v102 = v93;
      v103 = v94;
      if (v94)
      {
        v20 = (unint64_t *)(v94 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v120 = 0;
      v22 = operator new(0x38uLL);
      *v22 = off_24C543D38;
      sub_20C389C80((uint64_t)(v22 + 1), (uint64_t)&v99);
      v120 = v22;
      v23 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 1032), (_QWORD *)v15 + 11, (uint64_t)&v114, (uint64_t)v119);
      v24 = v120;
      if (v120 == v119)
      {
        v25 = 4;
        v24 = v119;
      }
      else
      {
        if (!v120)
          goto LABEL_63;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_63:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v99);
      v26 = v116;
      if (v116 == &v114)
      {
        v27 = 4;
        v26 = &v114;
      }
      else
      {
        if (!v116)
          goto LABEL_68;
        v27 = 5;
      }
      (*((void (**)(void))*v26 + v27))();
LABEL_68:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v104);
      LODWORD(v114) = (_DWORD)v90;
      if (SHIBYTE(v92) < 0)
      {
        sub_20BDDBFAC(&v115, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v115 = *(_OWORD *)__src;
        v116 = v92;
      }
      v117 = v93;
      v118 = v94;
      if (v94)
      {
        v28 = (unint64_t *)(v94 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = operator new(0x38uLL);
      *v30 = off_24C543DA8;
      sub_20C389C80((uint64_t)(v30 + 1), (uint64_t)&v114);
      v120 = v30;
      sub_20C73BC1C(v119, (_QWORD *)v23 + 8);
      v31 = v120;
      if (v120 == v119)
      {
        v32 = 4;
        v31 = v119;
      }
      else
      {
        if (!v120)
        {
LABEL_79:
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v114);
          *((_WORD *)v23 + 28) = 256;
          goto LABEL_80;
        }
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
      goto LABEL_79;
    }
  }
  else if (!HIBYTE(v92))
  {
    v16 = v93;
    if (v93)
    {
      LODWORD(v104) = (_DWORD)v90;
      v105 = *(_OWORD *)__src;
      v106 = v92;
      goto LABEL_49;
    }
  }
LABEL_80:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v90);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v112 < 0)
    operator delete(v111[0]);
  v33 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v33)
    v33 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v34)
    v34 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v88, ".interpolateBoundary");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v88, (uint64_t)&__p);
  sub_20C749B98((uint64_t)&v90, (uint64_t)&__p);
  if (SHIBYTE(v92) < 0)
  {
    if (!__src[1] && v93)
    {
      LODWORD(v104) = (_DWORD)v90;
      sub_20BDDBFAC(&v105, __src[0], 0);
      v35 = v93;
LABEL_95:
      v107 = v35;
      v108 = v94;
      if (v94)
      {
        v36 = (unint64_t *)(v94 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v113 = 0;
      v38 = (unsigned __int8 **)operator new(0x38uLL);
      *v38 = (unsigned __int8 *)off_24C543E18;
      sub_20C389C80((uint64_t)(v38 + 1), (uint64_t)&v104);
      v113 = v38;
      LODWORD(v99) = (_DWORD)v90;
      if (SHIBYTE(v92) < 0)
      {
        sub_20BDDBFAC(&v100, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v100 = *(_OWORD *)__src;
        v101 = v92;
      }
      v102 = v93;
      v103 = v94;
      if (v94)
      {
        v39 = (unint64_t *)(v94 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v110 = 0;
      v41 = operator new(0x38uLL);
      *v41 = off_24C543EB0;
      sub_20C389C80((uint64_t)(v41 + 1), (uint64_t)&v99);
      v110 = v41;
      v42 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v33 + 480), (_QWORD *)v34 + 11, (uint64_t)v111, (uint64_t)v109);
      LODWORD(v114) = (_DWORD)v90;
      if (SHIBYTE(v92) < 0)
      {
        sub_20BDDBFAC(&v115, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v115 = *(_OWORD *)__src;
        v116 = v92;
      }
      v117 = v93;
      v118 = v94;
      if (v94)
      {
        v43 = (unint64_t *)(v94 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = operator new(0x38uLL);
      *v45 = off_24C543F20;
      sub_20C389C80((uint64_t)(v45 + 1), (uint64_t)&v114);
      v120 = v45;
      sub_20C73BC1C(v119, (_QWORD *)v42 + 8);
      v46 = v120;
      if (v120 == v119)
      {
        v47 = 4;
        v46 = v119;
      }
      else
      {
        if (!v120)
          goto LABEL_115;
        v47 = 5;
      }
      (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_115:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v114);
      v48 = v110;
      if (v110 == v109)
      {
        v49 = 4;
        v48 = v109;
      }
      else
      {
        if (!v110)
          goto LABEL_120;
        v49 = 5;
      }
      (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_120:
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v99);
      v50 = v113;
      if (v113 == v111)
      {
        v51 = 4;
        v50 = v111;
      }
      else
      {
        if (!v113)
        {
LABEL_125:
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v104);
          goto LABEL_126;
        }
        v51 = 5;
      }
      (*(void (**)(void))&(*v50)[8 * v51])();
      goto LABEL_125;
    }
  }
  else if (!HIBYTE(v92))
  {
    v35 = v93;
    if (v93)
    {
      LODWORD(v104) = (_DWORD)v90;
      v105 = *(_OWORD *)__src;
      v106 = v92;
      goto LABEL_95;
    }
  }
LABEL_126:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v90);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v89 < 0)
    operator delete(v88[0]);
  v52 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v52)
    v52 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v53)
    v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v88, ".faceVaryingInterpolateBoundary");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v88, (uint64_t)&__p);
  sub_20C749B98((uint64_t)&v90, (uint64_t)&__p);
  if (SHIBYTE(v92) < 0)
  {
    if (__src[1] || !v93)
      goto LABEL_172;
    LODWORD(v104) = (_DWORD)v90;
    sub_20BDDBFAC(&v105, __src[0], 0);
    v54 = v93;
  }
  else
  {
    if (HIBYTE(v92))
      goto LABEL_172;
    v54 = v93;
    if (!v93)
      goto LABEL_172;
    LODWORD(v104) = (_DWORD)v90;
    v105 = *(_OWORD *)__src;
    v106 = v92;
  }
  v107 = v54;
  v108 = v94;
  if (v94)
  {
    v55 = (unint64_t *)(v94 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v113 = 0;
  v57 = (unsigned __int8 **)operator new(0x38uLL);
  *v57 = (unsigned __int8 *)off_24C543F90;
  sub_20C389C80((uint64_t)(v57 + 1), (uint64_t)&v104);
  v113 = v57;
  LODWORD(v99) = (_DWORD)v90;
  if (SHIBYTE(v92) < 0)
  {
    sub_20BDDBFAC(&v100, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    v100 = *(_OWORD *)__src;
    v101 = v92;
  }
  v102 = v93;
  v103 = v94;
  if (v94)
  {
    v58 = (unint64_t *)(v94 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v110 = 0;
  v60 = operator new(0x38uLL);
  *v60 = off_24C544018;
  sub_20C389C80((uint64_t)(v60 + 1), (uint64_t)&v99);
  v110 = v60;
  v61 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v52 + 328), (_QWORD *)v53 + 11, (uint64_t)v111, (uint64_t)v109);
  LODWORD(v114) = (_DWORD)v90;
  if (SHIBYTE(v92) < 0)
  {
    sub_20BDDBFAC(&v115, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    v115 = *(_OWORD *)__src;
    v116 = v92;
  }
  v117 = v93;
  v118 = v94;
  if (v94)
  {
    v62 = (unint64_t *)(v94 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = operator new(0x38uLL);
  *v64 = off_24C544088;
  sub_20C389C80((uint64_t)(v64 + 1), (uint64_t)&v114);
  v120 = v64;
  sub_20C73BC1C(v119, (_QWORD *)v61 + 8);
  v65 = v120;
  if (v120 == v119)
  {
    v66 = 4;
    v65 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_161;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_161:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v114);
  v67 = v110;
  if (v110 == v109)
  {
    v68 = 4;
    v67 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_166;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_166:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v99);
  v69 = v113;
  if (v113 == v111)
  {
    v70 = 4;
    v69 = v111;
    goto LABEL_170;
  }
  if (v113)
  {
    v70 = 5;
LABEL_170:
    (*(void (**)(void))&(*v69)[8 * v70])();
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v104);
LABEL_172:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v90);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v89 < 0)
    operator delete(v88[0]);
  v71 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v71)
    v71 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v72 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v72)
    v72 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".holes");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C744570((uint64_t)&v114, (uint64_t)&__p);
  sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v71 + 424), (_QWORD *)v72 + 58, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v73 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v73)
    v73 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v74)
    v74 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".cornerIndices");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C744570((uint64_t)&v114, (uint64_t)&__p);
  sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v73 + 144), (_QWORD *)v74 + 58, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v75 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v75)
    v75 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v76 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v76)
    v76 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".cornerSharpnesses");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C74AC34((uint64_t)&__p, (uint64_t)&v114);
  sub_20C744644(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v75 + 152), (_QWORD *)v76 + 64, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v77 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v77)
    v77 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v78 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v78)
    v78 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".creaseIndices");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C744570((uint64_t)&v114, (uint64_t)&__p);
  sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v77 + 184), (_QWORD *)v78 + 58, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v79 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v79)
    v79 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v80)
    v80 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".creaseLengths");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C744570((uint64_t)&v114, (uint64_t)&__p);
  sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v79 + 192), (_QWORD *)v80 + 58, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  v81 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v81)
    v81 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v82 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v82)
    v82 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v104, ".creaseSharpnesses");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v104, (uint64_t)&__p);
  sub_20C74AC34((uint64_t)&__p, (uint64_t)&v114);
  sub_20C744644(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v81 + 200), (_QWORD *)v82 + 64, (uint64_t)&v114);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v114);
  if (v98 < 0)
    operator delete(v97);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v105) < 0)
    operator delete(v104);
  sub_20C7469C4();
  v87 = qword_25498CB20;
  if ((qword_25498CB20 & 7) != 0)
  {
    v83 = (unsigned int *)(qword_25498CB20 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 2, v83));
    if ((v84 & 1) == 0)
      v87 = (uint64_t)v83;
  }
  sub_20C746AEC();
  sub_20C744A10(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v87, qword_25498CB30);
  if ((v87 & 7) != 0)
  {
    v85 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
}

void sub_20C732990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;

  v51 = *(_QWORD **)(v49 - 176);
  if (v51 == (_QWORD *)(v49 - 200))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 200);
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_6:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)&a44);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&a17);
  sub_20C739A4C((uint64_t)&a23);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C732CF8(uint64_t **a1)
{
  uint64_t Header;
  char v3;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  char v30;
  void *v31[2];
  char v32;
  void *__p;
  char *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  void *v37;
  void *v38;
  char v39;
  _QWORD v40[8];

  v40[7] = *MEMORY[0x24BDAC8D0];
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v3 = sub_20C74E05C(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v3 & 1) != 0)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v4)
      v4 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    v5 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    sub_20BF32220(v5, (_QWORD *)v4 + 3);
    sub_20BDDC0E4(&__p, ".geom");
    sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6)
      v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v7)
      v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v31, "P");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v31, (uint64_t)&__p);
    sub_20C747898((uint64_t)&v27, (uint64_t)&__p, 1);
    sub_20C743930(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 816), (_QWORD *)v7 + 83, (uint64_t)&v27);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v27);
    if (v39 < 0)
      operator delete(v38);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (v32 < 0)
      operator delete(v31[0]);
    v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v8)
      v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v9)
      v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v31, ".velocities");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v31, (uint64_t)&__p);
    sub_20C7440C8((uint64_t)&v27, (uint64_t)&__p);
    sub_20C743CFC(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (_QWORD *)v9 + 86, (uint64_t)&v27);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v27);
    if (v39 < 0)
      operator delete(v38);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (v32 < 0)
      operator delete(v31[0]);
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10)
      v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v11)
      v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v31, "N");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v31, (uint64_t)&v27);
    sub_20C74DF40((uint64_t)&__p, (uint64_t)&v27);
    sub_20C74DB14(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 704), (_QWORD *)v11 + 89, (uint64_t)&__p);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v40);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v37);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
    if (v30 < 0)
      operator delete(v29);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
    if (v32 < 0)
      operator delete(v31[0]);
    v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v12)
      v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13)
      v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v31, ".faceIndices");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v31, (uint64_t)&__p);
    sub_20C744570((uint64_t)&v27, (uint64_t)&__p);
    sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 344), (_QWORD *)v13 + 58, (uint64_t)&v27);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v27);
    if (v39 < 0)
      operator delete(v38);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (v32 < 0)
      operator delete(v31[0]);
    v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v14)
      v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v15)
      v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v31, ".faceCounts");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v31, (uint64_t)&__p);
    sub_20C744570((uint64_t)&v27, (uint64_t)&__p);
    sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 336), (_QWORD *)v15 + 58, (uint64_t)&v27);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v27);
    if (v39 < 0)
      operator delete(v38);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (v32 < 0)
      operator delete(v31[0]);
    sub_20C7469C4();
    v26 = qword_25498CB20;
    if ((qword_25498CB20 & 7) != 0)
    {
      v16 = (unsigned int *)(qword_25498CB20 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v26 = (uint64_t)v16;
    }
    sub_20C746AEC();
    sub_20C744A10(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, qword_25498CB30);
    if ((v26 & 7) != 0)
    {
      v18 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v20)
      v20 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v21)
      v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v22)
      v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v23 = *((_QWORD *)v22 + 85);
    __p = (void *)v23;
    v34 = (char *)&off_24C5207B8 + 1;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        __p = v24;
    }
    v36[0] = 0;
    v36[1] = 0;
    v35 = v36;
    sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 1032), (_QWORD *)v21 + 11, (uint64_t)&__p);
    sub_20BDE9D48((uint64_t)&v35, v36[0]);
    sub_20BF4C2D8((uint64_t)&__p);
  }
}

void sub_20C7332F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20C74028C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20C7333F4(uint64_t **a1)
{
  const std::string *v2;
  uint64_t Header;
  char v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  void **v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  void **p_p;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40[12];
  uint64_t (**v41)();
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55[3];
  void *v56[12];
  uint64_t (**v57)();
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  int v65;
  char v66;
  uint64_t (**v67)();
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  std::string v74[4];
  uint64_t (**v75)();
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *__p;
  char *v83;
  void ***v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  uint64_t (**v90)();
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  _QWORD v97[3];
  _QWORD *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v2 = (const std::string *)(a1 + 1);
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v4 = sub_20BE51118(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v4 & 1) != 0)
  {
    sub_20BE04EB0((uint64_t)v74, (uint64_t)v2);
    Alembic::Abc::v12::IObject::getParent(v74, (uint64_t)&__p);
    if (SHIBYTE(v86) < 0)
    {
      if (v85)
        goto LABEL_4;
    }
    else if (HIBYTE(v86))
    {
LABEL_4:
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v74);
      return;
    }
    v5 = v87;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v74);
    if (v5)
    {
      sub_20BE04EB0((uint64_t)&__p, (uint64_t)v2);
      LODWORD(v74[0].__r_.__value_.__l.__data_) = 0;
      LODWORD(v74[0].__r_.__value_.__r.__words[1]) = 0;
      LODWORD(v64) = 0;
      v65 = 0;
      sub_20C750118((Alembic::Abc::v12::IObject *)v56, (uint64_t)&__p, 0, (uint64_t **)v74, (uint64_t **)&v64);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
      sub_20BDDC0E4(&__p, ".faceset");
      sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
      if (SHIBYTE(v84) < 0)
        operator delete(__p);
      v6 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if (!v6)
        v6 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      v7 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      sub_20BF32220(v7, (_QWORD *)v6 + 10);
      v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v8)
        v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v9)
        v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20BDDC0E4(&v64, ".faces");
      sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v64, (uint64_t)&__p);
      sub_20C744570((uint64_t)v74, (uint64_t)&__p);
      sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 464), (_QWORD *)v9 + 58, (uint64_t)v74);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v74[0].__r_.__value_.__l.__data_);
      if (v89 < 0)
        operator delete(v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v83);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_20BFD265C(&__p);
      if (v66 < 0)
        operator delete(v64);
      v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v10)
        v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v11)
        v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v12)
        v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v13 = *((_QWORD *)v12 + 39);
      v83 = (char *)&off_24C5207B8 + 1;
      __p = (void *)v13;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      v86 = 0;
      v85 = 0;
      v84 = &v85;
      sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 280), (_QWORD *)v11 + 11, (uint64_t)&__p);
      sub_20BDE9D48((uint64_t)&v84, v85);
      sub_20BF4C2D8((uint64_t)&__p);
      v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v16)
        v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v17)
        v17 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v18 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      if (!v18)
        v18 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v19 = *((_QWORD *)v18 + 2);
      v83 = (char *)&off_24C5207B8 + 1;
      __p = (void *)v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      v86 = 0;
      v85 = 0;
      v84 = &v85;
      sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 352), (_QWORD *)v17 + 11, (uint64_t)&__p);
      sub_20BDE9D48((uint64_t)&v84, v85);
      sub_20BF4C2D8((uint64_t)&__p);
      v22 = *a1;
      Alembic::Abc::v12::IObject::getParent(v2, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19), v74);
      sub_20C7505C0((uint64_t)&v48, (uint64_t)v22, (uint64_t)&__p, v74);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v74[0].__r_.__value_.__r.__words + 1);
      sub_20BFD265C(v74);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
      v23 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      if (!v23)
        v23 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v24)
        v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20BE50CC0((uint64_t)v40, (uint64_t)v56);
      if (!sub_20BE51910((uint64_t)v40))
        goto LABEL_62;
      sub_20BE50CC0((uint64_t)v74, (uint64_t)v40);
      v85 = 0;
      v25 = (void **)operator new(0x190uLL);
      *v25 = off_24C5448E8;
      sub_20C7509D8((uint64_t)(v25 + 1), (uint64_t)v74);
      v85 = v25;
      sub_20BE50CC0((uint64_t)&v64, (uint64_t)v40);
      v98 = 0;
      v26 = operator new(0x190uLL);
      *v26 = off_24C544980;
      sub_20C7509D8((uint64_t)(v26 + 1), (uint64_t)&v64);
      v98 = v26;
      v27 = sub_20C739A90(&v48, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v23 + 24), (_QWORD *)v24 + 11, (uint64_t)&__p, (uint64_t)v97);
      v28 = v98;
      if (v98 == v97)
      {
        v29 = 4;
        v28 = v97;
      }
      else
      {
        if (!v98)
          goto LABEL_51;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
      v64 = off_24C5198D0;
      v67 = (uint64_t (**)())&unk_24C519908;
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v73);
      v67 = off_24C519990;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v72);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v71);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v70);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v69);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v68);
      Alembic::Abc::v12::IObject::~IObject(&v64);
      p_p = v85;
      if (v85 == &__p)
      {
        v31 = 4;
        p_p = &__p;
      }
      else
      {
        if (!v85)
          goto LABEL_56;
        v31 = 5;
      }
      (*((void (**)(void))*p_p + v31))();
LABEL_56:
      v74[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C5198D0;
      v75 = (uint64_t (**)())&unk_24C519908;
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v81);
      v75 = off_24C519990;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v80);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v79);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v78);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v77);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v76);
      Alembic::Abc::v12::IObject::~IObject((void **)&v74[0].__r_.__value_.__l.__data_);
      sub_20BE50CC0((uint64_t)&__p, (uint64_t)v40);
      v32 = operator new(0x190uLL);
      *v32 = off_24C5449F0;
      sub_20C7509D8((uint64_t)(v32 + 1), (uint64_t)&__p);
      v98 = v32;
      sub_20C73BC1C(v97, (_QWORD *)v27 + 8);
      v33 = v98;
      if (v98 == v97)
      {
        v34 = 4;
        v33 = v97;
      }
      else
      {
        if (!v98)
        {
LABEL_61:
          __p = off_24C5198D0;
          v90 = (uint64_t (**)())&unk_24C519908;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v96);
          v90 = off_24C519990;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v95);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v94);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v93);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v92);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v91);
          Alembic::Abc::v12::IObject::~IObject(&__p);
          *((_WORD *)v27 + 28) = 256;
LABEL_62:
          v40[0] = off_24C5198D0;
          v41 = (uint64_t (**)())&unk_24C519908;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v47);
          v41 = off_24C519990;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v46);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v45);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v44);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v43);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v42);
          Alembic::Abc::v12::IObject::~IObject(v40);
          sub_20BDDC0E4(&__p, ".faceset");
          sub_20C73C618((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v35);
          if (v39 < 0)
            operator delete(v38);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v37);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
          sub_20BFD265C(&v35);
          if (SHIBYTE(v84) < 0)
            operator delete(__p);
          sub_20BDECAB8((uint64_t)v55, v55[1]);
          __p = &v54;
          sub_20BDE5038((void ***)&__p);
          __p = &v53;
          sub_20BDE5038((void ***)&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
          sub_20BFD265C(&v51);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v50);
          Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v49);
          v56[0] = off_24C5198D0;
          v57 = (uint64_t (**)())&unk_24C519908;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v63);
          v57 = off_24C519990;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v62);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v61);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v60);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v59);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v58);
          Alembic::Abc::v12::IObject::~IObject(v56);
          return;
        }
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
      goto LABEL_61;
    }
  }
}

void sub_20C733C60(_Unwind_Exception *a1)
{
  sub_20BE501EC((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void sub_20C733E54(uint64_t **a1)
{
  Alembic::Abc::v12::IObject *v2;
  uint64_t Header;
  char v4;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  const char *Text;
  char *v19;
  _BOOL4 v20;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v21;
  uint64_t *v22;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  int v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  char *v32;
  unsigned int *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v44;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v45;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v46;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  const char *v58;
  char *v59;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v60;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  char *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v92;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  char *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t *v111;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v112;
  uint64_t *v113;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v114;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v115;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v116;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v117;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v118;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v119;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v120;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v121;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v122;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v123;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143[2];
  char v144;
  void *v145;
  void *__src[2];
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  void *v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int64x2_t v158;
  __int128 v159;
  int64x2_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  int v164;
  int v165;
  int v166;
  void *v167;
  __int128 v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  __int128 v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  __int128 v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  char v183;
  void *__p;
  const char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  void *v189;
  void *v190;
  char v191;
  _BYTE v192[944];
  _BYTE v193[24];
  _BYTE *v194;
  _BYTE v195[24];
  _BYTE *v196;
  _QWORD v197[3];
  _QWORD *v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v2 = (Alembic::Abc::v12::IObject *)(a1 + 1);
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v4 = sub_20C751B78(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v4 & 1) == 0)
    return;
  sub_20BDDC0E4(&__p, ".geom");
  sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(v186) < 0)
    operator delete(__p);
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v159 = xmmword_20CA521E0;
  v160 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v161 = 0u;
  v162 = 0u;
  v163 = 0u;
  sub_20C751FAC((uint64_t)&v155);
  v172 = 0;
  *(_QWORD *)&v173 = 0;
  DWORD2(v173) = 2;
  Alembic::Abc::v12::IObject::getProperties(v2, (uint64_t)&v177);
  LODWORD(v167) = 0;
  LODWORD(v168) = 0;
  LODWORD(v145) = 0;
  LODWORD(__src[0]) = 0;
  sub_20C75208C((uint64_t)&__p, (uint64_t)&v177, (uint64_t **)&v167, (uint64_t **)&v145);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v177);
  if (sub_20C75201C((uint64_t)&__p))
  {
    Alembic::AbcGeom::v12::ICurvesSchema::get((uint64_t *)&__p, &v155, (uint64_t)&v172);
    sub_20C753C24((uint64_t)&__p);
    sub_20BDDC0E4(&__p, "curveBasisAndType");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)&__p, (uint64_t)&v150);
    if (v154 < 0)
      operator delete(v153);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v152);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v151);
    sub_20BFD265C(&v150);
    if (SHIBYTE(v186) < 0)
      operator delete(__p);
    if (v164)
    {
      if (v164 == 2)
      {
        v5 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if (!v5)
          v5 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        v6 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
        sub_20BF32220(v6, (_QWORD *)v5 + 4);
        v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v7)
          v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v8)
          v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        sub_20BDDC0E4(&v172, ".orders");
        sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&__p);
        sub_20C744570((uint64_t)&v177, (uint64_t)&__p);
        sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v7 + 720), (_QWORD *)v8 + 58, (uint64_t)&v177);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
        if (v191 < 0)
          operator delete(v190);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        if (SHIBYTE(v173) < 0)
          operator delete(v172);
        v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v9)
          v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v10)
          v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        sub_20BDDC0E4(v143, ".knots");
        sub_20C739988((uint64_t)a1, (unsigned __int8 **)v143, (uint64_t)&__p);
        sub_20C74AC34((uint64_t)&__p, (uint64_t)&v145);
        if (SHIBYTE(v147) < 0)
        {
          if (!__src[1] && v148)
          {
            LODWORD(v172) = (_DWORD)v145;
            sub_20BDDBFAC(&v173, __src[0], 0);
            v11 = v148;
LABEL_84:
            v175 = v11;
            v176 = v149;
            if (v149)
            {
              v41 = (unint64_t *)(v149 + 8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v196 = 0;
            v43 = operator new(0x38uLL);
            *v43 = off_24C544B38;
            sub_20C389C80((uint64_t)(v43 + 1), (uint64_t)&v172);
            v196 = v43;
            LODWORD(v167) = (_DWORD)v145;
            if (SHIBYTE(v147) < 0)
            {
              sub_20BDDBFAC(&v168, __src[0], (unint64_t)__src[1]);
            }
            else
            {
              v168 = *(_OWORD *)__src;
              v169 = v147;
            }
            v170 = v148;
            v171 = v149;
            if (v149)
            {
              v66 = (unint64_t *)(v149 + 8);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            v194 = 0;
            v68 = operator new(0x38uLL);
            *v68 = off_24C544BB8;
            sub_20C389C80((uint64_t)(v68 + 1), (uint64_t)&v167);
            v194 = v68;
            v69 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 512), (_QWORD *)v10 + 65, (uint64_t)v195, (uint64_t)v193);
            LODWORD(v177) = (_DWORD)v145;
            if (SHIBYTE(v147) < 0)
            {
              sub_20BDDBFAC(&v178, __src[0], (unint64_t)__src[1]);
            }
            else
            {
              v178 = *(_OWORD *)__src;
              v179 = v147;
            }
            v180 = v148;
            v181 = v149;
            if (v149)
            {
              v70 = (unint64_t *)(v149 + 8);
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            v72 = operator new(0x38uLL);
            *v72 = off_24C544C28;
            sub_20C389C80((uint64_t)(v72 + 1), (uint64_t)&v177);
            v198 = v72;
            sub_20C73BC1C(v197, (_QWORD *)v69 + 8);
            v73 = v198;
            if (v198 == v197)
            {
              v74 = 4;
              v73 = v197;
            }
            else
            {
              if (!v198)
                goto LABEL_174;
              v74 = 5;
            }
            (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_174:
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
            v75 = v194;
            if (v194 == v193)
            {
              v76 = 4;
              v75 = v193;
            }
            else
            {
              if (!v194)
                goto LABEL_179;
              v76 = 5;
            }
            (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_179:
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v167);
            v77 = v196;
            if (v196 == v195)
            {
              v78 = 4;
              v77 = v195;
            }
            else
            {
              if (!v196)
              {
LABEL_184:
                Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v172);
                goto LABEL_185;
              }
              v78 = 5;
            }
            (*(void (**)(void))(*v77 + 8 * v78))();
            goto LABEL_184;
          }
        }
        else if (!HIBYTE(v147))
        {
          v11 = v148;
          if (v148)
          {
            LODWORD(v172) = (_DWORD)v145;
            v173 = *(_OWORD *)__src;
            v174 = v147;
            goto LABEL_84;
          }
        }
LABEL_185:
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v145);
        if (v191 < 0)
          operator delete(v190);
LABEL_262:
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        if (v144 < 0)
          operator delete(v143[0]);
LABEL_264:
        v111 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
        v112 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if (!v112)
          v112 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if ((*v111 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v112 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_270;
        v113 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
        v114 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if (!v114)
          v114 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if ((*v113 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v114 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_270:
          v115 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v115)
            v115 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v116 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v116)
            v116 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          sub_20BDDC0E4(&v172, "P");
          sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&__p);
          sub_20C747898((uint64_t)&v177, (uint64_t)&__p, 1);
          sub_20C743930(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v115 + 816), (_QWORD *)v116 + 83, (uint64_t)&v177);
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
          if (v191 < 0)
            operator delete(v190);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_20BFD265C(&__p);
          if (SHIBYTE(v173) < 0)
            operator delete(v172);
          v117 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v117)
            v117 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v118 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v118)
            v118 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          sub_20BDDC0E4(&v172, ".velocities");
          sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&__p);
          sub_20C7440C8((uint64_t)&v177, (uint64_t)&__p);
          sub_20C743CFC(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v117 + 1216), (_QWORD *)v118 + 86, (uint64_t)&v177);
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
          if (v191 < 0)
            operator delete(v190);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_20BFD265C(&__p);
          if (SHIBYTE(v173) < 0)
            operator delete(v172);
        }
        v119 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v119)
          v119 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v120 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v120)
          v120 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        sub_20BDDC0E4(&v172, "N");
        sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&v177);
        sub_20C74DF40((uint64_t)&__p, (uint64_t)&v177);
        sub_20C74DB14(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v119 + 704), (_QWORD *)v120 + 89, (uint64_t)&__p);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v189);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
        if (v183 < 0)
          operator delete(v182);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v178);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v177 + 1);
        sub_20BFD265C(&v177);
        if (SHIBYTE(v173) < 0)
          operator delete(v172);
        v121 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v121)
          v121 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v122 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v122)
          v122 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        sub_20BDDC0E4(&v172, "nVertices");
        sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&__p);
        sub_20C744570((uint64_t)&v177, (uint64_t)&__p);
        sub_20C7441A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v121 + 224), (_QWORD *)v122 + 58, (uint64_t)&v177);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
        if (v191 < 0)
          operator delete(v190);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        if (SHIBYTE(v173) < 0)
          operator delete(v172);
        v123 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v123)
          v123 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v124 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v124)
          v124 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        sub_20BDDC0E4(&v172, "width");
        sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&v177);
        sub_20C751A14((uint64_t)&__p, (uint64_t)&v177);
        sub_20C7515E8(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v123 + 1312), (_QWORD *)v124 + 64, (uint64_t)&__p);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v192);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v189);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
        if (v183 < 0)
          operator delete(v182);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v178);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v177 + 1);
        sub_20BFD265C(&v177);
        if (SHIBYTE(v173) < 0)
          operator delete(v172);
        goto LABEL_310;
      }
LABEL_42:
      v21 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if (!v21)
        v21 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      v22 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      sub_20BF32220(v22, v21);
      v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v23)
        v23 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v24)
        v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v25 = v164;
      v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (v25 == 1)
      {
        if (!v26)
          v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v27 = (unsigned int *)*((_QWORD *)v26 + 68);
        if ((v27 & 7) == 0)
          goto LABEL_62;
        v28 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 2, v28));
      }
      else
      {
        if (!v26)
          v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v27 = (unsigned int *)*((_QWORD *)v26 + 27);
        if ((v27 & 7) == 0)
          goto LABEL_62;
        v28 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 2, v28));
      }
      if ((v29 & 1) == 0)
        v27 = v28;
LABEL_62:
      __p = v27;
      v185 = (char *)&off_24C5207B8 + 1;
      if ((v27 & 7) != 0)
      {
        v30 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 2, v30));
        if ((v31 & 1) == 0)
          __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      v188 = 0;
      v187 = 0;
      v186 = (uint64_t)&v187;
      sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v23 + 1128), (_QWORD *)v24 + 11, (uint64_t)&__p);
      sub_20BDE9D48((uint64_t)&v186, v187);
      sub_20BF4C2D8((uint64_t)&__p);
      if ((v27 & 7) != 0)
      {
        v33 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v35)
        v35 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v36)
        v36 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      switch(v165)
      {
        case 2:
          v37 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v37)
            v37 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v38 = *((_QWORD *)v37 + 10);
          if ((v38 & 7) != 0)
          {
            v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 2, v39));
            goto LABEL_112;
          }
          break;
        case 3:
          v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v46)
            v46 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v38 = *((_QWORD *)v46 + 13);
          if ((v38 & 7) != 0)
          {
            v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 2, v39));
            goto LABEL_112;
          }
          break;
        case 4:
          __p = "usdAbc/alembicReader.cpp";
          v185 = "_ConvertCurveBasis";
          v186 = 2930;
          v187 = "TfToken pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ConvertCurveBasis(BasisType)";
          LOBYTE(v188) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"'hermite' basis is no longer an allowed token for UsdGeomBasisCurves.", v32);
          v44 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v44)
            v44 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v38 = *((_QWORD *)v44 + 52);
          if ((v38 & 7) != 0)
          {
            v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 2, v39));
            goto LABEL_112;
          }
          break;
        case 5:
          __p = "usdAbc/alembicReader.cpp";
          v185 = "_ConvertCurveBasis";
          v186 = 2935;
          v187 = "TfToken pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ConvertCurveBasis(BasisType)";
          LOBYTE(v188) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"'power' basis is no longer an allowed token for UsdGeomBasisCurves.", v32);
          v45 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v45)
            v45 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v38 = *((_QWORD *)v45 + 105);
          if ((v38 & 7) != 0)
          {
            v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 2, v39));
            goto LABEL_112;
          }
          break;
        default:
          v47 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v47)
            v47 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          v38 = *((_QWORD *)v47 + 5);
          if ((v38 & 7) != 0)
          {
            v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 2, v39));
LABEL_112:
            if ((v40 & 1) == 0)
              v38 = (unint64_t)v39;
          }
          break;
      }
      v177 = v38;
      *(_QWORD *)&v178 = (char *)&off_24C5207B8 + 1;
      if ((v38 & 7) != 0)
      {
        v48 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 2, v48));
        if ((v49 & 1) == 0)
          v177 &= 0xFFFFFFFFFFFFFFF8;
      }
      v179 = 0;
      v180 = 0;
      *((_QWORD *)&v178 + 1) = &v179;
      sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v35 + 32), (_QWORD *)v36 + 11, (uint64_t)&v177);
      sub_20BDE9D48((uint64_t)&v178 + 8, v179);
      sub_20BF4C2D8((uint64_t)&v177);
      if ((v38 & 7) != 0)
      {
        v50 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      v52 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v52)
        v52 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v53)
        v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20C751538(v166, (unsigned int **)&v177);
      __p = (void *)v177;
      v185 = (char *)&off_24C5207B8 + 1;
      if ((v177 & 7) != 0)
      {
        v54 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 2, v54));
        if ((v55 & 1) == 0)
          __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      v188 = 0;
      v187 = 0;
      v186 = (uint64_t)&v187;
      sub_20C73FF44(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v52 + 1320), (_QWORD *)v53 + 11, (uint64_t)&__p);
      sub_20BDE9D48((uint64_t)&v186, v187);
      sub_20BF4C2D8((uint64_t)&__p);
      if ((v177 & 7) != 0)
      {
        v56 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      goto LABEL_264;
    }
    if (v165 != 4)
      goto LABEL_42;
    v12 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v12)
      v12 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    v13 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    sub_20BF32220(v13, (_QWORD *)v12 + 2);
    sub_20C751538(v166, (unsigned int **)&__p);
    v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v14)
      v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v15 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    v16 = *((_QWORD *)v14 + 87) & 0xFFFFFFFFFFFFFFF8;
    if ((__p & 7) != 0)
    {
      do
        v17 = __ldxr(v15);
      while (__stlxr(v17 - 2, v15));
    }
    if (v15 != (unsigned int *)v16)
    {
      __p = "usdAbc/alembicReader.cpp";
      v185 = "_ReadCurves";
      v186 = 3419;
      v187 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadCurves(_PrimReaderContext *)";
      LOBYTE(v188) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Wrap mode is not supported for cubic hermite curves: '%s'", v19, Text);
    }
    sub_20BDDC0E4(&v172, ".velocities");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v172, (uint64_t)&__p);
    sub_20C7440C8((uint64_t)&v177, (uint64_t)&__p);
    if (SHIBYTE(v179) < 0)
    {
      if (*((_QWORD *)&v178 + 1))
        goto LABEL_41;
    }
    else if (HIBYTE(v179))
    {
LABEL_41:
      v20 = 0;
      goto LABEL_137;
    }
    v20 = v180 != 0;
LABEL_137:
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
    if (v191 < 0)
      operator delete(v190);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (SHIBYTE(v173) < 0)
      operator delete(v172);
    if (v20)
    {
      __p = "usdAbc/alembicReader.cpp";
      v185 = "_ReadCurves";
      v186 = 3425;
      v187 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadCurves(_PrimReaderContext *)";
      LOBYTE(v188) = 0;
      v58 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Velocities are not supported for cubic hermite curves: '%s'", v59, v58);
    }
    v60 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v60)
      v60 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v61 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v61)
      v61 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v143, "P");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v143, (uint64_t)&__p);
    sub_20C747898((uint64_t)&v145, (uint64_t)&__p, 0);
    if (SHIBYTE(v147) < 0)
    {
      if (!__src[1] && v148)
      {
        LODWORD(v172) = (_DWORD)v145;
        sub_20BDDBFAC(&v173, __src[0], 0);
        v62 = v148;
LABEL_154:
        v175 = v62;
        v176 = v149;
        if (v149)
        {
          v63 = (unint64_t *)(v149 + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v196 = 0;
        v65 = operator new(0x38uLL);
        *v65 = off_24C544C98;
        sub_20C389C80((uint64_t)(v65 + 1), (uint64_t)&v172);
        v196 = v65;
        LODWORD(v167) = (_DWORD)v145;
        if (SHIBYTE(v147) < 0)
        {
          sub_20BDDBFAC(&v168, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          v168 = *(_OWORD *)__src;
          v169 = v147;
        }
        v170 = v148;
        v171 = v149;
        if (v149)
        {
          v79 = (unint64_t *)(v149 + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        v194 = 0;
        v81 = operator new(0x38uLL);
        *v81 = off_24C544D20;
        sub_20C389C80((uint64_t)(v81 + 1), (uint64_t)&v167);
        v194 = v81;
        v82 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v60 + 816), (_QWORD *)v61 + 83, (uint64_t)v195, (uint64_t)v193);
        LODWORD(v177) = (_DWORD)v145;
        if (SHIBYTE(v147) < 0)
        {
          sub_20BDDBFAC(&v178, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          v178 = *(_OWORD *)__src;
          v179 = v147;
        }
        v180 = v148;
        v181 = v149;
        if (v149)
        {
          v83 = (unint64_t *)(v149 + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        v85 = operator new(0x38uLL);
        *v85 = off_24C544D90;
        sub_20C389C80((uint64_t)(v85 + 1), (uint64_t)&v177);
        v198 = v85;
        sub_20C73BC1C(v197, (_QWORD *)v82 + 8);
        v86 = v198;
        if (v198 == v197)
        {
          v87 = 4;
          v86 = v197;
        }
        else
        {
          if (!v198)
            goto LABEL_203;
          v87 = 5;
        }
        (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_203:
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
        v88 = v194;
        if (v194 == v193)
        {
          v89 = 4;
          v88 = v193;
        }
        else
        {
          if (!v194)
            goto LABEL_208;
          v89 = 5;
        }
        (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_208:
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v167);
        v90 = v196;
        if (v196 == v195)
        {
          v91 = 4;
          v90 = v195;
        }
        else
        {
          if (!v196)
          {
LABEL_213:
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v172);
            goto LABEL_214;
          }
          v91 = 5;
        }
        (*(void (**)(void))(*v90 + 8 * v91))();
        goto LABEL_213;
      }
    }
    else if (!HIBYTE(v147))
    {
      v62 = v148;
      if (v148)
      {
        LODWORD(v172) = (_DWORD)v145;
        v173 = *(_OWORD *)__src;
        v174 = v147;
        goto LABEL_154;
      }
    }
LABEL_214:
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v145);
    if (v191 < 0)
      operator delete(v190);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v185);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (v144 < 0)
      operator delete(v143[0]);
    v92 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v92)
      v92 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v93 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v93)
      v93 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20BDDC0E4(v143, "P");
    sub_20C739988((uint64_t)a1, (unsigned __int8 **)v143, (uint64_t)&__p);
    sub_20C747898((uint64_t)&v145, (uint64_t)&__p, 0);
    if (SHIBYTE(v147) < 0)
    {
      if (!__src[1] && v148)
      {
        LODWORD(v172) = (_DWORD)v145;
        sub_20BDDBFAC(&v173, __src[0], 0);
        v94 = v148;
LABEL_229:
        v175 = v94;
        v176 = v149;
        if (v149)
        {
          v95 = (unint64_t *)(v149 + 8);
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        v196 = 0;
        v97 = operator new(0x38uLL);
        *v97 = off_24C544E00;
        sub_20C389C80((uint64_t)(v97 + 1), (uint64_t)&v172);
        v196 = v97;
        LODWORD(v167) = (_DWORD)v145;
        if (SHIBYTE(v147) < 0)
        {
          sub_20BDDBFAC(&v168, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          v168 = *(_OWORD *)__src;
          v169 = v147;
        }
        v170 = v148;
        v171 = v149;
        if (v149)
        {
          v98 = (unint64_t *)(v149 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v194 = 0;
        v100 = operator new(0x38uLL);
        *v100 = off_24C544E88;
        sub_20C389C80((uint64_t)(v100 + 1), (uint64_t)&v167);
        v194 = v100;
        v101 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v92 + 1048), (_QWORD *)v93 + 86, (uint64_t)v195, (uint64_t)v193);
        LODWORD(v177) = (_DWORD)v145;
        if (SHIBYTE(v147) < 0)
        {
          sub_20BDDBFAC(&v178, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          v178 = *(_OWORD *)__src;
          v179 = v147;
        }
        v180 = v148;
        v181 = v149;
        if (v149)
        {
          v102 = (unint64_t *)(v149 + 8);
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        v104 = operator new(0x38uLL);
        *v104 = off_24C544EF8;
        sub_20C389C80((uint64_t)(v104 + 1), (uint64_t)&v177);
        v198 = v104;
        sub_20C73BC1C(v197, (_QWORD *)v101 + 8);
        v105 = v198;
        if (v198 == v197)
        {
          v106 = 4;
          v105 = v197;
        }
        else
        {
          if (!v198)
            goto LABEL_249;
          v106 = 5;
        }
        (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_249:
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v177);
        v107 = v194;
        if (v194 == v193)
        {
          v108 = 4;
          v107 = v193;
        }
        else
        {
          if (!v194)
            goto LABEL_254;
          v108 = 5;
        }
        (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_254:
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v167);
        v109 = v196;
        if (v196 == v195)
        {
          v110 = 4;
          v109 = v195;
        }
        else
        {
          if (!v196)
          {
LABEL_259:
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v172);
            goto LABEL_260;
          }
          v110 = 5;
        }
        (*(void (**)(void))(*v109 + 8 * v110))();
        goto LABEL_259;
      }
    }
    else if (!HIBYTE(v147))
    {
      v94 = v148;
      if (v148)
      {
        LODWORD(v172) = (_DWORD)v145;
        v173 = *(_OWORD *)__src;
        v174 = v147;
        goto LABEL_229;
      }
    }
LABEL_260:
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v145);
    if (v191 < 0)
      operator delete(v190);
    goto LABEL_262;
  }
  sub_20C753C24((uint64_t)&__p);
LABEL_310:
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
}

void sub_20C7356F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  unsigned int *v73;
  unsigned int v74;

  if ((a72 & 7) != 0)
  {
    v73 = (unsigned int *)((unint64_t)a72 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  sub_20C751B30((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20C735A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  sub_20C753C24((uint64_t)&a72);
  JUMPOUT(0x20C735A58);
}

void sub_20C735A78()
{
  JUMPOUT(0x20C735A60);
}

void sub_20C735A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a72);
  JUMPOUT(0x20C735A60);
}

void sub_20C735A90(uint64_t **a1)
{
  uint64_t Header;
  char v3;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  uint64_t PropertyHeader;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  void *v34;
  void *__src[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  void *__p;
  int v47[3];
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _QWORD v70[3];
  _QWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v3 = sub_20C7567A8(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v3 & 1) == 0)
    return;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v4)
    v4 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v5 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_20BF32220(v5, (_QWORD *)v4 + 5);
  sub_20BDDC0E4(&__p, ".geom");
  sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
  if (v48 < 0)
    operator delete(__p);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6)
    v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7)
    v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v61, "P");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v61, (uint64_t)&__p);
  sub_20C747898((uint64_t)&v39, (uint64_t)&__p, 1);
  sub_20C743930(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 816), (_QWORD *)v7 + 83, (uint64_t)&v39);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v39);
  if (v54 < 0)
    operator delete(v53);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v47);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v62) < 0)
    operator delete(v61);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9)
    v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v61, ".velocities");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v61, (uint64_t)&__p);
  sub_20C7440C8((uint64_t)&v39, (uint64_t)&__p);
  sub_20C743CFC(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (_QWORD *)v9 + 86, (uint64_t)&v39);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v39);
  if (v54 < 0)
    operator delete(v53);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v47);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (SHIBYTE(v62) < 0)
    operator delete(v61);
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10)
    v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v11)
    v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(&v61, ".widths");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&v61, (uint64_t)&v39);
  sub_20C751A14((uint64_t)&__p, (uint64_t)&v39);
  sub_20C7515E8(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 1312), (_QWORD *)v11 + 64, (uint64_t)&__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v55);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v52);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
  if (v45 < 0)
    operator delete(v44);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
  sub_20BFD265C(&v39);
  if (SHIBYTE(v62) < 0)
    operator delete(v61);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12)
    v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13)
    v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20BDDC0E4(v32, ".pointIds");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)v32, (uint64_t)&__p);
  if (v50 < 0)
  {
    if (v49)
      goto LABEL_44;
  }
  else if (v50)
  {
    goto LABEL_44;
  }
  if (v51)
  {
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v47);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 7
        && *(_DWORD *)(PropertyHeader + 24) == 2
        && sub_20BE48BEC(PropertyHeader + 32, 0))
      {
        LODWORD(v39) = 0;
        LODWORD(v40) = 0;
        LODWORD(v61) = 0;
        LODWORD(v62) = 0;
        sub_20BE48604((uint64_t)&v34, v47, (uint64_t)&v53, (uint64_t **)&v39, (uint64_t **)&v61);
        goto LABEL_45;
      }
    }
  }
LABEL_44:
  LODWORD(v34) = 2;
  sub_20BDDC0E4(__src, "");
  v37 = 0;
  v38 = 0;
LABEL_45:
  if (SHIBYTE(v36) < 0)
  {
    if (__src[1] || !v37)
      goto LABEL_83;
    LODWORD(v61) = (_DWORD)v34;
    sub_20BDDBFAC(&v62, __src[0], 0);
    v15 = v37;
  }
  else
  {
    if (HIBYTE(v36))
      goto LABEL_83;
    v15 = v37;
    if (!v37)
      goto LABEL_83;
    LODWORD(v61) = (_DWORD)v34;
    v62 = *(_OWORD *)__src;
    v63 = v36;
  }
  v64 = v15;
  v65 = v38;
  if (v38)
  {
    v16 = (unint64_t *)(v38 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v69 = 0;
  v18 = operator new(0x38uLL);
  *v18 = off_24C545118;
  sub_20C389C80((uint64_t)(v18 + 1), (uint64_t)&v61);
  v69 = v18;
  LODWORD(v56) = (_DWORD)v34;
  if (SHIBYTE(v36) < 0)
  {
    sub_20BDDBFAC(&v57, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    v57 = *(_OWORD *)__src;
    v58 = v36;
  }
  v59 = v37;
  v60 = v38;
  if (v38)
  {
    v19 = (unint64_t *)(v38 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v67 = 0;
  v21 = operator new(0x38uLL);
  *v21 = off_24C545198;
  sub_20C389C80((uint64_t)(v21 + 1), (uint64_t)&v56);
  v67 = v21;
  v22 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 448), (_QWORD *)v13 + 61, (uint64_t)v68, (uint64_t)v66);
  LODWORD(v39) = (_DWORD)v34;
  if (SHIBYTE(v36) < 0)
  {
    sub_20BDDBFAC(&v40, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    v40 = *(_OWORD *)__src;
    v41 = v36;
  }
  v42 = v37;
  v43 = v38;
  if (v38)
  {
    v23 = (unint64_t *)(v38 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = operator new(0x38uLL);
  *v25 = off_24C545208;
  sub_20C389C80((uint64_t)(v25 + 1), (uint64_t)&v39);
  v71 = v25;
  sub_20C73BC1C(v70, (_QWORD *)v22 + 8);
  v26 = v71;
  if (v71 == v70)
  {
    v27 = 4;
    v26 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_72;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_72:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v39);
  v28 = v67;
  if (v67 == v66)
  {
    v29 = 4;
    v28 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_77;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_77:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v56);
  v30 = v69;
  if (v69 == v68)
  {
    v31 = 4;
    v30 = v68;
    goto LABEL_81;
  }
  if (v69)
  {
    v31 = 5;
LABEL_81:
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v61);
LABEL_83:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v34);
  if (v54 < 0)
    operator delete(v53);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v47);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v33 < 0)
    operator delete(v32[0]);
}

void sub_20C7361D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;

  v56 = *(_QWORD **)(v54 - 112);
  if (v56 == (_QWORD *)(v54 - 136))
  {
    v57 = 4;
    v56 = (_QWORD *)(v54 - 136);
  }
  else
  {
    if (!v56)
      goto LABEL_6;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_6:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(v54 - 216));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&a16);
  sub_20C739A4C((uint64_t)&a32);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C73638C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t Header;
  char v4;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v55;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v79;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  char *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v103;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  char *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v127;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  char *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  void *v154;
  char v155;
  void *v156;
  int v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  void *v166;
  void *v167[6];
  _BYTE v168[48];
  void *v169[6];
  _BYTE v170[48];
  _BYTE v171[48];
  _BYTE v172[48];
  void *v173[6];
  _BYTE v174[24];
  void *v175[13];
  void *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  void (**v184)(Alembic::Abc::v12::IObject *__hidden);
  int v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  void *v194;
  void *v195[6];
  _BYTE v196[48];
  void *v197[6];
  _BYTE v198[48];
  _BYTE v199[48];
  _BYTE v200[48];
  void *v201[6];
  _BYTE v202[24];
  void (**v203)(Alembic::Abc::v12::IObject *__hidden);
  int v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  void *v213;
  void *v214[6];
  _BYTE v215[48];
  void *v216[6];
  _BYTE v217[48];
  _BYTE v218[48];
  _BYTE v219[48];
  void *v220[6];
  _BYTE v221[24];
  void *__p;
  int v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  void *v232;
  void *v233[6];
  _BYTE v234[48];
  void *v235[6];
  _BYTE v236[48];
  _BYTE v237[48];
  _BYTE v238[48];
  void *v239[6];
  _BYTE v240[24];
  void **v241;
  _BYTE v242[24];
  _BYTE *v243;
  _BYTE v244[24];
  _BYTE *v245;
  _QWORD v246[3];
  _QWORD *v247;
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t)(a1 + 1);
  sub_20BE04EB0((uint64_t)&__p, (uint64_t)(a1 + 1));
  Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  v4 = sub_20C757690(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v4 & 1) == 0)
    return;
  sub_20BE04EB0((uint64_t)&__p, v2);
  LODWORD(v203) = 0;
  v204 = 0;
  LODWORD(v184) = 0;
  v185 = 0;
  sub_20C757ADC((Alembic::Abc::v12::IObject *)v175, (uint64_t)&__p, 0, (uint64_t **)&v203, (uint64_t **)&v184);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v5)
    v5 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v6 = sub_20C7395F0((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_20BF32220(v6, (_QWORD *)v5 + 1);
  sub_20BDDC0E4(&__p, ".geom");
  sub_20C73945C((uint64_t)a1, (uint64_t)&__p);
  if (SBYTE7(v224) < 0)
    operator delete(__p);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8)
    v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C759428((uint64_t)&v156, (uint64_t)v175);
  if (sub_20C7581A8((uint64_t)&v156))
  {
    v204 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v205, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v205 = v158;
      v206 = v159;
    }
    v203 = off_24C518E68;
    v207 = v160;
    v208 = v161;
    if (v161)
    {
      v9 = (unint64_t *)(v161 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v209 = v162;
    v210 = v163;
    if (v163)
    {
      v11 = (unint64_t *)(v163 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v211, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v211 = v164;
      v212 = v165;
    }
    v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v213, (uint64_t)&v166);
    v245 = 0;
    v13 = operator new(0x1D8uLL);
    *v13 = off_24C5452B0;
    sub_20C758790((uint64_t)(v13 + 1), (uint64_t)&v203);
    v245 = v13;
    v185 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v186, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v186 = v158;
      v187 = v159;
    }
    v184 = off_24C518E68;
    v188 = v160;
    v189 = v161;
    if (v161)
    {
      v14 = (unint64_t *)(v161 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v190 = v162;
    v191 = v163;
    if (v163)
    {
      v16 = (unint64_t *)(v163 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v192, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v192 = v164;
      v193 = v165;
    }
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v194, (uint64_t)&v166);
    v243 = 0;
    v18 = operator new(0x1D8uLL);
    *v18 = off_24C545348;
    sub_20C758790((uint64_t)(v18 + 1), (uint64_t)&v184);
    v243 = v18;
    v19 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v7 + 360), (_QWORD *)v8 + 7, (uint64_t)v244, (uint64_t)v242);
    v223 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v224, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v224 = v158;
      v225 = v159;
    }
    __p = off_24C518E68;
    v226 = v160;
    v227 = v161;
    if (v161)
    {
      v20 = (unint64_t *)(v161 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v228 = v162;
    v229 = v163;
    if (v163)
    {
      v22 = (unint64_t *)(v163 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v230, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v230 = v164;
      v231 = v165;
    }
    __p = &unk_24C545278;
    sub_20C7581D8((uint64_t)&v232, (uint64_t)&v166);
    v24 = operator new(0x1D8uLL);
    *v24 = off_24C5453B8;
    sub_20C758790((uint64_t)(v24 + 1), (uint64_t)&__p);
    v247 = v24;
    sub_20C73BC1C(v246, (_QWORD *)v19 + 8);
    v25 = v247;
    if (v247 == v246)
    {
      v26 = 4;
      v25 = v246;
    }
    else
    {
      if (!v247)
        goto LABEL_52;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_52:
    __p = &unk_24C545278;
    v232 = &unk_24C519560;
    v241 = (void **)v240;
    sub_20BE34B94(&v241);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v239);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v238);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v237);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v236);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v235);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v234);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v233);
    Alembic::Abc::v12::IObject::~IObject(&__p);
    v27 = v243;
    if (v243 == v242)
    {
      v28 = 4;
      v27 = v242;
    }
    else
    {
      if (!v243)
        goto LABEL_57;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_57:
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    v194 = &unk_24C519560;
    __p = v202;
    sub_20BE34B94((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v201);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v200);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v199);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v198);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v197);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v196);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v195);
    Alembic::Abc::v12::IObject::~IObject((void **)&v184);
    v29 = v245;
    if (v245 == v244)
    {
      v30 = 4;
      v29 = v244;
    }
    else
    {
      if (!v245)
      {
LABEL_62:
        v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
        v213 = &unk_24C519560;
        __p = v221;
        sub_20BE34B94((void ***)&__p);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v220);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v219);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v218);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v217);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v216);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v215);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v214);
        Alembic::Abc::v12::IObject::~IObject((void **)&v203);
        goto LABEL_63;
      }
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
    goto LABEL_62;
  }
LABEL_63:
  v156 = &unk_24C545278;
  v166 = &unk_24C519560;
  __p = v174;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v173);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v172);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v171);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v170);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v169);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v168);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v167);
  Alembic::Abc::v12::IObject::~IObject(&v156);
  v31 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v31)
    v31 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v32)
    v32 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C759428((uint64_t)&v156, (uint64_t)v175);
  if (sub_20C7581A8((uint64_t)&v156))
  {
    v204 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v205, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v205 = v158;
      v206 = v159;
    }
    v203 = off_24C518E68;
    v207 = v160;
    v208 = v161;
    if (v161)
    {
      v33 = (unint64_t *)(v161 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v209 = v162;
    v210 = v163;
    if (v163)
    {
      v35 = (unint64_t *)(v163 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v211, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v211 = v164;
      v212 = v165;
    }
    v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v213, (uint64_t)&v166);
    v245 = 0;
    v37 = operator new(0x1D8uLL);
    *v37 = off_24C545440;
    sub_20C7596D4((uint64_t)(v37 + 1), (uint64_t)&v203);
    v245 = v37;
    v185 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v186, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v186 = v158;
      v187 = v159;
    }
    v184 = off_24C518E68;
    v188 = v160;
    v189 = v161;
    if (v161)
    {
      v38 = (unint64_t *)(v161 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v190 = v162;
    v191 = v163;
    if (v163)
    {
      v40 = (unint64_t *)(v163 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v192, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v192 = v164;
      v193 = v165;
    }
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v194, (uint64_t)&v166);
    v243 = 0;
    v42 = operator new(0x1D8uLL);
    *v42 = off_24C5454C8;
    sub_20C7596D4((uint64_t)(v42 + 1), (uint64_t)&v184);
    v243 = v42;
    v43 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v31 + 432), (_QWORD *)v32 + 7, (uint64_t)v244, (uint64_t)v242);
    v223 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v224, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v224 = v158;
      v225 = v159;
    }
    __p = off_24C518E68;
    v226 = v160;
    v227 = v161;
    if (v161)
    {
      v44 = (unint64_t *)(v161 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v228 = v162;
    v229 = v163;
    if (v163)
    {
      v46 = (unint64_t *)(v163 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v230, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v230 = v164;
      v231 = v165;
    }
    __p = &unk_24C545278;
    sub_20C7581D8((uint64_t)&v232, (uint64_t)&v166);
    v48 = operator new(0x1D8uLL);
    *v48 = off_24C545538;
    sub_20C7596D4((uint64_t)(v48 + 1), (uint64_t)&__p);
    v247 = v48;
    sub_20C73BC1C(v246, (_QWORD *)v43 + 8);
    v49 = v247;
    if (v247 == v246)
    {
      v50 = 4;
      v49 = v246;
    }
    else
    {
      if (!v247)
        goto LABEL_109;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_109:
    __p = &unk_24C545278;
    v232 = &unk_24C519560;
    v241 = (void **)v240;
    sub_20BE34B94(&v241);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v239);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v238);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v237);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v236);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v235);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v234);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v233);
    Alembic::Abc::v12::IObject::~IObject(&__p);
    v51 = v243;
    if (v243 == v242)
    {
      v52 = 4;
      v51 = v242;
    }
    else
    {
      if (!v243)
        goto LABEL_114;
      v52 = 5;
    }
    (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_114:
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    v194 = &unk_24C519560;
    __p = v202;
    sub_20BE34B94((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v201);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v200);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v199);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v198);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v197);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v196);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v195);
    Alembic::Abc::v12::IObject::~IObject((void **)&v184);
    v53 = v245;
    if (v245 == v244)
    {
      v54 = 4;
      v53 = v244;
    }
    else
    {
      if (!v245)
      {
LABEL_119:
        v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
        v213 = &unk_24C519560;
        __p = v221;
        sub_20BE34B94((void ***)&__p);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v220);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v219);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v218);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v217);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v216);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v215);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v214);
        Alembic::Abc::v12::IObject::~IObject((void **)&v203);
        goto LABEL_120;
      }
      v54 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_119;
  }
LABEL_120:
  v156 = &unk_24C545278;
  v166 = &unk_24C519560;
  __p = v174;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v173);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v172);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v171);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v170);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v169);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v168);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v167);
  Alembic::Abc::v12::IObject::~IObject(&v156);
  v55 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v55)
    v55 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v56)
    v56 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C759428((uint64_t)&v156, (uint64_t)v175);
  if (sub_20C7581A8((uint64_t)&v156))
  {
    v204 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v205, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v205 = v158;
      v206 = v159;
    }
    v203 = off_24C518E68;
    v207 = v160;
    v208 = v161;
    if (v161)
    {
      v57 = (unint64_t *)(v161 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v209 = v162;
    v210 = v163;
    if (v163)
    {
      v59 = (unint64_t *)(v163 + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v211, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v211 = v164;
      v212 = v165;
    }
    v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v213, (uint64_t)&v166);
    v245 = 0;
    v61 = operator new(0x1D8uLL);
    *v61 = off_24C5455A8;
    sub_20C759EE0((uint64_t)(v61 + 1), (uint64_t)&v203);
    v245 = v61;
    v185 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v186, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v186 = v158;
      v187 = v159;
    }
    v184 = off_24C518E68;
    v188 = v160;
    v189 = v161;
    if (v161)
    {
      v62 = (unint64_t *)(v161 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v190 = v162;
    v191 = v163;
    if (v163)
    {
      v64 = (unint64_t *)(v163 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v192, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v192 = v164;
      v193 = v165;
    }
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v194, (uint64_t)&v166);
    v243 = 0;
    v66 = operator new(0x1D8uLL);
    *v66 = off_24C545630;
    sub_20C759EE0((uint64_t)(v66 + 1), (uint64_t)&v184);
    v243 = v66;
    v67 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v55 + 1232), (_QWORD *)v56 + 7, (uint64_t)v244, (uint64_t)v242);
    v223 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v224, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v224 = v158;
      v225 = v159;
    }
    __p = off_24C518E68;
    v226 = v160;
    v227 = v161;
    if (v161)
    {
      v68 = (unint64_t *)(v161 + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    v228 = v162;
    v229 = v163;
    if (v163)
    {
      v70 = (unint64_t *)(v163 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v230, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v230 = v164;
      v231 = v165;
    }
    __p = &unk_24C545278;
    sub_20C7581D8((uint64_t)&v232, (uint64_t)&v166);
    v72 = operator new(0x1D8uLL);
    *v72 = off_24C5456A0;
    sub_20C759EE0((uint64_t)(v72 + 1), (uint64_t)&__p);
    v247 = v72;
    sub_20C73BC1C(v246, (_QWORD *)v67 + 8);
    v73 = v247;
    if (v247 == v246)
    {
      v74 = 4;
      v73 = v246;
    }
    else
    {
      if (!v247)
        goto LABEL_166;
      v74 = 5;
    }
    (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_166:
    __p = &unk_24C545278;
    v232 = &unk_24C519560;
    v241 = (void **)v240;
    sub_20BE34B94(&v241);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v239);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v238);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v237);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v236);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v235);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v234);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v233);
    Alembic::Abc::v12::IObject::~IObject(&__p);
    v75 = v243;
    if (v243 == v242)
    {
      v76 = 4;
      v75 = v242;
    }
    else
    {
      if (!v243)
        goto LABEL_171;
      v76 = 5;
    }
    (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_171:
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    v194 = &unk_24C519560;
    __p = v202;
    sub_20BE34B94((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v201);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v200);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v199);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v198);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v197);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v196);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v195);
    Alembic::Abc::v12::IObject::~IObject((void **)&v184);
    v77 = v245;
    if (v245 == v244)
    {
      v78 = 4;
      v77 = v244;
    }
    else
    {
      if (!v245)
      {
LABEL_176:
        v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
        v213 = &unk_24C519560;
        __p = v221;
        sub_20BE34B94((void ***)&__p);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v220);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v219);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v218);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v217);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v216);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v215);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v214);
        Alembic::Abc::v12::IObject::~IObject((void **)&v203);
        goto LABEL_177;
      }
      v78 = 5;
    }
    (*(void (**)(void))(*v77 + 8 * v78))();
    goto LABEL_176;
  }
LABEL_177:
  v156 = &unk_24C545278;
  v166 = &unk_24C519560;
  __p = v174;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v173);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v172);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v171);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v170);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v169);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v168);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v167);
  Alembic::Abc::v12::IObject::~IObject(&v156);
  v79 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v79)
    v79 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v80)
    v80 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C759428((uint64_t)&v156, (uint64_t)v175);
  if (sub_20C7581A8((uint64_t)&v156))
  {
    v204 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v205, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v205 = v158;
      v206 = v159;
    }
    v203 = off_24C518E68;
    v207 = v160;
    v208 = v161;
    if (v161)
    {
      v81 = (unint64_t *)(v161 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v209 = v162;
    v210 = v163;
    if (v163)
    {
      v83 = (unint64_t *)(v163 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v211, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v211 = v164;
      v212 = v165;
    }
    v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v213, (uint64_t)&v166);
    v245 = 0;
    v85 = operator new(0x1D8uLL);
    *v85 = off_24C545710;
    sub_20C75A6EC((uint64_t)(v85 + 1), (uint64_t)&v203);
    v245 = v85;
    v185 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v186, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v186 = v158;
      v187 = v159;
    }
    v184 = off_24C518E68;
    v188 = v160;
    v189 = v161;
    if (v161)
    {
      v86 = (unint64_t *)(v161 + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v190 = v162;
    v191 = v163;
    if (v163)
    {
      v88 = (unint64_t *)(v163 + 8);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v192, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v192 = v164;
      v193 = v165;
    }
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v194, (uint64_t)&v166);
    v243 = 0;
    v90 = operator new(0x1D8uLL);
    *v90 = off_24C545798;
    sub_20C75A6EC((uint64_t)(v90 + 1), (uint64_t)&v184);
    v243 = v90;
    v91 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v79 + 440), (_QWORD *)v80 + 7, (uint64_t)v244, (uint64_t)v242);
    v223 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v224, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v224 = v158;
      v225 = v159;
    }
    __p = off_24C518E68;
    v226 = v160;
    v227 = v161;
    if (v161)
    {
      v92 = (unint64_t *)(v161 + 8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v228 = v162;
    v229 = v163;
    if (v163)
    {
      v94 = (unint64_t *)(v163 + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v230, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v230 = v164;
      v231 = v165;
    }
    __p = &unk_24C545278;
    sub_20C7581D8((uint64_t)&v232, (uint64_t)&v166);
    v96 = operator new(0x1D8uLL);
    *v96 = off_24C545808;
    sub_20C75A6EC((uint64_t)(v96 + 1), (uint64_t)&__p);
    v247 = v96;
    sub_20C73BC1C(v246, (_QWORD *)v91 + 8);
    v97 = v247;
    if (v247 == v246)
    {
      v98 = 4;
      v97 = v246;
    }
    else
    {
      if (!v247)
        goto LABEL_223;
      v98 = 5;
    }
    (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_223:
    __p = &unk_24C545278;
    v232 = &unk_24C519560;
    v241 = (void **)v240;
    sub_20BE34B94(&v241);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v239);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v238);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v237);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v236);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v235);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v234);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v233);
    Alembic::Abc::v12::IObject::~IObject(&__p);
    v99 = v243;
    if (v243 == v242)
    {
      v100 = 4;
      v99 = v242;
    }
    else
    {
      if (!v243)
        goto LABEL_228;
      v100 = 5;
    }
    (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_228:
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    v194 = &unk_24C519560;
    __p = v202;
    sub_20BE34B94((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v201);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v200);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v199);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v198);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v197);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v196);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v195);
    Alembic::Abc::v12::IObject::~IObject((void **)&v184);
    v101 = v245;
    if (v245 == v244)
    {
      v102 = 4;
      v101 = v244;
    }
    else
    {
      if (!v245)
      {
LABEL_233:
        v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
        v213 = &unk_24C519560;
        __p = v221;
        sub_20BE34B94((void ***)&__p);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v220);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v219);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v218);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v217);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v216);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v215);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v214);
        Alembic::Abc::v12::IObject::~IObject((void **)&v203);
        goto LABEL_234;
      }
      v102 = 5;
    }
    (*(void (**)(void))(*v101 + 8 * v102))();
    goto LABEL_233;
  }
LABEL_234:
  v156 = &unk_24C545278;
  v166 = &unk_24C519560;
  __p = v174;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v173);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v172);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v171);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v170);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v169);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v168);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v167);
  Alembic::Abc::v12::IObject::~IObject(&v156);
  v103 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v103)
    v103 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v104 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v104)
    v104 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C759428((uint64_t)&v156, (uint64_t)v175);
  if (sub_20C7581A8((uint64_t)&v156))
  {
    v204 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v205, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v205 = v158;
      v206 = v159;
    }
    v203 = off_24C518E68;
    v207 = v160;
    v208 = v161;
    if (v161)
    {
      v105 = (unint64_t *)(v161 + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v209 = v162;
    v210 = v163;
    if (v163)
    {
      v107 = (unint64_t *)(v163 + 8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v211, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v211 = v164;
      v212 = v165;
    }
    v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v213, (uint64_t)&v166);
    v245 = 0;
    v109 = operator new(0x1D8uLL);
    *v109 = off_24C545878;
    sub_20C75AEF8((uint64_t)(v109 + 1), (uint64_t)&v203);
    v245 = v109;
    v185 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v186, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v186 = v158;
      v187 = v159;
    }
    v184 = off_24C518E68;
    v188 = v160;
    v189 = v161;
    if (v161)
    {
      v110 = (unint64_t *)(v161 + 8);
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v190 = v162;
    v191 = v163;
    if (v163)
    {
      v112 = (unint64_t *)(v163 + 8);
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v192, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v192 = v164;
      v193 = v165;
    }
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    sub_20C7581D8((uint64_t)&v194, (uint64_t)&v166);
    v243 = 0;
    v114 = operator new(0x1D8uLL);
    *v114 = off_24C545900;
    sub_20C75AEF8((uint64_t)(v114 + 1), (uint64_t)&v184);
    v243 = v114;
    v115 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v103 + 1240), (_QWORD *)v104 + 7, (uint64_t)v244, (uint64_t)v242);
    v223 = v157;
    if (SHIBYTE(v159) < 0)
    {
      sub_20BDDBFAC(&v224, (void *)v158, *((unint64_t *)&v158 + 1));
    }
    else
    {
      v224 = v158;
      v225 = v159;
    }
    __p = off_24C518E68;
    v226 = v160;
    v227 = v161;
    if (v161)
    {
      v116 = (unint64_t *)(v161 + 8);
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    v228 = v162;
    v229 = v163;
    if (v163)
    {
      v118 = (unint64_t *)(v163 + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    if (SHIBYTE(v165) < 0)
    {
      sub_20BDDBFAC(&v230, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      v230 = v164;
      v231 = v165;
    }
    __p = &unk_24C545278;
    sub_20C7581D8((uint64_t)&v232, (uint64_t)&v166);
    v120 = operator new(0x1D8uLL);
    *v120 = off_24C545970;
    sub_20C75AEF8((uint64_t)(v120 + 1), (uint64_t)&__p);
    v247 = v120;
    sub_20C73BC1C(v246, (_QWORD *)v115 + 8);
    v121 = v247;
    if (v247 == v246)
    {
      v122 = 4;
      v121 = v246;
    }
    else
    {
      if (!v247)
        goto LABEL_280;
      v122 = 5;
    }
    (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_280:
    __p = &unk_24C545278;
    v232 = &unk_24C519560;
    v241 = (void **)v240;
    sub_20BE34B94(&v241);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v239);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v238);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v237);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v236);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v235);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v234);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v233);
    Alembic::Abc::v12::IObject::~IObject(&__p);
    v123 = v243;
    if (v243 == v242)
    {
      v124 = 4;
      v123 = v242;
    }
    else
    {
      if (!v243)
        goto LABEL_285;
      v124 = 5;
    }
    (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_285:
    v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
    v194 = &unk_24C519560;
    __p = v202;
    sub_20BE34B94((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v201);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v200);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v199);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v198);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v197);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v196);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v195);
    Alembic::Abc::v12::IObject::~IObject((void **)&v184);
    v125 = v245;
    if (v245 == v244)
    {
      v126 = 4;
      v125 = v244;
    }
    else
    {
      if (!v245)
      {
LABEL_290:
        v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
        v213 = &unk_24C519560;
        __p = v221;
        sub_20BE34B94((void ***)&__p);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v220);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v219);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v218);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v217);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v216);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v215);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v214);
        Alembic::Abc::v12::IObject::~IObject((void **)&v203);
        goto LABEL_291;
      }
      v126 = 5;
    }
    (*(void (**)(void))(*v125 + 8 * v126))();
    goto LABEL_290;
  }
LABEL_291:
  v156 = &unk_24C545278;
  v166 = &unk_24C519560;
  __p = v174;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v173);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v172);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v171);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v170);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v169);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v168);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v167);
  Alembic::Abc::v12::IObject::~IObject(&v156);
  v127 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v127)
    v127 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v128 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v128)
    v128 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C759428((uint64_t)&v156, (uint64_t)v175);
  if (!sub_20C7581A8((uint64_t)&v156))
    goto LABEL_348;
  v204 = v157;
  if (SHIBYTE(v159) < 0)
  {
    sub_20BDDBFAC(&v205, (void *)v158, *((unint64_t *)&v158 + 1));
  }
  else
  {
    v205 = v158;
    v206 = v159;
  }
  v203 = off_24C518E68;
  v207 = v160;
  v208 = v161;
  if (v161)
  {
    v129 = (unint64_t *)(v161 + 8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
  }
  v209 = v162;
  v210 = v163;
  if (v163)
  {
    v131 = (unint64_t *)(v163 + 8);
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  if (SHIBYTE(v165) < 0)
  {
    sub_20BDDBFAC(&v211, (void *)v164, *((unint64_t *)&v164 + 1));
  }
  else
  {
    v211 = v164;
    v212 = v165;
  }
  v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
  sub_20C7581D8((uint64_t)&v213, (uint64_t)&v166);
  v245 = 0;
  v133 = operator new(0x1D8uLL);
  *v133 = off_24C5459E0;
  sub_20C75B700((uint64_t)(v133 + 1), (uint64_t)&v203);
  v245 = v133;
  v185 = v157;
  if (SHIBYTE(v159) < 0)
  {
    sub_20BDDBFAC(&v186, (void *)v158, *((unint64_t *)&v158 + 1));
  }
  else
  {
    v186 = v158;
    v187 = v159;
  }
  v184 = off_24C518E68;
  v188 = v160;
  v189 = v161;
  if (v161)
  {
    v134 = (unint64_t *)(v161 + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v190 = v162;
  v191 = v163;
  if (v163)
  {
    v136 = (unint64_t *)(v163 + 8);
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  if (SHIBYTE(v165) < 0)
  {
    sub_20BDDBFAC(&v192, (void *)v164, *((unint64_t *)&v164 + 1));
  }
  else
  {
    v192 = v164;
    v193 = v165;
  }
  v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
  sub_20C7581D8((uint64_t)&v194, (uint64_t)&v166);
  v243 = 0;
  v138 = operator new(0x1D8uLL);
  *v138 = off_24C545A68;
  sub_20C75B700((uint64_t)(v138 + 1), (uint64_t)&v184);
  v243 = v138;
  v139 = sub_20C739A90(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v127 + 120), (_QWORD *)v128 + 19, (uint64_t)v244, (uint64_t)v242);
  v223 = v157;
  if (SHIBYTE(v159) < 0)
  {
    sub_20BDDBFAC(&v224, (void *)v158, *((unint64_t *)&v158 + 1));
  }
  else
  {
    v224 = v158;
    v225 = v159;
  }
  __p = off_24C518E68;
  v226 = v160;
  v227 = v161;
  if (v161)
  {
    v140 = (unint64_t *)(v161 + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  v228 = v162;
  v229 = v163;
  if (v163)
  {
    v142 = (unint64_t *)(v163 + 8);
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  if (SHIBYTE(v165) < 0)
  {
    sub_20BDDBFAC(&v230, (void *)v164, *((unint64_t *)&v164 + 1));
  }
  else
  {
    v230 = v164;
    v231 = v165;
  }
  __p = &unk_24C545278;
  sub_20C7581D8((uint64_t)&v232, (uint64_t)&v166);
  v144 = operator new(0x1D8uLL);
  *v144 = off_24C545AD8;
  sub_20C75B700((uint64_t)(v144 + 1), (uint64_t)&__p);
  v247 = v144;
  sub_20C73BC1C(v246, (_QWORD *)v139 + 8);
  v145 = v247;
  if (v247 == v246)
  {
    v146 = 4;
    v145 = v246;
  }
  else
  {
    if (!v247)
      goto LABEL_337;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_337:
  __p = &unk_24C545278;
  v232 = &unk_24C519560;
  v241 = (void **)v240;
  sub_20BE34B94(&v241);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v239);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v238);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v237);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v236);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v235);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v234);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v233);
  Alembic::Abc::v12::IObject::~IObject(&__p);
  v147 = v243;
  if (v243 == v242)
  {
    v148 = 4;
    v147 = v242;
  }
  else
  {
    if (!v243)
      goto LABEL_342;
    v148 = 5;
  }
  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_342:
  v184 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
  v194 = &unk_24C519560;
  __p = v202;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v201);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v200);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v199);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v198);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v197);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v196);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v195);
  Alembic::Abc::v12::IObject::~IObject((void **)&v184);
  v149 = v245;
  if (v245 == v244)
  {
    v150 = 4;
    v149 = v244;
    goto LABEL_346;
  }
  if (v245)
  {
    v150 = 5;
LABEL_346:
    (*(void (**)(void))(*v149 + 8 * v150))();
  }
  v203 = (void (**)(Alembic::Abc::v12::IObject *__hidden))&unk_24C545278;
  v213 = &unk_24C519560;
  __p = v221;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v220);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v219);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v218);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v217);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v216);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v215);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v214);
  Alembic::Abc::v12::IObject::~IObject((void **)&v203);
LABEL_348:
  v156 = &unk_24C545278;
  v166 = &unk_24C519560;
  __p = v174;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v173);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v172);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v171);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v170);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v169);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v168);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v167);
  Alembic::Abc::v12::IObject::~IObject(&v156);
  sub_20BDDC0E4(&__p, ".geom");
  sub_20C73C618((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v151);
  if (v155 < 0)
    operator delete(v154);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v153);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v152);
  sub_20BFD265C(&v151);
  if (SBYTE7(v224) < 0)
    operator delete(__p);
  v175[0] = &unk_24C545278;
  v175[12] = &unk_24C519560;
  __p = &v183;
  sub_20BE34B94((void ***)&__p);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v182);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v181);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v180);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v179);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v178);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v177);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v176);
  Alembic::Abc::v12::IObject::~IObject(v175);
}

void sub_20C738824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v12;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v12);
  if (SLOBYTE(STACK[0x7BF]) < 0)
    operator delete((void *)STACK[0x7A8]);
  v16 = *(_QWORD **)(v14 - 168);
  if (v16 == (_QWORD *)(v14 - 192))
  {
    v17 = 4;
    v16 = (_QWORD *)(v14 - 192);
  }
  else
  {
    if (!v16)
      goto LABEL_8;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_8:
  sub_20C757568((uint64_t)&STACK[0x3F8]);
  v18 = *(_QWORD **)(v14 - 136);
  if (v18 == (_QWORD *)(v14 - 160))
  {
    v19 = 4;
    v18 = (_QWORD *)(v14 - 160);
  }
  else
  {
    if (!v18)
      goto LABEL_13;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_13:
  sub_20C757568((uint64_t)&STACK[0x5C8]);
  sub_20C757568((uint64_t)va);
  sub_20C7575FC((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_20C739184()
{
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&STACK[0x798]);
  JUMPOUT(0x20C73917CLL);
}

uint64_t *sub_20C7391D0(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  const void **v7;

  v3 = &qword_25498CA78;
  v4 = qword_25498CA78;
  if (qword_25498CA78)
  {
    v6 = &qword_25498CA78;
    do
    {
      while (1)
      {
        v3 = (uint64_t *)v4;
        v7 = (const void **)(v4 + 32);
        if (!sub_20BDDDF74((uint64_t)&qword_25498CA80, a2, (const void **)(v4 + 32)))
          break;
        v4 = *v3;
        v6 = v3;
        if (!*v3)
          goto LABEL_10;
      }
      if (!sub_20BDDDF74((uint64_t)&qword_25498CA80, v7, a2))
        break;
      v6 = v3 + 1;
      v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    v6 = &qword_25498CA78;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *sub_20C73927C(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)qword_25498CA70)
  {
    qword_25498CA70 = *(_QWORD *)qword_25498CA70;
    a3 = *a2;
  }
  result = sub_20BDDE208((uint64_t *)qword_25498CA78, a3);
  ++qword_25498CA80;
  return result;
}

uint64_t sub_20C7392D8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C73931C((uint64_t)v2 + 32);
    operator delete(v2);
  }
  return a1;
}

void sub_20C73931C(uint64_t a1)
{
  sub_20C739358((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void **sub_20C739358(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_10;
  do
  {
    v5 = v3 - 32;
    v6 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v6)
    {
      v6 = v3 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v3 = v5;
  }
  while (v5 != v2);
  v4 = *a1;
LABEL_10:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_20C7393E0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v5 = (_QWORD *)*(v2 - 1);
      if (v5 == v4)
        break;
      if (v5)
      {
        v4 = v5;
        v6 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v6))();
        v4 = *(_QWORD **)(a1 + 16);
      }
      v2 = v4;
      if (v4 == v3)
        goto LABEL_8;
    }
    v6 = 4;
    goto LABEL_6;
  }
LABEL_8:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C73945C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t NumProperties;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *PropertyHeader;
  const void **v11;
  const void **v12;
  uint64_t **v13;
  uint64_t *v14;
  _DWORD v15[4];
  _BYTE v16[48];
  int v17;
  std::string v18;
  uint64_t v19;

  v4 = (uint64_t *)(a1 + 184);
  sub_20BDE5078((uint64_t *)(a1 + 184));
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)(a1 + 8), (uint64_t)v16);
  v15[0] = 1;
  v15[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v17, v16, a2, v15);
  *(_DWORD *)(a1 + 104) = v17;
  std::string::operator=((std::string *)(a1 + 112), &v18);
  sub_20BDE881C((_QWORD *)(a1 + 136), &v19);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v17);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v16);
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(_QWORD *)(a1 + 120))
      goto LABEL_9;
  }
  else if (*(_BYTE *)(a1 + 135))
  {
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
    sub_20BDF3198(v4, NumProperties);
    v6 = *(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = v6 / 24;
      do
      {
        PropertyHeader = (const std::string *)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
        std::string::operator=((std::string *)(*v4 + v7), PropertyHeader);
        ++v8;
        v7 += 24;
      }
      while (v9 != v8);
    }
  }
LABEL_9:
  v11 = *(const void ***)(a1 + 184);
  v12 = *(const void ***)(a1 + 192);
  if (v11 != v12)
  {
    v13 = (uint64_t **)(a1 + 208);
    v14 = (uint64_t *)(a1 + 216);
    do
    {
      sub_20BE7AA28(v13, v14, v11, (uint64_t)v11);
      v11 += 3;
    }
    while (v11 != v12);
  }
}

void sub_20C7395CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7395F0(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (!v4)
  {
    v6 = a1 + 1;
LABEL_10:
    v8 = (uint64_t *)operator new(0x100uLL);
    sub_20BFD6E54((_DWORD *)v8 + 8, a2);
    sub_20BFD6EA4((_DWORD *)v8 + 9, (_DWORD *)a2 + 1);
    *((_BYTE *)v8 + 104) = 0;
    *((_BYTE *)v8 + 128) = 0;
    *((_BYTE *)v8 + 136) = 0;
    *((_BYTE *)v8 + 160) = 0;
    v8[22] = 0;
    *(_OWORD *)(v8 + 5) = 0u;
    *(_OWORD *)(v8 + 7) = 0u;
    *(_OWORD *)(v8 + 9) = 0u;
    v8[11] = 0;
    v8[21] = (uint64_t)(v8 + 22);
    v8[25] = 0;
    v8[23] = 0;
    v8[24] = (uint64_t)(v8 + 25);
    v8[26] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 55);
    v8[28] = 0;
    v8[29] = 0;
    *((_WORD *)v8 + 124) = 0;
    v8[30] = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    v10 = v8;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_20BDDE208(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8 + 5;
  }
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t **)v4;
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4);
      if (!sub_20BFD758C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4)))
        break;
      v4 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!sub_20BFD758C(v7, a2))
      break;
    v5 = v6 + 1;
    v4 = v6[1];
    if (!v4)
      goto LABEL_10;
  }
  v8 = *v5;
  if (!*v5)
    goto LABEL_10;
  return v8 + 5;
}

void sub_20C739748(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C739748(a1, *a2);
    sub_20C739748(a1, a2[1]);
    sub_20C73979C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C73979C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = (_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v5);
  }
  sub_20C3A3BA4(a1 + 16, *(_QWORD **)(a1 + 24));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

uint64_t sub_20C739824(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *sub_20C739854(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *result;
  void *v4;

  result = sub_20C73989C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::~UsdAbcPrimTypeNames_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *sub_20C73989C()
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::UsdAbcPrimTypeNames_StaticTokenType(v0);
  return v0;
}

void sub_20C7398C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7398E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C542CD0;
  result[1] = v3;
  return result;
}

uint64_t sub_20C739918(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C542CD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C739934(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t sub_20C739940(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542D50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73997C()
{
  return &unk_24C542D50;
}

uint64_t sub_20C739988@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = sub_20C020210(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), a2);
  v7 = *(__int128 **)(a1 + 192);
  if ((__int128 *)v6 == v7)
    return sub_20C73BE90(a3, (_DWORD *)(a1 + 152), (__int128 *)a2);
  sub_20C07F91C((uint64_t)&v12, (__int128 *)(v6 + 24), v7, v6);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 192);
  if (v10 != v8)
  {
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
  }
  *(_QWORD *)(a1 + 192) = v9;
  return sub_20C73BD90(a3, (_DWORD *)(a1 + 152), (__int128 *)a2, a1 + 104);
}

_DWORD *sub_20C739A4C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

char *sub_20C739A90(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  char *v12;
  void *__p[3];
  char v15;

  v6 = *(_QWORD *)(a4 + 24);
  if (!v6
    || (v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p), (v11 = *(_QWORD *)(a5 + 24)) == 0))
  {
    sub_20BE9E974();
  }
  (*(void (**)(void **__return_ptr, uint64_t, char *))(*(_QWORD *)v11 + 48))(__p, v11, &v15);
  v12 = sub_20C739B5C(a1, a2, a3, v10, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_20C739B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C739B5C(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5, char a6)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  int v16;
  _QWORD *v17;
  uint64_t *NameToken;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  char *v25;
  uint64_t *EmptyString;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  void *v50;
  void *v51;
  void *v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  uint64_t *v54;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v55;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v56;
  _BOOL4 v58;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v68;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v69;
  _BOOL4 v70;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  _DWORD *p_dst;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v82;
  unint64_t v83;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v86;
  _BOOL4 v87;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v88;
  uint64_t v89;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v90;
  unint64_t ***v91;
  const pxrInternal__aapl__pxrReserved__::TfType *Type;
  uint64_t *v93;
  unsigned int *v94;
  unsigned int v95;
  BOOL v96;
  int v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v108;
  uint64_t *v109;
  unsigned int *v110;
  unsigned int v111;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v112;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v113;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v114;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v115;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v116;
  uint64_t *v117;
  double *v118;
  double *v119;
  uint64_t **v120;
  double *v121;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v123;
  unint64_t v124;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v125;
  unint64_t v126;
  unint64_t v129;
  void *__p;
  __int128 v131;
  uint64_t v132;
  void *__dst;
  double *v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19), a2, (int *)&v132);
  v11 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v132, &__dst);
  v14 = (_QWORD *)v11[20];
  v12 = v11 + 20;
  v13 = v14;
  if (!v14)
    goto LABEL_8;
  v15 = v12;
  do
  {
    v16 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
    v17 = v13 + 1;
    if (!v16)
    {
      v17 = v13;
      v15 = v13;
    }
    v13 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v15 == v12
    || sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 + 4)))
  {
LABEL_8:
    v15 = v12;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst + 1);
  sub_20BFD265C(&__dst);
  if (v15 == v12
    || (NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v132),
        v15 + 25 == sub_20C0D8030((uint64_t)(v15 + 24), NameToken)))
  {
    v19 = sub_20C7395F0((uint64_t **)*a1 + 19, v10);
    v20 = v19;
    v21 = (_QWORD *)v19[5];
    if ((unint64_t)v21 >= v19[6])
    {
      v25 = sub_20BFCA068((char **)v19 + 4, (uint64_t *)a2);
    }
    else
    {
      v22 = *(_QWORD *)a2;
      *v21 = *(_QWORD *)a2;
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 2, v23));
        if ((v24 & 1) == 0)
          *v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      v25 = (char *)(v21 + 1);
    }
    v20[5] = (uint64_t)v25;
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v25);
    sub_20BE74FC0(a1 + 26, (const void **)EmptyString, (uint64_t)EmptyString);
  }
  v27 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v132, &__p);
  v28 = sub_20C7395F0((uint64_t **)v27 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  v29 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v132);
  v30 = (uint64_t *)v28[20];
  v31 = (uint64_t **)(v28 + 20);
  v32 = (uint64_t **)(v28 + 20);
  if (!v30)
    goto LABEL_32;
  v31 = (uint64_t **)(v28 + 20);
  while (1)
  {
    while (1)
    {
      v32 = (uint64_t **)v30;
      v33 = v30 + 4;
      if (!sub_20BF1E6D8((uint64_t)(v28 + 21), v29, v30 + 4))
        break;
      v30 = *v32;
      v31 = v32;
      if (!*v32)
        goto LABEL_32;
    }
    if (!sub_20BF1E6D8((uint64_t)(v28 + 21), v33, v29))
      break;
    v31 = v32 + 1;
    v30 = v32[1];
    if (!v30)
      goto LABEL_32;
  }
  v34 = (char *)*v31;
  if (!*v31)
  {
LABEL_32:
    v35 = (char *)operator new(0x88uLL);
    v36 = v35;
    __dst = v35;
    v134 = (double *)(v28 + 20);
    LOBYTE(v135) = 0;
    v37 = *v29;
    *((_QWORD *)v35 + 4) = *v29;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *((_QWORD *)v35 + 4) &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v35 + 40));
    *((_QWORD *)v36 + 7) = 0;
    v40 = v36 + 56;
    *(v40 - 1) = v40;
    v40[3] = 0;
    v40[4] = 0;
    v40[1] = 0;
    v40[2] = 0;
    v40[9] = 0;
    LOBYTE(v135) = 1;
    v41 = (uint64_t *)__dst;
    *(_QWORD *)__dst = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v32;
    *v31 = v41;
    v42 = *(_QWORD *)v28[19];
    if (v42)
    {
      v28[19] = v42;
      v41 = *v31;
    }
    sub_20BDDE208((uint64_t *)v28[20], v41);
    ++v28[21];
    v34 = (char *)__dst;
    __dst = 0;
    sub_20C73AF68((uint64_t)&__dst);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v132 + 1);
  sub_20BFD265C(&v132);
  *((_QWORD *)v34 + 5) = *a3;
  v43 = (uint64_t *)(v34 + 40);
  v44 = *a1;
  __dst = 0;
  v134 = 0;
  v135 = 0;
  sub_20BDDEC88((uint64_t)&__dst, (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  if (*((double *)v44 + 1) == 1.0 && *((double *)v44 + 2) == 0.0)
  {
    v45 = *(_QWORD *)(a5 + 8);
    v46 = (double *)__dst;
    if (v45 != *(_QWORD *)a5)
    {
      memmove(__dst, *(const void **)a5, v45 - *(_QWORD *)a5);
      v46 = (double *)__dst;
    }
  }
  else
  {
    v46 = (double *)__dst;
    if (v134 == __dst)
    {
      v46 = v134;
    }
    else
    {
      v47 = 0;
      v48 = ((char *)v134 - (_BYTE *)__dst) >> 3;
      v49 = *(double **)a5;
      do
      {
        v46[v47] = rint((v49[v47] * *((double *)v44 + 1) + *((double *)v44 + 2)) * 1.0e10) / 1.0e10;
        ++v47;
      }
      while (v48 != v47);
    }
  }
  __p = 0;
  v131 = 0uLL;
  sub_20BDDF5DC(&__p, v46, (uint64_t)v134, v134 - v46);
  if (__dst)
  {
    v134 = (double *)__dst;
    operator delete(__dst);
  }
  v50 = (void *)*((_QWORD *)v34 + 9);
  if (v50)
  {
    *((_QWORD *)v34 + 10) = v50;
    operator delete(v50);
    *((_QWORD *)v34 + 9) = 0;
    *((_QWORD *)v34 + 10) = 0;
    *((_QWORD *)v34 + 11) = 0;
  }
  v51 = __p;
  *((_QWORD *)v34 + 9) = __p;
  v52 = (void *)v131;
  *((_OWORD *)v34 + 5) = v131;
  v34[96] = v52 != v51;
  v134 = (double *)&unk_24C51FCF3;
  LOBYTE(__dst) = a6;
  v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v53)
    v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = (char *)v53 + 64;
  v54 = sub_20C73B2A8((uint64_t **)v34 + 6, (uint64_t *)v53 + 8, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p);
  sub_20BF4B5D8(v54 + 5, &__dst);
  sub_20BF4C2D8((uint64_t)&__dst);
  v55 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v55)
    v55 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C73AFB0(a4, (uint64_t **)v34 + 6, (uint64_t *)v55 + 8);
  v56 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v56)
    v56 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v56 + 58) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v56);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a4, (const void **)&__p, &__dst);
  if (SHIBYTE(v135) < 0)
  {
    v58 = v134 == (double *)7 && *(_DWORD *)__dst == 1718185589 && *(_DWORD *)((char *)__dst + 3) == 1836216166;
    operator delete(__dst);
  }
  else
  {
    v58 = SHIBYTE(v135) == 7 && (_DWORD)__dst == 1718185589 && *(_DWORD *)((char *)&__dst + 3) == 1836216166;
  }
  if (SHIBYTE(v131) < 0)
    operator delete(__p);
  v60 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (v58)
  {
    if (!v60)
      v60 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    __dst = (char *)v60 + 464;
    v61 = sub_20C73B2A8((uint64_t **)v34 + 6, (uint64_t *)v60 + 58, (uint64_t)&unk_20CAC184C, (uint64_t **)&__dst);
    v62 = v61;
    v63 = v61[6];
    if (v63 && (v61[6] & 3) != 3)
      (*(void (**)(uint64_t *))((v63 & 0xFFFFFFFFFFFFFFF8) + 32))(v61 + 5);
    v62[6] = (uint64_t)&off_24C5269E8 + 3;
    *((_DWORD *)v62 + 10) = 1;
  }
  else
  {
    if (!v60)
      v60 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    __dst = (char *)v60 + 464;
    v64 = sub_20C73B2A8((uint64_t **)v34 + 6, (uint64_t *)v60 + 58, (uint64_t)&unk_20CAC184C, (uint64_t **)&__dst);
    v65 = v64;
    v66 = v64[6];
    if (v66 && (v64[6] & 3) != 3)
      (*(void (**)(uint64_t *))((v66 & 0xFFFFFFFFFFFFFFF8) + 32))(v64 + 5);
    v65[6] = (uint64_t)&off_24C5269E8 + 3;
    *((_DWORD *)v65 + 10) = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v34 + 40)))
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    v68 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v68)
      v68 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*((_QWORD *)v68 + 56) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
    std::operator+<char>();
    sub_20BE01E1C((uint64_t)a4, (const void **)&__p, &__dst);
    *v43 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance);
    if (SHIBYTE(v135) < 0)
      operator delete(__dst);
    if (SHIBYTE(v131) < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)v34 + 10) - *((_QWORD *)v34 + 9) != 8)
    goto LABEL_121;
  v69 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v69)
    v69 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if ((*((_QWORD *)v69 + 3) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v69);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a4, (const void **)&__p, &__dst);
  if (SHIBYTE(v135) < 0)
  {
    v70 = v134 == (double *)4 && *(_DWORD *)__dst == 1702195828;
    operator delete(__dst);
  }
  else
  {
    v70 = SHIBYTE(v135) == 4 && (_DWORD)__dst == 1702195828;
  }
  if ((SHIBYTE(v131) & 0x80000000) == 0)
  {
    if (!v70)
      goto LABEL_121;
    goto LABEL_120;
  }
  operator delete(__p);
  if (v70)
LABEL_120:
    v34[96] = 0;
LABEL_121:
  sub_20BDDC0E4(&__p, "interpretation");
  sub_20BE01E1C((uint64_t)a4, (const void **)&__p, &__dst);
  if ((SHIBYTE(v135) & 0x80000000) == 0)
  {
    switch(HIBYTE(v135))
    {
      case 3:
        if ((unsigned __int16)__dst != 26482 || BYTE2(__dst) != 98)
          goto LABEL_182;
        goto LABEL_135;
      case 4:
        if ((_DWORD)__dst == 1633838962)
          goto LABEL_182;
        p_dst = &__dst;
        goto LABEL_161;
      case 5:
        if ((_DWORD)__dst != 1852403568 || BYTE4(__dst) != 116)
          goto LABEL_182;
        goto LABEL_168;
      case 6:
        if ((_DWORD)__dst == 1836216174 && WORD2(__dst) == 27745)
          goto LABEL_273;
        if ((_DWORD)__dst != 1952671094 || WORD2(__dst) != 29295)
          goto LABEL_182;
        goto LABEL_279;
      default:
        goto LABEL_182;
    }
  }
  switch((unint64_t)v134)
  {
    case 3uLL:
      if (*(_WORD *)__dst != 26482 || *((_BYTE *)__dst + 2) != 98)
        goto LABEL_182;
LABEL_135:
      v73 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      if (!v73)
        v73 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      v74 = *((_QWORD *)v73 + 3);
      v129 = v74;
      if ((v74 & 7) != 0)
      {
        v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 2, v75));
        goto LABEL_284;
      }
      goto LABEL_183;
    case 4uLL:
      p_dst = __dst;
      if (*(_DWORD *)__dst == 1633838962)
        goto LABEL_182;
LABEL_161:
      if (*p_dst != 1952544113)
        goto LABEL_182;
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v129, "quat");
      goto LABEL_183;
    case 5uLL:
      if (*(_DWORD *)__dst != 1852403568 || *((_BYTE *)__dst + 4) != 116)
        goto LABEL_182;
LABEL_168:
      v82 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      if (!v82)
        v82 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      v83 = *(_QWORD *)v82;
      v129 = v83;
      if ((v83 & 7) != 0)
      {
        v75 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 2, v75));
        goto LABEL_284;
      }
      goto LABEL_183;
    case 6uLL:
      if (*(_DWORD *)__dst == 1836216174 && *((_WORD *)__dst + 2) == 27745)
      {
LABEL_273:
        v123 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        if (!v123)
          v123 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        v124 = *((_QWORD *)v123 + 1);
        v129 = v124;
        if ((v124 & 7) != 0)
        {
          v75 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 2, v75));
LABEL_284:
          if ((v76 & 1) == 0)
            v129 = (unint64_t)v75;
        }
      }
      else
      {
        if (*(_DWORD *)__dst != 1952671094 || *((_WORD *)__dst + 2) != 29295)
          goto LABEL_182;
LABEL_279:
        v125 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        if (!v125)
          v125 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        v126 = *((_QWORD *)v125 + 2);
        v129 = v126;
        if ((v126 & 7) != 0)
        {
          v75 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 2, v75));
          goto LABEL_284;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)&v129, "quat"))goto LABEL_196;
LABEL_183:
      v86 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v86)
        v86 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v87 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v34 + 5, (_QWORD **)v86 + 21);
      v88 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (v87)
      {
        if (!v88)
          v88 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v89 = *((_QWORD *)v88 + 41);
        goto LABEL_202;
      }
      if (!v88)
        v88 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v34 + 5, (_QWORD **)v88 + 24))
      {
        v90 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v90)
          v90 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v89 = *((_QWORD *)v90 + 42);
      }
      else
      {
LABEL_196:
        v91 = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        if (!v91)
          v91 = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        Type = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v34 + 40));
        v132 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v91, Type, (unsigned int **)&v129);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v132))
          v93 = (uint64_t *)(v34 + 40);
        else
          v93 = &v132;
        v89 = *v93;
      }
LABEL_202:
      *v43 = v89;
      if ((v129 & 7) != 0)
      {
        v94 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if (SHIBYTE(v135) < 0)
        operator delete(__dst);
      if (SHIBYTE(v131) < 0)
        operator delete(__p);
      sub_20BDDC0E4(&__p, "geoScope");
      sub_20BE01E1C((uint64_t)a4, (const void **)&__p, &__dst);
      if (SHIBYTE(v135) < 0)
      {
        v96 = v134 == 0;
        operator delete(__dst);
      }
      else
      {
        v96 = SHIBYTE(v135) == 0;
      }
      if (SHIBYTE(v131) < 0)
      {
        operator delete(__p);
        if (v96)
          goto LABEL_256;
      }
      else if (v96)
      {
        goto LABEL_256;
      }
      v97 = sub_20BE14C08((uint64_t)a4);
      v98 = atomic_load((unsigned __int8 *)&qword_25498CAA8);
      if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_25498CAA8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CAA0, "constant");
        __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CAA0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CAA8);
      }
      v99 = atomic_load((unsigned __int8 *)&qword_25498CAB8);
      if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_25498CAB8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CAB0, "uniform");
        __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CAB0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CAB8);
      }
      v100 = atomic_load((unsigned __int8 *)&qword_25498CAC8);
      if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_25498CAC8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CAC0, "varying");
        __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CAC0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CAC8);
      }
      v101 = atomic_load((unsigned __int8 *)&qword_25498CAD8);
      if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_25498CAD8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CAD0, "vertex");
        __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CAD0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CAD8);
      }
      v102 = atomic_load((unsigned __int8 *)&qword_25498CAE8);
      if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_25498CAE8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CAE0, "faceVarying");
        __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CAE0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CAE8);
      }
      switch(v97)
      {
        case 0:
          v103 = qword_25498CAA0;
          if ((qword_25498CAA0 & 7) == 0)
            goto LABEL_242;
          v104 = (unsigned int *)(qword_25498CAA0 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 2, v104));
          break;
        case 1:
          v103 = qword_25498CAB0;
          if ((qword_25498CAB0 & 7) == 0)
            goto LABEL_242;
          v104 = (unsigned int *)(qword_25498CAB0 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 2, v104));
          break;
        case 2:
          v103 = qword_25498CAC0;
          if ((qword_25498CAC0 & 7) == 0)
            goto LABEL_242;
          v104 = (unsigned int *)(qword_25498CAC0 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 2, v104));
          break;
        case 3:
          v103 = qword_25498CAD0;
          if ((qword_25498CAD0 & 7) == 0)
            goto LABEL_242;
          v104 = (unsigned int *)(qword_25498CAD0 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 2, v104));
          break;
        case 4:
          v103 = qword_25498CAE0;
          if ((qword_25498CAE0 & 7) == 0)
            goto LABEL_242;
          v104 = (unsigned int *)(qword_25498CAE0 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 2, v104));
          break;
        default:
          v104 = 0;
          goto LABEL_245;
      }
      if ((v105 & 1) != 0)
      {
LABEL_242:
        if (!v103)
          goto LABEL_256;
      }
      else
      {
LABEL_245:
        v103 = (uint64_t)v104;
        if (!v104)
          goto LABEL_256;
      }
      __dst = (void *)v103;
      v134 = (double *)((char *)&off_24C5207B8 + 1);
      if ((v103 & 7) != 0)
      {
        v106 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 2, v106));
        if ((v107 & 1) == 0)
          __dst = (void *)(v103 & 0xFFFFFFFFFFFFFFF8);
      }
      v108 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v108)
        v108 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      __p = (char *)v108 + 488;
      v109 = sub_20C73B2A8((uint64_t **)v34 + 6, (uint64_t *)v108 + 61, (uint64_t)&unk_20CAC184C, (uint64_t **)&__p);
      sub_20BF4B5D8(v109 + 5, &__dst);
      sub_20BF4C2D8((uint64_t)&__dst);
      if ((v103 & 7) != 0)
      {
        v110 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
LABEL_256:
      v112 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v112)
        v112 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C73B140(a4, (uint64_t **)v34 + 6, (uint64_t *)v112 + 13);
      v113 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v113)
        v113 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C73B140(a4, (uint64_t **)v34 + 6, (uint64_t *)v113 + 17);
      v114 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v114)
        v114 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C73AFB0(a4, (uint64_t **)v34 + 6, (uint64_t *)v114 + 22);
      v115 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      if (!v115)
        v115 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      sub_20C73B140(a4, (uint64_t **)v34 + 6, (uint64_t *)v115 + 1);
      v116 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      if (!v116)
        v116 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      sub_20C73B140(a4, (uint64_t **)v34 + 6, (uint64_t *)v116 + 2);
      v117 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      if (!v117)
        v117 = (uint64_t *)sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      sub_20C73AFB0(a4, (uint64_t **)v34 + 6, v117);
      if (v34[96])
      {
        v118 = (double *)*((_QWORD *)v34 + 9);
        v119 = (double *)*((_QWORD *)v34 + 10);
        if (v118 != v119)
        {
          v120 = (uint64_t **)(*a1 + 23);
          v121 = (double *)(*a1 + 24);
          do
          {
            sub_20C0E7A88(v120, v121, v118, (uint64_t *)v118);
            ++v118;
          }
          while (v118 != v119);
        }
      }
      return v34 + 40;
    default:
LABEL_182:
      v129 = 0;
      goto LABEL_183;
  }
}

void sub_20C73AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_guard_abort(&qword_25498CAE8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73AF68(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C73979C((uint64_t)v2 + 32);
    operator delete(v2);
  }
  return a1;
}

void sub_20C73AFB0(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  _DWORD *v6;
  BOOL v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  void *__p[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a1, (const void **)__p, &v9);
  if (v14 < 0)
    operator delete(__p[0]);
  if ((v11 & 0x80) == 0)
  {
    if (!v11)
      return;
    if (v11 == 4)
    {
      v6 = &v9;
LABEL_12:
      v7 = *v6 == 1702195828;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v10)
  {
    if (v10 == 4)
    {
      v6 = v9;
      goto LABEL_12;
    }
LABEL_13:
    v7 = 0;
LABEL_14:
    __p[1] = &unk_24C51FCF3;
    LOBYTE(__p[0]) = v7;
    v12 = a3;
    v8 = sub_20C73B2A8(a2, a3, (uint64_t)&unk_20CAC184C, &v12);
    sub_20BF4B5D8(v8 + 5, __p);
    sub_20BF4C2D8((uint64_t)__p);
    if ((v11 & 0x80000000) == 0)
      return;
  }
  operator delete(v9);
}

void sub_20C73B100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BF4C2D8((uint64_t)&a18);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C73B140(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  void *v9[2];
  unsigned __int8 v10;
  uint64_t *v11;
  void *__p[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a1, (const void **)__p, v9);
  if (v13 < 0)
    operator delete(__p[0]);
  v6 = v10;
  v7 = v10;
  if ((v10 & 0x80u) != 0)
    v6 = (unint64_t)v9[1];
  if (v6)
  {
    __p[1] = &off_24C520700;
    sub_20BF77444((unsigned int **)__p, (uint64_t)v9);
    v11 = a3;
    v8 = sub_20C73B2A8(a2, a3, (uint64_t)&unk_20CAC184C, &v11);
    sub_20BF4B5D8(v8 + 5, __p);
    sub_20BF4C2D8((uint64_t)__p);
    v7 = v10;
  }
  if ((v7 & 0x80) != 0)
    operator delete(v9[0]);
}

void sub_20C73B260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BF4C2D8((uint64_t)&a18);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C73B2A8(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C463DA4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void sub_20C73B33C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BF4C2D8((uint64_t)(a2 + 5));
    v3 = a2[4];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *sub_20C73B3A0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *result;
  void *v4;

  result = sub_20C73B3E8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::~UsdAbcCustomMetadata_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *sub_20C73B3E8()
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::UsdAbcCustomMetadata_StaticTokenType(v0);
  return v0;
}

void sub_20C73B414(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73B428(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C542D80;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73B458(void **a1)
{
  *a1 = off_24C542D80;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73B488(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C542D80;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73B4C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73B4DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C542D80;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73B4F8(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73B500(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C73B528(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C73B544(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542E00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73B580()
{
  return &unk_24C542E00;
}

uint64_t sub_20C73B58C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C542E28;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73B5BC(void **a1)
{
  *a1 = off_24C542E28;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73B5EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C542E28;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73B62C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73B640(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C542E28;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73B65C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73B664(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C73B68C(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IScalarProperty *v3;
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 8);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), &v23);
    NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(v3))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C73B83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73B898(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542E00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73B8D4()
{
  return &unk_24C542E00;
}

uint64_t sub_20C73B8E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C542EA8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73B910(void **a1)
{
  *a1 = off_24C542EA8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73B940(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C542EA8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73B980(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73B994(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C542EA8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73B9B0(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73B9B8(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C73B9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD v16[2];
  _QWORD *v17;
  uint64_t v18;
  int v19;

  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)&v18, a3, 16);
  sub_20BF5AB98((uint64_t)v16, 1uLL);
  v4 = v18;
  v5 = v19;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  v8 = v17;
  *v17 = v4;
  *((_DWORD *)v8 + 2) = v5;
  v13 = v16[0];
  v14 = v16[1];
  v15 = v17;
  if (v17)
  {
    v9 = v17 - 2;
    if (*((_QWORD *)&v14 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v14 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_20C73BB1C(a2, (uint64_t)&v13);
  sub_20BF5618C((uint64_t)&v13);
  sub_20BF5618C((uint64_t)v16);
  return v11;
}

void sub_20C73BAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73BAD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542E00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73BB10()
{
  return &unk_24C542E00;
}

uint64_t sub_20C73BB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C542F18[v2])(&v5, a1);
}

uint64_t sub_20C73BB6C()
{
  return 1;
}

uint64_t sub_20C73BB74(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5B150(*a2, **a1);
  return 1;
}

BOOL sub_20C73BB98(__int128 ***a1, uint64_t *a2)
{
  return sub_20C73BBA8(*a2, **a1);
}

BOOL sub_20C73BBA8(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EAD0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C284DC8(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C73BC1C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C73BD84(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t sub_20C73BD90(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  _DWORD *v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;

  v8 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v8 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a4;
  v9 = (_BYTE *)(a1 + 16);
  if (*(char *)(a4 + 31) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 24);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (_BYTE *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v15 = *a3;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v15;
  }
  return a1;
}

void sub_20C73BE60(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  Alembic::Abc::v12::ICompoundProperty *v3;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73BE90(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  _DWORD *v6;
  _BYTE *v7;
  __int128 v8;

  v6 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

void sub_20C73BF1C(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  Alembic::Abc::v12::ICompoundProperty *v3;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73BF4C(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (a2)
    return 1;
  sub_20BDDC0E4(__p, "interpretation");
  sub_20BE01E1C(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    v2 = v7[1] == (void *)4 && *(_DWORD *)v7[0] == 1633838962;
    operator delete(v7[0]);
  }
  else
  {
    v2 = v8 == 4 && LODWORD(v7[0]) == 1633838962;
  }
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20C73C00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73C028(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  unsigned __int8 v53;
  __int128 v54;
  _QWORD v55[34];
  std::__shared_weak_count *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[4];
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a2;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v54 = (char *)&v54 + 8;
  v59 = 0;
  v60 = 0;
  v61 = v10;
  sub_20BDEBF8C(v62, (const void ***)&v54);
  v62[3] = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  sub_20BDE9D48((uint64_t)&v54, *((_QWORD **)&v54 + 1));
  sub_20BE02E30(a4, (uint64_t)&v61);
  sub_20BE02E30(a5, (uint64_t)&v61);
  *(_DWORD *)a1 = v61;
  v57 = a1;
  v58 = "ITypedScalarProperty::ITypedScalarProperty()";
  v12 = *((_QWORD *)a2 + 4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  v55[33] = v12;
  v56 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v40 = sub_20BDDC1C8(v55, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v40, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v42 = sub_20BDDC09C(exception, (uint64_t)__p);
    __cxa_throw(v42, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  v16 = v15;
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v43 = sub_20BDDC1C8(v55, (uint64_t)"Nonexistent scalar property: ", 29);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = a3;
    else
      v45 = *(_QWORD *)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v43, v45, v46);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v47 = __cxa_allocate_exception(0x20uLL);
    v48 = sub_20BDDC09C(v47, (uint64_t)__p);
    __cxa_throw(v48, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v18 = *(_DWORD *)(v15 + 56) == 10 && *(_BYTE *)(v15 + 60) == 4 && *(_DWORD *)(v15 + 24) == 1;
  if (!v18 || (sub_20C73BF4C(v15 + 32, v65) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v54);
    v29 = sub_20BDDC1C8(v55, (uint64_t)"Incorrect match of header datatype: ", 36);
    v30 = sub_20BDE00F4(v29, (int *)(v16 + 56));
    v31 = sub_20BDDC1C8(v30, (uint64_t)" to expected: ", 14);
    v49 = 0x40000000ALL;
    v32 = sub_20BDE00F4(v31, (int *)&v49);
    v33 = sub_20BDDC1C8(v32, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_20BDDC0E4(v50, "interpretation");
    sub_20BE01E1C(v16 + 32, (const void **)v50, __p);
    if ((v53 & 0x80u) == 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    if ((v53 & 0x80u) == 0)
      v35 = v53;
    else
      v35 = (uint64_t)__p[1];
    v36 = sub_20BDDC1C8(v33, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v37, (uint64_t)"rgba", 4);
    if ((char)v53 < 0)
      operator delete(__p[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::stringbuf::str();
    sub_20BDDBF20(__p, (__int128 *)v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v38 = __cxa_allocate_exception(0x20uLL);
    v39 = sub_20BDDC09C(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(&v54, v12, a3);
  sub_20BDE82DC(a1 + 32, &v54);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20BDE9D48((uint64_t)v62, (_QWORD *)v62[1]);
  return a1;
}

void sub_20C73C4B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 192));
  v30 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v26);
  MEMORY[0x212B929D0](v25, "");
  if (a2 == 2)
    sub_20BE02570(v27 - 176, (uint64_t)v30);
  else
    sub_20BE02504(v27 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C73C200);
}

void sub_20C73C5D8()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 144);
  JUMPOUT(0x20C73C608);
}

void sub_20C73C618(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v12[96];

  v6 = sub_20C020210(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), (unsigned __int8 **)a2);
  v7 = *(__int128 **)(a1 + 168);
  if ((__int128 *)v6 == v7)
  {
    sub_20C73BE90(a3, (_DWORD *)(a1 + 152), (__int128 *)a2);
  }
  else
  {
    sub_20C07F91C((uint64_t)v12, (__int128 *)(v6 + 24), v7, v6);
    v9 = v8;
    v10 = *(_QWORD *)(a1 + 168);
    if (v10 != v8)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
    }
    *(_QWORD *)(a1 + 168) = v9;
    sub_20BE04EB0((uint64_t)v12, a1 + 8);
    sub_20BFD6E54((_DWORD *)a3, (_DWORD *)(a1 + 152));
    sub_20BFD6EA4((_DWORD *)(a3 + 4), (_DWORD *)(a1 + 156));
    Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)v12, a3 + 8);
    v11 = (_BYTE *)(a3 + 56);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(v11, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(a2 + 16);
    }
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v12);
  }
}

void sub_20C73C734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;
  Alembic::Abc::v12::ICompoundProperty *v10;
  _DWORD *v11;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11);
  sub_20BFD265C(v9);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73C76C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C542F40;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73C79C(void **a1)
{
  *a1 = off_24C542F40;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73C7CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C542F40;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73C80C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73C820(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C542F40;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73C83C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73C844(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C73C86C(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C73C888(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542FB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73C8C4()
{
  return &unk_24C542FB0;
}

uint64_t sub_20C73C8D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C542FD8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73C900(void **a1)
{
  *a1 = off_24C542FD8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73C930(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C542FD8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73C970(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73C984(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C542FD8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73C9A0(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73C9A8(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C73C9D0(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IScalarProperty *v3;
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 8);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), &v23);
    NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(v3))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C73CB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73CBDC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542FB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73CC18()
{
  return &unk_24C542FB0;
}

uint64_t sub_20C73CC24(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543048;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73CC54(void **a1)
{
  *a1 = off_24C543048;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73CC84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543048;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73CCC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73CCD8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543048;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73CCF4(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73CCFC(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C73CD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  uint64_t v5;
  char *v6;
  float v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  float v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  float64x2_t v18;
  float64x2_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  int64x2_t v25;
  _BYTE v26[32];

  v25 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)v26 = xmmword_20CA521E0;
  *(int64x2_t *)&v26[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)&v25, a3, 48);
  sub_20BF5AB98((uint64_t)v23, 2uLL);
  v18 = (float64x2_t)v25;
  v4 = *(double *)v26;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v5, v6);
  v7 = v4;
  v8 = v24;
  *(float32x2_t *)v24 = vcvt_f32_f64(v18);
  *(float *)(v8 + 8) = v7;
  v19 = *(float64x2_t *)&v26[8];
  v9 = *(double *)&v26[24];
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v10, v11);
  v12 = v9;
  v13 = v24;
  *(float32x2_t *)(v24 + 12) = vcvt_f32_f64(v19);
  *(float *)(v13 + 20) = v12;
  v20 = v23[0];
  v21 = v23[1];
  v22 = v24;
  if (v24)
  {
    v14 = (unint64_t *)(v24 - 16);
    if (*((_QWORD *)&v21 + 1))
      v14 = (unint64_t *)*((_QWORD *)&v21 + 1);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = sub_20C73BB1C(a2, (uint64_t)&v20);
  sub_20BF5618C((uint64_t)&v20);
  sub_20BF5618C((uint64_t)v23);
  return v16;
}

void sub_20C73CE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73CE78(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C542FB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73CEB4()
{
  return &unk_24C542FB0;
}

uint64_t sub_20C73CEC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5430B8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73CEF0(void **a1)
{
  *a1 = off_24C5430B8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73CF20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C5430B8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73CF60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73CF74(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5430B8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73CF90(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73CF98(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C73CFC0(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C73CFDC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543128))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73D018()
{
  return &unk_24C543128;
}

uint64_t sub_20C73D024(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543150;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73D054(void **a1)
{
  *a1 = off_24C543150;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73D084(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543150;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73D0C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73D0D8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543150;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73D0F4(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73D0FC(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C73D124(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IScalarProperty *v3;
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 8);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), &v23);
    NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(v3))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C73D2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73D330(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543128))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73D36C()
{
  return &unk_24C543128;
}

uint64_t sub_20C73D378(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5431C0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C73D3A8(void **a1)
{
  *a1 = off_24C5431C0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C73D3D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C5431C0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73D418(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73D42C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5431C0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73D448(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C73D450(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C73D478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  char *v12;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;

  v5 = (int *)(a1 + 8);
  LOBYTE(v23[0]) = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)v23, a3, 1);
  v6 = SLOBYTE(v23[0]);
  if ((_DWORD)v6 != -1)
  {
    if (!LOBYTE(v23[0]))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v7)
        v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v8 = *((_QWORD *)v7 + 62);
      v23[0] = (void *)v8;
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          v23[0] = v9;
      }
      result = sub_20C73D728(a2, (uint64_t)v23);
      goto LABEL_31;
    }
    if ((_DWORD)v6 == 1)
      sub_20BDDC0E4(v23, "kVisibilityVisible");
    else
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C543238, v6, (uint64_t)v23);
    if (v24 >= 0)
      v12 = (char *)v23;
    else
      v12 = (char *)v23[0];
    sub_20BDDC0E4(v21, v12);
    sub_20BDDC0E4(__p, "kVisibilityDeferred");
    sub_20C73D778(v5, a3, 0, (uint64_t *)v21, (uint64_t *)__p);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v13)
    v13 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v14 = *((_QWORD *)v13 + 59);
  v23[0] = (void *)v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v23[0] = v15;
  }
  result = sub_20C73D728(a2, (uint64_t)v23);
LABEL_31:
  if (((uint64_t)v23[0] & 7) != 0)
  {
    v17 = (unsigned int *)((unint64_t)v23[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  return result;
}

void sub_20C73D644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73D6E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543128))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73D71C()
{
  return &unk_24C543128;
}

uint64_t sub_20C73D728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C543220[v2])(&v5, a1);
}

void sub_20C73D778(int *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 *v28;
  uint64_t FullName;
  __int128 v30;
  unsigned __int8 v31;
  std::string *v32;
  std::string *v33;
  std::string::size_type size;
  std::string *p_dst;
  std::string *v36;
  char *v37;
  __int128 v38;
  std::string *v39;
  void **v40;
  uint64_t *v41;
  char v42;
  char *v43;
  void **v44;
  uint64_t *v45;
  std::string __dst;
  _QWORD v47[4];
  char v48;
  void *__p[2];
  const char *v50;
  _BYTE v51[96];
  std::string v52;
  const char *v53;
  uint64_t v54[8];
  std::string v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  unint64_t v59;

  sub_20C73E030(a1, (uint64_t)v51);
  Alembic::Abc::v12::IObject::getArchive((Alembic::Abc::v12::IObject *)v51, (uint64_t)&v52);
  Alembic::Abc::v12::IArchive::getName((Alembic::Abc::v12::IArchive *)&v52, (uint64_t)__p);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v52);
  v10 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES);
  if (!v10)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES);
    v10 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES);
  }
  if (*v10)
  {
    v47[0] = "usdAbc/alembicReader.cpp";
    v47[1] = "_PostUnsupportedValueWarning";
    v47[2] = 210;
    v47[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PostUnsupportedValueWarning(const IScalarPro"
             "perty &, const ISampleSelector &, _WarningType, const std::string &, const std::string &)";
    v48 = 0;
    v11 = off_24C543248[a3];
    if (*((char *)a4 + 23) >= 0)
      v12 = a4;
    else
      v12 = (uint64_t *)*a4;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v13 = sub_20BE18848((uint64_t)a1);
    v14 = v58;
    if ((unint64_t)v58 >= v59)
    {
      v18 = (__int128 *)sub_20BE4EE50(&v57, (__int128 *)v13);
    }
    else
    {
      if (*(char *)(v13 + 23) < 0)
      {
        sub_20BDDBFAC(v58, *(void **)v13, *(_QWORD *)(v13 + 8));
      }
      else
      {
        v15 = *(_OWORD *)v13;
        *((_QWORD *)v58 + 2) = *(_QWORD *)(v13 + 16);
        *v14 = v15;
      }
      v18 = (__int128 *)((char *)v14 + 24);
    }
    v58 = v18;
    Alembic::Abc::v12::IScalarProperty::getParent((Alembic::Abc::v12::IScalarProperty *)a1, (uint64_t)&v52);
    while (1)
    {
      if (SHIBYTE(v53) < 0)
      {
        if (v52.__r_.__value_.__r.__words[2])
          break;
      }
      else if (HIBYTE(v53))
      {
        break;
      }
      if (!v54[0])
        break;
      v25 = sub_20BE75ADC((uint64_t)&v52);
      v26 = v58;
      if ((unint64_t)v58 >= v59)
      {
        v28 = (__int128 *)sub_20BE4EE50(&v57, (__int128 *)v25);
      }
      else
      {
        if (*(char *)(v25 + 23) < 0)
        {
          sub_20BDDBFAC(v58, *(void **)v25, *(_QWORD *)(v25 + 8));
        }
        else
        {
          v27 = *(_OWORD *)v25;
          *((_QWORD *)v58 + 2) = *(_QWORD *)(v25 + 16);
          *v26 = v27;
        }
        v28 = (__int128 *)((char *)v26 + 24);
      }
      v58 = v28;
      Alembic::Abc::v12::ICompoundProperty::getParent((Alembic::Abc::v12::ICompoundProperty *)&v52, (uint64_t)&v55);
      LODWORD(v52.__r_.__value_.__l.__data_) = v55.__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)&v52.__r_.__value_.__r.__words[1], (const std::string *)&v55.__r_.__value_.__r.__words[1]);
      sub_20BDE881C(v54, &v56);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v55);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v52);
    sub_20C73E1AC(".", (uint64_t)v58, v57, &v55);
    sub_20C73E030(a1, (uint64_t)&v52);
    FullName = Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v52);
    if (*(char *)(FullName + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, *(void **)FullName, *(_QWORD *)(FullName + 8));
    }
    else
    {
      v30 = *(_OWORD *)FullName;
      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(FullName + 16);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v30;
    }
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v52);
    v31 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v55.__r_.__value_.__l.__size_)
      {
        v32 = (std::string *)v55.__r_.__value_.__r.__words[0];
LABEL_49:
        if (v32->__r_.__value_.__s.__data_[0] != 46)
        {
          std::string::push_back(&__dst, 46);
          v31 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
      }
    }
    else if (*((_BYTE *)&v55.__r_.__value_.__s + 23))
    {
      v32 = &v55;
      goto LABEL_49;
    }
    if ((v31 & 0x80u) == 0)
      v33 = &v55;
    else
      v33 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v31 & 0x80u) == 0)
      size = v31;
    else
      size = v55.__r_.__value_.__l.__size_;
    std::string::append(&__dst, (const std::string::value_type *)v33, size);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    sub_20BDE5038((void ***)&v52);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (*(_QWORD *)a2 == -1)
    {
      pxrInternal__aapl__pxrReserved__::TfStringify(*(double *)(a2 + 8), &v52);
      v36 = std::string::insert(&v52, 0, "sample time ");
    }
    else
    {
      v57 = *(_QWORD *)a2;
      sub_20BFEEA50();
      v36 = std::string::insert(&v52, 0, "sample index ");
    }
    v38 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v38;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    v39 = &v55;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
    v40 = __p;
    if (SHIBYTE(v50) < 0)
      v40 = (void **)__p[0];
    if (*((char *)a5 + 23) >= 0)
      v41 = a5;
    else
      v41 = (uint64_t *)*a5;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v47, (pxrInternal__aapl__pxrReserved__ *)"Unsupported %s '%s' for <%s> at %s in archive '%s'. Using '%s' instead.", v37, v11, v12, p_dst, v39, v40, v41);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_25498CB08);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25498CB08))
  {
    qword_25498CB00 = 0;
    qword_25498CAF8 = 0;
    qword_25498CAF0 = (uint64_t)&qword_25498CAF8;
    __cxa_atexit((void (*)(void *))sub_20C73E184, &qword_25498CAF0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CB08);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_25498CB10);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25498CB10))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25473D9E8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CB10);
  }
  std::mutex::lock(&stru_25473D9E8);
  LODWORD(v52.__r_.__value_.__l.__data_) = a3;
  if (SHIBYTE(v50) < 0)
  {
    sub_20BDDBFAC(&v52.__r_.__value_.__s.__data_[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v52.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
    v53 = v50;
  }
  v19 = qword_25498CAF8;
  if (qword_25498CAF8)
  {
    while (1)
    {
      while (1)
      {
        v20 = (uint64_t *)v19;
        v21 = v19 + 32;
        if (!sub_20C73E3B4((uint64_t)&v52, v19 + 32))
          break;
        v19 = *v20;
        v22 = v20;
        if (!*v20)
          goto LABEL_24;
      }
      if (!sub_20C73E3B4(v21, (uint64_t)&v52))
        break;
      v19 = v20[1];
      if (!v19)
      {
        v22 = v20 + 1;
        goto LABEL_24;
      }
    }
    v42 = 1;
  }
  else
  {
    v22 = &qword_25498CAF8;
    v20 = &qword_25498CAF8;
LABEL_24:
    v23 = (char *)operator new(0x40uLL);
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v55.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_25498CAF8;
    v55.__r_.__value_.__s.__data_[16] = 0;
    *((_DWORD *)v23 + 8) = v52.__r_.__value_.__l.__data_;
    v24 = v23 + 40;
    if (SHIBYTE(v53) < 0)
    {
      sub_20BDDBFAC(v24, (void *)v52.__r_.__value_.__l.__size_, v52.__r_.__value_.__r.__words[2]);
      v23 = (char *)v55.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(_OWORD *)v24 = *(_OWORD *)&v52.__r_.__value_.__r.__words[1];
      *((_QWORD *)v23 + 7) = v53;
    }
    v55.__r_.__value_.__s.__data_[16] = 1;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v20;
    *v22 = (uint64_t)v23;
    if (*(_QWORD *)qword_25498CAF0)
    {
      qword_25498CAF0 = *(_QWORD *)qword_25498CAF0;
      v23 = (char *)*v22;
    }
    sub_20BDDE208((uint64_t *)qword_25498CAF8, (uint64_t *)v23);
    ++qword_25498CB00;
    v55.__r_.__value_.__r.__words[0] = 0;
    sub_20C73E368((uint64_t *)&v55);
    v42 = 0;
  }
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52.__r_.__value_.__l.__size_);
  std::mutex::unlock(&stru_25473D9E8);
  if ((v42 & 1) == 0)
  {
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdAbc/alembicReader.cpp";
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)"_PostUnsupportedValueWarning";
    v52.__r_.__value_.__r.__words[2] = 231;
    v53 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PostUnsupportedValueWarning(const IScalarProper"
          "ty &, const ISampleSelector &, _WarningType, const std::string &, const std::string &)";
    LOBYTE(v54[0]) = 0;
    v44 = __p;
    if (SHIBYTE(v50) < 0)
      v44 = (void **)__p[0];
    if (*((char *)a5 + 23) >= 0)
      v45 = a5;
    else
      v45 = (uint64_t *)*a5;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v52, (pxrInternal__aapl__pxrReserved__ *)"Unsupported %s detected in archive '%s'. Using '%s' instead.", v43, off_24C543248[a3], v44, v45);
  }
LABEL_92:
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v51);
}

void sub_20C73DE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,int a47,__int16 a48,char a49,char a50,int a51,__int16 a52,char a53,char a54)
{
  if (a32 < 0)
    operator delete(__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73DF80()
{
  return 1;
}

uint64_t sub_20C73DF88(uint64_t ***a1, uint64_t **a2)
{
  sub_20C1D1768(*a2, **a1);
  return 1;
}

BOOL sub_20C73DFAC(_QWORD ***a1, uint64_t *a2)
{
  return sub_20C73DFBC(*a2, **a1);
}

BOOL sub_20C73DFBC(uint64_t a1, _QWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20BF32220(*(_QWORD **)(a1 + 8), a2);
  return v4 == 0;
}

void sub_20C73E030(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int *v12;
  const char *v13;

  v12 = a1;
  v13 = "IBasePropertyT::getObject()";
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a1 + 4) + 24))(&v10);
  v4 = *a1;
  LODWORD(v8) = 1;
  v9 = v4;
  sub_20BE02B14(a2, &v10, &v8);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20C73E0D8(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)va1, (uint64_t)v7);
  else
    sub_20BE02504((uint64_t)va1, 0);
  __cxa_end_catch();
  *(_DWORD *)(v4 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(v4 + 16), "");
  *(_QWORD *)v4 = off_24C518E68;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  JUMPOUT(0x20C73E0C4);
}

void sub_20C73E164(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C73E184(uint64_t a1)
{
  sub_20C73E320(*(char **)(a1 + 8));
  return a1;
}

void sub_20C73E1AC(char *__s@<X4>, uint64_t a2@<X1>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  uint64_t i;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;

  v5 = a2 - a3;
  if (a2 == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else if (v5 == 24)
  {
    if (*(char *)(a2 - 1) < 0)
    {
      sub_20BDDBFAC(a4, *(void **)(a2 - 24), *(_QWORD *)(a2 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(a2 - 24);
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 - 8);
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    v12 = a2;
    do
    {
      if (*(char *)(v12 - 1) < 0)
        v13 = *(_QWORD *)(v12 - 16);
      else
        v13 = *(unsigned __int8 *)(v12 - 1);
      v12 -= 24;
      v10 += v13;
    }
    while (v12 != a3);
    v14 = strlen(__s);
    std::string::reserve(a4, v10 + v14 * (v11 - 1));
    v15 = *(char *)(a2 - 1);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)(a2 - 24);
    else
      v16 = *(const std::string::value_type **)(a2 - 24);
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a2 - 1);
    else
      v17 = *(_QWORD *)(a2 - 16);
    std::string::append(a4, v16, v17);
    for (i = a2 - 48; i + 24 != a3; i -= 24)
    {
      std::string::append(a4, __s);
      v19 = *(char *)(i + 23);
      if (v19 >= 0)
        v20 = (const std::string::value_type *)i;
      else
        v20 = *(const std::string::value_type **)i;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(i + 23);
      else
        v21 = *(_QWORD *)(i + 8);
      std::string::append(a4, v20, v21);
    }
  }
}

void sub_20C73E300(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C73E320(char *a1)
{
  if (a1)
  {
    sub_20C73E320(*(_QWORD *)a1);
    sub_20C73E320(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t *sub_20C73E368(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 63) < 0)
      operator delete(*(void **)(v2 + 40));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20C73E3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  size_t v12;
  size_t v13;
  int v14;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
    return 0;
  v5 = *(_QWORD *)(a2 + 8);
  v3 = a2 + 8;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  v9 = *(_QWORD *)(a1 + 8);
  v7 = a1 + 8;
  v8 = v9;
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = *(_QWORD *)(v7 + 8);
  if (v10 < 0)
    v7 = v8;
  if (v6 >= 0)
    v12 = *(unsigned __int8 *)(v3 + 23);
  else
    v12 = *(_QWORD *)(v3 + 8);
  if (v6 < 0)
    v3 = v4;
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = memcmp((const void *)v7, (const void *)v3, v13);
  if (v14)
    return v14 < 0;
  else
    return v11 < v12;
}

void sub_20C73E44C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t PropertyHeader;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t NumProperties;
  uint64_t k;
  const void **v12;
  uint64_t v13;
  uint64_t m;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t NumSamples;
  uint64_t v21;
  uint64_t i;
  double SampleTime;
  double v24;
  char *v25;
  void *v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  double *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  double v41;
  double v42;
  char *v43;
  void *v44;
  char *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  double *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  char v58;
  const char *v59;
  char *v60;
  int v61;
  void **v62;
  const char *Text;
  char *v64;
  void **v65;
  void *v66;
  _BYTE *v67;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v68;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v69;
  char *v70;
  unsigned int *v71;
  unsigned int v72;
  _QWORD **v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  char **v77;
  uint64_t v78;
  void *v79;
  int v80;
  int v81;
  void *__p[2];
  char v83;
  void *Converter;
  int v85;
  char v86;
  void *__dst[2];
  uint64_t v88;
  void *v89[2];
  void *v90;
  void *v91[4];
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 39) < 0)
  {
    if (*(_QWORD *)(a3 + 24))
      return;
  }
  else if (*(_BYTE *)(a3 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a3 + 40))
  {
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
    if (PropertyHeader)
    {
      v7 = PropertyHeader;
      v8 = *(_DWORD *)(PropertyHeader + 24);
      if (v8)
      {
        v89[0] = 0;
        v89[1] = 0;
        v90 = 0;
        if (v8 == 1)
        {
          if (*(char *)(a3 + 39) < 0)
          {
            if (*(_QWORD *)(a3 + 24))
              goto LABEL_49;
          }
          else if (*(_BYTE *)(a3 + 39))
          {
            goto LABEL_49;
          }
          if (*(_QWORD *)(a3 + 40))
          {
            v18 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
            if (v18)
            {
              if (*(_DWORD *)(v18 + 24) == 1)
              {
                LODWORD(__dst[0]) = 0;
                LODWORD(__dst[1]) = 0;
                Alembic::Abc::v12::IScalarProperty::IScalarProperty(&v94, a3 + 8, a3 + 56, __dst);
                goto LABEL_50;
              }
            }
          }
LABEL_49:
          LODWORD(v94) = 2;
          sub_20BDDC0E4(&v95, "");
          v98 = 0;
          v99 = 0;
LABEL_50:
          memset(v91, 0, 24);
          if (SHIBYTE(v97) < 0)
          {
            if (!v96)
              goto LABEL_63;
          }
          else if (!HIBYTE(v97))
          {
LABEL_63:
            if (v98)
            {
              Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)&v94, __dst);
              NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)&v94);
              if (Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::Abc::v12::IScalarProperty *)&v94))
                v21 = NumSamples != 0;
              else
                v21 = NumSamples;
              if (v21)
              {
                for (i = 0; i != v21; ++i)
                {
                  SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)__dst[0], i);
                  v24 = SampleTime;
                  v25 = (char *)v91[1];
                  if (v91[1] >= v91[2])
                  {
                    v27 = (char *)v91[0];
                    v28 = ((char *)v91[1] - (char *)v91[0]) >> 3;
                    v29 = v28 + 1;
                    if ((unint64_t)(v28 + 1) >> 61)
                      sub_20BDDF694();
                    v30 = (char *)v91[2] - (char *)v91[0];
                    if (((char *)v91[2] - (char *)v91[0]) >> 2 > v29)
                      v29 = v30 >> 2;
                    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                      v31 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v31 = v29;
                    if (v31)
                    {
                      v32 = (char *)sub_20BDDF6A8((uint64_t)&v91[2], v31);
                      v27 = (char *)v91[0];
                      v25 = (char *)v91[1];
                    }
                    else
                    {
                      v32 = 0;
                    }
                    v33 = (double *)&v32[8 * v28];
                    *v33 = v24;
                    v26 = v33 + 1;
                    while (v25 != v27)
                    {
                      v34 = *((_QWORD *)v25 - 1);
                      v25 -= 8;
                      *((_QWORD *)v33-- - 1) = v34;
                    }
                    v91[0] = v33;
                    v91[1] = v26;
                    v91[2] = &v32[8 * v31];
                    if (v27)
                      operator delete(v27);
                  }
                  else
                  {
                    *(double *)v91[1] = SampleTime;
                    v26 = v25 + 8;
                  }
                  v91[1] = v26;
                }
              }
              v35 = (std::__shared_weak_count *)__dst[1];
              if (__dst[1])
              {
                v36 = (unint64_t *)((char *)__dst[1] + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              if (v89[0])
              {
                v89[1] = v89[0];
                operator delete(v89[0]);
              }
            }
          }
          v79 = v91[0];
          *(_OWORD *)v89 = *(_OWORD *)v91;
          v90 = v91[2];
          memset(v91, 0, 24);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v94);
          goto LABEL_126;
        }
        if (*(char *)(a3 + 39) < 0)
        {
          if (*(_QWORD *)(a3 + 24))
            goto LABEL_58;
        }
        else if (*(_BYTE *)(a3 + 39))
        {
          goto LABEL_58;
        }
        if (*(_QWORD *)(a3 + 40))
        {
          v19 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
          if (v19)
          {
            if (*(_DWORD *)(v19 + 24) == 2)
            {
              LODWORD(__dst[0]) = 0;
              LODWORD(__dst[1]) = 0;
              LODWORD(Converter) = 0;
              v85 = 0;
              Alembic::Abc::v12::IArrayProperty::IArrayProperty(&v94, a3 + 8, a3 + 56, __dst, &Converter);
              goto LABEL_59;
            }
          }
        }
LABEL_58:
        LODWORD(v94) = 2;
        sub_20BDDC0E4(&v95, "");
        v98 = 0;
        v99 = 0;
LABEL_59:
        memset(v91, 0, 24);
        if (SHIBYTE(v97) < 0)
        {
          if (!v96)
            goto LABEL_95;
        }
        else if (!HIBYTE(v97))
        {
LABEL_95:
          if (v98)
          {
            Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)&v94, __dst);
            v38 = Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)&v94);
            if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::Abc::v12::IArrayProperty *)&v94))
              v39 = v38 != 0;
            else
              v39 = v38;
            if (v39)
            {
              for (j = 0; j != v39; ++j)
              {
                v41 = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)__dst[0], j);
                v42 = v41;
                v43 = (char *)v91[1];
                if (v91[1] >= v91[2])
                {
                  v45 = (char *)v91[0];
                  v46 = ((char *)v91[1] - (char *)v91[0]) >> 3;
                  v47 = v46 + 1;
                  if ((unint64_t)(v46 + 1) >> 61)
                    sub_20BDDF694();
                  v48 = (char *)v91[2] - (char *)v91[0];
                  if (((char *)v91[2] - (char *)v91[0]) >> 2 > v47)
                    v47 = v48 >> 2;
                  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                    v49 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v49 = v47;
                  if (v49)
                  {
                    v50 = (char *)sub_20BDDF6A8((uint64_t)&v91[2], v49);
                    v45 = (char *)v91[0];
                    v43 = (char *)v91[1];
                  }
                  else
                  {
                    v50 = 0;
                  }
                  v51 = (double *)&v50[8 * v46];
                  *v51 = v42;
                  v44 = v51 + 1;
                  while (v43 != v45)
                  {
                    v52 = *((_QWORD *)v43 - 1);
                    v43 -= 8;
                    *((_QWORD *)v51-- - 1) = v52;
                  }
                  v91[0] = v51;
                  v91[1] = v44;
                  v91[2] = &v50[8 * v49];
                  if (v45)
                    operator delete(v45);
                }
                else
                {
                  *(double *)v91[1] = v41;
                  v44 = v43 + 8;
                }
                v91[1] = v44;
              }
            }
            v53 = (std::__shared_weak_count *)__dst[1];
            if (__dst[1])
            {
              v54 = (unint64_t *)((char *)__dst[1] + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            if (v89[0])
            {
              v89[1] = v89[0];
              operator delete(v89[0]);
            }
          }
        }
        v79 = v91[0];
        *(_OWORD *)v89 = *(_OWORD *)v91;
        v90 = v91[2];
        memset(v91, 0, 24);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v94);
LABEL_126:
        v56 = *(_DWORD *)(v7 + 24);
        v57 = *(_DWORD *)(v7 + 56);
        v58 = *(_BYTE *)(v7 + 60);
        if (!v56)
        {
          v57 = 127;
          v58 = 0;
        }
        LODWORD(__dst[0]) = v57;
        BYTE4(__dst[0]) = v58;
        BYTE5(__dst[0]) = v56 == 2;
        Converter = (void *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *)(*a1)[12], (const pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *)__dst);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Converter))
        {
          v94 = (unint64_t)"usdAbc/alembicReader.cpp";
          v95 = "AddOutOfSchemaProperty";
          v96 = 2115;
          v97 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PrimReaderContext::AddOutOfSchemaProperty"
                "(const std::string &, const AlembicProperty &)";
          LOBYTE(v98) = 0;
          if ((a2[23] & 0x80u) != 0)
            a2 = *(unsigned __int8 **)a2;
          pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::Stringify((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *)__dst, v59, v60);
          v61 = SHIBYTE(v91[2]);
          v62 = (void **)v91[0];
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
          v65 = v91;
          if (v61 < 0)
            v65 = v62;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v94, (pxrInternal__aapl__pxrReserved__ *)"No conversion for \"%s\" of type \"%s\" at <%s>", v64, a2, v65, Text);
          if (SHIBYTE(v91[2]) < 0)
            operator delete(v91[0]);
          v66 = v79;
          goto LABEL_162;
        }
        v67 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
        if (!v67)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
          v67 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
        }
        if (!*v67)
          goto LABEL_145;
        v68 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
        if (!v68)
          v68 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
        if (pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v68 + 40), a2))
        {
          v69 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
          if (!v69)
            v69 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
          v70 = sub_20C739B5C(a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v69 + 56), &Converter, (pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 32), (uint64_t)v89, 1);
        }
        else
        {
LABEL_145:
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v94);
          v70 = sub_20C739B5C(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v94, &Converter, (pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 32), (uint64_t)v89, 1);
          if ((v94 & 7) != 0)
          {
            v71 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
            do
              v72 = __ldxr(v71);
            while (__stlxr(v72 - 2, v71));
          }
        }
        v73 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetToUsdConverter((_QWORD *)(*a1)[12], (uint64_t)__dst, (_QWORD **)v70);
        LODWORD(v91[0]) = *(_DWORD *)(a3 + 8);
        if (*(char *)(a3 + 39) < 0)
        {
          sub_20BDDBFAC(&v91[1], *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
        }
        else
        {
          *(_OWORD *)&v91[1] = *(_OWORD *)(a3 + 16);
          v91[3] = *(void **)(a3 + 32);
        }
        v74 = *(_QWORD *)(a3 + 48);
        v92 = *(_QWORD *)(a3 + 40);
        v93 = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        sub_20C73F5A4((uint64_t)&v94, (uint64_t)v73, (uint64_t)v91, (__int128 *)(a3 + 56));
        sub_20C73F3CC((_QWORD *)v70 + 8, (uint64_t)&v94);
        if (v103 < 0)
          operator delete(v102);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v98);
        v77 = (char **)v97;
        if (v97 == (const char *)&v94)
        {
          v78 = 4;
          v77 = (char **)&v94;
        }
        else
        {
          if (!v97)
          {
LABEL_161:
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
            v66 = v89[0];
LABEL_162:
            if (v66)
            {
              v89[1] = v66;
              operator delete(v66);
            }
            return;
          }
          v78 = 5;
        }
        (*(void (**)(void))&(*v77)[8 * v78])();
        goto LABEL_161;
      }
      if (*(char *)(a3 + 39) < 0)
      {
        if (*(_QWORD *)(a3 + 24))
          goto LABEL_22;
      }
      else if (*(_BYTE *)(a3 + 39))
      {
        goto LABEL_22;
      }
      if (*(_QWORD *)(a3 + 40))
      {
        v9 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
        if (v9)
        {
          if (!*(_DWORD *)(v9 + 24))
          {
            LODWORD(v94) = 0;
            LODWORD(v95) = 0;
            Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v91, a3 + 8, a3 + 56, &v94);
            goto LABEL_23;
          }
        }
      }
LABEL_22:
      LODWORD(v91[0]) = 2;
      sub_20BDDC0E4(&v91[1], "");
      v92 = 0;
      v93 = 0;
LABEL_23:
      v89[1] = 0;
      v90 = 0;
      v89[0] = &v89[1];
      NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)v91);
      if (NumProperties)
      {
        for (k = 0; k != NumProperties; ++k)
        {
          v12 = (const void **)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)v91);
          sub_20BE74FC0((uint64_t **)v89, v12, (uint64_t)v12);
        }
      }
      v13 = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)v91);
      if (v13)
      {
        for (m = 0; m != v13; ++m)
        {
          v15 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)v91);
          if (*(char *)(v15 + 23) < 0)
          {
            sub_20BDDBFAC(__dst, *(void **)v15, *(_QWORD *)(v15 + 8));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)v15;
            v88 = *(_QWORD *)(v15 + 16);
          }
          sub_20C73F0B0((uint64_t)__dst, " .", (uint64_t)v89, (uint64_t)&Converter);
          pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((char *)a2, (uint64_t)&Converter, (uint64_t)__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v94);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v94, &v80);
          if ((v94 & 7) != 0)
          {
            v16 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          sub_20C73BD90((uint64_t)&v94, &v80, (__int128 *)__dst, (uint64_t)v91);
          sub_20C73E44C(a1, __p, &v94);
          if (v101 < 0)
            operator delete(v100);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v95);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
          sub_20BFD265C(&v94);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v81);
          sub_20BFD265C(&v80);
          if (v83 < 0)
            operator delete(__p[0]);
          if (v86 < 0)
            operator delete(Converter);
          if (SHIBYTE(v88) < 0)
            operator delete(__dst[0]);
        }
      }
      sub_20BDECAB8((uint64_t)v89, (char *)v89[1]);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
    }
  }
}

void sub_20C73EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v45 - 216));
  _Unwind_Resume(a1);
}

void sub_20C73F0B0(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t *EmptyString;
  __int128 v10;
  std::string::size_type size;
  const char *v12;
  char *v13;
  std::string *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  std::string *p_p;
  std::string *v19;
  unsigned int *v20;
  unsigned int v21;
  std::string v22;
  std::string __str;
  std::string __p;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(a1))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
    if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a4, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v10 = *(_OWORD *)EmptyString;
      *(_QWORD *)(a4 + 16) = EmptyString[2];
      *(_OWORD *)a4 = v10;
    }
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v20 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
    sub_20BDDBFAC(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTrimLeft(a2, &__p, &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)&__p) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier((unsigned __int8 *)&__p, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str;
    }
  }
  else
  {
    std::string::operator=(&__p, 95);
  }
  if (a3 + 8 != sub_20BDEEBA4(a3, (const void **)&__p.__r_.__value_.__l.__data_))
  {
    v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v12, v13, v14, 1);
    v15 = 2;
    while (a3 + 8 != sub_20BDEEBA4(a3, (const void **)&__str.__r_.__value_.__l.__data_))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v16, v17, p_p, v15);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v22;
      v15 = (v15 + 1);
    }
    std::string::operator=(&__p, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 4)
    {
      v19 = &__p;
      goto LABEL_44;
    }
LABEL_45:
    *(std::string *)a4 = __p;
    return;
  }
  if (__p.__r_.__value_.__l.__size_ != 4)
    goto LABEL_45;
  v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_44:
  if (LODWORD(v19->__r_.__value_.__l.__data_) != 1936482678)
    goto LABEL_45;
  sub_20BDDC0E4((_QWORD *)a4, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C73F358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C73F3CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[48];
  void *__p[2];
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C73F6A0((uint64_t)v10, a2);
  sub_20C389C80((uint64_t)v12, a2 + 32);
  *(_OWORD *)__p = *(_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v4 = (_QWORD *)sub_20C73F704((uint64_t)v15, (uint64_t)v10);
  sub_20C73BC1C(v4, a1);
  v5 = v16;
  if (v16 == v15)
  {
    v6 = 4;
    v5 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_12;
  }
  if (v11)
  {
    v8 = 5;
LABEL_12:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_20C73F4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C73F53C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73F53C(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 32);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  v3 = *(_QWORD **)(a1 + 24);
  if (v3 == (_QWORD *)a1)
  {
    v4 = 4;
    v3 = (_QWORD *)a1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_20C73F5A4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;

  v7 = sub_20BE9E6E8(a1, a2);
  sub_20C73F63C(v7 + 32, a3, a4);
  return a1;
}

void sub_20C73F600(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73F63C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;

  v5 = sub_20C389C80(a1, a2) + 48;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_20C73F68C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty *v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73F6A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20C73F704(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x70uLL);
  *v4 = &unk_24C543278;
  sub_20C73F9A0((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_20C73F75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73F770(uint64_t a1)
{
  _QWORD *v2;
  Alembic::Abc::v12::ICompoundProperty *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &unk_24C543278;
  v2 = (_QWORD *)(a1 + 8);
  v3 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 40);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_20C73F7F4(void **a1)
{
  _QWORD *v2;
  Alembic::Abc::v12::ICompoundProperty *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &unk_24C543278;
  v2 = a1 + 1;
  v3 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 5);
  if (*((char *)a1 + 111) < 0)
    operator delete(a1[11]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  v4 = a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  operator delete(a1);
}

_QWORD *sub_20C73F878(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x70uLL);
  *v2 = &unk_24C543278;
  sub_20C73FA28((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C73F8BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C73F8D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C543278;
  return sub_20C73FA28((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C73F8F0(uint64_t a1)
{
  sub_20C73FB00(a1 + 8);
}

void sub_20C73F8F8(void *a1)
{
  sub_20C73FB00((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C73F920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a1 + 40, a1 + 88, a3, a2);
}

uint64_t sub_20C73F958(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543348))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C73F994()
{
  return &unk_24C543348;
}

uint64_t sub_20C73F9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = sub_20C73F6A0(a1, a2);
  sub_20C389C80(v4 + 32, a2 + 32);
  v5 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

void sub_20C73F9EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73FA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20BE9E6E8(a1, a2);
  sub_20C73FA98(v4 + 32, a2 + 32);
  return a1;
}

void sub_20C73FA5C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C73FA98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = sub_20C389C80(a1, a2) + 48;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

void sub_20C73FAEC(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty *v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C73FB00(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty *v2;
  uint64_t v3;

  v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 32);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 == a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  }
  else if (v3)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *sub_20C73FB70(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *result;
  void *v4;

  result = sub_20C73FBB8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::~UsdAbcPropertyNames_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *sub_20C73FBB8()
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)operator new(0x58uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::UsdAbcPropertyNames_StaticTokenType(v0);
  return v0;
}

void sub_20C73FBE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20C73FBF8()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498CB18);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "transform", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "xformOp:transform", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498CB18))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498CB18))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498CB18);
  }
  return (unint64_t)v0;
}

void sub_20C73FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C73FEA4(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 448))
    sub_20BDE9D48(a1 + 424, *(_QWORD **)(a1 + 432));
  *(_QWORD *)a1 = &unk_24C543370;
  *(_QWORD *)(a1 + 96) = &unk_24C5433A8;
  v2 = (void **)(a1 + 376);
  sub_20BE67B24(&v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 216));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_20C73FF44(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];
  uint64_t v20[3];
  _QWORD v21[2];
  uint64_t v22[3];
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C6D0(v21, (_QWORD *)a4);
  sub_20BDEBF8C(v22, (const void ***)(a4 + 16));
  v25 = 0;
  v8 = operator new(0x30uLL);
  *v8 = off_24C5435A0;
  sub_20C742CD8(v8 + 1, (uint64_t)v21);
  v25 = v8;
  sub_20BF4C6D0(v19, (_QWORD *)a4);
  sub_20BDEBF8C(v20, (const void ***)(a4 + 16));
  v27 = 0;
  v9 = operator new(0x30uLL);
  *v9 = off_24C543620;
  sub_20C742CD8(v9 + 1, (uint64_t)v19);
  v27 = v9;
  v10 = sub_20C739A90(a1, a2, a3, (uint64_t)v23, (uint64_t)v26);
  v11 = v27;
  if (v27 == v26)
  {
    v12 = 4;
    v11 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20BDE9D48((uint64_t)v20, (_QWORD *)v20[1]);
  sub_20BF4C2D8((uint64_t)v19);
  v13 = v25;
  if (v25 == v23)
  {
    v14 = 4;
    v13 = v23;
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  sub_20BDE9D48((uint64_t)v22, (_QWORD *)v22[1]);
  sub_20BF4C2D8((uint64_t)v21);
  sub_20BF4C6D0(v23, (_QWORD *)a4);
  sub_20BDEBF8C(&v24, (const void ***)(a4 + 16));
  v15 = operator new(0x30uLL);
  *v15 = off_24C543690;
  sub_20C742CD8(v15 + 1, (uint64_t)v23);
  v27 = v15;
  sub_20C73BC1C(v26, (_QWORD *)v10 + 8);
  v16 = v27;
  if (v27 == v26)
  {
    v17 = 4;
    v16 = v26;
    goto LABEL_15;
  }
  if (v27)
  {
    v17 = 5;
LABEL_15:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  sub_20BDE9D48((uint64_t)&v24, v25);
  result = sub_20BF4C2D8((uint64_t)v23);
  *((_WORD *)v10 + 28) = 256;
  return result;
}

void sub_20C74018C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_20C74028C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20C740274()
{
  JUMPOUT(0x20C74027CLL);
}

void sub_20C740284()
{
  JUMPOUT(0x20C74026CLL);
}

uint64_t sub_20C74028C(uint64_t a1)
{
  sub_20BDE9D48(a1 + 16, *(_QWORD **)(a1 + 24));
  return sub_20BF4C2D8(a1);
}

void sub_20C7402B8(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C543370;
  *(_QWORD *)(a1 + 96) = &unk_24C5433A8;
  v2 = (void **)(a1 + 376);
  sub_20BE67B24(&v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 216));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_20C740344(uint64_t a1, int a2)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v10;
  void *v11;
  unsigned __int8 v13;
  size_t v14;
  std::string::size_type v15;
  int v16;
  std::string *p_p;
  uint64_t v18;
  void **p_s1;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  std::string __p;
  void *v28[2];
  char v29;
  void *__s1;
  size_t __n;
  unsigned __int8 v32;
  std::string v33;
  const void *v34[2];
  char v35;
  _QWORD *v36;
  size_t v37;
  unsigned __int8 v38;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v34, "schema");
    sub_20BE01E1C(a1, v34, &v36);
    if (((char)v38 & 0x80000000) == 0)
    {
      v10 = v38 == 16 && v36 == (_QWORD *)0x5F6D6F6547636241 && v37 == 0x33765F6D726F6658;
      goto LABEL_72;
    }
    v11 = v36;
    v10 = v37 == 16 && *v36 == 0x5F6D6F6547636241 && v36[1] == 0x33765F6D726F6658;
    goto LABEL_71;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v34, "schemaObjTitle");
  sub_20BE01E1C(a1, v34, &v36);
  sub_20C74069C(&v33);
  v3 = v38;
  if ((v38 & 0x80u) == 0)
    v4 = v38;
  else
    v4 = v37;
  size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_39:
    sub_20BDDC0E4(v28, "schema");
    sub_20BE01E1C(a1, (const void **)v28, &__s1);
    sub_20C74069C(&__p);
    v13 = v32;
    if ((v32 & 0x80u) == 0)
      v14 = v32;
    else
      v14 = __n;
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __p.__r_.__value_.__l.__size_;
    if (v14 != v15)
    {
      v10 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_58;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v32 < 0)
    {
      v10 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v32)
      {
        v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v13 & 0x80) != 0)
            operator delete(__s1);
          if (v29 < 0)
            operator delete(v28[0]);
          if ((*((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_69;
          goto LABEL_68;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        v13 = v32;
        goto LABEL_63;
      }
      v18 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        v21 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v20 = v21;
        v23 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v22 = v23;
        v25 = v18-- != 0;
        v10 = v20 == v22;
      }
      while (v20 == v22 && v25);
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_58;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v33;
  else
    v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v38 & 0x80) != 0)
  {
    if (memcmp(v36, v7, v37))
      goto LABEL_39;
  }
  else if (v38)
  {
    v8 = (unsigned __int8 *)&v36;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_59;
    }
    goto LABEL_39;
  }
LABEL_59:
  v10 = 1;
  if (v6 < 0)
LABEL_68:
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_69:
  if (((char)v38 & 0x80000000) == 0)
    goto LABEL_72;
  v11 = v36;
LABEL_71:
  operator delete(v11);
LABEL_72:
  if (v35 < 0)
    operator delete((void *)v34[0]);
  return v10;
}

void sub_20C74061C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C74069C(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Xform_v3");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".xform");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C740744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

Alembic::Abc::v12::IObject *sub_20C740778(Alembic::Abc::v12::IObject *a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Header;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v21;
  void *p_p;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type size;
  _QWORD *exception;
  _QWORD *v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  int v35;
  void *__p;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t *v39;
  void *v40;
  _QWORD v41[5];
  void *v42;
  std::__shared_weak_count *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  __int128 v49;
  char v50;
  _DWORD *v51;
  const char *v52;
  _BYTE v53[96];
  void **v54;

  v9 = (_QWORD *)sub_20BE04EB0((uint64_t)a1, a2);
  *v9 = &unk_24C543370;
  v10 = (uint64_t)(v9 + 12);
  sub_20C740E70((uint64_t)(v9 + 12));
  v11 = sub_20BE04EB0((uint64_t)v53, a2);
  LODWORD(v39) = 0;
  LODWORD(v40) = 0;
  LODWORD(__p) = 0;
  LODWORD(v37) = 0;
  *((_DWORD *)a1 + 2) = sub_20BE04D74(v11, a4, a5, &v39, (uint64_t **)&__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v53);
  v51 = (_DWORD *)((char *)a1 + 8);
  v52 = "ISchemaObject::ISchemaObject( wrapflag)";
  Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v39) = 0;
  LODWORD(v40) = 0;
  LODWORD(__p) = 0;
  LODWORD(v37) = 0;
  v13 = sub_20BE6DA40(a4, a5, &v39, (uint64_t **)&__p);
  v14 = Header + 48;
  if ((sub_20C740344(v14, v13) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v39);
    v21 = sub_20BDDC1C8(v41, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(&v49, "schemaObjTitle");
    sub_20BE01E1C(v14, (const void **)&v49, &__p);
    if ((v38 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v38 & 0x80u) == 0)
      v23 = v38;
    else
      v23 = v37;
    v24 = sub_20BDDC1C8(v21, (uint64_t)p_p, v23);
    v25 = sub_20BDDC1C8(v24, (uint64_t)" to expected: ", 14);
    sub_20C74069C(&v48);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v48;
    else
      v26 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      size = v48.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v25, (uint64_t)v26, size);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if ((char)v38 < 0)
      operator delete(__p);
    if (v50 < 0)
      operator delete((void *)v49);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, &v49);
    if (v50 < 0)
      operator delete((void *)v49);
    exception = __cxa_allocate_exception(0x20uLL);
    v29 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v29, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&__p);
  sub_20BDDC0E4(&v49, ".xform");
  v15 = *((_DWORD *)a1 + 2);
  LODWORD(v48.__r_.__value_.__l.__data_) = 1;
  LODWORD(v48.__r_.__value_.__r.__words[1]) = v15;
  LODWORD(v32) = 0;
  v33 = 0;
  LODWORD(v30) = 0;
  v31 = 0;
  v16 = sub_20BE6DA40(a4, a5, &v32, &v30);
  LODWORD(v34) = 5;
  v35 = v16;
  sub_20C741098((uint64_t)&v39, (uint64_t)&__p, (uint64_t)&v49, (uint64_t **)&v48, &v34);
  sub_20C740C54(v10, (uint64_t)&v39);
  v39 = (uint64_t *)&unk_24C5433A8;
  v54 = (void **)&v47;
  sub_20BE67B24(&v54);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v46);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v45);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v44);
  v17 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v42);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v40);
  if (v50 < 0)
    operator delete((void *)v49);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  return a1;
}

void sub_20C740AC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  Alembic::Abc::v12::IObject *v24;
  uint64_t v25;
  uint64_t v26;
  void *v29;
  uint64_t v30;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v30 = (uint64_t)v29;
    sub_20BE66BE8(v25);
    Alembic::Abc::v12::IObject::reset(v24);
    sub_20BE02570(v26 - 184, v30);
  }
  else
  {
    sub_20BE66BE8(v25);
    Alembic::Abc::v12::IObject::reset(v24);
    sub_20BE02504(v26 - 184, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20C740974);
}

void sub_20C740C38()
{
  __cxa_end_catch();
  JUMPOUT(0x20C740B88);
}

void sub_20C740C44()
{
  __cxa_end_catch();
  JUMPOUT(0x20C740B88);
}

uint64_t sub_20C740C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_20BDE82DC(a1 + 104, (__int128 *)(a2 + 104));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  sub_20BDE881C((_QWORD *)(a1 + 152), (uint64_t *)(a2 + 152));
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  sub_20BDE881C((_QWORD *)(a1 + 200), (uint64_t *)(a2 + 200));
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 224));
  sub_20BDE881C((_QWORD *)(a1 + 248), (uint64_t *)(a2 + 248));
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  sub_20BE676D8((void **)(a1 + 280));
  v4 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v4;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

uint64_t sub_20C740D64(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C5433A8;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 280);
  sub_20BE67B24(&v4);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 216));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 168));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 120));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_20C740DE0(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &unk_24C543370;
  *(_QWORD *)(a1 + 96) = &unk_24C5433A8;
  v3 = (void **)(a1 + 376);
  sub_20BE67B24(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 216));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_20C740E70(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C5433A8;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 2;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_20BDDC0E4((_QWORD *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 176), "");
  *(_DWORD *)(a1 + 216) = 2;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 224), "");
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 272);
  *(_BYTE *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 264) = 257;
  return a1;
}

void sub_20C740F6C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  void **v4;
  Alembic::Abc::v12::ICompoundProperty *v5;
  Alembic::Abc::v12::ICompoundProperty *v6;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C740FC8(void **a1)
{
  void **v2;
  void **v3;

  *a1 = &unk_24C5433A8;
  v2 = a1 + 1;
  v3 = a1 + 35;
  sub_20BE67B24(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 27));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 21));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 7);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C741048(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C741070(void **a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C741098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8;

  v8 = sub_20C74120C(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = &unk_24C5433A8;
  *(_DWORD *)(v8 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(v8 + 64), "");
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 2;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_20BDDC0E4((_QWORD *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 176), "");
  *(_DWORD *)(a1 + 216) = 2;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 224), "");
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 272);
  Alembic::AbcGeom::v12::IXformSchema::init(a1, a4, a5);
  return a1;
}

void sub_20C741198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v12;
  void **v13;
  Alembic::Abc::v12::ICompoundProperty *v14;
  Alembic::Abc::v12::ICompoundProperty *v15;

  a10 = (void **)(v10 + 280);
  sub_20BE67B24(&a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v15);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v14);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v12);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v11);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_20C741204()
{
  JUMPOUT(0x20C7411F4);
}

uint64_t sub_20C74120C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C543408;
  sub_20C7412A8(a1, a2, a3, a4, a5);
  return a1;
}

void sub_20C741294(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C7412A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  char v41;
  void *v42[2];
  unsigned __int8 v43;
  __int128 v44;
  _QWORD v45[37];
  int v46;
  uint64_t v47[4];
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;

  *((_QWORD *)&v44 + 1) = 0;
  v45[0] = 0;
  *(_QWORD *)&v44 = (char *)&v44 + 8;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C(v47, (const void ***)&v44);
  v47[3] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v44, *((_QWORD **)&v44 + 1));
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  *(_DWORD *)(a1 + 8) = v46;
  v45[33] = a1 + 8;
  v45[34] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(a2 + 31))
  {
LABEL_27:
    sub_20BDDBD68((uint64_t)&v44);
    sub_20BDDC1C8(v45, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)v42);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    goto LABEL_27;
  v11 = *(std::__shared_weak_count **)(a2 + 40);
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a3);
  if (!v14)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v26 = sub_20BDDC1C8(v45, (uint64_t)"Nonexistent compound property: ", 31);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v26, v28, v29);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v30 = __cxa_allocate_exception(0x20uLL);
    v31 = sub_20BDDC09C(v30, (uint64_t)v42);
    __cxa_throw(v31, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = v14 + 32;
  if ((sub_20C741834(v14 + 32, v50) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v32 = sub_20BDDC1C8(v45, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schema");
    sub_20BE01E1C(v15, (const void **)__p, v42);
    if ((v43 & 0x80u) == 0)
      v33 = v42;
    else
      v33 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v34 = v43;
    else
      v34 = (uint64_t)v42[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"AbcGeom_Xform_v3", 16);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (v41 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)v42);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(&v44, v10, a3);
  sub_20BDE82DC(a1 + 40, &v44);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v39)
  {
    v19 = (unint64_t *)&v39->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v21 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v47, (_QWORD *)v47[1]);
}

void sub_20C7416B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v29 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v25 + 40));
  MEMORY[0x212B929D0](v25 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v26 - 160, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 160, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C741458);
}

void sub_20C7417FC()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 128);
  JUMPOUT(0x20C74182CLL);
}

uint64_t sub_20C741834(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;

  if (a2 == 1)
    return 1;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 0;
  sub_20BDDC0E4(__p, "schema");
  sub_20BE01E1C(a1, (const void **)__p, &v9);
  if (v11 < 0)
  {
    v2 = v10 == 16 && *v9 == 0x5F6D6F6547636241 && v9[1] == 0x33765F6D726F6658;
    operator delete(v9);
  }
  else
  {
    v2 = v11 == 16 && v9 == (_QWORD *)0x5F6D6F6547636241 && v10 == 0x33765F6D726F6658;
  }
  if (v8 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20C741940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74195C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C543370;
  sub_20C741A2C((uint64_t)(v4 + 12), a2 + 96);
  sub_20C741D84(a1 + 424, a2 + 424);
  return a1;
}

void sub_20C7419B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)v10 = v11 + 16;
  *(_QWORD *)(v10 + 96) = &unk_24C5433A8;
  a10 = (void **)(v10 + 376);
  sub_20BE67B24(&a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v10 + 216));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v10 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v10 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v10 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C741A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = &unk_24C5433A8;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v17 = (_BYTE *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_20BDDBFAC(v17, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)v17 = v18;
  }
  v19 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  v22 = (_BYTE *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    sub_20BDDBFAC(v22, *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)v22 = v23;
  }
  v24 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  v27 = (_BYTE *)(a1 + 224);
  if (*(char *)(a2 + 247) < 0)
  {
    sub_20BDDBFAC(v27, *(void **)(a2 + 224), *(_QWORD *)(a2 + 232));
  }
  else
  {
    v28 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)v27 = v28;
  }
  v29 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_20C741D00((_QWORD *)(a1 + 280), *(int **)(a2 + 280), *(int **)(a2 + 288), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3));
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

void sub_20C741CA4(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  void **v4;
  Alembic::Abc::v12::ICompoundProperty *v5;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C741D00(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE1B554(result, a4);
    result = (_QWORD *)sub_20BE678E4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C741D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BE67B24(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C741D84(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_20BDEBF8C((uint64_t *)a1, (const void ***)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20C741DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_20BDE9D48(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C741DE4(_QWORD *a1)
{
  *a1 = off_24C543428;
  sub_20C73FEA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_20C741E14(_QWORD *a1)
{
  *a1 = off_24C543428;
  sub_20C73FEA4((uint64_t)(a1 + 1));
  operator delete(a1);
}

_QWORD *sub_20C741E44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D0uLL);
  *v2 = off_24C543428;
  sub_20C74195C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C741E84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C741E98(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543428;
  return sub_20C74195C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C741EB4(uint64_t a1)
{
  sub_20C73FEA4(a1 + 8);
}

void sub_20C741EBC(void *a1)
{
  sub_20C73FEA4((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t **sub_20C741EE4(uint64_t a1)
{
  uint64_t **v1;
  uint64_t Header;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  std::string v11;
  std::string *v12;

  v1 = (uint64_t **)(a1 + 432);
  if (!*(_BYTE *)(a1 + 456))
  {
    *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = 0uLL;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11.__r_.__value_.__l.__size_;
    sub_20C74248C(a1 + 432, (uint64_t)&v11);
    sub_20BDE9D48((uint64_t)&v11, (_QWORD *)v11.__r_.__value_.__l.__size_);
    Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8));
    v4 = *(_QWORD **)(Header + 48);
    v5 = (_QWORD *)(Header + 56);
    if (v4 != (_QWORD *)(Header + 56))
    {
      do
      {
        if (*((char *)v4 + 79) < 0)
        {
          if (v4[8])
          {
LABEL_7:
            if (!std::string::compare((const std::string *)(v4 + 4), 0, 0xEuLL, "Usd.transform:"))
            {
              std::string::basic_string(&v11, (const std::string *)(v4 + 4), 0xEuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
              v12 = &v11;
              v6 = sub_20BDDDFDC(v1, (const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v12);
              std::string::operator=((std::string *)(v6 + 7), (const std::string *)(v4 + 7));
              if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v11.__r_.__value_.__l.__data_);
            }
          }
        }
        else if (*((_BYTE *)v4 + 79))
        {
          goto LABEL_7;
        }
        v7 = (_QWORD *)v4[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (!v9);
        }
        v4 = v8;
      }
      while (v8 != v5);
    }
  }
  return v1;
}

void sub_20C742048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, _QWORD *a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20BDE9D48((uint64_t)&__p, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C742078(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543488))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7420B4()
{
  return &unk_24C543488;
}

uint64_t sub_20C7420C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C543370;
  sub_20C742190((uint64_t)(v4 + 12), a2 + 96);
  sub_20C74242C(a1 + 424, a2 + 424);
  return a1;
}

void sub_20C74211C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)v10 = v11 + 16;
  *(_QWORD *)(v10 + 96) = &unk_24C5433A8;
  a10 = (void **)(v10 + 376);
  sub_20BE67B24(&a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v10 + 216));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v10 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v10 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v10 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C742190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = &unk_24C5433A8;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v14 = (_BYTE *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  v19 = (_BYTE *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    sub_20BDDBFAC(v19, *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  v24 = (_BYTE *)(a1 + 224);
  if (*(char *)(a2 + 247) < 0)
  {
    sub_20BDDBFAC(v24, *(void **)(a2 + 224), *(_QWORD *)(a2 + 232));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)v24 = v25;
  }
  v26 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v29 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v29;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

void sub_20C7423E0(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  void **v4;
  Alembic::Abc::v12::ICompoundProperty *v5;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74242C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_20BDEBF8C((uint64_t *)a1, (const void ***)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20C74246C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_20BDE9D48(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74248C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      sub_20BDFC4AC((uint64_t **)a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
  }
  else
  {
    sub_20BDEBF8C((uint64_t *)a1, (const void ***)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

_QWORD *sub_20C7424E4(_QWORD *a1)
{
  *a1 = off_24C5434A8;
  sub_20C73FEA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_20C742514(_QWORD *a1)
{
  *a1 = off_24C5434A8;
  sub_20C73FEA4((uint64_t)(a1 + 1));
  operator delete(a1);
}

_QWORD *sub_20C742544(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D0uLL);
  *v2 = off_24C5434A8;
  sub_20C74195C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C742584(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C742598(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5434A8;
  return sub_20C74195C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7425B4(uint64_t a1)
{
  sub_20C73FEA4(a1 + 8);
}

void sub_20C7425BC(void *a1)
{
  sub_20C73FEA4((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C7425E4(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 143) < 0)
  {
    if (*(_QWORD *)(a1 + 128))
      return;
  }
  else if (*(_BYTE *)(a1 + 143))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 144))
  {
    Alembic::AbcGeom::v12::IXformSchema::getTimeSampling((Alembic::AbcGeom::v12::IXformSchema *)(a1 + 104), &v23);
    NumSamples = Alembic::AbcGeom::v12::IXformSchema::getNumSamples((Alembic::AbcGeom::v12::IXformSchema *)(a1 + 104));
    if (*(_BYTE *)(a1 + 368))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C742790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7427EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543488))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C742828()
{
  return &unk_24C543488;
}

_QWORD *sub_20C742834(_QWORD *a1)
{
  *a1 = off_24C543518;
  sub_20C73FEA4((uint64_t)(a1 + 1));
  return a1;
}

void sub_20C742864(_QWORD *a1)
{
  *a1 = off_24C543518;
  sub_20C73FEA4((uint64_t)(a1 + 1));
  operator delete(a1);
}

_QWORD *sub_20C742894(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D0uLL);
  *v2 = off_24C543518;
  sub_20C74195C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7428D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7428E8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543518;
  return sub_20C74195C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C742904(uint64_t a1)
{
  sub_20C73FEA4(a1 + 8);
}

void sub_20C74290C(void *a1)
{
  sub_20C73FEA4((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C742934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[8];
  _OWORD v6[8];
  void **v7;

  Alembic::AbcGeom::v12::IXformSchema::getValue(a1 + 104, a3, (Alembic::AbcGeom::v12::XformSample *)v5);
  Alembic::AbcGeom::v12::XformSample::getMatrix((Alembic::AbcGeom::v12::XformSample *)v5, (uint64_t)v6);
  v7 = (void **)v5 + 1;
  sub_20BE67B24(&v7);
  v5[0] = v6[0];
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  return sub_20C742A20(a2, (uint64_t)v5);
}

void sub_20C7429BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1 + 8;
  sub_20BE67B24((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C7429D8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543488))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C742A14()
{
  return &unk_24C543488;
}

uint64_t sub_20C742A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C543578[v2])(&v5, a1);
}

uint64_t sub_20C742A70()
{
  return 1;
}

uint64_t sub_20C742A78(_OWORD ***a1, _QWORD **a2)
{
  sub_20C1D3180(*a2, **a1);
  return 1;
}

BOOL sub_20C742AA0(__int128 ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = **a1;
    v6 = *(_OWORD **)(v3 + 8);
    v7 = v5[7];
    v9 = v5[4];
    v8 = v5[5];
    v6[6] = v5[6];
    v6[7] = v7;
    v6[4] = v9;
    v6[5] = v8;
    v10 = *v5;
    v11 = v5[1];
    v12 = v5[3];
    v6[2] = v5[2];
    v6[3] = v12;
    *v6 = v10;
    v6[1] = v11;
  }
  return v4 == 0;
}

uint64_t sub_20C742B28(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C5435A0;
  v2 = a1 + 8;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_20BF4C2D8(v2);
  return a1;
}

void sub_20C742B6C(_QWORD **a1)
{
  uint64_t v2;

  *a1 = off_24C5435A0;
  v2 = (uint64_t)(a1 + 1);
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  sub_20BF4C2D8(v2);
  operator delete(a1);
}

_QWORD *sub_20C742BB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_24C5435A0;
  sub_20C742D20(v2 + 1, v1);
  return v2;
}

void sub_20C742BF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C742C04(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5435A0;
  return sub_20C742D20(a2 + 1, a1 + 8);
}

uint64_t sub_20C742C20(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  return sub_20BF4C2D8(v1);
}

void sub_20C742C50(_QWORD **a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  sub_20BF4C2D8(v2);
  operator delete(a1);
}

uint64_t sub_20C742C88(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20C742C90(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543600))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C742CCC()
{
  return &unk_24C543600;
}

_QWORD *sub_20C742CD8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = sub_20BF4C200(a1, (_QWORD *)a2);
  sub_20BDEBF8C(v4 + 2, (const void ***)(a2 + 16));
  return a1;
}

void sub_20C742D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C742D20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = sub_20BF4C6D0(a1, (_QWORD *)a2);
  sub_20BDEBF8C(v4 + 2, (const void ***)(a2 + 16));
  return a1;
}

void sub_20C742D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C742D68(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C543620;
  v2 = a1 + 8;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_20BF4C2D8(v2);
  return a1;
}

void sub_20C742DAC(_QWORD **a1)
{
  uint64_t v2;

  *a1 = off_24C543620;
  v2 = (uint64_t)(a1 + 1);
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  sub_20BF4C2D8(v2);
  operator delete(a1);
}

_QWORD *sub_20C742DF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_24C543620;
  sub_20C742D20(v2 + 1, v1);
  return v2;
}

void sub_20C742E30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C742E44(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543620;
  return sub_20C742D20(a2 + 1, a1 + 8);
}

uint64_t sub_20C742E60(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  return sub_20BF4C2D8(v1);
}

void sub_20C742E90(_QWORD **a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  sub_20BF4C2D8(v2);
  operator delete(a1);
}

_QWORD *sub_20C742EC8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = 0;
  return sub_20BE15BCC(a1, 1uLL, &v2);
}

uint64_t sub_20C742EF4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543600))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C742F30()
{
  return &unk_24C543600;
}

uint64_t sub_20C742F3C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C543690;
  v2 = a1 + 8;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_20BF4C2D8(v2);
  return a1;
}

void sub_20C742F80(_QWORD **a1)
{
  uint64_t v2;

  *a1 = off_24C543690;
  v2 = (uint64_t)(a1 + 1);
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  sub_20BF4C2D8(v2);
  operator delete(a1);
}

_QWORD *sub_20C742FC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_24C543690;
  sub_20C742D20(v2 + 1, v1);
  return v2;
}

void sub_20C743004(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C743018(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543690;
  return sub_20C742D20(a2 + 1, a1 + 8);
}

uint64_t sub_20C743034(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  sub_20BDE9D48(a1 + 24, *(_QWORD **)(a1 + 32));
  return sub_20BF4C2D8(v1);
}

void sub_20C743064(_QWORD **a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  sub_20BDE9D48((uint64_t)(a1 + 3), a1[4]);
  sub_20BF4C2D8(v2);
  operator delete(a1);
}

uint64_t sub_20C74309C(uint64_t a1, uint64_t a2)
{
  return sub_20C7430F4(a2, a1 + 8);
}

uint64_t sub_20C7430AC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543600))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7430E8()
{
  return &unk_24C543600;
}

uint64_t sub_20C7430F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5436F0[v2])(&v5, a1);
}

uint64_t sub_20C743144()
{
  return 1;
}

uint64_t sub_20C74314C(_QWORD ***a1, _QWORD **a2)
{
  sub_20BF4A9BC(*a2, **a1);
  return 1;
}

uint64_t sub_20C743170(_QWORD **a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD))*a2)(*a2, **a1);
}

_QWORD *sub_20C743188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t PropertyHeader;
  BOOL v6;
  BOOL v7;
  _QWORD *result;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;

  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_17;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (int *)(a1 + 8);
    v4 = a1 + 56;
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
    if (PropertyHeader)
    {
      v6 = *(_DWORD *)(PropertyHeader + 56) == 12 && *(_BYTE *)(PropertyHeader + 60) == 1;
      v7 = v6 && *(_DWORD *)(PropertyHeader + 24) == 1;
      if (v7 && sub_20BE07A80(PropertyHeader + 32, 0))
      {
        LODWORD(v11) = 0;
        v12 = 0;
        LODWORD(v9) = 0;
        v10 = 0;
        return (_QWORD *)sub_20BE07490(a2, v3, v4, &v11, &v9);
      }
    }
  }
LABEL_17:
  *(_DWORD *)a2 = 2;
  result = sub_20BDDC0E4((_QWORD *)(a2 + 8), "");
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_20C743260(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543718;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C743290(void **a1)
{
  *a1 = off_24C543718;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7432C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543718;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C743300(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C743314(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543718;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C743330(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C743338(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C743360(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C74337C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7433B8()
{
  return &unk_24C543788;
}

uint64_t sub_20C7433C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5437B0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7433F4(void **a1)
{
  *a1 = off_24C5437B0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C743424(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C5437B0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C743464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C743478(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5437B0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C743494(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C74349C(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C7434C4(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C743514((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), a2);
}

uint64_t sub_20C7434CC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C743508()
{
  return &unk_24C543788;
}

void sub_20C743514(Alembic::Abc::v12::IScalarProperty *this@<X0>, double **a2@<X8>)
{
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return;
  }
  else if (*((_BYTE *)this + 31))
  {
    return;
  }
  if (*((_QWORD *)this + 4))
  {
    Alembic::Abc::v12::IScalarProperty::getTimeSampling(this, &v23);
    NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(this))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7436C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C743720(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543820;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C743750(void **a1)
{
  *a1 = off_24C543820;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C743780(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543820;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7437C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7437D4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543820;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7437F0(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C7437F8(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C743820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *__p;
  char v9;
  uint64_t v10;

  sub_20BE07440(a1 + 8, a3, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
  v4 = sub_20C73D728(a2, (uint64_t)&v10);
  if ((v10 & 7) != 0)
  {
    v5 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if (v9 < 0)
    operator delete(__p);
  return v4;
}

void sub_20C7438A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  unsigned int *v16;
  unsigned int v17;

  if ((a15 & 7) != 0)
  {
    v16 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7438E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C743924()
{
  return &unk_24C543788;
}

void sub_20C743930(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  __int128 *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 31) < 0)
  {
    if (*(_QWORD *)(a4 + 16))
      v11 = 1;
    else
      v11 = *(_QWORD *)(a4 + 32) == 0;
    if (!v11)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      sub_20BDDBFAC(&v37, *(void **)(a4 + 8), 0);
      v8 = *(_QWORD *)(a4 + 32);
LABEL_12:
      v12 = *(_QWORD *)(a4 + 40);
      v39 = v8;
      v40 = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v49 = 0;
      v15 = operator new(0x38uLL);
      *v15 = off_24C543890;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v36);
      v49 = v15;
      LODWORD(v31) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v32, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v32 = *v10;
        v33 = *((_QWORD *)v10 + 2);
      }
      v16 = *(_QWORD *)(a4 + 40);
      v34 = *(_QWORD *)(a4 + 32);
      v35 = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v47 = 0;
      v19 = operator new(0x38uLL);
      *v19 = off_24C543910;
      sub_20C389C80((uint64_t)(v19 + 1), (uint64_t)&v31);
      v47 = v19;
      v20 = sub_20C739A90(a1, a2, a3, (uint64_t)v48, (uint64_t)v46);
      LODWORD(v41) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v42, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v42 = *v10;
        v43 = *((_QWORD *)v10 + 2);
      }
      v21 = *(_QWORD *)(a4 + 40);
      v44 = *(_QWORD *)(a4 + 32);
      v45 = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = operator new(0x38uLL);
      *v24 = off_24C543980;
      sub_20C389C80((uint64_t)(v24 + 1), (uint64_t)&v41);
      v51 = v24;
      sub_20C73BC1C(v50, (_QWORD *)v20 + 8);
      v25 = v51;
      if (v51 == v50)
      {
        v26 = 4;
        v25 = v50;
      }
      else
      {
        if (!v51)
          goto LABEL_32;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_32:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
      v27 = v47;
      if (v47 == v46)
      {
        v28 = 4;
        v27 = v46;
      }
      else
      {
        if (!v47)
          goto LABEL_37;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_37:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v31);
      v29 = v49;
      if (v49 == v48)
      {
        v30 = 4;
        v29 = v48;
      }
      else
      {
        if (!v49)
        {
LABEL_42:
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v36);
          return;
        }
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
      goto LABEL_42;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 32);
    if (*(_BYTE *)(a4 + 31))
      v9 = 1;
    else
      v9 = v8 == 0;
    if (!v9)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      v37 = *(_OWORD *)(a4 + 8);
      v38 = *(_QWORD *)(a4 + 24);
      goto LABEL_12;
    }
  }
}

void sub_20C743C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  v10 = *(_QWORD **)(v8 - 112);
  if (v10 == (_QWORD *)(v8 - 136))
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 136);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C743CFC(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  __int128 *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 31) < 0)
  {
    if (*(_QWORD *)(a4 + 16))
      v11 = 1;
    else
      v11 = *(_QWORD *)(a4 + 32) == 0;
    if (!v11)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      sub_20BDDBFAC(&v37, *(void **)(a4 + 8), 0);
      v8 = *(_QWORD *)(a4 + 32);
LABEL_12:
      v12 = *(_QWORD *)(a4 + 40);
      v39 = v8;
      v40 = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v49 = 0;
      v15 = operator new(0x38uLL);
      *v15 = off_24C5439F0;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v36);
      v49 = v15;
      LODWORD(v31) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v32, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v32 = *v10;
        v33 = *((_QWORD *)v10 + 2);
      }
      v16 = *(_QWORD *)(a4 + 40);
      v34 = *(_QWORD *)(a4 + 32);
      v35 = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v47 = 0;
      v19 = operator new(0x38uLL);
      *v19 = off_24C543A70;
      sub_20C389C80((uint64_t)(v19 + 1), (uint64_t)&v31);
      v47 = v19;
      v20 = sub_20C739A90(a1, a2, a3, (uint64_t)v48, (uint64_t)v46);
      LODWORD(v41) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v42, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v42 = *v10;
        v43 = *((_QWORD *)v10 + 2);
      }
      v21 = *(_QWORD *)(a4 + 40);
      v44 = *(_QWORD *)(a4 + 32);
      v45 = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = operator new(0x38uLL);
      *v24 = off_24C543AE0;
      sub_20C389C80((uint64_t)(v24 + 1), (uint64_t)&v41);
      v51 = v24;
      sub_20C73BC1C(v50, (_QWORD *)v20 + 8);
      v25 = v51;
      if (v51 == v50)
      {
        v26 = 4;
        v25 = v50;
      }
      else
      {
        if (!v51)
          goto LABEL_32;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_32:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
      v27 = v47;
      if (v47 == v46)
      {
        v28 = 4;
        v27 = v46;
      }
      else
      {
        if (!v47)
          goto LABEL_37;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_37:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v31);
      v29 = v49;
      if (v49 == v48)
      {
        v30 = 4;
        v29 = v48;
      }
      else
      {
        if (!v49)
        {
LABEL_42:
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v36);
          return;
        }
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
      goto LABEL_42;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 32);
    if (*(_BYTE *)(a4 + 31))
      v9 = 1;
    else
      v9 = v8 == 0;
    if (!v9)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      v37 = *(_OWORD *)(a4 + 8);
      v38 = *(_QWORD *)(a4 + 24);
      goto LABEL_12;
    }
  }
}

void sub_20C743FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  v10 = *(_QWORD **)(v8 - 112);
  if (v10 == (_QWORD *)(v8 - 136))
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 136);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7440C8(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t PropertyHeader;
  BOOL v6;
  BOOL v7;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;

  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_5;
LABEL_17:
    *(_DWORD *)a1 = 2;
    sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    return a1;
  }
  if (*(_BYTE *)(a2 + 39))
    goto LABEL_17;
LABEL_5:
  if (!*(_QWORD *)(a2 + 40))
    goto LABEL_17;
  v3 = (int *)(a2 + 8);
  v4 = a2 + 56;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader)
    goto LABEL_17;
  v6 = *(_DWORD *)(PropertyHeader + 56) == 10 && *(_BYTE *)(PropertyHeader + 60) == 3;
  v7 = v6 && *(_DWORD *)(PropertyHeader + 24) == 2;
  if (!v7 || !sub_20BE226AC(PropertyHeader + 32, 0))
    goto LABEL_17;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE220BC(a1, v3, v4, &v11, &v9);
  return a1;
}

void sub_20C7441A4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  __int128 *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 31) < 0)
  {
    if (*(_QWORD *)(a4 + 16))
      v11 = 1;
    else
      v11 = *(_QWORD *)(a4 + 32) == 0;
    if (!v11)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      sub_20BDDBFAC(&v37, *(void **)(a4 + 8), 0);
      v8 = *(_QWORD *)(a4 + 32);
LABEL_12:
      v12 = *(_QWORD *)(a4 + 40);
      v39 = v8;
      v40 = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v49 = 0;
      v15 = operator new(0x38uLL);
      *v15 = off_24C543B50;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v36);
      v49 = v15;
      LODWORD(v31) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v32, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v32 = *v10;
        v33 = *((_QWORD *)v10 + 2);
      }
      v16 = *(_QWORD *)(a4 + 40);
      v34 = *(_QWORD *)(a4 + 32);
      v35 = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v47 = 0;
      v19 = operator new(0x38uLL);
      *v19 = off_24C543BD0;
      sub_20C389C80((uint64_t)(v19 + 1), (uint64_t)&v31);
      v47 = v19;
      v20 = sub_20C739A90(a1, a2, a3, (uint64_t)v48, (uint64_t)v46);
      LODWORD(v41) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v42, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v42 = *v10;
        v43 = *((_QWORD *)v10 + 2);
      }
      v21 = *(_QWORD *)(a4 + 40);
      v44 = *(_QWORD *)(a4 + 32);
      v45 = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = operator new(0x38uLL);
      *v24 = off_24C543C40;
      sub_20C389C80((uint64_t)(v24 + 1), (uint64_t)&v41);
      v51 = v24;
      sub_20C73BC1C(v50, (_QWORD *)v20 + 8);
      v25 = v51;
      if (v51 == v50)
      {
        v26 = 4;
        v25 = v50;
      }
      else
      {
        if (!v51)
          goto LABEL_32;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_32:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
      v27 = v47;
      if (v47 == v46)
      {
        v28 = 4;
        v27 = v46;
      }
      else
      {
        if (!v47)
          goto LABEL_37;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_37:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v31);
      v29 = v49;
      if (v49 == v48)
      {
        v30 = 4;
        v29 = v48;
      }
      else
      {
        if (!v49)
        {
LABEL_42:
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v36);
          return;
        }
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
      goto LABEL_42;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 32);
    if (*(_BYTE *)(a4 + 31))
      v9 = 1;
    else
      v9 = v8 == 0;
    if (!v9)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      v37 = *(_OWORD *)(a4 + 8);
      v38 = *(_QWORD *)(a4 + 24);
      goto LABEL_12;
    }
  }
}

void sub_20C744494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  v10 = *(_QWORD **)(v8 - 112);
  if (v10 == (_QWORD *)(v8 - 136))
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 136);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C744570(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t PropertyHeader;
  BOOL v6;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;

  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_5;
LABEL_14:
    *(_DWORD *)a1 = 2;
    sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    return a1;
  }
  if (*(_BYTE *)(a2 + 39))
    goto LABEL_14;
LABEL_5:
  if (!*(_QWORD *)(a2 + 40))
    goto LABEL_14;
  v3 = (int *)(a2 + 8);
  v4 = a2 + 56;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader)
    goto LABEL_14;
  v6 = *(_DWORD *)(PropertyHeader + 56) == 6 && *(_DWORD *)(PropertyHeader + 24) == 2;
  if (!v6 || !sub_20BE1ECC4(PropertyHeader + 32, 0))
    goto LABEL_14;
  LODWORD(v10) = 0;
  v11 = 0;
  LODWORD(v8) = 0;
  v9 = 0;
  sub_20BE1E6DC(a1, v3, v4, &v10, &v8);
  return a1;
}

void sub_20C744644(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  __int128 *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 31) < 0)
  {
    if (*(_QWORD *)(a4 + 16))
      v11 = 1;
    else
      v11 = *(_QWORD *)(a4 + 32) == 0;
    if (!v11)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      sub_20BDDBFAC(&v37, *(void **)(a4 + 8), 0);
      v8 = *(_QWORD *)(a4 + 32);
LABEL_12:
      v12 = *(_QWORD *)(a4 + 40);
      v39 = v8;
      v40 = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v49 = 0;
      v15 = operator new(0x38uLL);
      *v15 = off_24C5440F8;
      sub_20C389C80((uint64_t)(v15 + 1), (uint64_t)&v36);
      v49 = v15;
      LODWORD(v31) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v32, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v32 = *v10;
        v33 = *((_QWORD *)v10 + 2);
      }
      v16 = *(_QWORD *)(a4 + 40);
      v34 = *(_QWORD *)(a4 + 32);
      v35 = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v47 = 0;
      v19 = operator new(0x38uLL);
      *v19 = off_24C544178;
      sub_20C389C80((uint64_t)(v19 + 1), (uint64_t)&v31);
      v47 = v19;
      v20 = sub_20C739A90(a1, a2, a3, (uint64_t)v48, (uint64_t)v46);
      LODWORD(v41) = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_20BDDBFAC(&v42, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        v42 = *v10;
        v43 = *((_QWORD *)v10 + 2);
      }
      v21 = *(_QWORD *)(a4 + 40);
      v44 = *(_QWORD *)(a4 + 32);
      v45 = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = operator new(0x38uLL);
      *v24 = off_24C5441E8;
      sub_20C389C80((uint64_t)(v24 + 1), (uint64_t)&v41);
      v51 = v24;
      sub_20C73BC1C(v50, (_QWORD *)v20 + 8);
      v25 = v51;
      if (v51 == v50)
      {
        v26 = 4;
        v25 = v50;
      }
      else
      {
        if (!v51)
          goto LABEL_32;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_32:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
      v27 = v47;
      if (v47 == v46)
      {
        v28 = 4;
        v27 = v46;
      }
      else
      {
        if (!v47)
          goto LABEL_37;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_37:
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v31);
      v29 = v49;
      if (v49 == v48)
      {
        v30 = 4;
        v29 = v48;
      }
      else
      {
        if (!v49)
        {
LABEL_42:
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v36);
          return;
        }
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
      goto LABEL_42;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 32);
    if (*(_BYTE *)(a4 + 31))
      v9 = 1;
    else
      v9 = v8 == 0;
    if (!v9)
    {
      LODWORD(v36) = *(_DWORD *)a4;
      v10 = (__int128 *)(a4 + 8);
      v37 = *(_OWORD *)(a4 + 8);
      v38 = *(_QWORD *)(a4 + 24);
      goto LABEL_12;
    }
  }
}

void sub_20C744934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  v10 = *(_QWORD **)(v8 - 112);
  if (v10 == (_QWORD *)(v8 - 136))
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 136);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C744A10(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v72;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  _BYTE *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  char *v119;
  _BYTE *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  _BYTE *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  char *v165;
  _BYTE *v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  char *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  _BYTE *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t **v205;
  void *v206;
  char v207;
  uint64_t v208;
  void *v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  int v225;
  int v226;
  uint64_t v227;
  void *v228;
  char v229;
  uint64_t v230;
  void *v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  void *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  __int128 __src;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  void *__p;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned __int8 v278;
  _BYTE v279[24];
  _BYTE *v280;
  _BYTE v281[24];
  _BYTE *v282;
  _QWORD v283[3];
  _QWORD *v284;
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  v230 = a3;
  sub_20BDDC0E4(&__p, "uv");
  sub_20C739988((uint64_t)a1, (unsigned __int8 **)&__p, (uint64_t)&v225);
  if (SHIBYTE(v264) < 0)
    operator delete(__p);
  sub_20C74AD04((uint64_t)&v225, (uint64_t)&__p);
  v5 = v278;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v273);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v268);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
  v205 = a1;
  if (!v5)
  {
    sub_20C74AD04((uint64_t)&v225, (uint64_t)&v209);
    if (!sub_20C74B5B8((uint64_t)&v209))
    {
LABEL_388:
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v219);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v214);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v209);
      goto LABEL_389;
    }
    LODWORD(v247) = (_DWORD)v209;
    if (SHIBYTE(v211) < 0)
    {
      sub_20BDDBFAC(&v248, (void *)v210, *((unint64_t *)&v210 + 1));
    }
    else
    {
      v248 = v210;
      v249 = v211;
    }
    v250 = v212;
    v251 = v213;
    if (v213)
    {
      v140 = (unint64_t *)(v213 + 8);
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
    LODWORD(v252) = (_DWORD)v214;
    if (SHIBYTE(v216) < 0)
    {
      sub_20BDDBFAC(&v253, (void *)v215, *((unint64_t *)&v215 + 1));
    }
    else
    {
      v253 = v215;
      v254 = v216;
    }
    v255 = v217;
    v256 = v218;
    if (v218)
    {
      v142 = (unint64_t *)(v218 + 8);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    v257 = v219;
    if (SHIBYTE(v221) < 0)
    {
      sub_20BDDBFAC(&__src, (void *)v220, *((unint64_t *)&v220 + 1));
    }
    else
    {
      __src = v220;
      v259 = v221;
    }
    v260 = v222;
    v261 = v223;
    if (v223)
    {
      v144 = (unint64_t *)(v223 + 8);
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    v262 = v224;
    v282 = 0;
    v146 = (char *)operator new(0xA0uLL);
    *(_QWORD *)v146 = off_24C5445C8;
    v147 = v146 + 16;
    *((_DWORD *)v146 + 2) = (_DWORD)v247;
    if (SHIBYTE(v249) < 0)
    {
      sub_20BDDBFAC(v147, (void *)v248, *((unint64_t *)&v248 + 1));
    }
    else
    {
      *(_OWORD *)v147 = v248;
      *((_QWORD *)v146 + 4) = v249;
    }
    v148 = v251;
    *((_QWORD *)v146 + 5) = v250;
    *((_QWORD *)v146 + 6) = v148;
    if (v148)
    {
      v149 = (unint64_t *)(v148 + 8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
    }
    *((_DWORD *)v146 + 14) = (_DWORD)v252;
    v151 = v146 + 64;
    if (SHIBYTE(v254) < 0)
    {
      sub_20BDDBFAC(v151, (void *)v253, *((unint64_t *)&v253 + 1));
    }
    else
    {
      *(_OWORD *)v151 = v253;
      *((_QWORD *)v146 + 10) = v254;
    }
    v152 = v256;
    *((_QWORD *)v146 + 11) = v255;
    *((_QWORD *)v146 + 12) = v152;
    if (v152)
    {
      v153 = (unint64_t *)(v152 + 8);
      do
        v154 = __ldxr(v153);
      while (__stxr(v154 + 1, v153));
    }
    *((_DWORD *)v146 + 26) = v257;
    v155 = v146 + 112;
    if (SHIBYTE(v259) < 0)
    {
      sub_20BDDBFAC(v155, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)v155 = __src;
      *((_QWORD *)v146 + 16) = v259;
    }
    v156 = v261;
    *((_QWORD *)v146 + 17) = v260;
    *((_QWORD *)v146 + 18) = v156;
    if (v156)
    {
      v157 = (unint64_t *)(v156 + 8);
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
    }
    v146[152] = v262;
    v282 = v146;
    LODWORD(v231) = (_DWORD)v209;
    if (SHIBYTE(v211) < 0)
    {
      sub_20BDDBFAC(&v232, (void *)v210, *((unint64_t *)&v210 + 1));
    }
    else
    {
      v232 = v210;
      v233 = v211;
    }
    v234 = v212;
    v235 = v213;
    if (v213)
    {
      v159 = (unint64_t *)(v213 + 8);
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    LODWORD(v236) = (_DWORD)v214;
    if (SHIBYTE(v216) < 0)
    {
      sub_20BDDBFAC(&v237, (void *)v215, *((unint64_t *)&v215 + 1));
    }
    else
    {
      v237 = v215;
      v238 = v216;
    }
    v239 = v217;
    v240 = v218;
    if (v218)
    {
      v161 = (unint64_t *)(v218 + 8);
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
    }
    v241 = v219;
    if (SHIBYTE(v221) < 0)
    {
      sub_20BDDBFAC(&v242, (void *)v220, *((unint64_t *)&v220 + 1));
    }
    else
    {
      v242 = v220;
      v243 = v221;
    }
    v244 = v222;
    v245 = v223;
    if (v223)
    {
      v163 = (unint64_t *)(v223 + 8);
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    v246 = v224;
    v280 = 0;
    v165 = (char *)operator new(0xA0uLL);
    *(_QWORD *)v165 = off_24C544648;
    v166 = v165 + 16;
    *((_DWORD *)v165 + 2) = (_DWORD)v231;
    if (SHIBYTE(v233) < 0)
    {
      sub_20BDDBFAC(v166, (void *)v232, *((unint64_t *)&v232 + 1));
    }
    else
    {
      *(_OWORD *)v166 = v232;
      *((_QWORD *)v165 + 4) = v233;
    }
    v167 = v235;
    *((_QWORD *)v165 + 5) = v234;
    *((_QWORD *)v165 + 6) = v167;
    if (v167)
    {
      v168 = (unint64_t *)(v167 + 8);
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 1, v168));
    }
    *((_DWORD *)v165 + 14) = (_DWORD)v236;
    v170 = v165 + 64;
    if (SHIBYTE(v238) < 0)
    {
      sub_20BDDBFAC(v170, (void *)v237, *((unint64_t *)&v237 + 1));
    }
    else
    {
      *(_OWORD *)v170 = v237;
      *((_QWORD *)v165 + 10) = v238;
    }
    v171 = v240;
    *((_QWORD *)v165 + 11) = v239;
    *((_QWORD *)v165 + 12) = v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 8);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
    *((_DWORD *)v165 + 26) = v241;
    v174 = v165 + 112;
    if (SHIBYTE(v243) < 0)
    {
      sub_20BDDBFAC(v174, (void *)v242, *((unint64_t *)&v242 + 1));
    }
    else
    {
      *(_OWORD *)v174 = v242;
      *((_QWORD *)v165 + 16) = v243;
    }
    v175 = v245;
    *((_QWORD *)v165 + 17) = v244;
    *((_QWORD *)v165 + 18) = v175;
    if (v175)
    {
      v176 = (unint64_t *)(v175 + 8);
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
    }
    v165[152] = v246;
    v280 = v165;
    v178 = sub_20C739A90(a1, a2, &v230, (uint64_t)v281, (uint64_t)v279);
    LODWORD(__p) = (_DWORD)v209;
    if (SHIBYTE(v211) < 0)
    {
      sub_20BDDBFAC(&v264, (void *)v210, *((unint64_t *)&v210 + 1));
    }
    else
    {
      v264 = v210;
      v265 = v211;
    }
    v266 = v212;
    v267 = v213;
    if (v213)
    {
      v179 = (unint64_t *)(v213 + 8);
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    LODWORD(v268) = (_DWORD)v214;
    if (SHIBYTE(v216) < 0)
    {
      sub_20BDDBFAC(&v269, (void *)v215, *((unint64_t *)&v215 + 1));
    }
    else
    {
      v269 = v215;
      v270 = v216;
    }
    v271 = v217;
    v272 = v218;
    if (v218)
    {
      v181 = (unint64_t *)(v218 + 8);
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
    }
    v273 = v219;
    if (SHIBYTE(v221) < 0)
    {
      sub_20BDDBFAC(&v274, (void *)v220, *((unint64_t *)&v220 + 1));
    }
    else
    {
      v274 = v220;
      v275 = v221;
    }
    v276 = v222;
    v277 = v223;
    if (v223)
    {
      v183 = (unint64_t *)(v223 + 8);
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 1, v183));
    }
    v278 = v224;
    v185 = (char *)operator new(0xA0uLL);
    *(_QWORD *)v185 = off_24C5446B8;
    v186 = v185 + 16;
    *((_DWORD *)v185 + 2) = (_DWORD)__p;
    if (SHIBYTE(v265) < 0)
    {
      sub_20BDDBFAC(v186, (void *)v264, *((unint64_t *)&v264 + 1));
    }
    else
    {
      *(_OWORD *)v186 = v264;
      *((_QWORD *)v185 + 4) = v265;
    }
    v187 = v267;
    *((_QWORD *)v185 + 5) = v266;
    *((_QWORD *)v185 + 6) = v187;
    if (v187)
    {
      v188 = (unint64_t *)(v187 + 8);
      do
        v189 = __ldxr(v188);
      while (__stxr(v189 + 1, v188));
    }
    *((_DWORD *)v185 + 14) = (_DWORD)v268;
    v190 = v185 + 64;
    if (SHIBYTE(v270) < 0)
    {
      sub_20BDDBFAC(v190, (void *)v269, *((unint64_t *)&v269 + 1));
    }
    else
    {
      *(_OWORD *)v190 = v269;
      *((_QWORD *)v185 + 10) = v270;
    }
    v191 = v272;
    *((_QWORD *)v185 + 11) = v271;
    *((_QWORD *)v185 + 12) = v191;
    if (v191)
    {
      v192 = (unint64_t *)(v191 + 8);
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    *((_DWORD *)v185 + 26) = v273;
    v194 = v185 + 112;
    if (SHIBYTE(v275) < 0)
    {
      sub_20BDDBFAC(v194, (void *)v274, *((unint64_t *)&v274 + 1));
    }
    else
    {
      *(_OWORD *)v194 = v274;
      *((_QWORD *)v185 + 16) = v275;
    }
    v195 = v277;
    *((_QWORD *)v185 + 17) = v276;
    *((_QWORD *)v185 + 18) = v195;
    if (v195)
    {
      v196 = (unint64_t *)(v195 + 8);
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 1, v196));
    }
    v185[152] = v278;
    v284 = v185;
    sub_20C73BC1C(v283, (_QWORD *)v178 + 8);
    v198 = v284;
    if (v284 == v283)
    {
      v199 = 4;
      v198 = v283;
    }
    else
    {
      if (!v284)
        goto LABEL_377;
      v199 = 5;
    }
    (*(void (**)(void))(*v198 + 8 * v199))();
LABEL_377:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v273);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v268);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
    v200 = v280;
    if (v280 == v279)
    {
      v201 = 4;
      v200 = v279;
    }
    else
    {
      if (!v280)
        goto LABEL_382;
      v201 = 5;
    }
    (*(void (**)(void))(*v200 + 8 * v201))();
LABEL_382:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v241);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v236);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v231);
    v202 = v282;
    if (v282 == v281)
    {
      v203 = 4;
      v202 = v281;
    }
    else
    {
      if (!v282)
      {
LABEL_387:
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v257);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v252);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v247);
        goto LABEL_388;
      }
      v203 = 5;
    }
    (*(void (**)(void))(*v202 + 8 * v203))();
    goto LABEL_387;
  }
  sub_20C74AD04((uint64_t)&v225, (uint64_t)&v209);
  if (!sub_20C74B5B8((uint64_t)&v209))
    goto LABEL_132;
  LODWORD(v247) = (_DWORD)v209;
  if (SHIBYTE(v211) < 0)
  {
    sub_20BDDBFAC(&v248, (void *)v210, *((unint64_t *)&v210 + 1));
  }
  else
  {
    v248 = v210;
    v249 = v211;
  }
  v250 = v212;
  v251 = v213;
  if (v213)
  {
    v6 = (unint64_t *)(v213 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  LODWORD(v252) = (_DWORD)v214;
  if (SHIBYTE(v216) < 0)
  {
    sub_20BDDBFAC(&v253, (void *)v215, *((unint64_t *)&v215 + 1));
  }
  else
  {
    v253 = v215;
    v254 = v216;
  }
  v255 = v217;
  v256 = v218;
  if (v218)
  {
    v8 = (unint64_t *)(v218 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v257 = v219;
  if (SHIBYTE(v221) < 0)
  {
    sub_20BDDBFAC(&__src, (void *)v220, *((unint64_t *)&v220 + 1));
  }
  else
  {
    __src = v220;
    v259 = v221;
  }
  v260 = v222;
  v261 = v223;
  if (v223)
  {
    v10 = (unint64_t *)(v223 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v262 = v224;
  v282 = 0;
  v12 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v12 = off_24C544258;
  v13 = v12 + 16;
  *((_DWORD *)v12 + 2) = (_DWORD)v247;
  if (SHIBYTE(v249) < 0)
  {
    sub_20BDDBFAC(v13, (void *)v248, *((unint64_t *)&v248 + 1));
  }
  else
  {
    *(_OWORD *)v13 = v248;
    *((_QWORD *)v12 + 4) = v249;
  }
  v14 = v251;
  *((_QWORD *)v12 + 5) = v250;
  *((_QWORD *)v12 + 6) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *((_DWORD *)v12 + 14) = (_DWORD)v252;
  v17 = v12 + 64;
  if (SHIBYTE(v254) < 0)
  {
    sub_20BDDBFAC(v17, (void *)v253, *((unint64_t *)&v253 + 1));
  }
  else
  {
    *(_OWORD *)v17 = v253;
    *((_QWORD *)v12 + 10) = v254;
  }
  v18 = v256;
  *((_QWORD *)v12 + 11) = v255;
  *((_QWORD *)v12 + 12) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_DWORD *)v12 + 26) = v257;
  v21 = v12 + 112;
  if (SHIBYTE(v259) < 0)
  {
    sub_20BDDBFAC(v21, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    *(_OWORD *)v21 = __src;
    *((_QWORD *)v12 + 16) = v259;
  }
  v22 = v261;
  *((_QWORD *)v12 + 17) = v260;
  *((_QWORD *)v12 + 18) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v12[152] = v262;
  v282 = v12;
  LODWORD(v231) = (_DWORD)v209;
  if (SHIBYTE(v211) < 0)
  {
    sub_20BDDBFAC(&v232, (void *)v210, *((unint64_t *)&v210 + 1));
  }
  else
  {
    v232 = v210;
    v233 = v211;
  }
  v234 = v212;
  v235 = v213;
  if (v213)
  {
    v25 = (unint64_t *)(v213 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  LODWORD(v236) = (_DWORD)v214;
  if (SHIBYTE(v216) < 0)
  {
    sub_20BDDBFAC(&v237, (void *)v215, *((unint64_t *)&v215 + 1));
  }
  else
  {
    v237 = v215;
    v238 = v216;
  }
  v239 = v217;
  v240 = v218;
  if (v218)
  {
    v27 = (unint64_t *)(v218 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v241 = v219;
  if (SHIBYTE(v221) < 0)
  {
    sub_20BDDBFAC(&v242, (void *)v220, *((unint64_t *)&v220 + 1));
  }
  else
  {
    v242 = v220;
    v243 = v221;
  }
  v244 = v222;
  v245 = v223;
  if (v223)
  {
    v29 = (unint64_t *)(v223 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v246 = v224;
  v280 = 0;
  v31 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v31 = off_24C5442D8;
  v32 = v31 + 16;
  *((_DWORD *)v31 + 2) = (_DWORD)v231;
  if (SHIBYTE(v233) < 0)
  {
    sub_20BDDBFAC(v32, (void *)v232, *((unint64_t *)&v232 + 1));
  }
  else
  {
    *(_OWORD *)v32 = v232;
    *((_QWORD *)v31 + 4) = v233;
  }
  v33 = v235;
  *((_QWORD *)v31 + 5) = v234;
  *((_QWORD *)v31 + 6) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *((_DWORD *)v31 + 14) = (_DWORD)v236;
  v36 = v31 + 64;
  if (SHIBYTE(v238) < 0)
  {
    sub_20BDDBFAC(v36, (void *)v237, *((unint64_t *)&v237 + 1));
  }
  else
  {
    *(_OWORD *)v36 = v237;
    *((_QWORD *)v31 + 10) = v238;
  }
  v37 = v240;
  *((_QWORD *)v31 + 11) = v239;
  *((_QWORD *)v31 + 12) = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  *((_DWORD *)v31 + 26) = v241;
  v40 = v31 + 112;
  if (SHIBYTE(v243) < 0)
  {
    sub_20BDDBFAC(v40, (void *)v242, *((unint64_t *)&v242 + 1));
  }
  else
  {
    *(_OWORD *)v40 = v242;
    *((_QWORD *)v31 + 16) = v243;
  }
  v41 = v245;
  *((_QWORD *)v31 + 17) = v244;
  *((_QWORD *)v31 + 18) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v31[152] = v246;
  v280 = v31;
  v44 = sub_20C739A90(a1, a2, &v230, (uint64_t)v281, (uint64_t)v279);
  LODWORD(__p) = (_DWORD)v209;
  if (SHIBYTE(v211) < 0)
  {
    sub_20BDDBFAC(&v264, (void *)v210, *((unint64_t *)&v210 + 1));
  }
  else
  {
    v264 = v210;
    v265 = v211;
  }
  v266 = v212;
  v267 = v213;
  if (v213)
  {
    v45 = (unint64_t *)(v213 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  LODWORD(v268) = (_DWORD)v214;
  if (SHIBYTE(v216) < 0)
  {
    sub_20BDDBFAC(&v269, (void *)v215, *((unint64_t *)&v215 + 1));
  }
  else
  {
    v269 = v215;
    v270 = v216;
  }
  v271 = v217;
  v272 = v218;
  if (v218)
  {
    v47 = (unint64_t *)(v218 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v273 = v219;
  if (SHIBYTE(v221) < 0)
  {
    sub_20BDDBFAC(&v274, (void *)v220, *((unint64_t *)&v220 + 1));
  }
  else
  {
    v274 = v220;
    v275 = v221;
  }
  v276 = v222;
  v277 = v223;
  if (v223)
  {
    v49 = (unint64_t *)(v223 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v278 = v224;
  v51 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v51 = off_24C544348;
  v52 = v51 + 16;
  *((_DWORD *)v51 + 2) = (_DWORD)__p;
  if (SHIBYTE(v265) < 0)
  {
    sub_20BDDBFAC(v52, (void *)v264, *((unint64_t *)&v264 + 1));
  }
  else
  {
    *(_OWORD *)v52 = v264;
    *((_QWORD *)v51 + 4) = v265;
  }
  v53 = v267;
  *((_QWORD *)v51 + 5) = v266;
  *((_QWORD *)v51 + 6) = v53;
  if (v53)
  {
    v54 = (unint64_t *)(v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  *((_DWORD *)v51 + 14) = (_DWORD)v268;
  v56 = v51 + 64;
  if (SHIBYTE(v270) < 0)
  {
    sub_20BDDBFAC(v56, (void *)v269, *((unint64_t *)&v269 + 1));
  }
  else
  {
    *(_OWORD *)v56 = v269;
    *((_QWORD *)v51 + 10) = v270;
  }
  v57 = v272;
  *((_QWORD *)v51 + 11) = v271;
  *((_QWORD *)v51 + 12) = v57;
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  *((_DWORD *)v51 + 26) = v273;
  v60 = v51 + 112;
  if (SHIBYTE(v275) < 0)
  {
    sub_20BDDBFAC(v60, (void *)v274, *((unint64_t *)&v274 + 1));
  }
  else
  {
    *(_OWORD *)v60 = v274;
    *((_QWORD *)v51 + 16) = v275;
  }
  v61 = v277;
  *((_QWORD *)v51 + 17) = v276;
  *((_QWORD *)v51 + 18) = v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v51[152] = v278;
  v284 = v51;
  sub_20C73BC1C(v283, (_QWORD *)v44 + 8);
  v65 = v284;
  if (v284 == v283)
  {
    v66 = 4;
    v65 = v283;
  }
  else
  {
    if (!v284)
      goto LABEL_121;
    v66 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v65 + 8 * v66))(v65, v64);
LABEL_121:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v273);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v268);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
  v68 = v280;
  if (v280 == v279)
  {
    v69 = 4;
    v68 = v279;
  }
  else
  {
    if (!v280)
      goto LABEL_126;
    v69 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v68 + 8 * v69))(v68, v67);
LABEL_126:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v241);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v236);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v231);
  v70 = v282;
  if (v282 == v281)
  {
    v71 = 4;
    v70 = v281;
    goto LABEL_130;
  }
  if (v282)
  {
    v71 = 5;
LABEL_130:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v257);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v252);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v247);
LABEL_132:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v219);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v214);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v209);
  v72 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v72)
    v72 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v72 + 464), (uint64_t)&v206);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v208);
  v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v73)
    v73 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C74AD04((uint64_t)&v225, (uint64_t)&v209);
  if (!sub_20C74B5B8((uint64_t)&v209))
    goto LABEL_261;
  LODWORD(v247) = (_DWORD)v209;
  if (SHIBYTE(v211) < 0)
  {
    sub_20BDDBFAC(&v248, (void *)v210, *((unint64_t *)&v210 + 1));
  }
  else
  {
    v248 = v210;
    v249 = v211;
  }
  v250 = v212;
  v251 = v213;
  if (v213)
  {
    v74 = (unint64_t *)(v213 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  LODWORD(v252) = (_DWORD)v214;
  if (SHIBYTE(v216) < 0)
  {
    sub_20BDDBFAC(&v253, (void *)v215, *((unint64_t *)&v215 + 1));
  }
  else
  {
    v253 = v215;
    v254 = v216;
  }
  v255 = v217;
  v256 = v218;
  if (v218)
  {
    v76 = (unint64_t *)(v218 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v257 = v219;
  if (SHIBYTE(v221) < 0)
  {
    sub_20BDDBFAC(&__src, (void *)v220, *((unint64_t *)&v220 + 1));
  }
  else
  {
    __src = v220;
    v259 = v221;
  }
  v260 = v222;
  v261 = v223;
  if (v223)
  {
    v78 = (unint64_t *)(v223 + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v262 = v224;
  v282 = 0;
  v80 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v80 = off_24C544468;
  v81 = v80 + 16;
  *((_DWORD *)v80 + 2) = (_DWORD)v247;
  if (SHIBYTE(v249) < 0)
  {
    sub_20BDDBFAC(v81, (void *)v248, *((unint64_t *)&v248 + 1));
  }
  else
  {
    *(_OWORD *)v81 = v248;
    *((_QWORD *)v80 + 4) = v249;
  }
  v82 = v251;
  *((_QWORD *)v80 + 5) = v250;
  *((_QWORD *)v80 + 6) = v82;
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  *((_DWORD *)v80 + 14) = (_DWORD)v252;
  v85 = v80 + 64;
  if (SHIBYTE(v254) < 0)
  {
    sub_20BDDBFAC(v85, (void *)v253, *((unint64_t *)&v253 + 1));
  }
  else
  {
    *(_OWORD *)v85 = v253;
    *((_QWORD *)v80 + 10) = v254;
  }
  v86 = v256;
  *((_QWORD *)v80 + 11) = v255;
  *((_QWORD *)v80 + 12) = v86;
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  *((_DWORD *)v80 + 26) = v257;
  v89 = v80 + 112;
  if (SHIBYTE(v259) < 0)
  {
    sub_20BDDBFAC(v89, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    *(_OWORD *)v89 = __src;
    *((_QWORD *)v80 + 16) = v259;
  }
  v90 = v261;
  *((_QWORD *)v80 + 17) = v260;
  *((_QWORD *)v80 + 18) = v90;
  if (v90)
  {
    v91 = (unint64_t *)(v90 + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v80[152] = v262;
  v282 = v80;
  LODWORD(v231) = (_DWORD)v209;
  if (SHIBYTE(v211) < 0)
  {
    sub_20BDDBFAC(&v232, (void *)v210, *((unint64_t *)&v210 + 1));
  }
  else
  {
    v232 = v210;
    v233 = v211;
  }
  v234 = v212;
  v235 = v213;
  if (v213)
  {
    v93 = (unint64_t *)(v213 + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  LODWORD(v236) = (_DWORD)v214;
  if (SHIBYTE(v216) < 0)
  {
    sub_20BDDBFAC(&v237, (void *)v215, *((unint64_t *)&v215 + 1));
  }
  else
  {
    v237 = v215;
    v238 = v216;
  }
  v239 = v217;
  v240 = v218;
  if (v218)
  {
    v95 = (unint64_t *)(v218 + 8);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v241 = v219;
  if (SHIBYTE(v221) < 0)
  {
    sub_20BDDBFAC(&v242, (void *)v220, *((unint64_t *)&v220 + 1));
  }
  else
  {
    v242 = v220;
    v243 = v221;
  }
  v244 = v222;
  v245 = v223;
  if (v223)
  {
    v97 = (unint64_t *)(v223 + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v246 = v224;
  v280 = 0;
  v99 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v99 = off_24C5444E8;
  v100 = v99 + 16;
  *((_DWORD *)v99 + 2) = (_DWORD)v231;
  if (SHIBYTE(v233) < 0)
  {
    sub_20BDDBFAC(v100, (void *)v232, *((unint64_t *)&v232 + 1));
  }
  else
  {
    *(_OWORD *)v100 = v232;
    *((_QWORD *)v99 + 4) = v233;
  }
  v101 = v235;
  *((_QWORD *)v99 + 5) = v234;
  *((_QWORD *)v99 + 6) = v101;
  if (v101)
  {
    v102 = (unint64_t *)(v101 + 8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  *((_DWORD *)v99 + 14) = (_DWORD)v236;
  v104 = v99 + 64;
  if (SHIBYTE(v238) < 0)
  {
    sub_20BDDBFAC(v104, (void *)v237, *((unint64_t *)&v237 + 1));
  }
  else
  {
    *(_OWORD *)v104 = v237;
    *((_QWORD *)v99 + 10) = v238;
  }
  v105 = v240;
  *((_QWORD *)v99 + 11) = v239;
  *((_QWORD *)v99 + 12) = v105;
  if (v105)
  {
    v106 = (unint64_t *)(v105 + 8);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  *((_DWORD *)v99 + 26) = v241;
  v108 = v99 + 112;
  if (SHIBYTE(v243) < 0)
  {
    sub_20BDDBFAC(v108, (void *)v242, *((unint64_t *)&v242 + 1));
  }
  else
  {
    *(_OWORD *)v108 = v242;
    *((_QWORD *)v99 + 16) = v243;
  }
  v109 = v245;
  *((_QWORD *)v99 + 17) = v244;
  *((_QWORD *)v99 + 18) = v109;
  if (v109)
  {
    v110 = (unint64_t *)(v109 + 8);
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v99[152] = v246;
  v280 = v99;
  v112 = sub_20C739A90(v205, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v208, (_QWORD *)v73 + 58, (uint64_t)v281, (uint64_t)v279);
  LODWORD(__p) = (_DWORD)v209;
  if (SHIBYTE(v211) < 0)
  {
    sub_20BDDBFAC(&v264, (void *)v210, *((unint64_t *)&v210 + 1));
  }
  else
  {
    v264 = v210;
    v265 = v211;
  }
  v266 = v212;
  v267 = v213;
  if (v213)
  {
    v113 = (unint64_t *)(v213 + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  LODWORD(v268) = (_DWORD)v214;
  if (SHIBYTE(v216) < 0)
  {
    sub_20BDDBFAC(&v269, (void *)v215, *((unint64_t *)&v215 + 1));
  }
  else
  {
    v269 = v215;
    v270 = v216;
  }
  v271 = v217;
  v272 = v218;
  if (v218)
  {
    v115 = (unint64_t *)(v218 + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v273 = v219;
  if (SHIBYTE(v221) < 0)
  {
    sub_20BDDBFAC(&v274, (void *)v220, *((unint64_t *)&v220 + 1));
  }
  else
  {
    v274 = v220;
    v275 = v221;
  }
  v276 = v222;
  v277 = v223;
  if (v223)
  {
    v117 = (unint64_t *)(v223 + 8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  v278 = v224;
  v119 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v119 = off_24C544558;
  v120 = v119 + 16;
  *((_DWORD *)v119 + 2) = (_DWORD)__p;
  if (SHIBYTE(v265) < 0)
  {
    sub_20BDDBFAC(v120, (void *)v264, *((unint64_t *)&v264 + 1));
  }
  else
  {
    *(_OWORD *)v120 = v264;
    *((_QWORD *)v119 + 4) = v265;
  }
  v121 = v267;
  *((_QWORD *)v119 + 5) = v266;
  *((_QWORD *)v119 + 6) = v121;
  if (v121)
  {
    v122 = (unint64_t *)(v121 + 8);
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  *((_DWORD *)v119 + 14) = (_DWORD)v268;
  v124 = v119 + 64;
  if (SHIBYTE(v270) < 0)
  {
    sub_20BDDBFAC(v124, (void *)v269, *((unint64_t *)&v269 + 1));
  }
  else
  {
    *(_OWORD *)v124 = v269;
    *((_QWORD *)v119 + 10) = v270;
  }
  v125 = v272;
  *((_QWORD *)v119 + 11) = v271;
  *((_QWORD *)v119 + 12) = v125;
  if (v125)
  {
    v126 = (unint64_t *)(v125 + 8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  *((_DWORD *)v119 + 26) = v273;
  v128 = v119 + 112;
  if (SHIBYTE(v275) < 0)
  {
    sub_20BDDBFAC(v128, (void *)v274, *((unint64_t *)&v274 + 1));
  }
  else
  {
    *(_OWORD *)v128 = v274;
    *((_QWORD *)v119 + 16) = v275;
  }
  v129 = v277;
  *((_QWORD *)v119 + 17) = v276;
  *((_QWORD *)v119 + 18) = v129;
  if (v129)
  {
    v130 = (unint64_t *)(v129 + 8);
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v119[152] = v278;
  v284 = v119;
  sub_20C73BC1C(v283, (_QWORD *)v112 + 8);
  v132 = v284;
  if (v284 == v283)
  {
    v133 = 4;
    v132 = v283;
  }
  else
  {
    if (!v284)
      goto LABEL_250;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_250:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v273);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v268);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&__p);
  v134 = v280;
  if (v280 == v279)
  {
    v135 = 4;
    v134 = v279;
  }
  else
  {
    if (!v280)
      goto LABEL_255;
    v135 = 5;
  }
  (*(void (**)(void))(*v134 + 8 * v135))();
LABEL_255:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v241);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v236);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v231);
  v136 = v282;
  if (v282 == v281)
  {
    v137 = 4;
    v136 = v281;
    goto LABEL_259;
  }
  if (v282)
  {
    v137 = 5;
LABEL_259:
    (*(void (**)(void))(*v136 + 8 * v137))();
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v257);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v252);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v247);
LABEL_261:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v219);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v214);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v209);
  if ((v208 & 7) != 0)
  {
    v138 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  if (v207 < 0)
    operator delete(v206);
LABEL_389:
  if (v229 < 0)
    operator delete(v228);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v227);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v226);
  return sub_20BFD265C(&v225);
}

void sub_20C746450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  unsigned int *v38;
  unsigned int v39;

  if ((a18 & 7) != 0)
  {
    v38 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if (a17 < 0)
    operator delete(__p);
  sub_20C739A4C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_20C7469A4()
{
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  JUMPOUT(0x20C74699CLL);
}

void sub_20C7469BC()
{
  JUMPOUT(0x20C74699CLL);
}

void sub_20C7469C4()
{
  unsigned __int8 v0;
  unsigned __int8 *v1;
  int v2;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v0 = atomic_load((unsigned __int8 *)&qword_25498CB28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25498CB28))
  {
    v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    if (!v1)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
      v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    }
    v2 = *v1;
    v3 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (v2)
    {
      if (!v3)
        v3 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v4 = (uint64_t *)((char *)v3 + 48);
    }
    else
    {
      if (!v3)
        v3 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v4 = (uint64_t *)((char *)v3 + 32);
    }
    v5 = *v4;
    qword_25498CB20 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        qword_25498CB20 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CB20, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CB28);
  }
}

void sub_20C746AD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CB28);
  _Unwind_Resume(a1);
}

void sub_20C746AEC()
{
  unsigned __int8 v0;
  unsigned __int8 *v1;
  int v2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v3;
  uint64_t *v4;

  v0 = atomic_load((unsigned __int8 *)&qword_25498CB38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25498CB38))
  {
    v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    if (!v1)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
      v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    }
    v2 = *v1;
    v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v2)
    {
      if (!v3)
        v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v4 = (uint64_t *)((char *)v3 + 840);
    }
    else
    {
      if (!v3)
        v3 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v4 = (uint64_t *)((char *)v3 + 608);
    }
    qword_25498CB30 = *v4;
    __cxa_guard_release(&qword_25498CB38);
  }
}

void sub_20C746BB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CB38);
  _Unwind_Resume(a1);
}

uint64_t sub_20C746BCC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v10;
  void *v11;
  unsigned __int8 v13;
  size_t v14;
  std::string::size_type v15;
  int v16;
  std::string *p_p;
  uint64_t v18;
  void **p_s1;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  std::string __p;
  void *v28[2];
  char v29;
  void *__s1;
  size_t __n;
  unsigned __int8 v32;
  std::string v33;
  const void *v34[2];
  char v35;
  __int128 v36;
  unsigned __int8 v37;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v34, "schema");
    sub_20BE01E1C(a1, v34, &v36);
    if (((char)v37 & 0x80000000) == 0)
    {
      v10 = v37 == 15 && (_QWORD)v36 == 0x5F6D6F6547636241 && *(_QWORD *)((char *)&v36 + 7) == 0x31765F446275535FLL;
      goto LABEL_72;
    }
    v11 = (void *)v36;
    v10 = *((_QWORD *)&v36 + 1) == 15
       && *(_QWORD *)v36 == 0x5F6D6F6547636241
       && *(_QWORD *)(v36 + 7) == 0x31765F446275535FLL;
    goto LABEL_71;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v34, "schemaObjTitle");
  sub_20BE01E1C(a1, v34, &v36);
  sub_20C746F2C(&v33);
  v3 = v37;
  if ((v37 & 0x80u) == 0)
    v4 = v37;
  else
    v4 = *((_QWORD *)&v36 + 1);
  size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_39:
    sub_20BDDC0E4(v28, "schema");
    sub_20BE01E1C(a1, (const void **)v28, &__s1);
    sub_20C746F2C(&__p);
    v13 = v32;
    if ((v32 & 0x80u) == 0)
      v14 = v32;
    else
      v14 = __n;
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __p.__r_.__value_.__l.__size_;
    if (v14 != v15)
    {
      v10 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_58;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v32 < 0)
    {
      v10 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v32)
      {
        v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v13 & 0x80) != 0)
            operator delete(__s1);
          if (v29 < 0)
            operator delete(v28[0]);
          if ((*((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_69;
          goto LABEL_68;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        v13 = v32;
        goto LABEL_63;
      }
      v18 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        v21 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v20 = v21;
        v23 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v22 = v23;
        v25 = v18-- != 0;
        v10 = v20 == v22;
      }
      while (v20 == v22 && v25);
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_58;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v33;
  else
    v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v37 & 0x80) != 0)
  {
    if (memcmp((const void *)v36, v7, *((size_t *)&v36 + 1)))
      goto LABEL_39;
  }
  else if (v37)
  {
    v8 = (unsigned __int8 *)&v36;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_59;
    }
    goto LABEL_39;
  }
LABEL_59:
  v10 = 1;
  if (v6 < 0)
LABEL_68:
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_69:
  if (((char)v37 & 0x80000000) == 0)
    goto LABEL_72;
  v11 = (void *)v36;
LABEL_71:
  operator delete(v11);
LABEL_72:
  if (v35 < 0)
    operator delete((void *)v34[0]);
  return v10;
}

void sub_20C746EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C746F2C(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_SubD_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C746FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C747008(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543890;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C747038(void **a1)
{
  *a1 = off_24C543890;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C747068(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543890;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7470A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7470BC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543890;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7470D8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C7470E0(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C747108(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C747124(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5438F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C747160()
{
  return &unk_24C5438F0;
}

uint64_t sub_20C74716C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543910;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74719C(void **a1)
{
  *a1 = off_24C543910;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7471CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543910;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74720C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C747220(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543910;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74723C(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C747244(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C74726C(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C7472BC((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C747274(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5438F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7472B0()
{
  return &unk_24C5438F0;
}

void sub_20C7472BC(Alembic::Abc::v12::IArrayProperty *this@<X0>, double **a2@<X8>)
{
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return;
  }
  else if (*((_BYTE *)this + 31))
  {
    return;
  }
  if (*((_QWORD *)this + 4))
  {
    Alembic::Abc::v12::IArrayProperty::getTimeSampling(this, &v23);
    NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(this))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C74746C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7474C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543980;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7474F8(void **a1)
{
  *a1 = off_24C543980;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C747528(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543980;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C747568(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74757C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543980;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C747598(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C7475A0(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C7475C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  sub_20C747858(a1 + 8, a3, &v9);
  sub_20C74772C(&v9, v11);
  v4 = sub_20C7430F4(a2, (uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_20C747688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C7476E4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5438F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C747720()
{
  return &unk_24C5438F0;
}

void sub_20C74772C(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  _BYTE v24[32];
  uint64_t v25;

  v3 = *a1;
  if (*a1)
  {
    v5 = (uint64_t *)v3[2];
    v6 = v3[3] - (_QWORD)v5;
    if (v6)
    {
      v7 = v6 >> 3;
      if (v7 <= 1)
        v7 = 1;
      v8 = 1;
      do
      {
        v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      v8 = 0;
    }
    v10 = *v3;
    sub_20BF5AB98((uint64_t)v24, v8);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v11, v12);
    v13 = (uint64_t *)(*a1)[2];
    v14 = (*a1)[3] - (_QWORD)v13;
    if (v14)
    {
      v15 = v14 >> 3;
      if (v15 <= 1)
        v15 = 1;
      v16 = 1;
      do
      {
        v17 = v16;
        v19 = *v13++;
        v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        v20 = (_DWORD *)(v10 + 8);
        v21 = v17 * v18;
        v22 = (_DWORD *)(v25 + 8);
        do
        {
          v23 = *v20;
          *((_QWORD *)v22 - 1) = *((_QWORD *)v20 - 1);
          *v22 = v23;
          v22 += 3;
          v20 += 3;
          --v21;
        }
        while (v21);
      }
    }
    a2[1] = off_24C51EC58;
    sub_20BF56B40(a2, (uint64_t)v24);
    sub_20BF5618C((uint64_t)v24);
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_20C74783C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C747858(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20BE1DB98(a1, (uint64_t)a3, a2);
}

void sub_20C747884(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C747898(uint64_t a1, uint64_t a2, int a3)
{
  int *v5;
  uint64_t v6;
  uint64_t PropertyHeader;
  BOOL v8;
  BOOL v9;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;

  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_5;
LABEL_17:
    *(_DWORD *)a1 = 2;
    sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    return a1;
  }
  if (*(_BYTE *)(a2 + 39))
    goto LABEL_17;
LABEL_5:
  if (!*(_QWORD *)(a2 + 40))
    goto LABEL_17;
  v5 = (int *)(a2 + 8);
  v6 = a2 + 56;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader)
    goto LABEL_17;
  v8 = *(_DWORD *)(PropertyHeader + 56) == 10 && *(_BYTE *)(PropertyHeader + 60) == 3;
  v9 = v8 && *(_DWORD *)(PropertyHeader + 24) == 2;
  if (!v9 || !sub_20BE1E5E8(PropertyHeader + 32, a3))
    goto LABEL_17;
  LODWORD(v13) = 0;
  v14 = 0;
  LODWORD(v11) = 0;
  v12 = 0;
  sub_20BE1DFF8(a1, v5, v6, &v13, &v11);
  return a1;
}

uint64_t sub_20C747978(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5439F0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7479A8(void **a1)
{
  *a1 = off_24C5439F0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7479D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C5439F0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C747A18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C747A2C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5439F0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C747A48(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C747A50(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C747A78(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C747A94(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543A50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C747AD0()
{
  return &unk_24C543A50;
}

uint64_t sub_20C747ADC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543A70;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C747B0C(void **a1)
{
  *a1 = off_24C543A70;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C747B3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543A70;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C747B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C747B90(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543A70;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C747BAC(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C747BB4(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C747BDC(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IArrayProperty *v3;
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), &v23);
    NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(v3))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C747D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C747DE8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543A50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C747E24()
{
  return &unk_24C543A50;
}

uint64_t sub_20C747E30(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543AE0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C747E60(void **a1)
{
  *a1 = off_24C543AE0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C747E90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543AE0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C747ED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C747EE4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543AE0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C747F00(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C747F08(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C747F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  _OWORD v37[2];
  uint64_t v38;
  char *v39;
  std::type_info **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  sub_20C7481D8(a1 + 8, a3, &v35);
  if (v35)
  {
    v4 = (uint64_t *)v35[2];
    v5 = v35[3] - (_QWORD)v4;
    if (v5)
    {
      v6 = v5 >> 3;
      if (v6 <= 1)
        v6 = 1;
      v7 = 1;
      do
      {
        v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v9 = *v35;
    sub_20BF5AB98((uint64_t)v37, v7);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v10, v11);
    v12 = (uint64_t *)v35[2];
    v13 = v35[3] - (_QWORD)v12;
    if (v13)
    {
      v14 = v13 >> 3;
      if (v14 <= 1)
        v14 = 1;
      v15 = 1;
      do
      {
        v16 = v15;
        v18 = *v12++;
        v17 = v18;
        v15 *= v18;
        --v14;
      }
      while (v14);
      if (v15)
      {
        v19 = (_DWORD *)(v9 + 8);
        v20 = v16 * v17;
        v21 = (_DWORD *)(v38 + 8);
        do
        {
          v22 = *v19;
          *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
          *v21 = v22;
          v21 += 3;
          v19 += 3;
          --v20;
        }
        while (v20);
      }
    }
    v40 = off_24C51EC58;
    v23 = (char *)operator new(0x30uLL);
    v24 = v37[1];
    *(_OWORD *)v23 = v37[0];
    *((_OWORD *)v23 + 1) = v24;
    v25 = v38;
    *((_QWORD *)v23 + 4) = v38;
    if (v25)
    {
      v26 = (unint64_t *)(v25 - 16);
      if (*((_QWORD *)v23 + 3))
        v26 = (unint64_t *)*((_QWORD *)v23 + 3);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = (unsigned int *)(v23 + 40);
    atomic_store(0, (unsigned int *)v23 + 10);
    v39 = v23;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    sub_20BF5618C((uint64_t)v37);
  }
  else
  {
    v40 = 0;
  }
  v30 = sub_20C7430F4(a2, (uint64_t)&v39);
  sub_20BF4C2D8((uint64_t)&v39);
  v31 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v30;
}

void sub_20C74810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C748190(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543A50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7481CC()
{
  return &unk_24C543A50;
}

void sub_20C7481D8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20BE1DF18(a1, (uint64_t)a3, a2);
}

void sub_20C748204(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748218(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543B50;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C748248(void **a1)
{
  *a1 = off_24C543B50;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C748278(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543B50;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7482B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7482CC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543B50;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7482E8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C7482F0(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C748318(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C748334(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543BB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C748370()
{
  return &unk_24C543BB0;
}

uint64_t sub_20C74837C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543BD0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7483AC(void **a1)
{
  *a1 = off_24C543BD0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7483DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543BD0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74841C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748430(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543BD0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74844C(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C748454(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C74847C(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IArrayProperty *v3;
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), &v23);
    NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(v3))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C74862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C748688(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543BB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7486C4()
{
  return &unk_24C543BB0;
}

uint64_t sub_20C7486D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543C40;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C748700(void **a1)
{
  *a1 = off_24C543C40;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C748730(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543C40;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C748770(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748784(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543C40;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7487A0(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C7487A8(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C7487D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _OWORD v32[2];
  void *__dst;
  char *v34;
  std::type_info **v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_20C748A58(a1 + 8, a3, &v30);
  if (v30)
  {
    v4 = *(uint64_t **)(v30 + 16);
    v5 = *(_QWORD *)(v30 + 24) - (_QWORD)v4;
    if (v5)
    {
      v6 = v5 >> 3;
      if (v6 <= 1)
        v6 = 1;
      v7 = 1;
      do
      {
        v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v9 = *(const void **)v30;
    sub_20BF64CC4((uint64_t)v32, v7);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v10, v11);
    v12 = *(uint64_t **)(v30 + 16);
    v13 = *(_QWORD *)(v30 + 24) - (_QWORD)v12;
    if (v13)
    {
      v14 = v13 >> 3;
      v15 = v14 <= 1 ? 1 : v14;
      v16 = 1;
      do
      {
        v17 = *v12++;
        v16 *= v17;
        --v15;
      }
      while (v15);
      if (v16)
        memmove(__dst, v9, 4 * v16);
    }
    v35 = &off_24C51F5B0;
    v18 = (char *)operator new(0x30uLL);
    v19 = v32[1];
    *(_OWORD *)v18 = v32[0];
    *((_OWORD *)v18 + 1) = v19;
    v20 = (char *)__dst;
    *((_QWORD *)v18 + 4) = __dst;
    if (v20)
    {
      v21 = (unint64_t *)(v20 - 16);
      if (*((_QWORD *)v18 + 3))
        v21 = (unint64_t *)*((_QWORD *)v18 + 3);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (unsigned int *)(v18 + 40);
    atomic_store(0, (unsigned int *)v18 + 10);
    v34 = v18;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    sub_20BF5618C((uint64_t)v32);
  }
  else
  {
    v35 = 0;
  }
  v25 = sub_20C7430F4(a2, (uint64_t)&v34);
  sub_20BF4C2D8((uint64_t)&v34);
  v26 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v25;
}

void sub_20C74898C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C748A10(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543BB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C748A4C()
{
  return &unk_24C543BB0;
}

void sub_20C748A58(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20BE1DC78(a1, (uint64_t)a3, a2);
}

void sub_20C748A84(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748A98(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543CB0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C748AC8(void **a1)
{
  *a1 = off_24C543CB0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C748AF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543CB0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C748B38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748B4C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543CB0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C748B68(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C748B70(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C748B98(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C748BB4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C748BF0()
{
  return &unk_24C543D10;
}

uint64_t sub_20C748BFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543D38;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C748C2C(void **a1)
{
  *a1 = off_24C543D38;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C748C5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543D38;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C748C9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748CB0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543D38;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C748CCC(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C748CD4(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C748CFC(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C743514((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), a2);
}

uint64_t sub_20C748D04(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C748D40()
{
  return &unk_24C543D10;
}

uint64_t sub_20C748D4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543DA8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C748D7C(void **a1)
{
  *a1 = off_24C543DA8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C748DAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543DA8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C748DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C748E00(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543DA8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C748E1C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C748E24(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C748E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  void *__p[2];
  char v31;
  __int128 v32;
  unsigned __int8 v33;

  v5 = (int *)(a1 + 8);
  sub_20BE07440(a1 + 8, a3, &v32);
  if ((char)v33 < 0)
  {
    if (*((uint64_t *)&v32 + 1) <= 7)
    {
      if (*((_QWORD *)&v32 + 1))
      {
        if (*((_QWORD *)&v32 + 1) == 4)
        {
          v6 = *(_DWORD *)v32;
LABEL_10:
          if (v6 == 1886351212)
          {
            v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v7)
              v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            v8 = *((_QWORD *)v7 + 69);
            __p[0] = (void *)v8;
            if ((v8 & 7) != 0)
            {
              v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
              do
                v10 = __ldxr(v9);
              while (__stxr(v10 + 2, v9));
              if ((v10 & 1) == 0)
                __p[0] = v9;
            }
            goto LABEL_54;
          }
        }
LABEL_45:
        sub_20BDDC0E4(__p, "catmull-clark");
        sub_20C73D778(v5, a3, 1, (uint64_t *)&v32, (uint64_t *)__p);
        if (v31 < 0)
          operator delete(__p[0]);
        v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v18)
          v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        v19 = *((_QWORD *)v18 + 12);
        __p[0] = (void *)v19;
        if ((v19 & 7) != 0)
        {
          v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 2, v20));
          if ((v21 & 1) == 0)
            __p[0] = v20;
        }
        goto LABEL_54;
      }
      goto LABEL_34;
    }
    if (*((_QWORD *)&v32 + 1) != 8)
    {
      if (*((_QWORD *)&v32 + 1) != 13)
        goto LABEL_45;
      if (*(_QWORD *)v32 != 0x2D6C6C756D746163 || *(_QWORD *)(v32 + 5) != 0x6B72616C632D6C6CLL)
        goto LABEL_45;
LABEL_34:
      v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v13)
        v13 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v14 = *((_QWORD *)v13 + 12);
      __p[0] = (void *)v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          __p[0] = v15;
      }
      goto LABEL_54;
    }
    v17 = (__int128 *)v32;
  }
  else
  {
    if (v33 <= 7u)
    {
      if (v33)
      {
        if (v33 == 4)
        {
          v6 = v32;
          goto LABEL_10;
        }
        goto LABEL_45;
      }
      goto LABEL_34;
    }
    if (v33 != 8)
    {
      if (v33 != 13)
        goto LABEL_45;
      if ((_QWORD)v32 != 0x2D6C6C756D746163 || *(_QWORD *)((char *)&v32 + 5) != 0x6B72616C632D6C6CLL)
        goto LABEL_45;
      goto LABEL_34;
    }
    v17 = &v32;
  }
  if (*(_QWORD *)v17 != 0x7261656E696C6962)
    goto LABEL_45;
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = *((_QWORD *)v26 + 6);
  __p[0] = (void *)v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      __p[0] = v28;
  }
LABEL_54:
  v22 = sub_20C73D728(a2, (uint64_t)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v23 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if ((char)v33 < 0)
    operator delete((void *)v32);
  return v22;
}

void sub_20C74917C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C749254(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C749290()
{
  return &unk_24C543D10;
}

uint64_t sub_20C74929C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543E18;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7492CC(void **a1)
{
  *a1 = off_24C543E18;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7492FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543E18;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74933C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C749350(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543E18;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74936C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C749374(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C74939C(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C7493B8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543E88))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7493F4()
{
  return &unk_24C543E88;
}

uint64_t sub_20C749400(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543EB0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C749430(void **a1)
{
  *a1 = off_24C543EB0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C749460(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543EB0;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7494A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7494B4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543EB0;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7494D0(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C7494D8(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C749500(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C749550((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), a2);
}

uint64_t sub_20C749508(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543E88))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C749544()
{
  return &unk_24C543E88;
}

void sub_20C749550(Alembic::Abc::v12::IScalarProperty *this@<X0>, double **a2@<X8>)
{
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return;
  }
  else if (*((_BYTE *)this + 31))
  {
    return;
  }
  if (*((_QWORD *)this + 4))
  {
    Alembic::Abc::v12::IScalarProperty::getTimeSampling(this, &v23);
    NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(this))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C749700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74975C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543F20;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74978C(void **a1)
{
  *a1 = off_24C543F20;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7497BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543F20;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7497FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C749810(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543F20;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74982C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C749834(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C74985C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  void *__p[2];
  char v23;
  int v24;
  void *v25;
  char v26;
  void *v27[2];
  char v28;

  v5 = (int *)(a1 + 8);
  LODWORD(v27[0]) = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)v27, a3, 4);
  if (LODWORD(v27[0]))
  {
    if (LODWORD(v27[0]) == 2)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v11)
        v11 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v12 = *((_QWORD *)v11 + 33);
      v27[0] = (void *)v12;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v27[0] = v13;
      }
      goto LABEL_11;
    }
    if (LODWORD(v27[0]) == 1)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v6)
        v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v7 = *((_QWORD *)v6 + 32);
      v27[0] = (void *)v7;
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          v27[0] = v8;
      }
LABEL_11:
      result = sub_20C73D728(a2, (uint64_t)v27);
      goto LABEL_37;
    }
    LODWORD(__p[0]) = 0;
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)v5, (uint64_t)__p, a3, 4);
    v24 = (int)__p[0];
    sub_20BFEC9D8();
    if (v26 >= 0)
      v15 = (char *)&v25;
    else
      v15 = (char *)v25;
    sub_20BDDC0E4(v27, v15);
    sub_20BDDC0E4(__p, "0");
    sub_20C73D778(v5, a3, 2, (uint64_t *)v27, (uint64_t *)__p);
    if (v23 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    if (v26 < 0)
      operator delete(v25);
  }
  v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16)
    v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v17 = *((_QWORD *)v16 + 85);
  v27[0] = (void *)v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v27[0] = v18;
  }
  result = sub_20C73D728(a2, (uint64_t)v27);
LABEL_37:
  if (((uint64_t)v27[0] & 7) != 0)
  {
    v20 = (unsigned int *)((unint64_t)v27[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  return result;
}

void sub_20C749A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C749B50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543E88))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C749B8C()
{
  return &unk_24C543E88;
}

uint64_t sub_20C749B98(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t PropertyHeader;
  BOOL v6;
  BOOL v7;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;

  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_5;
LABEL_17:
    *(_DWORD *)a1 = 2;
    sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    return a1;
  }
  if (*(_BYTE *)(a2 + 39))
    goto LABEL_17;
LABEL_5:
  if (!*(_QWORD *)(a2 + 40))
    goto LABEL_17;
  v3 = (int *)(a2 + 8);
  v4 = a2 + 56;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader)
    goto LABEL_17;
  v6 = *(_DWORD *)(PropertyHeader + 56) == 6 && *(_BYTE *)(PropertyHeader + 60) == 1;
  v7 = v6 && *(_DWORD *)(PropertyHeader + 24) == 1;
  if (!v7 || !sub_20BE43A00(PropertyHeader + 32, 0))
    goto LABEL_17;
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20BE43410(a1, v3, v4, &v11, &v9);
  return a1;
}

uint64_t sub_20C749C74(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C543F90;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C749CA4(void **a1)
{
  *a1 = off_24C543F90;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C749CD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C543F90;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C749D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C749D28(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C543F90;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C749D44(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C749D4C(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C749D74(uint64_t a1)
{
  return sub_20BE18848(a1 + 8) + 32;
}

uint64_t sub_20C749D90(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543FF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C749DCC()
{
  return &unk_24C543FF0;
}

uint64_t sub_20C749DD8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544018;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C749E08(void **a1)
{
  *a1 = off_24C544018;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C749E38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544018;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C749E78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C749E8C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544018;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C749EA8(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C749EB0(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C749ED8(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C749550((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), a2);
}

uint64_t sub_20C749EE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543FF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C749F1C()
{
  return &unk_24C543FF0;
}

uint64_t sub_20C749F28(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544088;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C749F58(void **a1)
{
  *a1 = off_24C544088;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C749F88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544088;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C749FC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C749FDC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544088;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C749FF8(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 8));
}

void sub_20C74A000(void **a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C74A028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  void *__p[2];
  char v27;
  int v28;
  void *v29;
  char v30;
  void *v31[2];
  char v32;

  v5 = (int *)(a1 + 8);
  LODWORD(v31[0]) = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)v31, a3, 4);
  switch(LODWORD(v31[0]))
  {
    case 0:
      goto LABEL_19;
    case 1:
      v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v6)
        v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v7 = *((_QWORD *)v6 + 21);
      v31[0] = (void *)v7;
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          v31[0] = v8;
      }
      goto LABEL_42;
    case 2:
      v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v16)
        v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v17 = *((_QWORD *)v16 + 85);
      v31[0] = (void *)v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          v31[0] = v18;
      }
      goto LABEL_42;
    case 3:
      v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v20)
        v20 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v21 = *((_QWORD *)v20 + 7);
      v31[0] = (void *)v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          v31[0] = v22;
      }
LABEL_42:
      result = sub_20C73D728(a2, (uint64_t)v31);
      break;
    default:
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::IScalarProperty::get((uint64_t)v5, (uint64_t)__p, a3, 4);
      v28 = (int)__p[0];
      sub_20BFEC9D8();
      if (v30 >= 0)
        v10 = (char *)&v29;
      else
        v10 = (char *)v29;
      sub_20BDDC0E4(v31, v10);
      sub_20BDDC0E4(__p, "0");
      sub_20C73D778(v5, a3, 3, (uint64_t *)v31, (uint64_t *)__p);
      if (v27 < 0)
        operator delete(__p[0]);
      if (v32 < 0)
        operator delete(v31[0]);
      if (v30 < 0)
        operator delete(v29);
LABEL_19:
      v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v11)
        v11 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v12 = *((_QWORD *)v11 + 1);
      v31[0] = (void *)v12;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v31[0] = v13;
      }
      result = sub_20C73D728(a2, (uint64_t)v31);
      break;
  }
  if (((uint64_t)v31[0] & 7) != 0)
  {
    v24 = (unsigned int *)((unint64_t)v31[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  return result;
}

void sub_20C74A2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74A3AC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C543FF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74A3E8()
{
  return &unk_24C543FF0;
}

uint64_t sub_20C74A3F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5440F8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74A424(void **a1)
{
  *a1 = off_24C5440F8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74A454(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C5440F8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74A494(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74A4A8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5440F8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74A4C4(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C74A4CC(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C74A4F4(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C74A510(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544158))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74A54C()
{
  return &unk_24C544158;
}

uint64_t sub_20C74A558(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544178;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74A588(void **a1)
{
  *a1 = off_24C544178;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74A5B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544178;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74A5F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74A60C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544178;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74A628(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C74A630(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C74A658(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C74A6A8((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C74A660(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544158))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74A69C()
{
  return &unk_24C544158;
}

void sub_20C74A6A8(Alembic::Abc::v12::IArrayProperty *this@<X0>, double **a2@<X8>)
{
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return;
  }
  else if (*((_BYTE *)this + 31))
  {
    return;
  }
  if (*((_QWORD *)this + 4))
  {
    Alembic::Abc::v12::IArrayProperty::getTimeSampling(this, &v23);
    NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(this))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C74A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C74A884(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5441E8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74A8B4(void **a1)
{
  *a1 = off_24C5441E8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74A8E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C5441E8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74A924(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74A938(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5441E8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74A954(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C74A95C(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C74A984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  sub_20C74ABF4(a1 + 8, a3, &v9);
  sub_20C74AAE8(&v9, v11);
  v4 = sub_20C7430F4(a2, (uint64_t)v11);
  sub_20BF4C2D8((uint64_t)v11);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_20C74AA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C74AAA0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544158))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74AADC()
{
  return &unk_24C544158;
}

void sub_20C74AAE8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];
  void *__dst;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(uint64_t **)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 24) - (_QWORD)v5;
    if (v6)
    {
      v7 = v6 >> 3;
      if (v7 <= 1)
        v7 = 1;
      v8 = 1;
      do
      {
        v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      v8 = 0;
    }
    v10 = *(const void **)v3;
    sub_20BF56024((uint64_t)v19, v8);
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19, v11, v12);
    v13 = *(uint64_t **)(*a1 + 16);
    v14 = *(_QWORD *)(*a1 + 24) - (_QWORD)v13;
    if (v14)
    {
      v15 = v14 >> 3;
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      v17 = 1;
      do
      {
        v18 = *v13++;
        v17 *= v18;
        --v16;
      }
      while (v16);
      if (v17)
        memmove(__dst, v10, 4 * v17);
    }
    a2[1] = &off_24C51E808;
    sub_20BF56B40(a2, (uint64_t)v19);
    sub_20BF5618C((uint64_t)v19);
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_20C74ABD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C74ABF4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20BE1DD58(a1, (uint64_t)a3, a2);
}

void sub_20C74AC20(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C74AC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t PropertyHeader;
  BOOL v6;
  _QWORD *result;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;

  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    goto LABEL_14;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (int *)(a1 + 8);
    v4 = a1 + 56;
    PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
    if (PropertyHeader)
    {
      v6 = *(_DWORD *)(PropertyHeader + 56) == 10 && *(_DWORD *)(PropertyHeader + 24) == 2;
      if (v6 && sub_20BE1F350(PropertyHeader + 32, 0))
      {
        LODWORD(v10) = 0;
        v11 = 0;
        LODWORD(v8) = 0;
        v9 = 0;
        return (_QWORD *)sub_20BE1ED68(a2, v3, v4, &v10, &v8);
      }
    }
  }
LABEL_14:
  *(_DWORD *)a2 = 2;
  result = sub_20BDDC0E4((_QWORD *)(a2 + 8), "");
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_20C74AD04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t PropertyHeader;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 39))
      goto LABEL_5;
LABEL_10:
    sub_20C74B51C(a2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_10;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
  if (!PropertyHeader || !sub_20BE14E80(PropertyHeader, 0))
    goto LABEL_10;
  v12 = *(_DWORD *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_20BDDBFAC(&v13, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    v13 = *(_OWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  LODWORD(v10) = 0;
  v11 = 0;
  LODWORD(v8) = 0;
  v9 = 0;
  sub_20C74AE28(a2, (uint64_t)&v12, a1 + 56, &v10, &v8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v12);
}

void sub_20C74AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74AE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  std::string *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v25;
  _QWORD *exception;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t *v41;
  uint64_t **v42;
  void *v43[2];
  char v44;
  void *__p;
  int v46;
  char v47;
  std::string *v48;
  std::string v49;
  uint64_t v50[37];
  int v51;
  uint64_t v52[4];
  std::__shared_weak_count *v53;
  int v54;
  uint64_t v55;

  *(_DWORD *)a1 = 2;
  v10 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v40 = (int *)(a1 + 96);
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = *(_DWORD *)a2;
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
  v48 = &v49;
  v50[35] = 0;
  v50[36] = 0;
  v51 = v11;
  v41 = sub_20BDEBF8C(v52, (const void ***)&v48);
  v52[3] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 1;
  sub_20BDE9D48((uint64_t)&v48, v49.__r_.__value_.__l.__data_);
  v42 = a4;
  sub_20BE02E30(a4, (uint64_t)&v51);
  sub_20BE02E30(a5, (uint64_t)&v51);
  *(_DWORD *)a1 = v51;
  v50[33] = a1;
  v50[34] = (uint64_t)"ITypedGeomParam::ITypedGeomParam()";
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(std::__shared_weak_count **)(a2 + 40);
  v50[31] = v12;
  v50[32] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v48);
    v25 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v25, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v27, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  if (!v16)
  {
    sub_20BDDBD68((uint64_t)&v48);
    v28 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    v29 = *(char *)(a3 + 23);
    if (v29 >= 0)
      v30 = a3;
    else
      v30 = *(_QWORD *)a3;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a3 + 23);
    else
      v31 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v28, v30, v31);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    v32 = __cxa_allocate_exception(0x20uLL);
    v33 = sub_20BDDC09C(v32, (uint64_t)&__p);
    __cxa_throw(v33, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v16 + 24);
  if (v17 == 2)
  {
    sub_20BE202F8((uint64_t)&v48, (int *)a2, a3, v42, a5);
    *(_DWORD *)a1 = (_DWORD)v48;
    std::string::operator=(v10, &v49);
    sub_20BDE881C((_QWORD *)(a1 + 32), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    v18 = 0;
  }
  else
  {
    if (v17)
    {
      sub_20BDDBD68((uint64_t)&v48);
      v34 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      v35 = *(char *)(a3 + 23);
      if (v35 >= 0)
        v36 = a3;
      else
        v36 = *(_QWORD *)a3;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      sub_20BDDC1C8(v34, v36, v37);
      std::stringbuf::str();
      sub_20BDDBF20(&__p, (__int128 *)v43);
      if (v44 < 0)
        operator delete(v43[0]);
      v38 = __cxa_allocate_exception(0x20uLL);
      v39 = sub_20BDDC09C(v38, (uint64_t)&__p);
      __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    LODWORD(__p) = 1;
    v46 = v51;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v48, a2, a3, &__p);
    *v40 = (int)v48;
    std::string::operator=((std::string *)(a1 + 104), &v49);
    sub_20BDE881C((_QWORD *)(a1 + 128), v50);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v48);
    sub_20BDDC0E4(&__p, ".indices");
    sub_20BE1FC6C((uint64_t)&v48, v40, (uint64_t)&__p, v42, a5);
    *(_DWORD *)(a1 + 48) = (_DWORD)v48;
    std::string::operator=((std::string *)(a1 + 56), &v49);
    sub_20BDE881C((_QWORD *)(a1 + 80), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    if (v47 < 0)
      operator delete(__p);
    sub_20BDDC0E4(&__p, ".vals");
    sub_20BE202F8((uint64_t)&v48, v40, (uint64_t)&__p, v42, a5);
    *(_DWORD *)a1 = (_DWORD)v48;
    std::string::operator=(v10, &v49);
    sub_20BDE881C((_QWORD *)(a1 + 32), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    if (v47 < 0)
      operator delete(__p);
    v18 = 1;
  }
  *(_BYTE *)(a1 + 144) = v18;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v21 = v53;
  if (v53)
  {
    v22 = (unint64_t *)&v53->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v41, (_QWORD *)v52[1]);
  return a1;
}

void sub_20C74B378(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 200));
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 184, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C74B160);
}

void sub_20C74B490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, Alembic::Abc::v12::ICompoundProperty *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  uint64_t v24;

  sub_20BE02EB0(v24 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a12);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a13);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74B51C(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void sub_20C74B594(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20C74B5B8(uint64_t a1)
{
  uint64_t (*v2)();

  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 31))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      goto LABEL_11;
    return 1;
  }
  if (*(_BYTE *)(a1 + 127))
    return 1;
LABEL_11:
  if (!*(_QWORD *)(a1 + 128))
    return 1;
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(_QWORD *)(a1 + 64))
      goto LABEL_14;
LABEL_17:
    if (*(_QWORD *)(a1 + 80))
      v2 = nullsub_5;
    else
      v2 = 0;
    return v2 != 0;
  }
  if (!*(_BYTE *)(a1 + 79))
    goto LABEL_17;
LABEL_14:
  v2 = 0;
  return v2 != 0;
}

uint64_t sub_20C74B654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v14 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

void sub_20C74B784(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74B7A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544258;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74B7EC(void **a1)
{
  *a1 = off_24C544258;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74B830(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544258;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74B870(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74B884(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544258;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74B8A0(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74B8D4(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74B910(uint64_t a1)
{
  return sub_20C74B960(a1 + 8);
}

uint64_t sub_20C74B918(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5442B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74B954()
{
  return &unk_24C5442B8;
}

uint64_t sub_20C74B960(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 144))
    v1 = sub_20BE75ADC(a1 + 96);
  else
    v1 = sub_20BE6E6E4(a1);
  return v1 + 32;
}

uint64_t sub_20C74B98C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5442D8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74B9D0(void **a1)
{
  *a1 = off_24C5442D8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74BA14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C5442D8;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74BA54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74BA68(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5442D8;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74BA84(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74BAB8(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

void sub_20C74BAF4(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C74BB44((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C74BAFC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5442B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74BB38()
{
  return &unk_24C5442B8;
}

void sub_20C74BB44(Alembic::Abc::v12::IArrayProperty *a1@<X0>, double **a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_20C74B5B8((uint64_t)a1))
  {
    sub_20C74BD08((uint64_t)a1, &v23);
    v4 = sub_20C74BDA4(a1);
    if (sub_20C74BEA8(a1))
      v5 = v4 != 0;
    else
      v5 = v4;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C74BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C74BD08@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v2)();
  uint64_t (*v3)();

  if (*(char *)(result + 31) < 0)
  {
    if (*(_QWORD *)(result + 16))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(result + 31))
  {
LABEL_3:
    v2 = 0;
    goto LABEL_8;
  }
  if (*(_QWORD *)(result + 32))
    v2 = nullsub_5;
  else
    v2 = 0;
LABEL_8:
  if (v2)
    return Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)result, a2);
  if (*(char *)(result + 79) < 0)
  {
    if (*(_QWORD *)(result + 64))
      goto LABEL_12;
  }
  else if (*(_BYTE *)(result + 79))
  {
LABEL_12:
    v3 = 0;
    goto LABEL_17;
  }
  if (*(_QWORD *)(result + 80))
    v3 = nullsub_5;
  else
    v3 = 0;
LABEL_17:
  if (v3)
  {
    result += 48;
    return Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)result, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

unint64_t sub_20C74BDA4(Alembic::Abc::v12::IArrayProperty *this)
{
  unint64_t NumSamples;
  unint64_t result;
  uint64_t (*v4)();

  if (*((_BYTE *)this + 144))
  {
    NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)((char *)this + 48));
    result = Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
    if (NumSamples > result)
      return NumSamples;
    return result;
  }
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      goto LABEL_7;
LABEL_9:
    if (*((_QWORD *)this + 4))
      v4 = nullsub_5;
    else
      v4 = 0;
    goto LABEL_12;
  }
  if (!*((_BYTE *)this + 31))
    goto LABEL_9;
LABEL_7:
  v4 = 0;
LABEL_12:
  if (v4)
    return Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
  else
    return 0;
}

void sub_20C74BE88(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C74BEA8(Alembic::Abc::v12::IArrayProperty *this)
{
  Alembic::Abc::v12::IArrayProperty *v1;
  uint64_t result;

  v1 = this;
  if (*((_BYTE *)this + 144))
  {
    result = Alembic::Abc::v12::IArrayProperty::isConstant(this);
    if (!(_DWORD)result)
      return result;
    v1 = (Alembic::Abc::v12::IArrayProperty *)((char *)v1 + 48);
  }
  return Alembic::Abc::v12::IArrayProperty::isConstant(v1);
}

void sub_20C74BEF8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570((uint64_t)&a9, (uint64_t)v10);
  else
    sub_20BE02504((uint64_t)&a9, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C74BEE8);
}

void sub_20C74BF30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C74BF50(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544348;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74BF94(void **a1)
{
  *a1 = off_24C544348;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74BFD8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544348;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74C018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74C02C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544348;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74C048(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74C07C(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74C0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 8;
  v20 = 0u;
  v21 = 0u;
  if (*(_BYTE *)(a1 + 152))
    sub_20C74C2D0(v5, (uint64_t)&v20, a3);
  else
    sub_20C74C474(v5, (uint64_t)&v20, a3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  v19 = v20;
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20C74C710((uint64_t *)&v19, v22);
  v9 = sub_20C7430F4(a2, (uint64_t)v22);
  sub_20BF4C2D8((uint64_t)v22);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v9;
}

void sub_20C74C220(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  sub_20BF4C2D8(v2 - 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20C96BEA8();
  _Unwind_Resume(a1);
}

uint64_t sub_20C74C288(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5442B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74C2C4()
{
  return &unk_24C5442B8;
}

uint64_t sub_20C74C2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t i;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  void *__p;
  _BYTE *v22;

  sub_20C74C828(a1, a2, a3);
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(_QWORD *)(a1 + 64))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 79))
  {
LABEL_3:
    v6 = 0;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 80))
    v6 = nullsub_5;
  else
    v6 = 0;
LABEL_8:
  if (v6)
  {
    sub_20BE66B08(a1 + 48, a2 + 16, a3);
  }
  else
  {
    v7 = *(uint64_t **)(*(_QWORD *)a2 + 16);
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 24) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      if (v9 <= 1)
        v10 = 1;
      else
        v10 = v9;
      v11 = 1;
      do
      {
        v12 = *v7++;
        v11 *= (_DWORD)v12;
        --v10;
      }
      while (v10);
      v13 = v11;
      v14 = operator new[](4 * v11);
      v15 = v14;
      if (v13)
      {
        for (i = 0; i != v13; ++i)
          *((_DWORD *)v14 + i) = i;
      }
    }
    else
    {
      v15 = operator new[](0);
      v13 = 0;
    }
    v20 = v13;
    sub_20BDE8894(&__p, 1uLL, &v20);
    v17 = operator new(0x28uLL);
    *v17 = v15;
    v17[1] = 0x100000005;
    v17[3] = 0;
    v17[4] = 0;
    v17[2] = 0;
    sub_20BDE1364(v17 + 2, __p, (uint64_t)v22, (v22 - (_BYTE *)__p) >> 3);
    sub_20C74C908((_QWORD *)(a2 + 16), (uint64_t)v17);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
  }
  v18 = sub_20BE6E6E4(a1);
  result = sub_20BE14C08(v18 + 32);
  *(_DWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 144);
  return result;
}

void sub_20C74C448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C74C474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void *__p;
  _BYTE *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;

  v6 = sub_20BE6E6E4(a1);
  *(_DWORD *)(a2 + 32) = sub_20BE14C08(v6 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 144);
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(_QWORD *)(a1 + 64))
      goto LABEL_5;
LABEL_34:
    sub_20C74C828(a1, a2, a3);
    return;
  }
  if (*(_BYTE *)(a1 + 79))
    goto LABEL_34;
LABEL_5:
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_34;
  sub_20C74CA54(a1 + 48, a3, &v37);
  if (v37)
  {
    v7 = (uint64_t *)v37[2];
    v8 = v37[3] - (_QWORD)v7;
    if (!v8)
      goto LABEL_35;
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    v10 = 1;
    do
    {
      v11 = *v7++;
      v10 *= v11;
      --v9;
    }
    while (v9);
    if (v10)
    {
      sub_20C74CA94(a1, a3, &v35);
      if (v10 >> 61)
        v12 = -1;
      else
        v12 = 8 * v10;
      v13 = operator new[](v12);
      v14 = v13;
      v15 = v35;
      v16 = (uint64_t *)v35[2];
      v17 = v35[3] - (_QWORD)v16;
      if (v17)
      {
        v18 = v17 >> 3;
        if (v18 <= 1)
          v19 = 1;
        else
          v19 = v18;
        v17 = 1;
        do
        {
          v20 = *v16++;
          v17 *= v20;
          --v19;
        }
        while (v19);
      }
      v21 = 0;
      v22 = *v37;
      if (v10 <= 1)
        v23 = 1;
      else
        v23 = v10;
      do
      {
        v24 = *(unsigned int *)(v22 + 4 * v21);
        if (v17 <= v24)
          break;
        v13[v21++] = *(_QWORD *)(*v15 + 8 * v24);
      }
      while (v23 != v21);
      v32 = v10;
      sub_20BDE8894(&__p, 1uLL, &v32);
      v25 = operator new(0x28uLL);
      *v25 = v14;
      v25[1] = 0x20000000ALL;
      v25[3] = 0;
      v25[4] = 0;
      v25[2] = 0;
      sub_20BDE1364(v25 + 2, __p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 3);
      sub_20C74CAD4((_QWORD *)a2, (uint64_t)v25);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      v26 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_35:
      sub_20C74C828(a1, a2, a3);
    }
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20C74C6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  _Unwind_Resume(a1);
}

void sub_20C74C710(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];
  _QWORD *v24;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(uint64_t **)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 24) - (_QWORD)v5;
    if (v6)
    {
      v7 = v6 >> 3;
      if (v7 <= 1)
        v7 = 1;
      v8 = 1;
      do
      {
        v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      v8 = 0;
    }
    v10 = *(uint64_t **)v3;
    sub_20BF585AC((uint64_t)v23, v8);
    sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v11, v12);
    v13 = *(uint64_t **)(*a1 + 16);
    v14 = *(_QWORD *)(*a1 + 24) - (_QWORD)v13;
    if (v14)
    {
      v15 = v24;
      v16 = v14 >> 3;
      if (v16 <= 1)
        v16 = 1;
      v17 = 1;
      do
      {
        v18 = v17;
        v20 = *v13++;
        v19 = v20;
        v17 *= v20;
        --v16;
      }
      while (v16);
      if (v17)
      {
        v21 = v18 * v19;
        do
        {
          v22 = *v10++;
          *v15++ = v22;
          --v21;
        }
        while (v21);
      }
    }
    a2[1] = off_24C51EA30;
    sub_20BF56B40(a2, (uint64_t)v23);
    sub_20BF5618C((uint64_t)v23);
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_20C74C80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C74C828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20C74C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C74C908(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C74C978(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20C74C978(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C5443B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C74C9C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;

  __cxa_begin_catch(a1);
  sub_20BDE1454((int)&a13, v13);
  __cxa_rethrow();
}

void sub_20C74C9E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C74C9F8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C74CA0C(uint64_t a1)
{
  sub_20BDE1454(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C74CA14(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C516C28))
    return a1 + 24;
  else
    return 0;
}

void sub_20C74CA54(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20BE66B08(a1, (uint64_t)a3, a2);
}

void sub_20C74CA80(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void sub_20C74CA94(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20C74C828(a1, (uint64_t)a3, a2);
}

void sub_20C74CAC0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void sub_20C74CAD4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C74CB44(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20C74CB44(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C544408;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C74CB94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;

  __cxa_begin_catch(a1);
  sub_20BDE1454((int)&a13, v13);
  __cxa_rethrow();
}

void sub_20C74CBAC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C74CBC4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C74CBD8(uint64_t a1)
{
  sub_20BDE1454(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C74CBE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544448))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C74CC20(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544468;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74CC64(void **a1)
{
  *a1 = off_24C544468;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74CCA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544468;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74CCE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74CCFC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544468;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74CD18(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74CD4C(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74CD88(uint64_t a1)
{
  return sub_20C74B960(a1 + 8);
}

uint64_t sub_20C74CD90(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5444C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74CDCC()
{
  return &unk_24C5444C8;
}

uint64_t sub_20C74CDD8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5444E8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74CE1C(void **a1)
{
  *a1 = off_24C5444E8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74CE60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C5444E8;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74CEA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74CEB4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5444E8;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74CED0(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74CF04(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

void sub_20C74CF40(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C74BB44((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C74CF48(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5444C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74CF84()
{
  return &unk_24C5444C8;
}

uint64_t sub_20C74CF90(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544558;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74CFD4(void **a1)
{
  *a1 = off_24C544558;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74D018(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544558;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74D058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74D06C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544558;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74D088(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74D0BC(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74D0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  char *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  _DWORD *v45;
  char *v46;
  std::type_info **v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 152))
    return 0;
  v42 = 0u;
  v43 = 0u;
  sub_20C74C2D0(a1 + 8, (uint64_t)&v42, a3);
  v4 = v43;
  if (*((_QWORD *)&v43 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if ((_QWORD)v4)
  {
    v7 = *(uint64_t **)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      if (v9 <= 1)
        v9 = 1;
      v10 = 1;
      do
      {
        v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = *(int **)v4;
    sub_20BF64CC4((uint64_t)v44, v10);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v44, v14, v15);
    v16 = v45;
    v17 = *(uint64_t **)(v4 + 16);
    v18 = *(_QWORD *)(v4 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      if (v19 <= 1)
        v19 = 1;
      v20 = 1;
      do
      {
        v21 = v20;
        v23 = *v17++;
        v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        v24 = v21 * v22;
        v25 = v45;
        do
        {
          v26 = *v13++;
          *v25++ = v26;
          --v24;
        }
        while (v24);
      }
    }
    v47 = &off_24C51F5B0;
    v27 = (char *)operator new(0x30uLL);
    v28 = v44[1];
    *(_OWORD *)v27 = v44[0];
    *((_OWORD *)v27 + 1) = v28;
    *((_QWORD *)v27 + 4) = v16;
    if (v16)
    {
      v29 = (unint64_t *)*((_QWORD *)v27 + 3);
      if (!v29)
        v29 = (unint64_t *)(v16 - 4);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = (unsigned int *)(v27 + 40);
    atomic_store(0, (unsigned int *)v27 + 10);
    v46 = v27;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    sub_20BF5618C((uint64_t)v44);
  }
  else
  {
    v47 = 0;
  }
  v12 = sub_20C7430F4(a2, (uint64_t)&v46);
  sub_20BF4C2D8((uint64_t)&v46);
  if (*((_QWORD *)&v4 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return v12;
}

void sub_20C74D364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74D3F4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5444C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74D430()
{
  return &unk_24C5444C8;
}

uint64_t sub_20C74D43C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5445C8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74D480(void **a1)
{
  *a1 = off_24C5445C8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74D4C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C5445C8;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74D504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74D518(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5445C8;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74D534(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74D568(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74D5A4(uint64_t a1)
{
  return sub_20C74B960(a1 + 8);
}

uint64_t sub_20C74D5AC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544628))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74D5E8()
{
  return &unk_24C544628;
}

uint64_t sub_20C74D5F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544648;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74D638(void **a1)
{
  *a1 = off_24C544648;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74D67C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544648;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74D6BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74D6D0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544648;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74D6EC(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74D720(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

void sub_20C74D75C(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C74BB44((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C74D764(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544628))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74D7A0()
{
  return &unk_24C544628;
}

uint64_t sub_20C74D7AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5446B8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74D7F0(void **a1)
{
  *a1 = off_24C5446B8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74D834(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C5446B8;
  sub_20C74B654((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74D874(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74D888(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5446B8;
  return sub_20C74B654((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74D8A4(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74D8D8(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74D914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v18 = 0u;
  v19 = 0u;
  sub_20C74C474(a1 + 8, (uint64_t)&v18, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  v17 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20C74C710((uint64_t *)&v17, v20);
  v7 = sub_20C7430F4(a2, (uint64_t)v20);
  sub_20BF4C2D8((uint64_t)v20);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v7;
}

void sub_20C74DA64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  sub_20BF4C2D8(v2 - 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20C96BEA8();
  _Unwind_Resume(a1);
}

uint64_t sub_20C74DACC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544628))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74DB08()
{
  return &unk_24C544628;
}

void sub_20C74DB14(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30[6];
  void *v31;
  uint64_t v32;
  void *v33[6];
  void *v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20C74B5B8(a4))
  {
    sub_20C74E4C0((uint64_t)v33, a4);
    v55 = 0;
    v8 = operator new(0xA0uLL);
    *v8 = off_24C544728;
    sub_20C74E7CC((uint64_t)(v8 + 1), (uint64_t)v33);
    v55 = v8;
    sub_20C74E4C0((uint64_t)v30, a4);
    v53 = 0;
    v9 = operator new(0xA0uLL);
    *v9 = off_24C5447A8;
    sub_20C74E7CC((uint64_t)(v9 + 1), (uint64_t)v30);
    v53 = v9;
    v10 = sub_20C739A90(a1, a2, a3, (uint64_t)v54, (uint64_t)v52);
    sub_20C74E4C0((uint64_t)&v36, a4);
    v11 = (char *)operator new(0xA0uLL);
    *(_QWORD *)v11 = off_24C544818;
    v12 = v11 + 16;
    *((_DWORD *)v11 + 2) = (_DWORD)v36;
    if (SHIBYTE(v38) < 0)
    {
      sub_20BDDBFAC(v12, (void *)v37, *((unint64_t *)&v37 + 1));
    }
    else
    {
      *(_OWORD *)v12 = v37;
      *((_QWORD *)v11 + 4) = v38;
    }
    v13 = v40;
    *((_QWORD *)v11 + 5) = v39;
    *((_QWORD *)v11 + 6) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *((_DWORD *)v11 + 14) = (_DWORD)v41;
    v16 = v11 + 64;
    if (SHIBYTE(v43) < 0)
    {
      sub_20BDDBFAC(v16, (void *)v42, *((unint64_t *)&v42 + 1));
    }
    else
    {
      *(_OWORD *)v16 = v42;
      *((_QWORD *)v11 + 10) = v43;
    }
    v17 = v45;
    *((_QWORD *)v11 + 11) = v44;
    *((_QWORD *)v11 + 12) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *((_DWORD *)v11 + 26) = v46;
    v20 = v11 + 112;
    if (SHIBYTE(v48) < 0)
    {
      sub_20BDDBFAC(v20, (void *)v47, *((unint64_t *)&v47 + 1));
    }
    else
    {
      *(_OWORD *)v20 = v47;
      *((_QWORD *)v11 + 16) = v48;
    }
    v21 = v50;
    *((_QWORD *)v11 + 17) = v49;
    *((_QWORD *)v11 + 18) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v11[152] = v51;
    v57 = v11;
    sub_20C73BC1C(v56, (_QWORD *)v10 + 8);
    v24 = v57;
    if (v57 == v56)
    {
      v25 = 4;
      v24 = v56;
    }
    else
    {
      if (!v57)
        goto LABEL_25;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_25:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v46);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v36);
    v26 = v53;
    if (v53 == v52)
    {
      v27 = 4;
      v26 = v52;
    }
    else
    {
      if (!v53)
        goto LABEL_30;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_30:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v32);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v31);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v30);
    v28 = v55;
    if (v55 == v54)
    {
      v29 = 4;
      v28 = v54;
    }
    else
    {
      if (!v55)
      {
LABEL_35:
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v35);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v34);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v33);
        return;
      }
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_35;
  }
}

void sub_20C74DE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void **v48;
  void **v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v49);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v48);
  operator delete(v47);
  sub_20BE1D8BC(&a47);
  v52 = *(_QWORD **)(v50 - 144);
  if (v52 == (_QWORD *)(v50 - 168))
  {
    v53 = 4;
    v52 = (_QWORD *)(v50 - 168);
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_6:
  sub_20BE1D8BC((void **)&a9);
  v54 = *(_QWORD **)(v50 - 112);
  if (v54 == (_QWORD *)(v50 - 136))
  {
    v55 = 4;
    v54 = (_QWORD *)(v50 - 136);
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_11:
  sub_20BE1D8BC(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74DF40(uint64_t a1, uint64_t a2)
{
  uint64_t PropertyHeader;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 39))
      goto LABEL_5;
LABEL_10:
    sub_20C74FF84(a1);
    return a1;
  }
  if (*(_QWORD *)(a2 + 24))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a2 + 40))
    goto LABEL_10;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader || !sub_20C74F68C(PropertyHeader, 0))
    goto LABEL_10;
  v13 = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC(&v14, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 32);
  }
  v6 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20C74F890(a1, (uint64_t)&v13, a2 + 56, &v11, &v9);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
  return a1;
}

void sub_20C74E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74E05C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v11;
  void *v12;
  unsigned __int8 v15;
  size_t v16;
  std::string::size_type v17;
  int v18;
  std::string *p_p;
  uint64_t v20;
  void **p_s1;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  std::string __p;
  void *v30[2];
  char v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  std::string v35;
  const void *v36[2];
  char v37;
  _QWORD *v38;
  _BYTE v39[11];
  unsigned __int8 v40;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v36, "schema");
    sub_20BE01E1C(a1, v36, &v38);
    if (((char)v40 & 0x80000000) == 0)
    {
      v11 = v40 == 19
         && v38 == (_QWORD *)0x5F6D6F6547636241
         && *(_QWORD *)v39 == 0x6873654D796C6F50
         && *(_QWORD *)&v39[3] == 0x31765F6873654D79;
      goto LABEL_78;
    }
    v12 = v38;
    v11 = *(_QWORD *)v39 == 19
       && *v38 == 0x5F6D6F6547636241
       && v38[1] == 0x6873654D796C6F50
       && *(_QWORD *)((char *)v38 + 11) == 0x31765F6873654D79;
    goto LABEL_77;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v36, "schemaObjTitle");
  sub_20BE01E1C(a1, v36, &v38);
  sub_20C74E3E4(&v35);
  v3 = v40;
  if ((v40 & 0x80u) == 0)
    v4 = v40;
  else
    v4 = *(_QWORD *)v39;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_45:
    sub_20BDDC0E4(v30, "schema");
    sub_20BE01E1C(a1, (const void **)v30, &__s1);
    sub_20C74E3E4(&__p);
    v15 = v34;
    if ((v34 & 0x80u) == 0)
      v16 = v34;
    else
      v16 = __n;
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = __p.__r_.__value_.__l.__size_;
    if (v16 != v17)
    {
      v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v34 < 0)
    {
      v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0)
            operator delete(__s1);
          if (v31 < 0)
            operator delete(v30[0]);
          if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_75;
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v34;
        goto LABEL_69;
      }
      v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v22 = v23;
        v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v24 = v25;
        v27 = v20-- != 0;
        v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v35;
  else
    v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v40 & 0x80) != 0)
  {
    if (memcmp(v38, v7, *(size_t *)v39))
      goto LABEL_45;
  }
  else if (v40)
  {
    v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_65;
    }
    goto LABEL_45;
  }
LABEL_65:
  v11 = 1;
  if (v6 < 0)
LABEL_74:
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v40 & 0x80000000) == 0)
    goto LABEL_78;
  v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0)
    operator delete((void *)v36[0]);
  return v11;
}

void sub_20C74E364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C74E3E4(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_PolyMesh_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C74E48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74E4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v14 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

void sub_20C74E5F0(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74E614(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544728;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74E658(void **a1)
{
  *a1 = off_24C544728;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74E69C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544728;
  sub_20C74E4C0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74E6DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74E6F0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544728;
  return sub_20C74E4C0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74E70C(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74E740(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74E77C(uint64_t a1)
{
  return sub_20C74B960(a1 + 8);
}

uint64_t sub_20C74E784(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74E7C0()
{
  return &unk_24C544788;
}

uint64_t sub_20C74E7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v14 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

void sub_20C74E8FC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74E920(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5447A8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74E964(void **a1)
{
  *a1 = off_24C5447A8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74E9A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C5447A8;
  sub_20C74E4C0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74E9E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74E9FC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5447A8;
  return sub_20C74E4C0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74EA18(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74EA4C(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

void sub_20C74EA88(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IArrayProperty *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_20C74B5B8(a1 + 8))
  {
    sub_20C74BD08((uint64_t)v3, &v23);
    v4 = sub_20C74BDA4(v3);
    if (sub_20C74BEA8(v3))
      v5 = v4 != 0;
    else
      v5 = v4;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C74EC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74EC80(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74ECBC()
{
  return &unk_24C544788;
}

uint64_t sub_20C74ECC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544818;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C74ED0C(void **a1)
{
  *a1 = off_24C544818;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C74ED50(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544818;
  sub_20C74E4C0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C74ED90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74EDA4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544818;
  return sub_20C74E4C0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C74EDC0(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C74EDF4(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C74EE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  uint64_t v46;
  char *v47;
  std::type_info **v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v43 = 0u;
  v44 = 0u;
  sub_20C74F170(a1 + 8, (uint64_t)&v43, a3);
  v4 = v43;
  if (*((_QWORD *)&v43 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if ((_QWORD)v4)
  {
    v7 = *(uint64_t **)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      if (v9 <= 1)
        v9 = 1;
      v10 = 1;
      do
      {
        v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = *(_QWORD *)v4;
    sub_20BF5AB98((uint64_t)v45, v10);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v45, v13, v14);
    v16 = *(uint64_t **)(v4 + 16);
    v15 = *(_QWORD **)(v4 + 24);
    if (v15 != v16)
    {
      v17 = v15 - v16;
      if (v17 <= 1)
        v17 = 1;
      v18 = 1;
      do
      {
        v19 = v18;
        v21 = *v16++;
        v20 = v21;
        v18 *= v21;
        --v17;
      }
      while (v17);
      if (v18)
      {
        v22 = (_DWORD *)(v12 + 8);
        v23 = v19 * v20;
        v24 = (_DWORD *)(v46 + 8);
        do
        {
          v25 = *v22;
          *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
          *v24 = v25;
          v24 += 3;
          v22 += 3;
          --v23;
        }
        while (v23);
      }
    }
    v48 = off_24C51EC58;
    v26 = (char *)operator new(0x30uLL);
    v27 = v45[1];
    *(_OWORD *)v26 = v45[0];
    *((_OWORD *)v26 + 1) = v27;
    v28 = v46;
    *((_QWORD *)v26 + 4) = v46;
    if (v28)
    {
      v29 = (unint64_t *)(v28 - 16);
      if (*((_QWORD *)v26 + 3))
        v29 = (unint64_t *)*((_QWORD *)v26 + 3);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = (unsigned int *)(v26 + 40);
    atomic_store(0, (unsigned int *)v26 + 10);
    v47 = v26;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    sub_20BF5618C((uint64_t)v45);
  }
  else
  {
    v48 = 0;
  }
  v33 = sub_20C7430F4(a2, (uint64_t)&v47);
  sub_20BF4C2D8((uint64_t)&v47);
  if (*((_QWORD *)&v4 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v33;
}

void sub_20C74F098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74F128(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C74F164()
{
  return &unk_24C544788;
}

void sub_20C74F170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void *__p;
  _BYTE *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unsigned int **v39;
  std::__shared_weak_count *v40;

  v6 = sub_20BE6E6E4(a1);
  *(_DWORD *)(a2 + 32) = sub_20BE14C08(v6 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 144);
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(_QWORD *)(a1 + 64))
      goto LABEL_5;
LABEL_35:
    sub_20C74F420(a1, a2, a3);
    return;
  }
  if (*(_BYTE *)(a1 + 79))
    goto LABEL_35;
LABEL_5:
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_35;
  sub_20C74CA54(a1 + 48, a3, &v39);
  if (v39)
  {
    v7 = (uint64_t *)v39[2];
    v8 = (char *)v39[3] - (char *)v7;
    if (!v8)
      goto LABEL_36;
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    v10 = 1;
    do
    {
      v11 = *v7++;
      v10 *= v11;
      --v9;
    }
    while (v9);
    if (v10)
    {
      sub_20C74F500(a1, a3, &v37);
      if (is_mul_ok(v10, 0xCuLL))
        v12 = 12 * v10;
      else
        v12 = -1;
      v13 = (char *)operator new[](v12);
      v14 = v13;
      v15 = v37;
      v16 = (uint64_t *)v37[2];
      v17 = v37[3] - (_QWORD)v16;
      if (v17)
      {
        v18 = v17 >> 3;
        if (v18 <= 1)
          v19 = 1;
        else
          v19 = v18;
        v17 = 1;
        do
        {
          v20 = *v16++;
          v17 *= v20;
          --v19;
        }
        while (v19);
      }
      v21 = *v39;
      if (v10 <= 1)
        v22 = 1;
      else
        v22 = v10;
      v23 = v13 + 8;
      do
      {
        v25 = *v21++;
        v24 = v25;
        if (v17 <= (unint64_t)v25)
          break;
        v26 = *v15 + 12 * v24;
        *((_QWORD *)v23 - 1) = *(_QWORD *)v26;
        *v23 = *(_DWORD *)(v26 + 8);
        v23 += 3;
        --v22;
      }
      while (v22);
      v34 = v10;
      sub_20BDE8894(&__p, 1uLL, &v34);
      v27 = operator new(0x28uLL);
      *v27 = v14;
      v27[1] = 0x30000000ALL;
      v27[3] = 0;
      v27[4] = 0;
      v27[2] = 0;
      sub_20BDE1364(v27 + 2, __p, (uint64_t)v36, (v36 - (_BYTE *)__p) >> 3);
      sub_20C74F540((_QWORD *)a2, (uint64_t)v27);
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
      v28 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
LABEL_36:
      sub_20C74F420(a1, a2, a3);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20C74F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  _Unwind_Resume(a1);
}

void sub_20C74F420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20C74F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C74F500(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20C74F420(a1, (uint64_t)a3, a2);
}

void sub_20C74F52C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void sub_20C74F540(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C74F5B0(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20C74F5B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C544888;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C74F600(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;

  __cxa_begin_catch(a1);
  sub_20BDE1454((int)&a13, v13);
  __cxa_rethrow();
}

void sub_20C74F618(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C74F630(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C74F644(uint64_t a1)
{
  sub_20BDE1454(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C74F64C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5448C8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C74F68C(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  void **v5;
  uint64_t v7;
  void *v9;
  int v10;
  char v12;
  void **v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3 == 2)
  {
    if (*(_DWORD *)(a1 + 56) == 10 && *(_BYTE *)(a1 + 60) == 3)
      return sub_20BE21750(a1 + 32, a2);
  }
  else if (!v3)
  {
    v4 = a1 + 32;
    sub_20BDDC0E4(v18, "podName");
    sub_20BE01E1C(v4, (const void **)v18, v20);
    if (v21 < 0)
    {
      if (v20[1] != (void *)9)
      {
        v7 = 0;
LABEL_33:
        operator delete(v20[0]);
LABEL_34:
        if (v19 < 0)
          operator delete(v18[0]);
        return v7;
      }
      v5 = (void **)v20[0];
    }
    else
    {
      if (v21 != 9)
      {
        v7 = 0;
        goto LABEL_34;
      }
      v5 = v20;
    }
    v9 = *v5;
    v10 = *((unsigned __int8 *)v5 + 8);
    if (v9 == (void *)0x5F323374616F6C66 && v10 == 116)
    {
      sub_20BDDC0E4(v14, "podExtent");
      sub_20BE01E1C(v4, (const void **)v14, __p);
      v12 = v17;
      if (v17 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (atoi((const char *)v13) == 3)
      {
        v7 = sub_20BE21750(v4, a2);
        v12 = v17;
      }
      else
      {
        v7 = 0;
      }
      if (v12 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
      if ((v21 & 0x80) == 0)
        goto LABEL_34;
    }
    else
    {
      v7 = 0;
      if ((v21 & 0x80) == 0)
        goto LABEL_34;
    }
    goto LABEL_33;
  }
  return 0;
}

void sub_20C74F82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C74F890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  std::string *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v25;
  _QWORD *exception;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t *v41;
  uint64_t **v42;
  void *v43[2];
  char v44;
  void *__p;
  int v46;
  char v47;
  std::string *v48;
  std::string v49;
  uint64_t v50[37];
  int v51;
  uint64_t v52[4];
  std::__shared_weak_count *v53;
  int v54;
  uint64_t v55;

  *(_DWORD *)a1 = 2;
  v10 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v40 = (int *)(a1 + 96);
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = *(_DWORD *)a2;
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
  v48 = &v49;
  v50[35] = 0;
  v50[36] = 0;
  v51 = v11;
  v41 = sub_20BDEBF8C(v52, (const void ***)&v48);
  v52[3] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 1;
  sub_20BDE9D48((uint64_t)&v48, v49.__r_.__value_.__l.__data_);
  v42 = a4;
  sub_20BE02E30(a4, (uint64_t)&v51);
  sub_20BE02E30(a5, (uint64_t)&v51);
  *(_DWORD *)a1 = v51;
  v50[33] = a1;
  v50[34] = (uint64_t)"ITypedGeomParam::ITypedGeomParam()";
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(std::__shared_weak_count **)(a2 + 40);
  v50[31] = v12;
  v50[32] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v48);
    v25 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v25, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v27, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  if (!v16)
  {
    sub_20BDDBD68((uint64_t)&v48);
    v28 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    v29 = *(char *)(a3 + 23);
    if (v29 >= 0)
      v30 = a3;
    else
      v30 = *(_QWORD *)a3;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a3 + 23);
    else
      v31 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v28, v30, v31);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    v32 = __cxa_allocate_exception(0x20uLL);
    v33 = sub_20BDDC09C(v32, (uint64_t)&__p);
    __cxa_throw(v33, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v16 + 24);
  if (v17 == 2)
  {
    sub_20BE21160((uint64_t)&v48, (int *)a2, a3, v42, a5);
    *(_DWORD *)a1 = (_DWORD)v48;
    std::string::operator=(v10, &v49);
    sub_20BDE881C((_QWORD *)(a1 + 32), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    v18 = 0;
  }
  else
  {
    if (v17)
    {
      sub_20BDDBD68((uint64_t)&v48);
      v34 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      v35 = *(char *)(a3 + 23);
      if (v35 >= 0)
        v36 = a3;
      else
        v36 = *(_QWORD *)a3;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      sub_20BDDC1C8(v34, v36, v37);
      std::stringbuf::str();
      sub_20BDDBF20(&__p, (__int128 *)v43);
      if (v44 < 0)
        operator delete(v43[0]);
      v38 = __cxa_allocate_exception(0x20uLL);
      v39 = sub_20BDDC09C(v38, (uint64_t)&__p);
      __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    LODWORD(__p) = 1;
    v46 = v51;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v48, a2, a3, &__p);
    *v40 = (int)v48;
    std::string::operator=((std::string *)(a1 + 104), &v49);
    sub_20BDE881C((_QWORD *)(a1 + 128), v50);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v48);
    sub_20BDDC0E4(&__p, ".indices");
    sub_20BE1FC6C((uint64_t)&v48, v40, (uint64_t)&__p, v42, a5);
    *(_DWORD *)(a1 + 48) = (_DWORD)v48;
    std::string::operator=((std::string *)(a1 + 56), &v49);
    sub_20BDE881C((_QWORD *)(a1 + 80), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    if (v47 < 0)
      operator delete(__p);
    sub_20BDDC0E4(&__p, ".vals");
    sub_20BE21160((uint64_t)&v48, v40, (uint64_t)&__p, v42, a5);
    *(_DWORD *)a1 = (_DWORD)v48;
    std::string::operator=(v10, &v49);
    sub_20BDE881C((_QWORD *)(a1 + 32), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    if (v47 < 0)
      operator delete(__p);
    v18 = 1;
  }
  *(_BYTE *)(a1 + 144) = v18;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v21 = v53;
  if (v53)
  {
    v22 = (unint64_t *)&v53->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v41, (_QWORD *)v52[1]);
  return a1;
}

void sub_20C74FDE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 200));
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 184, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C74FBC8);
}

void sub_20C74FEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, Alembic::Abc::v12::ICompoundProperty *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  uint64_t v24;

  sub_20BE02EB0(v24 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a12);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a13);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C74FF84(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void sub_20C74FFFC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C750020(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5198D0;
  *(_QWORD *)(a1 + 96) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 344));
  *(_QWORD *)(a1 + 96) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_20C7500A0(uint64_t a1)
{
  void **v3;

  sub_20BDECAB8(a1 + 208, *(char **)(a1 + 216));
  v3 = (void **)(a1 + 184);
  sub_20BDE5038(&v3);
  v3 = (void **)(a1 + 160);
  sub_20BDE5038(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 156));
  sub_20BFD265C((_DWORD *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)(a1 + 8));
  return a1;
}

Alembic::Abc::v12::IObject *sub_20C750118(Alembic::Abc::v12::IObject *a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Header;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v18;
  void *p_p;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type size;
  _QWORD *exception;
  _QWORD *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  void *__p;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t (**v36)();
  void *v37;
  _QWORD v38[5];
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::string v44;
  __int128 v45;
  char v46;
  _DWORD *v47;
  const char *v48;
  _BYTE v49[96];

  v9 = (_QWORD *)sub_20BE04EB0((uint64_t)a1, a2);
  *v9 = off_24C5198D0;
  v10 = (uint64_t)(v9 + 12);
  sub_20BE5179C((uint64_t)(v9 + 12));
  v11 = sub_20BE04EB0((uint64_t)v49, a2);
  LODWORD(v36) = 0;
  LODWORD(v37) = 0;
  LODWORD(__p) = 0;
  LODWORD(v34) = 0;
  *((_DWORD *)a1 + 2) = sub_20BE04D74(v11, a4, a5, (uint64_t **)&v36, (uint64_t **)&__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v49);
  v47 = (_DWORD *)((char *)a1 + 8);
  v48 = "ISchemaObject::ISchemaObject( wrapflag)";
  Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v36) = 0;
  LODWORD(v37) = 0;
  LODWORD(__p) = 0;
  LODWORD(v34) = 0;
  v13 = sub_20BE6DA40(a4, a5, (uint64_t **)&v36, (uint64_t **)&__p);
  v14 = Header + 48;
  if ((sub_20BE51118(v14, v13) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v36);
    v18 = sub_20BDDC1C8(v38, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(&v45, "schemaObjTitle");
    sub_20BE01E1C(v14, (const void **)&v45, &__p);
    if ((v35 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v35 & 0x80u) == 0)
      v20 = v35;
    else
      v20 = v34;
    v21 = sub_20BDDC1C8(v18, (uint64_t)p_p, v20);
    v22 = sub_20BDDC1C8(v21, (uint64_t)" to expected: ", 14);
    sub_20BE51488(&v44);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v44;
    else
      v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v22, (uint64_t)v23, size);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if ((char)v35 < 0)
      operator delete(__p);
    if (v46 < 0)
      operator delete((void *)v45);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, &v45);
    if (v46 < 0)
      operator delete((void *)v45);
    exception = __cxa_allocate_exception(0x20uLL);
    v26 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v26, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&__p);
  sub_20BDDC0E4(&v45, ".faceset");
  v15 = *((_DWORD *)a1 + 2);
  LODWORD(v44.__r_.__value_.__l.__data_) = 1;
  LODWORD(v44.__r_.__value_.__r.__words[1]) = v15;
  LODWORD(v29) = 0;
  v30 = 0;
  LODWORD(v27) = 0;
  v28 = 0;
  v16 = sub_20BE6DA40(a4, a5, &v29, &v27);
  LODWORD(v31) = 5;
  v32 = v16;
  sub_20BE52214((uint64_t)&v36, (uint64_t)&__p, (uint64_t)&v45, (uint64_t **)&v44, &v31);
  sub_20BE5080C(v10, (uint64_t)&v36);
  v36 = (uint64_t (**)())&unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v43);
  v36 = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v42);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v41);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v40);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v39);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v37);
  if (v46 < 0)
    operator delete((void *)v45);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  return a1;
}

void sub_20C75042C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _QWORD *v25;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a25);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE50ABC(v25);
  sub_20BE50ABC(v25);
}

void sub_20C750580()
{
  Alembic::Abc::v12::IObject *v0;
  uint64_t v1;

  Alembic::Abc::v12::IObject::reset(v0);
  sub_20BE02504(v1 - 176, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C7502E0);
}

void sub_20C7505A4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C7504F4);
}

void sub_20C7505B0()
{
  __cxa_end_catch();
  JUMPOUT(0x20C7504F4);
}

uint64_t sub_20C7505C0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  Alembic::Abc::v12::IObject *v6;
  unint64_t NumProperties;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::string *PropertyHeader;
  const void **v13;
  const void **v14;
  _BYTE v16[48];

  *(_QWORD *)a1 = a2;
  v6 = (Alembic::Abc::v12::IObject *)(a1 + 8);
  sub_20BE04EB0(a1 + 8, a3);
  *(_DWORD *)(a1 + 104) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BFD6E54((_DWORD *)(a1 + 152), a4);
  sub_20BFD6EA4((_DWORD *)(a1 + 156), a4 + 1);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  Alembic::Abc::v12::IObject::getProperties(v6, (uint64_t)v16);
  NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)v16);
  sub_20BDF3198((uint64_t *)(a1 + 160), NumProperties);
  v8 = *(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = v8 / 24;
    do
    {
      PropertyHeader = (const std::string *)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)v16);
      std::string::operator=((std::string *)(*(_QWORD *)(a1 + 160) + v9), PropertyHeader);
      ++v10;
      v9 += 24;
    }
    while (v11 != v10);
    v14 = *(const void ***)(a1 + 160);
    v13 = *(const void ***)(a1 + 168);
    while (v14 != v13)
    {
      sub_20BE7AA28((uint64_t **)(a1 + 208), (uint64_t *)(a1 + 216), v14, (uint64_t)v14);
      v14 += 3;
    }
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v16);
  return a1;
}

void sub_20C75072C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, void **a11)
{
  Alembic::Abc::v12::IObject *v11;
  Alembic::Abc::v12::ICompoundProperty *v12;
  _DWORD *v13;
  char **v14;
  uint64_t v15;

  sub_20BDECAB8(v15, *v14);
  a11 = (void **)(v15 - 24);
  sub_20BDE5038(&a11);
  sub_20BDE5038(&a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v12);
  Alembic::Abc::v12::IObject::~IObject(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7507A4(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 8) = off_24C5198D0;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_24C5448E8;
  *(_QWORD *)(a1 + 104) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 352));
  *(_QWORD *)(a1 + 104) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75083C(char *a1)
{
  void **v2;

  *((_QWORD *)a1 + 1) = off_24C5198D0;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_24C5448E8;
  *((_QWORD *)a1 + 13) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 44);
  *((_QWORD *)a1 + 13) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 20);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C7508D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x190uLL);
  *v2 = off_24C5448E8;
  sub_20BE50CC0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C750914(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C750928(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5448E8;
  return sub_20BE50CC0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C750944(uint64_t a1)
{
  sub_20C750020(a1 + 8);
}

void sub_20C75094C(void *a1)
{
  sub_20C750020((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C750974(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C750990(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544958))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7509CC()
{
  return &unk_24C544958;
}

uint64_t sub_20C7509D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = off_24C5198D0;
  sub_20C750AD0((uint64_t)(v4 + 12), a2 + 96);
  *(_QWORD *)(a1 + 96) = &unk_24C519908;
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  v5 = (_BYTE *)(a1 + 352);
  if (*(char *)(a2 + 375) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a2 + 352), *(_QWORD *)(a2 + 360));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

void sub_20C750A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(v1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C750AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = off_24C519990;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v19 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v19, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v24 = (_BYTE *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_20BDDBFAC(v24, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)v24 = v25;
  }
  v26 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  return a1;
}

void sub_20C750CC8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C750D0C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 8) = off_24C5198D0;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_24C544980;
  *(_QWORD *)(a1 + 104) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 352));
  *(_QWORD *)(a1 + 104) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C750DA4(char *a1)
{
  void **v2;

  *((_QWORD *)a1 + 1) = off_24C5198D0;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_24C544980;
  *((_QWORD *)a1 + 13) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 44);
  *((_QWORD *)a1 + 13) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 20);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C750E3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x190uLL);
  *v2 = off_24C544980;
  sub_20BE50CC0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C750E7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C750E90(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544980;
  return sub_20BE50CC0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C750EAC(uint64_t a1)
{
  sub_20C750020(a1 + 8);
}

void sub_20C750EB4(void *a1)
{
  sub_20C750020((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C750EDC(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v4;
  Alembic::AbcGeom::v12::IFaceSetSchema *v5;
  unint64_t NumSamples;
  unint64_t v7;
  uint64_t i;
  double SampleTime;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v25;
  std::__shared_weak_count *v26;

  v5 = (Alembic::AbcGeom::v12::IFaceSetSchema *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 104);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((*(unsigned int (**)(uint64_t))(v4 + 24))(a1 + 104))
  {
    sub_20C751128((uint64_t)v5, &v25);
    NumSamples = Alembic::AbcGeom::v12::IFaceSetSchema::getNumSamples(v5);
    if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::Abc::v12::IArrayProperty *)(a1 + 352)))
      v7 = NumSamples != 0;
    else
      v7 = NumSamples;
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v25, i);
        v10 = SampleTime;
        v12 = a2[1];
        v11 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a2;
          v15 = v12 - *a2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            sub_20BDDF694();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v18);
            v14 = *a2;
            v12 = a2[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = (double *)&v19[8 * v15];
          *v20 = v10;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *((_QWORD *)v12-- - 1);
            *((_QWORD *)v20-- - 1) = v21;
          }
          *a2 = v20;
          a2[1] = v13;
          a2[2] = (double *)&v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = SampleTime;
          v13 = v12 + 1;
        }
        a2[1] = v13;
      }
    }
    v22 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_20C751084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7510E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544958))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75111C()
{
  return &unk_24C544958;
}

void sub_20C751128(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v3[96];
  _BYTE v4[48];

  if (*(char *)(a1 + 279) < 0)
  {
    if (*(_QWORD *)(a1 + 264))
      goto LABEL_7;
  }
  else if (*(_BYTE *)(a1 + 279))
  {
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 280))
  {
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 248), a2);
    return;
  }
LABEL_7:
  sub_20BE50098((int *)(a1 + 8), (uint64_t)v3);
  Alembic::Abc::v12::IObject::getArchive((Alembic::Abc::v12::IObject *)v3, (uint64_t)v4);
  Alembic::Abc::v12::IArchive::getTimeSampling((Alembic::Abc::v12::IArchive *)v4, a2);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)v4);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v3);
}

void sub_20C7511BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)(v9 - 64));
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7511E0(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 8) = off_24C5198D0;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_24C5449F0;
  *(_QWORD *)(a1 + 104) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 352));
  *(_QWORD *)(a1 + 104) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C751278(char *a1)
{
  void **v2;

  *((_QWORD *)a1 + 1) = off_24C5198D0;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_24C5449F0;
  *((_QWORD *)a1 + 13) = &unk_24C519908;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 44);
  *((_QWORD *)a1 + 13) = off_24C519990;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 20);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C751310(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x190uLL);
  *v2 = off_24C5449F0;
  sub_20BE50CC0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C751350(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C751364(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5449F0;
  return sub_20BE50CC0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C751380(uint64_t a1)
{
  sub_20C750020(a1 + 8);
}

void sub_20C751388(void *a1)
{
  sub_20C750020((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C7513B0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;

  if (Alembic::AbcGeom::v12::IFaceSetSchema::getFaceExclusivity((Alembic::AbcGeom::v12::IFaceSetSchema *)(a1 + 104)) == 1)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3)
      v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v4 = (unsigned int *)*((_QWORD *)v3 + 86);
    v14 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v14 = v5;
    }
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7)
      v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v8 = (unsigned int *)*((_QWORD *)v7 + 146);
    v14 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v14 = v9;
    }
  }
  result = sub_20C73D728(a2, (uint64_t)&v14);
  if ((v14 & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return result;
}

uint64_t sub_20C7514F0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544958))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75152C()
{
  return &unk_24C544958;
}

pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *sub_20C751538@<X0>(int a1@<W0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;

  result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (a1 == 1)
  {
    if (!result)
      result = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v5 = (unsigned int *)*((_QWORD *)result + 97);
    *a2 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
LABEL_13:
      if ((v7 & 1) == 0)
        *a2 = v6;
    }
  }
  else
  {
    if (!result)
      result = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    v8 = (unsigned int *)*((_QWORD *)result + 87);
    *a2 = v8;
    if ((v8 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      goto LABEL_13;
    }
  }
  return result;
}

void sub_20C7515E8(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30[6];
  void *v31;
  uint64_t v32;
  void *v33[6];
  void *v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (sub_20C74B5B8(a4))
  {
    sub_20C755004((uint64_t)v33, a4);
    v55 = 0;
    v8 = operator new(0xA0uLL);
    *v8 = off_24C544F68;
    sub_20C755310((uint64_t)(v8 + 1), (uint64_t)v33);
    v55 = v8;
    sub_20C755004((uint64_t)v30, a4);
    v53 = 0;
    v9 = operator new(0xA0uLL);
    *v9 = off_24C544FE8;
    sub_20C755310((uint64_t)(v9 + 1), (uint64_t)v30);
    v53 = v9;
    v10 = sub_20C739A90(a1, a2, a3, (uint64_t)v54, (uint64_t)v52);
    sub_20C755004((uint64_t)&v36, a4);
    v11 = (char *)operator new(0xA0uLL);
    *(_QWORD *)v11 = off_24C545058;
    v12 = v11 + 16;
    *((_DWORD *)v11 + 2) = (_DWORD)v36;
    if (SHIBYTE(v38) < 0)
    {
      sub_20BDDBFAC(v12, (void *)v37, *((unint64_t *)&v37 + 1));
    }
    else
    {
      *(_OWORD *)v12 = v37;
      *((_QWORD *)v11 + 4) = v38;
    }
    v13 = v40;
    *((_QWORD *)v11 + 5) = v39;
    *((_QWORD *)v11 + 6) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *((_DWORD *)v11 + 14) = (_DWORD)v41;
    v16 = v11 + 64;
    if (SHIBYTE(v43) < 0)
    {
      sub_20BDDBFAC(v16, (void *)v42, *((unint64_t *)&v42 + 1));
    }
    else
    {
      *(_OWORD *)v16 = v42;
      *((_QWORD *)v11 + 10) = v43;
    }
    v17 = v45;
    *((_QWORD *)v11 + 11) = v44;
    *((_QWORD *)v11 + 12) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *((_DWORD *)v11 + 26) = v46;
    v20 = v11 + 112;
    if (SHIBYTE(v48) < 0)
    {
      sub_20BDDBFAC(v20, (void *)v47, *((unint64_t *)&v47 + 1));
    }
    else
    {
      *(_OWORD *)v20 = v47;
      *((_QWORD *)v11 + 16) = v48;
    }
    v21 = v50;
    *((_QWORD *)v11 + 17) = v49;
    *((_QWORD *)v11 + 18) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v11[152] = v51;
    v57 = v11;
    sub_20C73BC1C(v56, (_QWORD *)v10 + 8);
    v24 = v57;
    if (v57 == v56)
    {
      v25 = 4;
      v24 = v56;
    }
    else
    {
      if (!v57)
        goto LABEL_25;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_25:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v46);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v41);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v36);
    v26 = v53;
    if (v53 == v52)
    {
      v27 = 4;
      v26 = v52;
    }
    else
    {
      if (!v53)
        goto LABEL_30;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_30:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v32);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v31);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v30);
    v28 = v55;
    if (v55 == v54)
    {
      v29 = 4;
      v28 = v54;
    }
    else
    {
      if (!v55)
      {
LABEL_35:
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v35);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v34);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v33);
        return;
      }
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_35;
  }
}

void sub_20C751918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void **v48;
  void **v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v49);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v48);
  operator delete(v47);
  sub_20BE1D8BC(&a47);
  v52 = *(_QWORD **)(v50 - 144);
  if (v52 == (_QWORD *)(v50 - 168))
  {
    v53 = 4;
    v52 = (_QWORD *)(v50 - 168);
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_6:
  sub_20BE1D8BC((void **)&a9);
  v54 = *(_QWORD **)(v50 - 112);
  if (v54 == (_QWORD *)(v50 - 136))
  {
    v55 = 4;
    v54 = (_QWORD *)(v50 - 136);
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_11:
  sub_20BE1D8BC(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C751A14(uint64_t a1, uint64_t a2)
{
  uint64_t PropertyHeader;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 39))
      goto LABEL_5;
LABEL_10:
    sub_20C753B24(a1);
    return a1;
  }
  if (*(_QWORD *)(a2 + 24))
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)(a2 + 40))
    goto LABEL_10;
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader || !sub_20C755F5C(PropertyHeader, 0))
    goto LABEL_10;
  v13 = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC(&v14, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 32);
  }
  v6 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  LODWORD(v11) = 0;
  v12 = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  sub_20C7560B4(a1, (uint64_t)&v13, a2 + 56, &v11, &v9);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
  return a1;
}

void sub_20C751B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

void sub_20C751B30(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 128));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 96));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

uint64_t sub_20C751B78(uint64_t a1, int a2)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v10;
  void *v11;
  unsigned __int8 v13;
  size_t v14;
  std::string::size_type v15;
  int v16;
  std::string *p_p;
  uint64_t v18;
  void **p_s1;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  std::string __p;
  void *v28[2];
  char v29;
  void *__s1;
  size_t __n;
  unsigned __int8 v32;
  std::string v33;
  const void *v34[2];
  char v35;
  _QWORD *v36;
  size_t v37;
  unsigned __int8 v38;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v34, "schema");
    sub_20BE01E1C(a1, v34, &v36);
    if (((char)v38 & 0x80000000) == 0)
    {
      v10 = v38 == 16 && v36 == (_QWORD *)0x5F6D6F6547636241 && v37 == 0x32765F6576727543;
      goto LABEL_72;
    }
    v11 = v36;
    v10 = v37 == 16 && *v36 == 0x5F6D6F6547636241 && v36[1] == 0x32765F6576727543;
    goto LABEL_71;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v34, "schemaObjTitle");
  sub_20BE01E1C(a1, v34, &v36);
  sub_20C751ED0(&v33);
  v3 = v38;
  if ((v38 & 0x80u) == 0)
    v4 = v38;
  else
    v4 = v37;
  size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_39:
    sub_20BDDC0E4(v28, "schema");
    sub_20BE01E1C(a1, (const void **)v28, &__s1);
    sub_20C751ED0(&__p);
    v13 = v32;
    if ((v32 & 0x80u) == 0)
      v14 = v32;
    else
      v14 = __n;
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __p.__r_.__value_.__l.__size_;
    if (v14 != v15)
    {
      v10 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_58;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v32 < 0)
    {
      v10 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v32)
      {
        v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v13 & 0x80) != 0)
            operator delete(__s1);
          if (v29 < 0)
            operator delete(v28[0]);
          if ((*((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_69;
          goto LABEL_68;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        v13 = v32;
        goto LABEL_63;
      }
      v18 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        v21 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v20 = v21;
        v23 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v22 = v23;
        v25 = v18-- != 0;
        v10 = v20 == v22;
      }
      while (v20 == v22 && v25);
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_58;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v33;
  else
    v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v38 & 0x80) != 0)
  {
    if (memcmp(v36, v7, v37))
      goto LABEL_39;
  }
  else if (v38)
  {
    v8 = (unsigned __int8 *)&v36;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_59;
    }
    goto LABEL_39;
  }
LABEL_59:
  v10 = 1;
  if (v6 < 0)
LABEL_68:
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_69:
  if (((char)v38 & 0x80000000) == 0)
    goto LABEL_72;
  v11 = v36;
LABEL_71:
  operator delete(v11);
LABEL_72:
  if (v35 < 0)
    operator delete((void *)v34[0]);
  return v10;
}

void sub_20C751E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C751ED0(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Curve_v2");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C751F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

int64x2_t sub_20C751FAC(uint64_t a1)
{
  int64x2_t result;

  sub_20BDEBF08((_QWORD *)a1);
  sub_20BDEBF08((_QWORD *)(a1 + 96));
  sub_20BDEBF08((_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0x100000000;
  sub_20BDEBF08((_QWORD *)(a1 + 112));
  sub_20BDEBF08((_QWORD *)(a1 + 128));
  *(int64x2_t *)(a1 + 48) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 64) = xmmword_20CA521E0;
  result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 80) = result;
  return result;
}

BOOL sub_20C75201C(uint64_t a1)
{
  _BOOL8 result;

  result = sub_20C753298(a1);
  if (result)
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return 0;
    }
    if (*(_QWORD *)(a1 + 280))
    {
      if (*(char *)(a1 + 375) < 0)
      {
        if (*(_QWORD *)(a1 + 360))
          return 0;
      }
      else if (*(_BYTE *)(a1 + 375))
      {
        return 0;
      }
      return *(_QWORD *)(a1 + 376) != 0;
    }
    return 0;
  }
  return result;
}

uint64_t sub_20C75208C(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v7;

  v7 = sub_20C752290(a1, a2, a3, a4);
  *(_QWORD *)v7 = &unk_24C544A60;
  *(_DWORD *)(v7 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v7 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  sub_20C753B24(a1 + 440);
  sub_20C74B51C(a1 + 592);
  sub_20C74FF84(a1 + 744);
  *(_DWORD *)(a1 + 896) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 904), "");
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 952), "");
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1000), "");
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  Alembic::AbcGeom::v12::ICurvesSchema::init(a1, a3, a4);
  return a1;
}

void sub_20C7521DC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v6);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1 + 118);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1 + 112);
  sub_20BE1D8BC(v5);
  sub_20BE1D8BC(v4);
  sub_20BE1D8BC(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v1 + 49));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1 + 43);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1 + 37);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  sub_20C7523C0((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_20C752260()
{
  JUMPOUT(0x20C752228);
}

void sub_20C752268()
{
  JUMPOUT(0x20C752230);
}

void sub_20C752270()
{
  JUMPOUT(0x20C752238);
}

void sub_20C752278()
{
  JUMPOUT(0x20C752240);
}

void sub_20C752280()
{
  JUMPOUT(0x20C752248);
}

void sub_20C752288()
{
  JUMPOUT(0x20C752250);
}

uint64_t sub_20C752290(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  _QWORD *v7;

  v7 = sub_20C7524FC((_QWORD *)a1, a2, a3, a4);
  *v7 = &unk_24C544AE8;
  *((_DWORD *)v7 + 14) = 2;
  sub_20BDDC0E4(v7 + 8, "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20C752978(a1, a3, a4);
  return a1;
}

void sub_20C75236C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;
  Alembic::Abc::v12::ICompoundProperty *v5;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C7523C0(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C544AE8;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_20C75241C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C753C24(a1);
  operator delete(v1);
}

void sub_20C752430(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 35);
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BDEBF08(a1 + 41);
  MEMORY[0x212B929D0](a1 + 38, "");
  sub_20BDEBF08(a1 + 47);
  MEMORY[0x212B929D0](a1 + 44, "");
  sub_20BDEBF08(a1 + 116);
  MEMORY[0x212B929D0](a1 + 113, "");
  sub_20BDEBF08(a1 + 122);
  MEMORY[0x212B929D0](a1 + 119, "");
  sub_20BDEBF08(a1 + 128);
  MEMORY[0x212B929D0](a1 + 125, "");
  sub_20C753BC0((uint64_t)(a1 + 74));
  sub_20C753BC0((uint64_t)(a1 + 93));
  sub_20C753BC0((uint64_t)(a1 + 55));
  sub_20BDEBF08(a1 + 53);
  MEMORY[0x212B929D0](a1 + 50, "");
  sub_20C753214(a1);
}

_QWORD *sub_20C7524FC(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *exception;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  unsigned __int8 v32;
  void *v33[2];
  char v34;
  void *__p;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  const char *v41;
  unsigned int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v8 = *(std::__shared_weak_count **)(a2 + 40);
  v47 = *(_QWORD *)(a2 + 32);
  v48 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v42 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC(&v43, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v43 = *(_OWORD *)(a2 + 8);
    v44 = *(_QWORD *)(a2 + 24);
  }
  v11 = *(_QWORD *)(a2 + 40);
  v45 = *(_QWORD *)(a2 + 32);
  v46 = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  LODWORD(v30) = 0;
  LODWORD(v31) = 0;
  LODWORD(v33[0]) = 0;
  LODWORD(v33[1]) = 0;
  v14 = sub_20C7532E4(&v42, a3, a4, (uint64_t **)&v30, (uint64_t **)v33);
  LODWORD(__p) = 1;
  v36 = v14;
  LODWORD(v40) = 0;
  LODWORD(v41) = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty((uint64_t)(a1 + 1), &v47, (uint64_t **)&__p, &v40);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v42);
  v15 = v48;
  if (v48)
  {
    v16 = (unint64_t *)&v48->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a1 = &unk_24C544B18;
  v40 = a1 + 1;
  v41 = "ISchema::ISchema( wrap)";
  v18 = sub_20BE75ADC((uint64_t)(a1 + 1));
  LODWORD(__p) = 0;
  v36 = 0;
  LODWORD(v30) = 0;
  LODWORD(v31) = 0;
  v19 = sub_20BE6DA40(a3, a4, (uint64_t **)&__p, (uint64_t **)&v30);
  v20 = v18 + 32;
  if ((sub_20C7539FC(v20, v19) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&__p);
    v23 = sub_20BDDC1C8(&v37, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(v33, "schema");
    sub_20BE01E1C(v20, (const void **)v33, &v30);
    if ((v32 & 0x80u) == 0)
      v24 = &v30;
    else
      v24 = v30;
    if ((v32 & 0x80u) == 0)
      v25 = v32;
    else
      v25 = v31;
    v26 = sub_20BDDC1C8(v23, (uint64_t)v24, v25);
    v27 = sub_20BDDC1C8(v26, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v27, (uint64_t)"AbcGeom_Curve_v2", 16);
    if ((char)v32 < 0)
      operator delete(v30);
    if (v34 < 0)
      operator delete(v33[0]);
    std::stringbuf::str();
    sub_20BDDBF20(&v30, (__int128 *)v33);
    if (v34 < 0)
      operator delete(v33[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v29 = sub_20BDDC09C(exception, (uint64_t)&v30);
    __cxa_throw(v29, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::ICompoundProperty::getParent((Alembic::Abc::v12::ICompoundProperty *)a2, (uint64_t)&__p);
  if (v38 < 0)
  {
    if (v37)
      goto LABEL_18;
LABEL_22:
    v21 = v39;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
    if (v21)
      return a1;
    goto LABEL_19;
  }
  if (!v38)
    goto LABEL_22;
LABEL_18:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
LABEL_19:
  sub_20BDDC0E4(&__p, ".geom");
  sub_20C753420((uint64_t)a1, a2, (uint64_t)&__p, a3, a4);
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  return a1;
}

void sub_20C752824(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  void *v31;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v31 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v27 + 40));
  MEMORY[0x212B929D0](v27 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v28 - 144, (uint64_t)v31);
  else
    sub_20BE02504(v28 - 144, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C752708);
}

void sub_20C752948()
{
  void **v0;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v0);
  JUMPOUT(0x20C7528D8);
}

void sub_20C752978(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t PropertyHeader;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  int v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *__p[2];
  char v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  int v57[12];
  void *v58;
  std::string v59;
  uint64_t v60[2];
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66[4];
  std::__shared_weak_count *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;

  v6 = a1 + 8;
  v70 = a1 + 8;
  v71 = "IGeomBaseSchema::init()";
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
  v58 = &v59;
  v65 = 2;
  v63 = 0;
  v64 = 0;
  sub_20BDEBF8C(v66, (const void ***)&v58);
  v66[3] = 0;
  v67 = 0;
  v68 = 0;
  v69 = 1;
  sub_20BDE9D48((uint64_t)&v58, v59.__r_.__value_.__l.__data_);
  sub_20BE02E30(a2, (uint64_t)&v65);
  sub_20BE02E30(a3, (uint64_t)&v65);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  v61 = v7;
  v62 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v55 = v7;
    v56 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v55 = v7;
    v56 = 0;
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v55, &v53, &v51);
  sub_20BDDC0E4(__p, ".selfBnds");
  sub_20BE13A80((uint64_t)&v58, v57, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 56) = (_DWORD)v58;
  std::string::operator=((std::string *)(a1 + 64), &v59);
  sub_20BDE881C((_QWORD *)(a1 + 88), v60);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v58);
  if (v50 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  v12 = v56;
  if (v56)
  {
    v13 = (unint64_t *)&v56->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_20BDDC0E4(&v58, ".childBnds");
  PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v16 = PropertyHeader;
  if (v59.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v58);
    if (!v16)
      goto LABEL_29;
  }
  else if (!PropertyHeader)
  {
    goto LABEL_29;
  }
  v47 = v61;
  v48 = v62;
  if (v62)
  {
    v17 = (unint64_t *)&v62->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v47, &v53, &v51);
  sub_20BDDC0E4(__p, ".childBnds");
  sub_20BE13A80((uint64_t)&v58, v57, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 104) = (_DWORD)v58;
  std::string::operator=((std::string *)(a1 + 112), &v59);
  sub_20BDE881C((_QWORD *)(a1 + 136), v60);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v58);
  if (v50 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  v19 = v48;
  if (v48)
  {
    v20 = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_29:
  sub_20BDDC0E4(&v58, ".arbGeomParams");
  v22 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  v23 = v22;
  if (v59.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v58);
    if (!v23)
      goto LABEL_43;
  }
  else if (!v22)
  {
    goto LABEL_43;
  }
  v45 = v61;
  v46 = v62;
  if (v62)
  {
    v24 = (unint64_t *)&v62->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v45, &v53, &v51);
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v43 = 1;
  v44 = v65;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v58, v57, __p, &v43);
  *(_DWORD *)(a1 + 152) = (_DWORD)v58;
  std::string::operator=((std::string *)(a1 + 160), &v59);
  sub_20BDE881C((_QWORD *)(a1 + 184), v60);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v58);
  if (v50 < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_43:
  sub_20BDDC0E4(&v58, ".userProperties");
  v29 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  if (v59.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v58);
  v30 = v62;
  if (v29)
  {
    v41 = v61;
    v42 = v62;
    if (v62)
    {
      v31 = (unint64_t *)&v62->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v53 = 0;
    v54 = 0;
    v51 = 0;
    v52 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v57, &v41, &v53, &v51);
    sub_20BDDC0E4(__p, ".userProperties");
    v43 = 1;
    v44 = v65;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v58, v57, __p, &v43);
    *(_DWORD *)(a1 + 200) = (_DWORD)v58;
    std::string::operator=((std::string *)(a1 + 208), &v59);
    sub_20BDE881C((_QWORD *)(a1 + 232), v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v58);
    if (v50 < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
    v33 = v42;
    if (v42)
    {
      v34 = (unint64_t *)&v42->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v30 = v62;
  }
  if (v30)
  {
    v36 = (unint64_t *)&v30->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v38 = v67;
  if (v67)
  {
    v39 = (unint64_t *)&v67->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20BDE9D48((uint64_t)v66, (_QWORD *)v66[1]);
}

void sub_20C752F44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v44;

  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a36);
  if (a23 < 0)
    operator delete(__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a30);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v41 - 176));
  sub_20BE02EB0(v41 - 144);
  v44 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v41 - 80, (uint64_t)v44);
  else
    sub_20BE02504(v41 - 80, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C752F28);
}

void sub_20C753110(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C753130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v34 - 160));
  sub_20BDE9D48((uint64_t)&a33, a34);
  JUMPOUT(0x20C7530DCLL);
}

void sub_20C753150()
{
  JUMPOUT(0x20C7530D4);
}

uint64_t sub_20C75315C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C544AE8;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_20C7531B8(void **a1)
{
  void **v2;

  *a1 = &unk_24C544AE8;
  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(a1 + 7);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  operator delete(a1);
}

void sub_20C753214(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20C753298(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_5;
    return 0;
  }
  if (*(_BYTE *)(a1 + 39))
    return 0;
LABEL_5:
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t sub_20C7532E4(unsigned int *a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v15;
  _QWORD *v16[2];
  unsigned int v17;
  uint64_t v18[4];
  std::__shared_weak_count *v19;
  int v20;
  uint64_t v21;

  v9 = *a1;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (const void **)v16;
  v17 = v9;
  sub_20BDEBF8C(v18, &v15);
  v18[3] = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  sub_20BDE9D48((uint64_t)&v15, v16[0]);
  sub_20BE02E30(a2, (uint64_t)&v17);
  sub_20BE02E30(a3, (uint64_t)&v17);
  sub_20BE02E30(a4, (uint64_t)&v17);
  sub_20BE02E30(a5, (uint64_t)&v17);
  v10 = v17;
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_20BDE9D48((uint64_t)v18, (_QWORD *)v18[1]);
  return v10;
}

void sub_20C7533F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20C753420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  char v41;
  void *v42[2];
  unsigned __int8 v43;
  __int128 v44;
  _QWORD v45[37];
  int v46;
  uint64_t v47[4];
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;

  *((_QWORD *)&v44 + 1) = 0;
  v45[0] = 0;
  *(_QWORD *)&v44 = (char *)&v44 + 8;
  v45[35] = 0;
  v45[36] = 0;
  v46 = 2;
  sub_20BDEBF8C(v47, (const void ***)&v44);
  v47[3] = 0;
  v48 = 0;
  v49 = 0;
  v50 = 1;
  sub_20BDE9D48((uint64_t)&v44, *((_QWORD **)&v44 + 1));
  sub_20BE02E30(a4, (uint64_t)&v46);
  sub_20BE02E30(a5, (uint64_t)&v46);
  *(_DWORD *)(a1 + 8) = v46;
  v45[33] = a1 + 8;
  v45[34] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(a2 + 31))
  {
LABEL_27:
    sub_20BDDBD68((uint64_t)&v44);
    sub_20BDDC1C8(v45, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = sub_20BDDC09C(exception, (uint64_t)v42);
    __cxa_throw(v25, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    goto LABEL_27;
  v11 = *(std::__shared_weak_count **)(a2 + 40);
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a3);
  if (!v14)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v26 = sub_20BDDC1C8(v45, (uint64_t)"Nonexistent compound property: ", 31);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v26, v28, v29);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v30 = __cxa_allocate_exception(0x20uLL);
    v31 = sub_20BDDC09C(v30, (uint64_t)v42);
    __cxa_throw(v31, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v15 = v14 + 32;
  if ((sub_20C7539FC(v14 + 32, v50) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v44);
    v32 = sub_20BDDC1C8(v45, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(__p, "schema");
    sub_20BE01E1C(v15, (const void **)__p, v42);
    if ((v43 & 0x80u) == 0)
      v33 = v42;
    else
      v33 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v34 = v43;
    else
      v34 = (uint64_t)v42[1];
    v35 = sub_20BDDC1C8(v32, (uint64_t)v33, v34);
    v36 = sub_20BDDC1C8(v35, (uint64_t)" to expected: ", 14);
    sub_20BDDC1C8(v36, (uint64_t)"AbcGeom_Curve_v2", 16);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (v41 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    sub_20BDDBF20(v42, (__int128 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    v38 = sub_20BDDC09C(v37, (uint64_t)v42);
    __cxa_throw(v38, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(&v44, v10, a3);
  sub_20BDE82DC(a1 + 40, &v44);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v39)
  {
    v19 = (unint64_t *)&v39->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v21 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v47, (_QWORD *)v47[1]);
}

void sub_20C753830(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  v29 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v25 + 40));
  MEMORY[0x212B929D0](v25 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v26 - 160, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 160, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C7535D0);
}

void sub_20C753974()
{
  uint64_t v0;

  sub_20BE02EB0(v0 - 128);
  JUMPOUT(0x20C7539A4);
}

uint64_t sub_20C7539AC(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7539D4(void **a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C7539FC(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;

  if (a2 == 1)
    return 1;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 0;
  sub_20BDDC0E4(__p, "schema");
  sub_20BE01E1C(a1, (const void **)__p, &v9);
  if (v11 < 0)
  {
    v2 = v10 == 16 && *v9 == 0x5F6D6F6547636241 && v9[1] == 0x32765F6576727543;
    operator delete(v9);
  }
  else
  {
    v2 = v11 == 16 && v9 == (_QWORD *)0x5F6D6F6547636241 && v10 == 0x32765F6576727543;
  }
  if (v8 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20C753B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C753B24(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void sub_20C753B9C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C753BC0(uint64_t a1)
{
  uint64_t result;

  sub_20BDEBF08((_QWORD *)(a1 + 32));
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08((_QWORD *)(a1 + 80));
  MEMORY[0x212B929D0](a1 + 56, "");
  sub_20BDEBF08((_QWORD *)(a1 + 128));
  result = MEMORY[0x212B929D0](a1 + 104, "");
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_20C753C24(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C544A60;
  v2 = (void **)(a1 + 56);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 992));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 944));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 896));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 840));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 792));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 744));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 688));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 640));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 592));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 536));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 488));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 440));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 392));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 344));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 296));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = &unk_24C544AE8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 8));
  return a1;
}

uint64_t sub_20C753D28(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544B38;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C753D58(void **a1)
{
  *a1 = off_24C544B38;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C753D88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544B38;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C753DC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C753DDC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544B38;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C753DF8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C753E00(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C753E28(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C753E44(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544B98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C753E80()
{
  return &unk_24C544B98;
}

uint64_t sub_20C753E8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544BB8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C753EBC(void **a1)
{
  *a1 = off_24C544BB8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C753EEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544BB8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C753F2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C753F40(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544BB8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C753F5C(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C753F64(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C753F8C(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C74A6A8((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C753F94(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544B98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C753FD0()
{
  return &unk_24C544B98;
}

uint64_t sub_20C753FDC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544C28;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C75400C(void **a1)
{
  *a1 = off_24C544C28;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C75403C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544C28;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75407C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C754090(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544C28;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7540AC(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C7540B4(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C7540DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  char *v11;
  double *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  float v22;
  char *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _OWORD v36[2];
  double *v37;
  char *v38;
  std::type_info **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  sub_20C74ABF4(a1 + 8, a3, &v34);
  if (v34)
  {
    v4 = *(uint64_t **)(v34 + 16);
    v5 = *(_QWORD *)(v34 + 24) - (_QWORD)v4;
    if (v5)
    {
      v6 = v5 >> 3;
      if (v6 <= 1)
        v6 = 1;
      v7 = 1;
      do
      {
        v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v9 = *(float **)v34;
    sub_20BF577E4((uint64_t)v36, v7);
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v10, v11);
    v12 = v37;
    v13 = *(uint64_t **)(v34 + 16);
    v14 = *(_QWORD *)(v34 + 24) - (_QWORD)v13;
    if (v14)
    {
      v15 = v14 >> 3;
      if (v15 <= 1)
        v15 = 1;
      v16 = 1;
      do
      {
        v17 = v16;
        v19 = *v13++;
        v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        v20 = v17 * v18;
        v21 = v37;
        do
        {
          v22 = *v9++;
          *v21++ = v22;
          --v20;
        }
        while (v20);
      }
    }
    v39 = &off_24C51E978;
    v23 = (char *)operator new(0x30uLL);
    v24 = v36[1];
    *(_OWORD *)v23 = v36[0];
    *((_OWORD *)v23 + 1) = v24;
    *((_QWORD *)v23 + 4) = v12;
    if (v12)
    {
      v25 = (unint64_t *)*((_QWORD *)v23 + 3);
      if (!v25)
        v25 = (unint64_t *)(v12 - 2);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (unsigned int *)(v23 + 40);
    atomic_store(0, (unsigned int *)v23 + 10);
    v38 = v23;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v39 = 0;
  }
  v29 = sub_20C7430F4(a2, (uint64_t)&v38);
  sub_20BF4C2D8((uint64_t)&v38);
  v30 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v29;
}

void sub_20C7542B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C754334(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544B98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C754370()
{
  return &unk_24C544B98;
}

uint64_t sub_20C75437C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544C98;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7543AC(void **a1)
{
  *a1 = off_24C544C98;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7543DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544C98;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75441C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C754430(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544C98;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75444C(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C754454(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C75447C(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C754498(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544CF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7544D4()
{
  return &unk_24C544CF8;
}

uint64_t sub_20C7544E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544D20;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C754510(void **a1)
{
  *a1 = off_24C544D20;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C754540(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544D20;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C754580(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C754594(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544D20;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7545B0(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C7545B8(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C7545E0(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C7472BC((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C7545E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544CF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C754624()
{
  return &unk_24C544CF8;
}

uint64_t sub_20C754630(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544D90;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C754660(void **a1)
{
  *a1 = off_24C544D90;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C754690(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544D90;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7546D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7546E4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544D90;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C754700(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C754708(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C754730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v28 = 0;
  sub_20BE1DB98(a1 + 8, (uint64_t)&v27, a3);
  sub_20C74772C(&v27, v30);
  v4 = sub_20BF5B684((pxrInternal__aapl__pxrReserved__::VtValue *)v30);
  v5 = *(_OWORD *)(v4 + 16);
  v24 = *(_OWORD *)v4;
  v25 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v26 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v25 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v25 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::PointAndTangentArrays(v21, &v24);
  v29[1] = off_24C51EC58;
  v9 = (char *)operator new(0x30uLL);
  v10 = v21[1];
  *(_OWORD *)v9 = v21[0];
  *((_OWORD *)v9 + 1) = v10;
  v11 = v22;
  *((_QWORD *)v9 + 4) = v22;
  if (v11)
  {
    v12 = (unint64_t *)(v11 - 16);
    if (*((_QWORD *)v9 + 3))
      v12 = (unint64_t *)*((_QWORD *)v9 + 3);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(v9 + 40);
  atomic_store(0, (unsigned int *)v9 + 10);
  v29[0] = v9;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = sub_20C7430F4(a2, (uint64_t)v29);
  sub_20BF4C2D8((uint64_t)v29);
  sub_20BF5618C((uint64_t)&v23);
  sub_20BF5618C((uint64_t)v21);
  sub_20BF5618C((uint64_t)&v24);
  sub_20BF4C2D8((uint64_t)v30);
  v17 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_20C7548C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C754978(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544CF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7549B4()
{
  return &unk_24C544CF8;
}

uint64_t sub_20C7549C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544E00;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7549F0(void **a1)
{
  *a1 = off_24C544E00;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C754A20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544E00;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C754A60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C754A74(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544E00;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C754A90(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C754A98(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C754AC0(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C754ADC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544E60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C754B18()
{
  return &unk_24C544E60;
}

uint64_t sub_20C754B24(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544E88;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C754B54(void **a1)
{
  *a1 = off_24C544E88;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C754B84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544E88;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C754BC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C754BD8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544E88;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C754BF4(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C754BFC(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C754C24(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C7472BC((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), a2);
}

uint64_t sub_20C754C2C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544E60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C754C68()
{
  return &unk_24C544E60;
}

uint64_t sub_20C754C74(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544EF8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C754CA4(void **a1)
{
  *a1 = off_24C544EF8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C754CD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C544EF8;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C754D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C754D28(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544EF8;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C754D44(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C754D4C(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C754D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _BYTE v21[40];
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v28 = 0;
  sub_20BE1DB98(a1 + 8, (uint64_t)&v27, a3);
  sub_20C74772C(&v27, v30);
  v4 = sub_20BF5B684((pxrInternal__aapl__pxrReserved__::VtValue *)v30);
  v5 = *(_OWORD *)(v4 + 16);
  v24 = *(_OWORD *)v4;
  v25 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v26 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v25 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v25 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::PointAndTangentArrays(v21, &v24);
  v29[1] = off_24C51EC58;
  v9 = (char *)operator new(0x30uLL);
  v10 = v22[1];
  *(_OWORD *)v9 = v22[0];
  *((_OWORD *)v9 + 1) = v10;
  v11 = v23;
  *((_QWORD *)v9 + 4) = v23;
  if (v11)
  {
    v12 = (unint64_t *)(v11 - 16);
    if (*((_QWORD *)v9 + 3))
      v12 = (unint64_t *)*((_QWORD *)v9 + 3);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(v9 + 40);
  atomic_store(0, (unsigned int *)v9 + 10);
  v29[0] = v9;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = sub_20C7430F4(a2, (uint64_t)v29);
  sub_20BF4C2D8((uint64_t)v29);
  sub_20BF5618C((uint64_t)v22);
  sub_20BF5618C((uint64_t)v21);
  sub_20BF5618C((uint64_t)&v24);
  sub_20BF4C2D8((uint64_t)v30);
  v17 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_20C754F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C754FBC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544E60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C754FF8()
{
  return &unk_24C544E60;
}

uint64_t sub_20C755004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v14 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

void sub_20C755134(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C755158(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544F68;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C75519C(void **a1)
{
  *a1 = off_24C544F68;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7551E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544F68;
  sub_20C755004((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C755220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C755234(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544F68;
  return sub_20C755004((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C755250(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C755284(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C7552C0(uint64_t a1)
{
  return sub_20C74B960(a1 + 8);
}

uint64_t sub_20C7552C8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544FC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C755304()
{
  return &unk_24C544FC8;
}

uint64_t sub_20C755310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v14 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

void sub_20C755440(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C755464(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C544FE8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7554A8(void **a1)
{
  *a1 = off_24C544FE8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C7554EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C544FE8;
  sub_20C755004((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75552C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C755540(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C544FE8;
  return sub_20C755004((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75555C(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C755590(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

void sub_20C7555CC(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IArrayProperty *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_20C74B5B8(a1 + 8))
  {
    sub_20C74BD08((uint64_t)v3, &v23);
    v4 = sub_20C74BDA4(v3);
    if (sub_20C74BEA8(v3))
      v5 = v4 != 0;
    else
      v5 = v4;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C755768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7557C4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544FC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C755800()
{
  return &unk_24C544FC8;
}

uint64_t sub_20C75580C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C545058;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C755850(void **a1)
{
  *a1 = off_24C545058;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C755894(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = off_24C545058;
  sub_20C755004((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7558D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7558E8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545058;
  return sub_20C755004((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C755904(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_20C755938(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  operator delete(a1);
}

uint64_t sub_20C755974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v18 = 0u;
  v19 = 0u;
  sub_20C755B74(a1 + 8, (uint64_t)&v18, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  v17 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20C74AAE8((uint64_t *)&v17, v20);
  v7 = sub_20C7430F4(a2, (uint64_t)v20);
  sub_20BF4C2D8((uint64_t)v20);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v7;
}

void sub_20C755AC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  sub_20BF4C2D8(v2 - 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20C96BEA8();
  _Unwind_Resume(a1);
}

uint64_t sub_20C755B2C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C544FC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C755B68()
{
  return &unk_24C544FC8;
}

void sub_20C755B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void *__p;
  _BYTE *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;

  v6 = sub_20BE6E6E4(a1);
  *(_DWORD *)(a2 + 32) = sub_20BE14C08(v6 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 144);
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(_QWORD *)(a1 + 64))
      goto LABEL_5;
LABEL_34:
    sub_20BE1DD58(a1, a2, a3);
    return;
  }
  if (*(_BYTE *)(a1 + 79))
    goto LABEL_34;
LABEL_5:
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_34;
  sub_20C74CA54(a1 + 48, a3, &v37);
  if (v37)
  {
    v7 = (uint64_t *)v37[2];
    v8 = v37[3] - (_QWORD)v7;
    if (!v8)
      goto LABEL_35;
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    v10 = 1;
    do
    {
      v11 = *v7++;
      v10 *= v11;
      --v9;
    }
    while (v9);
    if (v10)
    {
      sub_20C74ABF4(a1, a3, &v35);
      if (v10 >> 62)
        v12 = -1;
      else
        v12 = 4 * v10;
      v13 = operator new[](v12);
      v14 = v13;
      v15 = v35;
      v16 = (uint64_t *)v35[2];
      v17 = v35[3] - (_QWORD)v16;
      if (v17)
      {
        v18 = v17 >> 3;
        if (v18 <= 1)
          v19 = 1;
        else
          v19 = v18;
        v17 = 1;
        do
        {
          v20 = *v16++;
          v17 *= v20;
          --v19;
        }
        while (v19);
      }
      v21 = 0;
      v22 = *v37;
      if (v10 <= 1)
        v23 = 1;
      else
        v23 = v10;
      do
      {
        v24 = *(unsigned int *)(v22 + 4 * v21);
        if (v17 <= v24)
          break;
        v13[v21++] = *(_DWORD *)(*v15 + 4 * v24);
      }
      while (v23 != v21);
      v32 = v10;
      sub_20BDE8894(&__p, 1uLL, &v32);
      v25 = operator new(0x28uLL);
      *v25 = v14;
      v25[1] = 0x10000000ALL;
      v25[3] = 0;
      v25[4] = 0;
      v25[2] = 0;
      sub_20BDE1364(v25 + 2, __p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 3);
      sub_20C755E10((_QWORD *)a2, (uint64_t)v25);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      v26 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_35:
      sub_20BE1DD58(a1, a2, a3);
    }
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20C755DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  _Unwind_Resume(a1);
}

void sub_20C755E10(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C755E80(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20C755E80(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C5450C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C755ED0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;

  __cxa_begin_catch(a1);
  sub_20BDE1454((int)&a13, v13);
  __cxa_rethrow();
}

void sub_20C755EE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C755F00(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C755F14(uint64_t a1)
{
  sub_20BDE1454(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C755F1C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C516E08))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C755F5C(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  void **v5;
  uint64_t v7;
  void *v8;
  int v9;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3 == 2)
  {
    if (*(_DWORD *)(a1 + 56) == 10)
      return sub_20BE1F350(a1 + 32, a2);
  }
  else if (!v3)
  {
    v4 = a1 + 32;
    sub_20BDDC0E4(v11, "podName");
    sub_20BE01E1C(v4, (const void **)v11, __p);
    if (v14 < 0)
    {
      if (__p[1] != (void *)9)
      {
        v7 = 0;
        goto LABEL_20;
      }
      v5 = (void **)__p[0];
    }
    else
    {
      if (v14 != 9)
      {
        v7 = 0;
        goto LABEL_21;
      }
      v5 = __p;
    }
    v8 = *v5;
    v9 = *((unsigned __int8 *)v5 + 8);
    if (v8 == (void *)0x5F323374616F6C66 && v9 == 116)
    {
      v7 = sub_20BE1F350(v4, a2);
      if ((v14 & 0x80) == 0)
        goto LABEL_21;
    }
    else
    {
      v7 = 0;
      if ((v14 & 0x80) == 0)
        goto LABEL_21;
    }
LABEL_20:
    operator delete(__p[0]);
LABEL_21:
    if (v12 < 0)
      operator delete(v11[0]);
    return v7;
  }
  return 0;
}

void sub_20C756080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7560B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  std::string *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v25;
  _QWORD *exception;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t *v41;
  uint64_t **v42;
  void *v43[2];
  char v44;
  void *__p;
  int v46;
  char v47;
  std::string *v48;
  std::string v49;
  uint64_t v50[37];
  int v51;
  uint64_t v52[4];
  std::__shared_weak_count *v53;
  int v54;
  uint64_t v55;

  *(_DWORD *)a1 = 2;
  v10 = (std::string *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v40 = (int *)(a1 + 96);
  sub_20BDDC0E4((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = *(_DWORD *)a2;
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
  v48 = &v49;
  v50[35] = 0;
  v50[36] = 0;
  v51 = v11;
  v41 = sub_20BDEBF8C(v52, (const void ***)&v48);
  v52[3] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 1;
  sub_20BDE9D48((uint64_t)&v48, v49.__r_.__value_.__l.__data_);
  v42 = a4;
  sub_20BE02E30(a4, (uint64_t)&v51);
  sub_20BE02E30(a5, (uint64_t)&v51);
  *(_DWORD *)a1 = v51;
  v50[33] = a1;
  v50[34] = (uint64_t)"ITypedGeomParam::ITypedGeomParam()";
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(std::__shared_weak_count **)(a2 + 40);
  v50[31] = v12;
  v50[32] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!v12)
  {
    sub_20BDDBD68((uint64_t)&v48);
    v25 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_20BDDC1C8(v25, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v27, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3);
  if (!v16)
  {
    sub_20BDDBD68((uint64_t)&v48);
    v28 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    v29 = *(char *)(a3 + 23);
    if (v29 >= 0)
      v30 = a3;
    else
      v30 = *(_QWORD *)a3;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a3 + 23);
    else
      v31 = *(_QWORD *)(a3 + 8);
    sub_20BDDC1C8(v28, v30, v31);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, (__int128 *)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    v32 = __cxa_allocate_exception(0x20uLL);
    v33 = sub_20BDDC09C(v32, (uint64_t)&__p);
    __cxa_throw(v33, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  v17 = *(_DWORD *)(v16 + 24);
  if (v17 == 2)
  {
    sub_20BE1ED68((uint64_t)&v48, (int *)a2, a3, v42, a5);
    *(_DWORD *)a1 = (_DWORD)v48;
    std::string::operator=(v10, &v49);
    sub_20BDE881C((_QWORD *)(a1 + 32), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    v18 = 0;
  }
  else
  {
    if (v17)
    {
      sub_20BDDBD68((uint64_t)&v48);
      v34 = sub_20BDDC1C8(&v49.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      v35 = *(char *)(a3 + 23);
      if (v35 >= 0)
        v36 = a3;
      else
        v36 = *(_QWORD *)a3;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      sub_20BDDC1C8(v34, v36, v37);
      std::stringbuf::str();
      sub_20BDDBF20(&__p, (__int128 *)v43);
      if (v44 < 0)
        operator delete(v43[0]);
      v38 = __cxa_allocate_exception(0x20uLL);
      v39 = sub_20BDDC09C(v38, (uint64_t)&__p);
      __cxa_throw(v39, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
    }
    LODWORD(__p) = 1;
    v46 = v51;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v48, a2, a3, &__p);
    *v40 = (int)v48;
    std::string::operator=((std::string *)(a1 + 104), &v49);
    sub_20BDE881C((_QWORD *)(a1 + 128), v50);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v48);
    sub_20BDDC0E4(&__p, ".indices");
    sub_20BE1FC6C((uint64_t)&v48, v40, (uint64_t)&__p, v42, a5);
    *(_DWORD *)(a1 + 48) = (_DWORD)v48;
    std::string::operator=((std::string *)(a1 + 56), &v49);
    sub_20BDE881C((_QWORD *)(a1 + 80), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    if (v47 < 0)
      operator delete(__p);
    sub_20BDDC0E4(&__p, ".vals");
    sub_20BE1ED68((uint64_t)&v48, v40, (uint64_t)&__p, v42, a5);
    *(_DWORD *)a1 = (_DWORD)v48;
    std::string::operator=(v10, &v49);
    sub_20BDE881C((_QWORD *)(a1 + 32), v50);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)&v48);
    if (v47 < 0)
      operator delete(__p);
    v18 = 1;
  }
  *(_BYTE *)(a1 + 144) = v18;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v21 = v53;
  if (v53)
  {
    v22 = (unint64_t *)&v53->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20BDE9D48((uint64_t)v41, (_QWORD *)v52[1]);
  return a1;
}

void sub_20C756604(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v29;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v26 - 200));
  v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v26 - 184, (uint64_t)v29);
  else
    sub_20BE02504(v26 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C7563ECLL);
}

void sub_20C75671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, Alembic::Abc::v12::ICompoundProperty *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  uint64_t v24;

  sub_20BE02EB0(v24 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a12);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a13);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7567A8(uint64_t a1, int a2)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v11;
  void *v12;
  unsigned __int8 v15;
  size_t v16;
  std::string::size_type v17;
  int v18;
  std::string *p_p;
  uint64_t v20;
  void **p_s1;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  std::string __p;
  void *v30[2];
  char v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  std::string v35;
  const void *v36[2];
  char v37;
  _QWORD *v38;
  size_t v39;
  char v40;
  unsigned __int8 v41;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v36, "schema");
    sub_20BE01E1C(a1, v36, &v38);
    if (((char)v41 & 0x80000000) == 0)
    {
      v11 = v41 == 17 && v38 == (_QWORD *)0x5F6D6F6547636241 && v39 == 0x765F73746E696F50 && v40 == 49;
      goto LABEL_78;
    }
    v12 = v38;
    v11 = v39 == 17 && *v38 == 0x5F6D6F6547636241 && v38[1] == 0x765F73746E696F50 && *((_BYTE *)v38 + 16) == 49;
    goto LABEL_77;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v36, "schemaObjTitle");
  sub_20BE01E1C(a1, v36, &v38);
  sub_20C756B18(&v35);
  v3 = v41;
  if ((v41 & 0x80u) == 0)
    v4 = v41;
  else
    v4 = v39;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_45:
    sub_20BDDC0E4(v30, "schema");
    sub_20BE01E1C(a1, (const void **)v30, &__s1);
    sub_20C756B18(&__p);
    v15 = v34;
    if ((v34 & 0x80u) == 0)
      v16 = v34;
    else
      v16 = __n;
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = __p.__r_.__value_.__l.__size_;
    if (v16 != v17)
    {
      v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v34 < 0)
    {
      v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0)
            operator delete(__s1);
          if (v31 < 0)
            operator delete(v30[0]);
          if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_75;
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v34;
        goto LABEL_69;
      }
      v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v22 = v23;
        v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v24 = v25;
        v27 = v20-- != 0;
        v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v35;
  else
    v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v41 & 0x80) != 0)
  {
    if (memcmp(v38, v7, v39))
      goto LABEL_45;
  }
  else if (v41)
  {
    v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_65;
    }
    goto LABEL_45;
  }
LABEL_65:
  v11 = 1;
  if (v6 < 0)
LABEL_74:
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v41 & 0x80000000) == 0)
    goto LABEL_78;
  v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0)
    operator delete((void *)v36[0]);
  return v11;
}

void sub_20C756A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C756B18(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Points_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C756BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C756BF4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C545118;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C756C24(void **a1)
{
  *a1 = off_24C545118;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C756C54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C545118;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C756C94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C756CA8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545118;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C756CC4(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C756CCC(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C756CF4(uint64_t a1)
{
  return sub_20BE6E6E4(a1 + 8) + 32;
}

uint64_t sub_20C756D10(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545178))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C756D4C()
{
  return &unk_24C545178;
}

uint64_t sub_20C756D58(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C545198;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C756D88(void **a1)
{
  *a1 = off_24C545198;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C756DB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C545198;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C756DF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C756E0C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545198;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C756E28(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C756E30(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

void sub_20C756E58(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::Abc::v12::IArrayProperty *v3;
  uint64_t NumSamples;
  uint64_t v5;
  uint64_t i;
  double SampleTime;
  double v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v23;
  std::__shared_weak_count *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), &v23);
    NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(v3))
      v5 = NumSamples != 0;
    else
      v5 = NumSamples;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v23, i);
        v8 = SampleTime;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = *a2;
          v13 = v10 - *a2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_20BDDF694();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v16);
            v12 = *a2;
            v10 = a2[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (double *)&v17[8 * v13];
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = SampleTime;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    v20 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C757008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C757064(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545178))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7570A0()
{
  return &unk_24C545178;
}

uint64_t sub_20C7570AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C545208;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C7570DC(void **a1)
{
  *a1 = off_24C545208;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20C75710C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24C545208;
  sub_20C389C80((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75714C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C757160(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545208;
  return sub_20C389C80((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75717C(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 8));
}

void sub_20C757184(void **a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C7571AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _OWORD v36[2];
  _QWORD *v37;
  char *v38;
  std::type_info **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  sub_20C757448(a1 + 8, a3, &v34);
  if (v34)
  {
    v4 = *(uint64_t **)(v34 + 16);
    v5 = *(_QWORD *)(v34 + 24) - (_QWORD)v4;
    if (v5)
    {
      v6 = v5 >> 3;
      if (v6 <= 1)
        v6 = 1;
      v7 = 1;
      do
      {
        v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v9 = *(uint64_t **)v34;
    sub_20C003FC4((uint64_t)v36, v7);
    sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v10, v11);
    v12 = v37;
    v13 = *(uint64_t **)(v34 + 16);
    v14 = *(_QWORD *)(v34 + 24) - (_QWORD)v13;
    if (v14)
    {
      v15 = v14 >> 3;
      if (v15 <= 1)
        v15 = 1;
      v16 = 1;
      do
      {
        v17 = v16;
        v19 = *v13++;
        v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        v20 = v17 * v18;
        v21 = v37;
        do
        {
          v22 = *v9++;
          *v21++ = v22;
          --v20;
        }
        while (v20);
      }
    }
    v39 = &off_24C5250B0;
    v23 = (char *)operator new(0x30uLL);
    v24 = v36[1];
    *(_OWORD *)v23 = v36[0];
    *((_OWORD *)v23 + 1) = v24;
    *((_QWORD *)v23 + 4) = v12;
    if (v12)
    {
      v25 = (unint64_t *)*((_QWORD *)v23 + 3);
      if (!v25)
        v25 = v12 - 2;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (unsigned int *)(v23 + 40);
    atomic_store(0, (unsigned int *)v23 + 10);
    v38 = v23;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v39 = 0;
  }
  v29 = sub_20C7430F4(a2, (uint64_t)&v38);
  sub_20BF4C2D8((uint64_t)&v38);
  v30 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v29;
}

void sub_20C75737C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C757400(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545178))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75743C()
{
  return &unk_24C545178;
}

void sub_20C757448(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_20C757488(a1, (uint64_t)a3, a2);
}

void sub_20C757474(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void sub_20C757488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v13, a3);
  v12 = v13;
  if (*((_QWORD *)&v13 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20BDE82DC(a2, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20C757554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C757568(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C545278;
  *(_QWORD *)(a1 + 96) = &unk_24C519560;
  v2 = (void **)(a1 + 440);
  sub_20BE34B94(&v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 392));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 344));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

void sub_20C7575FC(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C545278;
  *(_QWORD *)(a1 + 96) = &unk_24C519560;
  v2 = (void **)(a1 + 440);
  sub_20BE34B94(&v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 392));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 344));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_20C757690(uint64_t a1, int a2)
{
  uint64_t v3;
  size_t v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned __int8 *v8;
  _BOOL8 v11;
  void *v12;
  unsigned __int8 v15;
  size_t v16;
  std::string::size_type v17;
  int v18;
  std::string *p_p;
  uint64_t v20;
  void **p_s1;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  std::string __p;
  void *v30[2];
  char v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  std::string v35;
  const void *v36[2];
  char v37;
  _QWORD *v38;
  size_t v39;
  char v40;
  unsigned __int8 v41;

  if (a2 == 2)
  {
    sub_20BDDC0E4(v36, "schema");
    sub_20BE01E1C(a1, v36, &v38);
    if (((char)v41 & 0x80000000) == 0)
    {
      v11 = v41 == 17 && v38 == (_QWORD *)0x5F6D6F6547636241 && v39 == 0x765F6172656D6143 && v40 == 49;
      goto LABEL_78;
    }
    v12 = v38;
    v11 = v39 == 17 && *v38 == 0x5F6D6F6547636241 && v38[1] == 0x765F6172656D6143 && *((_BYTE *)v38 + 16) == 49;
    goto LABEL_77;
  }
  if (a2 == 1)
    return 1;
  if (a2)
    return 0;
  sub_20BDDC0E4(v36, "schemaObjTitle");
  sub_20BE01E1C(a1, v36, &v38);
  sub_20C757A00(&v35);
  v3 = v41;
  if ((v41 & 0x80u) == 0)
    v4 = v41;
  else
    v4 = v39;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
LABEL_45:
    sub_20BDDC0E4(v30, "schema");
    sub_20BE01E1C(a1, (const void **)v30, &__s1);
    sub_20C757A00(&__p);
    v15 = v34;
    if ((v34 & 0x80u) == 0)
      v16 = v34;
    else
      v16 = __n;
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = __p.__r_.__value_.__l.__size_;
    if (v16 != v17)
    {
      v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v34 < 0)
    {
      v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0)
            operator delete(__s1);
          if (v31 < 0)
            operator delete(v30[0]);
          if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_75;
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        v15 = v34;
        goto LABEL_69;
      }
      v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v22 = v23;
        v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v24 = v25;
        v27 = v20-- != 0;
        v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v35;
  else
    v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v41 & 0x80) != 0)
  {
    if (memcmp(v38, v7, v39))
      goto LABEL_45;
  }
  else if (v41)
  {
    v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      v7 = (std::string *)((char *)v7 + 1);
      if (!--v3)
        goto LABEL_65;
    }
    goto LABEL_45;
  }
LABEL_65:
  v11 = 1;
  if (v6 < 0)
LABEL_74:
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v41 & 0x80000000) == 0)
    goto LABEL_78;
  v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0)
    operator delete((void *)v36[0]);
  return v11;
}

void sub_20C757980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C757A00(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Camera_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C757AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

Alembic::Abc::v12::IObject *sub_20C757ADC(Alembic::Abc::v12::IObject *a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Header;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v18;
  void *p_p;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type size;
  _QWORD *exception;
  _QWORD *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  void *__p;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t *v36;
  void *v37;
  _QWORD v38[5];
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  std::string v46;
  __int128 v47;
  char v48;
  _DWORD *v49;
  const char *v50;
  _BYTE v51[96];
  void **v52;

  v9 = (_QWORD *)sub_20BE04EB0((uint64_t)a1, a2);
  *v9 = &unk_24C545278;
  v10 = (uint64_t)(v9 + 12);
  sub_20C758024((uint64_t)(v9 + 12));
  v11 = sub_20BE04EB0((uint64_t)v51, a2);
  LODWORD(v36) = 0;
  LODWORD(v37) = 0;
  LODWORD(__p) = 0;
  LODWORD(v34) = 0;
  *((_DWORD *)a1 + 2) = sub_20BE04D74(v11, a4, a5, &v36, (uint64_t **)&__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v51);
  v49 = (_DWORD *)((char *)a1 + 8);
  v50 = "ISchemaObject::ISchemaObject( wrapflag)";
  Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v36) = 0;
  LODWORD(v37) = 0;
  LODWORD(__p) = 0;
  LODWORD(v34) = 0;
  v13 = sub_20BE6DA40(a4, a5, &v36, (uint64_t **)&__p);
  v14 = Header + 48;
  if ((sub_20C757690(v14, v13) & 1) == 0)
  {
    sub_20BDDBD68((uint64_t)&v36);
    v18 = sub_20BDDC1C8(v38, (uint64_t)"Incorrect match of schema: ", 27);
    sub_20BDDC0E4(&v47, "schemaObjTitle");
    sub_20BE01E1C(v14, (const void **)&v47, &__p);
    if ((v35 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v35 & 0x80u) == 0)
      v20 = v35;
    else
      v20 = v34;
    v21 = sub_20BDDC1C8(v18, (uint64_t)p_p, v20);
    v22 = sub_20BDDC1C8(v21, (uint64_t)" to expected: ", 14);
    sub_20C757A00(&v46);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v46;
    else
      v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      size = v46.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v22, (uint64_t)v23, size);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if ((char)v35 < 0)
      operator delete(__p);
    if (v48 < 0)
      operator delete((void *)v47);
    std::stringbuf::str();
    sub_20BDDBF20(&__p, &v47);
    if (v48 < 0)
      operator delete((void *)v47);
    exception = __cxa_allocate_exception(0x20uLL);
    v26 = sub_20BDDC09C(exception, (uint64_t)&__p);
    __cxa_throw(v26, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&__p);
  sub_20BDDC0E4(&v47, ".geom");
  v15 = *((_DWORD *)a1 + 2);
  LODWORD(v46.__r_.__value_.__l.__data_) = 1;
  LODWORD(v46.__r_.__value_.__r.__words[1]) = v15;
  LODWORD(v29) = 0;
  v30 = 0;
  LODWORD(v27) = 0;
  v28 = 0;
  v16 = sub_20BE6DA40(a4, a5, &v29, &v27);
  LODWORD(v31) = 5;
  v32 = v16;
  sub_20BE366BC((uint64_t)&v36, (uint64_t)&__p, (uint64_t)&v47, (uint64_t **)&v46, &v31);
  sub_20BE36210(v10, (uint64_t)&v36);
  v36 = (uint64_t *)&unk_24C519560;
  v52 = (void **)&v45;
  sub_20BE34B94(&v52);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(&v44);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v43);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v42);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v41);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(&v40);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v39);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(&v37);
  if (v48 < 0)
    operator delete((void *)v47);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  return a1;
}

void sub_20C757DF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _QWORD *v25;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a25);
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE17F08(v25);
  sub_20BE17F08(v25);
}

void sub_20C757F4C()
{
  Alembic::Abc::v12::IObject *v0;
  uint64_t v1;

  Alembic::Abc::v12::IObject::reset(v0);
  sub_20BE02504(v1 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C757CACLL);
}

void sub_20C757F70()
{
  __cxa_end_catch();
  JUMPOUT(0x20C757EC0);
}

void sub_20C757F7C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C757EC0);
}

void sub_20C757F8C(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &unk_24C545278;
  *(_QWORD *)(a1 + 96) = &unk_24C519560;
  v3 = (void **)(a1 + 440);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 392));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 344));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_20C758024(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C519560;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_DWORD *)(a1 + 248) = 2;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  return a1;
}

void sub_20C758144(_Unwind_Exception *a1)
{
  void **v1;
  Alembic::Abc::v12::IScalarProperty *v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;
  Alembic::Abc::v12::ICompoundProperty *v5;
  Alembic::Abc::v12::IScalarProperty *v6;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C7581A0()
{
  JUMPOUT(0x20C758190);
}

BOOL sub_20C7581A8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 40))
    return sub_20BE33AD0(a1 + 96);
  return 0;
}

uint64_t sub_20C7581D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = &unk_24C519560;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v19 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v19, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v24 = (_BYTE *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_20BDDBFAC(v24, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)v24 = v25;
  }
  v26 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  v29 = (_BYTE *)(a1 + 256);
  if (*(char *)(a2 + 279) < 0)
  {
    sub_20BDDBFAC(v29, *(void **)(a2 + 256), *(_QWORD *)(a2 + 264));
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)v29 = v30;
  }
  v31 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  v34 = (_BYTE *)(a1 + 304);
  if (*(char *)(a2 + 327) < 0)
  {
    sub_20BDDBFAC(v34, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    v35 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_OWORD *)v34 = v35;
  }
  v36 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  sub_20BE354D4((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3));
  return a1;
}

void sub_20C7584C4(_Unwind_Exception *a1)
{
  void **v1;
  Alembic::Abc::v12::IScalarProperty *v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;
  Alembic::Abc::v12::ICompoundProperty *v5;
  Alembic::Abc::v12::IScalarProperty *v6;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C758538(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C5452B0;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C7585E0(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C5452B0;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75868C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C5452B0;
  sub_20C758B18((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C7586CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7586E0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5452B0;
  return sub_20C758B18((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C7586FC(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C758704(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75872C(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C758748(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545320))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C758784()
{
  return &unk_24C545320;
}

uint64_t sub_20C758790(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7587E4((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C7587D0(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7587E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)a1 = &unk_24C519560;
  v9 = (_BYTE *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20BDDBFAC(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_20BDDBFAC(v14, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v19 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v19, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v24 = (_BYTE *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_20BDDBFAC(v24, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)v24 = v25;
  }
  v26 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  v29 = (_BYTE *)(a1 + 256);
  if (*(char *)(a2 + 279) < 0)
  {
    sub_20BDDBFAC(v29, *(void **)(a2 + 256), *(_QWORD *)(a2 + 264));
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)v29 = v30;
  }
  v31 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  v34 = (_BYTE *)(a1 + 304);
  if (*(char *)(a2 + 327) < 0)
  {
    sub_20BDDBFAC(v34, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    v35 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_OWORD *)v34 = v35;
  }
  v36 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v39 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v39;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  return a1;
}

void sub_20C758AB4(_Unwind_Exception *a1)
{
  void **v1;
  Alembic::Abc::v12::IScalarProperty *v2;
  void **v3;
  Alembic::Abc::v12::ICompoundProperty *v4;
  Alembic::Abc::v12::ICompoundProperty *v5;
  Alembic::Abc::v12::IScalarProperty *v6;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C758B10()
{
  JUMPOUT(0x20C758B00);
}

uint64_t sub_20C758B18(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C758B58(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C758B6C(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545348;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C758C14(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545348;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C758CC0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545348;
  sub_20C758B18((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C758D00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C758D14(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545348;
  return sub_20C758B18((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C758D30(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C758D38(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C758D60(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C758DB0(a1 + 8, a2);
}

uint64_t sub_20C758D68(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545320))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C758DA4()
{
  return &unk_24C545320;
}

void sub_20C758DB0(uint64_t a1@<X0>, double **a2@<X8>)
{
  Alembic::AbcGeom::v12::ICameraSchema *v4;
  Alembic::Abc::v12::IScalarProperty *v5;
  uint64_t NumSamples;
  uint64_t v7;
  uint64_t i;
  double SampleTime;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  Alembic::AbcCoreAbstract::v12::TimeSampling *v25;
  std::__shared_weak_count *v26;

  v4 = (Alembic::AbcGeom::v12::ICameraSchema *)(a1 + 96);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_20BE33AD0(a1 + 96))
  {
    v5 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 152);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling(v5, &v25);
    NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v5);
    if (Alembic::AbcGeom::v12::ICameraSchema::isConstant(v4))
      v7 = NumSamples != 0;
    else
      v7 = NumSamples;
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v25, i);
        v10 = SampleTime;
        v12 = a2[1];
        v11 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a2;
          v15 = v12 - *a2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            sub_20BDDF694();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_20BDDF6A8((uint64_t)(a2 + 2), v18);
            v14 = *a2;
            v12 = a2[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = (double *)&v19[8 * v15];
          *v20 = v10;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *((_QWORD *)v12-- - 1);
            *((_QWORD *)v20-- - 1) = v21;
          }
          *a2 = v20;
          a2[1] = v13;
          a2[2] = (double *)&v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = SampleTime;
          v13 = v12 + 1;
        }
        a2[1] = v13;
      }
    }
    v22 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_20C758F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C758FB0(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C5453B8;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C759058(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C5453B8;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C759104(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C5453B8;
  sub_20C758B18((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C759144(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759158(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5453B8;
  return sub_20C758B18((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C759174(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75917C(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C7591A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  double v7[22];
  uint64_t v8;
  void **v9;

  sub_20C759268(a1 + 104, a3, (uint64_t)v7);
  v4 = v7[0];
  v5 = sub_20C7592F8(a2, v4);
  v9 = (void **)&v8;
  sub_20BE34B94(&v9);
  return v5;
}

void sub_20C759204(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 176;
  sub_20BE34B94((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C759220(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545320))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75925C()
{
  return &unk_24C545320;
}

void sub_20C759268(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(int64x2_t *)(a3 + 128) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a3 + 144) = xmmword_20CA521E0;
  *(int64x2_t *)(a3 + 160) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  sub_20BE15D04(a3);
  Alembic::AbcGeom::v12::ICameraSchema::get(a1, a3, a2);
}

void sub_20C7592E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE34B94((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7592F8(uint64_t a1, float a2)
{
  uint64_t v2;
  float v4;
  float *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(float **, uint64_t))off_24C545418[v2])(&v5, a1);
}

uint64_t sub_20C759344()
{
  return 1;
}

uint64_t sub_20C75934C(int **a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = &unk_24C520593;
  *(_DWORD *)v2 = v3;
  return 1;
}

BOOL sub_20C7593B4(_DWORD **a1, uint64_t *a2)
{
  return sub_20C7593C4(*a2, *a1);
}

BOOL sub_20C7593C4(uint64_t a1, _DWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_DWORD **)(a1 + 8) = *a2;
  return v4 == 0;
}

uint64_t sub_20C759428(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C759468(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75947C(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545440;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C759524(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545440;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C7595D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545440;
  sub_20C759728((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C759610(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759624(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545440;
  return sub_20C759728((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C759640(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C759648(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C759670(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C75968C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5454A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7596C8()
{
  return &unk_24C5454A0;
}

uint64_t sub_20C7596D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7587E4((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C759714(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759728(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C759768(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75977C(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C5454C8;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C759824(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C5454C8;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C7598D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C5454C8;
  sub_20C759728((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C759910(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759924(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5454C8;
  return sub_20C759728((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C759940(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C759948(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C759970(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C758DB0(a1 + 8, a2);
}

uint64_t sub_20C759978(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5454A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7599B4()
{
  return &unk_24C5454A0;
}

uint64_t sub_20C7599C0(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545538;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C759A68(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545538;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C759B14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545538;
  sub_20C759728((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C759B54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759B68(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545538;
  return sub_20C759728((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C759B84(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C759B8C(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C759BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  double v7[22];
  uint64_t v8;
  void **v9;

  sub_20C759268(a1 + 104, a3, (uint64_t)v7);
  v4 = v7[1] * v7[5] * 10.0;
  v5 = sub_20C7592F8(a2, v4);
  v9 = (void **)&v8;
  sub_20BE34B94(&v9);
  return v5;
}

void sub_20C759C24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 176;
  sub_20BE34B94((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C759C40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5454A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C759C7C()
{
  return &unk_24C5454A0;
}

uint64_t sub_20C759C88(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C5455A8;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C759D30(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C5455A8;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C759DDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C5455A8;
  sub_20C759F34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C759E1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759E30(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5455A8;
  return sub_20C759F34((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C759E4C(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C759E54(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C759E7C(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C759E98(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545608))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C759ED4()
{
  return &unk_24C545608;
}

uint64_t sub_20C759EE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7587E4((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C759F20(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759F34(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C759F74(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C759F88(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545630;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75A030(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545630;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75A0DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545630;
  sub_20C759F34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75A11C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A130(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545630;
  return sub_20C759F34((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75A14C(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75A154(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C75A17C(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C758DB0(a1 + 8, a2);
}

uint64_t sub_20C75A184(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545608))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75A1C0()
{
  return &unk_24C545608;
}

uint64_t sub_20C75A1CC(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C5456A0;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75A274(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C5456A0;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75A320(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C5456A0;
  sub_20C759F34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75A360(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A374(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5456A0;
  return sub_20C759F34((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75A390(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75A398(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75A3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  double v7[22];
  uint64_t v8;
  void **v9;

  sub_20C759268(a1 + 104, a3, (uint64_t)v7);
  v4 = v7[3] * v7[5] * 10.0;
  v5 = sub_20C7592F8(a2, v4);
  v9 = (void **)&v8;
  sub_20BE34B94(&v9);
  return v5;
}

void sub_20C75A430(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 176;
  sub_20BE34B94((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A44C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545608))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75A488()
{
  return &unk_24C545608;
}

uint64_t sub_20C75A494(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545710;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75A53C(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545710;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75A5E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545710;
  sub_20C75A740((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75A628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A63C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545710;
  return sub_20C75A740((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75A658(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75A660(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75A688(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C75A6A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545770))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75A6E0()
{
  return &unk_24C545770;
}

uint64_t sub_20C75A6EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7587E4((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C75A72C(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A740(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C75A780(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A794(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545798;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75A83C(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545798;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75A8E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545798;
  sub_20C75A740((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75A928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75A93C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545798;
  return sub_20C75A740((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75A958(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75A960(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C75A988(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C758DB0(a1 + 8, a2);
}

uint64_t sub_20C75A990(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545770))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75A9CC()
{
  return &unk_24C545770;
}

uint64_t sub_20C75A9D8(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545808;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75AA80(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545808;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75AB2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545808;
  sub_20C75A740((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75AB6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75AB80(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545808;
  return sub_20C75A740((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75AB9C(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75ABA4(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75ABCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  double v7[22];
  uint64_t v8;
  void **v9;

  sub_20C759268(a1 + 104, a3, (uint64_t)v7);
  v4 = v7[2] * v7[5] * 10.0;
  v5 = sub_20C7592F8(a2, v4);
  v9 = (void **)&v8;
  sub_20BE34B94(&v9);
  return v5;
}

void sub_20C75AC3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 176;
  sub_20BE34B94((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C75AC58(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545770))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75AC94()
{
  return &unk_24C545770;
}

uint64_t sub_20C75ACA0(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545878;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75AD48(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545878;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75ADF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545878;
  sub_20C75AF4C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75AE34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75AE48(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545878;
  return sub_20C75AF4C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75AE64(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75AE6C(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75AE94(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C75AEB0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5458D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75AEEC()
{
  return &unk_24C5458D8;
}

uint64_t sub_20C75AEF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7587E4((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C75AF38(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75AF4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C75AF8C(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75AFA0(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545900;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75B048(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545900;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75B0F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545900;
  sub_20C75AF4C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75B134(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B148(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545900;
  return sub_20C75AF4C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75B164(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75B16C(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C75B194(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C758DB0(a1 + 8, a2);
}

uint64_t sub_20C75B19C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5458D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75B1D8()
{
  return &unk_24C5458D8;
}

uint64_t sub_20C75B1E4(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545970;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75B28C(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545970;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75B338(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545970;
  sub_20C75AF4C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75B378(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B38C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545970;
  return sub_20C75AF4C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75B3A8(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75B3B0(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75B3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  double v7[22];
  uint64_t v8;
  void **v9;

  sub_20C759268(a1 + 104, a3, (uint64_t)v7);
  v4 = v7[4] * v7[5] * 10.0;
  v5 = sub_20C7592F8(a2, v4);
  v9 = (void **)&v8;
  sub_20BE34B94(&v9);
  return v5;
}

void sub_20C75B444(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 176;
  sub_20BE34B94((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B460(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5458D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75B49C()
{
  return &unk_24C5458D8;
}

uint64_t sub_20C75B4A8(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C5459E0;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75B550(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C5459E0;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75B5FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C5459E0;
  sub_20C75B754((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75B63C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B650(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C5459E0;
  return sub_20C75B754((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75B66C(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75B674(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75B69C(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_20C75B6B8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545A40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75B6F4()
{
  return &unk_24C545A40;
}

uint64_t sub_20C75B700(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7587E4((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C75B740(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B754(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20BE04EB0(a1, a2);
  *v4 = &unk_24C545278;
  sub_20C7581D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_20C75B794(_Unwind_Exception *a1)
{
  void **v1;

  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B7A8(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545A68;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75B850(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545A68;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75B8FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545A68;
  sub_20C75B754((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75B93C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75B950(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545A68;
  return sub_20C75B754((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75B96C(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75B974(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20C75B99C(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_20C758DB0(a1 + 8, a2);
}

uint64_t sub_20C75B9A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545A40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75B9E0()
{
  return &unk_24C545A40;
}

uint64_t sub_20C75B9EC(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C545AD8;
  *(_QWORD *)(a1 + 8) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 104) = &unk_24C519560;
  v4 = (void **)(a1 + 448);
  sub_20BE34B94(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_20C75BA94(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C545AD8;
  *((_QWORD *)a1 + 1) = &unk_24C545278;
  v2 = (void **)(a1 + 8);
  *((_QWORD *)a1 + 13) = &unk_24C519560;
  v3 = (void **)(a1 + 448);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((void **)a1 + 50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((void **)a1 + 26);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((void **)a1 + 14);
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

_QWORD *sub_20C75BB40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1D8uLL);
  *v2 = off_24C545AD8;
  sub_20C75B754((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C75BB80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75BB94(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C545AD8;
  return sub_20C75B754((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20C75BBB0(uint64_t a1)
{
  sub_20C757568(a1 + 8);
}

void sub_20C75BBB8(void *a1)
{
  sub_20C757568((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C75BBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  float v5;
  uint64_t v6;
  double v8[22];
  uint64_t v9;
  void **v10;

  sub_20C759268(a1 + 104, a3, (uint64_t)v8);
  v4 = v8[14];
  v5 = v8[15];
  v6 = sub_20C75BCA8(a2, v4, v5);
  v10 = (void **)&v9;
  sub_20BE34B94(&v10);
  return v6;
}

void sub_20C75BC44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 176;
  sub_20BE34B94((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C75BC60(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545A40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C75BC9C()
{
  return &unk_24C545A40;
}

uint64_t sub_20C75BCA8(uint64_t a1, float a2, float a3)
{
  uint64_t v3;
  _DWORD *v5;
  _DWORD v6[2];
  _QWORD *v7;

  *(float *)v6 = a2;
  *(float *)&v6[1] = a3;
  v5 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v7 = &v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))*(&off_24C545B38 + v3))(&v7, a1);
}

uint64_t sub_20C75BCFC()
{
  return 1;
}

BOOL sub_20C75BD08(_QWORD ***a1, uint64_t *a2)
{
  return sub_20C75BD80(*a1, *a2);
}

uint64_t sub_20C75BD14(uint64_t ***a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = (_QWORD *)*a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  v2[1] = (char *)&off_24C51DEB0 + 3;
  *v2 = v3;
  return 1;
}

BOOL sub_20C75BD80(_QWORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_QWORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

void sub_20C75BDEC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C75BDEC(a1, *a2);
    sub_20C75BDEC(a1, a2[1]);
    sub_20C73931C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C75BE34(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        sub_20C75BEB8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20C75BEB8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v3 = (_QWORD *)a2[9];
  if (v3 == a2 + 6)
  {
    v4 = 4;
    v3 = a2 + 6;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = (_QWORD *)a2[5];
  if (result == a2 + 2)
  {
    v6 = 4;
    result = a2 + 2;
  }
  else
  {
    if (!result)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20C75BF3C(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  const char *v6;
  double v7;
  uint64_t *v8;
  char *v9;
  char *v10[2];
  char v11;
  uint64_t *v12;
  void *__p[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a1, (const void **)__p, v10);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
  {
    if (!v10[1])
    {
LABEL_13:
      operator delete(v10[0]);
      return;
    }
    v9 = 0;
    v6 = v10[0];
  }
  else
  {
    if (!v11)
      return;
    v9 = 0;
    v6 = (const char *)v10;
  }
  v7 = strtod(v6, &v9);
  if (!*v9)
  {
    __p[1] = &unk_24C52064B;
    __p[0] = *(void **)&v7;
    v12 = a3;
    v8 = sub_20C73B2A8(a2, a3, (uint64_t)&unk_20CAC184C, &v12);
    sub_20BF4B5D8(v8 + 5, __p);
    sub_20BF4C2D8((uint64_t)__p);
  }
  if (v11 < 0)
    goto LABEL_13;
}

void sub_20C75C07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BF4C2D8((uint64_t)&a18);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C75C0C4(Alembic::Abc::v12::IObject *a1, uint64_t **a2)
{
  uint64_t NumChildren;
  uint64_t v5;
  uint64_t i;
  uint64_t ChildHeader;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t **v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _BYTE v23[40];
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;

  NumChildren = Alembic::Abc::v12::IObject::getNumChildren(a1);
  if (NumChildren)
  {
    v5 = NumChildren;
    for (i = 0; i != v5; ++i)
    {
      ChildHeader = Alembic::Abc::v12::IObject::getChildHeader(a1);
      LODWORD(v21) = 0;
      LODWORD(v22) = 0;
      sub_20BE5206C((uint64_t)v23, (uint64_t)a1, ChildHeader, &v21);
      if (Alembic::Abc::v12::IObject::isInstanceRoot((Alembic::Abc::v12::IObject *)v23))
      {
        v21 = v24;
        v22 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        v19 = &v21;
        v10 = sub_20C75D594(a2, (unint64_t *)&v21, (uint64_t)&unk_20CAC184C, (_OWORD **)&v19);
        v19 = v26;
        v20 = v27;
        if (v27)
        {
          v11 = (unint64_t *)&v27->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        sub_20C75D664(v10 + 6, (unint64_t *)&v19, (uint64_t)&v19);
        v13 = v20;
        if (v20)
        {
          v14 = (unint64_t *)&v20->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v16 = v22;
        if (v22)
        {
          v17 = (unint64_t *)&v22->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else
      {
        sub_20C75C0C4(v23, a2);
      }
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v23);
    }
  }
}

void sub_20C75C254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)va2);
  _Unwind_Resume(a1);
}

void sub_20C75C288(uint64_t a1, Alembic::Abc::v12::IObject *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, _QWORD *a4)
{
  Alembic::Abc::v12::IObject *v6;
  uint64_t NumChildren;
  uint64_t i;
  const void **ChildHeader;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Name;
  unsigned int *v15;
  unsigned int v16;
  uint64_t Header;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **FullName;
  uint64_t *v23;
  const void **v24;
  uint64_t v25;
  char *v26;
  const void **v27;
  const void **v28;
  _BOOL4 v29;
  void **v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  const void **v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  pxrInternal__aapl__pxrReserved__::SdfPath *v58;
  _QWORD *v59;
  pxrInternal__aapl__pxrReserved__::SdfPath *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  int64x2_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  _DWORD *v92;
  const void **v93;
  int64x2_t *v94;
  uint64_t v95;
  Alembic::Abc::v12::IObject *v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  unsigned __int8 v103;
  char v104;
  int v105;
  __int128 v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char **v114;
  char *v115[2];
  _BYTE v116[32];
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  _BYTE v124[48];
  int v125;
  int v126;
  _BYTE v127[24];
  _BYTE v128[24];
  uint64_t v129;
  char *v130;
  void *v131;
  std::string v132;
  uint64_t v133;
  void *v134;
  std::string v135;
  _QWORD v136[2];
  void *__p[2];
  uint64_t v138;
  char v139;
  uint64_t v140;
  __int128 __dst;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  void *v146[2];
  char v147;
  __int128 v148;
  uint64_t v149;

  v6 = a2;
  v115[0] = 0;
  v115[1] = 0;
  v114 = v115;
  NumChildren = Alembic::Abc::v12::IObject::getNumChildren(a2);
  if (NumChildren)
  {
    for (i = 0; i != NumChildren; ++i)
    {
      ChildHeader = (const void **)Alembic::Abc::v12::IObject::getChildHeader(v6);
      sub_20BE74FC0((uint64_t **)&v114, ChildHeader, (uint64_t)ChildHeader);
    }
  }
  v97 = Alembic::Abc::v12::IObject::getNumChildren(v6);
  if (v97)
  {
    v11 = 0;
    v99 = a1 + 136;
    v100 = a1 + 128;
    v93 = (const void **)(a1 + 112);
    v12 = a1 + 120;
    v98 = (uint64_t **)(a1 + 152);
    v92 = (_DWORD *)((char *)a3 + 4);
    v94 = (int64x2_t *)(a4 + 1);
    v95 = a1;
    v96 = v6;
    do
    {
      v13 = Alembic::Abc::v12::IObject::getChildHeader(v6);
      *(_DWORD *)v116 = 0;
      *(_DWORD *)&v116[8] = 0;
      sub_20BE5206C((uint64_t)&v104, (uint64_t)v6, v13, (uint64_t **)v116);
      Name = Alembic::Abc::v12::IObject::getName((Alembic::Abc::v12::IObject *)&v104);
      sub_20C73F0B0(Name, " _", (uint64_t)&v114, (uint64_t)&v101);
      sub_20BE74FC0((uint64_t **)&v114, (const void **)&v101, (uint64_t)&v101);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v116);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v116, &v143);
      if ((v116[0] & 7) != 0)
      {
        v15 = (unsigned int *)(*(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
      v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v18)
        v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*((_QWORD *)v18 + 56) & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      std::operator+<char>();
      sub_20BE01E1C(Header + 48, (const void **)&v148, v116);
      if (SHIBYTE(v149) < 0)
        operator delete((void *)v148);
      v19 = v116[23];
      if (v116[23] < 0)
        v19 = *(_QWORD *)&v116[8];
      if (v19)
      {
        __dst = *(_OWORD *)v116;
        v142 = *(_QWORD *)&v116[16];
        goto LABEL_32;
      }
      v20 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
      sub_20BDDC0E4(__p, "schema");
      sub_20BE01E1C(v20 + 48, (const void **)__p, &v148);
      if (SHIBYTE(v138) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v149) < 0)
      {
        if (!*((_QWORD *)&v148 + 1))
        {
LABEL_26:
          v21 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
          sub_20BDDC0E4(__p, "schemaBaseType");
          sub_20BE01E1C(v21 + 48, (const void **)__p, &__dst);
          if (SHIBYTE(v138) < 0)
            operator delete(__p[0]);
          goto LABEL_28;
        }
        sub_20BDDBFAC(&__dst, (void *)v148, *((unint64_t *)&v148 + 1));
      }
      else
      {
        if (!HIBYTE(v149))
          goto LABEL_26;
        __dst = v148;
        v142 = v149;
      }
LABEL_28:
      if (SHIBYTE(v149) < 0)
        operator delete((void *)v148);
      if ((v116[23] & 0x80000000) != 0)
        operator delete(*(void **)v116);
LABEL_32:
      FullName = (const void **)Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v104);
      if (v99 == sub_20BDEEBA4(v100, FullName))
      {
        v38 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE);
        if (!v38)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE);
          v38 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE);
        }
        if (!*v38)
          goto LABEL_126;
        Alembic::Abc::v12::IObject::getParent((const std::string *)&v104, (uint64_t)v116);
        v39 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)v116);
        if ((sub_20C740344(v39 + 48, 0) & 1) != 0)
        {
          Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)v116, (uint64_t)&v148);
          sub_20BDDC0E4(&v134, ".xform");
          LODWORD(v131) = 1;
          LODWORD(v132.__r_.__value_.__l.__data_) = 0;
          Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v148, &v134, &v131);
          if (v135.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v134);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v148);
          if ((v139 & 0x80000000) == 0)
          {
            if (!v139)
              goto LABEL_90;
            goto LABEL_124;
          }
          if (v138)
            goto LABEL_124;
LABEL_90:
          if (v140)
          {
            v50 = (const void **)Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)v116);
            if (v99 == sub_20BDEEBA4(v100, v50)
              && (unint64_t)Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)v116) <= 1)
            {
              LODWORD(v134) = 2;
              sub_20BDDC0E4(&v135, "");
              v136[0] = 0;
              v136[1] = 0;
              v51 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
              if (sub_20C75D744(v51 + 48, 0))
              {
                Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&v104, (uint64_t)&v148);
                sub_20BDDC0E4(v146, ".geom");
                v144 = 1;
                v145 = 0;
                Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v131, &v148, v146, &v144);
                if (v147 < 0)
                  operator delete(v146[0]);
                goto LABEL_100;
              }
              v52 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
              if (sub_20C757690(v52 + 48, 2))
              {
                Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&v104, (uint64_t)&v148);
                sub_20BDDC0E4(v146, ".geom");
                v144 = 1;
                v145 = 0;
                Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v131, &v148, v146, &v144);
                if (v147 < 0)
                  operator delete(v146[0]);
LABEL_100:
                Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v148);
                LODWORD(v134) = (_DWORD)v131;
                std::string::operator=(&v135, &v132);
                sub_20BDE881C(v136, &v133);
                Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v131);
              }
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              {
                if (!v135.__r_.__value_.__l.__size_)
                {
LABEL_105:
                  if (v136[0])
                  {
                    sub_20BDDC0E4(&v148, ".arbGeomParams");
                    if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v134))
                    {
                      sub_20BDDC0E4(&v131, ".arbGeomParams");
                      v53 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)__p) != 0;
                      if (v132.__r_.__value_.__s.__data_[15] < 0)
                        operator delete(v131);
                    }
                    else
                    {
                      v53 = 0;
                    }
                    if (SHIBYTE(v149) < 0)
                      operator delete((void *)v148);
                    if (!v53)
                    {
                      sub_20BDDC0E4(&v148, ".userProperties");
                      if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v134))
                      {
                        sub_20BDDC0E4(&v131, ".userProperties");
                        v54 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)__p) != 0;
                        if (v132.__r_.__value_.__s.__data_[15] < 0)
                          operator delete(v131);
                      }
                      else
                      {
                        v54 = 0;
                      }
                      if (SHIBYTE(v149) < 0)
                        operator delete((void *)v148);
                      if (!v54)
                      {
                        sub_20C01A074((int *)&v143, a3);
                        sub_20C01A0C8((int *)&v143 + 1, v92);
                        if ((char)v103 < 0)
                        {
                          *(_BYTE *)v101 = 0;
                          v102 = 0;
                        }
                        else
                        {
                          LOBYTE(v101) = 0;
                          v103 = 0;
                        }
                      }
                    }
                  }
                }
              }
              else if (!*((_BYTE *)&v135.__r_.__value_.__s + 23))
              {
                goto LABEL_105;
              }
              Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v134);
            }
          }
LABEL_124:
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
        }
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v116);
LABEL_126:
        v23 = 0;
        v40 = 1;
        goto LABEL_127;
      }
      v23 = sub_20C7395F0(v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v143);
      v24 = (const void **)Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v104);
      v25 = sub_20BDEEBA4(v100, v24);
      if (v99 != v25)
      {
        v26 = (char *)*v93;
        if (!*v93)
          goto LABEL_41;
        v27 = (const void **)(v25 + 56);
        v28 = v93;
        do
        {
          v29 = sub_20BDDDF74(v12, (const void **)v26 + 4, v27);
          v30 = (void **)(v26 + 8);
          if (!v29)
          {
            v30 = (void **)v26;
            v28 = (const void **)v26;
          }
          v26 = (char *)*v30;
        }
        while (*v30);
        if (v28 == v93 || sub_20BDDDF74(v12, v27, v28 + 4))
LABEL_41:
          v28 = v93;
        sub_20C01A074((int *)v23 + 44, (_DWORD *)v28 + 14);
        sub_20C01A0C8((int *)v23 + 45, (_DWORD *)v28 + 15);
        *((_BYTE *)v23 + 209) = *((_BYTE *)v28 + 64);
        a1 = v95;
        v6 = v96;
      }
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 44))
      {
        if (Alembic::Abc::v12::IObject::isInstanceRoot((Alembic::Abc::v12::IObject *)&v104))
        {
          *(_DWORD *)&v116[8] = v105;
          if (SHIBYTE(v107) < 0)
          {
            sub_20BDDBFAC(&v116[16], (void *)v106, *((unint64_t *)&v106 + 1));
          }
          else
          {
            *(_OWORD *)&v116[16] = v106;
            v117 = v107;
          }
          *(_QWORD *)v116 = off_24C518E68;
          v118 = v108;
          v119 = v109;
          if (v109)
          {
            v43 = (unint64_t *)(v109 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v120 = v110;
          v121 = v111;
          if (v111)
          {
            v45 = (unint64_t *)(v111 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          if (SHIBYTE(v113) < 0)
          {
            sub_20BDDBFAC(&v122, (void *)v112, *((unint64_t *)&v112 + 1));
          }
          else
          {
            v122 = v112;
            v123 = v113;
          }
          Alembic::Abc::v12::IObject::instanceSourcePath((Alembic::Abc::v12::IObject *)v116, &v148);
          Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v116);
        }
        else
        {
          v41 = Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v104);
          if (*(char *)(v41 + 23) < 0)
          {
            sub_20BDDBFAC(&v148, *(void **)v41, *(_QWORD *)(v41 + 8));
          }
          else
          {
            v42 = *(_OWORD *)v41;
            v149 = *(_QWORD *)(v41 + 16);
            v148 = v42;
          }
        }
        *(_QWORD *)v116 = "usdAbc/alembicReader.cpp";
        *(_QWORD *)&v116[8] = "_ReadPrim";
        *(_QWORD *)&v116[16] = 3763;
        *(_QWORD *)&v116[24] = "std::string pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPrim(_ReaderCon"
                               "text &, const IObject &, const SdfPath &, std::set<std::string> *)";
        LOBYTE(v117) = 0;
        v47 = Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v104);
        if (*(char *)(v47 + 23) >= 0)
          v48 = (const char *)v47;
        else
          v48 = *(const char **)v47;
        v49 = (const char *)&v148;
        if (v149 < 0)
          v49 = (const char *)v148;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v116, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance %s has no prototype at %s.", v48, v49);
        if (SHIBYTE(v149) < 0)
          operator delete((void *)v148);
        goto LABEL_126;
      }
      sub_20C01A074((int *)&v143, (_DWORD *)v23 + 44);
      sub_20C01A0C8((int *)&v143 + 1, (_DWORD *)v23 + 45);
      if (*((_BYTE *)v23 + 209))
      {
        v31 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
        sub_20C75D9AC((pxrInternal__aapl__pxrReserved__::TfToken *)(v31 + 48), (uint64_t)v23);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v116);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v116, __p);
        if ((v116[0] & 7) != 0)
        {
          v32 = (unsigned int *)(*(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        sub_20C7505C0((uint64_t)v116, a1, (uint64_t)&v104, __p);
        v34 = sub_20C75DC30(*(_QWORD *)(a1 + 96), (const void **)&__dst);
        v35 = *v34;
        v36 = v34[1];
        while (v35 != v36)
        {
          *(_QWORD *)&v148 = v116;
          v37 = *(_QWORD *)(v35 + 24);
          if (!v37)
            sub_20BE9E974();
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v37 + 48))(v37, &v148);
          v35 += 32;
        }
        if (*((_BYTE *)v23 + 88))
        {
          *(_QWORD *)&v148 = v23 + 8;
          sub_20BEEB2B8((void ***)&v148);
          *((_BYTE *)v23 + 88) = 0;
        }
        sub_20BDECAB8((uint64_t)&v129, v130);
        *(_QWORD *)&v148 = v128;
        sub_20BDE5038((void ***)&v148);
        *(_QWORD *)&v148 = v127;
        sub_20BDE5038((void ***)&v148);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v126);
        sub_20BFD265C(&v125);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v124);
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v116[8]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
      }
      v40 = 0;
LABEL_127:
      v55 = sub_20C7395F0(v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v143);
      if (*v55)
        v56 = v40;
      else
        v56 = 1;
      if (v56 == 1)
      {
        v57 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v104);
        sub_20C75D9AC((pxrInternal__aapl__pxrReserved__::TfToken *)(v57 + 48), (uint64_t)v55);
        v59 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v58);
        if (v143 != *v59)
        {
          v60 = a3;
          sub_20C7505C0((uint64_t)v116, a1, (uint64_t)&v104, &v143);
          v61 = sub_20C75DC30(*(_QWORD *)(a1 + 96), (const void **)&__dst);
          v63 = *v61;
          v62 = v61[1];
          while (v63 != v62)
          {
            *(_QWORD *)&v148 = v116;
            v64 = *(_QWORD *)(v63 + 24);
            if (!v64)
              sub_20BE9E974();
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v64 + 48))(v64, &v148);
            v63 += 32;
          }
          sub_20BDECAB8((uint64_t)&v129, v130);
          *(_QWORD *)&v148 = v128;
          sub_20BDE5038((void ***)&v148);
          *(_QWORD *)&v148 = v127;
          sub_20BDE5038((void ***)&v148);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v126);
          a3 = v60;
          v6 = v96;
          sub_20BFD265C(&v125);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v124);
          Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v116[8]);
          a1 = v95;
        }
        sub_20C75C288(a1, &v104, &v143, v55);
        if ((v40 & 1) != 0)
          goto LABEL_150;
        if (*((_BYTE *)v23 + 209))
        {
          v65 = v55[4];
          for (j = v55[5]; j != v65; j -= 8)
          {
            v68 = *(_QWORD *)(j - 8);
            v67 = v68;
            if ((v68 & 7) != 0)
            {
              v69 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
              do
                v70 = __ldxr(v69);
              while (__stlxr(v70 - 2, v69));
            }
          }
          v55[5] = v65;
          if (*((_BYTE *)v55 + 120))
          {
            *(_QWORD *)v116 = v55 + 12;
            sub_20BEEB2B8((void ***)v116);
            *((_BYTE *)v55 + 120) = 0;
          }
          sub_20C3A3BA4((uint64_t)(v55 + 16), (_QWORD *)v55[17]);
          v55[16] = (uint64_t)(v55 + 17);
          v55[17] = 0;
          v71 = (_QWORD *)v55[20];
          v55[18] = 0;
          sub_20C739748((uint64_t)(v55 + 19), v71);
          v55[19] = (uint64_t)(v55 + 20);
          v55[20] = 0;
          v55[21] = 0;
          a1 = v95;
          v6 = v96;
        }
        *((_DWORD *)v55 + 14) = 1;
      }
      sub_20BF32220(v23, v55);
      *((_DWORD *)v23 + 14) = 0;
LABEL_150:
      if (SHIBYTE(v142) < 0)
        operator delete((void *)__dst);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
      sub_20BFD265C(&v143);
      v72 = v103;
      v73 = v103;
      if ((v103 & 0x80u) != 0)
        v72 = v102;
      if (v72)
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v148);
        v75 = (_QWORD *)a4[2];
        v74 = a4[3];
        if ((unint64_t)v75 >= v74)
        {
          v78 = ((uint64_t)v75 - v94->i64[0]) >> 3;
          if ((unint64_t)(v78 + 1) >> 61)
            sub_20BDDF694();
          v79 = v74 - v94->i64[0];
          v80 = v79 >> 2;
          if (v79 >> 2 <= (unint64_t)(v78 + 1))
            v80 = v78 + 1;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v81 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v81 = v80;
          v117 = a4 + 3;
          if (v81)
            v82 = (char *)sub_20BDDF6A8((uint64_t)(a4 + 3), v81);
          else
            v82 = 0;
          v83 = &v82[8 * v78];
          v84 = &v82[8 * v81];
          *(_QWORD *)&v116[24] = v84;
          *(_QWORD *)v83 = v148;
          v77 = v83 + 8;
          *(_QWORD *)&v148 = 0;
          *(_QWORD *)&v116[16] = v83 + 8;
          v86 = (_QWORD *)a4[1];
          v85 = (_QWORD *)a4[2];
          if (v85 == v86)
          {
            v88 = vdupq_n_s64((unint64_t)v85);
          }
          else
          {
            do
            {
              v87 = *--v85;
              *((_QWORD *)v83 - 1) = v87;
              v83 -= 8;
              *v85 = 0;
            }
            while (v85 != v86);
            v88 = *v94;
            v77 = *(_QWORD **)&v116[16];
            v84 = *(char **)&v116[24];
          }
          a4[1] = v83;
          a4[2] = v77;
          *(int64x2_t *)&v116[8] = v88;
          v89 = a4[3];
          a4[3] = v84;
          *(_QWORD *)&v116[24] = v89;
          *(_QWORD *)v116 = v88.i64[0];
          sub_20BF1EE98((uint64_t)v116);
          v76 = v148;
        }
        else
        {
          v76 = 0;
          *v75 = v148;
          v77 = v75 + 1;
          *(_QWORD *)&v148 = 0;
        }
        a4[2] = v77;
        if ((v76 & 7) != 0)
        {
          v90 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
          do
            v91 = __ldxr(v90);
          while (__stlxr(v91 - 2, v90));
        }
        v73 = v103;
      }
      if ((v73 & 0x80) != 0)
        operator delete(v101);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v104);
      ++v11;
    }
    while (v11 != v97);
  }
  sub_20BDECAB8((uint64_t)&v114, v115[0]);
}

void sub_20C75D0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a12, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (*(char *)(v63 - 121) < 0)
    operator delete(*(void **)(v63 - 144));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&STACK[0x2B0]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&STACK[0x2E0]);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a63);
  if (*(char *)(v63 - 201) < 0)
    operator delete(*(void **)(v63 - 224));
  sub_20BFD1A18((_DWORD *)(v63 - 192));
  if (a47 < 0)
    operator delete(a42);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a48);
  sub_20BDECAB8((uint64_t)&a60, (char *)a61);
  _Unwind_Resume(a1);
}

void sub_20C75D3C0(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t v6;
  unsigned __int8 v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  void *v14[2];
  unsigned __int8 v15;
  uint64_t *v16;
  void *__p[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a1, (const void **)__p, v14);
  if (v18 < 0)
    operator delete(__p[0]);
  v6 = v15;
  v7 = v15;
  if ((v15 & 0x80u) != 0)
    v6 = (unint64_t)v14[1];
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13);
    __p[0] = (void *)v13;
    __p[1] = (char *)&off_24C5207B8 + 1;
    if ((v13 & 7) != 0)
    {
      v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        __p[0] = v8;
    }
    v16 = a3;
    v10 = sub_20C73B2A8(a2, a3, (uint64_t)&unk_20CAC184C, &v16);
    sub_20BF4B5D8(v10 + 5, __p);
    sub_20BF4C2D8((uint64_t)__p);
    if ((v13 & 7) != 0)
    {
      v11 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v7 = v15;
  }
  if ((v7 & 0x80) != 0)
    operator delete(v14[0]);
}

void sub_20C75D52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  unsigned int *v24;
  unsigned int v25;

  sub_20BF4C2D8((uint64_t)&a18);
  if ((a9 & 7) != 0)
  {
    v24 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C75D594(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _OWORD *v11;
  _QWORD *v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v12 = *a4;
    v11[2] = **a4;
    *v12 = 0;
    v12[1] = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = (char *)v11 + 56;
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_20C75D664(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v13[2];
  char v14;

  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v14 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_20C215DDC(v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t sub_20C75D744(uint64_t a1, int a2)
{
  _BOOL8 v2;
  void *__p[2];
  char v10;
  _QWORD *v11;
  _BYTE v12[11];
  char v13;

  if (a2 == 1)
    return 1;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 0;
  sub_20BDDC0E4(__p, "schemaBaseType");
  sub_20BE01E1C(a1, (const void **)__p, &v11);
  if (v13 < 0)
  {
    v2 = *(_QWORD *)v12 == 19
      && *v11 == 0x5F6D6F6547636241
      && v11[1] == 0x657361426D6F6547
      && *(_QWORD *)((char *)v11 + 11) == 0x31765F657361426DLL;
    operator delete(v11);
  }
  else
  {
    v2 = v13 == 19
      && v11 == (_QWORD *)0x5F6D6F6547636241
      && *(_QWORD *)v12 == 0x657361426D6F6547
      && *(_QWORD *)&v12[3] == 0x31765F657361426DLL;
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20C75D880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C75D89C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C75D8C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C75D90C((uint64_t)v2 + 32);
    operator delete(v2);
  }
  return a1;
}

void sub_20C75D90C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C75D954(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C75D954(a1, *a2);
    sub_20C75D954(a1, a2[1]);
    sub_20C2162E8((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C75D9AC(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL4 v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  __n128 v13;
  char v14;
  char v15;
  void *__p[2];
  char v17;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v4 + 39) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a1, (const void **)__p, &v13);
  if (v14 < 0)
  {
    v5 = v13.n128_u64[1] == 4 && *(_DWORD *)v13.n128_u64[0] == 1919252079;
    operator delete((void *)v13.n128_u64[0]);
  }
  else
  {
    v5 = v14 == 4 && v13.n128_u32[0] == 1919252079;
  }
  if (v17 < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a2 + 56) = v5;
  v6 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = (uint64_t *)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C73AFB0(a1, (uint64_t **)(a2 + 128), v6);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C73AFB0(a1, (uint64_t **)(a2 + 128), (uint64_t *)v7 + 22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C73B140(a1, (uint64_t **)(a2 + 128), (uint64_t *)v8 + 13);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C73B140(a1, (uint64_t **)(a2 + 128), (uint64_t *)v9 + 17);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C75D3C0(a1, (uint64_t **)(a2 + 128), (uint64_t *)v10 + 26);
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C75DD1C(a1, (_QWORD *)v11 + 27, (uint64_t)&v13);
  sub_20C75DEA0(a2 + 64, &v13);
  if (v15)
  {
    __p[0] = &v13;
    sub_20BEEB2B8((void ***)__p);
  }
  v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12)
    v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C75DD1C(a1, (_QWORD *)v12 + 34, (uint64_t)&v13);
  sub_20C75DEA0(a2 + 96, &v13);
  if (v15)
  {
    __p[0] = &v13;
    sub_20BEEB2B8((void ***)__p);
  }
}

void sub_20C75DC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C75DC30(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 v8;
  void *__p[2];
  uint64_t v10;

  v3 = a1 + 24;
  v4 = sub_20BDEEBA4(a1 + 24, a2);
  v5 = v4;
  if (a1 + 32 != v4)
    return (uint64_t *)(v4 + 56);
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  v7 = sub_20BDEEBA4(v3, (const void **)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (v5 != v7)
    return (uint64_t *)(v7 + 56);
  v8 = atomic_load((unsigned __int8 *)&qword_25498CB58);
  if ((v8 & 1) != 0)
    return &qword_25498CB40;
  if (__cxa_guard_acquire(&qword_25498CB58))
  {
    qword_25498CB40 = 0;
    *(_QWORD *)algn_25498CB48 = 0;
    qword_25498CB50 = 0;
    __cxa_atexit((void (*)(void *))sub_20C739358, &qword_25498CB40, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CB58);
  }
  return &qword_25498CB40;
}

void sub_20C75DD1C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *__p;
  __int128 *v9;
  char v10;
  void *v11[2];
  unsigned __int8 v12;
  void **v13;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  std::operator+<char>();
  sub_20BE01E1C((uint64_t)a1, (const void **)&__p, v11);
  if (v10 < 0)
    operator delete(__p);
  v5 = v12;
  if ((v12 & 0x80u) != 0)
    v5 = (unint64_t)v11[1];
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)v11, " []", &__p);
    if (__p != v9)
    {
      v6 = 0uLL;
      v7 = 0;
      sub_20BEEB19C(&v6, (__int128 *)__p, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)__p) >> 3));
      *(_OWORD *)a3 = v6;
      *(_QWORD *)(a3 + 16) = v7;
      v7 = 0;
      v6 = 0uLL;
      *(_BYTE *)(a3 + 24) = 1;
      v13 = (void **)&v6;
      sub_20BEEB2B8(&v13);
      *(_QWORD *)&v6 = &__p;
      sub_20BDE5038((void ***)&v6);
      goto LABEL_12;
    }
    *(_QWORD *)&v6 = &__p;
    sub_20BDE5038((void ***)&v6);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_12:
  if ((char)v12 < 0)
    operator delete(v11[0]);
}

void sub_20C75DE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  a9 = &a12;
  sub_20BDE5038((void ***)&a9);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_20C75DEA0(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      sub_20C0B4038((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    sub_20BEEB2B8(&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

_DWORD *sub_20C75DF40(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_20C137858((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    sub_20BFD6E54(v7 + 8, v9);
    sub_20BFD6EA4(v7 + 9, v9 + 1);
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_20C75E004((uint64_t)v11, 0);
  }
  return v7;
}

void sub_20C75E004(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C75E048((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_DWORD *sub_20C75E048(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void sub_20C75E084(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C75E084(a1, *a2);
    sub_20C75E084(a1, a2[1]);
    sub_20C75E048((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C75E0CC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_20C75E174((uint64_t)a1, a3, a4, (uint64_t)&v10);
  v5 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v9, v10 + 4);
  v6 = *v5;
  if (*v5)
  {
    v7 = v10;
    v10 = 0;
    if (v7)
      sub_20C73B33C((uint64_t)&v11, v7);
  }
  else
  {
    sub_20BDDE1B4(a1, v9, v5, v10);
    return v10;
  }
  return v6;
}

void sub_20C75E150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11)
{
  if (a10)
    sub_20C73B33C((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C75E174@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *result;

  v7 = a1 + 8;
  v8 = (uint64_t *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_20C75E1FC(v8 + 4, *a2, *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C75E1E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C73B33C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C75E1FC(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *result = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  result[2] = (uint64_t)&off_24C5207B8 + 1;
  v6 = *a3;
  result[1] = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_20C75E278(char *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v5;

  if (a1)
  {
    sub_20C75E278(*(_QWORD *)a1);
    sub_20C75E278(*((_QWORD *)a1 + 1));
    if (a1[247] < 0)
      operator delete(*((void **)a1 + 28));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 55);
    sub_20BFD265C((_DWORD *)a1 + 54);
    sub_20C739748((uint64_t)(a1 + 192), *((_QWORD **)a1 + 25));
    sub_20C3A3BA4((uint64_t)(a1 + 168), *((_QWORD **)a1 + 22));
    if (a1[160])
    {
      v5 = (void **)(a1 + 136);
      sub_20BEEB2B8(&v5);
    }
    if (a1[128])
    {
      v5 = (void **)(a1 + 104);
      sub_20BEEB2B8(&v5);
    }
    v5 = (void **)(a1 + 72);
    sub_20BEEB2B8(&v5);
    v5 = (void **)(a1 + 48);
    sub_20BEEB2B8(&v5);
    v2 = *((_QWORD *)a1 + 5);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
    sub_20BFD265C((_DWORD *)a1 + 8);
    operator delete(a1);
  }
}

void sub_20C75E378(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C75E378(a1, *a2);
    sub_20C75E378(a1, a2[1]);
    sub_20C75D90C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20C75E3C0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = sub_20C1299E8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_20C1298E0(a1, v3);
  return 1;
}

_QWORD *sub_20C75E404(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  int v10;
  int v11;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(this, &v10);
  v5 = *(_QWORD **)(a1 + 160);
  v3 = (_QWORD *)(a1 + 160);
  v4 = v5;
  if (!v5)
    goto LABEL_8;
  v6 = v3;
  do
  {
    v7 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    v8 = v4 + 1;
    if (!v7)
    {
      v8 = v4;
      v6 = v4;
    }
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v3
    || sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4)))
  {
LABEL_8:
    v6 = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v6 == v3)
    return 0;
  else
    return v6 + 5;
}

void sub_20C75E4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C75E4C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t *NameToken;
  _QWORD *v5;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this))
    return 0;
  NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
  v5 = sub_20C0D8030(a1 + 152, NameToken);
  if ((_QWORD *)(a1 + 160) == v5)
    return 0;
  else
    return v5 + 5;
}

uint64_t sub_20C75E528(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::recursive_mutex *v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 88);
  if (!v5)
    return 0;
  if (!*(_DWORD *)(a4 + 8))
    return 1;
  v8 = *a1;
  if (*a1)
  {
    std::recursive_mutex::lock(*a1);
    v5 = *(_QWORD *)(a2 + 88);
    if (!v5)
      sub_20BE9E974();
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a4, a3);
  if (v8)
    std::recursive_mutex::unlock(v8);
  return v10;
}

void sub_20C75E5C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C75E5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C545B50[v2])(&v5, a1);
}

uint64_t sub_20C75E630(uint64_t a1, int a2)
{
  uint64_t v2;
  int *v4;
  int v5;
  int **v6;

  v5 = a2;
  v4 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v6 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_24C545B68[v2])(&v6, a1);
}

uint64_t sub_20C75E688()
{
  return 1;
}

uint64_t sub_20C75E690(uint64_t **a1, _QWORD **a2)
{
  sub_20C0E7DF0(*a2, **a1);
  return 1;
}

BOOL sub_20C75E6B4(uint64_t ****a1, uint64_t *a2)
{
  return sub_20C75E6C4(*a2, **a1);
}

BOOL sub_20C75E6C4(uint64_t a1, uint64_t **a2)
{
  int v4;
  uint64_t **v5;

  v4 = strcmp((const char *)(0x800000020CAC1980 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(a1 + 25) = 1;
  }
  else
  {
    v5 = *(uint64_t ***)(a1 + 8);
    if (v5 != a2)
      sub_20C46B3D4(v5, *a2, a2 + 1);
  }
  return v4 == 0;
}

uint64_t sub_20C75E744()
{
  return 1;
}

uint64_t sub_20C75E74C(int ***a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = (char *)&off_24C5269E8 + 3;
  *(_DWORD *)v2 = v3;
  return 1;
}

BOOL sub_20C75E7B0(_DWORD ***a1, uint64_t *a2)
{
  return sub_20C75E7BC(*a1, *a2);
}

BOOL sub_20C75E7BC(_DWORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAB122ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_DWORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

uint64_t sub_20C75E828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C545B80[v2])(&v5, a1);
}

uint64_t sub_20C75E878(uint64_t a1, int a2)
{
  uint64_t v2;
  int *v4;
  int v5;
  int **v6;

  v5 = a2;
  v4 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v6 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_24C545B98[v2])(&v6, a1);
}

uint64_t sub_20C75E8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C545BB0[v2])(&v5, a1);
}

uint64_t sub_20C75E920(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  char *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_24C545BC8[v2])(&v5, a1);
}

uint64_t sub_20C75E970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C545BE0[v2])(&v5, a1);
}

uint64_t sub_20C75E9C0()
{
  return 1;
}

uint64_t sub_20C75E9C8(uint64_t ****a1, _QWORD **a2)
{
  sub_20C105B3C(*a2, **a1);
  return 1;
}

BOOL sub_20C75E9EC(uint64_t ****a1, uint64_t *a2)
{
  return sub_20C75E9FC(*a2, **a1);
}

BOOL sub_20C75E9FC(uint64_t a1, uint64_t **a2)
{
  int v4;
  uint64_t **v5;

  v4 = strcmp((const char *)(0x800000020CAB1184 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(a1 + 25) = 1;
  }
  else
  {
    v5 = *(uint64_t ***)(a1 + 8);
    if (v5 != a2)
      sub_20C106430(v5, *a2, a2[1], a2[1] - *a2);
  }
  return v4 == 0;
}

uint64_t sub_20C75EA80()
{
  return 1;
}

uint64_t sub_20C75EA88(int ***a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = (char *)&off_24C527CC0 + 3;
  *(_DWORD *)v2 = v3;
  return 1;
}

BOOL sub_20C75EAEC(_DWORD ***a1, uint64_t *a2)
{
  return sub_20C75EAF8(*a1, *a2);
}

BOOL sub_20C75EAF8(_DWORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_DWORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

uint64_t sub_20C75EB64()
{
  return 1;
}

uint64_t sub_20C75EB6C(const void ******a1, uint64_t *a2)
{
  sub_20BF4D0C4(*a2, **a1);
  return 1;
}

BOOL sub_20C75EB90(const void ******a1, uint64_t *a2)
{
  return sub_20C75EBA0(*a2, **a1);
}

BOOL sub_20C75EBA0(uint64_t a1, const void ****a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAC17A0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(*(const void *****)(a1 + 8), a2);
  return v4 == 0;
}

uint64_t sub_20C75EC14()
{
  return 1;
}

uint64_t sub_20C75EC1C(char **a1, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)v2 = v3;
  return 1;
}

BOOL sub_20C75EC7C(_BYTE **a1, uint64_t *a2)
{
  return sub_20C45A3D8(*a2, *a1);
}

uint64_t sub_20C75EC8C()
{
  return 1;
}

uint64_t sub_20C75EC94(uint64_t **a1, uint64_t *a2)
{
  sub_20C02C054(*a2, **a1);
  return 1;
}

BOOL sub_20C75ECB8(uint64_t **a1, uint64_t *a2)
{
  return sub_20C75ECC8(*a2, **a1);
}

BOOL sub_20C75ECC8(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAB04B6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C0E2ECC(*(_BYTE **)(a1 + 8), a2);
  return v4 == 0;
}

void sub_20C75ED3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20BE6100C(a2 + 184, *(_QWORD **)(a2 + 192));
    sub_20C75E278(*(char **)(a2 + 160));
    sub_20BDE9D48(a2 + 128, *(_QWORD **)(a2 + 136));
    sub_20C75E378(a2 + 104, *(_QWORD **)(a2 + 112));
    Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)(a2 + 48));
    sub_20BF2B200(a2 + 24, *(_QWORD **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void sub_20C75EDA4(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

uint64_t sub_20C75EDB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

uint64_t sub_20C75EDC4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_20C75EDD4()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_20C75EDDC()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_TestAlembic(uint64_t a1)
{
  uint64_t v2;
  FILE **v3;
  pxrInternal__aapl__pxrReserved__::SdfAbstractData *v4;
  uint64_t v5;
  double *v6;
  double v7;
  uint64_t v8;
  int v9;
  FILE *v10;
  const char *v11;
  double *v12;
  double *v13;
  BOOL v14;
  _QWORD *v15;
  double v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  _QWORD **v20;
  double i;
  _QWORD *v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD **v25;
  double v26;
  _QWORD *v27;
  uint64_t v28;
  void *v30;
  char v31;
  void *__p;
  _QWORD *v33;
  unint64_t v34;
  int v35;
  int v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  _QWORD **v40;
  _QWORD *v41[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v42;
  char v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v41[0] = 0;
  v41[1] = 0;
  v40 = v41;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::New(&v40, &v42);
  sub_20BDE9D48((uint64_t)&v40, v41[0]);
  if (!v42)
  {
    fwrite("Can't create Alembic data\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
LABEL_29:
    v19 = 0;
    goto LABEL_46;
  }
  v2 = sub_20C729324((uint64_t *)&v42);
  if (!pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(v2, a1))
  {
    if (*(char *)(a1 + 23) >= 0)
      v18 = (const char *)a1;
    else
      v18 = *(const char **)a1;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Can't open Alembic file \"%s\"\n", v18);
    goto LABEL_29;
  }
  v3 = (FILE **)MEMORY[0x24BDAC8E8];
  fwrite("\nWrite:\n", 8uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8E8]);
  v39 = &unk_24C545C08;
  v37[0] = &unk_24C545C50;
  v37[1] = &v39;
  memset(v38, 0, sizeof(v38));
  v4 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_20C729324((uint64_t *)&v42);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v4, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)v37);
  sub_20BDDC0E4(&__p, "/octopus_low/octopus_lowShape.extent");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v35, &__p);
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  v5 = sub_20C729324((uint64_t *)&v42);
  (*(void (**)(void **__return_ptr, uint64_t, int *))(*(_QWORD *)v5 + 248))(&__p, v5, &v35);
  if (v34)
  {
    fwrite("\nExtent samples:\n", 0x11uLL, 1uLL, *v3);
    v6 = (double *)__p;
    if (__p != &v33)
    {
      do
      {
        v7 = v6[4];
        v44 = 0;
        v8 = sub_20C729324((uint64_t *)&v42);
        v9 = (*(uint64_t (**)(uint64_t, int *, char *, double))(*(_QWORD *)v8 + 280))(v8, &v35, v43, v7);
        v10 = *v3;
        if (v9)
        {
          sub_20BF834B0((uint64_t)v43);
          if (v31 >= 0)
            v11 = (const char *)&v30;
          else
            v11 = (const char *)v30;
          fprintf(v10, "  %f: %s\n", v7, v11);
          if (v31 < 0)
            operator delete(v30);
        }
        else
        {
          fprintf(v10, "  %f: <no value>\n", v7);
        }
        sub_20BF4C2D8((uint64_t)v43);
        v12 = (double *)*((_QWORD *)v6 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(double **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (double *)*((_QWORD *)v6 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v6;
            v6 = v13;
          }
          while (!v14);
        }
        v6 = v13;
      }
      while (v13 != (double *)&v33);
    }
    if (v34 > 1)
    {
      v15 = v33;
      v16 = floor(*((double *)__p + 4));
      if (v33)
      {
        do
        {
          v17 = v15;
          v15 = (_QWORD *)v15[1];
        }
        while (v15);
      }
      else
      {
        v20 = &v33;
        do
        {
          v17 = v20[2];
          v14 = *v17 == (_QWORD)v20;
          v20 = (_QWORD **)v17;
        }
        while (v14);
      }
      for (i = ceil(*((double *)v17 + 4)); v16 <= i; v16 = v16 + 1.0)
      {
        v22 = v33;
        if (v33)
        {
          v23 = &v33;
          do
          {
            v24 = v22;
            v25 = v23;
            v26 = *((double *)v22 + 4);
            v27 = v22 + 1;
            if (v26 >= v16)
            {
              v27 = v24;
              v23 = (_QWORD **)v24;
            }
            v22 = (_QWORD *)*v27;
          }
          while (v22);
          if (v23 != &v33)
          {
            if (v26 < v16)
              v24 = v25;
            if (v16 >= *((double *)v24 + 4))
              continue;
          }
        }
        v28 = sub_20C729324((uint64_t *)&v42);
        if ((*(unsigned int (**)(uint64_t, int *, _QWORD, double))(*(_QWORD *)v28 + 280))(v28, &v35, 0, v16))
        {
          fprintf(*v3, "  %f: <expected sample>\n", v16);
        }
      }
    }
  }
  sub_20BE6100C((uint64_t)&__p, v33);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  v37[0] = &unk_24C545C50;
  __p = v38;
  sub_20BFD6F90((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)v37);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v39);
  v19 = 1;
LABEL_46:
  sub_20C72985C(&v42);
  return v19;
}

void sub_20C75F204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20C75F2A8(void **a1)
{
  void **v2;

  *a1 = &unk_24C545C50;
  v2 = a1 + 2;
  sub_20BFD6F90(&v2);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_WriteAlembic(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  const char *v11;
  _QWORD **v13;
  _QWORD *v14[2];
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v23;

  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous(a1, 0, (uint64_t)v21, &v23);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (v23)
  {
    v4 = sub_20BDDC0E4(v21, ".abc");
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)v4, (uint64_t)v17, &v19);
    v5 = sub_20BFCF6F4(&v19);
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v14[0] = 0;
    v14[1] = 0;
    v13 = v14;
    v6 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t, void **, _QWORD ***))(*(_QWORD *)v5 + 64))(v5, v23, a2, __p, &v13);
    sub_20BDE9D48((uint64_t)&v13, v14[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    v7 = v20;
    if (v20)
    {
      v8 = (unsigned int *)(v20 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
  else
  {
    if (*(char *)(a1 + 23) >= 0)
      v11 = (const char *)a1;
    else
      v11 = *(const char **)a1;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Can't open '%s'\n", v11);
    v6 = 0;
  }
  sub_20C103234(&v23);
  return v6;
}

void sub_20C75F45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  sub_20BDE9D48((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  v26 = *(unsigned int **)(v24 - 56);
  if (v26)
  {
    v27 = v26 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
  }
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v24 - 25) < 0)
    operator delete(*(void **)(v24 - 48));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v24 - 24));
  _Unwind_Resume(a1);
}

void sub_20C75F4F0()
{
  uint64_t v0;

  if (*(char *)(v0 - 25) < 0)
    operator delete(*(void **)(v0 - 48));
  JUMPOUT(0x20C75F4E8);
}

void sub_20C75F508(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
  operator delete(v1);
}

uint64_t sub_20C75F51C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  FILE **v5;
  FILE *v6;
  int PathElementCount;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  FILE *v9;
  uint64_t *v10;
  const char *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  int v13;
  FILE *v14;
  std::string *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  FILE *v17;
  const char *v18;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v19;
  FILE *v20;
  const char *v21;
  FILE *v22;
  uint64_t *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  uint64_t v25;
  __int128 v26;
  __int128 *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v43;
  __int128 *v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  char v50;
  const std::string::value_type *v51;
  FILE *v52;
  uint64_t *Name;
  const char *v54;
  std::string *v55;
  uint64_t v56;
  std::string::size_type v57;
  char v58;
  const char *v59;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v60;
  uint64_t v61;
  FILE *v62;
  int v63;
  double *v64;
  double *v65;
  double *v66;
  BOOL v67;
  FILE *v68;
  const char *v69;
  size_t v70;
  FILE *v71;
  int v72;
  FILE *v73;
  int v74;
  int v75;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v76;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v77;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v78;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v79;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  _QWORD *v81;
  std::type_info *Fallback;
  char *v83;
  FILE *v84;
  int v85;
  unint64_t v86;
  const char *v87;
  const char *v88;
  _QWORD *v89;
  _OWORD *v90;
  void *v92;
  char v93;
  _BYTE __p[32];
  __int128 *v95;
  _QWORD v96[2];
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  std::string v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a3 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1))
  {
    v5 = (FILE **)MEMORY[0x24BDAC8E8];
    v6 = (FILE *)*MEMORY[0x24BDAC8E8];
    PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
    fprintf(v6, "%*s", 2 * PathElementCount - 2, "");
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v12)
        v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      (*(void (**)(std::string *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)a2 + 136))(&v105, a2, a3, (uint64_t)v12 + 312);
      v13 = sub_20C0DE26C((pxrInternal__aapl__pxrReserved__::VtValue *)&v105);
      v14 = *v5;
      if (v13)
      {
        if ((v105.__r_.__value_.__s.__data_[8] & 4) != 0)
          v15 = (std::string *)(*(uint64_t (**)(std::string *))((v105.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
                                                                        + 168))(&v105);
        else
          v15 = &v105;
        fprintf(v14, "%s ", off_25473DA48[LODWORD(v15->__r_.__value_.__l.__data_)]);
      }
      else
      {
        fwrite("!BAD_SPEC ", 0xAuLL, 1uLL, *v5);
      }
      v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19)
        v19 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)a2 + 136))(&v97, a2, a3, (uint64_t)v19 + 448);
      if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
      {
        v20 = *v5;
        sub_20BF834B0((uint64_t)&v97);
        if (__p[23] >= 0)
          v21 = __p;
        else
          v21 = *(const char **)__p;
        fprintf(v20, "%s ", v21);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else if (*((_QWORD *)&v97 + 1))
      {
        fwrite("!BAD_TYPE ", 0xAuLL, 1uLL, *v5);
      }
      v52 = *v5;
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
      if (*((char *)Name + 23) >= 0)
        v54 = (const char *)Name;
      else
        v54 = (const char *)*Name;
      fprintf(v52, "%s\n", v54);
      sub_20BF4C2D8((uint64_t)&v97);
      v55 = &v105;
      goto LABEL_151;
    }
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8)
      v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)a2 + 136))(&v103, a2, a3, (uint64_t)v8 + 64);
    if (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
    {
      v9 = *v5;
      if ((v104 & 4) != 0)
        v10 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
      else
        v10 = &v103;
      if (*(_BYTE *)v10)
        v11 = "custom ";
      else
        v11 = "";
      fputs(v11, v9);
    }
    else if (v104)
    {
      fwrite("!BAD_CUSTOM ", 0xCuLL, 1uLL, *v5);
    }
    v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16)
      v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)a2 + 136))(v102, a2, a3, (uint64_t)v16 + 448);
    if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v102))
    {
      v17 = *v5;
      sub_20BF834B0((uint64_t)v102);
      if (__p[23] >= 0)
        v18 = __p;
      else
        v18 = *(const char **)__p;
      fprintf(v17, "%s ", v18);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    else if (v102[1])
    {
      fwrite("!BAD_TYPE ", 0xAuLL, 1uLL, *v5);
    }
    v22 = *v5;
    v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
    if (*((char *)v23 + 23) < 0)
      v23 = (uint64_t *)*v23;
    fputs((const char *)v23, v22);
    v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24)
      v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)a2 + 136))(&v100, a2, a3, (uint64_t)v24 + 88);
    if (v101)
    {
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)&v100))
        goto LABEL_89;
      if (sub_20C07FEB8((pxrInternal__aapl__pxrReserved__::VtValue *)&v100))
      {
        if ((v101 & 4) != 0)
          v25 = (*(uint64_t (**)(uint64_t *))((v101 & 0xFFFFFFFFFFFFFFF8) + 168))(&v100);
        else
          v25 = v100;
        v26 = *(_OWORD *)(v25 + 16);
        *(_OWORD *)__p = *(_OWORD *)v25;
        *(_OWORD *)&__p[16] = v26;
        v27 = *(__int128 **)(v25 + 32);
        v95 = v27;
        if (v27)
        {
          v28 = (unint64_t *)(v27 - 1);
          if (*(_QWORD *)&__p[24])
            v28 = *(unint64_t **)&__p[24];
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = *(_QWORD *)__p;
        if (*(_QWORD *)__p >= 6uLL)
        {
          v31 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_20C00134C((uint64_t)&v105, 5uLL);
          v32 = (int *)v95;
          sub_20C001998(v31, v33, v34);
          v35 = (_DWORD *)v106;
          v36 = *v32;
          *(_BYTE *)(v106 + 4) = *((_BYTE *)v32 + 4);
          *v35 = v36;
          sub_20C07FDF0(&v100, (uint64_t)&v105);
          sub_20BF5618C((uint64_t)&v105);
        }
        sub_20BF5618C((uint64_t)__p);
        if (v30 > 5)
          goto LABEL_82;
      }
      if (sub_20BF57C2C((pxrInternal__aapl__pxrReserved__::VtValue *)&v100))
      {
        if ((v101 & 4) != 0)
          v37 = (*(uint64_t (**)(uint64_t *))((v101 & 0xFFFFFFFFFFFFFFF8) + 168))(&v100);
        else
          v37 = v100;
        v38 = *(_OWORD *)(v37 + 16);
        *(_OWORD *)__p = *(_OWORD *)v37;
        *(_OWORD *)&__p[16] = v38;
        v39 = *(__int128 **)(v37 + 32);
        v95 = v39;
        if (v39)
        {
          v40 = (unint64_t *)(v39 - 1);
          if (*(_QWORD *)&__p[24])
            v40 = *(unint64_t **)&__p[24];
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = *(_QWORD *)__p;
        if (*(_QWORD *)__p >= 6uLL)
        {
          v43 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_20BF577E4((uint64_t)&v105, 5uLL);
          v44 = v95;
          sub_20BF57AE4(v43, v45, v46);
          v47 = (_OWORD *)v106;
          v48 = *v44;
          v49 = v44[1];
          *(_QWORD *)(v106 + 32) = *((_QWORD *)v44 + 4);
          *v47 = v48;
          v47[1] = v49;
          sub_20BF57C64(&v100, (uint64_t)&v105);
          sub_20BF5618C((uint64_t)&v105);
        }
        sub_20BF5618C((uint64_t)__p);
        if (v42 > 5)
          goto LABEL_82;
      }
      if (sub_20C7602B0((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C7603D4((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C7604F4((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760614((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760734((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760854((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760978((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760A9C((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760BBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760CDC((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760DFC((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C760F1C((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C76103C((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C76115C((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C761280((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C7613A4((pxrInternal__aapl__pxrReserved__::VtValue *)&v100)
        || sub_20C7614C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v100))
      {
LABEL_82:
        v50 = 0;
        v51 = "...";
      }
      else
      {
LABEL_89:
        v51 = 0;
        v50 = 1;
      }
      sub_20BF834B0((uint64_t)&v100);
      if ((v50 & 1) == 0)
      {
        v56 = __p[23];
        if (__p[23] < 0)
          v56 = *(_QWORD *)&__p[8];
        std::string::insert((std::string *)__p, v56 - 1, v51);
      }
      if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v100))
      {
        sub_20C7615FC(34, (const void **)__p, (uint64_t)&v105);
        std::string::push_back(&v105, 34);
        *(_QWORD *)&v97 = v105.__r_.__value_.__l.__size_;
        v57 = v105.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)&v97 + 7) = *(std::string::size_type *)((char *)&v105.__r_.__value_.__r.__words[1] + 7);
        v58 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        memset(&v105, 0, sizeof(v105));
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          *(_QWORD *)__p = v57;
          *(_QWORD *)&__p[8] = v97;
          *(_QWORD *)&__p[15] = *(_QWORD *)((char *)&v97 + 7);
          __p[23] = v58;
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
        }
        else
        {
          *(_QWORD *)__p = v57;
          *(_QWORD *)&__p[8] = v97;
          *(_QWORD *)&__p[15] = *(_QWORD *)((char *)&v97 + 7);
          __p[23] = v58;
        }
      }
      v59 = __p;
      if (__p[23] < 0)
        v59 = *(const char **)__p;
      fprintf(*v5, " = %s\n", v59);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v60 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v60)
      v60 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)a2 + 136))(&v98, a2, a3, (uint64_t)v60 + 432);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)a2 + 248))(__p, a2, a3);
    if (!v99)
    {
      if (*(_QWORD *)&__p[16] >= 2uLL)
      {
        v71 = *v5;
        v72 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
        fprintf(v71, "%*s", 2 * v72 - 2, "");
        fprintf(*v5, "!NO_SAMPLES, want %zd\n");
      }
      goto LABEL_123;
    }
    if (sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
    {
      if ((v99 & 4) != 0)
        v61 = (*(uint64_t (**)(uint64_t *))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(&v98);
      else
        v61 = v98;
      v62 = *v5;
      if (*(_QWORD *)&__p[16] != *(_QWORD *)(v61 + 16))
      {
        v75 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
        fprintf(v62, "%*s", 2 * v75 - 2, "");
        fprintf(*v5, "!SAMPLES_MISMATCH, have %zd vs want %zd\n");
        goto LABEL_123;
      }
      v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
      fprintf(v62, "%*s", 2 * v63 - 2, "");
      fwrite("samples_at=[ ", 0xDuLL, 1uLL, *v5);
      v64 = *(double **)__p;
      if (*(_BYTE **)__p != &__p[8])
      {
        do
        {
          fprintf(*v5, "%g ", v64[4]);
          v65 = (double *)*((_QWORD *)v64 + 1);
          if (v65)
          {
            do
            {
              v66 = v65;
              v65 = *(double **)v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              v66 = (double *)*((_QWORD *)v64 + 2);
              v67 = *(_QWORD *)v66 == (_QWORD)v64;
              v64 = v66;
            }
            while (!v67);
          }
          v64 = v66;
        }
        while (v66 != (double *)&__p[8]);
      }
      v68 = *v5;
      v69 = "]\n";
      v70 = 2;
    }
    else
    {
      v73 = *v5;
      v74 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
      fprintf(v73, "%*s", 2 * v74 - 2, "");
      v68 = *v5;
      v69 = "!BAD_SAMPLES\n";
      v70 = 13;
    }
    fwrite(v69, v70, 1uLL, v68);
LABEL_123:
    (*(void (**)(std::string *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)a2 + 176))(&v105, a2, a3);
    sub_20C0D80BC((uint64_t)&v97, (uint64_t *)v105.__r_.__value_.__l.__data_, (uint64_t *)v105.__r_.__value_.__l.__size_);
    v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v76)
      v76 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C761688((uint64_t **)&v97, (uint64_t *)v76 + 8);
    v77 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v77)
      v77 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C761688((uint64_t **)&v97, (uint64_t *)v77 + 56);
    v78 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v78)
      v78 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C761688((uint64_t **)&v97, (uint64_t *)v78 + 11);
    v79 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v79)
      v79 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C761688((uint64_t **)&v97, (uint64_t *)v79 + 54);
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    v81 = (_QWORD *)v97;
    if ((__int128 *)v97 != (__int128 *)((char *)&v97 + 8))
    {
      do
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, _QWORD *))(*(_QWORD *)a2 + 136))(v96, a2, a3, v81 + 4);
        Fallback = (std::type_info *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v81 + 4));
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v96, Fallback, v83) & 1) == 0)
        {
          v84 = (FILE *)*MEMORY[0x24BDAC8E8];
          v85 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
          v86 = v81[4] & 0xFFFFFFFFFFFFFFF8;
          if (v86)
          {
            v87 = (const char *)(v86 + 16);
            if (*(char *)(v86 + 39) < 0)
              v87 = *(const char **)v87;
          }
          else
          {
            v87 = "";
          }
          sub_20BF834B0((uint64_t)v96);
          if (v93 >= 0)
            v88 = (const char *)&v92;
          else
            v88 = (const char *)v92;
          fprintf(v84, "%*s# %s = %s\n", 2 * v85 - 2, "", v87, v88);
          if (v93 < 0)
            operator delete(v92);
        }
        sub_20BF4C2D8((uint64_t)v96);
        v89 = (_QWORD *)v81[1];
        if (v89)
        {
          do
          {
            v90 = v89;
            v89 = (_QWORD *)*v89;
          }
          while (v89);
        }
        else
        {
          do
          {
            v90 = (_OWORD *)v81[2];
            v67 = *(_QWORD *)v90 == (_QWORD)v81;
            v81 = v90;
          }
          while (!v67);
        }
        v81 = v90;
      }
      while (v90 != (__int128 *)((char *)&v97 + 8));
    }
    sub_20BF2B200((uint64_t)&v97, *((_QWORD **)&v97 + 1));
    *(_QWORD *)&v97 = &v105;
    sub_20BEEB2B8((void ***)&v97);
    sub_20BE6100C((uint64_t)__p, *(_QWORD **)&__p[8]);
    sub_20BF4C2D8((uint64_t)&v98);
    sub_20BF4C2D8((uint64_t)&v100);
    sub_20BF4C2D8((uint64_t)v102);
    v55 = (std::string *)&v103;
LABEL_151:
    sub_20BF4C2D8((uint64_t)v55);
  }
  return 1;
}

void sub_20C760124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C7602B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  _BYTE v15[32];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;

  if (!sub_20BF565F0(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v17 = *(_OWORD *)v3;
  v18 = v4;
  v5 = *(__int128 **)(v3 + 32);
  v19 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 1);
    if (*((_QWORD *)&v18 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v18 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v17;
  if ((unint64_t)v17 >= 6)
  {
    sub_20BF56024((uint64_t)v15, 5uLL);
    v9 = v19;
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15, v10, v11);
    v12 = (_OWORD *)v16;
    v13 = *v9;
    *(_DWORD *)(v16 + 16) = *((_DWORD *)v9 + 4);
    *v12 = v13;
    sub_20BF56628(a1, (uint64_t)v15);
    sub_20BF5618C((uint64_t)v15);
  }
  sub_20BF5618C((uint64_t)&v17);
  return v8 > 5;
}

void sub_20C7603A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C7603D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20C1D2A38(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20C0160C8((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0xA0uLL);
    sub_20C1D2A70(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C7604C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C7604F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20C1D2EA4(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20C016D64((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x168uLL);
    sub_20C1D2EDC(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C7605E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760614(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20BF5FDC8(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20BF5F80C((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x280uLL);
    sub_20BF5FE00(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C760704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760734(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20BF5A0F8(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20BF59CB4((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x50uLL);
    sub_20BF5A130(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C760824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760854(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _BYTE v16[32];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;

  if (!sub_20BF58AAC(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v18 = *(_OWORD *)v3;
  v19 = v4;
  v5 = *(__int128 **)(v3 + 32);
  v20 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 1);
    if (*((_QWORD *)&v19 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v18;
  if ((unint64_t)v18 >= 6)
  {
    sub_20BF585AC((uint64_t)v16, 5uLL);
    v9 = v20;
    sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v10, v11);
    v12 = (_OWORD *)v17;
    v13 = *v9;
    v14 = v9[1];
    *(_QWORD *)(v17 + 32) = *((_QWORD *)v9 + 4);
    *v12 = v13;
    v12[1] = v14;
    sub_20BF58AE4(a1, (uint64_t)v16);
    sub_20BF5618C((uint64_t)v16);
  }
  sub_20BF5618C((uint64_t)&v18);
  return v8 > 5;
}

void sub_20C760948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760978(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _BYTE v16[32];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;

  if (!sub_20C1D3BE8(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v18 = *(_OWORD *)v3;
  v19 = v4;
  v5 = *(__int128 **)(v3 + 32);
  v20 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 1);
    if (*((_QWORD *)&v19 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v18;
  if ((unint64_t)v18 >= 6)
  {
    sub_20C00F4D0((uint64_t)v16, 5uLL);
    v9 = v20;
    sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v10, v11);
    v12 = (_OWORD *)v17;
    v13 = *v9;
    v14 = v9[1];
    *(_QWORD *)(v17 + 32) = *((_QWORD *)v9 + 4);
    *v12 = v13;
    v12[1] = v14;
    sub_20C1D3C20(a1, (uint64_t)v16);
    sub_20BF5618C((uint64_t)v16);
  }
  sub_20BF5618C((uint64_t)&v18);
  return v8 > 5;
}

void sub_20C760A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760A9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20BF5C88C(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20BF5C3C4((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x78uLL);
    sub_20BF5C8C4(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C760B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760BBC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20BF5B118(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20BF5AB98((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x3CuLL);
    sub_20BF5B150(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C760CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760CDC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20C1D45CC(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20C0112EC((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x3CuLL);
    sub_20C1D4604(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C760DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760DFC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20BF5EDE8(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20BF5E990((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0xA0uLL);
    sub_20BF5EE20(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C760EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C760F1C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20BF5D738(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20BF5D23C((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x50uLL);
    sub_20BF5D770(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C76100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C76103C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[32];
  void *__dst;
  __int128 v15;
  __int128 v16;
  const void *v17;

  if (!sub_20C1D50E8(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v15 = *(_OWORD *)v3;
  v16 = v4;
  v5 = *(char **)(v3 + 32);
  v17 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v16 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_20C013364((uint64_t)v13, 5uLL);
    v9 = v17;
    sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    memmove(__dst, v9, 0x50uLL);
    sub_20C1D5120(a1, (uint64_t)v13);
    sub_20BF5618C((uint64_t)v13);
  }
  sub_20BF5618C((uint64_t)&v15);
  return v8 > 5;
}

void sub_20C76112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C76115C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  _BYTE v15[32];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;

  if (!sub_20BF64C0C(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v17 = *(_OWORD *)v3;
  v18 = v4;
  v5 = *(__int128 **)(v3 + 32);
  v19 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 1);
    if (*((_QWORD *)&v18 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v18 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v17;
  if ((unint64_t)v17 >= 6)
  {
    sub_20BF64CC4((uint64_t)v15, 5uLL);
    v9 = v19;
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15, v10, v11);
    v12 = (_OWORD *)v16;
    v13 = *v9;
    *(_DWORD *)(v16 + 16) = *((_DWORD *)v9 + 4);
    *v12 = v13;
    sub_20BF6510C(a1, (uint64_t)v15);
    sub_20BF5618C((uint64_t)v15);
  }
  sub_20BF5618C((uint64_t)&v17);
  return v8 > 5;
}

void sub_20C761250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C761280(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  std::string *v5;
  unint64_t *p_size;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  std::string *v13[5];
  __int128 v14;
  __int128 v15;
  std::string *v16;
  char v17;

  if (!sub_20BFED500(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v14 = *(_OWORD *)v3;
  v15 = v4;
  v5 = *(std::string **)(v3 + 32);
  v16 = v5;
  if (v5)
  {
    p_size = &v5[-1].__r_.__value_.__l.__size_;
    if (*((_QWORD *)&v15 + 1))
      p_size = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v7 = __ldxr(p_size);
    while (__stxr(v7 + 1, p_size));
  }
  v8 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_20C00A144((uint64_t)v13, 5uLL);
    v9 = v16;
    sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    sub_20C33DC6C((int)&v17, v9, v9 + 10, v13[4]);
    sub_20C1D1D28(a1, (uint64_t)v13);
    sub_20C00A724(v13);
  }
  sub_20C00A724(&v14);
  return v8 > 5;
}

void sub_20C761374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00A724((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C7613A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  std::string *v5;
  unint64_t *p_size;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  std::string *v13[5];
  __int128 v14;
  __int128 v15;
  std::string *v16;

  if (!sub_20BFED418(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v14 = *(_OWORD *)v3;
  v15 = v4;
  v5 = *(std::string **)(v3 + 32);
  v16 = v5;
  if (v5)
  {
    p_size = &v5[-1].__r_.__value_.__l.__size_;
    if (*((_QWORD *)&v15 + 1))
      p_size = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v7 = __ldxr(p_size);
    while (__stxr(v7 + 1, p_size));
  }
  v8 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_20C007D50((uint64_t)v13, 5uLL);
    v9 = v16;
    sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v10, v11);
    sub_20BE75A80(v9, v9 + 5, v13[4]);
    sub_20C080704(a1, (uint64_t)v13);
    sub_20C008280(v13);
  }
  sub_20C008280(&v14);
  return v8 > 5;
}

void sub_20C761494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C008280((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C7614C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (!sub_20BFED450(a1))
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v3 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(v3 + 16);
  v16 = *(_OWORD *)v3;
  v17 = v4;
  v5 = *(_QWORD *)(v3 + 32);
  v18 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*((_QWORD *)&v17 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v16;
  if ((unint64_t)v16 >= 6)
  {
    sub_20C008C78((uint64_t)v15, 5uLL);
    v9 = v18;
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15, v10, v11);
    v12 = 0;
    v13 = v15[4];
    do
    {
      sub_20BF32220((_QWORD *)(v13 + v12), (_QWORD *)(v9 + v12));
      v12 += 8;
    }
    while (v12 != 40);
    sub_20C1D1830(a1, (uint64_t)v15);
    sub_20C00918C(v15);
  }
  sub_20C00918C(&v16);
  return v8 > 5;
}

void sub_20C7615CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00918C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7615FC@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  _BYTE *v7;
  void *v8;
  const void *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = sub_20BDF6BDC(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (_BYTE *)result;
  else
    v7 = *(_BYTE **)result;
  *v7 = a1;
  v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  *((_BYTE *)v8 + v5) = 0;
  return result;
}

uint64_t sub_20C761688(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = sub_20C0D8030((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_20C1298E0(a1, v3);
  return 1;
}

void sub_20C7616CC(void **a1)
{
  void *v2;
  void **v3;

  *a1 = &unk_24C545C50;
  v3 = a1 + 2;
  sub_20BFD6F90(&v3);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
  operator delete(v2);
}

uint64_t sub_20C76171C(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v5;
  uint64_t v6;

  if (a1[1])
  {
    v5 = a1[3];
    if (v5 >= a1[4])
    {
      v6 = sub_20BFD7890(a1 + 2, a3);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a1[3], a3);
      sub_20BFD6EA4((_DWORD *)(v5 + 4), a3 + 1);
      v6 = v5 + 8;
    }
    a1[3] = v6;
  }
  return 1;
}

_DWORD *sub_20C76178C(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  _DWORD *i;
  _DWORD *v13;
  char v14;

  if (*((_QWORD *)result + 1))
  {
    v3 = result;
    v4 = *((_QWORD *)result + 2);
    v5 = (int *)*((_QWORD *)v3 + 3);
    v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
    if (v5 == (int *)v4)
      v7 = 0;
    else
      v7 = v6;
    sub_20C028540(v4, v5, (uint64_t)&v14, v7, 1);
    v8 = *((_QWORD *)v3 + 2);
    v9 = *((_QWORD *)v3 + 3);
    while (v8 != v9)
    {
      while ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2, v8))
      {
        v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v3 + 1) + 16))(*((_QWORD *)v3 + 1), a2, v8);
        v8 += 8;
        if (v10)
          v11 = v8 == v9;
        else
          v11 = 1;
        if (v11)
          goto LABEL_15;
      }
      v8 += 8;
    }
LABEL_15:
    result = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v3 + 1) + 24))(*((_QWORD *)v3 + 1), a2);
    v13 = (_DWORD *)*((_QWORD *)v3 + 2);
    for (i = (_DWORD *)*((_QWORD *)v3 + 3); i != v13; result = sub_20BFD6F64((uint64_t)(v3 + 8), i))
      i -= 2;
    *((_QWORD *)v3 + 3) = v13;
  }
  return result;
}

uint64_t sub_20C761890()
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::~UsdAbc_AlembicContextFlagNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v13 = (void **)((char *)this + 32);
  sub_20BEEB2B8(&v13);
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::UsdAbc_AlembicContextFlagNames_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "verbose", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "expandInstances", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "disableInstancing", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "promoteInstances", 0);
  v3 = *this;
  v26 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v26 = v4;
  }
  v6 = *v2;
  v27 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v27 = v7;
  }
  v9 = this[2];
  v28 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v28 = v10;
  }
  v12 = this[3];
  v29 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v29 = v13;
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  v15 = (unsigned int *)operator new(0x20uLL);
  v16 = 0;
  this[4] = v15;
  this[5] = v15;
  this[6] = v15 + 8;
  do
  {
    v17 = (&v26)[v16];
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v20 = (unsigned int **)&v30;
  this[5] = v15;
  do
  {
    v22 = (uint64_t)*--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v26);
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)this;
}

void sub_20C761B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::~UsdAbcPrimTypeNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  void **v34;

  v34 = (void **)((char *)this + 88);
  sub_20BEEB2B8(&v34);
  v2 = *((_QWORD *)this + 10);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 9);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 7);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 6);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 5);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 4);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 3);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 2);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v32 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::UsdAbcPrimTypeNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v46 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "BasisCurves", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v46, "Camera", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "HermiteCurves", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "Mesh", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "NurbsCurves", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "Points", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "PolyMesh", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "PseudoRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "Scope", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "Xform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "GeomSubset", 0);
  v2 = *(_QWORD *)this;
  v47 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v46;
  v48 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v49 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v50 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v51 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v52 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v53 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v54 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v55 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v56 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v57 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v35 = operator new(0x58uLL);
  v36 = 0;
  *((_QWORD *)this + 11) = v35;
  *((_QWORD *)this + 12) = v35;
  *((_QWORD *)this + 13) = v35 + 11;
  do
  {
    v37 = *(&v47 + v36);
    *v35 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v36;
    ++v35;
  }
  while (v36 != 11);
  v40 = &v58;
  *((_QWORD *)this + 12) = v35;
  do
  {
    v42 = *--v40;
    v41 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  while (v40 != &v47);
  return this;
}

void sub_20C762240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;

  sub_20BEEB2B8(&a11);
  v34 = (char *)&a24;
  while (1)
  {
    v36 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    v35 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if (v34 == &a13)
    {
      if ((*v25 & 7) != 0)
      {
        v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v33 & 7) != 0)
      {
        v41 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v32 & 7) != 0)
      {
        v43 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v31 & 7) != 0)
      {
        v45 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v30 & 7) != 0)
      {
        v47 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v29 & 7) != 0)
      {
        v49 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v28 & 7) != 0)
      {
        v51 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v27 & 7) != 0)
      {
        v53 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v26 & 7) != 0)
      {
        v55 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*a10 & 7) != 0)
      {
        v57 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v24 & 7) != 0)
      {
        v59 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C762428()
{
  JUMPOUT(0x20C7623DCLL);
}

void sub_20C762430()
{
  JUMPOUT(0x20C762400);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::~UsdAbcPropertyNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  void **v25;

  v25 = (void **)((char *)this + 64);
  sub_20BEEB2B8(&v25);
  v2 = *((_QWORD *)this + 7);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 6);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 2);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 1);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v23 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::UsdAbcPropertyNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "primvars", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "userProperties", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "materialBind", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "subsetFamily:materialBind:familyType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "primvars:uv", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "primvars:uv:indices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "primvars:st", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "primvars:st:indices", 0);
  v3 = *(_QWORD *)this;
  v38 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v39 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v40 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v41 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v42 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v43 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v44 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v45 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v27 = operator new(0x40uLL);
  v28 = 0;
  *((_QWORD *)this + 8) = v27;
  *((_QWORD *)this + 9) = v27;
  *((_QWORD *)this + 10) = v27 + 8;
  do
  {
    v29 = *(&v38 + v28);
    *v27 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        *v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v28;
    ++v27;
  }
  while (v28 != 8);
  v32 = &v46;
  *((_QWORD *)this + 9) = v27;
  do
  {
    v34 = *--v32;
    v33 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
  }
  while (v32 != &v38);
  return this;
}

void sub_20C7628EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;

  sub_20BEEB2B8(&a10);
  v29 = &a20;
  while (1)
  {
    v31 = *--v29;
    v30 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if (v29 == (uint64_t *)&a12)
    {
      if ((*v27 & 7) != 0)
      {
        v34 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v26 & 7) != 0)
      {
        v36 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v25 & 7) != 0)
      {
        v38 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v24 & 7) != 0)
      {
        v40 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v23 & 7) != 0)
      {
        v42 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v22 & 7) != 0)
      {
        v44 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v21 & 7) != 0)
      {
        v46 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v20 & 7) != 0)
      {
        v48 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::~UsdAbcCustomMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v13 = (void **)((char *)this + 32);
  sub_20BEEB2B8(&v13);
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::UsdAbcCustomMetadata_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "gprimDataRender", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "riName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "riType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "singleSampleAsDefault", 0);
  v3 = *this;
  v26 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v26 = v4;
  }
  v6 = *v2;
  v27 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v27 = v7;
  }
  v9 = this[2];
  v28 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v28 = v10;
  }
  v12 = this[3];
  v29 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v29 = v13;
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  v15 = (unsigned int *)operator new(0x20uLL);
  v16 = 0;
  this[4] = v15;
  this[5] = v15;
  this[6] = v15 + 8;
  do
  {
    v17 = (&v26)[v16];
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v20 = (unsigned int **)&v30;
  this[5] = v15;
  do
  {
    v22 = (uint64_t)*--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v26);
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)this;
}

void sub_20C762D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::Stringify(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *this, const char *a2, char *a3)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  v3 = *(int *)this;
  if (*((_BYTE *)this + 4) == 1)
  {
    if (v3 > 0xD)
      v4 = "UNKNOWN";
    else
      v4 = off_24C54A268[v3];
    if (*((_BYTE *)this + 5))
      v6 = "[]";
    else
      v6 = "";
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s", a2, a3, v4, v6);
  }
  else
  {
    if (v3 > 0xD)
      v5 = "UNKNOWN";
    else
      v5 = off_24C54A268[v3];
    if (*((_BYTE *)this + 5))
      v7 = "[]";
    else
      v7 = "";
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s[%d]%s", a2, a3, v5, *((unsigned __int8 *)this + 4), v7);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4))
    return (*(_BYTE *)(a1 + 5) == 0) ^ (*(_BYTE *)(a2 + 5) != 0);
  else
    return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v5;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 4);
  v3 = *(unsigned __int8 *)(a2 + 4);
  if (v2 < v3)
    return 1;
  if (v3 < v2)
    return 0;
  if (*(_BYTE *)(a1 + 5))
    v5 = 1;
  else
    v5 = *(_BYTE *)(a2 + 5) == 0;
  return !v5;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_FormatAlembicVersion(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil *this, const char *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d.%d.%d", a2, a3, ((int)this / 10000), ((int)this / 100 % 100), ((int)this % 100));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::Error(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_EmptyHolder::_EmptyHolder(_QWORD *this)
{
  *this = off_24C545CA0;
  return this;
}

{
  *this = off_24C545CA0;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::_ErrorHolder(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_24C545CD0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_24C545CD0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::Error(uint64_t a1, std::string *this)
{
  if (this)
    std::string::operator=(this, (const std::string *)(a1 + 8));
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::~_ErrorHolder(void **this)
{
  *this = off_24C545CD0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C545CD0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C545CD0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  operator delete(this);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder::~_VtValueHolder(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder *this)
{
  *(_QWORD *)this = off_24C545D00;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder *)((char *)this + 8));
}

{
  *(_QWORD *)this = off_24C545D00;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder *)((char *)this + 8));
}

{
  *(_QWORD *)this = off_24C545D00;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder *)((char *)this + 8));
  operator delete(this);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;

  v3 = a1;
  return sub_20C7651E8(a2, &v3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::UsdAbc_AlembicDataConversion(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *this, const pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v3)
  {
LABEL_6:
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v5);
    return v5;
  }
  else
  {
    while (*(_DWORD *)(v2 + 8) != *(_DWORD *)a2
         || *(unsigned __int8 *)(v2 + 12) != *((unsigned __int8 *)a2 + 4)
         || (*(_BYTE *)(v2 + 13) == 0) == (*((_BYTE *)a2 + 5) != 0))
    {
      v2 += 80;
      if (v2 == v3)
        goto LABEL_6;
    }
    return *(_QWORD *)v2;
  }
}

_QWORD **pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetToUsdConverter(_QWORD *a1, uint64_t a2, _QWORD **a3)
{
  char *v3;
  _QWORD **v6;
  char *v7;
  unsigned __int8 v8;

  v3 = (char *)a1[1];
  if ((char *)*a1 == v3)
  {
LABEL_8:
    v8 = atomic_load((unsigned __int8 *)&qword_25498CBC0);
    if ((v8 & 1) != 0)
    {
      return (_QWORD **)&unk_25498CBA0;
    }
    else
    {
      v6 = (_QWORD **)&unk_25498CBA0;
      if (__cxa_guard_acquire(&qword_25498CBC0))
      {
        qword_25498CBB8 = 0;
        __cxa_atexit((void (*)(void *))sub_20C76342C, &unk_25498CBA0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CBC0);
      }
    }
  }
  else
  {
    v6 = (_QWORD **)(*a1 + 16);
    while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v6 - 2, a3)
         || *((_DWORD *)v6 - 2) != *(_DWORD *)a2
         || *((unsigned __int8 *)v6 - 4) != *(unsigned __int8 *)(a2 + 4)
         || (*((_BYTE *)v6 - 3) == 0) == (*(_BYTE *)(a2 + 5) != 0))
    {
      v7 = (char *)(v6 + 8);
      v6 += 10;
      if (v7 == v3)
        goto LABEL_8;
    }
  }
  return v6;
}

_QWORD *sub_20C76342C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v3)
    return 127;
  v5 = 127;
  while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)v2, (_QWORD **)a2))
  {
    v2 += 80;
    if (v2 == v3)
      return v5;
  }
  return *(_QWORD *)(v2 + 8);
}

_QWORD **pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD **v2;
  _QWORD **v3;
  unsigned __int8 v5;

  v2 = *(_QWORD ***)this;
  v3 = (_QWORD **)*((_QWORD *)this + 1);
  if (*(_QWORD ***)this == v3)
  {
LABEL_4:
    v5 = atomic_load((unsigned __int8 *)&qword_25498CBE8);
    if ((v5 & 1) != 0)
    {
      return (_QWORD **)&unk_25498CBC8;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_25498CBE8))
      {
        qword_25498CBE0 = 0;
        __cxa_atexit((void (*)(void *))sub_20C763590, &unk_25498CBC8, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CBE8);
      }
      return (_QWORD **)&unk_25498CBC8;
    }
  }
  else
  {
    while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v2, (_QWORD **)a2))
    {
      v2 += 10;
      if (v2 == v3)
        goto LABEL_4;
    }
    return v2 + 6;
  }
}

_QWORD *sub_20C763590(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[14];
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_20C765354(v13, a3, a2, a4, a5);
  v6 = (_QWORD *)a1[1];
  if ((unint64_t)v6 >= a1[2])
  {
    v8 = sub_20C7653EC(a1, (uint64_t *)v13);
  }
  else
  {
    v7 = *(_QWORD *)v13;
    *(_QWORD *)((char *)v6 + 6) = *(_QWORD *)&v13[6];
    *v6 = v7;
    sub_20C73F6A0((uint64_t)(v6 + 2), (uint64_t)v14);
    sub_20C765508((uint64_t)(v6 + 6), (uint64_t)v16);
    v8 = (uint64_t)(v6 + 10);
  }
  a1[1] = v8;
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_9;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_9:
  result = v15;
  if (v15 == v14)
  {
    v12 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20C763700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C76371C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76371C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions::UsdAbc_AlembicConversions(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *this, const std::type_info *a2, char *a3)
{
  const std::type_info *v4;
  char *v5;
  const std::type_info *v6;
  char *v7;
  const std::type_info *v8;
  char *v9;
  const std::type_info *v10;
  char *v11;
  const std::type_info *v12;
  char *v13;
  const std::type_info *v14;
  char *v15;
  const std::type_info *v16;
  char *v17;
  const std::type_info *v18;
  char *v19;
  const std::type_info *v20;
  char *v21;
  const std::type_info *v22;
  char *v23;
  const std::type_info *v24;
  char *v25;
  const std::type_info *v26;
  char *v27;
  const std::type_info *v28;
  char *v29;
  const std::type_info *v30;
  char *v31;
  const std::type_info *v32;
  char *v33;
  const std::type_info *v34;
  char *v35;
  const std::type_info *v36;
  char *v37;
  const std::type_info *v38;
  char *v39;
  const std::type_info *v40;
  char *v41;
  const std::type_info *v42;
  char *v43;
  const std::type_info *v44;
  char *v45;
  const std::type_info *v46;
  char *v47;
  const std::type_info *v48;
  char *v49;
  const std::type_info *v50;
  char *v51;
  const std::type_info *v52;
  char *v53;
  const std::type_info *v54;
  char *v55;
  const std::type_info *v56;
  char *v57;
  const std::type_info *v58;
  char *v59;
  const std::type_info *v60;
  char *v61;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v62;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v63;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v64;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v65;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v66;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v67;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v68;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v69;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v70;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v72;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v73;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v74;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v75;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  sub_20C76579C((uint64_t *)this, a2, a3);
  sub_20C7662A4((uint64_t *)this, v4, v5);
  sub_20C766E90((uint64_t *)this, v6, v7);
  sub_20C767A90((uint64_t *)this, v8, v9);
  sub_20C768690((uint64_t *)this, v10, v11);
  sub_20C7692BC((uint64_t *)this, v12, v13);
  sub_20C769EE8((uint64_t *)this, v14, v15);
  sub_20C76ACE4((uint64_t *)this, v16, v17);
  sub_20C76B7C0((uint64_t *)this, v18, v19);
  sub_20C76C400((uint64_t *)this, v20, v21);
  sub_20C763AD0((uint64_t *)this, v22, v23);
  sub_20C763B88((uint64_t *)this, v24, v25);
  sub_20C763C40((uint64_t *)this, v26, v27);
  sub_20C763CF8((uint64_t *)this, v28, v29);
  sub_20C763DB0((uint64_t *)this, v30, v31);
  sub_20C763E68((uint64_t *)this, v32, v33);
  sub_20C763F20((uint64_t *)this, v34, v35);
  sub_20C763FD8((uint64_t *)this, v36, v37);
  sub_20C764090((uint64_t *)this, v38, v39);
  sub_20C764148((uint64_t *)this, v40, v41);
  sub_20C764200((uint64_t *)this, v42, v43);
  sub_20C7642B8((uint64_t *)this, v44, v45);
  sub_20C764370((uint64_t *)this, v46, v47);
  sub_20C764428((uint64_t *)this, v48, v49);
  sub_20C7644E0((uint64_t *)this, v50, v51);
  sub_20C77427C((uint64_t *)this, v52, v53);
  sub_20C774C6C((uint64_t *)this, v54, v55);
  sub_20C775664((uint64_t *)this, v56, v57);
  sub_20C77605C((uint64_t *)this, v58, v59);
  sub_20C764598((uint64_t *)this, v60, v61);
  v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v62)
    v62 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764650((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v62 + 200));
  v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v63)
    v63 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C76489C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v63 + 208));
  v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v64)
    v64 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764AE8((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v64 + 216));
  v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v65)
    v65 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764650((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v65 + 248));
  v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v66)
    v66 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C76489C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v66 + 256));
  v67 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v67)
    v67 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764AE8((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v67 + 264));
  v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v68)
    v68 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764650((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v68 + 224));
  v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v69)
    v69 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C76489C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v69 + 232));
  v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v70)
    v70 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764AE8((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v70 + 240));
  v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v71)
    v71 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764650((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v71 + 272));
  v72 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v72)
    v72 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C76489C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v72 + 280));
  v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v73)
    v73 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764AE8((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v73 + 288));
  v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v74)
    v74 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764D34((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v74 + 368));
  v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v75)
    v75 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C764F80((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v75 + 384));
  return this;
}

void sub_20C763AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C75BE34((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C763AD0(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C140, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76D2AC(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763B88(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76DDE8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763C40(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C764F80(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763CF8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76E974(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763DB0(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C180, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76F470(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763E68(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C764650(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763F20(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76489C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C763FD8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C764AE8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764090(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51C1C0, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76FFA0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764148(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C770AA0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764200(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C7715D8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C7642B8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C7720DC(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764370(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C772BE8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764428(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C773728(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C7644E0(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C764D34(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764598(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C776CFC(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C764650(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 9;
  WORD2(v13) = 3;
  v16[0] = &unk_24C549888;
  v17 = v16;
  v14[0] = &unk_24C549920;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 9;
  WORD2(v13) = 259;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549990;
  v17 = v16;
  v14[0] = &unk_24C549A28;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76489C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 10;
  WORD2(v13) = 3;
  v16[0] = &unk_24C549A98;
  v17 = v16;
  v14[0] = &unk_24C549B30;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 10;
  WORD2(v13) = 259;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549BA0;
  v17 = v16;
  v14[0] = &unk_24C549C20;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C764A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C764AE8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 11;
  WORD2(v13) = 3;
  v16[0] = &unk_24C549C90;
  v17 = v16;
  v14[0] = &unk_24C549D28;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 11;
  WORD2(v13) = 259;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549D98;
  v17 = v16;
  v14[0] = &unk_24C549E30;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C764CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C764D34(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 11;
  WORD2(v13) = 16;
  v16[0] = &unk_24C549EA0;
  v17 = v16;
  v14[0] = &unk_24C549F20;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 11;
  WORD2(v13) = 272;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549F90;
  v17 = v16;
  v14[0] = &unk_24C54A010;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C764F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C764F80(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 10;
  WORD2(v13) = 2;
  v16[0] = &unk_24C54A080;
  v17 = v16;
  v14[0] = &unk_24C54A100;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 10;
  WORD2(v13) = 258;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C54A170;
  v17 = v16;
  v14[0] = &unk_24C54A208;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7651D0()
{
  return 0;
}

uint64_t sub_20C7651D8()
{
  return 0;
}

uint64_t sub_20C7651E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20C7651E8(_QWORD *a1, __int128 **a2)
{
  _QWORD *v4;
  __int128 *v5;
  _BYTE *v6;
  __int128 v7;

  *a1 = 0;
  v4 = operator new(0x20uLL);
  v5 = *a2;
  *v4 = off_24C545CD0;
  v6 = v4 + 1;
  if (*((char *)v5 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v7 = *v5;
    v4[3] = *((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v7;
  }
  sub_20C76527C(a1 + 1, (uint64_t)v4);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_20C765268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76527C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C545DB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7652C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7652E8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C7652FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C765314(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545E08))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C765354(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  *a1 = *a2;
  a1[1] = *a3;
  sub_20BE9E6E8((uint64_t)(a1 + 2), a4);
  sub_20BE9E6E8((uint64_t)(a1 + 6), a5);
  return a1;
}

void sub_20C7653AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 40);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7653EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE7AB58(v7, v9);
  else
    v10 = 0;
  v11 = &v10[80 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[80 * v9];
  v12 = *a2;
  *(_QWORD *)(v11 + 6) = *(uint64_t *)((char *)a2 + 6);
  *(_QWORD *)v11 = v12;
  sub_20C73F6A0((uint64_t)(v11 + 16), (uint64_t)(a2 + 2));
  sub_20C765508((uint64_t)(v11 + 48), (uint64_t)(a2 + 6));
  v15[2] = v11 + 80;
  sub_20C76556C(a1, v15);
  v13 = a1[1];
  sub_20C765728(v15);
  return v13;
}

void sub_20C7654F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C765728((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C765508(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20C76556C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7655E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7655E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 32;
    do
    {
      v11 = v9 - 48;
      v10 = *(_QWORD *)(v9 - 48);
      *(_QWORD *)(v7 - 74) = *(_QWORD *)(v9 - 42);
      *(_QWORD *)(v7 - 80) = v10;
      sub_20C73F6A0(v7 - 64, v9 - 32);
      sub_20C765508(v7 - 32, v9);
      v7 = *((_QWORD *)&v17 + 1) - 80;
      *((_QWORD *)&v17 + 1) -= 80;
      v9 -= 80;
    }
    while (v11 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C7656A4((uint64_t)v14);
  return v12;
}

uint64_t sub_20C7656A4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7656D8((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C7656D8(uint64_t *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = sub_20C75BEB8(v3, v1);
      v1 += 10;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C765728(void **a1)
{
  sub_20C765758(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *sub_20C765758(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = v3[4];
      v3[2] = v1 - 80;
      result = sub_20C75BEB8(v4, (_QWORD *)(v1 - 80));
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *sub_20C76579C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C765854(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C765854(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 0;
  WORD2(v13) = 1;
  v16[0] = &unk_24C545E30;
  v17 = v16;
  v14[0] = &unk_24C545EC0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 0;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C545F88;
  v17 = v16;
  v14[0] = &unk_24C546020;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C765A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C765AA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C545E30;
  return result;
}

void sub_20C765AC8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C545E30;
}

uint64_t sub_20C765AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C765B34(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C765AEC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545EA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C765B28()
{
  return &unk_24C545EA0;
}

uint64_t sub_20C765B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[55];
  char v11;

  v11 = 0;
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C75E920(a5, v11 != 0);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C765BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C765BCC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C545EC0;
  return result;
}

void sub_20C765BF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C545EC0;
}

_QWORD *sub_20C765C10@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C765C78(a1, a2);
}

uint64_t sub_20C765C30(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C545EA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C765C6C()
{
  return &unk_24C545EA0;
}

_QWORD *sub_20C765C78@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char v4;
  _BYTE *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_BYTE *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C545F40;
  v5[8] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C765CF4(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C765D04()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C545F88;
  return result;
}

void sub_20C765D2C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C545F88;
}

uint64_t sub_20C765D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C765D98(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C765D50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546000))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C765D8C()
{
  return &unk_24C546000;
}

uint64_t sub_20C765D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t *v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v35) = 0;
  DWORD2(v35) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, &v35, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = v40[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C00134C((uint64_t)&v35, v11);
    sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = v40[3] - (_QWORD)v17;
    if (!v18)
      goto LABEL_19;
    v19 = *v40;
    v20 = v18 >> 3;
    if (v20 <= 1)
      v20 = 1;
    v21 = 1;
    do
    {
      v22 = v21;
      v24 = *v17++;
      v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      v25 = 0;
      do
      {
        *(_BYTE *)(v16 + v25) = *(_BYTE *)(v19 + v25) != 0;
        ++v25;
      }
      while (v22 * v23 != v25);
      v32 = v35;
      v33 = v36;
      v34 = v16;
    }
    else
    {
LABEL_19:
      v32 = v35;
      v33 = v36;
      v34 = v37;
      if (!v37)
      {
LABEL_23:
        v13 = sub_20C765FAC(a5, (uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v35);
        goto LABEL_24;
      }
    }
    v26 = (unint64_t *)(v16 - 16);
    if (*((_QWORD *)&v33 + 1))
      v26 = (unint64_t *)*((_QWORD *)&v33 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    goto LABEL_23;
  }
  v13 = 0;
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v28 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v13;
}

void sub_20C765F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C765FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C545FE8[v2])(&v5, a1);
}

uint64_t sub_20C765FFC()
{
  return 1;
}

uint64_t sub_20C766004(uint64_t **a1, _QWORD **a2)
{
  sub_20C07FDF0(*a2, **a1);
  return 1;
}

BOOL sub_20C766028(__int128 ***a1, uint64_t *a2)
{
  return sub_20C766038(*a2, **a1);
}

BOOL sub_20C766038(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAC9F58 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C27ED6C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C7660B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546020;
  return result;
}

void sub_20C7660DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546020;
}

_QWORD *sub_20C7660F8@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  return sub_20C766160(a1, a2);
}

uint64_t sub_20C766118(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546000))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C766154()
{
  return &unk_24C546000;
}

_QWORD *sub_20C766160@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v3;
  size_t *v4;
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  char v11;
  _QWORD *v12;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (size_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(size_t **)a1;
  v5 = *v4;
  v6 = operator new[](*v4);
  v7 = v6;
  if (v5)
  {
    bzero(v6, v5);
    v8 = (char *)v4[4];
    v9 = v5;
    v10 = v7;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  v12 = operator new(0x10uLL);
  *v12 = &unk_24C546090;
  v12[1] = v7;
  result = sub_20C76527C(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C766210(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C766224(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C546090;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C766260(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C546090;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C76629C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C7662A4(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76635C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C76635C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 1;
  WORD2(v13) = 1;
  v16[0] = &unk_24C5460D8;
  v17 = v16;
  v14[0] = &unk_24C546170;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 1;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C546228;
  v17 = v16;
  v14[0] = &unk_24C5462C0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C766524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C7665AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5460D8;
  return result;
}

void sub_20C7665D4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5460D8;
}

uint64_t sub_20C7665F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C766640(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7665F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546150))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C766634()
{
  return &unk_24C546150;
}

uint64_t sub_20C766640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[55];
  char v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C7666C4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C7666AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7666C4(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  char *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_24C546138[v2])(&v5, a1);
}

uint64_t sub_20C766714()
{
  return 1;
}

uint64_t sub_20C76671C(char **a1, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = &unk_24C51FE63;
  *(_BYTE *)v2 = v3;
  return 1;
}

BOOL sub_20C76677C(_BYTE **a1, uint64_t *a2)
{
  return sub_20C76678C(*a2, *a1);
}

BOOL sub_20C76678C(uint64_t a1, _BYTE *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB790] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_BYTE **)(a1 + 8) = *a2;
  return v4 == 0;
}

_QWORD *sub_20C7667F8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546170;
  return result;
}

void sub_20C766820(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546170;
}

_QWORD *sub_20C76683C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C7668A4(a1, a2);
}

uint64_t sub_20C76685C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546150))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C766898()
{
  return &unk_24C546150;
}

_QWORD *sub_20C7668A4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char v4;
  _BYTE *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_BYTE *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C5461E0;
  v5[8] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C766920(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C766930()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546228;
  return result;
}

void sub_20C766958(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546228;
}

uint64_t sub_20C766974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7669C4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76697C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5462A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7669B8()
{
  return &unk_24C5462A0;
}

uint64_t sub_20C7669C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF65670((uint64_t)v31, v11);
    sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      if ((unint64_t)(v18 >> 3) <= 1)
        v19 = 1;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C766BA4(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C766B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C766BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546288[v2])(&v5, a1);
}

uint64_t sub_20C766BF4()
{
  return 1;
}

uint64_t sub_20C766BFC(uint64_t **a1, _QWORD **a2)
{
  sub_20BF65AB4(*a2, **a1);
  return 1;
}

BOOL sub_20C766C20(__int128 ***a1, uint64_t *a2)
{
  return sub_20C766C30(*a2, **a1);
}

BOOL sub_20C766C30(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAE78CELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C27F154(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C766CAC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5462C0;
  return result;
}

void sub_20C766CD4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5462C0;
}

_QWORD *sub_20C766CF0@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  return sub_20C766D58(a1, a2);
}

uint64_t sub_20C766D10(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5462A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C766D4C()
{
  return &unk_24C5462A0;
}

_QWORD *sub_20C766D58@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v3;
  size_t *v4;
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  char v11;
  _QWORD *v12;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (size_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(size_t **)a1;
  v5 = *v4;
  v6 = operator new[](*v4);
  v7 = v6;
  if (v5)
  {
    v8 = (char *)v4[4];
    v9 = v5;
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  v12 = operator new(0x10uLL);
  *v12 = &unk_24C546330;
  v12[1] = v7;
  result = sub_20C76527C(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C766DFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C766E10(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C546330;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C766E4C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C546330;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C766E88(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C766E90(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C766F48(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C766F48(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 6;
  WORD2(v13) = 1;
  v16[0] = &unk_24C546378;
  v17 = v16;
  v14[0] = &unk_24C546410;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 6;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C5464C8;
  v17 = v16;
  v14[0] = &unk_24C546560;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C767114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76719C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546378;
  return result;
}

void sub_20C7671C4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546378;
}

uint64_t sub_20C7671E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C767230(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7671E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5463F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C767224()
{
  return &unk_24C5463F0;
}

uint64_t sub_20C767230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[52];
  int v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C7672B4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7672B4(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  int *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(int **, uint64_t))off_24C5463D8[v2])(&v5, a1);
}

uint64_t sub_20C767304()
{
  return 1;
}

uint64_t sub_20C76730C(int **a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = &unk_24C52008B;
  *(_DWORD *)v2 = v3;
  return 1;
}

BOOL sub_20C76736C(_DWORD **a1, uint64_t *a2)
{
  return sub_20C76737C(*a2, *a1);
}

BOOL sub_20C76737C(uint64_t a1, _DWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_DWORD **)(a1 + 8) = *a2;
  return v4 == 0;
}

_QWORD *sub_20C7673E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546410;
  return result;
}

void sub_20C767410(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546410;
}

_QWORD *sub_20C76742C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C767494(a1, a2);
}

uint64_t sub_20C76744C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5463F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C767488()
{
  return &unk_24C5463F0;
}

_QWORD *sub_20C767494@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_DWORD *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C546480;
  v5[2] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C767510(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C767520()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5464C8;
  return result;
}

void sub_20C767548(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5464C8;
}

uint64_t sub_20C767564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7675B4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76756C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546540))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7675A8()
{
  return &unk_24C546540;
}

uint64_t sub_20C7675B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF64CC4((uint64_t)v31, v11);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, 4 * v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C767798(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C767748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C767798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546528[v2])(&v5, a1);
}

uint64_t sub_20C7677E8()
{
  return 1;
}

uint64_t sub_20C7677F0(uint64_t **a1, _QWORD **a2)
{
  sub_20BF6510C(*a2, **a1);
  return 1;
}

BOOL sub_20C767814(__int128 ***a1, uint64_t *a2)
{
  return sub_20C767824(*a2, **a1);
}

BOOL sub_20C767824(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EB3CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C03150C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C7678A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546560;
  return result;
}

void sub_20C7678C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546560;
}

_QWORD *sub_20C7678E4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76794C(a1, a2);
}

uint64_t sub_20C767904(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546540))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C767940()
{
  return &unk_24C546540;
}

_QWORD *sub_20C76794C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if ((unint64_t)*v4 >> 62)
    v6 = -1;
  else
    v6 = 4 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (int *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5465D0;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7679FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C767A10(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C5465D0;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C767A4C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C5465D0;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C767A88(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C767A90(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C767B48(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C767B48(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 5;
  WORD2(v13) = 1;
  v16[0] = &unk_24C546618;
  v17 = v16;
  v14[0] = &unk_24C5466B0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 5;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C546768;
  v17 = v16;
  v14[0] = &unk_24C546800;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C767D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C767D9C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546618;
  return result;
}

void sub_20C767DC4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546618;
}

uint64_t sub_20C767DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C767E30(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C767DE8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C767E24()
{
  return &unk_24C546690;
}

uint64_t sub_20C767E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[52];
  int v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C767EB4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C767E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C767EB4(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  int *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(int **, uint64_t))off_24C546678[v2])(&v5, a1);
}

uint64_t sub_20C767F04()
{
  return 1;
}

uint64_t sub_20C767F0C(int **a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = &unk_24C520143;
  *(_DWORD *)v2 = v3;
  return 1;
}

BOOL sub_20C767F6C(_DWORD **a1, uint64_t *a2)
{
  return sub_20C767F7C(*a2, *a1);
}

BOOL sub_20C767F7C(uint64_t a1, _DWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_DWORD **)(a1 + 8) = *a2;
  return v4 == 0;
}

_QWORD *sub_20C767FE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5466B0;
  return result;
}

void sub_20C768010(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5466B0;
}

_QWORD *sub_20C76802C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C768094(a1, a2);
}

uint64_t sub_20C76804C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C768088()
{
  return &unk_24C546690;
}

_QWORD *sub_20C768094@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_DWORD *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C546720;
  v5[2] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C768110(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C768120()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546768;
  return result;
}

void sub_20C768148(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546768;
}

uint64_t sub_20C768164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7681B4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76816C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5467E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7681A8()
{
  return &unk_24C5467E0;
}

uint64_t sub_20C7681B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF640F0((uint64_t)v31, v11);
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, 4 * v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C768398(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C768348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C768398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5467C8[v2])(&v5, a1);
}

uint64_t sub_20C7683E8()
{
  return 1;
}

uint64_t sub_20C7683F0(uint64_t **a1, _QWORD **a2)
{
  sub_20BF645B8(*a2, **a1);
  return 1;
}

BOOL sub_20C768414(__int128 ***a1, uint64_t *a2)
{
  return sub_20C768424(*a2, **a1);
}

BOOL sub_20C768424(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAB1294 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C032F5C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C7684A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546800;
  return result;
}

void sub_20C7684C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546800;
}

_QWORD *sub_20C7684E4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76854C(a1, a2);
}

uint64_t sub_20C768504(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5467E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C768540()
{
  return &unk_24C5467E0;
}

_QWORD *sub_20C76854C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if ((unint64_t)*v4 >> 62)
    v6 = -1;
  else
    v6 = 4 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (int *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C546870;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7685FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C768610(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C546870;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C76864C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C546870;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C768688(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C768690(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D0], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C768748(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C768748(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 8;
  WORD2(v13) = 1;
  v16[0] = &unk_24C5468B8;
  v17 = v16;
  v14[0] = &unk_24C546950;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 8;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C546A08;
  v17 = v16;
  v14[0] = &unk_24C546AA0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C768914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76899C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5468B8;
  return result;
}

void sub_20C7689C4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5468B8;
}

uint64_t sub_20C7689E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C768A30(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7689E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546930))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C768A24()
{
  return &unk_24C546930;
}

uint64_t sub_20C768A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C768AE8(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C768AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C768AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546918[v2])(&v5, a1);
}

uint64_t sub_20C768B38()
{
  return 1;
}

uint64_t sub_20C768B40(uint64_t **a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = (_QWORD *)*a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *v2 = v3;
  v2[1] = &unk_24C52036B;
  return 1;
}

BOOL sub_20C768B9C(_QWORD **a1, uint64_t *a2)
{
  return sub_20C768BAC(*a2, *a1);
}

BOOL sub_20C768BAC(uint64_t a1, _QWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_QWORD **)(a1 + 8) = *a2;
  return v4 == 0;
}

_QWORD *sub_20C768C18()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546950;
  return result;
}

void sub_20C768C40(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546950;
}

_QWORD *sub_20C768C5C@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C768CC4(a1, a2);
}

uint64_t sub_20C768C7C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546930))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C768CB8()
{
  return &unk_24C546930;
}

_QWORD *sub_20C768CC4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *v5 = &unk_24C5469C0;
  v5[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C768D3C(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C768D4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546A08;
  return result;
}

void sub_20C768D74(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546A08;
}

uint64_t sub_20C768D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C768DE0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C768D98(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546A80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C768DD4()
{
  return &unk_24C546A80;
}

uint64_t sub_20C768DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C003FC4((uint64_t)v31, v11);
    sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, 8 * v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C768FC4(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C768F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C768FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546A68[v2])(&v5, a1);
}

uint64_t sub_20C769014()
{
  return 1;
}

uint64_t sub_20C76901C(uint64_t **a1, _QWORD **a2)
{
  sub_20C080298(*a2, **a1);
  return 1;
}

BOOL sub_20C769040(__int128 ***a1, uint64_t *a2)
{
  return sub_20C769050(*a2, **a1);
}

BOOL sub_20C769050(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAC1658 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C03234C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C7690CC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546AA0;
  return result;
}

void sub_20C7690F4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546AA0;
}

_QWORD *sub_20C769110@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C769178(a1, a2);
}

uint64_t sub_20C769130(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546A80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76916C()
{
  return &unk_24C546A80;
}

_QWORD *sub_20C769178@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if ((unint64_t)*v4 >> 61)
    v6 = -1;
  else
    v6 = 8 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (uint64_t *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C546B10;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C769228(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76923C(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C546B10;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C769278(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C546B10;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C7692B4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C7692BC(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D8], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C769374(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C769374(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 7;
  WORD2(v13) = 1;
  v16[0] = &unk_24C546B58;
  v17 = v16;
  v14[0] = &unk_24C546BF0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 7;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C546CA8;
  v17 = v16;
  v14[0] = &unk_24C546D40;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C769540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C7695C8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546B58;
  return result;
}

void sub_20C7695F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546B58;
}

uint64_t sub_20C76960C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76965C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C769614(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546BD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C769650()
{
  return &unk_24C546BD0;
}

uint64_t sub_20C76965C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C769714(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C7696F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C769714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546BB8[v2])(&v5, a1);
}

uint64_t sub_20C769764()
{
  return 1;
}

uint64_t sub_20C76976C(uint64_t **a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = (_QWORD *)*a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *v2 = v3;
  v2[1] = &unk_24C520423;
  return 1;
}

BOOL sub_20C7697C8(_QWORD **a1, uint64_t *a2)
{
  return sub_20C7697D8(*a2, *a1);
}

BOOL sub_20C7697D8(uint64_t a1, _QWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_QWORD **)(a1 + 8) = *a2;
  return v4 == 0;
}

_QWORD *sub_20C769844()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546BF0;
  return result;
}

void sub_20C76986C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546BF0;
}

_QWORD *sub_20C769888@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C7698F0(a1, a2);
}

uint64_t sub_20C7698A8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546BD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7698E4()
{
  return &unk_24C546BD0;
}

_QWORD *sub_20C7698F0@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *v5 = &unk_24C546C60;
  v5[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C769968(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C769978()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546CA8;
  return result;
}

void sub_20C7699A0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546CA8;
}

uint64_t sub_20C7699BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C769A0C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7699C4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546D20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C769A00()
{
  return &unk_24C546D20;
}

uint64_t sub_20C769A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C004FA0((uint64_t)v31, v11);
    sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, 8 * v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C769BF0(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C769BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C769BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546D08[v2])(&v5, a1);
}

uint64_t sub_20C769C40()
{
  return 1;
}

uint64_t sub_20C769C48(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D08C4(*a2, **a1);
  return 1;
}

BOOL sub_20C769C6C(__int128 ***a1, uint64_t *a2)
{
  return sub_20C769C7C(*a2, **a1);
}

BOOL sub_20C769C7C(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAC16BCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C033B2C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C769CF8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546D40;
  return result;
}

void sub_20C769D20(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546D40;
}

_QWORD *sub_20C769D3C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C769DA4(a1, a2);
}

uint64_t sub_20C769D5C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546D20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C769D98()
{
  return &unk_24C546D20;
}

_QWORD *sub_20C769DA4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if ((unint64_t)*v4 >> 61)
    v6 = -1;
  else
    v6 = 8 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (uint64_t *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C546DB0;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C769E54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C769E68(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C546DB0;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C769EA4(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C546DB0;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C769EE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C769EE8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C769FA0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C769FA0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 9;
  WORD2(v13) = 1;
  v16[0] = &unk_24C546DF8;
  v17 = v16;
  v14[0] = &unk_24C546E90;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 9;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C546F48;
  v17 = v16;
  v14[0] = &unk_24C546FE0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76A16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76A1F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546DF8;
  return result;
}

void sub_20C76A21C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546DF8;
}

uint64_t sub_20C76A238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76A288(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76A240(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546E70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76A27C()
{
  return &unk_24C546E70;
}

uint64_t sub_20C76A288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v7;
  uint64_t v8;
  _DWORD v10[4];
  _BYTE v11[54];
  __int16 v12;

  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)&v12, a4, 0);
  v7 = sub_20C76A370((uint64_t)v10, &v12);
  v8 = sub_20C76A318(a5, v7);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  return v8;
}

void sub_20C76A300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76A318(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  __int16 *v4;
  __int16 v5;
  __int16 **v6;

  v5 = a2;
  v4 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v6 = &v4;
  return ((uint64_t (*)(__int16 ***, uint64_t))off_24C546E58[v2])(&v6, a1);
}

uint64_t sub_20C76A370(uint64_t a1, __int16 *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = (v2 & 0x7FFF) << 13;
  v4 = v2 & 0x80000000;
  v5 = __clz(v3);
  v6 = (v4 | 0x38800000 | (v3 << (v5 - 8))) - ((v5 - 8) << 23);
  if (!v3)
    v6 = v4;
  v7 = v3 | v4;
  v8 = v7 | 0x7F800000;
  v9 = v7 + 939524096;
  if (v3 >> 23 > 0x1E)
    v9 = v8;
  if (v3 >= 0x800000)
    v10 = v9;
  else
    v10 = v6;
  if ((v10 & 0x7FFFFFFF) == 0)
    return WORD1(v10);
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
         + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)v10);
}

uint64_t sub_20C76A414()
{
  return 1;
}

uint64_t sub_20C76A41C(__int16 ***a1, _QWORD *a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)v2 = v3;
  return 1;
}

BOOL sub_20C76A480(_WORD ***a1, uint64_t *a2)
{
  return sub_20C76A48C(*a1, *a2);
}

BOOL sub_20C76A48C(_WORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAC9F88 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_WORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

_QWORD *sub_20C76A500()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546E90;
  return result;
}

void sub_20C76A528(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546E90;
}

_QWORD *sub_20C76A544@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76A5AC(a1, a2);
}

uint64_t sub_20C76A564(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546E70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76A5A0()
{
  return &unk_24C546E70;
}

_QWORD *sub_20C76A5AC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _WORD *v4;
  _QWORD *result;
  char v6;
  __int16 v7;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  sub_20C76A634((uint64_t)&v6, (unsigned __int16 *)a1, &v7);
  *a2 = 1;
  v4 = operator new(0x10uLL);
  *(_QWORD *)v4 = &unk_24C546F00;
  v4[4] = v7;
  result = sub_20C76527C(a2 + 1, (uint64_t)v4);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76A634(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  float v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;

  v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  v4 = LODWORD(v3) & 0x7FFFFFFF;
  v5 = HIWORD(LODWORD(v3));
  v6 = HIWORD(LODWORD(v3)) & 0x8000;
  if ((LODWORD(v3) >> 23) < 0x71u)
  {
    if (v4 >= 0x33000001)
    {
      v9 = LODWORD(v3) & 0x7FFFFF | 0x800000;
      v10 = v9 << ((v4 >> 23) - 94);
      v11 = v9 >> (126 - (v4 >> 23));
      LOWORD(v6) = v11 | v5 & 0x8000;
      if (v10 > 0x80000000 || ((v12 = v11 & 1, v10 == 0x80000000) ? (v13 = v12 == 0) : (v13 = 1), !v13))
        LOWORD(v6) = v6 + 1;
    }
  }
  else
  {
    v7 = v6 | ((LODWORD(v3) + 134221823 + ((LODWORD(v3) >> 13) & 1)) >> 13);
    v6 |= 0x7C00u;
    if (v4 >= 0x477FF000)
      LOWORD(v7) = v6;
    v8 = (((LODWORD(v3) >> 13) & 0x3FF) == 0) | (LODWORD(v3) >> 13) & 0x3FF | v6;
    if (v4 != 2139095040)
      LOWORD(v6) = v8;
    if (v4 >> 23 < 0xFF)
      LOWORD(v6) = v7;
  }
  *a3 = v6;
}

uint64_t sub_20C76A720(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C76A730()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546F48;
  return result;
}

void sub_20C76A758(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546F48;
}

uint64_t sub_20C76A774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76A7C4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76A77C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546FC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76A7B8()
{
  return &unk_24C546FC0;
}

uint64_t sub_20C76A7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _WORD *v15;
  uint64_t *v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v31;
  __int128 v32;
  _WORD *v33;
  _OWORD v34[2];
  _WORD *v35;
  _DWORD v36[4];
  _BYTE v37[48];
  uint64_t v38;
  std::__shared_weak_count *v39;

  v38 = 0;
  v39 = 0;
  LODWORD(v34[0]) = 0;
  DWORD2(v34[0]) = 0;
  v36[0] = 0;
  v36[2] = 0;
  Alembic::Abc::v12::IArrayProperty::IArrayProperty(v37, a2, a3, v34, v36);
  Alembic::Abc::v12::IArrayProperty::get((uint64_t)v37, (uint64_t)&v38, a4);
  if (v38)
  {
    v7 = *(uint64_t **)(v38 + 16);
    v8 = *(_QWORD *)(v38 + 24) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      if (v9 <= 1)
        v9 = 1;
      v10 = 1;
      do
      {
        v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    sub_20BF56CB0((uint64_t)v34, v10);
    sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v34, v13, v14);
    v15 = v35;
    v16 = *(uint64_t **)(v38 + 16);
    v17 = *(_QWORD *)(v38 + 24) - (_QWORD)v16;
    if (v17)
    {
      v18 = *(__int16 **)v38;
      v19 = v17 >> 3;
      if ((unint64_t)(v17 >> 3) <= 1)
        v19 = 1;
      v20 = 1;
      do
      {
        v21 = v20;
        v23 = *v16++;
        v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        v24 = v21 * v22;
        do
        {
          *v15++ = sub_20C76A370((uint64_t)v36, v18++);
          --v24;
        }
        while (v24);
        v15 = v35;
      }
    }
    v31 = v34[0];
    v32 = v34[1];
    v33 = v15;
    if (v15)
    {
      v25 = (unint64_t *)*((_QWORD *)&v32 + 1);
      if (!*((_QWORD *)&v32 + 1))
        v25 = (unint64_t *)(v15 - 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v12 = sub_20C76A9D4(a5, (uint64_t)&v31);
    sub_20BF5618C((uint64_t)&v31);
    sub_20BF5618C((uint64_t)v34);
  }
  else
  {
    v12 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v37);
  v27 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v12;
}

void sub_20C76A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v21 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76A9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C546FA8[v2])(&v5, a1);
}

uint64_t sub_20C76AA24()
{
  return 1;
}

uint64_t sub_20C76AA2C(uint64_t **a1, _QWORD **a2)
{
  sub_20BF57178(*a2, **a1);
  return 1;
}

BOOL sub_20C76AA50(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76AA60(*a2, **a1);
}

BOOL sub_20C76AA60(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EB9CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C2801F8(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76AADC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C546FE0;
  return result;
}

void sub_20C76AB04(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C546FE0;
}

_QWORD *sub_20C76AB20@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C76AB88(a1, a2);
}

uint64_t sub_20C76AB40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C546FC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76AB7C()
{
  return &unk_24C546FC0;
}

_QWORD *sub_20C76AB88@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  char v12;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if (*v4 < 0)
    v6 = -1;
  else
    v6 = 2 * *v4;
  v7 = (char *)operator new[](v6);
  if (v5)
  {
    v8 = 0;
    v9 = v5;
    do
    {
      sub_20C76A634((uint64_t)&v12, (unsigned __int16 *)(v4[4] + v8), &v7[v8]);
      v8 += 2;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  v10 = operator new(0x10uLL);
  *v10 = &unk_24C547050;
  v10[1] = v7;
  result = sub_20C76527C(a2 + 1, (uint64_t)v10);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76AC50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76AC64(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C547050;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C76ACA0(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C547050;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C76ACDC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C76ACE4(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76AD9C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C76AD9C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 10;
  WORD2(v13) = 1;
  v16[0] = &unk_24C547098;
  v17 = v16;
  v14[0] = &unk_24C547118;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 10;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C5471D0;
  v17 = v16;
  v14[0] = &unk_24C547268;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76AF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76AFF0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547098;
  return result;
}

void sub_20C76B018(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547098;
}

uint64_t sub_20C76B034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76B084(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76B03C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5470F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76B078()
{
  return &unk_24C5470F8;
}

uint64_t sub_20C76B084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[52];
  float v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C7592F8(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76B0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76B110()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547118;
  return result;
}

void sub_20C76B138(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547118;
}

_QWORD *sub_20C76B154@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76B1BC(a1, a2);
}

uint64_t sub_20C76B174(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5470F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76B1B0()
{
  return &unk_24C5470F8;
}

_QWORD *sub_20C76B1BC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_DWORD *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C547188;
  v5[2] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C76B240(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C76B250()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5471D0;
  return result;
}

void sub_20C76B278(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5471D0;
}

uint64_t sub_20C76B294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76B2E4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76B29C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547248))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76B2D8()
{
  return &unk_24C547248;
}

uint64_t sub_20C76B2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF56024((uint64_t)v31, v11);
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, 4 * v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C76B4C8(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C76B478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76B4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C547230[v2])(&v5, a1);
}

uint64_t sub_20C76B518()
{
  return 1;
}

uint64_t sub_20C76B520(uint64_t **a1, _QWORD **a2)
{
  sub_20BF56628(*a2, **a1);
  return 1;
}

BOOL sub_20C76B544(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76B554(*a2, **a1);
}

BOOL sub_20C76B554(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20BF9B1F8(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76B5D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547268;
  return result;
}

void sub_20C76B5F8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547268;
}

_QWORD *sub_20C76B614@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76B67C(a1, a2);
}

uint64_t sub_20C76B634(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547248))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76B670()
{
  return &unk_24C547248;
}

_QWORD *sub_20C76B67C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if ((unint64_t)*v4 >> 62)
    v6 = -1;
  else
    v6 = 4 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (int *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5472D8;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76B72C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76B740(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C5472D8;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C76B77C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C5472D8;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C76B7B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C76B7C0(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76B878(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C76B878(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 11;
  WORD2(v13) = 1;
  v16[0] = &unk_24C547320;
  v17 = v16;
  v14[0] = &unk_24C5473B8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 11;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C547470;
  v17 = v16;
  v14[0] = &unk_24C547508;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76BA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76BACC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547320;
  return result;
}

void sub_20C76BAF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547320;
}

uint64_t sub_20C76BB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76BB60(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76BB18(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547398))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76BB54()
{
  return &unk_24C547398;
}

uint64_t sub_20C76BB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  double v11[2];

  v11[1] = *(double *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C76BC18(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76BBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76BC18(uint64_t a1, double a2)
{
  uint64_t v2;
  double v4;
  double *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(double **, uint64_t))off_24C547380[v2])(&v5, a1);
}

uint64_t sub_20C76BC64()
{
  return 1;
}

uint64_t sub_20C76BC6C(uint64_t **a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = (_QWORD *)*a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  v2[1] = &unk_24C52064B;
  *v2 = v3;
  return 1;
}

BOOL sub_20C76BCD4(_QWORD **a1, uint64_t *a2)
{
  return sub_20C76BCE4(*a2, *a1);
}

BOOL sub_20C76BCE4(uint64_t a1, _QWORD *a2)
{
  int v4;

  v4 = strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    **(_QWORD **)(a1 + 8) = *a2;
  return v4 == 0;
}

_QWORD *sub_20C76BD50()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5473B8;
  return result;
}

void sub_20C76BD78(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5473B8;
}

_QWORD *sub_20C76BD94@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76BDFC(a1, a2);
}

uint64_t sub_20C76BDB4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547398))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76BDF0()
{
  return &unk_24C547398;
}

_QWORD *sub_20C76BDFC@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *v5 = &unk_24C547428;
  v5[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C76BE80(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C76BE90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547470;
  return result;
}

void sub_20C76BEB8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547470;
}

uint64_t sub_20C76BED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76BF24(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76BEDC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5474E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76BF18()
{
  return &unk_24C5474E8;
}

uint64_t sub_20C76BF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v28;
  __int128 v29;
  char *v30;
  _OWORD v31[2];
  void *__dst;
  _DWORD v33[4];
  _BYTE v34[48];
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  LODWORD(v31[0]) = 0;
  DWORD2(v31[0]) = 0;
  v33[0] = 0;
  v33[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v34, a2, a3, v31, v33);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v35, a4);
  if (v35)
  {
    v8 = *(uint64_t **)(v35 + 16);
    v9 = *(_QWORD *)(v35 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF577E4((uint64_t)v31, v11);
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v35 + 16);
    v18 = *(_QWORD *)(v35 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      v20 = 1;
      do
      {
        v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v35, 8 * v20);
        v16 = (char *)__dst;
      }
    }
    v28 = v31[0];
    v29 = v31[1];
    v30 = v16;
    if (v16)
    {
      v22 = (unint64_t *)*((_QWORD *)&v29 + 1);
      if (!*((_QWORD *)&v29 + 1))
        v22 = (unint64_t *)(v16 - 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v13 = sub_20C76C108(a5, (uint64_t)&v28);
    sub_20BF5618C((uint64_t)&v28);
    sub_20BF5618C((uint64_t)v31);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v34);
  v24 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_20C76C0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76C108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5474D0[v2])(&v5, a1);
}

uint64_t sub_20C76C158()
{
  return 1;
}

uint64_t sub_20C76C160(uint64_t **a1, _QWORD **a2)
{
  sub_20BF57C64(*a2, **a1);
  return 1;
}

BOOL sub_20C76C184(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76C194(*a2, **a1);
}

BOOL sub_20C76C194(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20BF985B0(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76C210()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547508;
  return result;
}

void sub_20C76C238(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547508;
}

_QWORD *sub_20C76C254@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76C2BC(a1, a2);
}

uint64_t sub_20C76C274(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5474E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76C2B0()
{
  return &unk_24C5474E8;
}

_QWORD *sub_20C76C2BC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if ((unint64_t)*v4 >> 61)
    v6 = -1;
  else
    v6 = 8 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (uint64_t *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547578;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76C36C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76C380(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C547578;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C76C3BC(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C547578;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C76C3F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C76C400(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C516910, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C76C4B8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C76C4B8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 12;
  WORD2(v13) = 1;
  v16[0] = &unk_24C5475C0;
  v17 = v16;
  v14[0] = &unk_24C547658;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 12;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C547710;
  v17 = v16;
  v14[0] = &unk_24C5477A8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76C684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76C70C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5475C0;
  return result;
}

void sub_20C76C734(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5475C0;
}

uint64_t sub_20C76C750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76C7A0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76C758(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547638))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76C794()
{
  return &unk_24C547638;
}

uint64_t sub_20C76C7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  _DWORD v11[4];
  _BYTE v12[48];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0uLL;
  v14 = 0;
  v11[0] = 0;
  v11[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v12, a2, a3, v11);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v12, (uint64_t)&v13, a4, 0);
  if (SHIBYTE(v14) < 0)
  {
    sub_20BDDBFAC(__p, (void *)v13, *((unint64_t *)&v13 + 1));
  }
  else
  {
    *(_OWORD *)__p = v13;
    v10 = v14;
  }
  v7 = sub_20C76C8D0(a5, (uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v12);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  return v7;
}

void sub_20C76C888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a18);
  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76C8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C547620[v2])(&v5, a1);
}

uint64_t sub_20C76C920()
{
  return 1;
}

uint64_t sub_20C76C928(uint64_t **a1, uint64_t *a2)
{
  sub_20C1D1478(*a2, **a1);
  return 1;
}

BOOL sub_20C76C94C(const std::string ***a1, uint64_t *a2)
{
  return sub_20C76C95C(*a2, **a1);
}

BOOL sub_20C76C95C(uint64_t a1, const std::string *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    std::string::operator=(*(std::string **)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76C9D8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547658;
  return result;
}

void sub_20C76CA00(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547658;
}

void sub_20C76CA1C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  sub_20C76CA84(a1, a2);
}

uint64_t sub_20C76CA3C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547638))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76CA78()
{
  return &unk_24C547638;
}

void sub_20C76CA84(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const std::string *v4;
  std::string v5;

  memset(&v5, 0, sizeof(v5));
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (const std::string *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(const std::string **)a1;
  std::string::operator=(&v5, v4);
  sub_20C76CB18(a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C76CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76CB18(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;

  *a1 = 1;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C5476C8;
  v5 = v4 + 1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v4[3] = *(_QWORD *)(a2 + 16);
  }
  sub_20C76527C(a1 + 1, (uint64_t)v4);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_20C76CB9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76CBB0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C5476C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20C76CBF0(void **__p)
{
  *__p = &unk_24C5476C8;
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

uint64_t sub_20C76CC30(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C76CC40()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547710;
  return result;
}

void sub_20C76CC68(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547710;
}

uint64_t sub_20C76CC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76CCD4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76CC8C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76CCC8()
{
  return &unk_24C547788;
}

uint64_t sub_20C76CCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *p_size;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v27;
  __int128 v28;
  std::string *v29;
  _OWORD v30[2];
  std::string *v31;
  _DWORD v32[4];
  _BYTE v33[48];
  uint64_t v34;
  std::__shared_weak_count *v35;

  v34 = 0;
  v35 = 0;
  LODWORD(v30[0]) = 0;
  DWORD2(v30[0]) = 0;
  v32[0] = 0;
  v32[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v33, a2, a3, v30, v32);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v34, a4);
  if (v34)
  {
    v8 = *(uint64_t **)(v34 + 16);
    v9 = *(_QWORD *)(v34 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C007D50((uint64_t)v30, v11);
    sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v30, v14, v15);
    v16 = *(uint64_t **)(v34 + 16);
    v17 = *(_QWORD *)(v34 + 24) - (_QWORD)v16;
    if (v17)
    {
      v18 = v17 >> 3;
      if (v18 <= 1)
        v19 = 1;
      else
        v19 = v18;
      v17 = 1;
      do
      {
        v20 = *v16++;
        v17 *= v20;
        --v19;
      }
      while (v19);
    }
    sub_20BE75A80(*(std::string **)v34, (std::string *)(*(_QWORD *)v34 + 24 * v17), v31);
    v27 = v30[0];
    v28 = v30[1];
    v29 = v31;
    if (v31)
    {
      p_size = &v31[-1].__r_.__value_.__l.__size_;
      if (*((_QWORD *)&v28 + 1))
        p_size = (unint64_t *)*((_QWORD *)&v28 + 1);
      do
        v22 = __ldxr(p_size);
      while (__stxr(v22 + 1, p_size));
    }
    v13 = sub_20C76CEB8(a5, (uint64_t)&v27);
    sub_20C008280(&v27);
    sub_20C008280(v30);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v33);
  v23 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v13;
}

void sub_20C76CE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  sub_20C008280(&a9);
  sub_20C008280(&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76CEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C547770[v2])(&v5, a1);
}

uint64_t sub_20C76CF08()
{
  return 1;
}

uint64_t sub_20C76CF10(uint64_t **a1, _QWORD **a2)
{
  sub_20C080704(*a2, **a1);
  return 1;
}

BOOL sub_20C76CF34(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76CF44(*a2, **a1);
}

BOOL sub_20C76CF44(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAB12F6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C0346C4(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76CFC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5477A8;
  return result;
}

void sub_20C76CFE8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5477A8;
}

void sub_20C76D004(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  sub_20C76D06C(a1, a2);
}

uint64_t sub_20C76D024(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547788))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76D060()
{
  return &unk_24C547788;
}

void sub_20C76D06C(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL4 v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(unint64_t **)a1;
  v5 = *v4;
  v6 = !is_mul_ok(*v4, 0x18uLL);
  if (24 * *v4 >= 0xFFFFFFFFFFFFFFF0)
    v6 = 1;
  if (v6)
    v7 = -1;
  else
    v7 = 24 * v5 + 16;
  v8 = operator new[](v7);
  *v8 = 24;
  v8[1] = v5;
  v9 = v8 + 2;
  if (v5)
  {
    bzero(v8 + 2, 24 * ((24 * v5 - 24) / 0x18) + 24);
    v10 = 0;
    v15 = v9;
    v11 = v5;
    do
    {
      std::string::operator=((std::string *)&v9[v10], (const std::string *)(v4[4] + v10 * 8));
      v10 += 3;
      --v11;
    }
    while (v11);
  }
  else
  {
    v15 = v8 + 2;
  }
  *a2 = v5;
  v12 = operator new(0x10uLL);
  v13 = v15;
  v15 = 0;
  *v12 = &unk_24C547818;
  v12[1] = v13;
  sub_20C76527C(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  v14 = (uint64_t)v15;
  v15 = 0;
  if (v14)
    sub_20C76D24C((uint64_t)&v15, v14);
}

void sub_20C76D1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_20C76D24C((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76D1C4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_24C547818;
  v4 = a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C76D24C((uint64_t)v2, v3);
  return a1;
}

void sub_20C76D204(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *__p = &unk_24C547818;
  v4 = __p[1];
  v2 = __p + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C76D24C((uint64_t)v2, v3);
  operator delete(__p);
}

uint64_t sub_20C76D244(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_20C76D24C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = (void *)(a2 - 16);
    v4 = *(_QWORD *)(a2 - 8);
    if (v4)
    {
      v5 = 24 * v4;
      do
      {
        if (*(char *)(a2 + v5 - 1) < 0)
          operator delete(*(void **)(a2 + v5 - 24));
        v5 -= 24;
      }
      while (v5);
    }
    operator delete[](v3);
  }
}

_QWORD *sub_20C76D2AC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 6;
  WORD2(v13) = 2;
  v16[0] = &unk_24C547860;
  v17 = v16;
  v14[0] = &unk_24C5478F8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 6;
  WORD2(v13) = 258;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C547968;
  v17 = v16;
  v14[0] = &unk_24C547A00;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76D478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76D500()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547860;
  return result;
}

void sub_20C76D528(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547860;
}

uint64_t sub_20C76D544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76D594(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76D54C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5478D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76D588()
{
  return &unk_24C5478D8;
}

uint64_t sub_20C76D594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C76D64C(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76D62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76D64C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v4 = &v5;
  v5 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v6 = &v4;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_24C5478C0[v2])(&v6, a1);
}

uint64_t sub_20C76D6A0()
{
  return 1;
}

uint64_t sub_20C76D6A8(uint64_t ***a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = (_QWORD *)*a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *v2 = v3;
  v2[1] = (char *)&off_24C525968 + 3;
  return 1;
}

BOOL sub_20C76D708(_QWORD ***a1, uint64_t *a2)
{
  return sub_20C76D714(*a1, *a2);
}

BOOL sub_20C76D714(_QWORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CACA0A2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_QWORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

_QWORD *sub_20C76D788()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5478F8;
  return result;
}

void sub_20C76D7B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5478F8;
}

_QWORD *sub_20C76D7CC@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76D834(a1, a2);
}

uint64_t sub_20C76D7EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5478D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76D828()
{
  return &unk_24C5478D8;
}

_QWORD *sub_20C76D834@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v4 = operator new[](8uLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    a1 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  *v4 = *a1;
  *a2 = 2;
  v6 = operator new(0x10uLL);
  *v6 = &unk_24C5465D0;
  v6[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76D8C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76D8E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547968;
  return result;
}

void sub_20C76D908(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547968;
}

uint64_t sub_20C76D924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76D974(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76D92C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5479E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76D968()
{
  return &unk_24C5479E0;
}

uint64_t sub_20C76D974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  _OWORD v36[2];
  _QWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = *(uint64_t **)(v40 + 16);
    v9 = *(_QWORD *)(v40 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C00F4D0((uint64_t)v36, v11);
    sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = *(uint64_t **)(v40 + 16);
    v18 = *(_QWORD *)(v40 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = *(uint64_t **)v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = v16 - 2;
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C76DB68(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C76DB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76DB68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5479C8[v2])(&v5, a1);
}

uint64_t sub_20C76DBB8()
{
  return 1;
}

uint64_t sub_20C76DBC0(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D3C20(*a2, **a1);
  return 1;
}

BOOL sub_20C76DBE4(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76DBF4(*a2, **a1);
}

BOOL sub_20C76DBF4(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EA58 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C283720(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76DC70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547A00;
  return result;
}

void sub_20C76DC98(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547A00;
}

_QWORD *sub_20C76DCB4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C76DD1C(a1, a2);
}

uint64_t sub_20C76DCD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5479E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76DD10()
{
  return &unk_24C5479E0;
}

_QWORD *sub_20C76DD1C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 2 * *v4;
  if ((((unint64_t)*v4 >> 61) & 3) != 0)
    v7 = -1;
  else
    v7 = 8 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (uint64_t *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5465D0;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76DDD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76DDE8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 9;
  WORD2(v13) = 2;
  v16[0] = &unk_24C547A70;
  v17 = v16;
  v14[0] = &unk_24C547B08;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 9;
  WORD2(v13) = 258;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C547BC0;
  v17 = v16;
  v14[0] = &unk_24C547C58;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76DFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76E03C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547A70;
  return result;
}

void sub_20C76E064(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547A70;
}

uint64_t sub_20C76E080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76E0D0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76E088(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547AE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76E0C4()
{
  return &unk_24C547AE8;
}

uint64_t sub_20C76E0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[52];
  int v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C76E154(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76E13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76E154(uint64_t a1, int a2)
{
  uint64_t v2;
  int *v4;
  int v5;
  int **v6;

  v5 = a2;
  v4 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v6 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_24C547AD0[v2])(&v6, a1);
}

uint64_t sub_20C76E1AC()
{
  return 1;
}

uint64_t sub_20C76E1B4(int ***a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = (char *)&off_24C51DDF8 + 3;
  *(_DWORD *)v2 = v3;
  return 1;
}

BOOL sub_20C76E218(_DWORD ***a1, uint64_t *a2)
{
  return sub_20C76E224(*a1, *a2);
}

BOOL sub_20C76E224(_DWORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CACA074 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_DWORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

_QWORD *sub_20C76E298()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547B08;
  return result;
}

void sub_20C76E2C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547B08;
}

_QWORD *sub_20C76E2DC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76E344(a1, a2);
}

uint64_t sub_20C76E2FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547AE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76E338()
{
  return &unk_24C547AE8;
}

_QWORD *sub_20C76E344@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v4 = operator new[](4uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  *v4 = *(_DWORD *)a1;
  *a2 = 2;
  v6 = operator new(0x10uLL);
  *v6 = &unk_24C547B78;
  v6[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76E3D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76E3E8(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C547B78;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C76E424(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C547B78;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C76E460(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C76E470()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547BC0;
  return result;
}

void sub_20C76E498(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547BC0;
}

uint64_t sub_20C76E4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76E504(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76E4BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547C38))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76E4F8()
{
  return &unk_24C547C38;
}

uint64_t sub_20C76E504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _DWORD *v35;
  _OWORD v36[2];
  _DWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  int **v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = (char *)v40[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF590CC((uint64_t)v36, v11);
    sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = (char *)v40[3] - (char *)v17;
    if (v18)
    {
      v19 = *v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = (unint64_t *)(v16 - 4);
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C76E6F8(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C76E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76E6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C547C20[v2])(&v5, a1);
}

uint64_t sub_20C76E748()
{
  return 1;
}

uint64_t sub_20C76E750(uint64_t **a1, _QWORD **a2)
{
  sub_20BF59594(*a2, **a1);
  return 1;
}

BOOL sub_20C76E774(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76E784(*a2, **a1);
}

BOOL sub_20C76E784(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EA94 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C283B04(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76E800()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547C58;
  return result;
}

void sub_20C76E828(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547C58;
}

_QWORD *sub_20C76E844@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C76E8AC(a1, a2);
}

uint64_t sub_20C76E864(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547C38))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76E8A0()
{
  return &unk_24C547C38;
}

_QWORD *sub_20C76E8AC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int *v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 2 * *v4;
  if ((*v4 & 0x4000000000000000) != 0)
    v7 = -1;
  else
    v7 = 4 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (int *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547B78;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76E960(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76E974(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 11;
  WORD2(v13) = 2;
  v16[0] = &unk_24C547CC8;
  v17 = v16;
  v14[0] = &unk_24C547D60;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 11;
  WORD2(v13) = 258;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C547DD0;
  v17 = v16;
  v14[0] = &unk_24C547E68;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76EB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76EBC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547CC8;
  return result;
}

void sub_20C76EBF0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547CC8;
}

uint64_t sub_20C76EC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76EC5C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76EC14(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547D40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76EC50()
{
  return &unk_24C547D40;
}

uint64_t sub_20C76EC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  double v11[3];

  v11[2] = *(double *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C76ED14(a5, v11[0], v11[1]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76ED14(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD v6[2];
  _QWORD *v7;

  *(double *)v6 = a2;
  *(double *)&v6[1] = a3;
  v5 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v7 = &v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C547D28[v3])(&v7, a1);
}

uint64_t sub_20C76ED68()
{
  return 1;
}

uint64_t sub_20C76ED70(_OWORD ***a1, unsigned int ***a2)
{
  sub_20C1D4104(*a2, **a1);
  return 1;
}

BOOL sub_20C76ED98(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(v3 + 25) = 1;
  else
    *(_OWORD *)*(_QWORD *)(v3 + 8) = ***a1;
  return v4 == 0;
}

_QWORD *sub_20C76EE10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547D60;
  return result;
}

void sub_20C76EE38(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547D60;
}

_QWORD *sub_20C76EE54@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76EEBC(a1, a2);
}

uint64_t sub_20C76EE74(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547D40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76EEB0()
{
  return &unk_24C547D40;
}

_QWORD *sub_20C76EEBC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](0x10uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(_OWORD **)a1;
  *v4 = *v6;
  *a2 = 2;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C547578;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76EF48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76EF68()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547DD0;
  return result;
}

void sub_20C76EF90(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547DD0;
}

uint64_t sub_20C76EFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76EFFC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76EFB4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547E48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76EFF0()
{
  return &unk_24C547E48;
}

uint64_t sub_20C76EFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD v36[2];
  _OWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  __int128 **v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = (char *)v40[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF59CB4((uint64_t)v36, v11);
    sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = (char *)v40[3] - (char *)v17;
    if (v18)
    {
      v19 = *v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = (unint64_t *)(v16 - 1);
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C76F1F0(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C76F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76F1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C547E30[v2])(&v5, a1);
}

uint64_t sub_20C76F240()
{
  return 1;
}

uint64_t sub_20C76F248(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5A130(*a2, **a1);
  return 1;
}

BOOL sub_20C76F26C(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76F27C(*a2, **a1);
}

BOOL sub_20C76F27C(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB2EA1CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C28422C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76F2F8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547E68;
  return result;
}

void sub_20C76F320(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547E68;
}

_QWORD *sub_20C76F33C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C76F3A4(a1, a2);
}

uint64_t sub_20C76F35C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547E48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76F398()
{
  return &unk_24C547E48;
}

_QWORD *sub_20C76F3A4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 2 * *v4;
  if ((((unint64_t)*v4 >> 60) & 7) != 0)
    v7 = -1;
  else
    v7 = 16 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (__int128 *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547578;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76F45C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76F470(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 6;
  WORD2(v13) = 3;
  v16[0] = &unk_24C547ED8;
  v17 = v16;
  v14[0] = &unk_24C547F70;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 6;
  WORD2(v13) = 259;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C547FE0;
  v17 = v16;
  v14[0] = &unk_24C548078;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C76F63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C76F6C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547ED8;
  return result;
}

void sub_20C76F6EC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547ED8;
}

uint64_t sub_20C76F708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76F758(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76F710(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547F50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76F74C()
{
  return &unk_24C547F50;
}

uint64_t sub_20C76F758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C76F814(a5, v11, v12);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C76F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C76F814(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;

  v7 = a3;
  v5 = &v6;
  v6 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v8 = &v5;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_24C547F38[v3])(&v8, a1);
}

uint64_t sub_20C76F86C()
{
  return 1;
}

uint64_t sub_20C76F874(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D4444(*a2, **a1);
  return 1;
}

BOOL sub_20C76F89C(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA15ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = **a1;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = *v5;
    *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
    *(_QWORD *)v6 = v7;
  }
  return v4 == 0;
}

_QWORD *sub_20C76F91C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547F70;
  return result;
}

void sub_20C76F944(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547F70;
}

_QWORD *sub_20C76F960@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C76F9C8(a1, a2);
}

uint64_t sub_20C76F980(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C547F50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76F9BC()
{
  return &unk_24C547F50;
}

_QWORD *sub_20C76F9C8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = operator new[](0xCuLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *a1;
  v7 = *(_QWORD *)v6;
  v4[2] = *(_DWORD *)(v6 + 8);
  *(_QWORD *)v4 = v7;
  *a2 = 3;
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C5465D0;
  v8[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76FA5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76FA7C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C547FE0;
  return result;
}

void sub_20C76FAA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C547FE0;
}

uint64_t sub_20C76FAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C76FB10(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C76FAC8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548058))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76FB04()
{
  return &unk_24C548058;
}

uint64_t sub_20C76FB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _DWORD v39[4];
  _BYTE v40[48];
  uint64_t *v41;
  std::__shared_weak_count *v42;

  v41 = 0;
  v42 = 0;
  LODWORD(v37[0]) = 0;
  DWORD2(v37[0]) = 0;
  v39[0] = 0;
  v39[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v40, a2, a3, v37, v39);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v41, a4);
  if (v41)
  {
    v8 = (uint64_t *)v41[2];
    v9 = v41[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C0112EC((uint64_t)v37, v11);
    sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v14, v15);
    v16 = v38;
    v17 = (uint64_t *)v41[2];
    v18 = v41[3] - (_QWORD)v17;
    if (v18)
    {
      v19 = *v41;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        v26 = (_DWORD *)(v38 + 8);
        do
        {
          v27 = *(_DWORD *)(v19 + 8);
          *((_QWORD *)v26 - 1) = *(_QWORD *)v19;
          *v26 = v27;
          v26 += 3;
          v19 += 12;
          --v25;
        }
        while (v25);
        v16 = v38;
      }
    }
    v34 = v37[0];
    v35 = v37[1];
    v36 = v16;
    if (v16)
    {
      v28 = (unint64_t *)(v16 - 16);
      if (*((_QWORD *)&v35 + 1))
        v28 = (unint64_t *)*((_QWORD *)&v35 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v13 = sub_20C76FD14(a5, (uint64_t)&v34);
    sub_20BF5618C((uint64_t)&v34);
    sub_20BF5618C((uint64_t)v37);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v40);
  v30 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v13;
}

void sub_20C76FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C76FD14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548040[v2])(&v5, a1);
}

uint64_t sub_20C76FD64()
{
  return 1;
}

uint64_t sub_20C76FD6C(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D4604(*a2, **a1);
  return 1;
}

BOOL sub_20C76FD90(__int128 ***a1, uint64_t *a2)
{
  return sub_20C76FDA0(*a2, **a1);
}

BOOL sub_20C76FDA0(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAEA21ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C28462C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C76FE1C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548078;
  return result;
}

void sub_20C76FE44(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548078;
}

_QWORD *sub_20C76FE60@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  return sub_20C76FEC8(a1, a2);
}

uint64_t sub_20C76FE80(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548058))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C76FEBC()
{
  return &unk_24C548058;
}

_QWORD *sub_20C76FEC8@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 3 * *v4;
  if (v6 >> 62)
    v7 = -1;
  else
    v7 = 12 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (uint64_t *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10;
      v11[2] = *((_DWORD *)v10 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 3;
      v10 = (uint64_t *)((char *)v10 + 12);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5465D0;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C76FF8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C76FFA0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 6;
  WORD2(v13) = 4;
  v16[0] = &unk_24C5480E8;
  v17 = v16;
  v14[0] = &unk_24C548180;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 6;
  WORD2(v13) = 260;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C5481F0;
  v17 = v16;
  v14[0] = &unk_24C548288;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C77016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C7701F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5480E8;
  return result;
}

void sub_20C77021C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5480E8;
}

uint64_t sub_20C770238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C770288(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C770240(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548160))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77027C()
{
  return &unk_24C548160;
}

uint64_t sub_20C770288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  uint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C770340(a5, v11[0], v11[1]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C770320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C770340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD v6[2];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a3;
  v5 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
    sub_20BF1C1FC();
  v7 = &v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C548148[v3])(&v7, a1);
}

uint64_t sub_20C770398()
{
  return 1;
}

uint64_t sub_20C7703A0(_OWORD ***a1, unsigned int ***a2)
{
  sub_20C1D4F68(*a2, **a1);
  return 1;
}

BOOL sub_20C7703C8(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA212 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(v3 + 25) = 1;
  else
    *(_OWORD *)*(_QWORD *)(v3 + 8) = ***a1;
  return v4 == 0;
}

_QWORD *sub_20C770440()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548180;
  return result;
}

void sub_20C770468(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548180;
}

_QWORD *sub_20C770484@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C7704EC(a1, a2);
}

uint64_t sub_20C7704A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548160))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7704E0()
{
  return &unk_24C548160;
}

_QWORD *sub_20C7704EC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](0x10uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(_OWORD **)a1;
  *v4 = *v6;
  *a2 = 4;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C5465D0;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C770578(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C770598()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5481F0;
  return result;
}

void sub_20C7705C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5481F0;
}

uint64_t sub_20C7705DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C77062C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7705E4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548268))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C770620()
{
  return &unk_24C548268;
}

uint64_t sub_20C77062C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD v36[2];
  _OWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  __int128 **v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = (char *)v40[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C013364((uint64_t)v36, v11);
    sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = (char *)v40[3] - (char *)v17;
    if (v18)
    {
      v19 = *v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = (unint64_t *)(v16 - 1);
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C770820(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C7707D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C770820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548250[v2])(&v5, a1);
}

uint64_t sub_20C770870()
{
  return 1;
}

uint64_t sub_20C770878(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D5120(*a2, **a1);
  return 1;
}

BOOL sub_20C77089C(__int128 ***a1, uint64_t *a2)
{
  return sub_20C7708AC(*a2, **a1);
}

BOOL sub_20C7708AC(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAEA9C8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C285558(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C770928()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548288;
  return result;
}

void sub_20C770950(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548288;
}

_QWORD *sub_20C77096C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C7709D4(a1, a2);
}

uint64_t sub_20C77098C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548268))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7709C8()
{
  return &unk_24C548268;
}

_QWORD *sub_20C7709D4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 60) & 3) != 0)
    v7 = -1;
  else
    v7 = 16 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (__int128 *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5465D0;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C770A8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C770AA0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 9;
  WORD2(v13) = 4;
  v16[0] = &unk_24C5482F8;
  v17 = v16;
  v14[0] = &unk_24C548390;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 9;
  WORD2(v13) = 260;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C548400;
  v17 = v16;
  v14[0] = &unk_24C548498;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C770C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C770CF4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5482F8;
  return result;
}

void sub_20C770D1C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5482F8;
}

uint64_t sub_20C770D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C770D88(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C770D40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548370))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C770D7C()
{
  return &unk_24C548370;
}

uint64_t sub_20C770D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C770E40(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C770E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C770E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v4 = &v5;
  v5 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v6 = &v4;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_24C548358[v2])(&v6, a1);
}

uint64_t sub_20C770E94()
{
  return 1;
}

uint64_t sub_20C770E9C(uint64_t ***a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = (_QWORD *)*a2;
  v3 = ***a1;
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *v2 = v3;
  v2[1] = (char *)&off_24C51E248 + 3;
  return 1;
}

BOOL sub_20C770EFC(_QWORD ***a1, uint64_t *a2)
{
  return sub_20C770F08(*a1, *a2);
}

BOOL sub_20C770F08(_QWORD **a1, uint64_t a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CACA1E4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a2 + 25) = 1;
  else
    **(_QWORD **)(a2 + 8) = **a1;
  return v4 == 0;
}

_QWORD *sub_20C770F7C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548390;
  return result;
}

void sub_20C770FA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548390;
}

_QWORD *sub_20C770FC0@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C771028(a1, a2);
}

uint64_t sub_20C770FE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548370))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77101C()
{
  return &unk_24C548370;
}

_QWORD *sub_20C771028@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v4 = operator new[](8uLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    a1 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  *v4 = *a1;
  *a2 = 4;
  v6 = operator new(0x10uLL);
  *v6 = &unk_24C547B78;
  v6[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7710B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7710D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548400;
  return result;
}

void sub_20C7710FC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548400;
}

uint64_t sub_20C771118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C771168(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C771120(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548478))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77115C()
{
  return &unk_24C548478;
}

uint64_t sub_20C771168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  _OWORD v36[2];
  _QWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = *(uint64_t **)(v40 + 16);
    v9 = *(_QWORD *)(v40 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5DD9C((uint64_t)v36, v11);
    sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = *(uint64_t **)(v40 + 16);
    v18 = *(_QWORD *)(v40 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = *(uint64_t **)v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = v16 - 2;
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C77135C(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C77130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C77135C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548460[v2])(&v5, a1);
}

uint64_t sub_20C7713AC()
{
  return 1;
}

uint64_t sub_20C7713B4(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5E264(*a2, **a1);
  return 1;
}

BOOL sub_20C7713D8(__int128 ***a1, uint64_t *a2)
{
  return sub_20C7713E8(*a2, **a1);
}

BOOL sub_20C7713E8(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB1E016 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C28593C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C771464()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548498;
  return result;
}

void sub_20C77148C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548498;
}

_QWORD *sub_20C7714A8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C771510(a1, a2);
}

uint64_t sub_20C7714C8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548478))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C771504()
{
  return &unk_24C548478;
}

_QWORD *sub_20C771510@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 4 * *v4;
  if ((*v4 & 0x2000000000000000) != 0)
    v7 = -1;
  else
    v7 = 8 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (uint64_t *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547B78;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7715C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7715D8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 10;
  WORD2(v13) = 4;
  v16[0] = &unk_24C548508;
  v17 = v16;
  v14[0] = &unk_24C5485A0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 10;
  WORD2(v13) = 260;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C548610;
  v17 = v16;
  v14[0] = &unk_24C5486A8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C7717A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C77182C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548508;
  return result;
}

void sub_20C771854(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548508;
}

uint64_t sub_20C771870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7718C0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C771878(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548580))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7718B4()
{
  return &unk_24C548580;
}

uint64_t sub_20C7718C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  float v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C77197C(a5, v11[0], v11[1], v11[2], v11[3]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C77195C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C77197C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  _DWORD *v7;
  _DWORD v8[4];
  _QWORD *v9;

  *(float *)v8 = a2;
  *(float *)&v8[1] = a3;
  *(float *)&v8[2] = a4;
  *(float *)&v8[3] = a5;
  v7 = v8;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    sub_20BF1C1FC();
  v9 = &v7;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C548568[v5])(&v9, a1);
}

uint64_t sub_20C7719D4()
{
  return 1;
}

uint64_t sub_20C7719DC(_OWORD ***a1, unsigned int ***a2)
{
  sub_20C1D5548(*a2, **a1);
  return 1;
}

BOOL sub_20C771A04(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(v3 + 25) = 1;
  else
    *(_OWORD *)*(_QWORD *)(v3 + 8) = ***a1;
  return v4 == 0;
}

_QWORD *sub_20C771A7C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5485A0;
  return result;
}

void sub_20C771AA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5485A0;
}

_QWORD *sub_20C771AC0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C771B28(a1, a2);
}

uint64_t sub_20C771AE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548580))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C771B1C()
{
  return &unk_24C548580;
}

_QWORD *sub_20C771B28@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](0x10uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(_OWORD **)a1;
  *v4 = *v6;
  *a2 = 4;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C5472D8;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C771BB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C771BD4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548610;
  return result;
}

void sub_20C771BFC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548610;
}

uint64_t sub_20C771C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C771C68(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C771C20(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548688))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C771C5C()
{
  return &unk_24C548688;
}

uint64_t sub_20C771C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD v36[2];
  _OWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  __int128 **v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = (char *)v40[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5D23C((uint64_t)v36, v11);
    sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = (char *)v40[3] - (char *)v17;
    if (v18)
    {
      v19 = *v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = (unint64_t *)(v16 - 1);
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C771E5C(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C771E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C771E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548670[v2])(&v5, a1);
}

uint64_t sub_20C771EAC()
{
  return 1;
}

uint64_t sub_20C771EB4(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5D770(*a2, **a1);
  return 1;
}

BOOL sub_20C771ED8(__int128 ***a1, uint64_t *a2)
{
  return sub_20C771EE8(*a2, **a1);
}

BOOL sub_20C771EE8(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB1E89ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C285CD4(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C771F64()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5486A8;
  return result;
}

void sub_20C771F8C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5486A8;
}

_QWORD *sub_20C771FA8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C772010(a1, a2);
}

uint64_t sub_20C771FC8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548688))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C772004()
{
  return &unk_24C548688;
}

_QWORD *sub_20C772010@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 60) & 3) != 0)
    v7 = -1;
  else
    v7 = 16 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (__int128 *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5472D8;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7720C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7720DC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 11;
  WORD2(v13) = 4;
  v16[0] = &unk_24C548718;
  v17 = v16;
  v14[0] = &unk_24C5487B0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 11;
  WORD2(v13) = 260;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C548820;
  v17 = v16;
  v14[0] = &unk_24C5488B8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C7722A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C772330()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548718;
  return result;
}

void sub_20C772358(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548718;
}

uint64_t sub_20C772374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7723C4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C77237C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7723B8()
{
  return &unk_24C548790;
}

uint64_t sub_20C7723C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  double v11[5];

  v11[4] = *(double *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C772480(a5, v11[0], v11[1], v11[2], v11[3]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C772460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C772480(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD *v7;
  _QWORD v8[4];
  _QWORD *v9;

  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  v7 = v8;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    sub_20BF1C1FC();
  v9 = &v7;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C548778[v5])(&v9, a1);
}

uint64_t sub_20C7724D8()
{
  return 1;
}

uint64_t sub_20C7724E0(_OWORD ***a1, _QWORD **a2)
{
  sub_20C1D5704(*a2, **a1);
  return 1;
}

BOOL sub_20C772508(_QWORD **a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = (_OWORD *)**a1;
    v6 = *(_OWORD **)(v3 + 8);
    v7 = v5[1];
    *v6 = *v5;
    v6[1] = v7;
  }
  return v4 == 0;
}

_QWORD *sub_20C772580()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5487B0;
  return result;
}

void sub_20C7725A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5487B0;
}

_QWORD *sub_20C7725C4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C77262C(a1, a2);
}

uint64_t sub_20C7725E4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C772620()
{
  return &unk_24C548790;
}

_QWORD *sub_20C77262C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = operator new[](0x20uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(_OWORD **)a1;
  v7 = v6[1];
  *v4 = *v6;
  v4[1] = v7;
  *a2 = 4;
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C547578;
  v8[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7726B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7726D8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548820;
  return result;
}

void sub_20C772700(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548820;
}

uint64_t sub_20C77271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C77276C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C772724(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548898))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C772760()
{
  return &unk_24C548898;
}

uint64_t sub_20C77276C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _DWORD v40[4];
  _BYTE v41[48];
  __int128 **v42;
  std::__shared_weak_count *v43;

  v42 = 0;
  v43 = 0;
  LODWORD(v38[0]) = 0;
  DWORD2(v38[0]) = 0;
  v40[0] = 0;
  v40[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v41, a2, a3, v38, v40);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v42, a4);
  if (v42)
  {
    v8 = (uint64_t *)v42[2];
    v9 = (char *)v42[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5E990((uint64_t)v38, v11);
    sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38, v14, v15);
    v16 = v39;
    v17 = (uint64_t *)v42[2];
    v18 = (char *)v42[3] - (char *)v17;
    if (v18)
    {
      v19 = *v42;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        v26 = (_OWORD *)(v39 + 16);
        do
        {
          v27 = *v19;
          v28 = v19[1];
          v19 += 2;
          *(v26 - 1) = v27;
          *v26 = v28;
          v26 += 2;
          --v25;
        }
        while (v25);
        v16 = v39;
      }
    }
    v35 = v38[0];
    v36 = v38[1];
    v37 = v16;
    if (v16)
    {
      v29 = (unint64_t *)(v16 - 16);
      if (*((_QWORD *)&v36 + 1))
        v29 = (unint64_t *)*((_QWORD *)&v36 + 1);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v13 = sub_20C772968(a5, (uint64_t)&v35);
    sub_20BF5618C((uint64_t)&v35);
    sub_20BF5618C((uint64_t)v38);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v41);
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v13;
}

void sub_20C772918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C772968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548880[v2])(&v5, a1);
}

uint64_t sub_20C7729B8()
{
  return 1;
}

uint64_t sub_20C7729C0(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5EE20(*a2, **a1);
  return 1;
}

BOOL sub_20C7729E4(__int128 ***a1, uint64_t *a2)
{
  return sub_20C7729F4(*a2, **a1);
}

BOOL sub_20C7729F4(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB1F0CCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C28606C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C772A70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5488B8;
  return result;
}

void sub_20C772A98(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5488B8;
}

_QWORD *sub_20C772AB4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C772B1C(a1, a2);
}

uint64_t sub_20C772AD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548898))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C772B10()
{
  return &unk_24C548898;
}

_QWORD *sub_20C772B1C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 59) & 7) != 0)
    v7 = -1;
  else
    v7 = 32 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (__int128 *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10;
      v13 = v10[1];
      v10 += 2;
      *v11 = v12;
      v11[1] = v13;
      v11 += 2;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v14 = operator new(0x10uLL);
  *v14 = &unk_24C547578;
  v14[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v14);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C772BD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C772BE8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 10;
  WORD2(v13) = 4;
  v16[0] = &unk_24C548928;
  v17 = v16;
  v14[0] = &unk_24C5489C0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 10;
  WORD2(v13) = 260;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C548A30;
  v17 = v16;
  v14[0] = &unk_24C548AC8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C772DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C772E3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548928;
  return result;
}

void sub_20C772E64(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548928;
}

uint64_t sub_20C772E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C772ED0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C772E88(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5489A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C772EC4()
{
  return &unk_24C5489A0;
}

uint64_t sub_20C772ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  float v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C772F8C(a5, v11[1], v11[2], v11[3], v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C772F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C772F8C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  _DWORD *v7;
  _DWORD v8[4];
  _QWORD *v9;

  *(float *)v8 = a2;
  *(float *)&v8[1] = a3;
  *(float *)&v8[2] = a4;
  *(float *)&v8[3] = a5;
  v7 = v8;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    sub_20BF1C1FC();
  v9 = &v7;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C548988[v5])(&v9, a1);
}

uint64_t sub_20C772FE4()
{
  return 1;
}

uint64_t sub_20C772FEC(_OWORD ***a1, unsigned int ***a2)
{
  sub_20C1D35A0(*a2, **a1);
  return 1;
}

BOOL sub_20C773014(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(v3 + 25) = 1;
  else
    *(_OWORD *)*(_QWORD *)(v3 + 8) = ***a1;
  return v4 == 0;
}

_QWORD *sub_20C77308C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5489C0;
  return result;
}

void sub_20C7730B4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5489C0;
}

_QWORD *sub_20C7730D0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C773138(a1, a2);
}

uint64_t sub_20C7730F0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5489A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77312C()
{
  return &unk_24C5489A0;
}

_QWORD *sub_20C773138@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](0x10uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(_DWORD **)a1;
  *v4 = v6[3];
  v4[1] = *v6;
  v4[2] = v6[1];
  v4[3] = v6[2];
  *a2 = 4;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C5472D8;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7731DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7731FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548A30;
  return result;
}

void sub_20C773224(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548A30;
}

uint64_t sub_20C773240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C773290(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C773248(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548AA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C773284()
{
  return &unk_24C548AA8;
}

uint64_t sub_20C773290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int8x16_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  int8x16_t *v35;
  _OWORD v36[2];
  int8x16_t *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  int8x16_t **v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = v40[2];
    v9 = (char *)v40[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = v8->i64[0];
        v8 = (int8x16_t *)((char *)v8 + 8);
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF6110C((uint64_t)v36, v11);
    sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = v40[2];
    v18 = (char *)v40[3] - (char *)v17;
    if (v18)
    {
      v19 = *v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = v17->i64[0];
        v17 = (int8x16_t *)((char *)v17 + 8);
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = vextq_s8(v26, v26, 4uLL);
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = (unint64_t *)&v16[-1];
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C773488(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C773438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C773488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548A90[v2])(&v5, a1);
}

uint64_t sub_20C7734D8()
{
  return 1;
}

uint64_t sub_20C7734E0(uint64_t **a1, _QWORD **a2)
{
  sub_20BF6163C(*a2, **a1);
  return 1;
}

BOOL sub_20C773504(__int128 ***a1, uint64_t *a2)
{
  return sub_20C773514(*a2, **a1);
}

BOOL sub_20C773514(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CA9EFC3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C282F34(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C773590()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548AC8;
  return result;
}

void sub_20C7735B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548AC8;
}

_QWORD *sub_20C7735D4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C77363C(a1, a2);
}

uint64_t sub_20C7735F4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548AA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C773630()
{
  return &unk_24C548AA8;
}

_QWORD *sub_20C77363C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int *v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 60) & 3) != 0)
    v7 = -1;
  else
    v7 = 16 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (int *)(v4[4] + 8);
    v11 = v8;
    do
    {
      *v11 = v10[1];
      v11[1] = *(v10 - 2);
      v11[2] = *(v10 - 1);
      v12 = *v10;
      v10 += 4;
      v11[3] = v12;
      v11 += 4;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5472D8;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C773714(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C773728(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 11;
  WORD2(v13) = 4;
  v16[0] = &unk_24C548B38;
  v17 = v16;
  v14[0] = &unk_24C548BD0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 11;
  WORD2(v13) = 260;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C548C40;
  v17 = v16;
  v14[0] = &unk_24C548CD8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C7738F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C77397C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548B38;
  return result;
}

void sub_20C7739A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548B38;
}

uint64_t sub_20C7739C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C773A10(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7739C8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548BB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C773A04()
{
  return &unk_24C548BB0;
}

uint64_t sub_20C773A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  double v11[5];

  v11[4] = *(double *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C773ACC(a5, v11[1], v11[2], v11[3], v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C773AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C773ACC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD *v7;
  _QWORD v8[4];
  _QWORD *v9;

  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  v7 = v8;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    sub_20BF1C1FC();
  v9 = &v7;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C548B98[v5])(&v9, a1);
}

uint64_t sub_20C773B24()
{
  return 1;
}

uint64_t sub_20C773B2C(_OWORD ***a1, _QWORD **a2)
{
  sub_20C1D37B4(*a2, **a1);
  return 1;
}

BOOL sub_20C773B54(_QWORD **a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = (_OWORD *)**a1;
    v6 = *(_OWORD **)(v3 + 8);
    v7 = v5[1];
    *v6 = *v5;
    v6[1] = v7;
  }
  return v4 == 0;
}

_QWORD *sub_20C773BCC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548BD0;
  return result;
}

void sub_20C773BF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548BD0;
}

_QWORD *sub_20C773C10@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C773C78(a1, a2);
}

uint64_t sub_20C773C30(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548BB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C773C6C()
{
  return &unk_24C548BB0;
}

_QWORD *sub_20C773C78@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](0x20uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(_QWORD **)a1;
  *v4 = v6[3];
  v4[1] = *v6;
  v4[2] = v6[1];
  v4[3] = v6[2];
  *a2 = 4;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C547578;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C773D1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C773D3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548C40;
  return result;
}

void sub_20C773D64(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548C40;
}

uint64_t sub_20C773D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C773DD0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C773D88(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548CB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C773DC4()
{
  return &unk_24C548CB8;
}

uint64_t sub_20C773DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  _DWORD v41[4];
  _BYTE v42[48];
  uint64_t **v43;
  std::__shared_weak_count *v44;

  v43 = 0;
  v44 = 0;
  LODWORD(v39[0]) = 0;
  DWORD2(v39[0]) = 0;
  v41[0] = 0;
  v41[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v42, a2, a3, v39, v41);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v43, a4);
  if (v43)
  {
    v8 = v43[2];
    v9 = (char *)v43[3] - (char *)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF62858((uint64_t)v39, v11);
    sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39, v14, v15);
    v16 = v40;
    v17 = v43[2];
    v18 = (char *)v43[3] - (char *)v17;
    if (v18)
    {
      v19 = *v43;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        v26 = (_QWORD *)(v40 + 24);
        do
        {
          v27 = v19[3];
          v28 = *v19;
          *(_OWORD *)(v26 - 3) = *(_OWORD *)(v19 + 1);
          *(v26 - 1) = v27;
          *v26 = v28;
          v19 += 4;
          v26 += 4;
          --v25;
        }
        while (v25);
        v16 = v40;
      }
    }
    v36 = v39[0];
    v37 = v39[1];
    v38 = v16;
    if (v16)
    {
      v29 = (unint64_t *)*((_QWORD *)&v37 + 1);
      v30 = (unint64_t *)(v16 - 16);
      if (!*((_QWORD *)&v37 + 1))
        v29 = v30;
      do
        v31 = __ldxr(v29);
      while (__stxr(v31 + 1, v29));
    }
    v13 = sub_20C773FDC(a5, (uint64_t)&v36);
    sub_20BF5618C((uint64_t)&v36);
    sub_20BF5618C((uint64_t)v39);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v42);
  v32 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return v13;
}

void sub_20C773F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C773FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C548CA0[v2])(&v5, a1);
}

uint64_t sub_20C77402C()
{
  return 1;
}

uint64_t sub_20C774034(uint64_t **a1, _QWORD **a2)
{
  sub_20BF62CE4(*a2, **a1);
  return 1;
}

BOOL sub_20C774058(__int128 ***a1, uint64_t *a2)
{
  return sub_20C774068(*a2, **a1);
}

BOOL sub_20C774068(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CA9EFFELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C28333C(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C7740E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548CD8;
  return result;
}

void sub_20C77410C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548CD8;
}

_QWORD *sub_20C774128@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C774190(a1, a2);
}

uint64_t sub_20C774148(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548CB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C774184()
{
  return &unk_24C548CB8;
}

_QWORD *sub_20C774190@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 59) & 7) != 0)
    v7 = -1;
  else
    v7 = 32 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (uint64_t *)(v4[4] + 16);
    v11 = v8;
    do
    {
      *v11 = v10[1];
      v11[1] = *(v10 - 2);
      v11[2] = *(v10 - 1);
      v12 = *v10;
      v10 += 4;
      v11[3] = v12;
      v11 += 4;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547578;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C774268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C77427C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C774334(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C774334(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 2;
  WORD2(v13) = 1;
  v16[0] = &unk_24C548D48;
  v17 = v16;
  v14[0] = &unk_24C548DC8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 2;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C548E80;
  v17 = v16;
  v14[0] = &unk_24C548F00;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C774500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C774588()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548D48;
  return result;
}

void sub_20C7745B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548D48;
}

uint64_t sub_20C7745CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C77461C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7745D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548DA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C774610()
{
  return &unk_24C548DA8;
}

uint64_t sub_20C77461C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[55];
  char v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C7672B4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C774688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7746A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548DC8;
  return result;
}

void sub_20C7746D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548DC8;
}

_QWORD *sub_20C7746EC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C774754(a1, a2);
}

uint64_t sub_20C77470C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548DA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C774748()
{
  return &unk_24C548DA8;
}

_QWORD *sub_20C774754@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_DWORD *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C548E38;
  v5[8] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C7747D0(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C7747E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548E80;
  return result;
}

void sub_20C774808(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548E80;
}

uint64_t sub_20C774824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C774874(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C77482C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548EE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C774868()
{
  return &unk_24C548EE0;
}

uint64_t sub_20C774874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t *v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v35) = 0;
  DWORD2(v35) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, &v35, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = v40[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF64CC4((uint64_t)&v35, v11);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = v40[3] - (_QWORD)v17;
    if (!v18)
      goto LABEL_19;
    v19 = *v40;
    v20 = v18 >> 3;
    if (v20 <= 1)
      v20 = 1;
    v21 = 1;
    do
    {
      v22 = v21;
      v24 = *v17++;
      v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      v25 = 0;
      do
      {
        *(_DWORD *)(v16 + 4 * v25) = *(char *)(v19 + v25);
        ++v25;
      }
      while (v22 * v23 != v25);
      v32 = v35;
      v33 = v36;
      v34 = v16;
    }
    else
    {
LABEL_19:
      v32 = v35;
      v33 = v36;
      v34 = v37;
      if (!v37)
      {
LABEL_23:
        v13 = sub_20C767798(a5, (uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v35);
        goto LABEL_24;
      }
    }
    v26 = (unint64_t *)(v16 - 16);
    if (*((_QWORD *)&v33 + 1))
      v26 = (unint64_t *)*((_QWORD *)&v33 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    goto LABEL_23;
  }
  v13 = 0;
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v28 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v13;
}

void sub_20C774A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C774A88()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548F00;
  return result;
}

void sub_20C774AB0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548F00;
}

_QWORD *sub_20C774ACC@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  return sub_20C774B34(a1, a2);
}

uint64_t sub_20C774AEC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C548EE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C774B28()
{
  return &unk_24C548EE0;
}

_QWORD *sub_20C774B34@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v3;
  size_t *v4;
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int *v8;
  size_t v9;
  _BYTE *v10;
  int v11;
  _QWORD *v12;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (size_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(size_t **)a1;
  v5 = *v4;
  v6 = operator new[](*v4);
  v7 = v6;
  if (v5)
  {
    v8 = (int *)v4[4];
    v9 = v5;
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  v12 = operator new(0x10uLL);
  *v12 = &unk_24C548F70;
  v12[1] = v7;
  result = sub_20C76527C(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C774BD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C774BEC(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C548F70;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C774C28(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C548F70;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C774C64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C774C6C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C774D24(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C774D24(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 4;
  WORD2(v13) = 1;
  v16[0] = &unk_24C548FB8;
  v17 = v16;
  v14[0] = &unk_24C549038;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 4;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C5490F0;
  v17 = v16;
  v14[0] = &unk_24C549170;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C774EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C774F78()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C548FB8;
  return result;
}

void sub_20C774FA0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C548FB8;
}

uint64_t sub_20C774FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C77500C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C774FC4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549018))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775000()
{
  return &unk_24C549018;
}

uint64_t sub_20C77500C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[54];
  __int16 v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C7672B4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C775078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C775098()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549038;
  return result;
}

void sub_20C7750C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549038;
}

_QWORD *sub_20C7750DC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C775144(a1, a2);
}

uint64_t sub_20C7750FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549018))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775138()
{
  return &unk_24C549018;
}

_QWORD *sub_20C775144@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _WORD *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_DWORD *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C5490A8;
  v5[4] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C7751C0(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C7751D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5490F0;
  return result;
}

void sub_20C7751F8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5490F0;
}

uint64_t sub_20C775214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C775264(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C77521C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549150))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775258()
{
  return &unk_24C549150;
}

uint64_t sub_20C775264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t *v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v35) = 0;
  DWORD2(v35) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, &v35, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = v40[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF64CC4((uint64_t)&v35, v11);
    sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = v40[3] - (_QWORD)v17;
    if (!v18)
      goto LABEL_19;
    v19 = *v40;
    v20 = v18 >> 3;
    if (v20 <= 1)
      v20 = 1;
    v21 = 1;
    do
    {
      v22 = v21;
      v24 = *v17++;
      v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      v25 = 0;
      do
      {
        *(_DWORD *)(v16 + 4 * v25) = *(__int16 *)(v19 + 2 * v25);
        ++v25;
      }
      while (v22 * v23 != v25);
      v32 = v35;
      v33 = v36;
      v34 = v16;
    }
    else
    {
LABEL_19:
      v32 = v35;
      v33 = v36;
      v34 = v37;
      if (!v37)
      {
LABEL_23:
        v13 = sub_20C767798(a5, (uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v35);
        goto LABEL_24;
      }
    }
    v26 = (unint64_t *)(v16 - 16);
    if (*((_QWORD *)&v33 + 1))
      v26 = (unint64_t *)*((_QWORD *)&v33 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    goto LABEL_23;
  }
  v13 = 0;
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v28 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v13;
}

void sub_20C775420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C775478()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549170;
  return result;
}

void sub_20C7754A0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549170;
}

_QWORD *sub_20C7754BC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C775524(a1, a2);
}

uint64_t sub_20C7754DC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549150))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775518()
{
  return &unk_24C549150;
}

_QWORD *sub_20C775524@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _WORD *v7;
  _WORD *v8;
  int *v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if (*v4 < 0)
    v6 = -1;
  else
    v6 = 2 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (int *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5491E0;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7755D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7755E4(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C5491E0;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C775620(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C5491E0;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C77565C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C775664(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C77571C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C77571C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 3;
  WORD2(v13) = 1;
  v16[0] = &unk_24C549228;
  v17 = v16;
  v14[0] = &unk_24C5492A8;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 3;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549360;
  v17 = v16;
  v14[0] = &unk_24C5493E0;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C7758E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C775970()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549228;
  return result;
}

void sub_20C775998(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549228;
}

uint64_t sub_20C7759B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C775A04(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7759BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549288))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7759F8()
{
  return &unk_24C549288;
}

uint64_t sub_20C775A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[54];
  unsigned __int16 v11;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C767EB4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C775A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C775A90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5492A8;
  return result;
}

void sub_20C775AB8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5492A8;
}

_QWORD *sub_20C775AD4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C775B3C(a1, a2);
}

uint64_t sub_20C775AF4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549288))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775B30()
{
  return &unk_24C549288;
}

_QWORD *sub_20C775B3C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _WORD *v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v4 = *(_DWORD *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(_QWORD *)v5 = &unk_24C549318;
  v5[4] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_20C775BB8(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *sub_20C775BC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549360;
  return result;
}

void sub_20C775BF0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549360;
}

uint64_t sub_20C775C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C775C5C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C775C14(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5493C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775C50()
{
  return &unk_24C5493C0;
}

uint64_t sub_20C775C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t *v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v35) = 0;
  DWORD2(v35) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, &v35, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = (uint64_t *)v40[2];
    v9 = v40[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF640F0((uint64_t)&v35, v11);
    sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35, v14, v15);
    v16 = v37;
    v17 = (uint64_t *)v40[2];
    v18 = v40[3] - (_QWORD)v17;
    if (!v18)
      goto LABEL_19;
    v19 = *v40;
    v20 = v18 >> 3;
    if (v20 <= 1)
      v20 = 1;
    v21 = 1;
    do
    {
      v22 = v21;
      v24 = *v17++;
      v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      v25 = 0;
      do
      {
        *(_DWORD *)(v16 + 4 * v25) = *(unsigned __int16 *)(v19 + 2 * v25);
        ++v25;
      }
      while (v22 * v23 != v25);
      v32 = v35;
      v33 = v36;
      v34 = v16;
    }
    else
    {
LABEL_19:
      v32 = v35;
      v33 = v36;
      v34 = v37;
      if (!v37)
      {
LABEL_23:
        v13 = sub_20C768398(a5, (uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v32);
        sub_20BF5618C((uint64_t)&v35);
        goto LABEL_24;
      }
    }
    v26 = (unint64_t *)(v16 - 16);
    if (*((_QWORD *)&v33 + 1))
      v26 = (unint64_t *)*((_QWORD *)&v33 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    goto LABEL_23;
  }
  v13 = 0;
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v28 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v13;
}

void sub_20C775E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C775E70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C5493E0;
  return result;
}

void sub_20C775E98(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C5493E0;
}

_QWORD *sub_20C775EB4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C775F1C(a1, a2);
}

uint64_t sub_20C775ED4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5493C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C775F10()
{
  return &unk_24C5493C0;
}

_QWORD *sub_20C775F1C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  size_t v6;
  _WORD *v7;
  _WORD *v8;
  int *v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  if (*v4 < 0)
    v6 = -1;
  else
    v6 = 2 * *v4;
  v7 = operator new[](v6);
  v8 = v7;
  if (v5)
  {
    v9 = (int *)v4[4];
    v10 = v5;
    v11 = v7;
    do
    {
      v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C549450;
  v13[1] = v8;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C775FC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C775FDC(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C549450;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C776018(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C549450;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C776054(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_20C77605C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Type;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCE0, a2, a3);
  v9 = 0;
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v5, (unsigned int **)&v9);
  result = sub_20C776114(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_QWORD *sub_20C776114(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 12;
  WORD2(v13) = 1;
  v16[0] = &unk_24C549498;
  v17 = v16;
  v14[0] = &unk_24C549518;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 12;
  WORD2(v13) = 257;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549588;
  v17 = v16;
  v14[0] = &unk_24C549620;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C7762E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C776368()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549498;
  return result;
}

void sub_20C776390(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549498;
}

uint64_t sub_20C7763AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7763FC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7763B4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5494F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7763F0()
{
  return &unk_24C5494F8;
}

uint64_t sub_20C7763FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  _DWORD v12[4];
  _BYTE v13[48];
  void *v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v12[0] = 0;
  v12[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v13, a2, a3, v12);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v13, (uint64_t)v14, a4, 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  v7 = sub_20C73D728(a5, (uint64_t)&v11);
  if ((v11 & 7) != 0)
  {
    v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v13);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return v7;
}

void sub_20C7764D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a5);
  if ((a3 & 7) != 0)
  {
    v7 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  if (*(char *)(v5 - 25) < 0)
    operator delete(*(void **)(v5 - 48));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C776538()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549518;
  return result;
}

void sub_20C776560(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549518;
}

void sub_20C77657C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X1>, _QWORD *a2@<X8>)
{
  char v2;

  sub_20C7765E4((pxrInternal__aapl__pxrReserved__::TfToken *)&v2, a1, a2);
}

uint64_t sub_20C77659C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5494F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7765D8()
{
  return &unk_24C5494F8;
}

void sub_20C7765E4(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  const std::string *EmptyString;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 4) != 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    a2 = a1;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  std::string::operator=(&v6, EmptyString);
  sub_20C76CB18(a3, (uint64_t)&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_20C776670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C776698()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549588;
  return result;
}

void sub_20C7766C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549588;
}

uint64_t sub_20C7766DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C77672C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C7766E4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549600))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C776720()
{
  return &unk_24C549600;
}

uint64_t sub_20C77672C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _DWORD v32[4];
  _BYTE v33[48];
  uint64_t *v34;
  std::__shared_weak_count *v35;

  v34 = 0;
  v35 = 0;
  LODWORD(v30[0]) = 0;
  DWORD2(v30[0]) = 0;
  v32[0] = 0;
  v32[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v33, a2, a3, v30, v32);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v34, a4);
  if (v34)
  {
    v8 = (uint64_t *)v34[2];
    v9 = v34[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20C008C78((uint64_t)v30, v11);
    sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v30, v14, v15);
    v16 = (uint64_t *)v34[2];
    v17 = v34[3] - (_QWORD)v16;
    if (v17)
    {
      v18 = v17 >> 3;
      if (v18 <= 1)
        v18 = 1;
      v19 = 1;
      do
      {
        v20 = *v16++;
        v19 *= v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      v19 = 0;
    }
    sub_20C776914((uint64_t)v32, v31, *v34, v19);
    v27 = v30[0];
    v28 = v30[1];
    v29 = v31;
    if (v31)
    {
      v21 = (unint64_t *)(v31 - 16);
      if (*((_QWORD *)&v28 + 1))
        v21 = (unint64_t *)*((_QWORD *)&v28 + 1);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v13 = sub_20C7769D8(a5, (uint64_t)&v27);
    sub_20C00918C(&v27);
    sub_20C00918C(v30);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v33);
  v23 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v13;
}

void sub_20C7768C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  sub_20C00918C(&a9);
  sub_20C00918C(&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C776914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t result;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15);
      v9 = (uint64_t *)(a2 + 8 * i);
      if (&v15 == v9)
      {
        v12 = v15;
      }
      else
      {
        if ((*v9 & 7) != 0)
        {
          v10 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 2, v10));
        }
        v12 = 0;
        *v9 = v15;
        v15 = 0;
      }
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      a3 += 24;
    }
  }
  return result;
}

uint64_t sub_20C7769D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5495E8[v2])(&v5, a1);
}

uint64_t sub_20C776A28()
{
  return 1;
}

uint64_t sub_20C776A30(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D1830(*a2, **a1);
  return 1;
}

BOOL sub_20C776A54(__int128 ***a1, uint64_t *a2)
{
  return sub_20C776A64(*a2, **a1);
}

BOOL sub_20C776A64(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CAB1366 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C034C28(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C776AE0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549620;
  return result;
}

void sub_20C776B08(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549620;
}

void sub_20C776B24(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  sub_20C776B8C(a1, a2);
}

uint64_t sub_20C776B44(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549600))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C776B80()
{
  return &unk_24C549600;
}

void sub_20C776B8C(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL4 v6;
  size_t v7;
  _QWORD *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  const std::string *EmptyString;
  _QWORD *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(unint64_t **)a1;
  v5 = *v4;
  v6 = !is_mul_ok(*v4, 0x18uLL);
  if (24 * *v4 >= 0xFFFFFFFFFFFFFFF0)
    v6 = 1;
  if (v6)
    v7 = -1;
  else
    v7 = 24 * v5 + 16;
  v8 = operator new[](v7);
  *v8 = 24;
  v8[1] = v5;
  v9 = (std::string *)(v8 + 2);
  if (v5)
  {
    bzero(v8 + 2, 24 * ((24 * v5 - 24) / 0x18) + 24);
    v11 = 0;
    v16 = v9;
    do
    {
      if ((*(_QWORD *)(v4[4] + 8 * v11) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((*(_QWORD *)(v4[4] + 8 * v11) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
      v10 = std::string::operator=(v9++, EmptyString);
      ++v11;
    }
    while (v5 != v11);
  }
  else
  {
    v16 = (std::string *)(v8 + 2);
  }
  *a2 = v5;
  v13 = operator new(0x10uLL);
  v14 = v16;
  v16 = 0;
  *v13 = &unk_24C547818;
  v13[1] = v14;
  sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  v15 = (uint64_t)v16;
  v16 = 0;
  if (v15)
    sub_20C76D24C((uint64_t)&v16, v15);
}

void sub_20C776CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_20C76D24C((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C776CFC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t ArrayType;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LODWORD(v13) = 10;
  WORD2(v13) = 16;
  v16[0] = &unk_24C549690;
  v17 = v16;
  v14[0] = &unk_24C549710;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, a2, (uint64_t)v16, (uint64_t)v14);
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  LODWORD(v13) = 10;
  WORD2(v13) = 272;
  ArrayType = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v16[0] = &unk_24C549780;
  v17 = v16;
  v14[0] = &unk_24C549818;
  v15 = v14;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v13, &ArrayType, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20C776EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C776F50()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549690;
  return result;
}

void sub_20C776F78(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549690;
}

uint64_t sub_20C776F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C776FE4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C776F9C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5496F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C776FD8()
{
  return &unk_24C5496F0;
}

uint64_t sub_20C776FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _OWORD v9[8];
  _DWORD v10[4];
  _BYTE v11[48];
  float32x4_t v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)v12, a4, 0);
  sub_20C7770B4(v12, v9);
  v7 = sub_20C742A20(a5, (uint64_t)v9);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  return v7;
}

void sub_20C777094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a28);
  _Unwind_Resume(a1);
}

double sub_20C7770B4@<D0>(float32x4_t *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  float64x2_t *v3;
  float32x4_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[6];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = (float64x2_t *)&v10[v2];
    v4 = *a1++;
    *v3 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
    v3[1] = vcvt_hight_f64_f32(v4);
    v2 += 2;
  }
  while (v2 != 8);
  v5 = v10[1];
  *a2 = v10[0];
  a2[1] = v5;
  v6 = v10[3];
  a2[2] = v10[2];
  a2[3] = v6;
  v7 = v10[5];
  a2[4] = v10[4];
  a2[5] = v7;
  result = *(double *)&v11;
  v9 = v12;
  a2[6] = v11;
  a2[7] = v9;
  return result;
}

_QWORD *sub_20C777148()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549710;
  return result;
}

void sub_20C777170(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549710;
}

_QWORD *sub_20C77718C@<X0>(float64x2_t **a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C7771F4(a1, a2);
}

uint64_t sub_20C7771AC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5496F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7771E8()
{
  return &unk_24C5496F0;
}

_QWORD *sub_20C7771F4@<X0>(float64x2_t **a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t i;
  float64x2_t v8;
  float64x2_t v9;
  _QWORD *v10;
  _QWORD *result;

  v4 = (char *)operator new[](0x40uLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    v6 = (float64x2_t *)(*(uint64_t (**)(float64x2_t **))(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *a1;
  for (i = 0; i != 64; i += 16)
  {
    v9 = *v6;
    v8 = v6[1];
    v6 += 2;
    *(float32x4_t *)&v4[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v8);
  }
  *a2 = 16;
  v10 = operator new(0x10uLL);
  *v10 = &unk_24C5472D8;
  v10[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v10);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C777298(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7772B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549780;
  return result;
}

void sub_20C7772E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549780;
}

uint64_t sub_20C7772FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C77734C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C777304(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5497F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C777340()
{
  return &unk_24C5497F8;
}

uint64_t sub_20C77734C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  _OWORD v40[2];
  _OWORD *v41;
  _BYTE v42[48];
  uint64_t v43;
  std::__shared_weak_count *v44;
  _OWORD v45[8];

  v43 = 0;
  v44 = 0;
  LODWORD(v45[0]) = 0;
  DWORD2(v45[0]) = 0;
  LODWORD(v40[0]) = 0;
  DWORD2(v40[0]) = 0;
  Alembic::Abc::v12::IArrayProperty::IArrayProperty(v42, a2, a3, v45, v40);
  Alembic::Abc::v12::IArrayProperty::get((uint64_t)v42, (uint64_t)&v43, a4);
  if (v43)
  {
    v7 = *(uint64_t **)(v43 + 16);
    v8 = *(_QWORD *)(v43 + 24) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      if (v9 <= 1)
        v9 = 1;
      v10 = 1;
      do
      {
        v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    sub_20BF5F80C((uint64_t)v40, v10);
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v40, v13, v14);
    v15 = v41;
    v16 = *(uint64_t **)(v43 + 16);
    v17 = *(_QWORD *)(v43 + 24) - (_QWORD)v16;
    if (v17)
    {
      v18 = *(float32x4_t **)v43;
      v19 = v17 >> 3;
      if ((unint64_t)(v17 >> 3) <= 1)
        v19 = 1;
      v20 = 1;
      do
      {
        v21 = v20;
        v23 = *v16++;
        v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        v24 = v21 * v22;
        do
        {
          sub_20C7770B4(v18, v45);
          v25 = v45[0];
          v26 = v45[1];
          v27 = v45[3];
          v15[2] = v45[2];
          v15[3] = v27;
          *v15 = v25;
          v15[1] = v26;
          v28 = v45[4];
          v29 = v45[5];
          v30 = v45[7];
          v15[6] = v45[6];
          v15[7] = v30;
          v15[4] = v28;
          v15[5] = v29;
          v18 += 4;
          v15 += 8;
          --v24;
        }
        while (v24);
        v15 = v41;
      }
    }
    v37 = v40[0];
    v38 = v40[1];
    v39 = v15;
    if (v15)
    {
      v31 = (unint64_t *)*((_QWORD *)&v38 + 1);
      if (!*((_QWORD *)&v38 + 1))
        v31 = (unint64_t *)(v15 - 1);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v12 = sub_20C777584(a5, (uint64_t)&v37);
    sub_20BF5618C((uint64_t)&v37);
    sub_20BF5618C((uint64_t)v40);
  }
  else
  {
    v12 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v42);
  v33 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v12;
}

void sub_20C777530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20C777584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5497E0[v2])(&v5, a1);
}

uint64_t sub_20C7775D4()
{
  return 1;
}

uint64_t sub_20C7775DC(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5FE00(*a2, **a1);
  return 1;
}

BOOL sub_20C777600(__int128 ***a1, uint64_t *a2)
{
  return sub_20C777610(*a2, **a1);
}

BOOL sub_20C777610(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB20096 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C282748(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C77768C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549818;
  return result;
}

void sub_20C7776B4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549818;
}

_QWORD *sub_20C7776D0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C777738(a1, a2);
}

uint64_t sub_20C7776F0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5497F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77772C()
{
  return &unk_24C5497F8;
}

_QWORD *sub_20C777738@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  float64x2_t *v11;
  char *v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  _QWORD *v17;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 16 * *v4;
  if ((((unint64_t)*v4 >> 58) & 3) != 0)
    v7 = -1;
  else
    v7 = *v4 << 6;
  v8 = (char *)operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = 0;
    v11 = (float64x2_t *)v4[4];
    v12 = v8;
    do
    {
      v13 = 0;
      v14 = v11;
      do
      {
        v16 = *v14;
        v15 = v14[1];
        v14 += 2;
        *(float32x4_t *)&v12[v13] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v15);
        v13 += 16;
      }
      while (v13 != 64);
      v12 += 64;
      ++v10;
      v11 += 8;
    }
    while (v10 != v5);
  }
  *a2 = v6;
  v17 = operator new(0x10uLL);
  *v17 = &unk_24C5472D8;
  v17[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v17);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C77781C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C777838()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549888;
  return result;
}

void sub_20C777860(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549888;
}

uint64_t sub_20C77787C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7778CC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C777884(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549900))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7778C0()
{
  return &unk_24C549900;
}

uint64_t sub_20C7778CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[50];
  unsigned __int16 v11;
  unsigned int v12;

  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  v7 = sub_20C777958(a5, v11 | ((unint64_t)v12 << 16));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C777940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C777958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  int v5;
  __int16 v6;
  int **v7;

  v5 = a2;
  v6 = WORD2(a2);
  v4 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v7 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_24C5498E8[v2])(&v7, a1);
}

uint64_t sub_20C7779B8()
{
  return 1;
}

uint64_t sub_20C7779C0(unsigned int ***a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a2;
  v3 = ***a1 | ((unint64_t)*((unsigned __int16 *)**a1 + 2) << 32);
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(*a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  *(_QWORD *)(v2 + 8) = (char *)&off_24C51E020 + 3;
  *(_DWORD *)v2 = v3;
  *(_WORD *)(v2 + 4) = WORD2(v3);
  return 1;
}

BOOL sub_20C777A38(int ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int *v5;
  uint64_t v6;
  int v7;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA12CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = **a1;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = *v5;
    *(_WORD *)(v6 + 4) = *((_WORD *)v5 + 2);
    *(_DWORD *)v6 = v7;
  }
  return v4 == 0;
}

_QWORD *sub_20C777AB8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549920;
  return result;
}

void sub_20C777AE0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549920;
}

_QWORD *sub_20C777AFC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C777B64(a1, a2);
}

uint64_t sub_20C777B1C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549900))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C777B58()
{
  return &unk_24C549900;
}

_QWORD *sub_20C777B64@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _WORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](6uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    a1 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v6 = *(_DWORD *)a1;
  v4[2] = *(_WORD *)(a1 + 4);
  *(_DWORD *)v4 = v6;
  *a2 = 3;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C547B78;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C777BF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C777C18()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549990;
  return result;
}

void sub_20C777C40(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549990;
}

uint64_t sub_20C777C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C777CAC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C777C64(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549A08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C777CA0()
{
  return &unk_24C549A08;
}

uint64_t sub_20C777CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _DWORD v39[4];
  _BYTE v40[48];
  unsigned __int16 **v41;
  std::__shared_weak_count *v42;

  v41 = 0;
  v42 = 0;
  LODWORD(v37[0]) = 0;
  DWORD2(v37[0]) = 0;
  v39[0] = 0;
  v39[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v40, a2, a3, v37, v39);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v41, a4);
  if (v41)
  {
    v8 = (char *)v41[2];
    v9 = (char *)v41[3] - v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *(_QWORD *)v8;
        v8 += 8;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5B6EC((uint64_t)v37, v11);
    sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v14, v15);
    v16 = v38;
    v17 = (char *)v41[2];
    v18 = (char *)v41[3] - v17;
    if (v18)
    {
      v19 = *v41;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *(_QWORD *)v17;
        v17 += 8;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *(_DWORD *)(v19 + 1);
          v27 = *v19 | (v26 << 16);
          *(_WORD *)(v16 + 4) = HIWORD(v26);
          *(_DWORD *)v16 = v27;
          v16 += 6;
          v19 += 3;
          --v25;
        }
        while (v25);
        v16 = v38;
      }
    }
    v34 = v37[0];
    v35 = v37[1];
    v36 = v16;
    if (v16)
    {
      v28 = (unint64_t *)(v16 - 16);
      if (*((_QWORD *)&v35 + 1))
        v28 = (unint64_t *)*((_QWORD *)&v35 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v13 = sub_20C777EB4(a5, (uint64_t)&v34);
    sub_20BF5618C((uint64_t)&v34);
    sub_20BF5618C((uint64_t)v37);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v40);
  v30 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v13;
}

void sub_20C777E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C777EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C5499F0[v2])(&v5, a1);
}

uint64_t sub_20C777F04()
{
  return 1;
}

uint64_t sub_20C777F0C(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5BC34(*a2, **a1);
  return 1;
}

BOOL sub_20C777F30(__int128 ***a1, uint64_t *a2)
{
  return sub_20C777F40(*a2, **a1);
}

BOOL sub_20C777F40(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB1E302 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C284A28(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C777FBC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549A28;
  return result;
}

void sub_20C777FE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549A28;
}

_QWORD *sub_20C778000@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C778068(a1, a2);
}

uint64_t sub_20C778020(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549A08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77805C()
{
  return &unk_24C549A08;
}

_QWORD *sub_20C778068@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  void *v9;
  int *v10;
  _WORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 3 * *v4;
  if (v6 < 0)
    v7 = -1;
  else
    v7 = 6 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (int *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10;
      v11[2] = *((_WORD *)v10 + 2);
      *(_DWORD *)v11 = v12;
      v11 += 3;
      v10 = (int *)((char *)v10 + 6);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547B78;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C778128(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C778144()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549A98;
  return result;
}

void sub_20C77816C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549A98;
}

uint64_t sub_20C778188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7781D8(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C778190(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7781CC()
{
  return &unk_24C549B10;
}

uint64_t sub_20C7781D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[52];
  float v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C778294(a5, v11[0], v11[1], v11[2]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C778274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C778294(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v4;
  _DWORD *v6;
  _DWORD v7[3];
  _QWORD *v8;

  *(float *)v7 = a2;
  *(float *)&v7[1] = a3;
  *(float *)&v7[2] = a4;
  v6 = v7;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == -1)
    sub_20BF1C1FC();
  v8 = &v6;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C549AF8[v4])(&v8, a1);
}

uint64_t sub_20C7782EC()
{
  return 1;
}

uint64_t sub_20C7782F4(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D4A60(*a2, **a1);
  return 1;
}

BOOL sub_20C77831C(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = **a1;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = *v5;
    *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
    *(_QWORD *)v6 = v7;
  }
  return v4 == 0;
}

_QWORD *sub_20C77839C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549B30;
  return result;
}

void sub_20C7783C4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549B30;
}

_QWORD *sub_20C7783E0@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C778448(a1, a2);
}

uint64_t sub_20C778400(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77843C()
{
  return &unk_24C549B10;
}

_QWORD *sub_20C778448@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = operator new[](0xCuLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *a1;
  v7 = *(_QWORD *)v6;
  v4[2] = *(_DWORD *)(v6 + 8);
  *(_QWORD *)v4 = v7;
  *a2 = 3;
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C5472D8;
  v8[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7784DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7784FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549BA0;
  return result;
}

void sub_20C778524(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549BA0;
}

uint64_t sub_20C778540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C778590(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C778548(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549C00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C778584()
{
  return &unk_24C549C00;
}

uint64_t sub_20C778590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _DWORD v39[4];
  _BYTE v40[48];
  _QWORD *v41;
  std::__shared_weak_count *v42;

  v41 = 0;
  v42 = 0;
  LODWORD(v37[0]) = 0;
  DWORD2(v37[0]) = 0;
  v39[0] = 0;
  v39[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v40, a2, a3, v37, v39);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v41, a4);
  if (v41)
  {
    v8 = (uint64_t *)v41[2];
    v9 = v41[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5AB98((uint64_t)v37, v11);
    sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v14, v15);
    v16 = v38;
    v17 = (uint64_t *)v41[2];
    v18 = v41[3] - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      if (v19 <= 1)
        v19 = 1;
      v20 = 1;
      do
      {
        v21 = v20;
        v23 = *v17++;
        v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        v24 = (_DWORD *)(*v41 + 8);
        v25 = v21 * v22;
        v26 = (_DWORD *)(v38 + 8);
        do
        {
          v27 = *v24;
          *((_QWORD *)v26 - 1) = *((_QWORD *)v24 - 1);
          *v26 = v27;
          v26 += 3;
          v24 += 3;
          --v25;
        }
        while (v25);
        v16 = v38;
      }
    }
    v34 = v37[0];
    v35 = v37[1];
    v36 = v16;
    if (v16)
    {
      v28 = (unint64_t *)(v16 - 16);
      if (*((_QWORD *)&v35 + 1))
        v28 = (unint64_t *)*((_QWORD *)&v35 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v13 = sub_20C73BB1C(a5, (uint64_t)&v34);
    sub_20BF5618C((uint64_t)&v34);
    sub_20BF5618C((uint64_t)v37);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v40);
  v30 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v13;
}

void sub_20C778748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7787A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549C20;
  return result;
}

void sub_20C7787C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549C20;
}

_QWORD *sub_20C7787E4@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  return sub_20C77884C(a1, a2);
}

uint64_t sub_20C778804(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549C00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C778840()
{
  return &unk_24C549C00;
}

_QWORD *sub_20C77884C@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 3 * *v4;
  if (v6 >> 62)
    v7 = -1;
  else
    v7 = 12 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (uint64_t *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10;
      v11[2] = *((_DWORD *)v10 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 3;
      v10 = (uint64_t *)((char *)v10 + 12);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5472D8;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C778910(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C77892C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549C90;
  return result;
}

void sub_20C778954(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549C90;
}

uint64_t sub_20C778970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7789C0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C778978(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549D08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7789B4()
{
  return &unk_24C549D08;
}

uint64_t sub_20C7789C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  double v11[4];

  v11[3] = *(double *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C778A7C(a5, v11[0], v11[1], v11[2]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C778A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C778A7C(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD *v8;

  *(double *)v7 = a2;
  *(double *)&v7[1] = a3;
  *(double *)&v7[2] = a4;
  v6 = v7;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == -1)
    sub_20BF1C1FC();
  v8 = &v6;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_24C549CF0[v4])(&v8, a1);
}

uint64_t sub_20C778AD4()
{
  return 1;
}

uint64_t sub_20C778ADC(uint64_t **a1, _QWORD **a2)
{
  sub_20C1D4C34(*a2, **a1);
  return 1;
}

BOOL sub_20C778B04(__int128 ***a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;

  v3 = *a2;
  v4 = strcmp((const char *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(_BYTE *)(v3 + 25) = 1;
  }
  else
  {
    v5 = **a1;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = *v5;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v7;
  }
  return v4 == 0;
}

_QWORD *sub_20C778B84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549D28;
  return result;
}

void sub_20C778BAC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549D28;
}

_QWORD *sub_20C778BC8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C778C30(a1, a2);
}

uint64_t sub_20C778BE8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549D08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C778C24()
{
  return &unk_24C549D08;
}

_QWORD *sub_20C778C30@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = operator new[](0x18uLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *a1;
  v7 = *(_OWORD *)v6;
  v4[2] = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v4 = v7;
  *a2 = 3;
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C547578;
  v8[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C778CC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C778CE4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549D98;
  return result;
}

void sub_20C778D0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549D98;
}

uint64_t sub_20C778D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C778D78(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C778D30(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C778D6C()
{
  return &unk_24C549E10;
}

uint64_t sub_20C778D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _DWORD v39[4];
  _BYTE v40[48];
  _QWORD *v41;
  std::__shared_weak_count *v42;

  v41 = 0;
  v42 = 0;
  LODWORD(v37[0]) = 0;
  DWORD2(v37[0]) = 0;
  v39[0] = 0;
  v39[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v40, a2, a3, v37, v39);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v41, a4);
  if (v41)
  {
    v8 = (uint64_t *)v41[2];
    v9 = v41[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5C3C4((uint64_t)v37, v11);
    sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v14, v15);
    v16 = v38;
    v17 = (uint64_t *)v41[2];
    v18 = v41[3] - (_QWORD)v17;
    if (v18)
    {
      v19 = v18 >> 3;
      if (v19 <= 1)
        v19 = 1;
      v20 = 1;
      do
      {
        v21 = v20;
        v23 = *v17++;
        v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        v24 = (_QWORD *)(*v41 + 16);
        v25 = v21 * v22;
        v26 = (_QWORD *)(v38 + 16);
        do
        {
          v27 = *v24;
          *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
          *v26 = v27;
          v26 += 3;
          v24 += 3;
          --v25;
        }
        while (v25);
        v16 = v38;
      }
    }
    v34 = v37[0];
    v35 = v37[1];
    v36 = v16;
    if (v16)
    {
      v28 = (unint64_t *)(v16 - 16);
      if (*((_QWORD *)&v35 + 1))
        v28 = (unint64_t *)*((_QWORD *)&v35 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v13 = sub_20C778F80(a5, (uint64_t)&v34);
    sub_20BF5618C((uint64_t)&v34);
    sub_20BF5618C((uint64_t)v37);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v40);
  v30 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v13;
}

void sub_20C778F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C778F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C549DF8[v2])(&v5, a1);
}

uint64_t sub_20C778FD0()
{
  return 1;
}

uint64_t sub_20C778FD8(uint64_t **a1, _QWORD **a2)
{
  sub_20BF5C8C4(*a2, **a1);
  return 1;
}

BOOL sub_20C778FFC(__int128 ***a1, uint64_t *a2)
{
  return sub_20C77900C(*a2, **a1);
}

BOOL sub_20C77900C(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB1F240 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C285168(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C779088()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549E30;
  return result;
}

void sub_20C7790B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549E30;
}

_QWORD *sub_20C7790CC@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  return sub_20C779134(a1, a2);
}

uint64_t sub_20C7790EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C779128()
{
  return &unk_24C549E10;
}

_QWORD *sub_20C779134@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  void *v8;
  void *v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 3 * *v4;
  if (v6 >> 61)
    v7 = -1;
  else
    v7 = 24 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (__int128 *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10;
      v11[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)v11 = v12;
      v11 += 3;
      v10 = (__int128 *)((char *)v10 + 24);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C547578;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7791F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C779214()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549EA0;
  return result;
}

void sub_20C77923C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549EA0;
}

uint64_t sub_20C779258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7792A8(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C779260(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549F00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77929C()
{
  return &unk_24C549F00;
}

uint64_t sub_20C7792A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _OWORD v9[8];
  _DWORD v10[4];
  _BYTE v11[48];
  _OWORD v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)v12, a4, 0);
  v9[0] = v12[0];
  v9[1] = v12[1];
  v9[2] = v12[2];
  v9[3] = v12[3];
  v9[4] = v12[4];
  v9[5] = v12[5];
  v9[6] = v12[6];
  v9[7] = v12[7];
  v7 = sub_20C742A20(a5, (uint64_t)v9);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  return v7;
}

void sub_20C779368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a27);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C779390()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549F20;
  return result;
}

void sub_20C7793B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549F20;
}

_QWORD *sub_20C7793D4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C77943C(a1, a2);
}

uint64_t sub_20C7793F4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549F00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C779430()
{
  return &unk_24C549F00;
}

_QWORD *sub_20C77943C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = operator new[](0x80uLL);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 4) != 0)
    v6 = (const void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v6 = *(const void **)a1;
  memmove(v4, v6, 0x80uLL);
  *a2 = 16;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C547578;
  v7[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C7794D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7794F0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C549F90;
  return result;
}

void sub_20C779518(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C549F90;
}

uint64_t sub_20C779534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C779584(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C77953C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549FF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C779578()
{
  return &unk_24C549FF0;
}

uint64_t sub_20C779584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _DWORD v32[4];
  _BYTE v33[48];
  uint64_t *v34;
  std::__shared_weak_count *v35;

  v34 = 0;
  v35 = 0;
  LODWORD(v30[0]) = 0;
  DWORD2(v30[0]) = 0;
  v32[0] = 0;
  v32[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v33, a2, a3, v30, v32);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v34, a4);
  if (v34)
  {
    v8 = (uint64_t *)v34[2];
    v9 = v34[3] - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF5F80C((uint64_t)v30, v11);
    sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v30, v14, v15);
    v16 = (uint64_t *)v34[2];
    v17 = v34[3] - (_QWORD)v16;
    if (v17)
    {
      v18 = v17 >> 3;
      if (v18 <= 1)
        v18 = 1;
      v19 = 1;
      do
      {
        v20 = *v16++;
        v19 *= v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      v19 = 0;
    }
    sub_20C77976C((uint64_t)v32, v31, *v34, v19);
    v27 = v30[0];
    v28 = v30[1];
    v29 = v31;
    if (v31)
    {
      v21 = (unint64_t *)(v31 - 16);
      if (*((_QWORD *)&v28 + 1))
        v21 = (unint64_t *)*((_QWORD *)&v28 + 1);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v13 = sub_20C777584(a5, (uint64_t)&v27);
    sub_20BF5618C((uint64_t)&v27);
    sub_20BF5618C((uint64_t)v30);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v33);
  v23 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v13;
}

void sub_20C77971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

__n128 sub_20C77976C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a4)
  {
    v4 = (_OWORD *)(a2 + 64);
    do
    {
      result = *(__n128 *)a3;
      v6 = *(_OWORD *)(a3 + 16);
      v7 = *(_OWORD *)(a3 + 32);
      v8 = *(_OWORD *)(a3 + 48);
      v9 = *(_OWORD *)(a3 + 64);
      v10 = *(_OWORD *)(a3 + 80);
      v11 = *(_OWORD *)(a3 + 96);
      v12 = *(_OWORD *)(a3 + 112);
      *(v4 - 4) = *(_OWORD *)a3;
      *(v4 - 3) = v6;
      *(v4 - 2) = v7;
      *(v4 - 1) = v8;
      *v4 = v9;
      v4[1] = v10;
      a3 += 128;
      v4[2] = v11;
      v4[3] = v12;
      v4 += 8;
      --a4;
    }
    while (a4);
  }
  return result;
}

_QWORD *sub_20C7797B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C54A010;
  return result;
}

void sub_20C7797D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C54A010;
}

_QWORD *sub_20C7797F4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C77985C(a1, a2);
}

uint64_t sub_20C779814(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C549FF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C779850()
{
  return &unk_24C549FF0;
}

_QWORD *sub_20C77985C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 16 * *v4;
  if ((((unint64_t)*v4 >> 57) & 7) != 0)
    v7 = -1;
  else
    v7 = *v4 << 7;
  v8 = (char *)operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (char *)v4[4];
    v11 = v8;
    do
    {
      memmove(v11, v10, 0x80uLL);
      v11 += 128;
      v10 += 128;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v12 = operator new(0x10uLL);
  *v12 = &unk_24C547578;
  v12[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C779924(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C779940()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C54A080;
  return result;
}

void sub_20C779968(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C54A080;
}

uint64_t sub_20C779984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C7799D4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C77998C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A0E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7799C8()
{
  return &unk_24C54A0E0;
}

uint64_t sub_20C7799D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[48];
  float v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  v7 = sub_20C75BCA8(a5, v11[0], v11[1]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_20C779A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C779A94()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C54A100;
  return result;
}

void sub_20C779ABC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C54A100;
}

_QWORD *sub_20C779AD8@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20C779B40(a1, a2);
}

uint64_t sub_20C779AF8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A0E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C779B34()
{
  return &unk_24C54A0E0;
}

_QWORD *sub_20C779B40@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v4 = operator new[](8uLL);
  v5 = a1[1];
  if ((v5 & 4) != 0)
    a1 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  *v4 = *a1;
  *a2 = 2;
  v6 = operator new(0x10uLL);
  *v6 = &unk_24C5472D8;
  v6[1] = v4;
  result = sub_20C76527C(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C779BCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C779BEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C54A170;
  return result;
}

void sub_20C779C14(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C54A170;
}

uint64_t sub_20C779C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_20C779C80(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20C779C38(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A1E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C779C74()
{
  return &unk_24C54A1E8;
}

uint64_t sub_20C779C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  _OWORD v36[2];
  _QWORD *v37;
  _DWORD v38[4];
  _BYTE v39[48];
  uint64_t v40;
  std::__shared_weak_count *v41;

  v40 = 0;
  v41 = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  v38[0] = 0;
  v38[2] = 0;
  v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v39, a2, a3, v36, v38);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v40, a4);
  if (v40)
  {
    v8 = *(uint64_t **)(v40 + 16);
    v9 = *(_QWORD *)(v40 + 24) - (_QWORD)v8;
    if (v9)
    {
      v10 = v9 >> 3;
      if (v10 <= 1)
        v10 = 1;
      v11 = 1;
      do
      {
        v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    sub_20BF585AC((uint64_t)v36, v11);
    sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v14, v15);
    v16 = v37;
    v17 = *(uint64_t **)(v40 + 16);
    v18 = *(_QWORD *)(v40 + 24) - (_QWORD)v17;
    if (v18)
    {
      v19 = *(uint64_t **)v40;
      v20 = v18 >> 3;
      if (v20 <= 1)
        v20 = 1;
      v21 = 1;
      do
      {
        v22 = v21;
        v24 = *v17++;
        v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        v25 = v22 * v23;
        do
        {
          v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v37;
      }
    }
    v33 = v36[0];
    v34 = v36[1];
    v35 = v16;
    if (v16)
    {
      v27 = v16 - 2;
      if (*((_QWORD *)&v34 + 1))
        v27 = (unint64_t *)*((_QWORD *)&v34 + 1);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v13 = sub_20C779E74(a5, (uint64_t)&v33);
    sub_20BF5618C((uint64_t)&v33);
    sub_20BF5618C((uint64_t)v36);
  }
  else
  {
    v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v39);
  v29 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_20C779E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20C779E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
    sub_20BF1C1FC();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C54A1D0[v2])(&v5, a1);
}

uint64_t sub_20C779EC4()
{
  return 1;
}

uint64_t sub_20C779ECC(uint64_t **a1, _QWORD **a2)
{
  sub_20BF58AE4(*a2, **a1);
  return 1;
}

BOOL sub_20C779EF0(__int128 ***a1, uint64_t *a2)
{
  return sub_20C779F00(*a2, **a1);
}

BOOL sub_20C779F00(uint64_t a1, __int128 *a2)
{
  int v4;

  v4 = strcmp((const char *)(0x800000020CB1EE3ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
    *(_BYTE *)(a1 + 25) = 1;
  else
    sub_20C283E98(*(_QWORD *)(a1 + 8), a2);
  return v4 == 0;
}

_QWORD *sub_20C779F7C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C54A208;
  return result;
}

void sub_20C779FA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C54A208;
}

_QWORD *sub_20C779FC0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_20C77A028(a1, a2);
}

uint64_t sub_20C779FE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A1E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C77A01C()
{
  return &unk_24C54A1E8;
}

_QWORD *sub_20C77A028@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    v4 = *(uint64_t **)a1;
  v5 = *v4;
  v6 = 2 * *v4;
  if ((((unint64_t)*v4 >> 61) & 3) != 0)
    v7 = -1;
  else
    v7 = 8 * *v4;
  v8 = operator new[](v7);
  v9 = v8;
  if (v5)
  {
    v10 = (uint64_t *)v4[4];
    v11 = v8;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  v13 = operator new(0x10uLL);
  *v13 = &unk_24C5472D8;
  v13[1] = v9;
  result = sub_20C76527C(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C77A0E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_20C77A0F4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::UsdAbc_AlembicDataWriter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *this)
{
  char *v2;

  v2 = (char *)operator new(0x88uLL);
  *(_OWORD *)v2 = xmmword_20CAF9730;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 2) = v2 + 24;
  *((_QWORD *)v2 + 4) = 0;
  *((_DWORD *)v2 + 10) = 2;
  sub_20BDDC0E4((_QWORD *)v2 + 6, "");
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 14) = v2 + 120;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_20C77A1C8(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  sub_20BF2B200(v2, v1[3]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::~UsdAbc_AlembicDataWriter(void **this)
{
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Close((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  v2 = (uint64_t)*this;
  *this = 0;
  if (v2)
    sub_20C7A0058((uint64_t)this, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Close(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *this)
{
  uint64_t v1;
  int v3;
  _QWORD v4[5];

  v1 = *(_QWORD *)this;
  v3 = 2;
  sub_20BDDC0E4(v4, "");
  v4[3] = 0;
  v4[4] = 0;
  sub_20C77A4E0(v1, (uint64_t)&v3);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)&v3);
  return 1;
}

void sub_20C77A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Open(uint64_t a1, std::string *__str, uint64_t a3)
{
  std::string::size_type size;
  uint64_t v7;
  uint64_t v8;
  std::string *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;
  void *__p[2];
  char v16;
  char v17;
  _QWORD v18[4];
  char v19;
  std::string v20;

  if (*(char *)(a1 + 31) < 0)
  {
    **(_BYTE **)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 31) = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(__str, &v20);
  size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v20.__r_.__value_.__l.__size_;
  if (!size
    || (pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)&v20, 0) & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::TfMakeDirs((uint64_t)&v20, 0xFFFFFFFFLL, 0) & 1) != 0)
  {
    v7 = *(_QWORD *)a1;
    Alembic::AbcCoreOgawa::v12::WriteArchive::WriteArchive((Alembic::AbcCoreOgawa::v12::WriteArchive *)&v17);
    sub_20BDDC0E4(__p, "UsdAbc_AlembicData");
    LODWORD(v13) = 0;
    v14 = 0;
    LODWORD(v11) = 0;
    v12 = 0;
    sub_20C7A00CC((__int128 *)__str, (uint64_t)__p, a3, &v13, &v11, (uint64_t)v18, 0.0);
    sub_20C77A4E0(v7, (uint64_t)v18);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v18);
    if (v16 < 0)
      operator delete(__p[0]);
    v8 = 1;
  }
  else
  {
    v18[0] = "usdAbc/alembicWriter.cpp";
    v18[1] = "Open";
    v18[2] = 3738;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Open(const std::string &, const std::string &)";
    v19 = 0;
    v10 = &v20;
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not create directory '%s'", (const char *)v10);
    v8 = 0;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v8;
}

void sub_20C77A42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(exception_object);
}

void sub_20C77A4E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)a1;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 8));
  sub_20BDE881C(v3 + 9, (uint64_t *)(a2 + 32));
  v4 = (_QWORD *)v3[15];
  v3 += 15;
  sub_20C77B0F4((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Write(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  unsigned __int8 v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  uint64_t *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*((char *)*a1 + 71) < 0)
  {
    if (v4[7])
      return 1;
  }
  else if (*((_BYTE *)*a1 + 71))
  {
    return 1;
  }
  if (v4[9])
  {
    v5 = sub_20C0E9774(a2);
    if (v6 & 1 | (unint64_t)v5)
    {
      v7 = atomic_load((unsigned __int8 *)&qword_25498CC20);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25498CC20))
      {
        sub_20C77B140();
        __cxa_atexit((void (*)(void *))sub_20C77DD00, &unk_25498CBF0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CC20);
      }
      (*a1)[11] = (uint64_t)&unk_25498CBF0;
      v8 = *a1;
      sub_20BF2D298((uint64_t)(*a1 + 12), (uint64_t)a2);
      v21 = 0;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0A6678(a2);
      v10 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
      v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v11)
        v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 112))(v9, v10, (uint64_t)v11 + 440, &v20)&& sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
      {
        if ((v21 & 4) != 0)
          v12 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
        else
          v12 = &v20;
        *v8 = *v12;
      }
      sub_20BF4C2D8((uint64_t)&v20);
      v13 = *a1;
      v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C77AF64(&v20);
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14);
      sub_20C77A7FC(v13, &v20, v15);
      v16 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  return 1;
}

void sub_20C77A728(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v5;
  std::string *v6;
  const std::string::value_type *v7;

  __cxa_guard_abort(&qword_25498CC20);
  if (a2 == 1)
  {
    v5 = __cxa_begin_catch(a1);
    v6 = (std::string *)(v2 + 8);
    v7 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 16))(v5);
    std::string::append(v6, v7);
    std::string::append(v6, "\n");
    __cxa_end_catch();
    JUMPOUT(0x20C77A694);
  }
  _Unwind_Resume(a1);
}

void sub_20C77A7FC(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__::TfToken *v21;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned __int8 v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v47;
  uint64_t v48;
  const pxrInternal__aapl__pxrReserved__::TfToken *v49;
  const pxrInternal__aapl__pxrReserved__::TfToken *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  int v62;
  int v63;
  void *__p;
  char v65;
  _QWORD *v66[3];
  uint64_t v67;
  void **v68[3];

  v68[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C77AF64(&v55);
  if (*(_QWORD *)a3 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v7)
      v7 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    v8 = *((_QWORD *)v7 + 7);
    v54 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v54 = (uint64_t)v9;
    }
  }
  else
  {
    if (a1[13])
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 13) + 14))
        v11 = a1[12];
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v12)
      v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v11 + 136))(&v59, v11, a3, (uint64_t)v12 + 448);
    if ((sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v59) & 1) != 0)
    {
      if ((v60 & 4) != 0)
        v13 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
      else
        v13 = &v59;
      v14 = *v13;
      v54 = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          v54 = (uint64_t)v15;
      }
      v17 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if (!v17)
        v17 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if ((v54 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, v68);
        v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v18)
          v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v68, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1032), &v57);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v68 + 1);
        sub_20BFD265C(v68);
        if (a1[13])
        {
          if (*(_BYTE *)(sub_20BEB47BC(a1 + 13) + 14))
            v19 = a1[12];
          else
            v19 = 0;
        }
        else
        {
          v19 = 0;
        }
        v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v20)
          v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        (*(void (**)(void ***__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v19 + 136))(v68, v19, &v57, (uint64_t)v20 + 88);
        sub_20BF4B5D8(&v59, v68);
        sub_20BF4C2D8((uint64_t)v68);
        if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
        {
          v21 = (v60 & 4) != 0
              ? (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(uint64_t *))((v60 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(&v59)
              : (pxrInternal__aapl__pxrReserved__::TfToken *)&v59;
          if (pxrInternal__aapl__pxrReserved__::TfToken::operator==(v21, "none"))
          {
            v22 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
            if (!v22)
              v22 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
            sub_20BF32220(&v54, (_QWORD *)v22 + 6);
          }
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
        sub_20BFD265C(&v57);
      }
    }
    else
    {
      v54 = 0;
    }
    sub_20BF4C2D8((uint64_t)&v59);
  }
  sub_20C79F9A4(&v59, (uint64_t)a1, a2, a3);
  v23 = a1[11];
  v24 = sub_20C0D8030(v23 + 24, &v54);
  v25 = v24;
  if ((_QWORD *)(v23 + 32) == v24)
  {
    v68[0] = 0;
    v27 = sub_20C0D8030(v23 + 24, (uint64_t *)v68);
    if (((uint64_t)v68[0] & 7) != 0)
    {
      v28 = (unsigned int *)((unint64_t)v68[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if (v25 == v27)
    {
      v30 = atomic_load((unsigned __int8 *)&qword_25498CCD0);
      if ((v30 & 1) != 0)
      {
        v26 = &qword_25498CCB8;
      }
      else
      {
        v26 = &qword_25498CCB8;
        if (__cxa_guard_acquire(&qword_25498CCD0))
        {
          qword_25498CCB8 = 0;
          unk_25498CCC0 = 0;
          qword_25498CCC8 = 0;
          __cxa_atexit((void (*)(void *))sub_20C78AF10, &qword_25498CCB8, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498CCD0);
        }
      }
    }
    else
    {
      v26 = v27 + 5;
    }
  }
  else
  {
    v26 = v24 + 5;
  }
  v32 = *v26;
  for (i = v26[1]; v32 != i; v32 += 32)
  {
    v68[0] = (void **)&v59;
    v33 = *(_QWORD *)(v32 + 24);
    if (!v33)
      sub_20BE9E974();
    (*(void (**)(uint64_t, void ***))(*(_QWORD *)v33 + 48))(v33, v68);
  }
  v35 = v60;
  v34 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v38 = v56;
  v55 = v35;
  v56 = v34;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v68[0] = (void **)&v67;
  sub_20BEEB2B8(v68);
  sub_20BE6100C((uint64_t)v66, v66[1]);
  if (v65 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
  sub_20BFD265C(&v62);
  v41 = v61;
  if (v61)
  {
    v42 = (unint64_t *)&v61->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if ((v54 & 7) != 0)
  {
    v44 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if (a1[13])
  {
    if (*(_BYTE *)(sub_20BEB47BC(a1 + 13) + 14))
      v46 = a1[12];
    else
      v46 = 0;
  }
  else
  {
    v46 = 0;
  }
  v47 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v47)
    v47 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v46 + 136))(&v59, v46, a3, (uint64_t)v47 + 32);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    v48 = (v60 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59) : v59;
    v49 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v48;
    v50 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v48 + 8);
    if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v48 != v50)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, v49, v68);
        sub_20C77A7FC(a1, &v55, v68);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v68 + 1);
        sub_20BFD265C(v68);
        v49 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v49 + 8);
      }
      while (v49 != v50);
    }
  }
  sub_20BF4C2D8((uint64_t)&v59);
  v51 = v56;
  if (v56)
  {
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_20C77AE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  sub_20BF4C2D8((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C77AF64(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v2 = operator new(0x18uLL);
  v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  LODWORD(v3->~__shared_weak_count_0) = 2;
  sub_20BDDC0E4(&v3->__on_zero_shared, "");
  v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C518EC0;
  v3[1].~__shared_weak_count = 0;
  v3[1].~__shared_weak_count_0 = 0;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C54A2E8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  *v2 = off_24C54A360;
  v2[1] = v3;
  v2[2] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  sub_20C78C08C(a1, (uint64_t)v2);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20C77B058(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    sub_20C96BEFC(v1);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::GetErrors@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[31] < 0)
    return (char *)sub_20BDDBFAC((_BYTE *)a2, *((void **)this + 1), *((_QWORD *)this + 2));
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
  return this;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::SetFlag(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  uint64_t **v3;

  v3 = (uint64_t **)(*(_QWORD *)this + 16);
  if (a3)
    return sub_20C129930((uint64_t)v3, a2, (uint64_t *)a2);
  else
    return (uint64_t *)sub_20C75E3C0(v3, a2);
}

void sub_20C77B0F4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C77B0F4(a1, *a2);
    sub_20C77B0F4(a1, a2[1]);
    sub_20BE6100C((uint64_t)(a2 + 4), (_QWORD *)a2[5]);
    operator delete(a2);
  }
}

uint64_t (***sub_20C77B140())()
{
  _QWORD *v0;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v1;
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  char ***v11;
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t (***v21)();
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  char ***v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t (***v37)();
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  char ***v41;
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;
  char ***v49;
  uint64_t v50;
  uint64_t (***v51)();
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t (***v59)();
  uint64_t v60;
  uint64_t (***v61)();
  uint64_t v62;
  char ***v63;
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t (***v69)();
  uint64_t v70;
  char ***v71;
  uint64_t v72;
  uint64_t (***v73)();
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t (***v81)();
  uint64_t v82;
  uint64_t (***v83)();
  uint64_t v84;
  char ***v85;
  uint64_t v86;
  uint64_t (***v87)();
  uint64_t v88;
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t (***v91)();
  uint64_t v92;
  char ***v93;
  uint64_t v94;
  uint64_t (***v95)();
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v99;
  unint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t (***v103)();
  uint64_t v104;
  uint64_t (***v105)();
  uint64_t v106;
  char ***v107;
  uint64_t v108;
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t (***v111)();
  uint64_t v112;
  uint64_t (***v113)();
  uint64_t v114;
  char ***v115;
  uint64_t v116;
  uint64_t (***v117)();
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v121;
  unint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t (***v125)();
  uint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;
  char ***v129;
  uint64_t v130;
  uint64_t (***v131)();
  uint64_t v132;
  uint64_t (***v133)();
  uint64_t v134;
  uint64_t (***v135)();
  uint64_t v136;
  char ***v137;
  uint64_t v138;
  uint64_t (***v139)();
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v143;
  unint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  uint64_t (***v147)();
  uint64_t v148;
  uint64_t (***v149)();
  uint64_t v150;
  char ***v151;
  uint64_t v152;
  uint64_t (***v153)();
  uint64_t v154;
  uint64_t (***v155)();
  uint64_t v156;
  uint64_t (***v157)();
  uint64_t v158;
  char ***v159;
  uint64_t v160;
  uint64_t (***v161)();
  uint64_t v162;
  unsigned int *v163;
  unsigned int v164;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v165;
  unint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  uint64_t (***v169)();
  uint64_t v170;
  uint64_t (***v171)();
  uint64_t v172;
  uint64_t (***v173)();
  uint64_t v174;
  char ***v175;
  uint64_t v176;
  uint64_t (***v177)();
  uint64_t v178;
  unsigned int *v179;
  unsigned int v180;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v181;
  unint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t (***v185)();
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *v189;
  unint64_t v190;
  unsigned int *v191;
  unsigned int v192;
  uint64_t (***v193)();
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t (***v197)();
  uint64_t v198;
  char ***v199;
  uint64_t v200;
  uint64_t (***v201)();
  uint64_t v202;
  uint64_t (***v203)();
  uint64_t v204;
  uint64_t (***v205)();
  uint64_t v206;
  char ***v207;
  uint64_t v208;
  uint64_t (***result)();
  uint64_t v210;
  char **v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char **v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t (**v222)();
  void (*v223)(uint64_t);
  uint64_t *v224;
  uint64_t (**v225)();
  void *v226;
  uint64_t (***v227)();
  char **v228;
  _QWORD *(*v229)(uint64_t);
  char ***v230;
  uint64_t (**v231)();
  void *v232;
  uint64_t (***v233)();
  uint64_t (**v234)();
  void *v235;
  uint64_t (***v236)();
  uint64_t (**v237)();
  void *v238;
  uint64_t (***v239)();
  char **v240;
  uint64_t (*v241)();
  char ***v242;
  uint64_t (**v243)();
  void *v244;
  uint64_t (***v245)();
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v0 = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions::UsdAbc_AlembicConversions((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *)&unk_25498CBF0);
  v0[4] = 0;
  v0[5] = 0;
  v0[3] = v0 + 4;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v1)
    v1 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v2 = *((_QWORD *)v1 + 8);
  v221 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
    {
      v221 = v2 & 0xFFFFFFFFFFFFFFF8;
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v228 = (char **)sub_20C77DD3C((uint64_t *)&v221);
  v243 = &off_24C54A420;
  v244 = sub_20C77E0DC;
  v245 = &v243;
  sub_20C77DEC0(&v228, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C77E4AC;
  v242 = &v240;
  sub_20C77DEC0(&v228, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C77E8E0;
  v239 = &v237;
  sub_20C77DEC0(&v228, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C77E9FC;
  v236 = &v234;
  sub_20C77DEC0(&v228, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77EB18;
  v233 = &v231;
  sub_20C77DEC0(&v228, &v231);
  v5 = v233;
  if (v233 == &v231)
  {
    v6 = 4;
    v5 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_13;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_13:
  v7 = v236;
  if (v236 == &v234)
  {
    v8 = 4;
    v7 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_18;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_18:
  v9 = v239;
  if (v239 == &v237)
  {
    v10 = 4;
    v9 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_23;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_23:
  v11 = v242;
  if (v242 == &v240)
  {
    v12 = 4;
    v11 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_28;
    v12 = 5;
  }
  ((void (*)(void))(*v11)[v12])();
LABEL_28:
  v13 = v245;
  if (v245 == &v243)
  {
    v14 = 4;
    v13 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_33;
    v14 = 5;
  }
  (*v13)[v14]();
LABEL_33:
  if ((v2 & 7) != 0)
  {
    v15 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v17)
    v17 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v18 = *((_QWORD *)v17 + 9);
  v220 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
    {
      v220 = v18 & 0xFFFFFFFFFFFFFFF8;
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v228 = (char **)sub_20C77DD3C((uint64_t *)&v220);
  v243 = &off_24C54A420;
  v244 = sub_20C77EC44;
  v245 = &v243;
  sub_20C77DEC0(&v228, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C77E4AC;
  v242 = &v240;
  sub_20C77DEC0(&v228, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C77E8E0;
  v239 = &v237;
  sub_20C77DEC0(&v228, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C77E9FC;
  v236 = &v234;
  sub_20C77DEC0(&v228, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77EB18;
  v233 = &v231;
  sub_20C77DEC0(&v228, &v231);
  v21 = v233;
  if (v233 == &v231)
  {
    v22 = 4;
    v21 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_48;
    v22 = 5;
  }
  (*v21)[v22]();
LABEL_48:
  v23 = v236;
  if (v236 == &v234)
  {
    v24 = 4;
    v23 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_53;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_53:
  v25 = v239;
  if (v239 == &v237)
  {
    v26 = 4;
    v25 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_58;
    v26 = 5;
  }
  (*v25)[v26]();
LABEL_58:
  v27 = v242;
  if (v242 == &v240)
  {
    v28 = 4;
    v27 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_63;
    v28 = 5;
  }
  ((void (*)(void))(*v27)[v28])();
LABEL_63:
  v29 = v245;
  if (v245 == &v243)
  {
    v30 = 4;
    v29 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_68;
    v30 = 5;
  }
  (*v29)[v30]();
LABEL_68:
  if ((v18 & 7) != 0)
  {
    v31 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  v33 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v33)
    v33 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v34 = *((_QWORD *)v33 + 3);
  v218 = v34;
  if ((v34 & 7) != 0)
  {
    v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 2, v35));
    if ((v36 & 1) == 0)
    {
      v218 = v34 & 0xFFFFFFFFFFFFFFF8;
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v219 = (char **)sub_20C77DD3C((uint64_t *)&v218);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v219, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C77F818;
  v242 = &v240;
  sub_20C77DEC0(&v219, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C781EC8;
  v239 = &v237;
  sub_20C77DEC0(&v219, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C78274C;
  v236 = &v234;
  sub_20C77DEC0(&v219, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E4AC;
  v233 = &v231;
  sub_20C77DEC0(&v219, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E8E0;
  v230 = &v228;
  sub_20C77DEC0(&v219, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77E9FC;
  v227 = &v225;
  sub_20C77DEC0(&v219, &v225);
  v222 = &off_24C54A420;
  v223 = sub_20C77EB18;
  v224 = (uint64_t *)&v222;
  sub_20C77DEC0(&v219, &v222);
  v37 = (uint64_t (***)())v224;
  if (v224 == (uint64_t *)&v222)
  {
    v38 = 4;
    v37 = &v222;
  }
  else
  {
    if (!v224)
      goto LABEL_83;
    v38 = 5;
  }
  (*v37)[v38]();
LABEL_83:
  v39 = v227;
  if (v227 == &v225)
  {
    v40 = 4;
    v39 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_88;
    v40 = 5;
  }
  (*v39)[v40]();
LABEL_88:
  v41 = v230;
  if (v230 == &v228)
  {
    v42 = 4;
    v41 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_93;
    v42 = 5;
  }
  ((void (*)(void))(*v41)[v42])();
LABEL_93:
  v43 = v233;
  if (v233 == &v231)
  {
    v44 = 4;
    v43 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_98;
    v44 = 5;
  }
  (*v43)[v44]();
LABEL_98:
  v45 = v236;
  if (v236 == &v234)
  {
    v46 = 4;
    v45 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_103;
    v46 = 5;
  }
  (*v45)[v46]();
LABEL_103:
  v47 = v239;
  if (v239 == &v237)
  {
    v48 = 4;
    v47 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_108;
    v48 = 5;
  }
  (*v47)[v48]();
LABEL_108:
  v49 = v242;
  if (v242 == &v240)
  {
    v50 = 4;
    v49 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_113;
    v50 = 5;
  }
  ((void (*)(void))(*v49)[v50])();
LABEL_113:
  v51 = v245;
  if (v245 == &v243)
  {
    v52 = 4;
    v51 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_118;
    v52 = 5;
  }
  (*v51)[v52]();
LABEL_118:
  if ((v34 & 7) != 0)
  {
    v53 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  v55 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v55)
    v55 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v56 = *((_QWORD *)v55 + 6);
  v217 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
    {
      v217 = v56 & 0xFFFFFFFFFFFFFFF8;
      v56 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v219 = (char **)sub_20C77DD3C((uint64_t *)&v217);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v219, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C78284C;
  v242 = &v240;
  sub_20C77DEC0(&v219, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C781EC8;
  v239 = &v237;
  sub_20C77DEC0(&v219, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C78274C;
  v236 = &v234;
  sub_20C77DEC0(&v219, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E4AC;
  v233 = &v231;
  sub_20C77DEC0(&v219, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E8E0;
  v230 = &v228;
  sub_20C77DEC0(&v219, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77E9FC;
  v227 = &v225;
  sub_20C77DEC0(&v219, &v225);
  v222 = &off_24C54A420;
  v223 = sub_20C77EB18;
  v224 = (uint64_t *)&v222;
  sub_20C77DEC0(&v219, &v222);
  v59 = (uint64_t (***)())v224;
  if (v224 == (uint64_t *)&v222)
  {
    v60 = 4;
    v59 = &v222;
  }
  else
  {
    if (!v224)
      goto LABEL_133;
    v60 = 5;
  }
  (*v59)[v60]();
LABEL_133:
  v61 = v227;
  if (v227 == &v225)
  {
    v62 = 4;
    v61 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_138;
    v62 = 5;
  }
  (*v61)[v62]();
LABEL_138:
  v63 = v230;
  if (v230 == &v228)
  {
    v64 = 4;
    v63 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_143;
    v64 = 5;
  }
  ((void (*)(void))(*v63)[v64])();
LABEL_143:
  v65 = v233;
  if (v233 == &v231)
  {
    v66 = 4;
    v65 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_148;
    v66 = 5;
  }
  (*v65)[v66]();
LABEL_148:
  v67 = v236;
  if (v236 == &v234)
  {
    v68 = 4;
    v67 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_153;
    v68 = 5;
  }
  (*v67)[v68]();
LABEL_153:
  v69 = v239;
  if (v239 == &v237)
  {
    v70 = 4;
    v69 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_158;
    v70 = 5;
  }
  (*v69)[v70]();
LABEL_158:
  v71 = v242;
  if (v242 == &v240)
  {
    v72 = 4;
    v71 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_163;
    v72 = 5;
  }
  ((void (*)(void))(*v71)[v72])();
LABEL_163:
  v73 = v245;
  if (v245 == &v243)
  {
    v74 = 4;
    v73 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_168;
    v74 = 5;
  }
  (*v73)[v74]();
LABEL_168:
  if ((v56 & 7) != 0)
  {
    v75 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v77)
    v77 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v78 = *((_QWORD *)v77 + 4);
  v216 = v78;
  if ((v78 & 7) != 0)
  {
    v79 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 2, v79));
    if ((v80 & 1) == 0)
    {
      v216 = v78 & 0xFFFFFFFFFFFFFFF8;
      v78 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v219 = (char **)sub_20C77DD3C((uint64_t *)&v216);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v219, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C7844D8;
  v242 = &v240;
  sub_20C77DEC0(&v219, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C781EC8;
  v239 = &v237;
  sub_20C77DEC0(&v219, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C78274C;
  v236 = &v234;
  sub_20C77DEC0(&v219, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E4AC;
  v233 = &v231;
  sub_20C77DEC0(&v219, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E8E0;
  v230 = &v228;
  sub_20C77DEC0(&v219, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77E9FC;
  v227 = &v225;
  sub_20C77DEC0(&v219, &v225);
  v222 = &off_24C54A420;
  v223 = sub_20C77EB18;
  v224 = (uint64_t *)&v222;
  sub_20C77DEC0(&v219, &v222);
  v81 = (uint64_t (***)())v224;
  if (v224 == (uint64_t *)&v222)
  {
    v82 = 4;
    v81 = &v222;
  }
  else
  {
    if (!v224)
      goto LABEL_183;
    v82 = 5;
  }
  (*v81)[v82]();
LABEL_183:
  v83 = v227;
  if (v227 == &v225)
  {
    v84 = 4;
    v83 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_188;
    v84 = 5;
  }
  (*v83)[v84]();
LABEL_188:
  v85 = v230;
  if (v230 == &v228)
  {
    v86 = 4;
    v85 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_193;
    v86 = 5;
  }
  ((void (*)(void))(*v85)[v86])();
LABEL_193:
  v87 = v233;
  if (v233 == &v231)
  {
    v88 = 4;
    v87 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_198;
    v88 = 5;
  }
  (*v87)[v88]();
LABEL_198:
  v89 = v236;
  if (v236 == &v234)
  {
    v90 = 4;
    v89 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_203;
    v90 = 5;
  }
  (*v89)[v90]();
LABEL_203:
  v91 = v239;
  if (v239 == &v237)
  {
    v92 = 4;
    v91 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_208;
    v92 = 5;
  }
  (*v91)[v92]();
LABEL_208:
  v93 = v242;
  if (v242 == &v240)
  {
    v94 = 4;
    v93 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_213;
    v94 = 5;
  }
  ((void (*)(void))(*v93)[v94])();
LABEL_213:
  v95 = v245;
  if (v245 == &v243)
  {
    v96 = 4;
    v95 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_218;
    v96 = 5;
  }
  (*v95)[v96]();
LABEL_218:
  if ((v78 & 7) != 0)
  {
    v97 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
    do
      v98 = __ldxr(v97);
    while (__stlxr(v98 - 2, v97));
  }
  v99 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v99)
    v99 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v100 = *(_QWORD *)v99;
  v215 = v100;
  if ((v100 & 7) != 0)
  {
    v101 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 2, v101));
    if ((v102 & 1) == 0)
    {
      v215 = v100 & 0xFFFFFFFFFFFFFFF8;
      v100 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v219 = (char **)sub_20C77DD3C((uint64_t *)&v215);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v219, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C7856E8;
  v242 = &v240;
  sub_20C77DEC0(&v219, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C781EC8;
  v239 = &v237;
  sub_20C77DEC0(&v219, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C78274C;
  v236 = &v234;
  sub_20C77DEC0(&v219, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E4AC;
  v233 = &v231;
  sub_20C77DEC0(&v219, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E8E0;
  v230 = &v228;
  sub_20C77DEC0(&v219, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77E9FC;
  v227 = &v225;
  sub_20C77DEC0(&v219, &v225);
  v222 = &off_24C54A420;
  v223 = sub_20C77EB18;
  v224 = (uint64_t *)&v222;
  sub_20C77DEC0(&v219, &v222);
  v103 = (uint64_t (***)())v224;
  if (v224 == (uint64_t *)&v222)
  {
    v104 = 4;
    v103 = &v222;
  }
  else
  {
    if (!v224)
      goto LABEL_233;
    v104 = 5;
  }
  (*v103)[v104]();
LABEL_233:
  v105 = v227;
  if (v227 == &v225)
  {
    v106 = 4;
    v105 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_238;
    v106 = 5;
  }
  (*v105)[v106]();
LABEL_238:
  v107 = v230;
  if (v230 == &v228)
  {
    v108 = 4;
    v107 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_243;
    v108 = 5;
  }
  ((void (*)(void))(*v107)[v108])();
LABEL_243:
  v109 = v233;
  if (v233 == &v231)
  {
    v110 = 4;
    v109 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_248;
    v110 = 5;
  }
  (*v109)[v110]();
LABEL_248:
  v111 = v236;
  if (v236 == &v234)
  {
    v112 = 4;
    v111 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_253;
    v112 = 5;
  }
  (*v111)[v112]();
LABEL_253:
  v113 = v239;
  if (v239 == &v237)
  {
    v114 = 4;
    v113 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_258;
    v114 = 5;
  }
  (*v113)[v114]();
LABEL_258:
  v115 = v242;
  if (v242 == &v240)
  {
    v116 = 4;
    v115 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_263;
    v116 = 5;
  }
  ((void (*)(void))(*v115)[v116])();
LABEL_263:
  v117 = v245;
  if (v245 == &v243)
  {
    v118 = 4;
    v117 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_268;
    v118 = 5;
  }
  (*v117)[v118]();
LABEL_268:
  if ((v100 & 7) != 0)
  {
    v119 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
    do
      v120 = __ldxr(v119);
    while (__stlxr(v120 - 2, v119));
  }
  v121 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v121)
    v121 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v122 = *((_QWORD *)v121 + 2);
  v214 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
    {
      v214 = v122 & 0xFFFFFFFFFFFFFFF8;
      v122 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v219 = (char **)sub_20C77DD3C((uint64_t *)&v214);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v219, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C7869A8;
  v242 = &v240;
  sub_20C77DEC0(&v219, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C781EC8;
  v239 = &v237;
  sub_20C77DEC0(&v219, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C78274C;
  v236 = &v234;
  sub_20C77DEC0(&v219, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E4AC;
  v233 = &v231;
  sub_20C77DEC0(&v219, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E8E0;
  v230 = &v228;
  sub_20C77DEC0(&v219, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77E9FC;
  v227 = &v225;
  sub_20C77DEC0(&v219, &v225);
  v222 = &off_24C54A420;
  v223 = sub_20C77EB18;
  v224 = (uint64_t *)&v222;
  sub_20C77DEC0(&v219, &v222);
  v125 = (uint64_t (***)())v224;
  if (v224 == (uint64_t *)&v222)
  {
    v126 = 4;
    v125 = &v222;
  }
  else
  {
    if (!v224)
      goto LABEL_283;
    v126 = 5;
  }
  (*v125)[v126]();
LABEL_283:
  v127 = v227;
  if (v227 == &v225)
  {
    v128 = 4;
    v127 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_288;
    v128 = 5;
  }
  (*v127)[v128]();
LABEL_288:
  v129 = v230;
  if (v230 == &v228)
  {
    v130 = 4;
    v129 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_293;
    v130 = 5;
  }
  ((void (*)(void))(*v129)[v130])();
LABEL_293:
  v131 = v233;
  if (v233 == &v231)
  {
    v132 = 4;
    v131 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_298;
    v132 = 5;
  }
  (*v131)[v132]();
LABEL_298:
  v133 = v236;
  if (v236 == &v234)
  {
    v134 = 4;
    v133 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_303;
    v134 = 5;
  }
  (*v133)[v134]();
LABEL_303:
  v135 = v239;
  if (v239 == &v237)
  {
    v136 = 4;
    v135 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_308;
    v136 = 5;
  }
  (*v135)[v136]();
LABEL_308:
  v137 = v242;
  if (v242 == &v240)
  {
    v138 = 4;
    v137 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_313;
    v138 = 5;
  }
  ((void (*)(void))(*v137)[v138])();
LABEL_313:
  v139 = v245;
  if (v245 == &v243)
  {
    v140 = 4;
    v139 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_318;
    v140 = 5;
  }
  (*v139)[v140]();
LABEL_318:
  if ((v122 & 7) != 0)
  {
    v141 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v143)
    v143 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v144 = *((_QWORD *)v143 + 5);
  v213 = v144;
  if ((v144 & 7) != 0)
  {
    v145 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 2, v145));
    if ((v146 & 1) == 0)
    {
      v213 = v144 & 0xFFFFFFFFFFFFFFF8;
      v144 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v219 = (char **)sub_20C77DD3C((uint64_t *)&v213);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v219, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C787A70;
  v242 = &v240;
  sub_20C77DEC0(&v219, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C781EC8;
  v239 = &v237;
  sub_20C77DEC0(&v219, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C78274C;
  v236 = &v234;
  sub_20C77DEC0(&v219, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E4AC;
  v233 = &v231;
  sub_20C77DEC0(&v219, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E8E0;
  v230 = &v228;
  sub_20C77DEC0(&v219, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77E9FC;
  v227 = &v225;
  sub_20C77DEC0(&v219, &v225);
  v222 = &off_24C54A420;
  v223 = sub_20C77EB18;
  v224 = (uint64_t *)&v222;
  sub_20C77DEC0(&v219, &v222);
  v147 = (uint64_t (***)())v224;
  if (v224 == (uint64_t *)&v222)
  {
    v148 = 4;
    v147 = &v222;
  }
  else
  {
    if (!v224)
      goto LABEL_333;
    v148 = 5;
  }
  (*v147)[v148]();
LABEL_333:
  v149 = v227;
  if (v227 == &v225)
  {
    v150 = 4;
    v149 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_338;
    v150 = 5;
  }
  (*v149)[v150]();
LABEL_338:
  v151 = v230;
  if (v230 == &v228)
  {
    v152 = 4;
    v151 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_343;
    v152 = 5;
  }
  ((void (*)(void))(*v151)[v152])();
LABEL_343:
  v153 = v233;
  if (v233 == &v231)
  {
    v154 = 4;
    v153 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_348;
    v154 = 5;
  }
  (*v153)[v154]();
LABEL_348:
  v155 = v236;
  if (v236 == &v234)
  {
    v156 = 4;
    v155 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_353;
    v156 = 5;
  }
  (*v155)[v156]();
LABEL_353:
  v157 = v239;
  if (v239 == &v237)
  {
    v158 = 4;
    v157 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_358;
    v158 = 5;
  }
  (*v157)[v158]();
LABEL_358:
  v159 = v242;
  if (v242 == &v240)
  {
    v160 = 4;
    v159 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_363;
    v160 = 5;
  }
  ((void (*)(void))(*v159)[v160])();
LABEL_363:
  v161 = v245;
  if (v245 == &v243)
  {
    v162 = 4;
    v161 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_368;
    v162 = 5;
  }
  (*v161)[v162]();
LABEL_368:
  if ((v144 & 7) != 0)
  {
    v163 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
    do
      v164 = __ldxr(v163);
    while (__stlxr(v164 - 2, v163));
  }
  v165 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v165)
    v165 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v166 = *((_QWORD *)v165 + 1);
  v222 = (uint64_t (**)())v166;
  if ((v166 & 7) != 0)
  {
    v167 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 2, v167));
    if ((v168 & 1) == 0)
    {
      v222 = (uint64_t (**)())(v166 & 0xFFFFFFFFFFFFFFF8);
      v166 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v228 = (char **)sub_20C77DD3C((uint64_t *)&v222);
  v243 = &off_24C54A420;
  v244 = sub_20C77F790;
  v245 = &v243;
  sub_20C77DEC0(&v228, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = (uint64_t (*)())sub_20C788EC4;
  v242 = &v240;
  sub_20C77DEC0(&v228, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C77E8E0;
  v239 = &v237;
  sub_20C77DEC0(&v228, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C77E9FC;
  v236 = &v234;
  sub_20C77DEC0(&v228, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77EB18;
  v233 = &v231;
  sub_20C77DEC0(&v228, &v231);
  v169 = v233;
  if (v233 == &v231)
  {
    v170 = 4;
    v169 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_383;
    v170 = 5;
  }
  (*v169)[v170]();
LABEL_383:
  v171 = v236;
  if (v236 == &v234)
  {
    v172 = 4;
    v171 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_388;
    v172 = 5;
  }
  (*v171)[v172]();
LABEL_388:
  v173 = v239;
  if (v239 == &v237)
  {
    v174 = 4;
    v173 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_393;
    v174 = 5;
  }
  (*v173)[v174]();
LABEL_393:
  v175 = v242;
  if (v242 == &v240)
  {
    v176 = 4;
    v175 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_398;
    v176 = 5;
  }
  ((void (*)(void))(*v175)[v176])();
LABEL_398:
  v177 = v245;
  if (v245 == &v243)
  {
    v178 = 4;
    v177 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_403;
    v178 = 5;
  }
  (*v177)[v178]();
LABEL_403:
  if ((v166 & 7) != 0)
  {
    v179 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
    do
      v180 = __ldxr(v179);
    while (__stlxr(v180 - 2, v179));
  }
  v181 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v181)
    v181 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v182 = *((_QWORD *)v181 + 10);
  v219 = (char **)v182;
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 2, v183));
    if ((v184 & 1) == 0)
    {
      v219 = (char **)(v182 & 0xFFFFFFFFFFFFFFF8);
      v182 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v240 = (char **)sub_20C77DD3C((uint64_t *)&v219);
  v243 = &off_24C54A420;
  v244 = sub_20C789D2C;
  v245 = &v243;
  sub_20C77DEC0(&v240, &v243);
  v185 = v245;
  if (v245 == &v243)
  {
    v186 = 4;
    v185 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_418;
    v186 = 5;
  }
  (*v185)[v186]();
LABEL_418:
  if ((v182 & 7) != 0)
  {
    v187 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v188 = __ldxr(v187);
    while (__stlxr(v188 - 2, v187));
  }
  v189 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v189)
    v189 = sub_20C739854(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  v190 = *((_QWORD *)v189 + 7);
  v212 = v190;
  if ((v190 & 7) != 0)
  {
    v191 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 2, v191));
    if ((v192 & 1) == 0)
    {
      v212 = v190 & 0xFFFFFFFFFFFFFFF8;
      v190 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v240 = (char **)sub_20C77DD3C((uint64_t *)&v212);
  v243 = &off_24C54A420;
  v244 = sub_20C78A744;
  v245 = &v243;
  sub_20C77DEC0(&v240, &v243);
  v193 = v245;
  if (v245 == &v243)
  {
    v194 = 4;
    v193 = &v243;
  }
  else
  {
    if (!v245)
      goto LABEL_433;
    v194 = 5;
  }
  (*v193)[v194]();
LABEL_433:
  if ((v190 & 7) != 0)
  {
    v195 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stlxr(v196 - 2, v195));
  }
  v240 = 0;
  v211 = (char **)sub_20C77DD3C((uint64_t *)&v240);
  v243 = &off_24C54A420;
  v244 = sub_20C77E0DC;
  v245 = &v243;
  sub_20C77DEC0(&v211, &v243);
  v240 = (char **)&off_24C54A420;
  v241 = nullsub_1444;
  v242 = &v240;
  sub_20C77DEC0(&v211, &v240);
  v237 = &off_24C54A420;
  v238 = sub_20C78274C;
  v239 = &v237;
  sub_20C77DEC0(&v211, &v237);
  v234 = &off_24C54A420;
  v235 = sub_20C77E4AC;
  v236 = &v234;
  sub_20C77DEC0(&v211, &v234);
  v231 = &off_24C54A420;
  v232 = sub_20C77E8E0;
  v233 = &v231;
  sub_20C77DEC0(&v211, &v231);
  v228 = (char **)&off_24C54A420;
  v229 = sub_20C77E9FC;
  v230 = &v228;
  sub_20C77DEC0(&v211, &v228);
  v225 = &off_24C54A420;
  v226 = sub_20C77EB18;
  v227 = &v225;
  sub_20C77DEC0(&v211, &v225);
  v197 = v227;
  if (v227 == &v225)
  {
    v198 = 4;
    v197 = &v225;
  }
  else
  {
    if (!v227)
      goto LABEL_441;
    v198 = 5;
  }
  (*v197)[v198]();
LABEL_441:
  v199 = v230;
  if (v230 == &v228)
  {
    v200 = 4;
    v199 = &v228;
  }
  else
  {
    if (!v230)
      goto LABEL_446;
    v200 = 5;
  }
  ((void (*)(void))(*v199)[v200])();
LABEL_446:
  v201 = v233;
  if (v233 == &v231)
  {
    v202 = 4;
    v201 = &v231;
  }
  else
  {
    if (!v233)
      goto LABEL_451;
    v202 = 5;
  }
  (*v201)[v202]();
LABEL_451:
  v203 = v236;
  if (v236 == &v234)
  {
    v204 = 4;
    v203 = &v234;
  }
  else
  {
    if (!v236)
      goto LABEL_456;
    v204 = 5;
  }
  (*v203)[v204]();
LABEL_456:
  v205 = v239;
  if (v239 == &v237)
  {
    v206 = 4;
    v205 = &v237;
  }
  else
  {
    if (!v239)
      goto LABEL_461;
    v206 = 5;
  }
  (*v205)[v206]();
LABEL_461:
  v207 = v242;
  if (v242 == &v240)
  {
    v208 = 4;
    v207 = &v240;
  }
  else
  {
    if (!v242)
      goto LABEL_466;
    v208 = 5;
  }
  ((void (*)(void))(*v207)[v208])();
LABEL_466:
  result = v245;
  if (v245 == &v243)
  {
    v210 = 4;
    result = &v243;
  }
  else
  {
    if (!v245)
      return result;
    v210 = 5;
  }
  return (uint64_t (***)())(*result)[v210]();
}

void sub_20C77CB90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C79FFF8((void **)qword_25498CC10);
  *(_QWORD *)(v1 - 128) = &unk_25498CBF0;
  sub_20C75BE34((void ***)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_20C77DD00(uint64_t a1)
{
  void **v3;

  sub_20C79FFF8(*(void ***)(a1 + 32));
  v3 = (void **)a1;
  sub_20C75BE34(&v3);
  return a1;
}

uint64_t *sub_20C77DD3C(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;

  v1 = *a1;
  v14 = v1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v14 = (uint64_t)v2;
  }
  v4 = qword_25498CC10;
  if (!qword_25498CC10)
  {
    v5 = &qword_25498CC10;
    v6 = &qword_25498CC10;
LABEL_15:
    v8 = (uint64_t *)operator new(0x40uLL);
    v9 = v14;
    v14 = 0;
    v8[4] = v9;
    v8[5] = 0;
    v8[6] = 0;
    v8[7] = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = (uint64_t)v8;
    v10 = v8;
    if (*(_QWORD *)qword_25498CC08)
    {
      qword_25498CC08 = *(_QWORD *)qword_25498CC08;
      v10 = (uint64_t *)*v5;
    }
    sub_20BDDE208((uint64_t *)qword_25498CC10, v10);
    ++qword_25498CC18;
    goto LABEL_18;
  }
  v5 = &qword_25498CC10;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v4;
      v7 = (uint64_t *)(v4 + 32);
      if (!sub_20BF1E6D8((uint64_t)&qword_25498CC18, &v14, (uint64_t *)(v4 + 32)))
        break;
      v4 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_15;
    }
    if (!sub_20BF1E6D8((uint64_t)&qword_25498CC18, v7, &v14))
      break;
    v5 = v6 + 1;
    v4 = v6[1];
    if (!v4)
      goto LABEL_15;
  }
  v8 = (uint64_t *)*v5;
  if (!*v5)
    goto LABEL_15;
LABEL_18:
  if ((v14 & 7) != 0)
  {
    v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return v8 + 5;
}

void sub_20C77DE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(a1);
}

char ***sub_20C77DEC0(char ***a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = *a1;
  v5 = (unint64_t)(*a1)[1];
  v6 = (unint64_t)(*a1)[2];
  if (v5 < v6)
  {
    v7 = a2[3];
    if (v7)
    {
      if ((_QWORD *)v7 == a2)
      {
        *(_QWORD *)(v5 + 24) = v5;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)a2[3] + 24))(a2[3], v5);
        goto LABEL_21;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    *(_QWORD *)(v5 + 24) = v7;
LABEL_21:
    v15 = (char *)(v5 + 32);
    v4[1] = (char *)(v5 + 32);
    goto LABEL_34;
  }
  v8 = (uint64_t)(v5 - (_QWORD)*v4) >> 5;
  if ((unint64_t)(v8 + 1) >> 59)
    sub_20BDDF694();
  v9 = v6 - (_QWORD)*v4;
  v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1))
    v10 = v8 + 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v30 = (uint64_t)(*a1 + 2);
  if (v11)
  {
    if (v11 >> 59)
      sub_20BDDF5B4();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v8];
  v26 = v12;
  v27 = v13;
  v28 = v13;
  v29 = &v12[32 * v11];
  v14 = a2[3];
  if (!v14)
    goto LABEL_19;
  if ((_QWORD *)v14 != a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_19:
    *((_QWORD *)v13 + 3) = v14;
    goto LABEL_23;
  }
  *((_QWORD *)v13 + 3) = v13;
  (*(void (**)(_QWORD *, char *))(*a2 + 24))(a2, v13);
LABEL_23:
  v16 = v27;
  v15 = v28 + 32;
  v28 += 32;
  v18 = *v4;
  v17 = v4[1];
  if (v17 != *v4)
  {
    v19 = v27 - 8;
    while (1)
    {
      v20 = (char *)*((_QWORD *)v17 - 1);
      v21 = v17 - 32;
      v22 = v19;
      if (v20)
      {
        if (v21 == v20)
        {
          *(_QWORD *)v19 = v19 - 24;
          (*(void (**)(_QWORD))(**((_QWORD **)v17 - 1) + 24))(*((_QWORD *)v17 - 1));
          goto LABEL_30;
        }
        *(_QWORD *)v19 = v20;
        v22 = v17 - 8;
      }
      *(_QWORD *)v22 = 0;
LABEL_30:
      v19 -= 32;
      v17 = v21;
      if (v21 == v18)
      {
        v23 = *v4;
        v17 = v4[1];
        v16 = v19 + 8;
        v15 = v28;
        goto LABEL_33;
      }
    }
  }
  v23 = v4[1];
LABEL_33:
  *v4 = v16;
  v26 = v23;
  v27 = v23;
  v4[1] = v15;
  v28 = v17;
  v24 = v4[2];
  v4[2] = v29;
  v29 = v24;
  sub_20C7393E0((uint64_t)&v26);
LABEL_34:
  v4[1] = v15;
  return a1;
}

void sub_20C77E0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7393E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C77E0DC(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  const std::string *EmptyString;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _DWORD v23[4];
  _DWORD v24[4];
  int v25;
  uint64_t **v26;
  void (**v27)(Alembic::Abc::v12::OObject *__hidden);
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;
  uint64_t *v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  sub_20C78AF98(a1, (uint64_t)v38);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v3 = *a1;
  if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*a1 + 104)) + 14))
    v4 = *(_QWORD *)(v3 + 96);
  else
    v4 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 136))(&v39, v4, a1 + 3, (uint64_t)v2 + 448);
  if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v39))
  {
    v5 = (v40 & 4) != 0
       ? (uint64_t *)(*(uint64_t (**)(uint64_t *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(&v39)
       : &v39;
    if (*v5)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v6)
        v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*((_QWORD *)v6 + 56) & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+<char>();
      if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      v33 = &v35;
      v9 = sub_20BDDDFDC(v38, (const void **)&v35, (uint64_t)&unk_20CAC184C, (__int128 **)&v33);
      std::string::operator=((std::string *)(v9 + 7), EmptyString);
      if (v37 < 0)
        operator delete(v35);
    }
  }
  v10 = operator new(0x38uLL);
  v11 = *(_QWORD *)(a1[1] + 8);
  v28 = *(_DWORD *)(v11 + 8);
  if (*(char *)(v11 + 39) < 0)
  {
    sub_20BDDBFAC(&v29, *(void **)(v11 + 16), *(_QWORD *)(v11 + 24));
  }
  else
  {
    v12 = *(_OWORD *)(v11 + 16);
    v30 = *(_QWORD *)(v11 + 32);
    v29 = v12;
  }
  v14 = *(_QWORD *)(v11 + 40);
  v13 = *(_QWORD *)(v11 + 48);
  v27 = off_24C518EC0;
  v31 = v14;
  v32 = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)&v35);
  v25 = 3;
  v26 = v38;
  v24[0] = 0;
  v24[2] = 0;
  v23[0] = 0;
  v23[2] = 0;
  Alembic::Abc::v12::OObject::OObject(v10, &v27, &v35, &v25, v24, v23);
  sub_20C78BFB4(&v33, (uint64_t)v10);
  if (v37 < 0)
    operator delete(v35);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v27);
  sub_20C78B66C(&v35, (uint64_t *)&v33);
  sub_20C78B5F4((uint64_t)a1, (uint64_t *)&v35);
  v17 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  sub_20BF4C2D8((uint64_t)&v39);
  sub_20BDE9D48((uint64_t)v38, v38[1]);
}

void sub_20C77E3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1 - 56);
  sub_20BDE9D48(v1 - 80, *(_QWORD **)(v1 - 72));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C77E4AC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  unint64_t *v5;
  unint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  BOOL v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *result;
  uint64_t v18;
  void *__p[2];
  char v20;
  int v21;
  char v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD v28[4];
  _DWORD v29[4];
  char v30[8];
  _QWORD *v31;
  int v32;
  char *v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  _QWORD *v40;
  _QWORD v41[2];
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45[0] = &unk_24C54A5C0;
  v45[1] = sub_20C78C314;
  v46 = v45;
  v21 = 2;
  v22 = 1;
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  sub_20BDDC0E4(__p, "visible");
  Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v23);
  v41[0] = 0;
  v41[1] = 0;
  v40 = v41;
  if ((_QWORD **)(a1 + 56) == &v40)
  {
    v3 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)(a1 + 56), v41, v41);
    v3 = (_QWORD *)v41[0];
  }
  v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1256);
  sub_20BE6100C((uint64_t)&v40, v3);
  memset(v39, 0, 24);
  sub_20C78D5B8(a1, v4, (uint64_t)v39, (uint64_t)&v40);
  if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*(_QWORD *)a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v44)[3])
  {
    v34 = v23;
    if (SHIBYTE(v25) < 0)
    {
      sub_20BDDBFAC(&v35, (void *)v24, *((unint64_t *)&v24 + 1));
    }
    else
    {
      v35 = v24;
      v36 = v25;
    }
    v37 = v26;
    v38 = v27;
    if (v27)
    {
      v5 = (unint64_t *)(v27 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    sub_20C78C4A8((uint64_t *)a1, v4, (uint64_t)&v40, (uint64_t)v30);
    v32 = 3;
    v33 = v30;
    v29[0] = 0;
    v29[2] = 0;
    v28[0] = 0;
    v28[2] = 0;
    Alembic::Abc::v12::OScalarProperty::OScalarProperty(v39, &v34, __p, &v21, &v32, v29, v28);
    sub_20BDE9D48((uint64_t)v30, v31);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v34);
    v7 = *(double **)(a1 + 56);
    if (v7 != (double *)(a1 + 64))
    {
      do
      {
        sub_20C78CE00(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*(_QWORD *)a1 + 88), (uint64_t)v45, &v40, (Alembic::Abc::v12::OScalarProperty *)v39, v7[4]);
        v8 = (double *)*((_QWORD *)v7 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(double **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (double *)*((_QWORD *)v7 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v7;
            v7 = v9;
          }
          while (!v10);
        }
        v7 = v9;
      }
      while (v9 != (double *)(a1 + 64));
    }
    sub_20C78CF50((double **)a1, a1 + 56);
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::Abc::v12::OScalarProperty *)v39);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v39);
  }
  v11 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v42;
  if (v42)
  {
    v15 = (unint64_t *)&v42->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
  sub_20BFD265C(&v40);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v23);
  if (v20 < 0)
    operator delete(__p[0]);
  result = v46;
  if (v46 == v45)
  {
    v18 = 4;
    result = v45;
  }
  else
  {
    if (!v46)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

void sub_20C77E808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;

  v40 = *(_QWORD **)(v38 - 64);
  if (v40 == (_QWORD *)(v38 - 88))
  {
    v41 = 4;
    v40 = (_QWORD *)(v38 - 88);
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C77E8E0(uint64_t a1)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v3;
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 8;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v3)
    v3 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  v4 = operator new(0x20uLL);
  *v4 = &off_24C54A660;
  v4[1] = sub_20C78FC28;
  v4[2] = 0;
  v4[3] = v2;
  v8 = v4;
  sub_20C78F534(a1, v3, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20C77E9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C77E9FC(uint64_t a1)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 8;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v3)
    v3 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  v4 = (_QWORD *)((char *)v3 + 8);
  v5 = operator new(0x20uLL);
  *v5 = &off_24C54A660;
  v5[1] = sub_20C790D6C;
  v5[2] = 0;
  v5[3] = v2;
  v9 = v5;
  sub_20C78F534(a1, v4, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20C77EAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20C77EB18(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  __int128 v6;
  void *__p[2];
  uint64_t v8;
  int v9[12];
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20BFE538C(&v10, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v2 = v10;
  v3 = v11;
  while (v2 != v3)
  {
    Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)v9);
    if ((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(__p, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v6 = *(_OWORD *)EmptyString;
      v8 = EmptyString[2];
      *(_OWORD *)__p = v6;
    }
    sub_20C78FC38((uint64_t *)a1, v9, v2, (uint64_t)__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v9);
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v2 + 8);
  }
  __p[0] = &v10;
  sub_20BEEB2B8((void ***)__p);
}

void sub_20C77EC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a15);
  __p = (void *)(v15 - 56);
  sub_20BEEB2B8((void ***)&__p);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C77EC44(uint64_t a1)
{
  uint64_t **v1;
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t **v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 *v26;
  __int128 *v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count_vtbl *v37;
  void (__cdecl *v38)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  double *v47;
  double v48;
  _QWORD *v49;
  pxrInternal__aapl__pxrReserved__::VtValue *v50;
  const std::type_info *v51;
  char *v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t **v58;
  char *v59;
  void *v60;
  double *v61;
  double *v62;
  void (__cdecl *v63)(std::__shared_weak_count *__hidden);
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t **v81;
  uint64_t **v83;
  int v84;
  void (**v85)(Alembic::Abc::v12::OObject *__hidden);
  int v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (__cdecl *v91)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v92;
  uint64_t *v93[3];
  int v94;
  int v95[5];
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  int v98;
  int v99[5];
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  int v102;
  int v103[5];
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108;
  int v109;
  char v110;
  __int128 __p;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t **v119;
  uint64_t **v120;
  uint64_t **v121;
  _QWORD *v122[3];
  __int128 *v123;
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)&__p + 1) = 0;
  *(_QWORD *)&v112 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v1 = (uint64_t **)(a1 + 56);
  v81 = v1;
  if (v1 == (uint64_t **)&__p)
  {
    v2 = 0;
  }
  else
  {
    sub_20C78D3CC(v1, (_QWORD *)&__p + 1, (_QWORD *)&__p + 1);
    v2 = (_QWORD *)*((_QWORD *)&__p + 1);
  }
  sub_20BE6100C((uint64_t)&__p, v2);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4)
    v4 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1336), (uint64_t *)v4 + 68, (uint64_t)&v102);
  v5 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)&__p + 1) = 0;
  *(_QWORD *)&v112 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  if (v81 == (uint64_t **)&__p)
  {
    v6 = 0;
  }
  else
  {
    sub_20C78D3CC(v81, (_QWORD *)&__p + 1, (_QWORD *)&__p + 1);
    v6 = (_QWORD *)*((_QWORD *)&__p + 1);
  }
  sub_20BE6100C((uint64_t)&__p, v6);
  if (v5)
  {
    v7 = sub_20C790E04();
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8)
      v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C790E04();
    v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10)
      v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20C790D7C(a1, v9, (uint64_t *)v10 + 45, (uint64_t)&v98);
    v11 = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v100;
    if (v100)
    {
      v15 = (unint64_t *)&v100->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v99);
    sub_20BFD265C(&v98);
    *((_QWORD *)&__p + 1) = 0;
    *(_QWORD *)&v112 = 0;
    *(_QWORD *)&__p = (char *)&__p + 8;
    if (v81 == (uint64_t **)&__p)
    {
      v17 = 0;
    }
    else
    {
      sub_20C78D3CC(v81, (_QWORD *)&__p + 1, (_QWORD *)&__p + 1);
      v17 = (_QWORD *)*((_QWORD *)&__p + 1);
    }
    v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 8);
    sub_20BE6100C((uint64_t)&__p, v17);
  }
  else
  {
    v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C790E04();
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8)
      v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_20C790D7C(a1, v18, (uint64_t *)v8 + 45, (uint64_t)&v94);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  sub_20BFE538C(&v119, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v119;
  v20 = v120;
  if (v119 != v120)
  {
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v21, v19))
      {
        *(_QWORD *)&__p = "usdAbc/alembicWriter.cpp";
        *((_QWORD *)&__p + 1) = "_WriteXform";
        *(_QWORD *)&v112 = 2731;
        *((_QWORD *)&v112 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_WriteXform(_PrimWriterContext *)";
        LOBYTE(v113) = 0;
        v22 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
        if (v22)
        {
          v23 = (const char *)(v22 + 16);
          if (*(char *)(v22 + 39) < 0)
            v23 = *(const char **)v23;
        }
        else
        {
          v23 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Found unextracted property '%s' in xformOp namespace.", v23);
      }
      v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)((char *)v21 + 8);
    }
    while (v21 != (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v20);
  }
  *(_QWORD *)&__p = &v119;
  sub_20BEEB2B8((void ***)&__p);
  sub_20C78AF98((uint64_t *)a1, (uint64_t)v93);
  sub_20C78C4A8((uint64_t *)a1, v18, (uint64_t)&v94, (uint64_t)&__p);
  v24 = __p;
  if ((__int128 *)__p != (__int128 *)((char *)&__p + 8))
  {
    do
    {
      if (*(char *)(v24 + 79) < 0)
      {
        if (*(_QWORD *)(v24 + 64))
        {
LABEL_45:
          std::operator+<char>();
          v83 = (uint64_t **)&v119;
          v25 = sub_20BDDDFDC(v93, (const void **)&v119, (uint64_t)&unk_20CAC184C, (__int128 **)&v83);
          std::string::operator=((std::string *)(v25 + 7), (const std::string *)(v24 + 56));
          if (SHIBYTE(v121) < 0)
            operator delete(v119);
        }
      }
      else if (*(_BYTE *)(v24 + 79))
      {
        goto LABEL_45;
      }
      v26 = *(__int128 **)(v24 + 8);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(__int128 **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = *(__int128 **)(v24 + 16);
          v28 = *(_QWORD *)v27 == v24;
          v24 = (uint64_t)v27;
        }
        while (!v28);
      }
      v24 = (uint64_t)v27;
    }
    while (v27 != (__int128 *)((char *)&__p + 8));
  }
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  v29 = operator new(0x200uLL);
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v86 = *(_DWORD *)(v30 + 8);
  if (*(char *)(v30 + 39) < 0)
  {
    sub_20BDDBFAC(&v87, *(void **)(v30 + 16), *(_QWORD *)(v30 + 24));
  }
  else
  {
    v31 = *(_OWORD *)(v30 + 16);
    v88 = *(_QWORD *)(v30 + 32);
    v87 = v31;
  }
  v33 = *(_QWORD *)(v30 + 40);
  v32 = *(_QWORD *)(v30 + 48);
  v85 = off_24C518EC0;
  v89 = v33;
  v90 = v32;
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  sub_20C78B584(a1, (uint64_t)&__p);
  LODWORD(v119) = 3;
  v120 = v93;
  LODWORD(v83) = 0;
  v84 = 0;
  LODWORD(v108) = 0;
  v109 = 0;
  sub_20C7910B0((uint64_t)v29, (uint64_t)&v85, &__p, (uint64_t **)&v119, (uint64_t **)&v83, (uint64_t **)&v108);
  sub_20C791DD4(&v91, (uint64_t)v29);
  if (SBYTE7(v112) < 0)
    operator delete((void *)__p);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v85);
  v36 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v37 = v36;
  v38 = v91;
  v39 = v92;
  if (v92)
  {
    v40 = (unint64_t *)&v92->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v36->~__shared_weak_count_0 = v38;
    v36->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v39;
    do
      v42 = __ldxr(v40);
    while (__stxr(v42 + 1, v40));
    do
      v43 = __ldaxr(v40);
    while (__stlxr(v43 - 1, v40));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  else
  {
    v36->~__shared_weak_count_0 = v91;
    v36->__on_zero_shared = 0;
  }
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A7D0;
  *(_QWORD *)&__p = v37;
  v44 = (std::__shared_weak_count *)operator new(0x20uLL);
  v44->__shared_owners_ = 0;
  v45 = (unint64_t *)&v44->__shared_owners_;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C54A820;
  v44->__shared_weak_owners_ = 0;
  v44[1].__vftable = v37;
  *((_QWORD *)&__p + 1) = v44;
  sub_20C78B5F4(a1, (uint64_t *)&__p);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  Alembic::AbcGeom::v12::XformSample::XformSample((uint64_t)&v83);
  v47 = *(double **)(a1 + 56);
  if (v47 != (double *)(a1 + 64))
  {
    do
    {
      v48 = v47[4];
      Alembic::AbcGeom::v12::XformSample::reset((Alembic::AbcGeom::v12::XformSample *)&v83);
      v49 = sub_20C78EDF8((uint64_t)&v94, v48);
      v50 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(&v123, v49);
      if (sub_20BFADE60(v50))
      {
        if ((v124 & 4) != 0)
          v53 = (__int128 *)(*(uint64_t (**)(__int128 **))((v124 & 0xFFFFFFFFFFFFFFF8) + 168))(&v123);
        else
          v53 = v123;
        Alembic::AbcGeom::v12::XformOp::XformOp(&v119, 3, 0);
        v54 = v53[1];
        __p = *v53;
        v112 = v54;
        v55 = v53[3];
        v113 = v53[2];
        v114 = v55;
        v56 = v53[5];
        v115 = v53[4];
        v116 = v56;
        v57 = v53[7];
        v117 = v53[6];
        v118 = v57;
        Alembic::AbcGeom::v12::XformSample::addOp((uint64_t)&v83, (Alembic::AbcGeom::v12::XformOp *)&v119, (uint64_t)&__p);
        sub_20BE6100C((uint64_t)v122, v122[1]);
        v58 = v120;
        if (!v120)
          goto LABEL_88;
        v121 = v120;
      }
      else
      {
        *(_QWORD *)&__p = "usdAbc/alembicWriter.cpp";
        *((_QWORD *)&__p + 1) = "_CopyXform";
        *(_QWORD *)&v112 = 1738;
        *((_QWORD *)&v112 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyXform(double, const "
                                 "UsdSamples &, XformSample *)";
        LOBYTE(v113) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v123, v51, v52, (uint64_t)v106);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v106, (uint64_t)&v108);
        if (v110 >= 0)
          v60 = &v108;
        else
          v60 = v108;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'GfMatrix4d', got '%s'", v59, v60);
        if (v110 < 0)
          operator delete(v108);
        if ((v107 & 0x80000000) == 0)
          goto LABEL_88;
        v58 = (uint64_t **)v106[0];
      }
      operator delete(v58);
LABEL_88:
      sub_20BF4C2D8((uint64_t)&v123);
      Alembic::AbcGeom::v12::XformSample::setInheritsXforms((uint64_t)&v83, 1);
      Alembic::AbcGeom::v12::OXformSchema::set((Alembic::AbcGeom::v12::OXformSchema *)((char *)v91 + 56), (int **)&v83);
      v61 = (double *)*((_QWORD *)v47 + 1);
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = *(double **)v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (double *)*((_QWORD *)v47 + 2);
          v28 = *(_QWORD *)v62 == (_QWORD)v47;
          v47 = v62;
        }
        while (!v28);
      }
      v47 = v62;
    }
    while (v62 != (double *)(a1 + 64));
  }
  v63 = v91;
  v64 = sub_20C78CF50((double **)a1, (uint64_t)v81);
  Alembic::AbcGeom::v12::OXformSchema::setTimeSampling((Alembic::AbcGeom::v12::OXformSchema *)((char *)v63 + 56), v64);
  *(_QWORD *)&__p = &v84;
  sub_20BE67B24((void ***)&__p);
  v65 = v92;
  if (v92)
  {
    v66 = (unint64_t *)&v92->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_20BDE9D48((uint64_t)v93, v93[1]);
  v68 = v97;
  if (v97)
  {
    v69 = (unint64_t *)&v97->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v96;
  if (v96)
  {
    v72 = (unint64_t *)&v96->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v95);
  sub_20BFD265C(&v94);
  v74 = v105;
  if (v105)
  {
    v75 = (unint64_t *)&v105->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v104;
  if (v104)
  {
    v78 = (unint64_t *)&v104->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v103);
  return sub_20BFD265C(&v102);
}

void sub_20C77F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48)
{
  void *v48;

  operator delete(v48);
  sub_20BDE9D48((uint64_t)&a27, (_QWORD *)a28);
  sub_20C78D390(&a30);
  sub_20C78D390(&a48);
  _Unwind_Resume(a1);
}

void sub_20C77F790(uint64_t a1)
{
  void **v2;
  std::string::size_type v3;
  void *__p[2];
  unsigned __int8 v5;

  sub_20C77EC44(a1);
  sub_20BDDC0E4(__p, "Shape");
  if ((v5 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v5 & 0x80u) == 0)
    v3 = v5;
  else
    v3 = (std::string::size_type)__p[1];
  std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v2, v3);
  if ((char)v5 < 0)
    operator delete(__p[0]);
}

void sub_20C77F7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C77F818(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count_vtbl *v11;
  void (__cdecl *v12)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v36;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v37;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v41;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v43;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v44;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v45;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v46;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v47;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v48;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v49;
  unsigned __int8 *v50;
  int v51;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v54;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v55;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v56;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  int v60;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v61;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v62;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v63;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v80;
  double *v81;
  double v82;
  _QWORD *v83;
  const std::type_info *v84;
  char *v85;
  uint64_t v86;
  float32x2_t *v87;
  char *v88;
  __int128 *v89;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v91;
  uint64_t v92;
  _QWORD **v93;
  pxrInternal__aapl__pxrReserved__::VtValue *v94;
  uint64_t v95;
  pxrInternal__aapl__pxrReserved__::VtValue *v96;
  const std::string *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  _QWORD **v110;
  pxrInternal__aapl__pxrReserved__::VtValue *v111;
  uint64_t v112;
  _QWORD **v113;
  pxrInternal__aapl__pxrReserved__::VtValue *v114;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v115;
  uint64_t *v116;
  int v117;
  uint64_t *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  double *v193;
  double *v194;
  BOOL v195;
  void (__cdecl *v196)(std::__shared_weak_count *__hidden);
  int v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  double **v291;
  uint64_t v292;
  double *v293;
  unint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t *v297;
  std::__shared_weak_count *v298;
  char v299[16];
  std::__shared_weak_count *v300;
  std::__shared_weak_count *v301;
  char v302[16];
  std::__shared_weak_count *v303;
  std::__shared_weak_count *v304;
  char v305[16];
  std::__shared_weak_count *v306;
  std::__shared_weak_count *v307;
  char v308[16];
  std::__shared_weak_count *v309;
  std::__shared_weak_count *v310;
  char v311[16];
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::__shared_weak_count *v317;
  char v318[16];
  std::__shared_weak_count *v319;
  std::__shared_weak_count *v320;
  char v321[16];
  std::__shared_weak_count *v322;
  std::__shared_weak_count *v323;
  unint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  _BYTE __p[24];
  std::__shared_weak_count *v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  int v333;
  int v334;
  _QWORD v335[2];
  char v336[24];
  std::string v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  _QWORD v341[2];
  char v342[112];
  int v343;
  int v344;
  __int128 v345;
  std::__shared_weak_count *v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  int v350;
  int v351[5];
  std::__shared_weak_count *v352;
  std::__shared_weak_count *v353;
  int v354;
  int v355[5];
  std::__shared_weak_count *v356;
  std::__shared_weak_count *v357;
  int v358;
  int v359[5];
  std::__shared_weak_count *v360;
  std::__shared_weak_count *v361;
  int v362;
  int v363[5];
  std::__shared_weak_count *v364;
  std::__shared_weak_count *v365;
  int v366;
  int v367[5];
  std::__shared_weak_count *v368;
  std::__shared_weak_count *v369;
  int v370;
  int v371[5];
  std::__shared_weak_count *v372;
  std::__shared_weak_count *v373;
  uint64_t v374;
  int v375;
  int v376[5];
  std::__shared_weak_count *v377;
  std::__shared_weak_count *v378;
  int v379;
  int v380[5];
  std::__shared_weak_count *v381;
  std::__shared_weak_count *v382;
  int v383;
  int v384[5];
  std::__shared_weak_count *v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  int v388;
  int v389[5];
  std::__shared_weak_count *v390;
  std::__shared_weak_count *v391;
  _QWORD v392[3];
  std::__shared_weak_count *v393;
  std::__shared_weak_count *v394;
  uint64_t *v395;
  int v396;
  std::__shared_weak_count *v397;
  std::__shared_weak_count *v398;
  uint64_t v399;
  uint64_t *v400;
  int v401;
  std::__shared_weak_count *v402;
  std::__shared_weak_count *v403;
  uint64_t v404;
  uint64_t *v405[3];
  std::__shared_weak_count *v406;
  std::__shared_weak_count *v407;
  void (**v408)(Alembic::Abc::v12::OObject *__hidden);
  int v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void (__cdecl *v414)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v415;
  void *v416[2];
  void *v417;
  void *v418;
  uint64_t *v419;
  std::__shared_weak_count *v420;
  unint64_t v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  std::__shared_weak_count *v424;
  __int128 v425;
  uint64_t v426;
  const char *v427;
  std::__shared_weak_count *v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  void *v432;
  uint64_t v433;
  int v434;
  __int128 v435;
  void *v436;
  __int128 *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;

  v440 = *MEMORY[0x24BDAC8D0];
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x4C8uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v409 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v410, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v411 = *(_QWORD *)(v4 + 32);
    v410 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v408 = off_24C518EC0;
  v412 = v7;
  v413 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)__p);
  sub_20C78AF98(a1, (uint64_t)&v425);
  LODWORD(v405[0]) = 3;
  v405[1] = (uint64_t *)&v425;
  LODWORD(v400) = 0;
  v401 = 0;
  LODWORD(v395) = 0;
  v396 = 0;
  sub_20C793564((uint64_t)v3, (uint64_t)&v408, (__int128 *)__p, v405, &v400, &v395);
  sub_20C7946CC(&v414, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)&v425, *((_QWORD **)&v425 + 1));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v408);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v11 = v10;
  v12 = v414;
  v13 = v415;
  if (v415)
  {
    p_shared_owners = (unint64_t *)&v415->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v10->~__shared_weak_count_0 = v12;
    v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v10->~__shared_weak_count_0 = v414;
    v10->__on_zero_shared = 0;
  }
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A948;
  *(_QWORD *)__p = v11;
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24C54A998;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = v11;
  *(_QWORD *)&__p[8] = v18;
  sub_20C78B5F4((uint64_t)a1, (uint64_t *)__p);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)__p = &__p[8];
  if (a1 + 7 == (_QWORD *)__p)
  {
    v21 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, &__p[8], &__p[8]);
    v21 = *(_QWORD **)&__p[8];
  }
  sub_20BE6100C((uint64_t)__p, v21);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 296), (uint64_t *)v23 + 77, (uint64_t)v405);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 816), (uint64_t *)v25 + 83, (uint64_t)&v400);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 1216), (uint64_t *)v27 + 86, (uint64_t)&v395);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28)
    v28 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 344), (uint64_t *)v29 + 58, (uint64_t)v392);
  v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v30)
    v30 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 336), (uint64_t *)v31 + 58, (uint64_t)&v388);
  v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v32)
    v32 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v33)
    v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v32 + 1032), (uint64_t *)v33 + 11, (uint64_t)&v383);
  v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v34)
    v34 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v35)
    v35 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v34 + 480), (uint64_t *)v35 + 11, (uint64_t)&v379);
  v36 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v36)
    v36 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v37)
    v37 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v36 + 328), (uint64_t *)v37 + 11, (uint64_t)&v375);
  v38 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v38)
    v38 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v39)
    v39 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v38 + 424), (uint64_t *)v39 + 58, (uint64_t)&v370);
  v40 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v40)
    v40 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v41)
    v41 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v40 + 144), (uint64_t *)v41 + 58, (uint64_t)&v366);
  v42 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v42)
    v42 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v43)
    v43 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v42 + 152), (uint64_t *)v43 + 64, (uint64_t)&v362);
  v44 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v44)
    v44 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v45)
    v45 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v44 + 184), (uint64_t *)v45 + 58, (uint64_t)&v358);
  v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v46)
    v46 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v47)
    v47 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v46 + 192), (uint64_t *)v47 + 58, (uint64_t)&v354);
  v48 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v48)
    v48 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v49 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v49)
    v49 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v48 + 200), (uint64_t *)v49 + 64, (uint64_t)&v350);
  v50 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  if (!v50)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    v50 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  }
  v51 = *v50;
  v52 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (v51)
  {
    if (!v52)
      v52 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v53)
      v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v54 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v54)
      v54 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20C7921B4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v52 + 48), (uint64_t *)v53 + 105, (uint64_t *)v54 + 76, (uint64_t)&v343);
  }
  else
  {
    if (!v52)
      v52 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v55)
      v55 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v52 + 48), (uint64_t *)v55 + 105, (uint64_t)&v343);
  }
  if (*(_QWORD *)(v348 + 16))
  {
    v56 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v56)
      v56 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    sub_20C792240(a1, (_QWORD *)v56 + 4);
    v57 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v57)
      v57 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v58 = (_QWORD *)((char *)v57 + 40);
  }
  else
  {
    v59 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    if (!v59)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
      v59 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    }
    v60 = *v59;
    v61 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (v60)
    {
      if (!v61)
        v61 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v62)
        v62 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v63)
        v63 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20C7921B4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v61 + 32), (uint64_t *)v62 + 105, (uint64_t *)v63 + 76, (uint64_t)__p);
    }
    else
    {
      if (!v61)
        v61 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v64)
        v64 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v61 + 32), (uint64_t *)v64 + 105, (uint64_t)__p);
    }
    sub_20BFD3EBC(&v343, (int *)__p);
    sub_20BFD3F10(&v344, (int *)&__p[4]);
    v65 = v329;
    v66 = *(_OWORD *)&__p[8];
    v329 = 0;
    *(_QWORD *)&__p[16] = 0;
    v345 = v66;
    v67 = v346;
    v346 = v65;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = v330;
    v330 = 0uLL;
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
    v347 = v70;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v348 = v331;
    v349 = v332;
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v330 + 1);
    if (*((_QWORD *)&v330 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v330 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v329;
    if (v329)
    {
      v78 = (unint64_t *)&v329->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__p[4]);
    sub_20BFD265C(__p);
    v80 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v80)
      v80 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v58 = (_QWORD *)((char *)v80 + 56);
  }
  sub_20C792240(a1, v58);
  sub_20C7922D8(a1, v392, (uint64_t)&v388);
  v292 = (uint64_t)(a1 + 7);
  sub_20C794F2C((uint64_t)__p);
  v81 = (double *)a1[7];
  v291 = (double **)a1;
  v293 = (double *)(a1 + 8);
  if (v81 != (double *)(a1 + 8))
  {
    do
    {
      v82 = v81[4];
      sub_20C79278C((uint64_t)__p);
      v334 = 1;
      v333 = 1;
      v83 = sub_20C78EDF8((uint64_t)v405, v82);
      sub_20BF4C6D0(&v421, v83);
      if (sub_20BF5B118((pxrInternal__aapl__pxrReserved__::VtValue *)&v421))
      {
        if ((v422 & 4) != 0)
          v86 = (*(uint64_t (**)(unint64_t *))((v422 & 0xFFFFFFFFFFFFFFF8) + 168))(&v421);
        else
          v86 = v421;
        v87 = *(float32x2_t **)(v86 + 32);
        v338 = vcvtq_f64_f32(*v87);
        v339 = vcvtq_f64_f32(v87[1]);
        v340 = vcvtq_f64_f32(v87[2]);
      }
      else
      {
        *(_QWORD *)&v425 = "usdAbc/alembicWriter.cpp";
        *((_QWORD *)&v425 + 1) = "_CopySelfBounds";
        v426 = 1759;
        v427 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &,"
               " DST *) [DST = Alembic::AbcGeom::v12::OSubDSchema::Sample]";
        LOBYTE(v428) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v421, v84, v85, (uint64_t)v416);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v416, (uint64_t)&v435);
        v89 = &v435;
        if (SHIBYTE(v436) < 0)
          v89 = (__int128 *)v435;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v425, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v88, v89);
        if (SHIBYTE(v436) < 0)
          operator delete((void *)v435);
        if (SHIBYTE(v417) < 0)
          operator delete(v416[0]);
      }
      sub_20BF4C2D8((uint64_t)&v421);
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v404);
      v91 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v400, v82);
      LODWORD(v425) = 10;
      BYTE4(v425) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v404, v91, v2, (uint64_t)Converter, (int *)&v425, 0, (uint64_t)&v421);
      if (sub_20C78EEDC((uint64_t)&v421, &v400, (uint64_t)&v404))
      {
        v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v422 + 16))(v422);
        sub_20C7951A0(&v425, v92, v421 / 3);
        *(_QWORD *)__p = v425;
        *(_QWORD *)&__p[5] = *(_QWORD *)((char *)&v425 + 5);
        sub_20BDDF7E4(&__p[16], (char *)v426, (uint64_t)v427, (uint64_t)&v427[-v426] >> 3);
        if (v426)
        {
          v427 = (const char *)v426;
          operator delete((void *)v426);
        }
      }
      v93 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v399);
      v94 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v395, v82);
      LODWORD(v425) = 10;
      BYTE4(v425) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v399, v94, v2, (uint64_t)v93, (int *)&v425, 0, (uint64_t)&v324);
      if (sub_20C78EEDC((uint64_t)&v324, &v395, (uint64_t)&v399))
      {
        v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v325 + 16))(v325);
        sub_20C795234(&v425, v95, v324 / 3);
        v341[0] = v425;
        *(_QWORD *)((char *)v341 + 5) = *(_QWORD *)((char *)&v425 + 5);
        sub_20BDDF7E4(v342, (char *)v426, (uint64_t)v427, (uint64_t)&v427[-v426] >> 3);
        if (v426)
        {
          v427 = (const char *)v426;
          operator delete((void *)v426);
        }
      }
      sub_20C792940(v2, v392, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C792A80, 0, (uint64_t)v321, v82);
      sub_20C792940(v2, &v388, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C792AB8, 0, (uint64_t)v318, v82);
      *(_QWORD *)&v435 = &unk_24C54A5C0;
      *((_QWORD *)&v435 + 1) = sub_20C792AF0;
      v437 = &v435;
      v96 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v383, v82);
      LODWORD(v416[0]) = 12;
      BYTE4(v416[0]) = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v387, v96, v2, (uint64_t)&v435, (int *)v416, 1, (uint64_t)&v425);
      if (sub_20C78EEDC((uint64_t)&v425, &v383, (uint64_t)&v387))
      {
        v97 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v425 + 1) + 16))(*((_QWORD *)&v425 + 1));
        std::string::operator=(&v337, v97);
      }
      v98 = v428;
      if (v428)
      {
        v99 = (unint64_t *)&v428->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = (std::__shared_weak_count *)v426;
      if (v426)
      {
        v102 = (unint64_t *)(v426 + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = v437;
      if (v437 == &v435)
      {
        v104 = &v435;
        v105 = 4;
      }
      else
      {
        if (!v437)
          goto LABEL_174;
        v105 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v104 + 8 * v105))();
LABEL_174:
      *(_QWORD *)&v425 = &unk_24C54A5C0;
      *((_QWORD *)&v425 + 1) = sub_20C792E14;
      v427 = (const char *)&v425;
      sub_20C792CB8(v2, (uint64_t)&v425, &v379, (uint64_t)__p, (void (*)(_QWORD *, _QWORD))sub_20C792930, 0, v82);
      v106 = v427;
      if (v427 == (const char *)&v425)
      {
        v106 = (const char *)&v425;
        v107 = 4;
      }
      else
      {
        if (!v427)
          goto LABEL_179;
        v107 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v106 + 8 * v107))();
LABEL_179:
      *(_QWORD *)&v425 = &unk_24C54A5C0;
      *((_QWORD *)&v425 + 1) = sub_20C793004;
      v427 = (const char *)&v425;
      sub_20C792CB8(v2, (uint64_t)&v425, &v375, (uint64_t)__p, (void (*)(_QWORD *, _QWORD))sub_20C792938, 0, v82);
      v108 = v427;
      if (v427 == (const char *)&v425)
      {
        v108 = (const char *)&v425;
        v109 = 4;
        goto LABEL_183;
      }
      if (v427)
      {
        v109 = 5;
LABEL_183:
        (*(void (**)(void))(*(_QWORD *)v108 + 8 * v109))();
      }
      v110 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v374);
      v111 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v370, v82);
      LODWORD(v425) = 6;
      BYTE4(v425) = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v374, v111, v2, (uint64_t)v110, (int *)&v425, 0, (uint64_t)&v314);
      if (sub_20C78EEDC((uint64_t)&v314, &v370, (uint64_t)&v374))
      {
        v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v315 + 16))(v315);
        sub_20C7952C8(&v425, v112, v314);
        v335[0] = v425;
        *(_QWORD *)((char *)v335 + 5) = *(_QWORD *)((char *)&v425 + 5);
        sub_20BDDF7E4(v336, (char *)v426, (uint64_t)v427, (uint64_t)&v427[-v426] >> 3);
        if (v426)
        {
          v427 = (const char *)v426;
          operator delete((void *)v426);
        }
      }
      sub_20C792940(v2, &v366, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C793274, 0, (uint64_t)v311, v82);
      sub_20C7932AC(v2, &v362, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C7933EC, 0, (uint64_t)v308, v82);
      sub_20C792940(v2, &v358, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C793424, 0, (uint64_t)v305, v82);
      sub_20C792940(v2, &v354, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C79345C, 0, (uint64_t)v302, v82);
      sub_20C7932AC(v2, &v350, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C793494, 0, (uint64_t)v299, v82);
      v113 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v349);
      v114 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v343, v82);
      LODWORD(v425) = 10;
      BYTE4(v425) = 2;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v349, v114, v2, (uint64_t)v113, (int *)&v425, 0, (uint64_t)&v294);
      if (!sub_20C78EEDC((uint64_t)&v294, &v343, (uint64_t)&v349))
        goto LABEL_218;
      v115 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v115)
        v115 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, int *, uint64_t))(*(_QWORD *)v345 + 136))(&v438, v345, &v343, (uint64_t)v115 + 488);
      if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v438))
      {
        if ((v439 & 4) != 0)
          v116 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v439 & 0xFFFFFFFFFFFFFFF8) + 168))(&v438);
        else
          v116 = &v438;
        v117 = sub_20C78E510(v116);
      }
      else
      {
        v117 = 127;
      }
      sub_20C79544C(&v294);
      v118 = v297;
      v119 = v298;
      v419 = v297;
      v420 = v298;
      if (v298)
      {
        v120 = (unint64_t *)&v298->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
      if (v118)
      {
        sub_20C795A00(&v435, *v118, (v118[1] - *v118) >> 2);
        v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v295 + 16))(v295);
        sub_20C795A94(v416, v122, v294 >> 1);
        sub_20BE2AE24((uint64_t)&v425, (uint64_t *)v416, (uint64_t *)&v435, v117);
        sub_20C7934CC(__p, (char *)&v425);
        if (v431)
        {
          v432 = v431;
          operator delete(v431);
        }
        if (v426)
        {
          v427 = (const char *)v426;
          operator delete((void *)v426);
        }
        v123 = v417;
        if (!v417)
          goto LABEL_210;
        v418 = v417;
      }
      else
      {
        v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v295 + 16))(v295);
        sub_20C795A94(&v435, v124, v294 >> 1);
        *(_QWORD *)&v425 = v435;
        *(_QWORD *)((char *)&v425 + 5) = *(_QWORD *)((char *)&v435 + 5);
        v427 = 0;
        v428 = 0;
        v426 = 0;
        sub_20BDE1364(&v426, v436, (uint64_t)v437, ((char *)v437 - (_BYTE *)v436) >> 3);
        v429 = 0;
        v430 = 0x100000005;
        v432 = 0;
        v433 = 0;
        v431 = 0;
        v434 = v117;
        sub_20C7934CC(__p, (char *)&v425);
        if (v431)
        {
          v432 = v431;
          operator delete(v431);
        }
        v123 = (void *)v426;
        if (!v426)
          goto LABEL_210;
        v427 = (const char *)v426;
      }
      operator delete(v123);
LABEL_210:
      if (v436)
      {
        v437 = (__int128 *)v436;
        operator delete(v436);
      }
      if (v119)
      {
        v125 = (unint64_t *)&v119->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      sub_20BF4C2D8((uint64_t)&v438);
LABEL_218:
      Alembic::AbcGeom::v12::OSubDSchema::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)v414 + 56), (uint64_t)__p);
      v127 = v298;
      if (v298)
      {
        v128 = (unint64_t *)&v298->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v130 = v296;
      if (v296)
      {
        v131 = (unint64_t *)&v296->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v133 = v301;
      if (v301)
      {
        v134 = (unint64_t *)&v301->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v136 = v300;
      if (v300)
      {
        v137 = (unint64_t *)&v300->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v139 = v304;
      if (v304)
      {
        v140 = (unint64_t *)&v304->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = v303;
      if (v303)
      {
        v143 = (unint64_t *)&v303->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v145 = v307;
      if (v307)
      {
        v146 = (unint64_t *)&v307->__shared_owners_;
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      v148 = v306;
      if (v306)
      {
        v149 = (unint64_t *)&v306->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = v310;
      if (v310)
      {
        v152 = (unint64_t *)&v310->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = v309;
      if (v309)
      {
        v155 = (unint64_t *)&v309->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = v313;
      if (v313)
      {
        v158 = (unint64_t *)&v313->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = v312;
      if (v312)
      {
        v161 = (unint64_t *)&v312->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      v163 = v317;
      if (v317)
      {
        v164 = (unint64_t *)&v317->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = v316;
      if (v316)
      {
        v167 = (unint64_t *)&v316->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      v169 = v320;
      if (v320)
      {
        v170 = (unint64_t *)&v320->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }
      v172 = v319;
      if (v319)
      {
        v173 = (unint64_t *)&v319->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      v175 = v323;
      if (v323)
      {
        v176 = (unint64_t *)&v323->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      v178 = v322;
      if (v322)
      {
        v179 = (unint64_t *)&v322->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v181 = v327;
      if (v327)
      {
        v182 = (unint64_t *)&v327->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v184 = v326;
      if (v326)
      {
        v185 = (unint64_t *)&v326->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      v187 = v424;
      if (v424)
      {
        v188 = (unint64_t *)&v424->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      v190 = v423;
      if (v423)
      {
        v191 = (unint64_t *)&v423->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
      v193 = (double *)*((_QWORD *)v81 + 1);
      if (v193)
      {
        do
        {
          v194 = v193;
          v193 = *(double **)v193;
        }
        while (v193);
      }
      else
      {
        do
        {
          v194 = (double *)*((_QWORD *)v81 + 2);
          v195 = *(_QWORD *)v194 == (_QWORD)v81;
          v81 = v194;
        }
        while (!v195);
      }
      v81 = v194;
    }
    while (v194 != v293);
  }
  v196 = v414;
  v197 = sub_20C78CF50(v291, v292);
  Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)v196 + 56), v197);
  sub_20C795B28((uint64_t)__p);
  v198 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1))
  {
    v199 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v346;
  if (v346)
  {
    v202 = (unint64_t *)&v346->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v344);
  sub_20BFD265C(&v343);
  v204 = v353;
  if (v353)
  {
    v205 = (unint64_t *)&v353->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = v352;
  if (v352)
  {
    v208 = (unint64_t *)&v352->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v351);
  sub_20BFD265C(&v350);
  v210 = v357;
  if (v357)
  {
    v211 = (unint64_t *)&v357->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v356;
  if (v356)
  {
    v214 = (unint64_t *)&v356->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v355);
  sub_20BFD265C(&v354);
  v216 = v361;
  if (v361)
  {
    v217 = (unint64_t *)&v361->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = v360;
  if (v360)
  {
    v220 = (unint64_t *)&v360->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v359);
  sub_20BFD265C(&v358);
  v222 = v365;
  if (v365)
  {
    v223 = (unint64_t *)&v365->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v364;
  if (v364)
  {
    v226 = (unint64_t *)&v364->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v363);
  sub_20BFD265C(&v362);
  v228 = v369;
  if (v369)
  {
    v229 = (unint64_t *)&v369->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = v368;
  if (v368)
  {
    v232 = (unint64_t *)&v368->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v367);
  sub_20BFD265C(&v366);
  v234 = v373;
  if (v373)
  {
    v235 = (unint64_t *)&v373->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = v372;
  if (v372)
  {
    v238 = (unint64_t *)&v372->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v371);
  sub_20BFD265C(&v370);
  v240 = v378;
  if (v378)
  {
    v241 = (unint64_t *)&v378->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = v377;
  if (v377)
  {
    v244 = (unint64_t *)&v377->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v376);
  sub_20BFD265C(&v375);
  v246 = v382;
  if (v382)
  {
    v247 = (unint64_t *)&v382->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = v381;
  if (v381)
  {
    v250 = (unint64_t *)&v381->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v380);
  sub_20BFD265C(&v379);
  v252 = v386;
  if (v386)
  {
    v253 = (unint64_t *)&v386->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v385;
  if (v385)
  {
    v256 = (unint64_t *)&v385->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v384);
  sub_20BFD265C(&v383);
  v258 = v391;
  if (v391)
  {
    v259 = (unint64_t *)&v391->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v261 = v390;
  if (v390)
  {
    v262 = (unint64_t *)&v390->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v389);
  sub_20BFD265C(&v388);
  v264 = v394;
  if (v394)
  {
    v265 = (unint64_t *)&v394->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = v393;
  if (v393)
  {
    v268 = (unint64_t *)&v393->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v392 + 1);
  sub_20BFD265C(v392);
  v270 = v398;
  if (v398)
  {
    v271 = (unint64_t *)&v398->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v397;
  if (v397)
  {
    v274 = (unint64_t *)&v397->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
  sub_20BFD265C(&v395);
  v276 = v403;
  if (v403)
  {
    v277 = (unint64_t *)&v403->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = v402;
  if (v402)
  {
    v280 = (unint64_t *)&v402->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v400 + 1);
  sub_20BFD265C(&v400);
  v282 = v407;
  if (v407)
  {
    v283 = (unint64_t *)&v407->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = v406;
  if (v406)
  {
    v286 = (unint64_t *)&v406->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v405 + 1);
  sub_20BFD265C(v405);
  v288 = v415;
  if (v415)
  {
    v289 = (unint64_t *)&v415->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
}

void sub_20C781954(_Unwind_Exception *a1)
{
  sub_20BF4C2D8((uint64_t)&STACK[0x928]);
  sub_20C795B28((uint64_t)&STACK[0x230]);
  sub_20C78D390(&STACK[0x470]);
  sub_20C78D390(&STACK[0x4B8]);
  sub_20C78D390(&STACK[0x500]);
  sub_20C78D390(&STACK[0x548]);
  sub_20C78D390(&STACK[0x590]);
  sub_20C78D390(&STACK[0x5D8]);
  sub_20C78D390(&STACK[0x620]);
  sub_20C78D390(&STACK[0x668]);
  sub_20C78D390(&STACK[0x6B0]);
  sub_20C78D390(&STACK[0x6F8]);
  sub_20C78D390(&STACK[0x740]);
  sub_20C78D390(&STACK[0x788]);
  sub_20C78D390(&STACK[0x7D0]);
  sub_20C78D390(&STACK[0x818]);
  sub_20C78D390(&STACK[0x860]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&STACK[0x8E0]);
  _Unwind_Resume(a1);
}

void sub_20C781EBC()
{
  JUMPOUT(0x20C781E20);
}

_DWORD *sub_20C781EC8(double **a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  double *v4;
  uint64_t v5;
  int v6;
  double *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  pxrInternal__aapl__pxrReserved__::TfToken *v25;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  uint64_t *v28;
  uint64_t *v29;
  double v30;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v31;
  std::string *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  BOOL v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v50;
  int v51[5];
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  _DWORD v54[4];
  void **v55;
  int v56;
  int v57;
  char v58;
  _QWORD v59[6];
  uint64_t *v60;
  _QWORD *v61[2];
  uint64_t *v62;
  _QWORD *v63[2];
  int v64[12];
  void *v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::string __str;
  std::string *p_str;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25498CCA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498CCA0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498CC98, "primvars:displayColor");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498CC98, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CCA0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498CCB0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498CCB0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CCA8, "adskDiffuseColor");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CCA8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CCB0);
  }
  sub_20C78BE88((uint64_t)a1, &v65);
  sub_20C78D9CC((uint64_t)&v71, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v65, (pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498CC98);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
  sub_20BFD265C(&v65);
  v4 = *a1;
  if (*((_QWORD *)*a1 + 13))
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)*a1 + 13) + 14))
      v5 = *((_QWORD *)v4 + 12);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  sub_20C78BE88((uint64_t)a1, &__str);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498CC98, (int *)&v65);
  v6 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v5 + 72))(v5, &v65);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
  sub_20BFD265C(&v65);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
  sub_20BFD265C(&__str);
  if (v6)
  {
    sub_20C78BE88((uint64_t)a1, &__str);
    v7 = *a1;
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)*a1 + 13) + 14))
      v8 = *((_QWORD *)v7 + 12);
    else
      v8 = 0;
    sub_20C78DAD4((uint64_t)&v65, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498CC98, v8);
    sub_20BFD3EBC((int *)&v71, (int *)&v65);
    sub_20BFD3F10((int *)&v71 + 1, (int *)&v65 + 1);
    v9 = v67;
    v10 = v66;
    *((_QWORD *)&v66 + 1) = 0;
    v67 = 0;
    v72 = v10;
    v11 = v73;
    v73 = v9;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v68;
    v68 = 0uLL;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    v74 = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v75 = v69;
    v76 = v70;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v67;
    if (v67)
    {
      v22 = (unint64_t *)&v67->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
    sub_20BFD265C(&v65);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
    sub_20BFD265C(&__str);
  }
  if (*(_QWORD *)(v75 + 16))
  {
    v63[0] = 0;
    v63[1] = 0;
    v62 = (uint64_t *)v63;
    sub_20C78DA58(&v71, &v62);
    v61[0] = 0;
    v61[1] = 0;
    v60 = (uint64_t *)v61;
    sub_20BDDC0E4(&v65, "interpretation");
    sub_20BDDC0E4(&__str, "rgba");
    v55 = &v65;
    v24 = sub_20BDDDFDC(&v60, (const void **)&v65, (uint64_t)&unk_20CAC184C, (__int128 **)&v55);
    std::string::operator=((std::string *)(v24 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66) < 0)
      operator delete(v65);
    v25 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1[1] + 16))(v59);
    if ((qword_25498CCA8 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((qword_25498CCA8 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
    v57 = 10;
    v58 = 4;
    LODWORD(__str.__r_.__value_.__l.__data_) = 3;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v60;
    LODWORD(v55) = 0;
    v56 = 0;
    v54[0] = 0;
    v54[2] = 0;
    Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v65, v59, EmptyString, &v57, &__str, &v55, v54);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v59);
    v29 = v62;
    if (v62 != (uint64_t *)v63)
    {
      while (1)
      {
        v30 = *((double *)v29 + 4);
        v31 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *)*((_QWORD *)*a1 + 11);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C54A5C0;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20C795C18;
        p_str = &__str;
        sub_20C78CE00(v31, (uint64_t)&__str, &v71, (Alembic::Abc::v12::OScalarProperty *)&v65, v30);
        v32 = p_str;
        if (p_str == &__str)
          break;
        if (p_str)
        {
          v33 = 5;
LABEL_47:
          (*(void (**)(void))(v32->__r_.__value_.__r.__words[0] + 8 * v33))();
        }
        v34 = (uint64_t *)v29[1];
        if (v34)
        {
          do
          {
            v35 = v34;
            v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (uint64_t *)v29[2];
            v36 = *v35 == (_QWORD)v29;
            v29 = v35;
          }
          while (!v36);
        }
        v29 = v35;
        if (v35 == (uint64_t *)v63)
          goto LABEL_54;
      }
      v32 = &__str;
      v33 = 4;
      goto LABEL_47;
    }
LABEL_54:
    sub_20C78CF50(a1, (uint64_t)&v62);
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::Abc::v12::OScalarProperty *)&v65);
    memset(&__str, 0, sizeof(__str));
    sub_20C78D5B8((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CCA8, (uint64_t)&__str, (uint64_t)&v50);
    v37 = v53;
    if (v53)
    {
      v38 = (unint64_t *)&v53->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v52;
    if (v52)
    {
      v41 = (unint64_t *)&v52->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
    sub_20BFD265C(&v50);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v65);
    sub_20BDE9D48((uint64_t)&v60, v61[0]);
    sub_20BE6100C((uint64_t)&v62, v63[0]);
  }
  else
  {
    v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *(**)(int *__return_ptr))(*(_QWORD *)a1[1] + 16))(v64);
    if ((qword_25498CCA8 & 0xFFFFFFFFFFFFFFF8) != 0)
      v28 = (uint64_t *)((qword_25498CCA8 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v28 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
    sub_20C78FC38((uint64_t *)a1, v64, (pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CCA8, (uint64_t)v28);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v64);
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v73;
  if (v73)
  {
    v47 = (unint64_t *)&v73->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
  return sub_20BFD265C(&v71);
}

void sub_20C7825E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CCB0);
  _Unwind_Resume(a1);
}

void sub_20C78274C(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v2;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v3;
  void *__p;
  char v5;
  int v6[12];

  Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(a1[1] + 8), (uint64_t)v6);
  v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2)
    v2 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3)
    v3 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*((_QWORD *)v3 + 91) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  std::operator+<char>();
  sub_20C78FC38(a1, v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 728), (uint64_t)&__p);
  if (v5 < 0)
    operator delete(__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v6);
}

void sub_20C78281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a16);
  _Unwind_Resume(a1);
}

void sub_20C78284C(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count_vtbl *v11;
  void (__cdecl *v12)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  unsigned __int8 *v34;
  int v35;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v40;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v46;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v64;
  double *v65;
  double v66;
  _QWORD *v67;
  pxrInternal__aapl__pxrReserved__::VtValue *v68;
  const std::type_info *v69;
  char *v70;
  uint64_t v71;
  float32x2_t *v72;
  char *v73;
  _BYTE *v74;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v76;
  uint64_t v77;
  _QWORD **v78;
  pxrInternal__aapl__pxrReserved__::VtValue *v79;
  uint64_t v80;
  _QWORD **v81;
  pxrInternal__aapl__pxrReserved__::VtValue *v82;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v83;
  unint64_t *v84;
  int v85;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD **v95;
  pxrInternal__aapl__pxrReserved__::VtValue *v96;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v97;
  uint64_t **v98;
  int v99;
  uint64_t *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  double *v145;
  double *v146;
  BOOL v147;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void (__cdecl *v155)(std::__shared_weak_count *__hidden);
  int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t **v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  int v208;
  int v209[5];
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  unint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t *v215;
  std::__shared_weak_count *v216;
  char v217[16];
  std::__shared_weak_count *v218;
  std::__shared_weak_count *v219;
  char v220[16];
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  unint64_t v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  _BYTE __p[24];
  std::__shared_weak_count *v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  _QWORD v235[2];
  char v236[200];
  int v237;
  int v238;
  __int128 v239;
  std::__shared_weak_count *v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  int v244;
  int v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  int v250;
  int v251[5];
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  _QWORD v254[3];
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  uint64_t *v257;
  int v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  uint64_t *v262;
  int v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  uint64_t v266;
  uint64_t *v267[3];
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  void (**v270)(Alembic::Abc::v12::OObject *__hidden);
  int v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void (__cdecl *v276)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v277;
  void *v278[2];
  void *v279;
  void *v280;
  __int128 v281;
  void *__src;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  void *v288;
  uint64_t v289;
  int v290;
  _BYTE v291[13];
  void *v292;
  _BYTE *v293;
  uint64_t *v294;
  std::__shared_weak_count *v295;
  unint64_t v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  uint64_t *v299;
  std::__shared_weak_count *v300;
  unint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  std::__shared_weak_count *v304;
  uint64_t *v305;
  std::__shared_weak_count *v306;
  uint64_t v307;

  v307 = *MEMORY[0x24BDAC8D0];
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x398uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v271 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v272, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v273 = *(_QWORD *)(v4 + 32);
    v272 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v270 = off_24C518EC0;
  v274 = v7;
  v275 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)__p);
  sub_20C78AF98(a1, (uint64_t)&v281);
  LODWORD(v267[0]) = 3;
  v267[1] = (uint64_t *)&v281;
  LODWORD(v262) = 0;
  v263 = 0;
  LODWORD(v257) = 0;
  v258 = 0;
  sub_20C79606C((uint64_t)v3, (uint64_t)&v270, (__int128 *)__p, v267, &v262, &v257);
  sub_20C796F44(&v276, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)&v281, *((_QWORD **)&v281 + 1));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v270);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v11 = v10;
  v12 = v276;
  v13 = v277;
  if (v277)
  {
    p_shared_owners = (unint64_t *)&v277->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v10->~__shared_weak_count_0 = v12;
    v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v10->~__shared_weak_count_0 = v276;
    v10->__on_zero_shared = 0;
  }
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54AB38;
  *(_QWORD *)__p = v11;
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24C54AB88;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = v11;
  *(_QWORD *)&__p[8] = v18;
  sub_20C78B5F4((uint64_t)a1, (uint64_t *)__p);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)__p = &__p[8];
  if (a1 + 7 == (_QWORD *)__p)
  {
    v21 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, &__p[8], &__p[8]);
    v21 = *(_QWORD **)&__p[8];
  }
  sub_20BE6100C((uint64_t)__p, v21);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 296), (uint64_t *)v23 + 77, (uint64_t)v267);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 816), (uint64_t *)v25 + 83, (uint64_t)&v262);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 1216), (uint64_t *)v27 + 86, (uint64_t)&v257);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28)
    v28 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 344), (uint64_t *)v29 + 58, (uint64_t)v254);
  v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v30)
    v30 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 336), (uint64_t *)v31 + 58, (uint64_t)&v250);
  v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v32)
    v32 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v33)
    v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v32 + 704), (uint64_t *)v33 + 89, (uint64_t)&v244);
  v34 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  if (!v34)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    v34 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  }
  v35 = *v34;
  v36 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (v35)
  {
    if (!v36)
      v36 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v37)
      v37 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v38)
      v38 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20C7921B4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v36 + 48), (uint64_t *)v37 + 105, (uint64_t *)v38 + 76, (uint64_t)&v237);
  }
  else
  {
    if (!v36)
      v36 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v39)
      v39 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v36 + 48), (uint64_t *)v39 + 105, (uint64_t)&v237);
  }
  if (*(_QWORD *)(v242 + 16))
  {
    v40 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v40)
      v40 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    sub_20C792240(a1, (_QWORD *)v40 + 4);
    v41 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v41)
      v41 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v42 = (_QWORD *)((char *)v41 + 40);
  }
  else
  {
    v43 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    if (!v43)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
      v43 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    }
    v44 = *v43;
    v45 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (v44)
    {
      if (!v45)
        v45 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v46)
        v46 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v47)
        v47 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20C7921B4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v45 + 32), (uint64_t *)v46 + 105, (uint64_t *)v47 + 76, (uint64_t)__p);
    }
    else
    {
      if (!v45)
        v45 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v48)
        v48 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v45 + 32), (uint64_t *)v48 + 105, (uint64_t)__p);
    }
    sub_20BFD3EBC(&v237, (int *)__p);
    sub_20BFD3F10(&v238, (int *)&__p[4]);
    v49 = v228;
    v50 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[16] = 0;
    v228 = 0;
    v239 = v50;
    v51 = v240;
    v240 = v49;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v229;
    v229 = 0uLL;
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
    v241 = v54;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v242 = v230;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
    v243 = v231;
    if (*((_QWORD *)&v229 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v228;
    if (v228)
    {
      v62 = (unint64_t *)&v228->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__p[4]);
    sub_20BFD265C(__p);
    v64 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v64)
      v64 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v42 = (_QWORD *)((char *)v64 + 56);
  }
  sub_20C792240(a1, v42);
  sub_20C7922D8(a1, v254, (uint64_t)&v250);
  sub_20C7977A4((uint64_t)__p);
  v65 = (double *)a1[7];
  if (v65 != (double *)(a1 + 8))
  {
    v206 = &v224;
    v207 = &v302;
    v204 = &v215;
    v205 = &v213;
    v202 = &v299;
    v203 = &v297;
    while (1)
    {
      v66 = v65[4];
      sub_20C795CC4((uint64_t)__p);
      v67 = sub_20C78EDF8((uint64_t)v267, v66);
      v68 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(&v301, v67);
      if (sub_20BF5B118(v68))
      {
        v71 = (v302 & 4) != 0
            ? (*(uint64_t (**)(unint64_t *))((v302 & 0xFFFFFFFFFFFFFFF8) + 168))(&v301)
            : v301;
        v72 = *(float32x2_t **)(v71 + 32);
        v232 = vcvtq_f64_f32(*v72);
        v233 = vcvtq_f64_f32(v72[1]);
        v234 = vcvtq_f64_f32(v72[2]);
      }
      else
      {
        *(_QWORD *)&v281 = "usdAbc/alembicWriter.cpp";
        *((_QWORD *)&v281 + 1) = "_CopySelfBounds";
        __src = (void *)1759;
        v283 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &,"
               " DST *) [DST = Alembic::AbcGeom::v12::OPolyMeshSchema::Sample]";
        LOBYTE(v284) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v301, v69, v70, (uint64_t)v278);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v278, (uint64_t)v291);
        v74 = v291;
        if (SHIBYTE(v292) < 0)
          v74 = *(_BYTE **)v291;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v281, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v73, v74, v202, v203, v204, v205, v206, v207);
        if (SHIBYTE(v292) < 0)
          operator delete(*(void **)v291);
        if (SHIBYTE(v279) < 0)
          operator delete(v278[0]);
      }
      sub_20BF4C2D8((uint64_t)&v301);
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v266);
      v76 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v262, v66);
      LODWORD(v281) = 10;
      BYTE4(v281) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v266, v76, v2, (uint64_t)Converter, (int *)&v281, 0, (uint64_t)&v301);
      if (sub_20C78EEDC((uint64_t)&v301, &v262, (uint64_t)&v266))
      {
        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v302 + 16))(v302);
        sub_20C7951A0(&v281, v77, v301 / 3);
        *(_QWORD *)__p = v281;
        *(_QWORD *)&__p[5] = *(_QWORD *)((char *)&v281 + 5);
        sub_20BDDF7E4(&__p[16], (char *)__src, (uint64_t)v283, (v283 - (_BYTE *)__src) >> 3);
        if (__src)
        {
          v283 = (const char *)__src;
          operator delete(__src);
        }
      }
      v78 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v261);
      v79 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v257, v66);
      LODWORD(v281) = 10;
      BYTE4(v281) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v261, v79, v2, (uint64_t)v78, (int *)&v281, 0, (uint64_t)&v223);
      if (sub_20C78EEDC((uint64_t)&v223, &v257, (uint64_t)&v261))
      {
        v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v224 + 16))(v224);
        sub_20C795234(&v281, v80, v223 / 3);
        v235[0] = v281;
        *(_QWORD *)((char *)v235 + 5) = *(_QWORD *)((char *)&v281 + 5);
        sub_20BDDF7E4(v236, (char *)__src, (uint64_t)v283, (v283 - (_BYTE *)__src) >> 3);
        if (__src)
        {
          v283 = (const char *)__src;
          operator delete(__src);
        }
      }
      sub_20C795D94(v2, v254, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C795ED4, 0, (uint64_t)v220, v66);
      sub_20C795D94(v2, &v250, (uint64_t)__p, (void (*)(_QWORD *, void **))sub_20C795F0C, 0, (uint64_t)v217, v66);
      v81 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v249);
      v82 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v244, v66);
      LODWORD(v281) = 10;
      BYTE4(v281) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v249, v82, v2, (uint64_t)v81, (int *)&v281, 0, (uint64_t)&v212);
      if (sub_20C78EEDC((uint64_t)&v212, &v244, (uint64_t)&v249))
        break;
LABEL_157:
      v95 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v243);
      v96 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v237, v66);
      LODWORD(v281) = 10;
      BYTE4(v281) = 2;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v243, v96, v2, (uint64_t)v95, (int *)&v281, 0, (uint64_t)&v296);
      if (sub_20C78EEDC((uint64_t)&v296, &v237, (uint64_t)&v243))
      {
        v97 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v97)
          v97 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        (*(void (**)(uint64_t **__return_ptr, _QWORD, int *, uint64_t))(*(_QWORD *)v239 + 136))(&v305, v239, &v237, (uint64_t)v97 + 488);
        if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v305))
        {
          if ((v306 & 4) != 0)
            v98 = (uint64_t **)(*(uint64_t (**)(uint64_t **))(((unint64_t)v306 & 0xFFFFFFFFFFFFFFF8)
                                                                    + 168))(&v305);
          else
            v98 = &v305;
          v99 = sub_20C78E510(v98);
        }
        else
        {
          v99 = 127;
        }
        sub_20C79544C(&v296);
        v100 = v299;
        v101 = v300;
        v294 = v299;
        v295 = v300;
        if (v300)
        {
          v102 = (unint64_t *)&v300->__shared_owners_;
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        if (v100)
        {
          sub_20C795A00(v291, *v100, (v100[1] - *v100) >> 2);
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v297 + 16))(v297);
          sub_20C795A94(v278, v104, v296 >> 1);
          sub_20BE2AE24((uint64_t)&v281, (uint64_t *)v278, (uint64_t *)v291, v99);
          sub_20C795FDC(__p, (uint64_t)&v281);
          if (v287)
          {
            v288 = v287;
            operator delete(v287);
          }
          if (__src)
          {
            v283 = (const char *)__src;
            operator delete(__src);
          }
          v105 = v279;
          if (v279)
          {
            v280 = v279;
            goto LABEL_179;
          }
        }
        else
        {
          v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v297 + 16))(v297);
          sub_20C795A94(v291, v106, v296 >> 1);
          *(_QWORD *)&v281 = *(_QWORD *)v291;
          *(_QWORD *)((char *)&v281 + 5) = *(_QWORD *)&v291[5];
          v283 = 0;
          v284 = 0;
          __src = 0;
          sub_20BDE1364(&__src, v292, (uint64_t)v293, (v293 - (_BYTE *)v292) >> 3);
          v285 = 0;
          v286 = 0x100000005;
          v288 = 0;
          v289 = 0;
          v287 = 0;
          v290 = v99;
          sub_20C795FDC(__p, (uint64_t)&v281);
          if (v287)
          {
            v288 = v287;
            operator delete(v287);
          }
          v105 = __src;
          if (__src)
          {
            v283 = (const char *)__src;
LABEL_179:
            operator delete(v105);
          }
        }
        if (v292)
        {
          v293 = v292;
          operator delete(v292);
        }
        if (v101)
        {
          v107 = (unint64_t *)&v101->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        sub_20BF4C2D8((uint64_t)&v305);
      }
      Alembic::AbcGeom::v12::OPolyMeshSchema::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)v276 + 56), (uint64_t)__p);
      v109 = v300;
      if (v300)
      {
        v110 = (unint64_t *)&v300->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v112 = v298;
      if (v298)
      {
        v113 = (unint64_t *)&v298->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = v216;
      if (v216)
      {
        v116 = (unint64_t *)&v216->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = v214;
      if (v214)
      {
        v119 = (unint64_t *)&v214->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = v219;
      if (v219)
      {
        v122 = (unint64_t *)&v219->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = v218;
      if (v218)
      {
        v125 = (unint64_t *)&v218->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      v127 = v222;
      if (v222)
      {
        v128 = (unint64_t *)&v222->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v130 = v221;
      if (v221)
      {
        v131 = (unint64_t *)&v221->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v133 = v226;
      if (v226)
      {
        v134 = (unint64_t *)&v226->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v136 = v225;
      if (v225)
      {
        v137 = (unint64_t *)&v225->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v139 = v304;
      if (v304)
      {
        v140 = (unint64_t *)&v304->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = v303;
      if (v303)
      {
        v143 = (unint64_t *)&v303->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v145 = (double *)*((_QWORD *)v65 + 1);
      if (v145)
      {
        do
        {
          v146 = v145;
          v145 = *(double **)v145;
        }
        while (v145);
      }
      else
      {
        do
        {
          v146 = (double *)*((_QWORD *)v65 + 2);
          v147 = *(_QWORD *)v146 == (_QWORD)v65;
          v65 = v146;
        }
        while (!v147);
      }
      v65 = v146;
      if (v146 == (double *)(a1 + 8))
        goto LABEL_258;
    }
    v83 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v83)
      v83 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v246 + 136))(&v296, v246, &v244, (uint64_t)v83 + 488);
    if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v296))
    {
      if ((v297 & 4) != 0)
        v84 = (unint64_t *)(*(uint64_t (**)(unint64_t *))((v297 & 0xFFFFFFFFFFFFFFF8) + 168))(&v296);
      else
        v84 = &v296;
      v85 = sub_20C78E510(v84);
    }
    else
    {
      v85 = 127;
    }
    sub_20C7978D0(&v212);
    v86 = v215;
    v87 = v216;
    v305 = v215;
    v306 = v216;
    if (v216)
    {
      v88 = (unint64_t *)&v216->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    if (v86)
    {
      sub_20C795A00(v291, *v86, (v86[1] - *v86) >> 2);
      v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 16))(v213);
      sub_20C797DA4(v278, v90, v212 / 3);
      sub_20BE2C9F0((uint64_t)&v281, (uint64_t *)v278, (uint64_t *)v291, v85);
      sub_20C795F44(__p, (char *)&v281);
      if (v287)
      {
        v288 = v287;
        operator delete(v287);
      }
      if (__src)
      {
        v283 = (const char *)__src;
        operator delete(__src);
      }
      v91 = v279;
      if (!v279)
        goto LABEL_149;
      v280 = v279;
    }
    else
    {
      v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 16))(v213);
      sub_20C797DA4(v291, v92, v212 / 3);
      *(_QWORD *)&v281 = *(_QWORD *)v291;
      *(_QWORD *)((char *)&v281 + 5) = *(_QWORD *)&v291[5];
      v283 = 0;
      v284 = 0;
      __src = 0;
      sub_20BDE1364(&__src, v292, (uint64_t)v293, (v293 - (_BYTE *)v292) >> 3);
      v285 = 0;
      v286 = 0x100000005;
      v288 = 0;
      v289 = 0;
      v287 = 0;
      v290 = v85;
      sub_20C795F44(__p, (char *)&v281);
      if (v287)
      {
        v288 = v287;
        operator delete(v287);
      }
      v91 = __src;
      if (!__src)
        goto LABEL_149;
      v283 = (const char *)__src;
    }
    operator delete(v91);
LABEL_149:
    if (v292)
    {
      v293 = v292;
      operator delete(v292);
    }
    if (v87)
    {
      v93 = (unint64_t *)&v87->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    sub_20BF4C2D8((uint64_t)&v296);
    goto LABEL_157;
  }
LABEL_258:
  v148 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v148)
    v148 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v281 = 0uLL;
  __src = 0;
  sub_20C78D5B8((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v148 + 1032), (uint64_t)&v281, (uint64_t)&v208);
  v149 = v211;
  if (v211)
  {
    v150 = (unint64_t *)&v211->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v210;
  if (v210)
  {
    v153 = (unint64_t *)&v210->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v209);
  sub_20BFD265C(&v208);
  v155 = v276;
  v156 = sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)v155 + 56), v156);
  sub_20C797E38(__p);
  v157 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
  if (*((_QWORD *)&v241 + 1))
  {
    v158 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v240;
  if (v240)
  {
    v161 = (unint64_t *)&v240->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v238);
  sub_20BFD265C(&v237);
  v163 = v248;
  if (v248)
  {
    v164 = (unint64_t *)&v248->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v247;
  if (v247)
  {
    v167 = (unint64_t *)&v247->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v245);
  sub_20BFD265C(&v244);
  v169 = v253;
  if (v253)
  {
    v170 = (unint64_t *)&v253->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v252;
  if (v252)
  {
    v173 = (unint64_t *)&v252->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v251);
  sub_20BFD265C(&v250);
  v175 = v256;
  if (v256)
  {
    v176 = (unint64_t *)&v256->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v255;
  if (v255)
  {
    v179 = (unint64_t *)&v255->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v254 + 1);
  sub_20BFD265C(v254);
  v181 = v260;
  if (v260)
  {
    v182 = (unint64_t *)&v260->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v259;
  if (v259)
  {
    v185 = (unint64_t *)&v259->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v257 + 1);
  sub_20BFD265C(&v257);
  v187 = v265;
  if (v265)
  {
    v188 = (unint64_t *)&v265->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = v264;
  if (v264)
  {
    v191 = (unint64_t *)&v264->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v262 + 1);
  sub_20BFD265C(&v262);
  v193 = v269;
  if (v269)
  {
    v194 = (unint64_t *)&v269->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v268;
  if (v268)
  {
    v197 = (unint64_t *)&v268->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v267 + 1);
  sub_20BFD265C(v267);
  v199 = v277;
  if (v277)
  {
    v200 = (unint64_t *)&v277->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
}

void sub_20C7840D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a10, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a11, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a12, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a13, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p)
{
  uint64_t v52;

  sub_20BF4C2D8(v52 - 168);
  sub_20C797E38(&__p);
  sub_20C78D390(&STACK[0x2D8]);
  sub_20C78D390(&STACK[0x320]);
  sub_20C78D390(&STACK[0x368]);
  sub_20C78D390(&STACK[0x3B0]);
  sub_20C78D390(&STACK[0x3F8]);
  sub_20C78D390(&STACK[0x440]);
  sub_20C78D390(&STACK[0x488]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&STACK[0x508]);
  _Unwind_Resume(a1);
}

void sub_20C7844CC()
{
  JUMPOUT(0x20C78447CLL);
}

void sub_20C7844D8(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  double *v30;
  double v31;
  pxrInternal__aapl__pxrReserved__::VtValue *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::VtValue *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  double *v84;
  double *v85;
  BOOL v86;
  uint64_t v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  char v144[16];
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  char v147[16];
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  char v150[16];
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  char v153[16];
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  char v156[16];
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  int64x2_t __p;
  uint64_t v160;
  int v161;
  _QWORD v162[2];
  char v163[24];
  _QWORD v164[2];
  char v165[72];
  int v166;
  int v167[5];
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  int v171;
  int v172[5];
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  int v176;
  int v177[5];
  std::__shared_weak_count *v178;
  std::__shared_weak_count *v179;
  int v180;
  int v181[5];
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  uint64_t *v184;
  int v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  uint64_t *v188;
  int v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  uint64_t *v192[3];
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  int v195;
  int v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  void (**v200)(Alembic::Abc::v12::OObject *__hidden);
  int v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  _BYTE v208[13];
  char *v209;
  char *v210;
  _QWORD v211[3];
  _QWORD *v212;
  void *v213;
  void (*v214)(uint64_t@<X0>, int64_t *@<X8>);
  std::__shared_weak_count *v215;
  uint64_t *v216;
  std::__shared_weak_count *v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x4A8uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v201 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v202, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v203 = *(_QWORD *)(v4 + 32);
    v202 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v200 = off_24C518EC0;
  v204 = v7;
  v205 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)&__p);
  sub_20C78AF98(a1, (uint64_t)&v195);
  LODWORD(v192[0]) = 3;
  v192[1] = (uint64_t *)&v195;
  LODWORD(v188) = 0;
  v189 = 0;
  LODWORD(v184) = 0;
  v185 = 0;
  sub_20C799028((uint64_t)v3, (uint64_t)&v200, (__int128 *)__p.i8, v192, &v188, &v184);
  sub_20C79B2CC(&v206, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)&v195, v197);
  if (SHIBYTE(v160) < 0)
    operator delete((void *)__p.i64[0]);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v200);
  sub_20C797ED8(&__p, &v206);
  sub_20C78B5F4((uint64_t)a1, __p.i64);
  v10 = (std::__shared_weak_count *)__p.i64[1];
  if (__p.i64[1])
  {
    v11 = (unint64_t *)(__p.i64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  __p.i64[1] = 0;
  v160 = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  if (a1 + 7 == (_QWORD *)&__p)
  {
    v13 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, &__p.i64[1], &__p.i64[1]);
    v13 = (_QWORD *)__p.i64[1];
  }
  sub_20BE6100C((uint64_t)&__p, v13);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14)
    v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15)
    v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 296), (uint64_t *)v15 + 77, (uint64_t)&v195);
  v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16)
    v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17)
    v17 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 816), (uint64_t *)v17 + 83, (uint64_t)v192);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18)
    v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1216), (uint64_t *)v19 + 86, (uint64_t)&v188);
  v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20)
    v20 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21)
    v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 704), (uint64_t *)v21 + 89, (uint64_t)&v184);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 224), (uint64_t *)v23 + 58, (uint64_t)&v180);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 1312), (uint64_t *)v25 + 64, (uint64_t)&v176);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 512), (uint64_t *)v27 + 65, (uint64_t)&v171);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28)
    v28 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 720), (uint64_t *)v29 + 58, (uint64_t)&v166);
  sub_20C79BB2C((uint64_t)&__p);
  v30 = (double *)a1[7];
  if (v30 != (double *)(a1 + 8))
  {
    while (1)
    {
      v31 = v30[4];
      sub_20C797FD4(&__p);
      sub_20C7980F4((uint64_t)&v195, (uint64_t)&__p, v31);
      sub_20C798290(v2, v192, (uint64_t)&__p, (uint64_t)v156, v31);
      sub_20C7983E4(v2, &v188, (uint64_t)&__p, (uint64_t)v153, v31);
      sub_20C79853C(v2, (uint64_t)&v184, __p.i8, (uint64_t)v150, v31);
      sub_20C79897C(v2, &v180, (uint64_t)&__p, (uint64_t)v147, v31);
      sub_20C798AC4(v2, (uint64_t)&v176, __p.i8, (uint64_t)v144, v31);
      v213 = &unk_24C54A5C0;
      v214 = sub_20C798EDC;
      v216 = (uint64_t *)&v213;
      v32 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v171, v31);
      *(_DWORD *)v208 = 10;
      v208[4] = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v175, v32, v2, (uint64_t)&v213, (int *)v208, 1, (uint64_t)&v140);
      if (sub_20C78EEDC((uint64_t)&v140, &v171, (uint64_t)&v175))
      {
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 16))(v141);
        sub_20C7953B8(v208, v34, v140);
        v164[0] = *(_QWORD *)v208;
        *(_QWORD *)((char *)v164 + 5) = *(_QWORD *)&v208[5];
        sub_20BDDF7E4(v165, v209, (uint64_t)v210, (v210 - v209) >> 3);
        if (v209)
        {
          v210 = v209;
          operator delete(v209);
        }
      }
      v35 = (void **)v216;
      if (v216 == (uint64_t *)&v213)
        break;
      if (v216)
      {
        v36 = 5;
LABEL_57:
        (*((void (**)(void **, uint64_t))*v35 + v36))(v35, v33);
      }
      v211[0] = &unk_24C54A5C0;
      v211[1] = sub_20C798F84;
      v212 = v211;
      v37 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v166, v31);
      *(_DWORD *)v208 = 1;
      v208[4] = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v170, v37, v2, (uint64_t)v211, (int *)v208, 1, (uint64_t)&v213);
      if (sub_20C78EEDC((uint64_t)&v213, &v166, (uint64_t)&v170))
      {
        v39 = (*(uint64_t (**)(void (*)(uint64_t@<X0>, int64_t *@<X8>)))(*(_QWORD *)v214
                                                                                                  + 16))(v214);
        sub_20C79C250(v208, v39, (uint64_t)v213);
        v162[0] = *(_QWORD *)v208;
        *(_QWORD *)((char *)v162 + 5) = *(_QWORD *)&v208[5];
        sub_20BDDF7E4(v163, v209, (uint64_t)v210, (v210 - v209) >> 3);
        if (v209)
        {
          v210 = v209;
          operator delete(v209);
        }
      }
      v40 = v212;
      if (v212 == v211)
      {
        v40 = v211;
        v41 = 4;
      }
      else
      {
        if (!v212)
          goto LABEL_66;
        v41 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v40 + 8 * v41))(v40, v38);
LABEL_66:
      v161 = 2;
      Alembic::AbcGeom::v12::OCurvesSchema::set((Alembic::AbcGeom::v12::OCurvesSchema *)(v206 + 56), (uint64_t)&__p);
      v42 = v217;
      if (v217)
      {
        p_shared_owners = (unint64_t *)&v217->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v215;
      if (v215)
      {
        v46 = (unint64_t *)&v215->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v143;
      if (v143)
      {
        v49 = (unint64_t *)&v143->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v142;
      if (v142)
      {
        v52 = (unint64_t *)&v142->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v146;
      if (v146)
      {
        v55 = (unint64_t *)&v146->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = v145;
      if (v145)
      {
        v58 = (unint64_t *)&v145->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v149;
      if (v149)
      {
        v61 = (unint64_t *)&v149->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = v148;
      if (v148)
      {
        v64 = (unint64_t *)&v148->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = v152;
      if (v152)
      {
        v67 = (unint64_t *)&v152->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = v151;
      if (v151)
      {
        v70 = (unint64_t *)&v151->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = v155;
      if (v155)
      {
        v73 = (unint64_t *)&v155->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = v154;
      if (v154)
      {
        v76 = (unint64_t *)&v154->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v158;
      if (v158)
      {
        v79 = (unint64_t *)&v158->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v157;
      if (v157)
      {
        v82 = (unint64_t *)&v157->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = (double *)*((_QWORD *)v30 + 1);
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = *(double **)v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (double *)*((_QWORD *)v30 + 2);
          v86 = *(_QWORD *)v85 == (_QWORD)v30;
          v30 = v85;
        }
        while (!v86);
      }
      v30 = v85;
      if (v85 == (double *)(a1 + 8))
        goto LABEL_142;
    }
    v35 = &v213;
    v36 = 4;
    goto LABEL_57;
  }
LABEL_142:
  v87 = v206;
  v88 = sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)(v87 + 56), v88);
  sub_20C79C3CC(&__p);
  v89 = v169;
  if (v169)
  {
    v90 = (unint64_t *)&v169->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v168;
  if (v168)
  {
    v93 = (unint64_t *)&v168->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v167);
  sub_20BFD265C(&v166);
  v95 = v174;
  if (v174)
  {
    v96 = (unint64_t *)&v174->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v173;
  if (v173)
  {
    v99 = (unint64_t *)&v173->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v172);
  sub_20BFD265C(&v171);
  v101 = v179;
  if (v179)
  {
    v102 = (unint64_t *)&v179->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v178;
  if (v178)
  {
    v105 = (unint64_t *)&v178->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v177);
  sub_20BFD265C(&v176);
  v107 = v183;
  if (v183)
  {
    v108 = (unint64_t *)&v183->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v182;
  if (v182)
  {
    v111 = (unint64_t *)&v182->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v181);
  sub_20BFD265C(&v180);
  v113 = v187;
  if (v187)
  {
    v114 = (unint64_t *)&v187->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v186;
  if (v186)
  {
    v117 = (unint64_t *)&v186->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v184 + 1);
  sub_20BFD265C(&v184);
  v119 = v191;
  if (v191)
  {
    v120 = (unint64_t *)&v191->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v190;
  if (v190)
  {
    v123 = (unint64_t *)&v190->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v188 + 1);
  sub_20BFD265C(&v188);
  v125 = v194;
  if (v194)
  {
    v126 = (unint64_t *)&v194->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v193;
  if (v193)
  {
    v129 = (unint64_t *)&v193->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v192 + 1);
  sub_20BFD265C(v192);
  v131 = v199;
  if (v199)
  {
    v132 = (unint64_t *)&v199->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v198;
  if (v198)
  {
    v135 = (unint64_t *)&v198->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v196);
  sub_20BFD265C(&v195);
  v137 = v207;
  if (v207)
  {
    v138 = (unint64_t *)&v207->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
}

void sub_20C7853F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C7856E8(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  double *v32;
  double v33;
  pxrInternal__aapl__pxrReserved__::VtValue *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::VtValue *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void **v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::VtValue *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void **v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  double *v91;
  double *v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char v153[16];
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  char v156[16];
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  char v159[16];
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  char v162[16];
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  char v165[16];
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  int64x2_t __p;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174[5];
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  int v178;
  int v179[5];
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  int v183;
  int v184[5];
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  int v188;
  int v189[5];
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  int v192;
  int v193[5];
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  uint64_t *v196;
  int v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  uint64_t *v200;
  int v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  uint64_t *v204[3];
  std::__shared_weak_count *v205;
  std::__shared_weak_count *v206;
  int v207;
  int v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  void (**v212)(Alembic::Abc::v12::OObject *__hidden);
  int v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  char v220[8];
  uint64_t v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  int v224;
  char v225;
  void *v226;
  void (*v227)(_QWORD *@<X0>, const char *@<X1>, char *@<X2>, _QWORD *@<X8>);
  void **v228;
  uint64_t v229;

  v229 = *MEMORY[0x24BDAC8D0];
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x4A8uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v213 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v214, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v215 = *(_QWORD *)(v4 + 32);
    v214 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v212 = off_24C518EC0;
  v216 = v7;
  v217 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)&__p);
  sub_20C78AF98(a1, (uint64_t)&v207);
  LODWORD(v204[0]) = 3;
  v204[1] = (uint64_t *)&v207;
  LODWORD(v200) = 0;
  v201 = 0;
  LODWORD(v196) = 0;
  v197 = 0;
  sub_20C799028((uint64_t)v3, (uint64_t)&v212, (__int128 *)__p.i8, v204, &v200, &v196);
  sub_20C79B2CC(&v218, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)&v207, v209);
  if (SHIBYTE(v169) < 0)
    operator delete((void *)__p.i64[0]);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v212);
  sub_20C797ED8(&__p, &v218);
  sub_20C78B5F4((uint64_t)a1, __p.i64);
  v10 = (std::__shared_weak_count *)__p.i64[1];
  if (__p.i64[1])
  {
    v11 = (unint64_t *)(__p.i64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  __p.i64[1] = 0;
  v169 = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  if (a1 + 7 == (_QWORD *)&__p)
  {
    v13 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, &__p.i64[1], &__p.i64[1]);
    v13 = (_QWORD *)__p.i64[1];
  }
  sub_20BE6100C((uint64_t)&__p, v13);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14)
    v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15)
    v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 296), (uint64_t *)v15 + 77, (uint64_t)&v207);
  v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16)
    v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17)
    v17 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 816), (uint64_t *)v17 + 83, (uint64_t)v204);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18)
    v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1216), (uint64_t *)v19 + 86, (uint64_t)&v200);
  v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20)
    v20 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21)
    v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 704), (uint64_t *)v21 + 89, (uint64_t)&v196);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 224), (uint64_t *)v23 + 58, (uint64_t)&v192);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 1312), (uint64_t *)v25 + 64, (uint64_t)&v188);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 32), (uint64_t *)v27 + 11, (uint64_t)&v183);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28)
    v28 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 1128), (uint64_t *)v29 + 11, (uint64_t)&v178);
  v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v30)
    v30 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 1320), (uint64_t *)v31 + 11, (uint64_t)&v173);
  sub_20C79BB2C((uint64_t)&__p);
  v32 = (double *)a1[7];
  if (v32 != (double *)(a1 + 8))
  {
    do
    {
      v33 = v32[4];
      sub_20C797FD4(&__p);
      sub_20C7980F4((uint64_t)&v207, (uint64_t)&__p, v33);
      sub_20C798290(v2, v204, (uint64_t)&__p, (uint64_t)v165, v33);
      sub_20C7983E4(v2, &v200, (uint64_t)&__p, (uint64_t)v162, v33);
      sub_20C79853C(v2, (uint64_t)&v196, __p.i8, (uint64_t)v159, v33);
      sub_20C79897C(v2, &v192, (uint64_t)&__p, (uint64_t)v156, v33);
      sub_20C798AC4(v2, (uint64_t)&v188, __p.i8, (uint64_t)v153, v33);
      v226 = &unk_24C54A5C0;
      v227 = sub_20C79C4AC;
      v228 = &v226;
      v34 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v183, v33);
      v224 = 1;
      v225 = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v187, v34, v2, (uint64_t)&v226, &v224, 1, (uint64_t)v220);
      if (sub_20C78EEDC((uint64_t)v220, &v183, (uint64_t)&v187))
        v172 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
      v35 = v223;
      if (v223)
      {
        p_shared_owners = (unint64_t *)&v223->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = v222;
      if (v222)
      {
        v39 = (unint64_t *)&v222->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v228;
      if (v228 == &v226)
      {
        v41 = &v226;
        v42 = 4;
      }
      else
      {
        if (!v228)
          goto LABEL_71;
        v42 = 5;
      }
      (*((void (**)(void))*v41 + v42))();
LABEL_71:
      v226 = &unk_24C54A5C0;
      v227 = sub_20C79C6F8;
      v228 = &v226;
      v43 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v178, v33);
      v224 = 1;
      v225 = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v182, v43, v2, (uint64_t)&v226, &v224, 1, (uint64_t)v220);
      if (sub_20C78EEDC((uint64_t)v220, &v178, (uint64_t)&v182))
        v170 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
      v44 = v223;
      if (v223)
      {
        v45 = (unint64_t *)&v223->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v222;
      if (v222)
      {
        v48 = (unint64_t *)&v222->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = v228;
      if (v228 == &v226)
      {
        v50 = &v226;
        v51 = 4;
      }
      else
      {
        if (!v228)
          goto LABEL_88;
        v51 = 5;
      }
      (*((void (**)(void))*v50 + v51))();
LABEL_88:
      v226 = &unk_24C54A5C0;
      v227 = sub_20C79C8B8;
      v228 = &v226;
      v52 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v173, v33);
      v224 = 1;
      v225 = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v177, v52, v2, (uint64_t)&v226, &v224, 1, (uint64_t)v220);
      if (sub_20C78EEDC((uint64_t)v220, &v173, (uint64_t)&v177))
        v171 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
      v53 = v223;
      if (v223)
      {
        v54 = (unint64_t *)&v223->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = v222;
      if (v222)
      {
        v57 = (unint64_t *)&v222->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v228;
      if (v228 == &v226)
      {
        v59 = &v226;
        v60 = 4;
      }
      else
      {
        if (!v228)
          goto LABEL_105;
        v60 = 5;
      }
      (*((void (**)(void))*v59 + v60))();
LABEL_105:
      Alembic::AbcGeom::v12::OCurvesSchema::set((Alembic::AbcGeom::v12::OCurvesSchema *)(v218 + 56), (uint64_t)&__p);
      v61 = v155;
      if (v155)
      {
        v62 = (unint64_t *)&v155->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = v154;
      if (v154)
      {
        v65 = (unint64_t *)&v154->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v158;
      if (v158)
      {
        v68 = (unint64_t *)&v158->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v157;
      if (v157)
      {
        v71 = (unint64_t *)&v157->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v161;
      if (v161)
      {
        v74 = (unint64_t *)&v161->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v160;
      if (v160)
      {
        v77 = (unint64_t *)&v160->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = v164;
      if (v164)
      {
        v80 = (unint64_t *)&v164->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = v163;
      if (v163)
      {
        v83 = (unint64_t *)&v163->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = v167;
      if (v167)
      {
        v86 = (unint64_t *)&v167->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = v166;
      if (v166)
      {
        v89 = (unint64_t *)&v166->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v91 = (double *)*((_QWORD *)v32 + 1);
      if (v91)
      {
        do
        {
          v92 = v91;
          v91 = *(double **)v91;
        }
        while (v91);
      }
      else
      {
        do
        {
          v92 = (double *)*((_QWORD *)v32 + 2);
          v93 = *(_QWORD *)v92 == (_QWORD)v32;
          v32 = v92;
        }
        while (!v93);
      }
      v32 = v92;
    }
    while (v92 != (double *)(a1 + 8));
  }
  v94 = v218;
  v95 = sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)(v94 + 56), v95);
  sub_20C79C3CC(&__p);
  v96 = v176;
  if (v176)
  {
    v97 = (unint64_t *)&v176->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v175;
  if (v175)
  {
    v100 = (unint64_t *)&v175->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v174);
  sub_20BFD265C(&v173);
  v102 = v181;
  if (v181)
  {
    v103 = (unint64_t *)&v181->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v180;
  if (v180)
  {
    v106 = (unint64_t *)&v180->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v179);
  sub_20BFD265C(&v178);
  v108 = v186;
  if (v186)
  {
    v109 = (unint64_t *)&v186->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v185;
  if (v185)
  {
    v112 = (unint64_t *)&v185->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v184);
  sub_20BFD265C(&v183);
  v114 = v191;
  if (v191)
  {
    v115 = (unint64_t *)&v191->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v190;
  if (v190)
  {
    v118 = (unint64_t *)&v190->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v189);
  sub_20BFD265C(&v188);
  v120 = v195;
  if (v195)
  {
    v121 = (unint64_t *)&v195->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v194;
  if (v194)
  {
    v124 = (unint64_t *)&v194->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v193);
  sub_20BFD265C(&v192);
  v126 = v199;
  if (v199)
  {
    v127 = (unint64_t *)&v199->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v198;
  if (v198)
  {
    v130 = (unint64_t *)&v198->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v196 + 1);
  sub_20BFD265C(&v196);
  v132 = v203;
  if (v203)
  {
    v133 = (unint64_t *)&v203->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v202;
  if (v202)
  {
    v136 = (unint64_t *)&v202->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v200 + 1);
  sub_20BFD265C(&v200);
  v138 = v206;
  if (v206)
  {
    v139 = (unint64_t *)&v206->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v205;
  if (v205)
  {
    v142 = (unint64_t *)&v205->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v204 + 1);
  sub_20BFD265C(v204);
  v144 = v211;
  if (v211)
  {
    v145 = (unint64_t *)&v211->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v210;
  if (v210)
  {
    v148 = (unint64_t *)&v210->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v208);
  sub_20BFD265C(&v207);
  v150 = v219;
  if (v219)
  {
    v151 = (unint64_t *)&v219->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
}

void sub_20C786740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C7869A8(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  const char *Text;
  char *v29;
  double *v30;
  double v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v37;
  _QWORD **Converter;
  char *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  double *v85;
  double *v86;
  BOOL v87;
  uint64_t v88;
  int v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _BYTE v135[24];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  std::__shared_weak_count *v139;
  _QWORD v140[2];
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  int64x2_t __p;
  _QWORD v148[2];
  char v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153[5];
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  int v156;
  int v157[5];
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  int v160;
  int v161[5];
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  int v164;
  _DWORD v165[5];
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t *v169;
  int v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  uint64_t *v173;
  int v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  uint64_t *v177[3];
  std::__shared_weak_count *v178;
  std::__shared_weak_count *v179;
  void (**v180)(Alembic::Abc::v12::OObject *__hidden);
  int v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  int v188;
  char v189;
  _QWORD v190[2];
  _QWORD v191[2];
  _QWORD v192[4];

  v192[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x4A8uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v181 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v182, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v183 = *(_QWORD *)(v4 + 32);
    v182 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v180 = off_24C518EC0;
  v184 = v7;
  v185 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)&__p);
  sub_20C78AF98(a1, (uint64_t)v140);
  LODWORD(v177[0]) = 3;
  v177[1] = v140;
  LODWORD(v173) = 0;
  v174 = 0;
  LODWORD(v169) = 0;
  v170 = 0;
  sub_20C799028((uint64_t)v3, (uint64_t)&v180, (__int128 *)__p.i8, v177, &v173, &v169);
  sub_20C79B2CC(&v186, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)v140, (_QWORD *)v140[1]);
  if (SHIBYTE(v148[0]) < 0)
    operator delete((void *)__p.i64[0]);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v180);
  sub_20C797ED8(&__p, &v186);
  sub_20C78B5F4((uint64_t)a1, __p.i64);
  v10 = (std::__shared_weak_count *)__p.i64[1];
  if (__p.i64[1])
  {
    v11 = (unint64_t *)(__p.i64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  __p.i64[1] = 0;
  v148[0] = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  if (a1 + 7 == (_QWORD *)&__p)
  {
    v13 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, &__p.i64[1], &__p.i64[1]);
    v13 = (_QWORD *)__p.i64[1];
  }
  sub_20BE6100C((uint64_t)&__p, v13);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14)
    v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15)
    v15 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 296), (uint64_t *)v15 + 77, (uint64_t)v177);
  v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16)
    v16 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17)
    v17 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 816), (uint64_t *)v17 + 83, (uint64_t)&v173);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18)
    v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1048), (uint64_t *)v19 + 86, (uint64_t)&v169);
  v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20)
    v20 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21)
    v21 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 1216), (uint64_t *)v21 + 86, (uint64_t)&v164);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 704), (uint64_t *)v23 + 89, (uint64_t)&v160);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 224), (uint64_t *)v25 + 58, (uint64_t)&v156);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 1312), (uint64_t *)v27 + 64, (uint64_t)&v152);
  if (*(_QWORD *)(v168 + 16))
  {
    __p.i64[0] = (uint64_t)"usdAbc/alembicWriter.cpp";
    __p.i64[1] = (uint64_t)"_WriteHermiteCurves";
    v148[0] = 3378;
    v148[1] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_WriteHermiteCurves(_PrimWriterContext *)";
    v149 = 0;
    sub_20BFD6E54(v140, &v164);
    sub_20BFD6EA4((_DWORD *)v140 + 1, v165);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v140);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Writing '%s' from HermiteCurves to AbcGeom::OCurvesSchema is undefined.", v29, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v140 + 1);
    sub_20BFD265C(v140);
  }
  sub_20C79BB2C((uint64_t)&__p);
  v30 = (double *)a1[7];
  if (v30 != (double *)(a1 + 8))
  {
    do
    {
      v31 = v30[4];
      sub_20C797FD4(&__p);
      sub_20C7980F4((uint64_t)v177, (uint64_t)&__p, v31);
      v32 = sub_20C78EDF8((uint64_t)&v173, v31);
      sub_20BF4C6D0(v192, v32);
      v33 = sub_20C78EDF8((uint64_t)&v169, v31);
      sub_20BF4C6D0(v191, v33);
      sub_20C78F098(&v144);
      v34 = sub_20BF5B684((pxrInternal__aapl__pxrReserved__::VtValue *)v192);
      v35 = (__int128 *)sub_20BF5B684((pxrInternal__aapl__pxrReserved__::VtValue *)v191);
      sub_20C79CB10((uint64_t)v140, v34, v35);
      if (v140[0])
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::Interleave((pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays *)v140, (uint64_t)&v137);
        v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v36)
          v36 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v36 + 664);
        Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v36 + 664));
        v190[1] = off_24C51EC58;
        v39 = (char *)operator new(0x30uLL);
        v40 = v138;
        *(_OWORD *)v39 = v137;
        *((_OWORD *)v39 + 1) = v40;
        v41 = v139;
        *((_QWORD *)v39 + 4) = v139;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41[-1].__shared_owners_;
          if (*((_QWORD *)v39 + 3))
            p_shared_owners = (unint64_t *)*((_QWORD *)v39 + 3);
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
        }
        v44 = (unsigned int *)(v39 + 40);
        atomic_store(0, (unsigned int *)v39 + 10);
        v190[0] = v39;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v188 = 10;
        v189 = 3;
        sub_20C78E7FC(v37, (pxrInternal__aapl__pxrReserved__::VtValue *)v190, v2, (uint64_t)Converter, &v188, 0, (uint64_t)v135);
        v144 = *(_QWORD *)v135;
        v46 = *(_OWORD *)&v135[8];
        *(_QWORD *)&v135[8] = 0;
        *(_QWORD *)&v135[16] = 0;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        v145 = v46;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v136;
        v136 = 0uLL;
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        v146 = v50;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        if (*((_QWORD *)&v136 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v135[16];
        if (*(_QWORD *)&v135[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v135[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        sub_20BF4C2D8((uint64_t)v190);
        if (sub_20C78EEDC((uint64_t)&v144, &v173, (uint64_t)v37))
        {
          v60 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v145 + 16))(v145);
          sub_20C7951A0(v135, v60, v144 / 3);
          __p.i64[0] = *(_QWORD *)v135;
          *(uint64_t *)((char *)__p.i64 + 5) = *(_QWORD *)&v135[5];
          sub_20BDDF7E4((char *)v148, *(char **)&v135[16], v136, (uint64_t)(v136 - *(_QWORD *)&v135[16]) >> 3);
          if (*(_QWORD *)&v135[16])
          {
            *(_QWORD *)&v136 = *(_QWORD *)&v135[16];
            operator delete(*(void **)&v135[16]);
          }
        }
        sub_20BF5618C((uint64_t)&v137);
      }
      sub_20BF5618C((uint64_t)&v143);
      sub_20BF5618C((uint64_t)v140);
      sub_20C79853C(v2, (uint64_t)&v160, __p.i8, (uint64_t)v140, v31);
      sub_20C79897C(v2, &v156, (uint64_t)&__p, (uint64_t)&v137, v31);
      sub_20C798AC4(v2, (uint64_t)&v152, __p.i8, (uint64_t)v135, v31);
      v151 = 4;
      v150 = 0;
      Alembic::AbcGeom::v12::OCurvesSchema::set((Alembic::AbcGeom::v12::OCurvesSchema *)(v186 + 56), (uint64_t)&__p);
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
      if (*((_QWORD *)&v136 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = *(std::__shared_weak_count **)&v135[16];
      if (*(_QWORD *)&v135[16])
      {
        v65 = (unint64_t *)(*(_QWORD *)&v135[16] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v139;
      if (v139)
      {
        v68 = (unint64_t *)&v139->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v138;
      if ((_QWORD)v138)
      {
        v71 = (unint64_t *)(v138 + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v142;
      if (v142)
      {
        v74 = (unint64_t *)&v142->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v141;
      if (v141)
      {
        v77 = (unint64_t *)&v141->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
      if (*((_QWORD *)&v145 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      sub_20BF4C2D8((uint64_t)v191);
      sub_20BF4C2D8((uint64_t)v192);
      v85 = (double *)*((_QWORD *)v30 + 1);
      if (v85)
      {
        do
        {
          v86 = v85;
          v85 = *(double **)v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (double *)*((_QWORD *)v30 + 2);
          v87 = *(_QWORD *)v86 == (_QWORD)v30;
          v30 = v86;
        }
        while (!v87);
      }
      v30 = v86;
    }
    while (v86 != (double *)(a1 + 8));
  }
  v88 = v186;
  v89 = sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)(v88 + 56), v89);
  sub_20C79C3CC(&__p);
  v90 = v155;
  if (v155)
  {
    v91 = (unint64_t *)&v155->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v154;
  if (v154)
  {
    v94 = (unint64_t *)&v154->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
  sub_20BFD265C(&v152);
  v96 = v159;
  if (v159)
  {
    v97 = (unint64_t *)&v159->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v158;
  if (v158)
  {
    v100 = (unint64_t *)&v158->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v157);
  sub_20BFD265C(&v156);
  v102 = v163;
  if (v163)
  {
    v103 = (unint64_t *)&v163->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v162;
  if (v162)
  {
    v106 = (unint64_t *)&v162->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v161);
  sub_20BFD265C(&v160);
  v108 = v167;
  if (v167)
  {
    v109 = (unint64_t *)&v167->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v166;
  if (v166)
  {
    v112 = (unint64_t *)&v166->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v165);
  sub_20BFD265C(&v164);
  v114 = v172;
  if (v172)
  {
    v115 = (unint64_t *)&v172->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v171;
  if (v171)
  {
    v118 = (unint64_t *)&v171->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v169 + 1);
  sub_20BFD265C(&v169);
  v120 = v176;
  if (v176)
  {
    v121 = (unint64_t *)&v176->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v175;
  if (v175)
  {
    v124 = (unint64_t *)&v175->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v173 + 1);
  sub_20BFD265C(&v173);
  v126 = v179;
  if (v179)
  {
    v127 = (unint64_t *)&v179->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v178;
  if (v178)
  {
    v130 = (unint64_t *)&v178->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v177 + 1);
  sub_20BFD265C(v177);
  v132 = v187;
  if (v187)
  {
    v133 = (unint64_t *)&v187->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
}

void sub_20C787818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a11, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  uint64_t v41;

  sub_20BF5618C((uint64_t)&a21);
  sub_20C79CAD8((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a12);
  sub_20BF4C2D8(v41 - 144);
  sub_20BF4C2D8(v41 - 128);
  sub_20C79C3CC(&__p);
  sub_20C78D390(&STACK[0x338]);
  sub_20C78D390(&STACK[0x380]);
  sub_20C78D390(&STACK[0x3C8]);
  sub_20C78D390(&STACK[0x410]);
  sub_20C78D390(&STACK[0x458]);
  sub_20C78D390(&STACK[0x4A0]);
  sub_20C78D390(&STACK[0x4E8]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v41 - 184));
  _Unwind_Resume(a1);
}

void sub_20C787A70(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count_vtbl *v11;
  void (__cdecl *v12)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  double *v32;
  char v33;
  double v34;
  _QWORD *v35;
  pxrInternal__aapl__pxrReserved__::VtValue *v36;
  const std::type_info *v37;
  char *v38;
  uint64_t v39;
  float32x2_t *v40;
  char *v41;
  __int128 *v42;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v44;
  uint64_t v45;
  _QWORD **v46;
  pxrInternal__aapl__pxrReserved__::VtValue *v47;
  uint64_t v48;
  _QWORD **v49;
  pxrInternal__aapl__pxrReserved__::VtValue *v50;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v51;
  uint64_t *v52;
  int v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  pxrInternal__aapl__pxrReserved__::VtValue *v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  double *v91;
  double *v92;
  BOOL v93;
  void (__cdecl *v94)(std::__shared_weak_count *__hidden);
  int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t *v132;
  std::__shared_weak_count *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  __int128 __p;
  void *v139[3];
  _QWORD v140[2];
  void *v141[3];
  _BYTE v142[13];
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  int v152;
  int v153[5];
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  uint64_t *v163;
  int v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  uint64_t *v168;
  int v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  uint64_t *v173[3];
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  void (**v176)(Alembic::Abc::v12::OObject *__hidden);
  int v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (__cdecl *v182)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v183;
  __int128 v184;
  void *__src;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  uint64_t v192;
  int v193;
  __int128 v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  uint64_t *v198;
  std::__shared_weak_count *v199;
  unint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  void *v205;
  void **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x288uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v177 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v178, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v179 = *(_QWORD *)(v4 + 32);
    v178 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v176 = off_24C518EC0;
  v180 = v7;
  v181 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)&__p);
  sub_20C78AF98(a1, (uint64_t)&v184);
  LODWORD(v173[0]) = 3;
  v173[1] = (uint64_t *)&v184;
  LODWORD(v168) = 0;
  v169 = 0;
  LODWORD(v163) = 0;
  v164 = 0;
  sub_20C79CE84((uint64_t)v3, (uint64_t)&v176, &__p, v173, &v168, &v163);
  sub_20C79DBF4(&v182, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)&v184, *((_QWORD **)&v184 + 1));
  if (SHIBYTE(v139[0]) < 0)
    operator delete((void *)__p);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v176);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v11 = v10;
  v12 = v182;
  v13 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v10->~__shared_weak_count_0 = v12;
    v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v10->~__shared_weak_count_0 = v182;
    v10->__on_zero_shared = 0;
  }
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54AFD8;
  *(_QWORD *)&__p = v11;
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24C54B028;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = v11;
  *((_QWORD *)&__p + 1) = v18;
  sub_20C78B5F4((uint64_t)a1, (uint64_t *)&__p);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  *((_QWORD *)&__p + 1) = 0;
  v139[0] = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  if (a1 + 7 == (_QWORD *)&__p)
  {
    v21 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, (_QWORD *)&__p + 1, (_QWORD *)&__p + 1);
    v21 = (_QWORD *)*((_QWORD *)&__p + 1);
  }
  sub_20BE6100C((uint64_t)&__p, v21);
  v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22)
    v22 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23)
    v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 296), (uint64_t *)v23 + 77, (uint64_t)v173);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 816), (uint64_t *)v25 + 83, (uint64_t)&v168);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 1216), (uint64_t *)v27 + 86, (uint64_t)&v163);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28)
    v28 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 1312), (uint64_t *)v29 + 64, (uint64_t)&v157);
  v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v30)
    v30 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 448), (uint64_t *)v31 + 61, (uint64_t)&v152);
  sub_20C79E454((uint64_t)&__p);
  v32 = (double *)a1[7];
  if (v32 != (double *)(a1 + 8))
  {
    v33 = 1;
    while (1)
    {
      v34 = v32[4];
      sub_20C79CC34((uint64_t)&__p);
      v35 = sub_20C78EDF8((uint64_t)v173, v34);
      v36 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(&v200, v35);
      if (sub_20BF5B118(v36))
      {
        v39 = (v201 & 4) != 0
            ? (*(uint64_t (**)(unint64_t *))((v201 & 0xFFFFFFFFFFFFFFF8) + 168))(&v200)
            : v200;
        v40 = *(float32x2_t **)(v39 + 32);
        v149 = vcvtq_f64_f32(*v40);
        v150 = vcvtq_f64_f32(v40[1]);
        v151 = vcvtq_f64_f32(v40[2]);
      }
      else
      {
        *(_QWORD *)&v184 = "usdAbc/alembicWriter.cpp";
        *((_QWORD *)&v184 + 1) = "_CopySelfBounds";
        __src = (void *)1759;
        v186 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &,"
               " DST *) [DST = Alembic::AbcGeom::v12::OPointsSchema::Sample]";
        LOBYTE(v187) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v200, v37, v38, (uint64_t)v204);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v204, (uint64_t)&v194);
        v42 = &v194;
        if (SHIBYTE(v195) < 0)
          v42 = (__int128 *)v194;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v184, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v41, v42);
        if (SHIBYTE(v195) < 0)
          operator delete((void *)v194);
        if (SHIBYTE(v205) < 0)
          operator delete(v204[0]);
      }
      sub_20BF4C2D8((uint64_t)&v200);
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v172);
      v44 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v168, v34);
      LODWORD(v184) = 10;
      BYTE4(v184) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v172, v44, v2, (uint64_t)Converter, (int *)&v184, 0, (uint64_t)&v200);
      if (sub_20C78EEDC((uint64_t)&v200, &v168, (uint64_t)&v172))
      {
        v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 16))(v201);
        sub_20C7951A0(&v184, v45, v200 / 3);
        *(_QWORD *)&__p = v184;
        *(_QWORD *)((char *)&__p + 5) = *(_QWORD *)((char *)&v184 + 5);
        sub_20BDDF7E4((char *)v139, (char *)__src, (uint64_t)v186, (v186 - (_BYTE *)__src) >> 3);
        if (__src)
        {
          v186 = (const char *)__src;
          operator delete(__src);
        }
      }
      v46 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v167);
      v47 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v163, v34);
      LODWORD(v184) = 10;
      BYTE4(v184) = 3;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v167, v47, v2, (uint64_t)v46, (int *)&v184, 0, (uint64_t)&v134);
      if (sub_20C78EEDC((uint64_t)&v134, &v163, (uint64_t)&v167))
      {
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
        sub_20C795234(&v184, v48, v134 / 3);
        v140[0] = v184;
        *(_QWORD *)((char *)v140 + 5) = *(_QWORD *)((char *)&v184 + 5);
        sub_20BDDF7E4((char *)v141, (char *)__src, (uint64_t)v186, (v186 - (_BYTE *)__src) >> 3);
        if (__src)
        {
          v186 = (const char *)__src;
          operator delete(__src);
        }
      }
      v49 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v162);
      v50 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v157, v34);
      LODWORD(v184) = 10;
      BYTE4(v184) = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v162, v50, v2, (uint64_t)v49, (int *)&v184, 0, (uint64_t)&v129);
      if (sub_20C78EEDC((uint64_t)&v129, &v157, (uint64_t)&v162))
        break;
LABEL_94:
      v204[0] = &unk_24C54A5C0;
      v204[1] = sub_20C79CD6C;
      v206 = v204;
      v63 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v152, v34);
      LODWORD(v184) = 7;
      BYTE4(v184) = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v156, v63, v2, (uint64_t)v204, (int *)&v184, 1, (uint64_t)&v194);
      if (sub_20C78EEDC((uint64_t)&v194, &v152, (uint64_t)&v156))
      {
        v64 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v194 + 1) + 16))(*((_QWORD *)&v194 + 1));
        sub_20C79E628(&v184, v64, v194);
        *(_QWORD *)v142 = v184;
        *(_QWORD *)&v142[5] = *(_QWORD *)((char *)&v184 + 5);
        sub_20BDDF7E4((char *)&v143, (char *)__src, (uint64_t)v186, (v186 - (_BYTE *)__src) >> 3);
        if (__src)
        {
          v186 = (const char *)__src;
          operator delete(__src);
        }
      }
      v65 = v206;
      if (v206 == v204)
      {
        v65 = v204;
        v66 = 4;
      }
      else
      {
        if (!v206)
          goto LABEL_102;
        v66 = 5;
      }
      (*((void (**)(void))*v65 + v66))();
LABEL_102:
      if ((v33 & 1) == 0)
        goto LABEL_106;
      if (*(_DWORD *)&v142[8] == 127 || !*(_QWORD *)v142 && v144 == v143)
      {
        sub_20C79E628(&v184, (uint64_t)&unk_20CB0B710, 0);
        *(_QWORD *)v142 = v184;
        *(_QWORD *)&v142[5] = *(_QWORD *)((char *)&v184 + 5);
        sub_20BDDF7E4((char *)&v143, (char *)__src, (uint64_t)v186, (v186 - (_BYTE *)__src) >> 3);
        if (__src)
        {
          v186 = (const char *)__src;
          operator delete(__src);
        }
LABEL_106:
        v33 = 0;
        goto LABEL_110;
      }
      v33 = 1;
LABEL_110:
      Alembic::AbcGeom::v12::OPointsSchema::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)v182 + 56), (uint64_t)&__p);
      v67 = v197;
      if (v197)
      {
        v68 = (unint64_t *)&v197->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v195;
      if (v195)
      {
        v71 = (unint64_t *)&v195->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v133;
      if (v133)
      {
        v74 = (unint64_t *)&v133->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v131;
      if (v131)
      {
        v77 = (unint64_t *)&v131->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = v137;
      if (v137)
      {
        v80 = (unint64_t *)&v137->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = v136;
      if (v136)
      {
        v83 = (unint64_t *)&v136->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = v203;
      if (v203)
      {
        v86 = (unint64_t *)&v203->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = v202;
      if (v202)
      {
        v89 = (unint64_t *)&v202->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v91 = (double *)*((_QWORD *)v32 + 1);
      if (v91)
      {
        do
        {
          v92 = v91;
          v91 = *(double **)v91;
        }
        while (v91);
      }
      else
      {
        do
        {
          v92 = (double *)*((_QWORD *)v32 + 2);
          v93 = *(_QWORD *)v92 == (_QWORD)v32;
          v32 = v92;
        }
        while (!v93);
      }
      v32 = v92;
      if (v92 == (double *)(a1 + 8))
        goto LABEL_159;
    }
    v51 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v51)
      v51 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, uint64_t))(*(_QWORD *)v159 + 136))(&v207, v159, &v157, (uint64_t)v51 + 488);
    if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v207))
    {
      if ((v208 & 4) != 0)
        v52 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v208 & 0xFFFFFFFFFFFFFFF8) + 168))(&v207);
      else
        v52 = &v207;
      v53 = sub_20C78E510(v52);
    }
    else
    {
      v53 = 127;
    }
    sub_20C79BCF8((unint64_t *)&v129);
    v54 = v132;
    v55 = v133;
    v198 = v132;
    v199 = v133;
    if (v133)
    {
      v56 = (unint64_t *)&v133->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    if (v54)
    {
      sub_20C795A00(&v194, *v54, (v54[1] - *v54) >> 2);
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130);
      sub_20C7953B8(v204, v58, v129);
      sub_20BE2DF60((uint64_t)&v184, (uint64_t *)v204, (uint64_t *)&v194, v53);
      sub_20C79CCDC((char *)&__p, (uint64_t)&v184);
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
      if (__src)
      {
        v186 = (const char *)__src;
        operator delete(__src);
      }
      v59 = v205;
      if (!v205)
        goto LABEL_86;
      v206 = (void **)v205;
    }
    else
    {
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130);
      sub_20C7953B8(&v194, v60, v129);
      *(_QWORD *)&v184 = v194;
      *(_QWORD *)((char *)&v184 + 5) = *(_QWORD *)((char *)&v194 + 5);
      v186 = 0;
      v187 = 0;
      __src = 0;
      sub_20BDE1364(&__src, v195, (uint64_t)v196, ((char *)v196 - (char *)v195) >> 3);
      v188 = 0;
      v189 = 0x100000005;
      v191 = 0;
      v192 = 0;
      v190 = 0;
      v193 = v53;
      sub_20C79CCDC((char *)&__p, (uint64_t)&v184);
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
      v59 = __src;
      if (!__src)
        goto LABEL_86;
      v186 = (const char *)__src;
    }
    operator delete(v59);
LABEL_86:
    if (v195)
    {
      v196 = v195;
      operator delete(v195);
    }
    if (v55)
    {
      v61 = (unint64_t *)&v55->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    sub_20BF4C2D8((uint64_t)&v207);
    goto LABEL_94;
  }
LABEL_159:
  v94 = v182;
  v95 = sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)v94 + 56), v95);
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (v141[0])
  {
    v141[1] = v141[0];
    operator delete(v141[0]);
  }
  if (v139[0])
  {
    v139[1] = v139[0];
    operator delete(v139[0]);
  }
  v96 = v155;
  if (v155)
  {
    v97 = (unint64_t *)&v155->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v154;
  if (v154)
  {
    v100 = (unint64_t *)&v154->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
  sub_20BFD265C(&v152);
  v102 = v161;
  if (v161)
  {
    v103 = (unint64_t *)&v161->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v160;
  if (v160)
  {
    v106 = (unint64_t *)&v160->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v158);
  sub_20BFD265C(&v157);
  v108 = v166;
  if (v166)
  {
    v109 = (unint64_t *)&v166->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v165;
  if (v165)
  {
    v112 = (unint64_t *)&v165->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v163 + 1);
  sub_20BFD265C(&v163);
  v114 = v171;
  if (v171)
  {
    v115 = (unint64_t *)&v171->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v170;
  if (v170)
  {
    v118 = (unint64_t *)&v170->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v168 + 1);
  sub_20BFD265C(&v168);
  v120 = v175;
  if (v175)
  {
    v121 = (unint64_t *)&v175->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v174;
  if (v174)
  {
    v124 = (unint64_t *)&v174->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v173 + 1);
  sub_20BFD265C(v173);
  v126 = v183;
  if (v183)
  {
    v127 = (unint64_t *)&v183->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
}

void sub_20C788B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a11, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a12, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a13, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a69;
  uint64_t v69;

  sub_20BF4C2D8(v69 - 208);
  sub_20C79CE14(&__p);
  sub_20C78D390(&a69);
  sub_20C78D390(&STACK[0x228]);
  sub_20C78D390(&STACK[0x270]);
  sub_20C78D390(&STACK[0x2B8]);
  sub_20C78D390(&STACK[0x300]);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20C788EB8()
{
  JUMPOUT(0x20C788E78);
}

void sub_20C788EC4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count_vtbl *v10;
  void (__cdecl *v11)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  unint64_t Instance;
  _QWORD *v37;
  uint64_t v38;
  double *v39;
  double v40;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v41;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v42;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v43;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v44;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v45;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v46;
  _QWORD *v47;
  _QWORD *v48;
  pxrInternal__aapl__pxrReserved__::VtValue *v49;
  float32x2_t *v50;
  const std::type_info *v51;
  char *v52;
  void **v53;
  char *v54;
  void **v55;
  unint64_t v56;
  const char *v57;
  double *v58;
  double *v59;
  BOOL v60;
  void (__cdecl *v61)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  int64x2_t v104;
  int64x2_t v105;
  float32x2_t v106;
  int v107;
  int v108[5];
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  int v112;
  int v113[5];
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  uint64_t *v116;
  int v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  uint64_t *v120;
  int v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  uint64_t *v124[3];
  std::__shared_weak_count *v125;
  std::__shared_weak_count *v126;
  int v127;
  int v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  void (**v133)(Alembic::Abc::v12::OObject *__hidden);
  int v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (__cdecl *v139)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  void **v147[4];
  char v148;
  __int128 __p;
  double v150;
  double v151;
  double v152;
  float64x2_t v153;
  int64x2_t v154;
  __int128 v155;
  int64x2_t v156;
  _BYTE v157[24];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v2 = operator new(0x258uLL);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v134 = *(_DWORD *)(v3 + 8);
  if (*(char *)(v3 + 39) < 0)
  {
    sub_20BDDBFAC(&v135, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 16);
    v136 = *(_QWORD *)(v3 + 32);
    v135 = v4;
  }
  v6 = *(_QWORD *)(v3 + 40);
  v5 = *(_QWORD *)(v3 + 48);
  v133 = off_24C518EC0;
  v137 = v6;
  v138 = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20C78B584(a1, (uint64_t)&__p);
  sub_20C78AF98((uint64_t *)a1, (uint64_t)&v127);
  LODWORD(v124[0]) = 3;
  v124[1] = (uint64_t *)&v127;
  LODWORD(v120) = 0;
  v121 = 0;
  LODWORD(v116) = 0;
  v117 = 0;
  sub_20C79E994((uint64_t)v2, (uint64_t)&v133, &__p, v124, &v120, &v116);
  sub_20C79F474(&v139, (uint64_t)v2);
  sub_20BDE9D48((uint64_t)&v127, v129);
  if (SHIBYTE(v150) < 0)
    operator delete((void *)__p);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v133);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v10 = v9;
  v11 = v139;
  v12 = v140;
  if (v140)
  {
    p_shared_owners = (unint64_t *)&v140->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v9->~__shared_weak_count_0 = v11;
    v9->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v9->~__shared_weak_count_0 = v139;
    v9->__on_zero_shared = 0;
  }
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54B150;
  *(_QWORD *)&__p = v10;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24C54B1A0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v10;
  *((_QWORD *)&__p + 1) = v17;
  sub_20C78B5F4(a1, (uint64_t *)&__p);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20)
    v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v21 = *(_QWORD *)a1;
  if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*(_QWORD *)a1 + 104)) + 14))
    v22 = *(_QWORD *)(v21 + 96);
  else
    v22 = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(&__p, v22, a1 + 24, (uint64_t)v20 + 448);
  sub_20C79E6BC((pxrInternal__aapl__pxrReserved__::VtValue *)&__p, &v132);
  sub_20BF4C2D8((uint64_t)&__p);
  v150 = 0.0;
  *((_QWORD *)&__p + 1) = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  if ((__int128 *)(a1 + 56) == &__p)
  {
    v23 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)(a1 + 56), (_QWORD *)&__p + 1, (_QWORD *)&__p + 1);
    v23 = (_QWORD *)*((_QWORD *)&__p + 1);
  }
  sub_20BE6100C((uint64_t)&__p, v23);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24)
    v24 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25)
    v25 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 360), (uint64_t *)v25 + 7, (uint64_t)&v127);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26)
    v26 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27)
    v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 432), (uint64_t *)v27 + 7, (uint64_t)v124);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28)
    v28 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 1232), (uint64_t *)v29 + 7, (uint64_t)&v120);
  v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v30)
    v30 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31)
    v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 440), (uint64_t *)v31 + 7, (uint64_t)&v116);
  v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v32)
    v32 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v33)
    v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v32 + 1240), (uint64_t *)v33 + 7, (uint64_t)&v112);
  v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v34)
    v34 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v35)
    v35 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v34 + 120), (uint64_t *)v35 + 19, (uint64_t)&v107);
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  v37 = sub_20BF2B2B4((_QWORD *)(Instance + 32), &v132);
  v103 = a1 + 56;
  if (v37)
    v38 = v37[3];
  else
    v38 = 0;
  v39 = *(double **)(a1 + 56);
  if (v39 != (double *)(a1 + 64))
  {
    v104 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    while (1)
    {
      v40 = v39[4];
      v154 = v105;
      v155 = xmmword_20CA521E0;
      v156 = v104;
      memset(v157, 0, sizeof(v157));
      sub_20BE15D04((uint64_t)&__p);
      LODWORD(v147[0]) = 0;
      v41 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v41)
        v41 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (sub_20C79E73C((uint64_t)v124, v38, (_QWORD *)v41 + 54, (uint64_t (**)(_QWORD, uint64_t))v147, v40))*((double *)&__p + 1) = *(float *)v147 / 10.0;
      LODWORD(v147[0]) = 0;
      v42 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v42)
        v42 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (sub_20C79E73C((uint64_t)&v120, v38, (_QWORD *)v42 + 154, (uint64_t (**)(_QWORD, uint64_t))v147, v40))v151 = *(float *)v147 / 10.0;
      LODWORD(v147[0]) = 0;
      v43 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v43)
        v43 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (sub_20C79E73C((uint64_t)&v116, v38, (_QWORD *)v43 + 55, (uint64_t (**)(_QWORD, uint64_t))v147, v40))v150 = *(float *)v147 / 10.0;
      LODWORD(v147[0]) = 0;
      v44 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v44)
        v44 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (sub_20C79E73C((uint64_t)&v112, v38, (_QWORD *)v44 + 155, (uint64_t (**)(_QWORD, uint64_t))v147, v40))v152 = *(float *)v147 / 10.0;
      LODWORD(v147[0]) = 0;
      v45 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v45)
        v45 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (sub_20C79E73C((uint64_t)&v127, v38, (_QWORD *)v45 + 45, (uint64_t (**)(_QWORD, uint64_t))v147, v40))*(double *)&__p = *(float *)v147;
      v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v46)
        v46 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v47 = (_QWORD *)((char *)v46 + 120);
      if (*(_QWORD *)(v111 + 16))
        break;
      if (v38 && sub_20C79F8FC(v38, v47, &v106))
        goto LABEL_90;
LABEL_107:
      Alembic::AbcGeom::v12::OCameraSchema::set((Alembic::AbcGeom::v12::OCameraSchema *)((char *)v139 + 56), (uint64_t **)&__p);
      v147[0] = (void **)v157;
      sub_20BE34B94(v147);
      v58 = (double *)*((_QWORD *)v39 + 1);
      if (v58)
      {
        do
        {
          v59 = v58;
          v58 = *(double **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (double *)*((_QWORD *)v39 + 2);
          v60 = *(_QWORD *)v59 == (_QWORD)v39;
          v39 = v59;
        }
        while (!v60);
      }
      v39 = v59;
      if (v59 == (double *)(a1 + 64))
        goto LABEL_115;
    }
    v48 = sub_20C78EDF8((uint64_t)&v107, v40);
    v49 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(&v158, v48);
    if (!sub_20BF9F188(v49))
    {
      v147[0] = (void **)"usdAbc/alembicWriter.cpp";
      v147[1] = (void **)"_ExtractWithFallback";
      v147[2] = (void **)2536;
      v147[3] = (void **)"BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExtractWithFallback(const UsdSam"
                         "ples &, double, const UsdPrimDefinition *, const TfToken &, T *) [T = pxrInternal__aapl__pxrRes"
                         "erved__::GfVec2f]";
      v148 = 0;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v145);
      if (v146 >= 0)
        v53 = v145;
      else
        v53 = (void **)v145[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v158, v51, v52, (uint64_t)v141);
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v141, (uint64_t)v143);
      v55 = v143;
      if (v144 < 0)
        v55 = (void **)v143[0];
      v56 = *v47 & 0xFFFFFFFFFFFFFFF8;
      if (v56)
      {
        v57 = (const char *)(v56 + 16);
        if (*(char *)(v56 + 39) < 0)
          v57 = *(const char **)v57;
      }
      else
      {
        v57 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v147, (pxrInternal__aapl__pxrReserved__ *)"Expected type '%s', but found '%s' for %s", v54, v53, v55, v57, v103);
      if (v144 < 0)
        operator delete(v143[0]);
      if (v142 < 0)
        operator delete(v141[0]);
      if (v146 < 0)
        operator delete(v145[0]);
      sub_20BF4C2D8((uint64_t)&v158);
      goto LABEL_107;
    }
    if ((v159 & 4) != 0)
      v50 = (float32x2_t *)(*(uint64_t (**)(uint64_t *))((v159 & 0xFFFFFFFFFFFFFFF8) + 168))(&v158);
    else
      v50 = (float32x2_t *)&v158;
    v106 = *v50;
    sub_20BF4C2D8((uint64_t)&v158);
LABEL_90:
    v153 = vcvtq_f64_f32(v106);
    goto LABEL_107;
  }
LABEL_115:
  v61 = v139;
  sub_20C78CF50((double **)a1, v103);
  Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling((Alembic::AbcGeom::v12::OCameraSchema *)((char *)v61 + 56));
  v62 = v110;
  if (v110)
  {
    v63 = (unint64_t *)&v110->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v109;
  if (v109)
  {
    v66 = (unint64_t *)&v109->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v108);
  sub_20BFD265C(&v107);
  v68 = v115;
  if (v115)
  {
    v69 = (unint64_t *)&v115->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v114;
  if (v114)
  {
    v72 = (unint64_t *)&v114->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v113);
  sub_20BFD265C(&v112);
  v74 = v119;
  if (v119)
  {
    v75 = (unint64_t *)&v119->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v118;
  if (v118)
  {
    v78 = (unint64_t *)&v118->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v116 + 1);
  sub_20BFD265C(&v116);
  v80 = v123;
  if (v123)
  {
    v81 = (unint64_t *)&v123->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v122;
  if (v122)
  {
    v84 = (unint64_t *)&v122->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v120 + 1);
  sub_20BFD265C(&v120);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v125;
  if (v125)
  {
    v90 = (unint64_t *)&v125->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v124 + 1);
  sub_20BFD265C(v124);
  v92 = v131;
  if (v131)
  {
    v93 = (unint64_t *)&v131->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v130;
  if (v130)
  {
    v96 = (unint64_t *)&v130->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v128);
  sub_20BFD265C(&v127);
  if ((v132 & 7) != 0)
  {
    v98 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  v100 = v140;
  if (v140)
  {
    v101 = (unint64_t *)&v140->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

void sub_20C789B24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C789D2C(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count_vtbl *v11;
  void (__cdecl *v12)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v26;
  double *v27;
  double v28;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  double *v38;
  double *v39;
  BOOL v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v45;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v46;
  int v47;
  void (__cdecl *v48)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int64x2_t v67;
  int64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  void *v74[3];
  int64x2_t v75;
  __int128 v76;
  int64x2_t v77;
  uint64_t *v78;
  int v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  __int128 __p;
  std::__shared_weak_count *v84;
  int v85;
  int v86;
  void *v87;
  char v88;
  _QWORD *v89[3];
  uint64_t v90;
  int v91;
  int v92;
  uint64_t *v93[3];
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  void (**v97)(Alembic::Abc::v12::OObject *__hidden);
  int v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (__cdecl *v103)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v104;
  _BYTE v105[13];
  char *v106;
  char *v107;

  v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  v3 = operator new(0x198uLL);
  v4 = *(_QWORD *)(a1[1] + 8);
  v98 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_20BDDBFAC(&v99, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 16);
    v100 = *(_QWORD *)(v4 + 32);
    v99 = v5;
  }
  v7 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v97 = off_24C518EC0;
  v101 = v7;
  v102 = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C78B584((uint64_t)a1, (uint64_t)&__p);
  sub_20C78AF98(a1, (uint64_t)&v73);
  LODWORD(v93[0]) = 3;
  v93[1] = (uint64_t *)&v73;
  LODWORD(v78) = 0;
  v79 = 0;
  *(_DWORD *)v105 = 0;
  *(_DWORD *)&v105[8] = 0;
  sub_20BE4E280((uint64_t)v3, (uint64_t)&v97, &__p, v93, &v78, (uint64_t **)v105);
  sub_20C79FC58(&v103, (uint64_t)v3);
  sub_20BDE9D48((uint64_t)&v73, *((_QWORD **)&v73 + 1));
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__p);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v97);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v11 = v10;
  v12 = v103;
  v13 = v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v10->~__shared_weak_count_0 = v12;
    v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  else
  {
    v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C54A360;
    v10->~__shared_weak_count_0 = v12;
    v10->__on_zero_shared = 0;
  }
  *(_QWORD *)&__p = v10;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24C54A3A8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v11;
  *((_QWORD *)&__p + 1) = v17;
  if (!v13)
  {
    sub_20C78B5F4((uint64_t)a1, (uint64_t *)&__p);
LABEL_24:
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_28;
  }
  v18 = (unint64_t *)&v13->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  sub_20C78B5F4((uint64_t)a1, (uint64_t *)&__p);
  if (v17)
    goto LABEL_24;
LABEL_28:
  *((_QWORD *)&__p + 1) = 0;
  v84 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  if (a1 + 7 == (_QWORD *)&__p)
  {
    v22 = 0;
  }
  else
  {
    sub_20C78D3CC((uint64_t **)a1 + 7, (_QWORD *)&__p + 1, (_QWORD *)&__p + 1);
    v22 = (_QWORD *)*((_QWORD *)&__p + 1);
  }
  sub_20BE6100C((uint64_t)&__p, v22);
  v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v23)
    v23 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v24)
    v24 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v23 + 464), (uint64_t *)v24 + 58, (uint64_t)v93);
  sub_20C78BE88((uint64_t)a1, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v91);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  sub_20C79F9A4((uint64_t *)&__p, *a1, a1 + 1, &v91);
  v25 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v25)
    v25 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v26)
    v26 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  sub_20C790D7C((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v25 + 24), (uint64_t *)v26 + 11, (uint64_t)&v78);
  sub_20C79FD30((uint64_t)&v73);
  v27 = (double *)a1[7];
  if (v27 != (double *)(a1 + 8))
  {
    v68 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v67 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v28 = v27[4];
      *(_QWORD *)&v73 = 0;
      DWORD2(v73) = 127;
      BYTE12(v73) = 0;
      sub_20BDDF7E4((char *)v74, 0, 0, 0);
      v75 = v68;
      v76 = xmmword_20CA521E0;
      v77 = v67;
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v96);
      v30 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)v93, v28);
      *(_DWORD *)v105 = 6;
      v105[4] = 1;
      sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v96, v30, v2, (uint64_t)Converter, (int *)v105, 0, (uint64_t)&v69);
      if (sub_20C78EEDC((uint64_t)&v69, v93, (uint64_t)&v96))
      {
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
        sub_20C7952C8(v105, v31, v69);
        *(_QWORD *)&v73 = *(_QWORD *)v105;
        *(_QWORD *)((char *)&v73 + 5) = *(_QWORD *)&v105[5];
        sub_20BDDF7E4((char *)v74, v106, (uint64_t)v107, (v107 - v106) >> 3);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
      }
      Alembic::AbcGeom::v12::OFaceSetSchema::set((uint64_t)v103 + 56, (uint64_t)&v73);
      v32 = v72;
      if (v72)
      {
        v33 = (unint64_t *)&v72->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v71;
      if (v71)
      {
        v36 = (unint64_t *)&v71->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = (double *)*((_QWORD *)v27 + 1);
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = *(double **)v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (double *)*((_QWORD *)v27 + 2);
          v40 = *(_QWORD *)v39 == (_QWORD)v27;
          v27 = v39;
        }
        while (!v40);
      }
      v27 = v39;
    }
    while (v39 != (double *)(a1 + 8));
  }
  if (*(_QWORD *)(v82 + 16))
  {
    v41 = sub_20C78EDF8((uint64_t)&v78, -1.79769313e308);
    v42 = v41;
    v43 = v41[1];
    v44 = (uint64_t)(a1 + 7);
    if ((v43 & 4) != 0)
      v42 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(v41);
    if (!*v42)
      goto LABEL_70;
    v45 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v45)
      v45 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*v42 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v45 + 96) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_72;
    v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v46)
      v46 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*v42 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v46 + 86) & 0xFFFFFFFFFFFFFFF8))
LABEL_72:
      v47 = 1;
    else
LABEL_70:
      v47 = 0;
  }
  else
  {
    v47 = 0;
    v44 = (uint64_t)(a1 + 7);
  }
  Alembic::AbcGeom::v12::OFaceSetSchema::setFaceExclusivity((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)v103 + 56), v47);
  v48 = v103;
  sub_20C78CF50((double **)a1, v44);
  Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)v48 + 56));
  if (v74[0])
  {
    v74[1] = v74[0];
    operator delete(v74[0]);
  }
  v49 = v81;
  if (v81)
  {
    v50 = (unint64_t *)&v81->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v80;
  if (v80)
  {
    v53 = (unint64_t *)&v80->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
  sub_20BFD265C(&v78);
  *(_QWORD *)&v73 = &v90;
  sub_20BEEB2B8((void ***)&v73);
  sub_20BE6100C((uint64_t)v89, v89[1]);
  if (v88 < 0)
    operator delete(v87);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
  sub_20BFD265C(&v85);
  v55 = v84;
  if (v84)
  {
    v56 = (unint64_t *)&v84->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
  sub_20BFD265C(&v91);
  v58 = v95;
  if (v95)
  {
    v59 = (unint64_t *)&v95->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v94;
  if (v94)
  {
    v62 = (unint64_t *)&v94->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v93 + 1);
  sub_20BFD265C(v93);
  v64 = v104;
  if (v104)
  {
    v65 = (unint64_t *)&v104->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_20C78A598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60,int a61)
{
  uint64_t v61;

  if (__p)
    operator delete(__p);
  sub_20C78D390(&a34);
  sub_20C79FBB8((uint64_t)&a43);
  sub_20BFD1A18(&a59);
  sub_20C78D390(&a61);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v61 - 160));
  _Unwind_Resume(a1);
}

void sub_20C78A744(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  double v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  double v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  uint64_t *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v36;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v39;
  unsigned int *v40;
  unsigned int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _DWORD v45[4];
  __int128 *v46[2];
  _BYTE v47[48];
  void *__p;
  std::__shared_weak_count *v49;
  char v50;
  std::string __str;
  uint64_t *v52;
  _QWORD *v53[2];
  Alembic::Abc::v12::OObject *v54;
  std::__shared_weak_count *v55;

  v2 = operator new(0x38uLL);
  v3 = *a1 + 40;
  LODWORD(__p) = 0;
  LODWORD(v49) = 0;
  LODWORD(v52) = 0;
  LODWORD(v53[0]) = 0;
  LODWORD(__str.__r_.__value_.__l.__data_) = 0;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
  sub_20C79FF3C((uint64_t)v2, v3, 0, (uint64_t **)&__p, &v52, (uint64_t **)&__str);
  sub_20C78BFB4(&v54, (uint64_t)v2);
  sub_20C78B66C(&__p, (uint64_t *)&v54);
  sub_20C78B5F4((uint64_t)a1, (uint64_t *)&__p);
  v4 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v53[0] = 0;
  v53[1] = 0;
  v52 = (uint64_t *)v53;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C79FDE8(&v52, a1, (_QWORD *)v7 + 40, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C79FDE8(&v52, a1, (_QWORD *)v10 + 18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14)
    v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Instance, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 440));
  v16 = *(double *)sub_20BF78F24(Fallback);
  v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17)
    v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Instance, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 168));
  v19 = *(double *)sub_20BF78F24(v18);
  v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20)
    v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v20 + 55) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::TfStringify(v16, &__str);
  v46[0] = (__int128 *)&__p;
  v21 = sub_20BDDDFDC(&v52, (const void **)&__p, (uint64_t)&unk_20CAC184C, v46);
  std::string::operator=((std::string *)(v21 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(__p);
  v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22)
    v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v22 + 21) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::TfStringify(v19, &__str);
  v46[0] = (__int128 *)&__p;
  v23 = sub_20BDDDFDC(&v52, (const void **)&__p, (uint64_t)&unk_20CAC184C, v46);
  std::string::operator=((std::string *)(v23 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(__p);
  v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24)
    v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C79FDE8(&v52, a1, (_QWORD *)v24 + 55, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v25 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v27)
    v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C79FDE8(&v52, a1, (_QWORD *)v27 + 21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v28 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v30)
    v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C79FDE8(&v52, a1, (_QWORD *)v30 + 61, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v31 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v33)
    v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C79FDE8(&v52, a1, (_QWORD *)v33 + 60, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v34 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v36)
    v36 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  sub_20C78BA38(&v52, a1, (_QWORD *)v36 + 12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v37 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  v39 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v39)
    v39 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  __p = 0;
  sub_20C78BA38(&v52, a1, (_QWORD *)v39 + 148, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v40 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  Alembic::Abc::v12::OObject::getProperties(v54, (uint64_t)v47);
  sub_20BDDC0E4(&__str, "Usd");
  LODWORD(v46[0]) = 3;
  v46[1] = (__int128 *)&v52;
  v45[0] = 0;
  v45[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&__p, v47, &__str, v46, v45);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v47);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  sub_20BDE9D48((uint64_t)&v52, v53[0]);
  v42 = v55;
  if (v55)
  {
    v43 = (unint64_t *)&v55->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_20C78AD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  sub_20BDE9D48(v24 - 88, *(_QWORD **)(v24 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 64));
  _Unwind_Resume(a1);
}

void **sub_20C78AF10(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_10;
  do
  {
    v5 = v3 - 32;
    v6 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v6)
    {
      v6 = v3 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v3 = v5;
  }
  while (v5 != v2);
  v4 = *a1;
LABEL_10:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void sub_20C78AF98(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  std::string __str;
  void **v35;
  void *__p[2];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = *a1;
  if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*a1 + 104)) + 14))
    v6 = *(_QWORD *)(v5 + 96);
  else
    v6 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v6 + 136))(__p, v6, a1 + 3, (uint64_t)v4 + 448);
  v7 = __p[1];
  sub_20BF4C2D8((uint64_t)__p);
  if (v7)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8)
      v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v9 = *a1;
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*a1 + 104)) + 14))
      v10 = *(_QWORD *)(v9 + 96);
    else
      v10 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 136))(__p, v10, a1 + 3, (uint64_t)v8 + 312);
    if ((sub_20C0DE26C((pxrInternal__aapl__pxrReserved__::VtValue *)__p) & 1) != 0)
    {
      if (((uint64_t)__p[1] & 4) != 0)
        v11 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p);
      else
        v11 = __p;
      v12 = *(_DWORD *)v11;
      sub_20BF4C2D8((uint64_t)__p);
      if (v12 != 1)
        goto LABEL_26;
    }
    else
    {
      sub_20BF4C2D8((uint64_t)__p);
    }
  }
  v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13)
    v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v13 + 39) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  std::operator+<char>();
  sub_20BDDC0E4(&__str, "over");
  v35 = __p;
  v14 = sub_20BDDDFDC((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v35);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(__p[0]);
LABEL_26:
  v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v15)
    v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p[0] = 0;
  sub_20C78B740((uint64_t **)a2, a1, v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v18)
    v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p[0] = 0;
  sub_20C78B740((uint64_t **)a2, a1, (_QWORD *)v18 + 22, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v19 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21)
    v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p[0] = 0;
  sub_20C78B8CC((uint64_t **)a2, a1, (_QWORD *)v21 + 13, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v22 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24)
    v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p[0] = 0;
  sub_20C78B8CC((uint64_t **)a2, a1, (_QWORD *)v24 + 17, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v25 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v27)
    v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p[0] = 0;
  sub_20C78BA38((uint64_t **)a2, a1, (_QWORD *)v27 + 26, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v28 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v30)
    v30 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v31)
    v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v31 + 27) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
  std::operator+<char>();
  sub_20C78BBAC(a1, (uint64_t)v30 + 216, (__int128 *)__p, (uint64_t **)a2);
  if (v37 < 0)
    operator delete(__p[0]);
  v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v32)
    v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v33)
    v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*((_QWORD *)v33 + 34) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
  std::operator+<char>();
  sub_20C78BBAC(a1, (uint64_t)v32 + 272, (__int128 *)__p, (uint64_t **)a2);
  if (v37 < 0)
    operator delete(__p[0]);
}

void sub_20C78B450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  sub_20BF4C2D8((uint64_t)&__p);
  sub_20BDE9D48(v23, *(_QWORD **)(v23 + 8));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C78B584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *Name;
  int v6;
  int v7;

  sub_20C78BE88(a1, &v6);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)Name, (const void **)(a1 + 32), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C78B5E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C78B5F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *sub_20C78B66C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *v4 = off_24C54A360;
    v4[1] = v5;
    v4[2] = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *v4 = off_24C54A360;
    v4[1] = v5;
    v4[2] = 0;
  }
  sub_20C78C08C(a1, (uint64_t)v4);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_20C78B728(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_20C96BF24(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C78B740(uint64_t **a1, uint64_t *a2, _QWORD *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  _BYTE *v7;
  char *v8;
  uint64_t *v9;
  std::string __str;
  void *__p[2];
  char v13;
  void **v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C78BD0C(a2, (uint64_t)a3, a4);
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if ((_DWORD)v6)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    std::operator+<char>();
    if ((v16 & 4) != 0)
      v7 = (_BYTE *)(*(uint64_t (**)(_BYTE *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
    else
      v7 = v15;
    if (*v7)
      v8 = "true";
    else
      v8 = "false";
    sub_20BDDC0E4(&__str, v8);
    v14 = __p;
    v9 = sub_20BDDDFDC(a1, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v14);
    std::string::operator=((std::string *)(v9 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C78B87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  sub_20BF4C2D8(v21 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_20C78B8CC(uint64_t **a1, uint64_t *a2, _QWORD *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t *v8;
  void *__p[2];
  char v11;
  void **v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20C78BD0C(a2, (uint64_t)a3, a4);
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  if ((_DWORD)v6)
  {
    if ((v14 & 4) != 0)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken **))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
      v7 = v6;
    }
    else
    {
      v7 = v13;
    }
    if (*((char *)v7 + 23) < 0)
    {
      if (!*((_QWORD *)v7 + 1))
        return sub_20BF4C2D8((uint64_t)&v13);
    }
    else if (!*((_BYTE *)v7 + 23))
    {
      return sub_20BF4C2D8((uint64_t)&v13);
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    std::operator+<char>();
    v12 = __p;
    v8 = sub_20BDDDFDC(a1, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v12);
    std::string::operator=((std::string *)(v8 + 7), (const std::string *)v7);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return sub_20BF4C2D8((uint64_t)&v13);
}

void sub_20C78B9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20BF4C2D8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C78BA38(uint64_t **a1, uint64_t *a2, _QWORD *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  const std::string *EmptyString;
  uint64_t *v10;
  void *__p[2];
  char v13;
  void **v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C78BD0C(a2, (uint64_t)a3, a4);
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if ((_DWORD)v6)
  {
    if ((v16 & 4) != 0)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(_BYTE *))((v16 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 168))(v15);
      v7 = v6;
    }
    else
    {
      v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)v15;
    }
    if (*(_QWORD *)v7)
    {
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+<char>();
      if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      v14 = __p;
      v10 = sub_20BDDDFDC(a1, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v14);
      std::string::operator=((std::string *)(v10 + 7), EmptyString);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C78BB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20BF4C2D8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C78BBAC(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::string __p;
  __int128 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 3;
  v8 = *a1;
  if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*a1 + 104)) + 14))
    v9 = *(_QWORD *)(v8 + 96);
  else
    v9 = 0;
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 136))(&v15, v9, v7, a2);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0)
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    else
      v10 = v15;
    if (*v10 != v10[1])
    {
      sub_20C78BEEC((uint64_t)v10);
      v14 = a3;
      v11 = sub_20BDDDFDC(a4, (const void **)a3, (uint64_t)&unk_20CAC184C, &v14);
      std::string::operator=((std::string *)(v11 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v15);
}

void sub_20C78BCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20BF4C2D8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C78BD0C(uint64_t *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)a3)
    return sub_20C78BD90(a1, a3, a2);
  v5 = a1 + 3;
  v6 = *a1;
  if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*a1 + 104)) + 14))
    v7 = *(_QWORD *)(v6 + 96);
  else
    v7 = 0;
  return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 136))(v7, v5, a2);
}

_DWORD *sub_20C78BD90(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  int v15;

  v6 = *a1;
  v7 = *a1;
  v9 = *(_QWORD *)(v7 + 104);
  v8 = (uint64_t *)(v7 + 104);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(_QWORD *)(v6 + 96);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  sub_20C78BE88((uint64_t)a1, &v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a2, &v14);
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v10 + 136))(v10, &v14, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_20BFD265C(&v12);
}

void sub_20C78BE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C78BE88@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24)))
    return pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v4, a2);
  sub_20BFD6E54(a2, v4);
  return sub_20BFD6EA4(a2 + 1, (_DWORD *)(a1 + 28));
}

uint64_t sub_20C78BEEC(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  sub_20C0D7D00(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C78BFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C78BFB4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54A2E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C78BFFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C78C020(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C78C034(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C78C04C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A338))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C78C08C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &off_24C54A3A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C78C0D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C78C0F0(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C78C120(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

_QWORD *sub_20C78C150@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;

  *(_DWORD *)a1 = 2;
  result = sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

_QWORD *sub_20C78C188@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;

  *(_DWORD *)a1 = 2;
  result = sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

_QWORD *sub_20C78C1C0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;

  *(_DWORD *)a1 = 2;
  result = sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_20C78C1FC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C78C210(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C78C228(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A3F8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C78C270(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C54A420;
  result[1] = v3;
  return result;
}

uint64_t sub_20C78C2A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C54A420;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C78C2C0(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t sub_20C78C2CC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A4A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C78C308()
{
  return &unk_24C54A4A0;
}

void sub_20C78C314(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  unint64_t v9;
  const char *v10;
  _BYTE *v11;
  __int128 __p;
  char v13;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_13;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 59) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_13:
    *a4 = 1;
    v11 = operator new(0x10uLL);
    *(_QWORD *)v11 = &unk_24C548E38;
    v11[8] = -1;
LABEL_14:
    sub_20C76527C(a4 + 1, (uint64_t)v11);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v9 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v9 == (*((_QWORD *)v8 + 62) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v11 = operator new(0x10uLL);
    *(_QWORD *)v11 = &unk_24C548E38;
    v11[8] = 0;
    goto LABEL_14;
  }
  if (v9)
  {
    v10 = (const char *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0)
      v10 = *(const char **)v10;
  }
  else
  {
    v10 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported invisibility '%s'", a2, a3, v10);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v13 < 0)
    operator delete((void *)__p);
}

void sub_20C78C48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C78C4A8@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t ***Instance;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  const std::string *EmptyString;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v20;
  uint64_t *v21;
  _QWORD *Role;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  char *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  std::string::size_type size;
  uint64_t *v34;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  uint64_t *v39;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v40;
  uint64_t *v41;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v42;
  uint64_t *v43;
  int v44;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v45;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v46;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *v47;
  unsigned int *v48;
  unsigned int v49;
  std::string v51;
  _QWORD *Converter;
  _QWORD *Type;
  uint64_t v54;
  std::string *p_str;
  std::string __str;
  std::string __p;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v59 = 0;
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78B740((uint64_t **)a4, a1, (_QWORD *)v8 + 8, a2);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78BD90(a1, a2, (uint64_t)v9 + 448);
  sub_20BF4B5D8(&v58, &__p);
  sub_20BF4C2D8((uint64_t)&__p);
  if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
  {
    if ((v59 & 4) != 0)
      v10 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58);
    else
      v10 = &v58;
    v11 = *v10;
    v54 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    v54 = 0;
  }
  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  Type = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54);
  v15 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(v15, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  Converter = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(v15, (const pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *)&__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, &Converter))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16)
      v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*((_QWORD *)v16 + 56) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+<char>();
    if ((v54 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const std::string *)((v54 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v19 = sub_20BDDDFDC((uint64_t **)a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&__str);
    std::string::operator=((std::string *)(v19 + 7), EmptyString);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*(_BYTE *)(a3 + 56) && *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16) == 1)
  {
    v20 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
    if (!v20)
      v20 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
    if ((*((_QWORD *)v20 + 3) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
    std::operator+<char>();
    sub_20BDDC0E4(&__str, "true");
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v21 = sub_20BDDDFDC((uint64_t **)a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v51);
    std::string::operator=((std::string *)(v21 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Role = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  v23 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v23)
    v23 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = "point";
    goto LABEL_70;
  }
  v24 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v24)
    v24 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = "normal";
    goto LABEL_70;
  }
  v25 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v25)
    v25 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = "vector";
    goto LABEL_70;
  }
  v26 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v26)
    v26 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v31)
      v31 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v30 = "rgba";
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (_QWORD **)v31 + 21))
    {
      v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v32)
        v32 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (_QWORD **)v32 + 24))
        v30 = "rgb";
    }
    goto LABEL_70;
  }
  v27 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v27)
    v27 = sub_20C1B1CD4(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = "matrix";
    goto LABEL_70;
  }
  v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v28)
    v28 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (_QWORD **)v28 + 42))
    goto LABEL_57;
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29)
    v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (_QWORD **)v29 + 41))
  {
LABEL_57:
    v30 = "quat";
LABEL_70:
    sub_20BDDC0E4(&__p, v30);
    goto LABEL_71;
  }
  memset(&__p, 0, sizeof(__p));
LABEL_71:
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    sub_20BDDC0E4(&__str, "interpretation");
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v34 = sub_20BDDDFDC((uint64_t **)a4, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v51);
    std::string::operator=((std::string *)(v34 + 7), &__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v35)
    v35 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78B8CC((uint64_t **)a4, a1, (_QWORD *)v35 + 13, a2);
  v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v36)
    v36 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78B8CC((uint64_t **)a4, a1, (_QWORD *)v36 + 17, a2);
  v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v37)
    v37 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78B740((uint64_t **)a4, a1, (_QWORD *)v37 + 22, a2);
  v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v38)
    v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78BD90(a1, a2, (uint64_t)v38 + 464);
  sub_20BF4B5D8(&v58, &__str);
  sub_20BF4C2D8((uint64_t)&__str);
  if (sub_20C030CF4((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
  {
    v39 = (v59 & 4) != 0
        ? (uint64_t *)(*(uint64_t (**)(uint64_t *))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58)
        : &v58;
    if (*(_DWORD *)v39 == 1)
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v40)
        v40 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*((_QWORD *)v40 + 58) & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
      std::operator+<char>();
      sub_20BDDC0E4(&v51, "uniform");
      p_str = &__str;
      v41 = sub_20BDDDFDC((uint64_t **)a4, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&p_str);
      std::string::operator=((std::string *)(v41 + 7), &v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  v42 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v42)
    v42 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  sub_20C78BD90(a1, a2, (uint64_t)v42 + 488);
  sub_20BF4B5D8(&v58, &__str);
  sub_20BF4C2D8((uint64_t)&__str);
  if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
  {
    if ((v59 & 4) != 0)
      v43 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58);
    else
      v43 = &v58;
    v44 = sub_20C78E510(v43);
    sub_20BE288A4((uint64_t **)a4, v44);
  }
  v45 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v45)
    v45 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  sub_20C78B8CC((uint64_t **)a4, a1, (_QWORD *)v45 + 1, a2);
  v46 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v46)
    v46 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  sub_20C78B8CC((uint64_t **)a4, a1, (_QWORD *)v46 + 2, a2);
  v47 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v47)
    v47 = sub_20C73B3A0(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  sub_20C78B740((uint64_t **)a4, a1, v47, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v54 & 7) != 0)
  {
    v48 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  return sub_20BF4C2D8((uint64_t)&v58);
}

void sub_20C78CD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  unsigned int *v35;
  unsigned int v36;

  if (a32 < 0)
    operator delete(__p);
  if ((a18 & 7) != 0)
  {
    v35 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  sub_20BF4C2D8(v33 - 88);
  sub_20BDE9D48(v32, *(_QWORD **)(v32 + 8));
  _Unwind_Resume(a1);
}

void sub_20C78CE00(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1, uint64_t a2, _DWORD *a3, Alembic::Abc::v12::OScalarProperty *a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v10;
  int *v11;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a3 + 16);
  v11 = (int *)(sub_20BE1B7F8((uint64_t)a4) + 56);
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a3, a5);
  sub_20C78E7FC(v10, v12, a1, a2, v11, 1, (uint64_t)v20);
  if (sub_20C78EEDC((uint64_t)v20, a3, (uint64_t)v10))
  {
    v13 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    Alembic::Abc::v12::OScalarProperty::set(a4, v13);
  }
  v14 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C78CF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C78CF50(double **a1, uint64_t a2)
{
  double *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t *v25;
  uint64_t *v26;
  _BYTE *v27;
  _BYTE *v28;
  Alembic::AbcCoreAbstract::v12::TimeSamplingType *v29;
  int v30;
  double *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  void *v42[3];
  __int128 v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  __int128 v47;
  void *__p;
  void *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = *a1;
  v4 = (uint64_t **)(*a1 + 14);
  v5 = sub_20C78F0F0((uint64_t)v4, a2);
  if (v3 + 15 == (double *)v5)
  {
    *(_QWORD *)&v47 = a2;
    v7 = sub_20C78F26C(v4, (double **)a2, (uint64_t)&unk_20CAC184C, (uint64_t *)&v47);
    v8 = v7;
    v51 = 0;
    v52 = 0;
    v50 = (uint64_t *)&v51;
    v11 = *(double **)a2;
    v9 = (double *)(a2 + 8);
    v10 = v11;
    if (v11 == v9)
    {
      v15 = (uint64_t *)&v51;
    }
    else
    {
      do
      {
        *(double *)&v47 = (v10[4] - v3[1]) / *v3;
        v7 = sub_20C6CC72C(&v50, (double *)&v47, (uint64_t *)&v47);
        v12 = (double *)*((_QWORD *)v10 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(double **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (double *)*((_QWORD *)v10 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v14);
        }
        v10 = v13;
      }
      while (v13 != v9);
      v15 = v50;
    }
    v16 = (uint64_t *)v15[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      v18 = v15;
      do
      {
        v17 = (uint64_t *)v18[2];
        v14 = *v17 == (_QWORD)v18;
        v18 = v17;
      }
      while (!v14);
    }
    if (v52 == 1)
    {
      Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling((Alembic::AbcCoreAbstract::v12::TimeSampling *)&v47, 1.0, *((double *)v15 + 4));
      v19 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)(v3 + 5));
    }
    else
    {
      if (v52 != 2)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_QWORD *)&v47 = &v44;
        if (v17 == (uint64_t *)&v51)
        {
          v28 = 0;
          v27 = 0;
        }
        else
        {
          v21 = v15;
          v22 = (double *)v17;
          do
          {
            *(double *)v42 = v22[4] - *((double *)v21 + 4);
            v7 = sub_20C29F424((uint64_t *)&v47, v42);
            v23 = (double *)*((_QWORD *)v22 + 1);
            v24 = v22;
            if (v23)
            {
              do
              {
                v22 = v23;
                v23 = *(double **)v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v22 = (double *)*((_QWORD *)v24 + 2);
                v14 = *(_QWORD *)v22 == (_QWORD)v24;
                v24 = v22;
              }
              while (!v14);
            }
            v25 = (uint64_t *)v21[1];
            if (v25)
            {
              do
              {
                v26 = v25;
                v25 = (uint64_t *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v26 = (uint64_t *)v21[2];
                v14 = *v26 == (_QWORD)v21;
                v21 = v26;
              }
              while (!v14);
            }
            v21 = v26;
          }
          while (v22 != (double *)&v51);
          v28 = v44;
          v27 = v45;
        }
        v29 = (Alembic::AbcCoreAbstract::v12::TimeSamplingType *)Alembic::AbcCoreAbstract::v12::TimeSamplingType::AcyclicNumSamples((Alembic::AbcCoreAbstract::v12::TimeSamplingType *)v7);
        v30 = (int)v29;
        LODWORD(v43) = (_DWORD)v29;
        v32 = Alembic::AbcCoreAbstract::v12::TimeSamplingType::AcyclicTimePerCycle(v29);
        v33 = (v27 - v28) >> 3;
        *((double *)&v43 + 1) = v32;
        if (v33 != 2)
        {
          v34 = 1;
          v35 = 8;
          while (v34 != v33)
          {
            v36 = 8 * v33;
            v37 = (double *)v44;
            while (v37[(unint64_t)v35 / 8] == *v37)
            {
              ++v37;
              v36 -= 8;
              if (v35 == v36)
              {
                LODWORD(v33) = v34;
                goto LABEL_55;
              }
            }
            v38 = (uint64_t *)v17[1];
            v39 = v17;
            if (v38)
            {
              do
              {
                v17 = v38;
                v38 = (uint64_t *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                v17 = (uint64_t *)v39[2];
                v14 = *v17 == (_QWORD)v39;
                v39 = v17;
              }
              while (!v14);
            }
            ++v34;
            v35 += 8;
            if (v34 == v33 - 1)
              goto LABEL_56;
          }
LABEL_55:
          v31 = sub_20BDFC364((double *)&v47, v33, *((double *)v17 + 4) - *((double *)v15 + 4));
          v43 = v47;
          v30 = v47;
        }
LABEL_56:
        if (v30 == Alembic::AbcCoreAbstract::v12::TimeSamplingType::AcyclicNumSamples((Alembic::AbcCoreAbstract::v12::TimeSamplingType *)v31))
          v40 = (uint64_t *)&v51;
        else
          v40 = v17;
        sub_20BF8C834(v42, v15, v40);
        Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling(&v47, &v43, v42);
        v6 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)(v3 + 5));
        *((_DWORD *)v8 + 14) = v6;
        if (__p)
        {
          v49 = __p;
          operator delete(__p);
        }
        if (v42[0])
        {
          v42[1] = v42[0];
          operator delete(v42[0]);
        }
        v20 = v44;
        if (!v44)
          goto LABEL_66;
        v45 = v44;
        goto LABEL_65;
      }
      Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling((Alembic::AbcCoreAbstract::v12::TimeSampling *)&v47, *((double *)v17 + 4) - *((double *)v15 + 4), *((double *)v15 + 4));
      v19 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)(v3 + 5));
    }
    v6 = v19;
    *((_DWORD *)v8 + 14) = v19;
    v20 = __p;
    if (!__p)
    {
LABEL_66:
      sub_20BE6100C((uint64_t)&v50, v51);
      return v6;
    }
    v49 = __p;
LABEL_65:
    operator delete(v20);
    goto LABEL_66;
  }
  return *(unsigned int *)(v5 + 56);
}

void sub_20C78D304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  sub_20BE6100C(v22 - 88, *(_QWORD **)(v22 - 80));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C78D390(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t **sub_20C78D3CC(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_20BF93290(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_20BDFC6B0((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_20BE64AA8((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20C78D52C(v5, (double *)a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20C78D518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE64AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C78D52C(uint64_t **a1, double *a2)
{
  uint64_t *v4;
  double v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *(_QWORD *)a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((double *)v7 + 4))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v6, v8, v4);
  return v4;
}

_DWORD *sub_20C78D5B8@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const char *Text;
  char *v27;
  unint64_t v28;
  const char *v29;
  unsigned int *v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[4];
  char v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;

  v9 = *(_QWORD **)(a1 + 80);
  v8 = *(_QWORD **)(a1 + 88);
  if (v9 != v8)
  {
    while ((*v9 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v9 == v8)
      {
        v9 = *(_QWORD **)(a1 + 88);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    sub_20C78BE88(a1, v40);
    sub_20C78D9CC((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)v40, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v40 + 1);
  }
  else
  {
    sub_20C0D813C(v9 + 1, v8, v9);
    for (i = *(_QWORD *)(a1 + 88); i != v10; i -= 8)
    {
      v13 = *(_QWORD *)(i - 8);
      v12 = v13;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
    }
    *(_QWORD *)(a1 + 88) = v10;
    sub_20C78BE88(a1, v40);
    v16 = *(_QWORD *)a1;
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*(_QWORD *)a1 + 104)) + 14))
      v17 = *(_QWORD *)(v16 + 96);
    else
      v17 = 0;
    sub_20C78DAD4((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)v40, a2, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v40 + 1);
  }
  sub_20BFD265C(v40);
  if (!*(_QWORD *)(v47 + 16))
    goto LABEL_24;
  v18 = *(_QWORD ***)a3;
  v19 = *(_QWORD ***)(a3 + 8);
  if (*(_QWORD ***)a3 == v19)
    goto LABEL_24;
  v42 = v48;
  while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v18, &v42))
  {
    if (++v18 == v19)
    {
      v18 = v19;
      break;
    }
  }
  if (v18 == *(_QWORD ***)(a3 + 8))
  {
    v40[0] = "usdAbc/alembicWriter.cpp";
    v40[1] = "_ExtractSamples";
    v40[2] = 968;
    v40[3] = "UsdSamples pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PrimWriterContext::_ExtractSamples(con"
             "st TfToken &, const std::vector<SdfValueTypeName> &)";
    v41 = 0;
    sub_20C78BE88(a1, &v36);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, a2, &v38);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v42, (unsigned int **)&v35);
    v28 = v35 & 0xFFFFFFFFFFFFFFF8;
    if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v29 = (const char *)(v28 + 16);
      if (*(char *)(v28 + 39) < 0)
        v29 = *(const char **)v29;
    }
    else
    {
      v29 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v40, (pxrInternal__aapl__pxrReserved__ *)"Property '%s' did not have expected type (got '%s')", v27, Text, v29);
    if ((v35 & 7) != 0)
    {
      v30 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
    sub_20BFD265C(&v36);
    sub_20C78BE88(a1, v40);
    sub_20C78D9CC(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)v40, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v40 + 1);
    sub_20BFD265C(v40);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
LABEL_24:
    sub_20C78DA58(&v43, (uint64_t **)(a1 + 56));
    sub_20BFD38A4((_DWORD *)a4, &v43);
    sub_20BFD38DC((_DWORD *)(a4 + 4), (_DWORD *)&v43 + 1);
    *(_OWORD *)(a4 + 8) = v44;
    *(_QWORD *)(a4 + 24) = v45;
    *((_QWORD *)&v44 + 1) = 0;
    v45 = 0;
    v20 = v46;
    v46 = 0uLL;
    v21 = v47;
    *(_OWORD *)(a4 + 32) = v20;
    *(_OWORD *)(a4 + 48) = v21;
    *(_QWORD *)(a4 + 64) = v48;
  }
  v22 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
  return sub_20BFD265C(&v43);
}

void sub_20C78D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C78D390((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C78D9CC(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, a3, (int *)a1);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64));
  sub_20C78DF0C(a1);
  return a1;
}

void sub_20C78DA24(_Unwind_Exception *a1)
{
  _DWORD *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 8));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v1 + 1);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C78DA58(uint64_t *result, uint64_t **a2)
{
  _QWORD *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v7;
  double *v8;
  BOOL v9;

  v2 = (_QWORD *)result[6];
  v5 = (double *)*v2;
  v3 = (double *)(v2 + 1);
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      result = sub_20C6CC72C(a2, v4 + 4, (uint64_t *)v4 + 4);
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

uint64_t sub_20C78DAD4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  unint64_t ***Instance;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const char *Text;
  const char *v21;
  char *v22;
  char *v23;
  uint64_t v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, a3, (int *)a1);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (uint64_t **)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64));
  v32 = 0;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 112))(a4, a1, (uint64_t)v7 + 432, &v31))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v12)
      v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 112))(a4, a1, (uint64_t)v12 + 88, &v31))goto LABEL_27;
    v13 = operator new(0x18uLL);
    v13[2] = 0;
    v13[1] = 0;
    *v13 = v13 + 1;
    sub_20C78DF7C((_QWORD *)(a1 + 32), (uint64_t)v13);
    v14 = *(uint64_t ***)(a1 + 32);
    v25 = 0;
    v26 = (char *)&v25;
    v15 = sub_20C0E7D0C(v14, (double *)&v25, (uint64_t)&unk_20CAC184C, (uint64_t **)&v26);
    sub_20BFD3C3C(v15 + 5, &v31);
    v11 = 0;
    v9 = (uint64_t *)(a1 + 32);
    goto LABEL_11;
  }
  if ((sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)&v31) & 1) == 0)
  {
    v26 = "usdAbc/alembicWriter.cpp";
    v27 = "UsdSamples";
    v28 = 195;
    v29 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::UsdSamples(const SdfPath &, const TfToken"
          " &, const SdfAbstractData &)";
    v30 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "value.IsHolding<SdfTimeSampleMap>()", 0) & 1) == 0)
    {
LABEL_27:
      sub_20C78DF0C(a1);
      goto LABEL_28;
    }
  }
  v8 = operator new(0x10uLL);
  v8[1] = 0;
  sub_20C78DE9C((_QWORD *)(a1 + 16), (uint64_t)v8);
  sub_20BFD3C3C(*v6, &v31);
  v9 = *v6;
  v10 = (*v6)[1];
  if ((v10 & 4) == 0)
  {
    v11 = 1;
LABEL_11:
    v16 = *v9;
    goto LABEL_12;
  }
  v16 = (*(uint64_t (**)(void))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v11 = 1;
LABEL_12:
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v11;
  v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17)
    v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 112))(a4, a1, (uint64_t)v17 + 448, &v31) & 1) == 0)
  {
    v26 = "usdAbc/alembicWriter.cpp";
    v27 = "UsdSamples";
    v28 = 217;
    v29 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::UsdSamples(const SdfPath &, const TfToken"
          " &, const SdfAbstractData &)";
    v30 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
    v23 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No type name on <%s>", v21, v22, Text);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "data.Has(_propPath, SdfFieldKeys->TypeName, &value)", v23) & 1) == 0)goto LABEL_27;
  }
  if ((sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v31) & 1) == 0)
  {
    v26 = "usdAbc/alembicWriter.cpp";
    v27 = "UsdSamples";
    v28 = 218;
    v29 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::UsdSamples(const SdfPath &, const TfToken"
          " &, const SdfAbstractData &)";
    v30 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "value.IsHolding<TfToken>()", 0) & 1) == 0)
      goto LABEL_27;
  }
  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if ((v32 & 4) != 0)
    v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(uint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(&v31);
  else
    v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31;
  *(_QWORD *)(a1 + 64) = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, v19);
  sub_20C78DFEC(a1);
LABEL_28:
  sub_20BF4C2D8((uint64_t)&v31);
  return a1;
}

void sub_20C78DE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _DWORD *v10;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v11;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v12;
  va_list va;

  va_start(va, a10);
  sub_20BF4C2D8((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10 + 1);
  sub_20BFD265C(v10);
  _Unwind_Resume(a1);
}

void sub_20C78DE9C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C78E2E0(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

pxrInternal__aapl__pxrReserved__::SdfValueTypeName *sub_20C78DF0C(uint64_t a1)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *result;
  uint64_t v4;

  sub_20BDEBF08((_QWORD *)(a1 + 16));
  v2 = operator new(0x18uLL);
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  sub_20C78DF7C((_QWORD *)(a1 + 32), (uint64_t)v2);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 56) = 0;
  result = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v4);
  *(_QWORD *)(a1 + 64) = v4;
  return result;
}

void sub_20C78DF7C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C78E3C0(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C78DFEC(uint64_t a1)
{
  uint64_t v2;
  const std::type_info *v3;
  char *v4;
  const std::type_info *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t ***v11;
  double *v12;
  uint64_t Type;
  uint64_t **v14;
  uint64_t v15;
  double v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t TypeName;
  const std::type_info *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  const char *Text;
  char v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t *v43[4];
  char v44;
  uint64_t v45;

  v2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64));
  v45 = v2;
  if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v3, v4) == v2)
    v2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v5, v6);
  v7 = *(_QWORD **)(a1 + 48);
  v10 = (_QWORD *)*v7;
  v9 = v7 + 1;
  v8 = v10;
  if (v10 != v9)
  {
    v11 = (uint64_t ***)(a1 + 32);
    do
    {
      while (1)
      {
        v12 = (double *)(v8 + 5);
        Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5), v5, v6);
        if (v45 != Type)
          break;
LABEL_16:
        v22 = (_QWORD *)v8[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v8[2];
            v20 = *v23 == (_QWORD)v8;
            v8 = v23;
          }
          while (!v20);
        }
        v8 = v23;
        if (v23 == v9)
          return;
      }
      if (v2 != pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5), v5, v6))
      {
        v43[0] = (uint64_t *)"usdAbc/alembicWriter.cpp";
        v43[1] = (uint64_t *)"_Validate";
        v43[2] = (uint64_t *)247;
        v43[3] = (uint64_t *)"BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::_Validate()";
        v44 = 0;
        sub_20BFD6E54(&v41, (_DWORD *)a1);
        sub_20BFD6EA4(&v42, (_DWORD *)(a1 + 4));
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
        v27 = v8[4];
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v45);
        v31 = *(char *)(TypeName + 23) >= 0 ? TypeName : *(_QWORD *)TypeName;
        v37 = v31;
        v40 = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5), v29, v30);
        v32 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v40);
        v35 = *(char *)(v32 + 23) >= 0 ? v32 : *(_QWORD *)v32;
        v36 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Expected sample at <%s> time %f of type '%s', got '%s'", v33, v34, Text, v27, v37, v35);
        v39 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v43, "v.second.GetType() == backupType", v36);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        if ((v39 & 1) == 0)
        {
          sub_20C78DF0C(a1);
          return;
        }
      }
      v14 = *v11;
      if (*v11)
      {
        v15 = v8[6];
        if ((v15 & 4) != 0)
        {
          v12 = (double *)(*(uint64_t (**)(_QWORD *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v8 + 5);
          v14 = *v11;
        }
        v16 = *v12;
        v43[0] = v8 + 4;
        v17 = sub_20C0E7D0C(v14, (double *)v8 + 4, (uint64_t)&unk_20CAC184C, v43);
        v18 = v17;
        v19 = v17[6];
        if (v19)
          v20 = (v17[6] & 3) == 3;
        else
          v20 = 1;
        if (!v20)
          (*(void (**)(uint64_t *))((v19 & 0xFFFFFFFFFFFFFFF8) + 32))(v17 + 5);
        v21 = v16;
        v18[6] = (uint64_t)&unk_24C520593;
        *((float *)v18 + 10) = v21;
        goto LABEL_16;
      }
      v24 = (uint64_t *)operator new(0x18uLL);
      sub_20BFECEF8(v24, *(_QWORD *)(a1 + 48));
      sub_20C78DF7C((_QWORD *)(a1 + 32), (uint64_t)v24);
      v25 = *(_QWORD **)(a1 + 32);
      *(_QWORD *)(a1 + 48) = v25;
      v26 = (_QWORD *)*v25;
      v9 = v25 + 1;
      v8 = v26;
    }
    while (v26 != v9);
  }
}

void sub_20C78E2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C78E2E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54A4D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C78E328(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (v1)
  {
    v3 = (void *)sub_20BF4C2D8(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C78E348(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C78E35C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_20BF4C2D8(v1);
    operator delete(v2);
  }
}

uint64_t sub_20C78E380(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A520))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C78E3C0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v6;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54A548;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_20C78E4D0(&v6, 0);
  return a1;
}

void sub_20C78E424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C78E4D0((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C78E440(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C78E454(uint64_t a1)
{
  sub_20C78E49C(a1 + 24, *(_QWORD ***)(a1 + 24));
}

uint64_t sub_20C78E45C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A598))
    return a1 + 24;
  else
    return 0;
}

void sub_20C78E49C(uint64_t a1, _QWORD **a2)
{
  if (a2)
  {
    sub_20BFED2B4((uint64_t)a2, a2[1]);
    operator delete(a2);
  }
}

void sub_20C78E4D0(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20BFED2B4((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

uint64_t sub_20C78E510(_QWORD *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unint64_t v7;

  v2 = atomic_load((unsigned __int8 *)&qword_25498CC30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25498CC30))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CC28, "constant");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CC28, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CC30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498CC40);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498CC40))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CC38, "uniform");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CC38, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CC40);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25498CC50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25498CC50))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CC48, "varying");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CC48, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CC50);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25498CC60);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25498CC60))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CC58, "vertex");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CC58, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CC60);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_25498CC70);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498CC70))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_25498CC68, "faceVarying");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CC68, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CC70);
  }
  if (!*a1)
    return 0;
  v7 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v7 == (qword_25498CC28 & 0xFFFFFFFFFFFFFFF8))
    return 0;
  if (v7 == (qword_25498CC38 & 0xFFFFFFFFFFFFFFF8))
    return 1;
  if (v7 == (qword_25498CC48 & 0xFFFFFFFFFFFFFFF8))
    return 2;
  if (v7 == (qword_25498CC58 & 0xFFFFFFFFFFFFFFF8))
    return 3;
  if (v7 == (qword_25498CC68 & 0xFFFFFFFFFFFFFFF8))
    return 4;
  return 127;
}

void sub_20C78E7A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CC70);
  _Unwind_Resume(a1);
}

void sub_20C78E7FC(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X3>, pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a3@<X0>, uint64_t a4@<X1>, int *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t Converter;
  unint64_t ***Instance;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  const char *v18;
  const char *v19;
  char *v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  char *v34;
  unint64_t v35;
  const char *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  unint64_t v45;
  const char *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  const char *v51;
  char *v52;
  void **v53;
  unsigned int *v54;
  unsigned int v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  void *__p[2];
  char v61;
  uint64_t Type;

  if (*((_QWORD *)a2 + 1))
  {
    if (*(_QWORD *)(a4 + 24))
    {
      if ((a6 & 1) != 0
        || (Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(a3, a1), __PAIR64__(*((unsigned __int8 *)a5 + 4), *a5) == __PAIR64__(BYTE4(Converter), Converter)))
      {
        Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        if (!Instance)
          Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        v56 = 0;
        Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v56);
        if ((v56 & 7) != 0)
        {
          v14 = (unsigned int *)((unint64_t)v56 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((_QWORD **)&Type, (_QWORD **)a1)
          || (v16 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(a1),
              *v16 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type)))
        {
          v23 = *(_QWORD *)(a4 + 24);
          if (!v23)
            sub_20BE9E974();
          (*(void (**)(void **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v23 + 48))(&v56, v23, a2);
          v26 = *((unsigned __int8 *)a5 + 4);
          if (v26 == 1 || !((unint64_t)v56 % v26))
          {
            *(_QWORD *)a7 = v56;
            *(_OWORD *)(a7 + 8) = v57;
            v57 = 0uLL;
            *(_OWORD *)(a7 + 24) = v58;
            v58 = 0uLL;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Internal error: didn't get a multiple of the extent (%zd %% %d = %zd)", v24, v25, v56, *((unsigned __int8 *)a5 + 4), (unint64_t)v56 % v26);
            pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((__int128 *)__p, (_QWORD *)a7);
            if (v61 < 0)
              operator delete(__p[0]);
            v27 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
            if (*((_QWORD *)&v58 + 1))
            {
              v28 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
          if (*((_QWORD *)&v57 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, (unsigned int **)__p);
          v17 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
          if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0)
              v18 = *(const char **)v18;
          }
          else
          {
            v18 = "";
          }
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&Type, (unsigned int **)&v59);
          v45 = v59 & 0xFFFFFFFFFFFFFFF8;
          if ((v59 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v46 = (const char *)(v45 + 16);
            if (*(char *)(v45 + 39) < 0)
              v46 = *(const char **)v46;
          }
          else
          {
            v46 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Internal error: Trying to use conversion for '%s' to convert from '%s'", v43, v44, v18, v46);
          pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((__int128 *)&v56, (_QWORD *)a7);
          if (SHIBYTE(v57) < 0)
            operator delete(v56);
          if ((v59 & 7) != 0)
          {
            v47 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
            do
              v48 = __ldxr(v47);
            while (__stlxr(v48 - 2, v47));
          }
          if (((uint64_t)__p[0] & 7) != 0)
          {
            v49 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v50 = __ldxr(v49);
            while (__stlxr(v50 - 2, v49));
          }
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, (unsigned int **)&Type);
        v35 = Type & 0xFFFFFFFFFFFFFFF8;
        if ((Type & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v36 = (const char *)(v35 + 16);
          if (*(char *)(v35 + 39) < 0)
            v36 = *(const char **)v36;
        }
        else
        {
          v36 = "";
        }
        v39 = *((unsigned __int8 *)a5 + 4);
        v40 = *a5;
        if (v39 < 2)
        {
          if (v40 > 0xD)
            v42 = "UNKNOWN";
          else
            v42 = off_24C54B280[v40];
          sub_20BDDC0E4(__p, v42);
        }
        else
        {
          if (v40 > 0xD)
            v41 = "UNKNOWN";
          else
            v41 = off_24C54B280[v40];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s[%d]", v33, v34, v41, v39);
        }
        v53 = __p;
        if (v61 < 0)
          v53 = (void **)__p[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Internal error: trying to convert '%s' to '%s'", v51, v52, v36, v53);
        pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((__int128 *)&v56, (_QWORD *)a7);
        if (SHIBYTE(v57) < 0)
          operator delete(v56);
        if (v61 < 0)
          operator delete(__p[0]);
        if ((Type & 7) != 0)
        {
          v54 = (unsigned int *)(Type & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, (unsigned int **)__p);
      v21 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
      if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0)
          v22 = *(const char **)v22;
      }
      else
      {
        v22 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No conversion for '%s'", v19, v20, v22);
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((__int128 *)&v56, (_QWORD *)a7);
      if (SHIBYTE(v57) < 0)
        operator delete(v56);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v37 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
    }
  }
  else
  {
    sub_20C78F098((_QWORD *)a7);
  }
}

void sub_20C78EC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C78EDF8(uint64_t a1, double a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unsigned __int8 v11;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = *(_QWORD **)(v2 + 8);
    v3 = (_QWORD *)(v2 + 8);
    v4 = v5;
    if (v5)
    {
      v6 = v3;
      v7 = v4;
      do
      {
        v8 = v7 + 1;
        if (*((double *)v7 + 4) >= a2)
        {
          v8 = v7;
          v6 = v7;
        }
        v7 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v6 == v3)
      {
        do
        {
          v6 = v4;
          v4 = (_QWORD *)v4[1];
        }
        while (v4);
      }
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v9 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (v9);
    }
    return v6 + 5;
  }
  else
  {
    v11 = atomic_load((unsigned __int8 *)&qword_25498CC88);
    if ((v11 & 1) != 0)
    {
      return &unk_25498CC78;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_25498CC88))
      {
        qword_25498CC80 = 0;
        __cxa_atexit((void (*)(void *))sub_20C1A87F4, &unk_25498CC78, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498CC88);
      }
      return &unk_25498CC78;
    }
  }
}

BOOL sub_20C78EEDC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6;
  const char *v7;
  _BOOL8 v8;
  const char *Text;
  char *v10;
  void **v11;
  unsigned int *v12;
  unsigned int v13;
  int v15;
  int v16;
  unint64_t v17;
  _QWORD v18[4];
  char v19;
  void *v20[2];
  uint64_t v21;

  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v20))
  {
    v18[0] = "usdAbc/alembicWriter.cpp";
    v18[1] = "_CheckSample";
    v18[2] = 1382;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CheckSample(const _SampleForAlembic &, const"
             " UsdSamples &, const SdfValueTypeName &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(a3, (unsigned int **)&v17);
    v6 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0)
        v7 = *(const char **)v7;
    }
    else
    {
      v7 = "";
    }
    sub_20BFD6E54(&v15, a2);
    sub_20BFD6EA4(&v16, a2 + 1);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    v11 = v20;
    if (v21 < 0)
      v11 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v18, (pxrInternal__aapl__pxrReserved__ *)"Can't convert from '%s' on <%s>: %s", v10, v7, Text, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_20BFD265C(&v15);
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v8 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) != 0;
  }
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v8;
}

void sub_20C78F048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 33) < 0)
    operator delete(*(void **)(v14 - 56));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C78F098(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = 0;
  v2 = operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_EmptyHolder::_EmptyHolder(v2);
  sub_20C76527C(a1 + 1, (uint64_t)v2);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_20C78F0DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C78F0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = sub_20C78F15C(a1, (double **)a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  if (sub_20C78F1CC(*(double **)a2, (double *)(a2 + 8), *(double **)(v5 + 32), (double *)(v5 + 40)))
    return v3;
  return v5;
}

uint64_t sub_20C78F15C(uint64_t a1, double **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double *v7;
  int v8;
  uint64_t *v9;

  if (a3)
  {
    v5 = a3;
    v7 = (double *)(a2 + 1);
    do
    {
      v8 = sub_20C78F1CC(*(double **)(v5 + 32), (double *)(v5 + 40), *a2, v7);
      v9 = (uint64_t *)(v5 + 8);
      if (!v8)
      {
        v9 = (uint64_t *)v5;
        a4 = v5;
      }
      v5 = *v9;
    }
    while (*v9);
  }
  return a4;
}

uint64_t sub_20C78F1CC(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double *v6;
  double *v7;
  BOOL v8;
  double *v9;
  double *v10;

  if (a3 == a4)
    return 0;
  while (a1 != a2)
  {
    v4 = a1[4];
    v5 = a3[4];
    if (v4 < v5)
      break;
    if (v5 >= v4)
    {
      v6 = (double *)*((_QWORD *)a1 + 1);
      v7 = a1;
      if (v6)
      {
        do
        {
          a1 = v6;
          v6 = *(double **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          a1 = (double *)*((_QWORD *)v7 + 2);
          v8 = *(_QWORD *)a1 == (_QWORD)v7;
          v7 = a1;
        }
        while (!v8);
      }
      v9 = (double *)*((_QWORD *)a3 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(double **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (double *)*((_QWORD *)a3 + 2);
          v8 = *(_QWORD *)v10 == (_QWORD)a3;
          a3 = v10;
        }
        while (!v8);
      }
      a3 = v10;
      if (v10 != a4)
        continue;
    }
    return 0;
  }
  return 1;
}

uint64_t *sub_20C78F26C(uint64_t **a1, double **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  double *v9;

  v6 = (uint64_t **)sub_20C78F300((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C78F3B4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v9, v6, v8);
    return v8;
  }
  return result;
}

double *sub_20C78F300(uint64_t a1, double **a2, double **a3)
{
  double *v4;
  double *v5;
  double *v7;
  double *v8;
  double *v9;

  v5 = (double *)(a1 + 8);
  v4 = *(double **)(a1 + 8);
  if (v4)
  {
    v7 = (double *)(a3 + 1);
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 5;
        if (!sub_20C78F1CC(*a3, v7, *((double **)v4 + 4), v4 + 5))
          break;
        v4 = *(double **)v8;
        v5 = v8;
        if (!*(_QWORD *)v8)
          goto LABEL_10;
      }
      if (!sub_20C78F1CC(*((double **)v8 + 4), v9, *a3, v7))
        break;
      v5 = v8 + 1;
      v4 = (double *)*((_QWORD *)v8 + 1);
    }
    while (v4);
  }
  else
  {
    v8 = (double *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_20C78F3B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = (uint64_t *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C728C44(v6 + 4, *a2);
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C78F41C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C78F438(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C78F438(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BE6100C((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *sub_20C78F488(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C54A5C0;
  result[1] = v3;
  return result;
}

uint64_t sub_20C78F4C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C54A5C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C78F4E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_20C78F4EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A630))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C78F528()
{
  return &unk_24C54A630;
}

void sub_20C78F534(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  pxrInternal__aapl__pxrReserved__::TfToken *i;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *v17;
  unint64_t v18;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v20;
  uint64_t *v21;
  uint64_t *j;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  std::string v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  std::string v50;
  uint64_t v51;
  uint64_t v52;
  void *__p[2];
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  pxrInternal__aapl__pxrReserved__::TfToken *v57;
  pxrInternal__aapl__pxrReserved__::TfToken *v58;
  uint64_t v59;
  int v60;
  std::string v61;
  uint64_t v62[2];
  char **v63;
  char *v64[2];
  void **v65;
  std::string v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69[3];
  uint64_t *v70;
  std::string v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t ***v74;

  v70 = 0;
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0uLL;
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFE538C(&v70, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v7 = v70;
  v8 = v71.__r_.__value_.__r.__words[0];
  if (v70 == (uint64_t *)v71.__r_.__value_.__l.__data_)
  {
LABEL_8:
    v65 = (void **)&v70;
    sub_20BEEB2B8(&v65);
    return;
  }
  while (1)
  {
    v9 = (*v7 & 0xFFFFFFFFFFFFFFF8) != 0
       ? (unsigned __int8 *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16)
       : (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens(v9, (uint64_t *)&v65);
    if (v66.__r_.__value_.__r.__words[0] - (unint64_t)v65 >= 9
      && ((unint64_t)*v65 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      break;
    }
    v49 = (void **)&v65;
    sub_20BEEB2B8(&v49);
    if (++v7 == (uint64_t *)v8)
      goto LABEL_8;
  }
  v49 = (void **)&v65;
  sub_20BEEB2B8(&v49);
  v65 = (void **)&v70;
  sub_20BEEB2B8(&v65);
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
    sub_20BE9E974();
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)v10 + 48))(&v65);
  v11 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v66.__r_.__value_.__l.__size_)
      goto LABEL_14;
LABEL_15:
    Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v70);
    LODWORD(v65) = (_DWORD)v70;
    std::string::operator=(&v66, &v71);
    sub_20BDE881C(&v67, &v72);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v70);
    v11 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    goto LABEL_16;
  }
  if (*((_BYTE *)&v66.__r_.__value_.__s + 23))
    goto LABEL_15;
LABEL_14:
  if (!v67)
    goto LABEL_15;
LABEL_16:
  v60 = (int)v65;
  if (v11 < 0)
    sub_20BDDBFAC(&v61, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v61 = v66;
  v62[0] = v67;
  v62[1] = v68;
  if (v68)
  {
    v12 = (unint64_t *)(v68 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v64[0] = 0;
  v64[1] = 0;
  v63 = v64;
  v70 = 0;
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0uLL;
  v69[0] = &v70;
  v14 = sub_20C790424((uint64_t **)&v63, &v70, (uint64_t)&unk_20CAC184C, (uint64_t *)v69);
  *((_DWORD *)v14 + 14) = v60;
  std::string::operator=((std::string *)(v14 + 8), &v61);
  sub_20BDE881C(v14 + 11, v62);
  v49 = (void **)&v70;
  sub_20BEEB2B8(&v49);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v60);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  sub_20BFE538C(&v57, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v15 = v57;
  for (i = v58; v15 != i; v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v17)
      v17 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    v18 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
    if (v18 == (*((_QWORD *)v17 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      v17 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      if (!v17)
        v17 = sub_20C73FB70(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      v18 = *((_QWORD *)v17 + 5) & 0xFFFFFFFFFFFFFFF8;
      if (!v18)
      {
LABEL_31:
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
        goto LABEL_32;
      }
    }
    else if (!v18)
    {
      goto LABEL_31;
    }
    EmptyString = (uint64_t *)(v18 + 16);
LABEL_32:
    pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)EmptyString, (uint64_t *)&v55);
    if ((unint64_t)((char *)v56 - (char *)v55) >= 9
      && (*v55 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0D813C(v55 + 1, v56, v55);
      for (j = v56; j != v21; --j)
      {
        v24 = *(j - 1);
        v23 = v24;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
      }
      v56 = v21;
      if ((*(v21 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        v27 = (uint64_t *)((*(v21 - 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
      if (*((char *)v27 + 23) < 0)
      {
        sub_20BDDBFAC(__p, (void *)*v27, v27[1]);
      }
      else
      {
        v28 = *(_OWORD *)v27;
        v54 = v27[2];
        *(_OWORD *)__p = v28;
      }
      v29 = v56 - 1;
      v30 = *(v56 - 1);
      if ((v30 & 7) != 0)
      {
        v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      v56 = v29;
      v69[0] = &v55;
      v33 = sub_20C790A24((uint64_t **)&v63, &v55, (uint64_t)&unk_20CAC184C, v69);
      v34 = v33;
      LODWORD(v70) = *((_DWORD *)v33 + 14);
      if (*((char *)v33 + 87) < 0)
        sub_20BDDBFAC(&v71, (void *)v33[8], v33[9]);
      else
        v71 = *(std::string *)(v33 + 8);
      v35 = v34[12];
      v72 = v34[11];
      v73 = v35;
      if (v35)
      {
        v36 = (unint64_t *)(v35 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v71.__r_.__value_.__l.__size_)
          v40 = 1;
        else
          v40 = v72 == 0;
        if (!v40)
        {
          LODWORD(v49) = (_DWORD)v70;
          sub_20BDDBFAC(&v50, v71.__r_.__value_.__l.__data_, 0);
          v38 = v72;
          goto LABEL_67;
        }
      }
      else
      {
        v38 = v72;
        if (*((_BYTE *)&v71.__r_.__value_.__s + 23))
          v39 = 1;
        else
          v39 = v72 == 0;
        if (!v39)
        {
          LODWORD(v49) = (_DWORD)v70;
          v50 = v71;
LABEL_67:
          v51 = v38;
          v52 = v73;
          if (v73)
          {
            v41 = (unint64_t *)(v73 + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
LABEL_70:
          Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v70);
          v45 = (int)v49;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            sub_20BDDBFAC(&v46, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
          else
            v46 = v50;
          v47 = v51;
          v48 = v52;
          if (v52)
          {
            v43 = (unint64_t *)(v52 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          sub_20C78FC38((uint64_t *)a1, &v45, v15, (uint64_t)__p);
          Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v45);
          Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v49);
          if (SHIBYTE(v54) < 0)
            operator delete(__p[0]);
          goto LABEL_78;
        }
      }
      memset(v69, 0, sizeof(v69));
      sub_20BFE538C(v69, v55, v56, v56 - v55);
      sub_20C790794((uint64_t **)&v63, (uint64_t)v69, (uint64_t)&v49);
      v74 = v69;
      sub_20BEEB2B8((void ***)&v74);
      goto LABEL_70;
    }
LABEL_78:
    v70 = (uint64_t *)&v55;
    sub_20BEEB2B8((void ***)&v70);
  }
  v70 = (uint64_t *)&v57;
  sub_20BEEB2B8((void ***)&v70);
  sub_20C790734((uint64_t)&v63, v64[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v65);
}

void sub_20C78FB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41)
{
  uint64_t v41;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v41 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_20C78FC28(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *sub_20C78FC38(uint64_t *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *result;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD **Converter;
  _BOOL4 IsArray;
  __int128 *v15;
  const char *Text;
  unsigned int v17;
  char *v18;
  void **v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  double *v24;
  double v25;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::VtValue *v28;
  uint64_t v29;
  unint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__p[2];
  uint64_t v66;
  const char **v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  char v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  _BYTE *v80;
  unint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;

  if (sub_20C790BB0(a1, a3) == 1)
  {
    v68 = 0;
    v69 = 0;
    v67 = &v68;
    if (a1 + 7 == (uint64_t *)&v67)
    {
      v8 = 0;
    }
    else
    {
      sub_20C78D3CC((uint64_t **)a1 + 7, &v68, &v68);
      v8 = (char *)v68;
    }
    sub_20BE6100C((uint64_t)&v67, v8);
    __p[0] = 0;
    __p[1] = 0;
    v66 = 0;
    sub_20C78D5B8((uint64_t)a1, a3, (uint64_t)__p, (uint64_t)&v67);
    if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73)[3])
    {
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73);
      IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73);
      v15 = (__int128 *)(a2 + 2);
      if (IsArray)
      {
        v60 = *a2;
        if (*((char *)a2 + 31) < 0)
        {
          sub_20BDDBFAC(&v61, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
        }
        else
        {
          v61 = *v15;
          v62 = *((_QWORD *)a2 + 3);
        }
        v21 = *((_QWORD *)a2 + 5);
        v63 = *((_QWORD *)a2 + 4);
        v64 = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v59 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73) & 0xFFFFFFFFFFLL;
        sub_20C78C4A8(a1, a3, (uint64_t)&v67, (uint64_t)&v81);
        LODWORD(v74) = 3;
        v75 = &v81;
        LODWORD(v79) = 0;
        LODWORD(v80) = 0;
        v57 = 0;
        v58 = 0;
        Alembic::Abc::v12::OArrayProperty::OArrayProperty(__p, &v60, a4, &v59, &v74, &v79, &v57);
        sub_20BDE9D48((uint64_t)&v81, v82);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v60);
        v24 = (double *)a1[7];
        if (v24 != (double *)(a1 + 8))
        {
          do
          {
            v25 = v24[4];
            v26 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
            v27 = sub_20BE295E0((uint64_t)__p);
            v28 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)&v67, v25);
            sub_20C78E7FC((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73, v28, v26, (uint64_t)Converter, (int *)(v27 + 56), 1, (uint64_t)&v81);
            if (sub_20C78EEDC((uint64_t)&v81, &v67, (uint64_t)&v73))
            {
              v74 = v81 / *(unsigned __int8 *)(v27 + 60);
              sub_20BDE8894(&v79, 1uLL, &v74);
              v29 = (*(uint64_t (**)(_QWORD *))(*v82 + 16))(v82);
              v30 = *(unint64_t **)(v27 + 56);
              v74 = v29;
              v75 = v30;
              v77 = 0;
              v78 = 0;
              v76 = 0;
              sub_20BDE1364(&v76, v79, (uint64_t)v80, (v80 - (_BYTE *)v79) >> 3);
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)__p);
              if (v76)
              {
                v77 = v76;
                operator delete(v76);
              }
              if (v79)
              {
                v80 = v79;
                operator delete(v79);
              }
            }
            v31 = v84;
            if (v84)
            {
              p_shared_owners = (unint64_t *)&v84->__shared_owners_;
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v34 = v83;
            if (v83)
            {
              v35 = (unint64_t *)&v83->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v37 = (uint64_t *)*((_QWORD *)v24 + 1);
            if (v37)
            {
              do
              {
                v38 = v37;
                v37 = (uint64_t *)*v37;
              }
              while (v37);
            }
            else
            {
              do
              {
                v38 = (uint64_t *)*((_QWORD *)v24 + 2);
                v39 = *v38 == (_QWORD)v24;
                v24 = (double *)v38;
              }
              while (!v39);
            }
            v24 = (double *)v38;
          }
          while (v38 != a1 + 8);
        }
        sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
        Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)__p);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)__p);
      }
      else
      {
        v52 = *a2;
        if (*((char *)a2 + 31) < 0)
        {
          sub_20BDDBFAC(&v53, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
        }
        else
        {
          v53 = *v15;
          v54 = *((_QWORD *)a2 + 3);
        }
        v40 = *((_QWORD *)a2 + 5);
        v55 = *((_QWORD *)a2 + 4);
        v56 = v40;
        if (v40)
        {
          v41 = (unint64_t *)(v40 + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v59 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73) & 0xFFFFFFFFFFLL;
        sub_20C78C4A8(a1, a3, (uint64_t)&v67, (uint64_t)&v81);
        LODWORD(v74) = 3;
        v75 = &v81;
        LODWORD(v79) = 0;
        LODWORD(v80) = 0;
        v57 = 0;
        v58 = 0;
        Alembic::Abc::v12::OScalarProperty::OScalarProperty(__p, &v52, a4, &v59, &v74, &v79, &v57);
        sub_20BDE9D48((uint64_t)&v81, v82);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v52);
        v43 = (uint64_t *)a1[7];
        if (v43 != a1 + 8)
        {
          do
          {
            sub_20C78CE00(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (uint64_t)Converter, &v67, (Alembic::Abc::v12::OScalarProperty *)__p, *((double *)v43 + 4));
            v44 = (uint64_t *)v43[1];
            if (v44)
            {
              do
              {
                v45 = v44;
                v44 = (uint64_t *)*v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                v45 = (uint64_t *)v43[2];
                v39 = *v45 == (_QWORD)v43;
                v43 = v45;
              }
              while (!v39);
            }
            v43 = v45;
          }
          while (v45 != a1 + 8);
        }
        sub_20C78CF50((double **)a1, (uint64_t)(a1 + 7));
        Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::Abc::v12::OScalarProperty *)__p);
        Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)__p);
      }
    }
    v46 = v72;
    if (v72)
    {
      v47 = (unint64_t *)&v72->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)v70;
    if (v70)
    {
      v50 = (unint64_t *)(v70 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
    v20 = (unint64_t *)&v67;
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)sub_20BFD265C(v20);
  }
  result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!result)
    result = sub_20C728BBC(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  v10 = *(_QWORD **)(*a1 + 24);
  if (v10)
  {
    v11 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v12 = v10[4] & 0xFFFFFFFFFFFFFFF8;
      if (v11 >= v12)
      {
        if (v12 >= v11)
        {
          v67 = (const char **)"usdAbc/alembicWriter.cpp";
          v68 = "_WriteOutOfSchemaProperty";
          v69 = 2098;
          v70 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_WriteOutOfSchemaProperty(_PrimWriterConte"
                "xt *, OCompoundProperty, const TfToken &, const std::string &)";
          v71 = 0;
          sub_20C78BE88((uint64_t)a1, &v74);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v74, a3, (int *)&v81);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
          v17 = sub_20C790BB0(a1, a3);
          pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&stru_24C524D70, v17, (uint64_t)__p);
          if (v66 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v67, (pxrInternal__aapl__pxrReserved__ *)"No conversion for <%s> with spec type '%s'", v18, Text, v19);
          if (SHIBYTE(v66) < 0)
            operator delete(__p[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
          sub_20BFD265C(&v81);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v74 + 1);
          v20 = &v74;
          return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)sub_20BFD265C(v20);
        }
        ++v10;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return result;
}

void sub_20C7902E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38)
{
  sub_20C78D390(&a37);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C790424(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20C7904B8((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C79054C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_20C7904B8(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  char v9;
  char v10;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!sub_20C7905CC(*a3, a3[1], (uint64_t *)v4[4], (uint64_t *)v4[5], (uint64_t)&v9))
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20C7905CC((uint64_t *)v7[4], (uint64_t *)v7[5], *a3, a3[1], (uint64_t)&v10))
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_20C79054C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C790668((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7905B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C7906E4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7905CC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v7;
  char v10;
  uint64_t result;

  if (a3 == a4)
    return 0;
  v7 = a3;
  while (a1 != a2 && (sub_20BF1E6D8(a5, a1, v7) & 1) == 0)
  {
    v10 = sub_20BF1E6D8(a5, v7, a1);
    result = 0;
    if ((v10 & 1) == 0)
    {
      ++a1;
      if (++v7 != a4)
        continue;
    }
    return result;
  }
  return 1;
}

uint64_t sub_20C790668(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 32), "");
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_20C7906CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C7906E4(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(__p + 7));
    v3 = __p + 4;
    sub_20BEEB2B8(&v3);
  }
  if (__p)
    operator delete(__p);
}

void sub_20C790734(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_20C790734(a1, *(_QWORD *)a2);
    sub_20C790734(a1, *((_QWORD *)a2 + 1));
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a2 + 56));
    v4 = (void **)(a2 + 32);
    sub_20BEEB2B8(&v4);
    operator delete(a2);
  }
}

_BYTE *sub_20C790794@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t *EmptyString;
  unsigned int v21;
  _BYTE *result;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _DWORD v27[4];
  _DWORD v28[4];
  int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  std::string v35;
  uint64_t v36;
  uint64_t **v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v37 = (uint64_t **)a2;
  v6 = sub_20C790A24(a1, (uint64_t **)a2, (uint64_t)&unk_20CAC184C, &v37);
  v7 = v6;
  if (*((char *)v6 + 87) < 0)
  {
    if (!v6[9])
      goto LABEL_5;
  }
  else if (!*((_BYTE *)v6 + 87))
  {
LABEL_5:
    if (v6[11])
      goto LABEL_28;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(v8 - 8);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) != 0)
      v12 = v9;
    else
      v12 = v9 & 0xFFFFFFFFFFFFFFF8;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(v8 - 8);
  }
  else
  {
    v12 = *(_QWORD *)(v8 - 8);
  }
  v13 = v8 - 8;
  if ((v9 & 7) != 0)
  {
    v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  *(_QWORD *)(a2 + 8) = v13;
  sub_20C790794(&v37, a1, a2);
  v29 = (int)v37;
  v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)&v30;
  if (SHIBYTE(v39) < 0)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDDBFAC(&v30, (void *)v38, *((unint64_t *)&v38 + 1));
  }
  else
  {
    v30 = v38;
    v31 = v39;
  }
  v32 = v40;
  v33 = v41;
  if (v41)
  {
    v17 = (unint64_t *)(v41 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(v19 + 4);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  v28[0] = 0;
  v28[2] = 0;
  v27[0] = 0;
  v27[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v34, &v29, EmptyString, v28, v27);
  *((_DWORD *)v7 + 14) = v34;
  std::string::operator=((std::string *)(v7 + 8), &v35);
  sub_20BDE881C(v7 + 11, &v36);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v34);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v29);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v37);
  if ((v12 & 7) != 0)
  {
    do
      v21 = __ldxr(v19);
    while (__stlxr(v21 - 2, v19));
  }
LABEL_28:
  *(_DWORD *)a3 = *((_DWORD *)v7 + 14);
  result = (_BYTE *)(a3 + 8);
  if (*((char *)v7 + 87) < 0)
  {
    result = sub_20BDDBFAC(result, (void *)v7[8], v7[9]);
  }
  else
  {
    v23 = *((_OWORD *)v7 + 4);
    *(_QWORD *)(a3 + 24) = v7[10];
    *(_OWORD *)result = v23;
  }
  *(_QWORD *)(a3 + 32) = v7[11];
  v24 = v7[12];
  *(_QWORD *)(a3 + 40) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  return result;
}

void sub_20C7909C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a5);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)va);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v6 - 96));
  if ((v5 & 7) != 0)
  {
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C790A24(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20C7904B8((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C790AB8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_20C790AB8@<X0>(uint64_t a1@<X0>, uint64_t ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C790B38((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C790B1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C7906E4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C790B38(uint64_t a1, uint64_t **a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20BFE538C((_QWORD *)a1, *a2, a2[1], a2[1] - *a2);
  *(_DWORD *)(a1 + 24) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 32), "");
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_20C790B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C790BB0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;

  v4 = *a1;
  v5 = *a1;
  v7 = *(_QWORD *)(v5 + 104);
  v6 = (uint64_t *)(v5 + 104);
  if (v7)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v6) + 14))
      v8 = *(_QWORD *)(v4 + 96);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  sub_20C78BE88((uint64_t)a1, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a2, &v13);
  v9 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v8 + 96))(v8, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  return v9;
}

void sub_20C790C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C790CA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C54A660;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C790CE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C54A660;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C790D08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_20C790D24(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A6F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C790D60()
{
  return &unk_24C54A6F8;
}

uint64_t sub_20C790D6C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
}

void sub_20C790D7C(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[3];

  v7 = *a3;
  v8 = operator new(8uLL);
  *v8 = v7;
  v9[1] = v8 + 1;
  v9[2] = v8 + 1;
  v9[0] = v8;
  sub_20C78D5B8(a1, a2, (uint64_t)v9, a4);
  operator delete(v8);
}

void sub_20C790DF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20C790E04()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498CC90);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "transform", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "xformOp:transform", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498CC90))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498CC90))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498CC90);
  }
  return (unint64_t)v0;
}

void sub_20C791014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C7910B0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  uint64_t **p_p_p;
  _DWORD v51[4];
  __int128 *v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 __p;
  uint64_t v57;
  std::string v58;
  __int128 *p_p;
  _QWORD *v60[3];
  std::__shared_weak_count *v61;
  std::string __str;
  void *v63;
  char v64;
  _QWORD *v65[3];
  __int128 v66;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _DWORD *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const void **v75[3];
  _QWORD *v76;
  std::__shared_weak_count *v77;
  int v78;
  uint64_t v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54A720;
  sub_20C791BE8(a1 + 56);
  v13 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)&__p + 1) = 0;
  v57 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v72 = 0;
  v73 = 0;
  v74 = v13;
  sub_20BDEBF8C((uint64_t *)v75, (const void ***)&__p);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a4, (uint64_t)&v74);
  sub_20BE02E30(a5, (uint64_t)&v74);
  sub_20BE02E30(a6, (uint64_t)&v74);
  *v12 = v74;
  v70 = v12;
  v71 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v68 = v15;
  v69 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v57, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v66);
    if (v67 < 0)
      operator delete((void *)v66);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v66, v75);
  if (HIDWORD(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_Xform_v3");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20C7918FC(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v66);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, &__p);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v76;
  v60[2] = v76;
  v61 = v77;
  if (v77)
  {
    v25 = (unint64_t *)&v77->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v24)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v68 + 24))(&__p);
    v27 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)__p + 48))(__p, v24);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v27 = v78;
  }
  v60[1] = 0;
  v60[0] = 0;
  p_p = (__int128 *)v60;
  if (HIDWORD(v79) == 1)
  {
    sub_20BDDC0E4(&__p, "replace");
    sub_20BDDC0E4(&v58, "1");
    v52 = &__p;
    v31 = sub_20BDDDFDC((uint64_t **)&p_p, (const void **)&__p, (uint64_t)&unk_20CAC184C, &v52);
    std::string::operator=((std::string *)(v31 + 7), &v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57) < 0)
      operator delete((void *)__p);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v54);
  sub_20BDDC0E4(&v58, ".xform");
  v32 = *v12;
  LODWORD(v52) = 1;
  v53 = v32;
  v51[0] = 2;
  v51[2] = v27;
  v49 = 3;
  p_p_p = (uint64_t **)&p_p;
  v48[0] = 6;
  v48[2] = v18;
  Alembic::AbcGeom::v12::OXformSchema::OXformSchema(&__p, &v54, &v58, &v52, v51, &v49, v48);
  sub_20C7919D8(a1 + 56, (uint64_t)&__p);
  sub_20BE6C0C4((uint64_t)&__p);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v33 = v55;
  if (v55)
  {
    v34 = (unint64_t *)&v55->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v60[0]);
  v36 = v61;
  if (v61)
  {
    v37 = (unint64_t *)&v61->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v65, v65[1]);
  if (v64 < 0)
    operator delete(v63);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  v39 = v69;
  if (v69)
  {
    v40 = (unint64_t *)&v69->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v77;
  if (v77)
  {
    v43 = (unint64_t *)&v77->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v75, v75[1]);
  return a1;
}

void sub_20C7916D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list __p;

  va_start(__p, a12);
  sub_20BDDC194((std::exception *)&STACK[0x258]);
  sub_20BDDBE98((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 - 200));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20C791B44(v12);
  sub_20C791B44(v12);
}

void sub_20C791828()
{
  uint64_t v0;

  sub_20BE02504(v0 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C7915F4);
}

void sub_20C791844()
{
  __cxa_end_catch();
  JUMPOUT(0x20C7918DCLL);
}

void sub_20C791850()
{
  __cxa_end_catch();
  JUMPOUT(0x20C7918DCLL);
}

void sub_20C791864()
{
  JUMPOUT(0x20C7917D4);
}

void sub_20C79187C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x20C7917DCLL);
}

void sub_20C7918B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v20 - 168));
  sub_20BDE9D48((uint64_t)&a19, a20);
  JUMPOUT(0x20C7918E4);
}

void sub_20C7918D0()
{
  JUMPOUT(0x20C7918ECLL);
}

void sub_20C7918D8(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 152);
  sub_20BE6C0C4(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20C7918FC(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Xform_v3");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".xform");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C7919A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7919D8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  v4 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = v4;
  if (a1 != a2)
    sub_20BDDF7E4((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  sub_20BDE881C((_QWORD *)(a1 + 144), (uint64_t *)(a2 + 144));
  sub_20BDE82DC(a1 + 160, (__int128 *)(a2 + 160));
  sub_20BDE82DC(a1 + 176, (__int128 *)(a2 + 176));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  sub_20BDE881C((_QWORD *)(a1 + 224), (uint64_t *)(a2 + 224));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  sub_20BDE881C((_QWORD *)(a1 + 272), (uint64_t *)(a2 + 272));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  sub_20BE676D8((void **)(a1 + 296));
  v5 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v5;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_20BDE881C((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  sub_20BDE82DC(a1 + 440, (__int128 *)(a2 + 440));
  return a1;
}

void sub_20C791B44(uint64_t a1)
{
  sub_20BE6A17C(a1 + 56);
}

void sub_20C791B5C()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

void sub_20C791B7C(void **a1)
{
  *a1 = &unk_24C54A720;
  sub_20BE6C0C4((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_20C791BB0(void **a1)
{
  void *v2;

  *a1 = &unk_24C54A720;
  sub_20BE6C0C4((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
  operator delete(v2);
}

uint64_t sub_20C791BE8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C519AB8;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 120), "");
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_20BDDC0E4((_QWORD *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 248), "");
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 288);
  *(_BYTE *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_BYTE *)(a1 + 336) = 1;
  return a1;
}

void sub_20C791D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;
  void **v15;
  void **v16;
  void **v17;
  Alembic::Abc::v12::OCompoundProperty *v18;
  void *v20;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v18);
  a10 = v10 + 296;
  sub_20BE67B24((void ***)&a10);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v16);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v12);
  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v10 + 96) = v20;
    operator delete(v20);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v11);
  _Unwind_Resume(a1);
}

void sub_20C791DCC()
{
  JUMPOUT(0x20C791DACLL);
}

_QWORD *sub_20C791DD4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54A758;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C791E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C791E40(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C791E54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C791E6C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A7A8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C791EAC(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C791EDC(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

void sub_20C791F0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  v7 = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C791FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79200C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Alembic::AbcGeom::v12::OXformSchema::getArbGeomParams((Alembic::AbcGeom::v12::OXformSchema *)(v2 + 56), a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C792094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7920A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Alembic::AbcGeom::v12::OXformSchema::getUserProperties((Alembic::AbcGeom::v12::OXformSchema *)(v2 + 56), a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C792130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C792148(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79215C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C792174(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A870))
    return a1 + 24;
  else
    return 0;
}

void sub_20C7921B4(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[3];

  v8 = *a3;
  v9 = *a4;
  v10 = operator new(0x10uLL);
  v11[1] = v10 + 2;
  v11[2] = v10 + 2;
  *v10 = v8;
  v10[1] = v9;
  v11[0] = v10;
  sub_20C78D5B8(a1, a2, (uint64_t)v11, a5);
  operator delete(v10);
}

void sub_20C79222C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C792240(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = result;
  v5 = (_QWORD *)result[10];
  v4 = (_QWORD *)result[11];
  if (v5 != v4)
  {
    v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while ((*v5 & 0xFFFFFFFFFFFFFFF8) != v6)
    {
      if (++v5 == v4)
      {
        v5 = (_QWORD *)result[11];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    result = sub_20C0D813C(v5 + 1, v4, v5);
    for (i = v3[11]; i != v7; i -= 8)
    {
      v10 = *(_QWORD *)(i - 8);
      v9 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
    }
    v3[11] = v7;
  }
  return result;
}

uint64_t sub_20C7922D8(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  _QWORD *v10;
  double *v11;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  double *v39;
  double *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t **v43;
  _QWORD *v44;
  _QWORD *v46;
  double *v47;
  __n128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53[2];
  char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  char v58;
  char v59[8];
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5)
    v5 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v5 + 728);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20C78BD90(a1, v6, (uint64_t)v7 + 88);
  if (!sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v59))
    goto LABEL_11;
  if ((v60 & 4) != 0)
    v8 = (char *)(*(uint64_t (**)(char *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v59);
  else
    v8 = v59;
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v9 + 66) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_11:
    v53[0] = 0;
    v53[1] = 0;
    v52 = (uint64_t *)v53;
    v10 = (_QWORD *)a2[6];
    v11 = (double *)*v10;
    v46 = a2;
    v47 = (double *)(v10 + 1);
    if ((_QWORD *)*v10 != v10 + 1)
    {
      do
      {
        v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8(a3, v11[4]);
        if ((sub_20BF64C0C((pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 5)) & 1) != 0
          || (v54 = "usdAbc/alembicWriter.cpp",
              v55 = "_ReverseWindingOrder",
              v56 = 1175,
              v57 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReverseWindingOrder(UsdSamples *, con"
                    "st UsdSamples &) [T = int]",
              v58 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "valuesValue.IsHolding<ValueArray>()", 0) & 1) != 0))
        {
          if ((sub_20BF64C0C(v12) & 1) != 0
            || (v54 = "usdAbc/alembicWriter.cpp",
                v55 = "_ReverseWindingOrder",
                v56 = 1178,
                v57 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReverseWindingOrder(UsdSamples *, c"
                      "onst UsdSamples &) [T = int]",
                v58 = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "countsValue.IsHolding<CountArray>()", 0) & 1) != 0))
          {
            v15 = *((_QWORD *)v11 + 6);
            if ((v15 & 4) != 0)
              v16 = (*(uint64_t (**)(_QWORD *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))((_QWORD *)v11 + 5);
            else
              v16 = *((_QWORD *)v11 + 5);
            v17 = *(_OWORD *)(v16 + 16);
            v49 = *(__n128 *)v16;
            v50 = v17;
            v18 = *(_QWORD *)(v16 + 32);
            v51 = v18;
            if (v18)
            {
              v19 = (unint64_t *)(v18 - 16);
              if (*((_QWORD *)&v50 + 1))
                v19 = (unint64_t *)*((_QWORD *)&v50 + 1);
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
            v21 = *((_QWORD *)v12 + 1);
            if ((v21 & 4) != 0)
              v22 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v12);
            else
              v22 = *(uint64_t **)v12;
            v23 = *v22;
            if (*v22)
            {
              v24 = 0;
              v25 = 0;
              v26 = v49.n128_u64[0];
              while (1)
              {
                v27 = *(int *)(v22[4] + 4 * v24);
                if (v25 + v27 > v26)
                {
                  v54 = "usdAbc/alembicUtil.h";
                  v55 = "UsdAbc_ReverseOrderImpl";
                  v56 = 1048;
                  v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_ReverseOrderImpl(VtArray<T> &,"
                        " const VtArray<int> &) [T = int]";
                  v58 = 0;
                  if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "j + count <= n", 0))break;
                }
                sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v49, v13, v14);
                v28 = v51;
                sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v49, v29, v30);
                v31 = v28 + 4 * v25;
                v32 = v51 + 4 * v25 + 4 * v27;
                v33 = (_DWORD *)(v32 - 4);
                if (v31 != v32 && (unint64_t)v33 > v31)
                {
                  v35 = v31 + 4;
                  do
                  {
                    v36 = *(_DWORD *)(v35 - 4);
                    *(_DWORD *)(v35 - 4) = *v33;
                    *v33-- = v36;
                    v37 = v35 >= (unint64_t)v33;
                    v35 += 4;
                  }
                  while (!v37);
                }
                ++v24;
                v25 += v27;
                if (v24 == v23)
                  goto LABEL_37;
              }
            }
            else
            {
LABEL_37:
              v54 = (char *)(v11 + 4);
              v38 = sub_20C0E7D0C(&v52, v11 + 4, (uint64_t)&unk_20CAC184C, (uint64_t **)&v54);
              sub_20BF65058((pxrInternal__aapl__pxrReserved__::VtValue *)(v38 + 5), &v49);
            }
            sub_20BF5618C((uint64_t)&v49);
          }
        }
        v39 = (double *)*((_QWORD *)v11 + 1);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = *(double **)v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (double *)*((_QWORD *)v11 + 2);
            v41 = *(_QWORD *)v40 == (_QWORD)v11;
            v11 = v40;
          }
          while (!v41);
        }
        v11 = v40;
      }
      while (v40 != v47);
    }
    v43 = (uint64_t **)(v46 + 4);
    v42 = (uint64_t *)v46[4];
    if (!v42)
    {
      sub_20BDEBF08(v46 + 2);
      v44 = operator new(0x18uLL);
      v44[2] = 0;
      v44[1] = 0;
      *v44 = v44 + 1;
      sub_20C78DF7C(v43, (uint64_t)v44);
      v42 = *v43;
    }
    sub_20BF07C64(v42, (uint64_t)&v52);
    v46[6] = v46[4];
    sub_20C78DFEC((uint64_t)v46);
    sub_20BFED2B4((uint64_t)&v52, v53[0]);
  }
  return sub_20BF4C2D8((uint64_t)v59);
}

