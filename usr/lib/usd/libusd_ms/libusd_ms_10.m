void sub_20C1D8624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfCreateVariantInLayer@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int *v17;

  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a2, a3, a4, &v15);
  pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a1, (uint64_t)&v15, &v14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
  v8 = v13;
  v17 = v13;
  if (v13)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = v17;
    *a5 = v17;
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  else
  {
    *a5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C1D87CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1D87E4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C18BDF8((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527C80, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527C80, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527AF0, (void *(*)(void *, BOOL))nullsub_299);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1D88B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t textFileFormatYyparse(pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD ***v25;
  const std::string *v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const char *v30;
  std::string::size_type size;
  size_t v32;
  std::string *p_str;
  const char *v34;
  char *v35;
  std::string *v36;
  const char *v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t k;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v49;
  uint64_t v50;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  const char *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  _DWORD *kk;
  _DWORD *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v75;
  const void ****v76;
  uint64_t v77;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i22;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t jj;
  uint64_t i10;
  uint64_t v88;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v89;
  const void ****v90;
  uint64_t v91;
  _DWORD *i25;
  _DWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t i12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v97;
  _DWORD *i6;
  _DWORD *v99;
  uint64_t i14;
  uint64_t n;
  _DWORD *i24;
  uint64_t i19;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  _DWORD *i5;
  const std::string *v109;
  __int128 v110;
  const void **v111;
  uint64_t v112;
  int v113;
  const std::string::value_type *v114;
  std::string::size_type v115;
  std::string *v116;
  unint64_t v117;
  void *v118;
  int v119;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *v123;
  uint64_t v124;
  uint64_t *v125;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v126;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  size_t v131;
  _BYTE *v132;
  char *v133;
  const char *v134;
  char *v135;
  _BYTE *v136;
  std::string *v137;
  unint64_t v138;
  uint64_t v139;
  std::string *v140;
  _QWORD *v141;
  uint64_t v142;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v143;
  uint64_t v144;
  uint64_t i23;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _DWORD *i2;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  _QWORD *v160;
  std::string::size_type v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v165;
  unsigned int *v166;
  unsigned int v167;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  std::string *v173;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  uint64_t i15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v181;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  char *v188;
  uint64_t v189;
  const char *v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t *UnitFromName;
  const char *v195;
  char *v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  unsigned int *v203;
  unsigned int v204;
  uint64_t i18;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  uint64_t v210;
  char *v211;
  size_t v212;
  _BYTE *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  pxrInternal__aapl__pxrReserved__::TfToken *v217;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  uint64_t v225;
  const char *v226;
  char *v227;
  uint64_t v228;
  const char *v229;
  uint64_t *v230;
  char *v231;
  int v232;
  uint64_t v233;
  const char *v234;
  char *v235;
  char *v236;
  int v237;
  const char *v238;
  char *v239;
  _BYTE *v240;
  uint64_t i17;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  _DWORD *i26;
  uint64_t v250;
  __int128 v251;
  _DWORD *i27;
  uint64_t v253;
  __int128 v254;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v255;
  uint64_t v256;
  _DWORD *i3;
  uint64_t i20;
  uint64_t v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int *v267;
  unsigned int v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t i13;
  const char *v272;
  char *v273;
  uint64_t v274;
  void *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  _DWORD *i29;
  _DWORD *v280;
  uint64_t i21;
  uint64_t v282;
  uint64_t v283;
  unsigned int *v284;
  unsigned int v285;
  uint64_t v286;
  _DWORD *i28;
  uint64_t v288;
  uint64_t i16;
  uint64_t v290;
  uint64_t v291;
  unsigned int *v292;
  unsigned int v293;
  uint64_t j;
  _DWORD *i4;
  _DWORD *i9;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t m;
  _DWORD *mm;
  const char *v302;
  _QWORD *v303;
  uint64_t v304;
  const char *v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v309;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v310;
  uint64_t v311;
  uint64_t v312;
  _DWORD *i1;
  uint64_t ii;
  uint64_t v315;
  uint64_t v316;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  _DWORD *i8;
  unsigned int *v324;
  unsigned int v325;
  uint64_t v326;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v327;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t i11;
  uint64_t v332;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _DWORD *i7;
  uint64_t v338;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v339;
  uint64_t v340;
  uint64_t i;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  _DWORD *nn;
  uint64_t v347;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v348;
  uint64_t v349;
  pxrInternal__aapl__pxrReserved__::SdfPath *v350;
  uint64_t v351;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int *v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  int v360;
  const char *v361;
  char *v362;
  _BYTE *v363;
  unint64_t v364;
  _OWORD *v365;
  _OWORD *v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  char *v376;
  const char *v377;
  unint64_t v378;
  uint64_t v379;
  const char *v380;
  unint64_t v381;
  uint64_t *v382;
  const char *v383;
  char *v384;
  uint64_t v385;
  const char *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  const char *v391;
  char *v392;
  uint64_t v393;
  const char *v394;
  uint64_t v395;
  uint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  __int128 v400;
  uint64_t *v401;
  uint64_t *v402;
  uint64_t v403;
  std::string *v404;
  unsigned int *v405;
  unsigned int v406;
  unsigned int *v407;
  unsigned int v408;
  const char *v409;
  char *v410;
  unint64_t v411;
  const char *v412;
  uint64_t v413;
  unsigned int *v414;
  unsigned int v415;
  void *v416;
  const char *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  std::string *v421;
  void *v422;
  uint64_t *WhyNot;
  const char *v424;
  char *v425;
  uint64_t v426;
  void **v427;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v428;
  uint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  char *v437;
  char *v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  int64x2_t v442;
  const char *v443;
  uint64_t v444;
  const char *Text;
  const char *v446;
  char *v447;
  const char *v448;
  uint64_t v449;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v450;
  uint64_t v451;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v452;
  unsigned int *v453;
  unsigned int v454;
  uint64_t v455;
  unsigned int *v456;
  unsigned int v457;
  uint64_t v458;
  const char *v459;
  size_t v460;
  _QWORD *v461;
  uint64_t v462;
  std::string::size_type v463;
  char *v464;
  std::string *p_p;
  _QWORD *v466;
  uint64_t v467;
  uint64_t i30;
  std::string::size_type v470;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t *v475;
  uint64_t *v476;
  uint64_t v477;
  _QWORD *v478;
  uint64_t *v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t *v483;
  uint64_t *v484;
  uint64_t *v485;
  char **v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t **v489;
  uint64_t *v490;
  __int128 **v491;
  double *v492;
  uint64_t **v493;
  uint64_t **v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  pxrInternal__aapl__pxrReserved__::VtValue *v501;
  _OWORD *v502;
  uint64_t *v503;
  int *v504;
  int *v505;
  std::string *v506;
  int *v507;
  int *v508;
  uint64_t *v509;
  pxrInternal__aapl__pxrReserved__::SdfPath *v510;
  _QWORD v511[6];
  int v512;
  _QWORD v513[6];
  int v514;
  void *v515[2];
  char v516;
  std::string __p;
  __int128 v518;
  int64_t v519;
  int v520;
  int v521;
  char *v522;
  std::string __str;
  void *v524;
  char v525;
  char v526[8];
  char *v527;
  _QWORD v528[2];
  _BYTE __dst[32];
  uint64_t v530;
  char v531;
  _QWORD **v532[2];
  _BYTE v533[84000];
  _WORD v534[1500];
  char v535[8];
  uint64_t v536;
  uint64_t v537;

  v3 = MEMORY[0x24BDAC7A8](a1, a2, a3);
  v5 = v3;
  v537 = *MEMORY[0x24BDAC8D0];
  v513[0] = 0;
  v514 = 0;
  v6 = v533;
  v7 = 1500;
  do
  {
    *(_QWORD *)v6 = 0;
    *((_DWORD *)v6 + 12) = 0;
    v6 += 56;
    --v7;
  }
  while (v7);
  v8 = 0;
  v9 = 0;
  v511[0] = 0;
  v512 = 0;
  v504 = (int *)(v3 + 220);
  v534[0] = 0;
  v488 = v3 + 232;
  v509 = (uint64_t *)(v3 + 808);
  v494 = (uint64_t **)(v3 + 184);
  v500 = (uint64_t *)(v3 + 832);
  v507 = (int *)(v3 + 456);
  v501 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 760);
  v492 = (double *)(v3 + 208);
  v485 = (uint64_t *)(v3 + 192);
  v478 = (_QWORD *)(v3 + 48);
  v496 = v3 + 304;
  v474 = (uint64_t *)(v3 + 288);
  v484 = (uint64_t *)(v3 + 848);
  v493 = (uint64_t **)(v3 + 160);
  v487 = (uint64_t *)(v3 + 896);
  v480 = (uint64_t *)(v3 + 920);
  v479 = (uint64_t *)(v3 + 944);
  v477 = v3 + 176;
  v489 = (uint64_t **)(v3 + 416);
  v490 = (uint64_t *)(v3 + 872);
  v476 = (uint64_t *)(v3 + 344);
  v497 = v3 + 336;
  v498 = v3 + 360;
  v475 = (uint64_t *)(v3 + 320);
  v502 = (_OWORD *)(v3 + 96);
  v495 = v3 + 384;
  v506 = (std::string *)(v3 + 72);
  v499 = v3 + 408;
  v482 = (uint64_t *)(v3 + 392);
  v483 = (uint64_t *)(v3 + 368);
  v481 = v3 + 424;
  v491 = (__int128 **)(v3 + 112);
  v486 = (char **)(v3 + 136);
  v473 = v3 + 152;
  v472 = (_QWORD *)(v3 + 24);
  v10 = -2;
  v11 = v533;
  v508 = (int *)(v3 + 216);
  v510 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 816);
  v505 = (int *)(v3 + 820);
  v503 = (uint64_t *)(v3 + 824);
  while (1)
  {
    if (v9 == 5)
    {
LABEL_956:
      v467 = 0;
      goto LABEL_959;
    }
    v12 = word_20CABEF7E[v9];
    if (v12 == -673)
      break;
    if (v10 == -2)
      v10 = textFileFormatYylex((uint64_t)v513, *(_QWORD **)(v5 + 976), v4);
    if (v10 < 1)
    {
      v10 = 0;
      v13 = 0;
    }
    else
    {
      v13 = v10 > 0x136 ? 2 : byte_20CABF62A[v10];
    }
    v14 = (v13 + v12);
    if (v14 > 0x3D5 || v13 != (__int16)word_20CABF762[v14])
      break;
    v9 = word_20CABFF0E[v14];
    if (!word_20CABFF0E[v14])
      goto LABEL_957;
    v11 += 56;
    sub_20C1E3448((uint64_t)v11, (uint64_t)v513);
    v10 = -2;
LABEL_891:
    v534[v8 + 1] = v9;
    if (v8++ > 1497)
    {
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, "memory exhausted");
      v467 = 2;
      goto LABEL_959;
    }
  }
  v15 = word_20CAC06BA[v9];
  if (word_20CAC06BA[v9])
  {
    v16 = byte_20CAC0D66[v15];
    sub_20C1E3448((uint64_t)v511, (uint64_t)&v11[-56 * v16 + 56]);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 7;
    v24 = (uint64_t)v11;
    switch((int)v15)
    {
      case 47:
        v332 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
        v333 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v333)
          v333 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        v334 = *(_QWORD *)(v5 + 880);
        v335 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C526790;
        sub_20C030230(__dst, (uint64_t **)(v334 - 24));
        (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v335 + 152))(v335, v332, (uint64_t)v333 + 32, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        *(_QWORD *)__dst = *(_QWORD *)(v5 + 880) - 24;
        v336 = *(_QWORD *)__dst;
        sub_20BEEB2B8((void ***)__dst);
        *(_QWORD *)(v5 + 880) = v336;
        goto LABEL_887;
      case 48:
        v26 = (const std::string *)sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfStringTrimRight(" \n\t\r", v26, &__str);
        std::operator+<char>();
        v27 = std::string::append((std::string *)__dst, " ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v519 = v27->__r_.__value_.__r.__words[2];
        v518 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v470 = HIBYTE(v519);
        v29 = SHIBYTE(v519);
        if (v519 >= 0)
          v30 = (const char *)&v518;
        else
          v30 = (const char *)v518;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        v32 = strlen(v30);
        if (size >= v32
          && ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (p_str = &__str)
            : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
              !strncmp((const char *)p_str, v30, v32)))
        {
          if (*(char *)(v5 + 47) < 0)
            v458 = *(_QWORD *)(v5 + 32);
          else
            v458 = *(unsigned __int8 *)(v5 + 47);
          if (v458)
          {
            v459 = *(char *)(v5 + 47) >= 0 ? (const char *)v472 : (const char *)*v472;
            v460 = strlen(v459);
            if (size < v460 || strcmp((const char *)p_str + size - v460, v459))
            {
              *(_QWORD *)__dst = "sdf/textFileFormat.yy";
              *(_QWORD *)&__dst[8] = "_MatchMagicIdentifier";
              *(_QWORD *)&__dst[16] = 305;
              *(_QWORD *)&__dst[24] = "void _MatchMagicIdentifier(const Value &, Sdf_TextParserContext *)";
              LOBYTE(v530) = 0;
              v461 = v478;
              if (*(char *)(v5 + 71) < 0)
                v461 = (_QWORD *)*v478;
              v462 = v5;
              if (*(char *)(v5 + 23) < 0)
                v462 = *(_QWORD *)v5;
              if (v29 >= 0)
                v463 = v470;
              else
                v463 = *((_QWORD *)&v518 + 1);
              std::string::basic_string(&__p, &__str, v463, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v515);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v466 = v472;
              if (*(char *)(v5 + 47) < 0)
                v466 = (_QWORD *)*v472;
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"File '%s' is not the latest %s version (found '%s', expected '%s'). The file may parse correctly and yield incorrect results.", v464, v461, v462, p_p, v466);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__str, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36 = &__p;
          else
            v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Magic Cookie '%s'. Expected prefix of '%s'", v34, v35, v36, v30);
          if (__dst[23] >= 0)
            v37 = __dst;
          else
            v37 = *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v37);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          LOBYTE(v29) = HIBYTE(v519);
        }
        if ((v29 & 0x80) != 0)
          operator delete((void *)v518);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        memset(__dst, 0, 24);
        sub_20C1DE1D8(v490, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_20BEEB2B8((void ***)&__str);
        v39 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v38);
        v40 = sub_20C026788(v509);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 64))(v40, v39, 7);
        goto LABEL_886;
      case 50:
        goto LABEL_663;
      case 51:
        if (*(_BYTE *)(v5 + 800))
          goto LABEL_958;
LABEL_663:
        if (*(_BYTE *)(v5 + 864))
          goto LABEL_956;
        goto LABEL_887;
      case 57:
        v97 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v97)
          v97 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_681;
      case 58:
        goto LABEL_427;
      case 59:
      case 61:
      case 63:
      case 65:
      case 67:
      case 69:
        goto LABEL_22;
      case 60:
        sub_20C1DE314((uint64_t)v11, 7u, v5);
        goto LABEL_557;
      case 62:
        sub_20C1DE314((uint64_t)v11, 7u, v5);
        goto LABEL_620;
      case 64:
        sub_20C1DE314((uint64_t)v11, 7u, v5);
        goto LABEL_514;
      case 66:
        sub_20C1DE314((uint64_t)v11, 7u, v5);
        goto LABEL_505;
      case 68:
        sub_20C1DE314((uint64_t)v11, 7u, v5);
        goto LABEL_555;
      case 70:
        v181 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v181)
          v181 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_553;
      case 73:
        v347 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
        v348 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v348)
          v348 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v349 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C526420;
        sub_20C020E24(__dst, v491);
        (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v349 + 152))(v349, v347, (uint64_t)v348 + 360, __dst);
        v350 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BF4C2D8((uint64_t)__dst);
        v351 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v350);
        v352 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v352)
          v352 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v353 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C526368;
        sub_20C020690(__dst, (uint64_t)v486);
        (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v353 + 152))(v353, v351, (uint64_t)v352 + 368, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        sub_20BDE5078((uint64_t *)v491);
        *(_QWORD *)(v5 + 144) = *(_QWORD *)(v5 + 136);
        goto LABEL_887;
      case 76:
        v94 = *(_QWORD *)(v5 + 120);
        if (v94 >= *(_QWORD *)(v5 + 128))
        {
          v95 = sub_20BE4EE50((uint64_t *)v491, (__int128 *)v506);
        }
        else
        {
          sub_20BE4EDF4(v491, (__int128 *)v506);
          v95 = v94 + 24;
        }
        *(_QWORD *)(v5 + 120) = v95;
        v365 = *(_OWORD **)(v5 + 144);
        v364 = *(_QWORD *)(v5 + 152);
        if ((unint64_t)v365 >= v364)
        {
          v367 = ((char *)v365 - *v486) >> 4;
          v368 = v367 + 1;
          if ((unint64_t)(v367 + 1) >> 60)
            sub_20BDDF694();
          v369 = v364 - (_QWORD)*v486;
          if (v369 >> 3 > v368)
            v368 = v369 >> 3;
          if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF0)
            v370 = 0xFFFFFFFFFFFFFFFLL;
          else
            v370 = v368;
          if (v370)
            v371 = (char *)sub_20BDEA2F0(v473, v370);
          else
            v371 = 0;
          v430 = &v371[16 * v367];
          *(_OWORD *)v430 = *v502;
          v432 = *(char **)(v5 + 136);
          v431 = *(char **)(v5 + 144);
          v433 = v430;
          if (v431 != v432)
          {
            do
            {
              *((_OWORD *)v433 - 1) = *((_OWORD *)v431 - 1);
              v433 -= 16;
              v431 -= 16;
            }
            while (v431 != v432);
            v431 = *v486;
          }
          v366 = v430 + 16;
          *(_QWORD *)(v5 + 136) = v433;
          *(_QWORD *)(v5 + 144) = v430 + 16;
          *(_QWORD *)(v5 + 152) = &v371[16 * v370];
          if (v431)
            operator delete(v431);
        }
        else
        {
          *v365 = *v502;
          v366 = v365 + 1;
        }
        *(_QWORD *)(v5 + 144) = v366;
        goto LABEL_886;
      case 77:
        v109 = (const std::string *)sub_20C007CCC((uint64_t)v11);
        std::string::operator=(v506, v109);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst, 0.0, 1.0);
        v110 = *(_OWORD *)__dst;
        goto LABEL_742;
      case 82:
        sub_20C00682C((uint64_t)v11);
        *(_QWORD *)(v5 + 96) = v338;
        goto LABEL_886;
      case 83:
        sub_20C00682C((uint64_t)v11);
        *(_QWORD *)(v5 + 104) = v215;
        goto LABEL_886;
      case 86:
        *(_DWORD *)(v5 + 804) = 0;
        v69 = *(_QWORD *)(v5 + 824);
        if ((v69 & 7) != 0)
        {
          v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
          do
            v71 = __ldxr(v70);
          while (__stlxr(v71 - 2, v70));
        }
        goto LABEL_678;
      case 88:
        *(_DWORD *)(v5 + 804) = 0;
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
        if (__dst == (_BYTE *)v503)
        {
          v43 = *(_QWORD *)__dst;
        }
        else
        {
          if ((*v503 & 7) != 0)
          {
            v41 = (unsigned int *)(*v503 & 0xFFFFFFFFFFFFFFF8);
            do
              v42 = __ldxr(v41);
            while (__stlxr(v42 - 2, v41));
          }
          v43 = 0;
          *v503 = *(_QWORD *)__dst;
          *(_QWORD *)__dst = 0;
        }
        if ((v43 & 7) != 0)
        {
          v405 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
          do
            v406 = __ldxr(v405);
          while (__stlxr(v406 - 2, v405));
        }
        goto LABEL_887;
      case 90:
        *(_DWORD *)(v5 + 804) = 2;
        v354 = *(_QWORD *)(v5 + 824);
        if ((v354 & 7) != 0)
        {
          v355 = (unsigned int *)(v354 & 0xFFFFFFFFFFFFFFF8);
          do
            v356 = __ldxr(v355);
          while (__stlxr(v356 - 2, v355));
        }
        goto LABEL_678;
      case 92:
        *(_DWORD *)(v5 + 804) = 2;
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
        if (__dst == (_BYTE *)v503)
        {
          v74 = *(_QWORD *)__dst;
        }
        else
        {
          if ((*v503 & 7) != 0)
          {
            v72 = (unsigned int *)(*v503 & 0xFFFFFFFFFFFFFFF8);
            do
              v73 = __ldxr(v72);
            while (__stlxr(v73 - 2, v72));
          }
          v74 = 0;
          *v503 = *(_QWORD *)__dst;
          *(_QWORD *)__dst = 0;
        }
        if ((v74 & 7) != 0)
        {
          v407 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
          do
            v408 = __ldxr(v407);
          while (__stlxr(v408 - 2, v407));
        }
        goto LABEL_887;
      case 94:
        *(_DWORD *)(v5 + 804) = 1;
        v44 = *(_QWORD *)(v5 + 824);
        if ((v44 & 7) != 0)
        {
          v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
LABEL_678:
        *v503 = 0;
        goto LABEL_887;
      case 96:
        *(_DWORD *)(v5 + 804) = 1;
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
        if (__dst == (_BYTE *)v503)
        {
          v326 = *(_QWORD *)__dst;
        }
        else
        {
          if ((*v503 & 7) != 0)
          {
            v324 = (unsigned int *)(*v503 & 0xFFFFFFFFFFFFFFF8);
            do
              v325 = __ldxr(v324);
            while (__stlxr(v325 - 2, v324));
          }
          v326 = 0;
          *v503 = *(_QWORD *)__dst;
          *(_QWORD *)__dst = 0;
        }
        if ((v326 & 7) != 0)
        {
          v414 = (unsigned int *)(v326 & 0xFFFFFFFFFFFFFFF8);
          do
            v415 = __ldxr(v414);
          while (__stlxr(v415 - 2, v414));
        }
        goto LABEL_887;
      case 98:
        v339 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v339)
          v339 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v340 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C526790;
        sub_20C030230(__dst, v493);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v340 + 152))(v340, v510, (uint64_t)v339 + 216, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        v80 = *(_QWORD *)(v5 + 160);
        for (i = *(_QWORD *)(v5 + 168); i != v80; i -= 8)
        {
          v343 = *(_QWORD *)(i - 8);
          v342 = v343;
          if ((v343 & 7) != 0)
          {
            v344 = (unsigned int *)(v342 & 0xFFFFFFFFFFFFFFF8);
            do
              v345 = __ldxr(v344);
            while (__stlxr(v345 - 2, v344));
          }
        }
        goto LABEL_661;
      case 99:
      case 458:
        sub_20C1E3448((uint64_t)v511, (uint64_t)v11);
        goto LABEL_887;
      case 100:
        v111 = (const void **)sub_20C007CCC((uint64_t)(v11 - 112));
        sub_20C1DEE14(v111, 46, (uint64_t)&__str);
        v112 = sub_20C007CCC((uint64_t)v11);
        v113 = *(char *)(v112 + 23);
        if (v113 >= 0)
          v114 = (const std::string::value_type *)v112;
        else
          v114 = *(const std::string::value_type **)v112;
        if (v113 >= 0)
          v115 = *(unsigned __int8 *)(v112 + 23);
        else
          v115 = *(_QWORD *)(v112 + 8);
        v116 = std::string::append(&__str, v114, v115);
        v118 = (void *)v116->__r_.__value_.__r.__words[0];
        v117 = v116->__r_.__value_.__l.__size_;
        LODWORD(v518) = v116->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v518 + 3) = *(_DWORD *)((char *)&v116->__r_.__value_.__r.__words[2] + 3);
        v119 = SHIBYTE(v116->__r_.__value_.__r.__words[2]);
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        if (v119 < 0)
        {
          sub_20BDDBFAC(__dst, v118, v117);
        }
        else
        {
          *(_QWORD *)__dst = v118;
          *(_QWORD *)&__dst[8] = v117;
          *(_DWORD *)&__dst[16] = v518;
          *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)&v518 + 3);
          __dst[23] = v119;
        }
        LODWORD(v532[0]) = 3;
        sub_20BFCCEAC((uint64_t)v511, (uint64_t)__dst);
        sub_20BFCD42C((uint64_t)__dst);
        if ((v119 & 0x80000000) == 0)
          goto LABEL_853;
        v275 = v118;
        goto LABEL_852;
      case 101:
        sub_20C007CCC((uint64_t)v11);
        v217 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v518);
        if ((v518 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((v518 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v217);
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString) & 1) == 0)
        {
          v411 = v518 & 0xFFFFFFFFFFFFFFF8;
          if ((v518 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v412 = (const char *)(v411 + 16);
            if (*(char *)(v411 + 39) < 0)
              v412 = *(const char **)v412;
          }
          else
          {
            v412 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim name", v409, v410, v412);
          if (__dst[23] >= 0)
            v443 = __dst;
          else
            v443 = *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v443);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v510, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v518, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v444 = sub_20C026788(v509);
        if ((*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v444
                                                                                                  + 72))(v444, v510))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v510);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate prim '%s'", v446, v447, Text);
          if (__dst[23] >= 0)
            v448 = __dst;
          else
            v448 = *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v448);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        else
        {
          v449 = sub_20C026788(v509);
          (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v449 + 64))(v449, v510, 6);
          sub_20C0DA818(*(_QWORD *)(v5 + 880) - 24, (uint64_t *)&v518);
        }
        memset(__dst, 0, 24);
        sub_20C1DE1D8(v490, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_20BEEB2B8((void ***)&__str);
        memset(__dst, 0, 24);
        sub_20C1DE1D8(v487, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_20BEEB2B8((void ***)&__str);
        v450 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v450)
          v450 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v451 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C527CC0 + 3;
        *(_DWORD *)__dst = *(_DWORD *)(v5 + 804);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v451 + 152))(v451, v510, (uint64_t)v450 + 312, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if (*v503)
        {
          v452 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v452)
            v452 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          sub_20C1DF170((uint64_t)v510, (uint64_t)v452 + 448, v503, v5);
        }
        if ((v518 & 7) != 0)
        {
          v453 = (unsigned int *)(v518 & 0xFFFFFFFFFFFFFFF8);
          do
            v454 = __ldxr(v453);
          while (__stlxr(v454 - 2, v453));
        }
        goto LABEL_887;
      case 102:
        if (*(_QWORD *)(*(_QWORD *)(v5 + 880) - 24) != *(_QWORD *)(*(_QWORD *)(v5 + 880) - 16))
        {
          v327 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v327)
            v327 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          sub_20C1DE114((uint64_t)v510, (uint64_t)v327 + 32, (uint64_t **)(*(_QWORD *)(v5 + 880) - 24), v5);
        }
        if (*(_QWORD *)(*(_QWORD *)(v5 + 904) - 24) != *(_QWORD *)(*(_QWORD *)(v5 + 904) - 16))
        {
          v328 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v328)
            v328 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          sub_20C1DE114((uint64_t)v510, (uint64_t)v328 + 40, (uint64_t **)(*(_QWORD *)(v5 + 904) - 24), v5);
        }
        *(_QWORD *)__dst = *(_QWORD *)(v5 + 880) - 24;
        v329 = *(_QWORD *)__dst;
        sub_20BEEB2B8((void ***)__dst);
        *(_QWORD *)(v5 + 880) = v329;
        *(_QWORD *)__dst = *(_QWORD *)(v5 + 904) - 24;
        v330 = *(_QWORD *)__dst;
        sub_20BEEB2B8((void ***)__dst);
        *(_QWORD *)(v5 + 904) = v330;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        goto LABEL_886;
      case 112:
        v97 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v97)
          v97 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_681;
      case 113:
        v23 = 6;
        goto LABEL_427;
      case 114:
      case 116:
      case 118:
      case 120:
      case 122:
      case 124:
        v23 = 6;
        goto LABEL_22;
      case 115:
        sub_20C1DE314((uint64_t)v11, 6u, v5);
        goto LABEL_557;
      case 117:
        sub_20C1DE314((uint64_t)v11, 6u, v5);
        goto LABEL_620;
      case 119:
        sub_20C1DE314((uint64_t)v11, 6u, v5);
        goto LABEL_514;
      case 121:
        sub_20C1DE314((uint64_t)v11, 6u, v5);
        goto LABEL_505;
      case 123:
        sub_20C1DE314((uint64_t)v11, 6u, v5);
        goto LABEL_555;
      case 125:
        v181 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v181)
          v181 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_553;
      case 126:
        v263 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v263)
          v263 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        v264 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C5207B8 + 1;
        *(_QWORD *)__dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v265 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v266 = __ldxr(v265);
          while (__stxr(v266 + 2, v265));
          if ((v266 & 1) == 0)
            *(_QWORD *)__dst = v265;
        }
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v264 + 152))(v264, v510, (uint64_t)v263 + 208, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v267 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v268 = __ldxr(v267);
          while (__stlxr(v268 - 2, v267));
        }
        goto LABEL_887;
      case 127:
        v182 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v182)
          v182 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_414;
      case 128:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v48 = *(_QWORD *)(v5 + 392);
        for (j = *(_QWORD *)(v5 + 400); j != v48; sub_20C02189C(v499, j))
          j -= 48;
        goto LABEL_598;
      case 129:
        goto LABEL_674;
      case 130:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v48 = *(_QWORD *)(v5 + 392);
        for (k = *(_QWORD *)(v5 + 400); k != v48; sub_20C02189C(v499, k))
          k -= 48;
        goto LABEL_598;
      case 131:
        v18 = 2;
        goto LABEL_674;
      case 132:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v48 = *(_QWORD *)(v5 + 392);
        for (m = *(_QWORD *)(v5 + 400); m != v48; sub_20C02189C(v499, m))
          m -= 48;
        goto LABEL_598;
      case 133:
        v18 = 1;
        goto LABEL_674;
      case 134:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v48 = *(_QWORD *)(v5 + 392);
        for (n = *(_QWORD *)(v5 + 400); n != v48; sub_20C02189C(v499, n))
          n -= 48;
        goto LABEL_598;
      case 135:
        v18 = 4;
        goto LABEL_674;
      case 136:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v48 = *(_QWORD *)(v5 + 392);
        for (ii = *(_QWORD *)(v5 + 400); ii != v48; sub_20C02189C(v499, ii))
          ii -= 48;
        goto LABEL_598;
      case 137:
        v18 = 5;
        goto LABEL_674;
      case 138:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v48 = *(_QWORD *)(v5 + 392);
        for (jj = *(_QWORD *)(v5 + 400); jj != v48; sub_20C02189C(v499, jj))
          jj -= 48;
LABEL_598:
        *(_QWORD *)(v5 + 400) = v48;
        goto LABEL_887;
      case 139:
        v18 = 3;
LABEL_674:
        sub_20C1DF378(v18, v5, v17);
        goto LABEL_887;
      case 140:
        v68 = *(_DWORD **)(v5 + 320);
        for (kk = *(_DWORD **)(v5 + 328); kk != v68; sub_20BFD6F64(v497, kk))
          kk -= 2;
        goto LABEL_667;
      case 141:
        goto LABEL_353;
      case 142:
        v68 = *(_DWORD **)(v5 + 320);
        for (mm = *(_DWORD **)(v5 + 328); mm != v68; sub_20BFD6F64(v497, mm))
          mm -= 2;
        goto LABEL_667;
      case 143:
        v19 = 2;
        goto LABEL_353;
      case 144:
        v68 = *(_DWORD **)(v5 + 320);
        for (nn = *(_DWORD **)(v5 + 328); nn != v68; sub_20BFD6F64(v497, nn))
          nn -= 2;
        goto LABEL_667;
      case 145:
        v19 = 1;
        goto LABEL_353;
      case 146:
        v68 = *(_DWORD **)(v5 + 320);
        for (i1 = *(_DWORD **)(v5 + 328); i1 != v68; sub_20BFD6F64(v497, i1))
          i1 -= 2;
        goto LABEL_667;
      case 147:
        v19 = 4;
        goto LABEL_353;
      case 148:
        v68 = *(_DWORD **)(v5 + 320);
        for (i2 = *(_DWORD **)(v5 + 328); i2 != v68; sub_20BFD6F64(v497, i2))
          i2 -= 2;
        goto LABEL_667;
      case 149:
        v19 = 5;
        goto LABEL_353;
      case 150:
        v68 = *(_DWORD **)(v5 + 320);
        for (i3 = *(_DWORD **)(v5 + 328); i3 != v68; sub_20BFD6F64(v497, i3))
          i3 -= 2;
LABEL_667:
        *(_QWORD *)(v5 + 328) = v68;
        goto LABEL_887;
      case 151:
        v19 = 3;
LABEL_353:
        sub_20C1DF904(v19, v5, v17);
        goto LABEL_887;
      case 152:
        v99 = *(_DWORD **)(v5 + 344);
        for (i4 = *(_DWORD **)(v5 + 352); i4 != v99; sub_20BFD6F64(v498, i4))
          i4 -= 2;
        goto LABEL_651;
      case 153:
        goto LABEL_648;
      case 154:
        v99 = *(_DWORD **)(v5 + 344);
        for (i5 = *(_DWORD **)(v5 + 352); i5 != v99; sub_20BFD6F64(v498, i5))
          i5 -= 2;
        goto LABEL_651;
      case 155:
        v20 = 2;
        goto LABEL_648;
      case 156:
        v99 = *(_DWORD **)(v5 + 344);
        for (i6 = *(_DWORD **)(v5 + 352); i6 != v99; sub_20BFD6F64(v498, i6))
          i6 -= 2;
        goto LABEL_651;
      case 157:
        v20 = 1;
        goto LABEL_648;
      case 158:
        v99 = *(_DWORD **)(v5 + 344);
        for (i7 = *(_DWORD **)(v5 + 352); i7 != v99; sub_20BFD6F64(v498, i7))
          i7 -= 2;
        goto LABEL_651;
      case 159:
        v20 = 4;
        goto LABEL_648;
      case 160:
        v99 = *(_DWORD **)(v5 + 344);
        for (i8 = *(_DWORD **)(v5 + 352); i8 != v99; sub_20BFD6F64(v498, i8))
          i8 -= 2;
        goto LABEL_651;
      case 161:
        v20 = 5;
        goto LABEL_648;
      case 162:
        v99 = *(_DWORD **)(v5 + 344);
        for (i9 = *(_DWORD **)(v5 + 352); i9 != v99; sub_20BFD6F64(v498, i9))
          i9 -= 2;
LABEL_651:
        *(_QWORD *)(v5 + 352) = v99;
        goto LABEL_887;
      case 163:
        v20 = 3;
LABEL_648:
        sub_20C1DFA98(v20, v5, v17);
        goto LABEL_887;
      case 164:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v88 = *(_QWORD *)(v5 + 368);
        for (i10 = *(_QWORD *)(v5 + 376); i10 != v88; sub_20C0217C4(v495, i10))
          i10 -= 56;
        goto LABEL_640;
      case 165:
        goto LABEL_287;
      case 166:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v88 = *(_QWORD *)(v5 + 368);
        for (i11 = *(_QWORD *)(v5 + 376); i11 != v88; sub_20C0217C4(v495, i11))
          i11 -= 56;
        goto LABEL_640;
      case 167:
        v21 = 2;
        goto LABEL_287;
      case 168:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v88 = *(_QWORD *)(v5 + 368);
        for (i12 = *(_QWORD *)(v5 + 376); i12 != v88; sub_20C0217C4(v495, i12))
          i12 -= 56;
        goto LABEL_640;
      case 169:
        v21 = 1;
        goto LABEL_287;
      case 170:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v88 = *(_QWORD *)(v5 + 368);
        for (i13 = *(_QWORD *)(v5 + 376); i13 != v88; sub_20C0217C4(v495, i13))
          i13 -= 56;
        goto LABEL_640;
      case 171:
        v21 = 4;
        goto LABEL_287;
      case 172:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v88 = *(_QWORD *)(v5 + 368);
        for (i14 = *(_QWORD *)(v5 + 376); i14 != v88; sub_20C0217C4(v495, i14))
          i14 -= 56;
        goto LABEL_640;
      case 173:
        v21 = 5;
        goto LABEL_287;
      case 174:
        if (*(char *)(v5 + 95) < 0)
          operator delete(v506->__r_.__value_.__l.__data_);
        v506->__r_.__value_.__r.__words[0] = 0;
        v506->__r_.__value_.__l.__size_ = 0;
        v506->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v88 = *(_QWORD *)(v5 + 368);
        for (i15 = *(_QWORD *)(v5 + 376); i15 != v88; sub_20C0217C4(v495, i15))
          i15 -= 56;
LABEL_640:
        *(_QWORD *)(v5 + 376) = v88;
        goto LABEL_887;
      case 175:
        v21 = 3;
LABEL_287:
        sub_20C1DFC2C(v21, v5, v17);
        goto LABEL_887;
      case 176:
        v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v127)
          v127 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v128 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C528048;
        sub_20C0E4994(__dst, (uint64_t)v489);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v128 + 152))(v128, v510, (uint64_t)v127 + 288, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        sub_20BFE4CE8((uint64_t)v489, *(_QWORD **)(v5 + 424));
        *(_QWORD *)(v5 + 424) = 0;
        *(_QWORD *)(v5 + 432) = 0;
        *(_QWORD *)(v5 + 416) = v481;
        goto LABEL_887;
      case 177:
        *((_QWORD *)&v518 + 1) = 0;
        v519 = 0;
        *(_QWORD *)&v518 = (char *)&v518 + 8;
        v536 = 0;
        v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v49)
          v49 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v50 = sub_20C026788(v509);
        if ((*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, char *))(*(_QWORD *)v50 + 112))(v50, v510, (uint64_t)v49 + 456, v535))
        {
          v51 = sub_20C02470C((pxrInternal__aapl__pxrReserved__::VtValue *)v535);
          if (&v518 != (__int128 *)v51)
            sub_20BDFC4AC((uint64_t **)&v518, *(__int128 **)v51, (__int128 *)(v51 + 8));
        }
        v52 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776);
        memset(__dst, 0, sizeof(__dst));
        *(_QWORD *)__dst = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v52);
        *(_QWORD *)&__dst[8] = v53;
        *(_QWORD *)&__dst[16] = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v52);
        *(_QWORD *)&__dst[24] = v54;
        while (2)
        {
          if (*(_QWORD *)&__dst[8] == *(_QWORD *)&__dst[24]
            && (!*(_QWORD *)&__dst[8] || *(_QWORD *)__dst == *(_QWORD *)&__dst[16]))
          {
            v428 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v428)
              v428 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v429 = sub_20C026788(v509);
            *(_QWORD *)&__dst[8] = &off_24C526858;
            sub_20C0307AC(__dst, (const void ***)&v518);
            (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v429 + 152))(v429, v510, (uint64_t)v428 + 456, __dst);
            sub_20BF4C2D8((uint64_t)__dst);
            pxrInternal__aapl__pxrReserved__::VtDictionary::clear(*(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776));
          }
          else
          {
            v56 = sub_20BF4B198(__dst, v54, v55);
            if ((sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(*v56 + 56)) & 1) != 0)
            {
              v59 = sub_20BF4B198(__dst, (uint64_t)v57, v58);
              v60 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)(*v59 + 56));
              if (*(char *)(v60 + 23) < 0)
              {
                sub_20BDDBFAC(&__p, *(void **)v60, *(_QWORD *)(v60 + 8));
              }
              else
              {
                v61 = *(_OWORD *)v60;
                __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
              }
              pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection((__int128 *)&__p, &__str);
              if (!(_BYTE)v524)
              {
                __str.__r_.__value_.__r.__words[0] = *sub_20BF4B198(__dst, v62, v63) + 32;
                v64 = sub_20BDDDFDC((uint64_t **)&v518, (const void **)__str.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&__str);
                std::string::operator=((std::string *)(v64 + 7), &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                sub_20BF4B224(__dst, v65, v66);
                continue;
              }
              WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__str);
              if (*((char *)WhyNot + 23) >= 0)
                v426 = (uint64_t)WhyNot;
              else
                v426 = *WhyNot;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v424, v425, v426);
              if (v516 >= 0)
                v427 = v515;
              else
                v427 = (void **)v515[0];
              textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, (const char *)v427);
              if (v516 < 0)
                operator delete(v515[0]);
              if ((_BYTE)v524 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                v422 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_874;
              }
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"variant name must be a string", v57, v58);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v421 = &__str;
              else
                v421 = (std::string *)__str.__r_.__value_.__r.__words[0];
              textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, (const char *)v421);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                v422 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_874:
                operator delete(v422);
              }
            }
          }
          break;
        }
        sub_20BF4C2D8((uint64_t)v535);
        sub_20BDE9D48((uint64_t)&v518, *((_QWORD **)&v518 + 1));
LABEL_887:
        v11 += -56 * (int)v16 + 56;
        sub_20C1E3448((uint64_t)v11, (uint64_t)v511);
        v8 -= v16;
        v434 = word_20CAC0F3C[v15] - 67;
        v435 = ((__int16)v534[v8] + word_20CAC12E8[v434]);
        if (v435 <= 0x3D5 && word_20CABF762[v435] == (unsigned __int16)v534[v8])
          v9 = word_20CABFF0E[v435];
        else
          v9 = word_20CAC1496[v434];
        break;
      case 178:
        sub_20C1E01C8(0, (_QWORD *)v5);
        v80 = *(_QWORD *)(v5 + 160);
        for (i16 = *(_QWORD *)(v5 + 168); i16 != v80; i16 -= 8)
        {
          v291 = *(_QWORD *)(i16 - 8);
          v290 = v291;
          if ((v291 & 7) != 0)
          {
            v292 = (unsigned int *)(v290 & 0xFFFFFFFFFFFFFFF8);
            do
              v293 = __ldxr(v292);
            while (__stlxr(v293 - 2, v292));
          }
        }
        goto LABEL_661;
      case 179:
        sub_20C1E01C8(2u, (_QWORD *)v5);
        v80 = *(_QWORD *)(v5 + 160);
        for (i17 = *(_QWORD *)(v5 + 168); i17 != v80; i17 -= 8)
        {
          v243 = *(_QWORD *)(i17 - 8);
          v242 = v243;
          if ((v243 & 7) != 0)
          {
            v244 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
            do
              v245 = __ldxr(v244);
            while (__stlxr(v245 - 2, v244));
          }
        }
        goto LABEL_661;
      case 180:
        sub_20C1E01C8(1u, (_QWORD *)v5);
        v80 = *(_QWORD *)(v5 + 160);
        for (i18 = *(_QWORD *)(v5 + 168); i18 != v80; i18 -= 8)
        {
          v207 = *(_QWORD *)(i18 - 8);
          v206 = v207;
          if ((v207 & 7) != 0)
          {
            v208 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
            do
              v209 = __ldxr(v208);
            while (__stlxr(v209 - 2, v208));
          }
        }
        goto LABEL_661;
      case 181:
        sub_20C1E01C8(4u, (_QWORD *)v5);
        v80 = *(_QWORD *)(v5 + 160);
        for (i19 = *(_QWORD *)(v5 + 168); i19 != v80; i19 -= 8)
        {
          v105 = *(_QWORD *)(i19 - 8);
          v104 = v105;
          if ((v105 & 7) != 0)
          {
            v106 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
            do
              v107 = __ldxr(v106);
            while (__stlxr(v107 - 2, v106));
          }
        }
        goto LABEL_661;
      case 182:
        sub_20C1E01C8(5u, (_QWORD *)v5);
        v80 = *(_QWORD *)(v5 + 160);
        for (i20 = *(_QWORD *)(v5 + 168); i20 != v80; i20 -= 8)
        {
          v260 = *(_QWORD *)(i20 - 8);
          v259 = v260;
          if ((v260 & 7) != 0)
          {
            v261 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
            do
              v262 = __ldxr(v261);
            while (__stlxr(v262 - 2, v261));
          }
        }
        goto LABEL_661;
      case 183:
        sub_20C1E01C8(3u, (_QWORD *)v5);
        v80 = *(_QWORD *)(v5 + 160);
        for (i21 = *(_QWORD *)(v5 + 168); i21 != v80; i21 -= 8)
        {
          v283 = *(_QWORD *)(i21 - 8);
          v282 = v283;
          if ((v283 & 7) != 0)
          {
            v284 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
            do
              v285 = __ldxr(v284);
            while (__stlxr(v285 - 2, v284));
          }
        }
        goto LABEL_661;
      case 184:
        v317 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v317)
          v317 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        v318 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C5207B8 + 1;
        *(_QWORD *)__dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v319 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v320 = __ldxr(v319);
          while (__stxr(v320 + 2, v319));
          if ((v320 & 1) == 0)
            *(_QWORD *)__dst = v319;
        }
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v318 + 152))(v318, v510, (uint64_t)v317 + 416, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v321 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v322 = __ldxr(v321);
          while (__stlxr(v322 - 2, v321));
        }
        goto LABEL_887;
      case 185:
        v120 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v120)
          v120 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_523;
      case 186:
        v75 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v75)
          v75 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v76 = *(const void *****)(v5 + 776);
        v77 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C51D8C8;
        sub_20BF4D058((unsigned int **)__dst, v76);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v77 + 152))(v77, v510, (uint64_t)v75 + 264, __dst);
        goto LABEL_135;
      case 187:
        v89 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v89)
          v89 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v90 = *(const void *****)(v5 + 776);
        v91 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C51D8C8;
        sub_20BF4D058((unsigned int **)__dst, v90);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v91 + 152))(v91, v510, (uint64_t)v89 + 384, __dst);
LABEL_135:
        sub_20BF4C2D8((uint64_t)__dst);
        goto LABEL_502;
      case 194:
        if (*(char *)(v5 + 95) < 0)
          v246 = *(_QWORD *)(v5 + 80);
        else
          v246 = *(unsigned __int8 *)(v5 + 95);
        if (!v246)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Payload asset path must not be empty. If this is intended to be an internal payload, remove the '@' delimiters.", (const char *)7, v17);
          v377 = __dst[23] >= 0 ? __dst : *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v377);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__dst, v506, v508, v502);
        v378 = *(_QWORD *)(v5 + 400);
        if (v378 < *(_QWORD *)(v5 + 408))
          goto LABEL_728;
        goto LABEL_729;
      case 195:
        if (*(char *)(v5 + 95) < 0)
        {
          **(_BYTE **)(v5 + 72) = 0;
          *(_QWORD *)(v5 + 80) = 0;
        }
        else
        {
          *(_BYTE *)(v5 + 72) = 0;
          *(_BYTE *)(v5 + 95) = 0;
        }
        goto LABEL_741;
      case 196:
        v277 = sub_20C007CCC((uint64_t)(v11 - 112));
        v278 = *(unsigned __int8 *)(v277 + 23);
        if ((v278 & 0x80u) != 0)
          v278 = *(_QWORD *)(v277 + 8);
        if (v278)
        {
          sub_20C1E08DC((uint64_t)(v11 - 112), (int *)v5);
        }
        else
        {
          v401 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v277);
          sub_20C01A074(v508, v401);
          sub_20C01A0C8(v504, (_DWORD *)v401 + 1);
        }
        memset(&__str, 0, sizeof(__str));
        pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__dst, &__str, v508, v502);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v378 = *(_QWORD *)(v5 + 400);
        if (v378 < *(_QWORD *)(v5 + 408))
        {
LABEL_728:
          sub_20C02CCF8(v499, *(__n128 **)(v5 + 400), (uint64_t)__dst);
          v379 = v378 + 48;
          *(_QWORD *)(v5 + 400) = v378 + 48;
        }
        else
        {
LABEL_729:
          v379 = sub_20C12FBAC(v482, (uint64_t)__dst);
        }
        *(_QWORD *)(v5 + 400) = v379;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[28]);
        goto LABEL_800;
      case 209:
        if (*(char *)(v5 + 95) < 0)
          v297 = *(_QWORD *)(v5 + 80);
        else
          v297 = *(unsigned __int8 *)(v5 + 95);
        if (!v297)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Reference asset path must not be empty. If this is intended to be an internal reference, remove the '@' delimiters.", (const char *)7, v17);
          v380 = __dst[23] >= 0 ? __dst : *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v380);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        __str.__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__dst, v506, v508, v502, &__str);
        sub_20BF49F14(&__str, 0);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap((uint64_t *)v532, *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776));
        v381 = *(_QWORD *)(v5 + 376);
        if (v381 >= *(_QWORD *)(v5 + 384))
          goto LABEL_798;
        goto LABEL_797;
      case 210:
        if (*(char *)(v5 + 95) < 0)
        {
          **(_BYTE **)(v5 + 72) = 0;
          *(_QWORD *)(v5 + 80) = 0;
        }
        else
        {
          *(_BYTE *)(v5 + 72) = 0;
          *(_BYTE *)(v5 + 95) = 0;
        }
LABEL_741:
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst, 0.0, 1.0);
        v110 = *(_OWORD *)__dst;
LABEL_742:
        *v502 = v110;
LABEL_886:
        if (!*(_BYTE *)(v5 + 800))
          goto LABEL_887;
        goto LABEL_958;
      case 211:
        v315 = sub_20C007CCC((uint64_t)(v11 - 112));
        v316 = *(unsigned __int8 *)(v315 + 23);
        if ((v316 & 0x80u) != 0)
          v316 = *(_QWORD *)(v315 + 8);
        if (v316)
        {
          sub_20C1E08DC((uint64_t)(v11 - 112), (int *)v5);
        }
        else
        {
          v402 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v315);
          sub_20C01A074(v508, v402);
          sub_20C01A0C8(v504, (_DWORD *)v402 + 1);
        }
        memset(&__str, 0, sizeof(__str));
        *(_QWORD *)&v518 = 0;
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__dst, &__str, v508, v502, &v518);
        sub_20BF49F14((_QWORD ***)&v518, 0);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap((uint64_t *)v532, *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776));
        v381 = *(_QWORD *)(v5 + 376);
        if (v381 >= *(_QWORD *)(v5 + 384))
        {
LABEL_798:
          v403 = sub_20C12D654(v483, (__int128 *)__dst);
        }
        else
        {
LABEL_797:
          sub_20C029E64(*(char **)(v5 + 376), (__int128 *)__dst);
          v403 = v381 + 56;
          *(_QWORD *)(v5 + 376) = v381 + 56;
        }
        *(_QWORD *)(v5 + 376) = v403;
        sub_20BF49F14(v532, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[28]);
LABEL_800:
        v404 = (std::string *)&__dst[24];
        goto LABEL_831;
      case 225:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v510, &__str);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v508, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&__str);
        v138 = *(_QWORD *)(v5 + 328);
        if (v138 >= *(_QWORD *)(v5 + 336))
        {
          v139 = sub_20BFD7890(v475, __dst);
        }
        else
        {
          sub_20BFD6E54(*(_DWORD **)(v5 + 328), __dst);
          sub_20BFD6EA4((_DWORD *)(v138 + 4), &__dst[4]);
          v139 = v138 + 8;
        }
        *(_QWORD *)(v5 + 328) = v139;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 232:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v510, &__str);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v508, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&__str);
        v152 = *(_QWORD *)(v5 + 352);
        if (v152 >= *(_QWORD *)(v5 + 360))
        {
          v153 = sub_20BFD7890(v476, __dst);
        }
        else
        {
          sub_20BFD6E54(*(_DWORD **)(v5 + 352), __dst);
          sub_20BFD6EA4((_DWORD *)(v152 + 4), &__dst[4]);
          v153 = v152 + 8;
        }
        *(_QWORD *)(v5 + 352) = v153;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 238:
        v185 = sub_20C007CCC((uint64_t)(v11 - 112));
        v186 = sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&__str, v185);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v518, v186);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)&__str, (uint64_t)__dst);
        if (__dst[24])
        {
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (*(char *)(v185 + 23) >= 0)
            v189 = v185;
          else
            v189 = *(_QWORD *)v185;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relocates path", v187, v188, v189);
          if (__dst[23] >= 0)
            v190 = __dst;
          else
            v190 = *(const char **)__dst;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)&v518, (uint64_t)__dst);
          if (!__dst[24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, v510, (int *)&__p);
            pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v518, v510, (int *)v515);
            sub_20C028354(__dst, &__p, v515);
            sub_20C030818(v489, (pxrInternal__aapl__pxrReserved__::SdfPath *)__dst, __dst);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[12]);
            sub_20BFD265C(&__dst[8]);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
            sub_20BFD265C(__dst);
            *(_BYTE *)(v5 + 865) = 1;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v515 + 1);
            sub_20BFD265C(v515);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&__p);
            goto LABEL_933;
          }
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (*(char *)(v186 + 23) >= 0)
            v419 = v186;
          else
            v419 = *(_QWORD *)v186;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relocates path", v417, v418, v419);
          if (__dst[23] >= 0)
            v190 = __dst;
          else
            v190 = *(const char **)__dst;
        }
        textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v190);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
LABEL_933:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v518 + 1);
        sub_20BFD265C(&v518);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
LABEL_934:
        v173 = &__str;
LABEL_714:
        sub_20BFD265C(v173);
        goto LABEL_887;
      case 243:
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        v160 = *(_QWORD **)(v5 + 168);
        v159 = *(_QWORD *)(v5 + 176);
        if ((unint64_t)v160 >= v159)
        {
          v372 = v160 - *v493;
          if ((unint64_t)(v372 + 1) >> 61)
            sub_20BDDF694();
          v373 = v159 - (_QWORD)*v493;
          v374 = v373 >> 2;
          if (v373 >> 2 <= (unint64_t)(v372 + 1))
            v374 = v372 + 1;
          if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFF8)
            v375 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v375 = v374;
          v530 = v477;
          if (v375)
            v376 = (char *)sub_20BDDF6A8(v477, v375);
          else
            v376 = 0;
          v437 = &v376[8 * v372];
          v438 = &v376[8 * v375];
          *(_QWORD *)&__dst[24] = v438;
          *(_QWORD *)v437 = __str.__r_.__value_.__r.__words[0];
          v162 = v437 + 8;
          __str.__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)&__dst[16] = v437 + 8;
          v440 = *(_QWORD **)(v5 + 160);
          v439 = *(_QWORD **)(v5 + 168);
          if (v439 == v440)
          {
            v442 = vdupq_n_s64((unint64_t)v439);
          }
          else
          {
            do
            {
              v441 = *--v439;
              *((_QWORD *)v437 - 1) = v441;
              v437 -= 8;
              *v439 = 0;
            }
            while (v439 != v440);
            v442 = *(int64x2_t *)v493;
            v162 = *(_QWORD **)&__dst[16];
            v438 = *(char **)&__dst[24];
          }
          *(_QWORD *)(v5 + 160) = v437;
          *(_QWORD *)(v5 + 168) = v162;
          *(int64x2_t *)&__dst[8] = v442;
          v455 = *(_QWORD *)(v5 + 176);
          *(_QWORD *)(v5 + 176) = v438;
          *(_QWORD *)&__dst[24] = v455;
          *(_QWORD *)__dst = v442.i64[0];
          sub_20BF1EE98((uint64_t)__dst);
          v161 = __str.__r_.__value_.__r.__words[0];
        }
        else
        {
          v161 = 0;
          *v160 = __str.__r_.__value_.__r.__words[0];
          v162 = v160 + 1;
          __str.__r_.__value_.__r.__words[0] = 0;
        }
        *(_QWORD *)(v5 + 168) = v162;
        if ((v161 & 7) != 0)
        {
          v456 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
          do
            v457 = __ldxr(v456);
          while (__stlxr(v457 - 2, v456));
        }
        goto LABEL_887;
      case 253:
        v183 = sub_20C007CCC((uint64_t)v11);
        if (*(char *)(v183 + 23) < 0)
        {
          sub_20BDDBFAC(&__str, *(void **)v183, *(_QWORD *)(v183 + 8));
        }
        else
        {
          v184 = *(_OWORD *)v183;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v183 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v184;
        }
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier((__int128 *)&__str, (uint64_t)__dst);
        if (__dst[24])
        {
          v382 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__dst);
          if (*((char *)v382 + 23) >= 0)
            v385 = (uint64_t)v382;
          else
            v385 = *v382;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v383, v384, v385);
          if (v519 >= 0)
            v386 = (const char *)&v518;
          else
            v386 = (const char *)v518;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v386);
          if (SHIBYTE(v519) < 0)
            operator delete((void *)v518);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        v387 = *(_QWORD *)(v5 + 928);
        if (v387 >= *(_QWORD *)(v5 + 936))
        {
          v388 = sub_20BE4EE50(v480, (__int128 *)&__str);
        }
        else
        {
          sub_20BE4EDF4(v480, (__int128 *)&__str);
          v388 = v387 + 24;
        }
        *(_QWORD *)(v5 + 928) = v388;
        memset(__dst, 0, 24);
        sub_20C1E09CC(v479, (uint64_t)__dst);
        *(_QWORD *)&v518 = __dst;
        sub_20BDE5038((void ***)&v518);
        sub_20BDDC0E4(__dst, "");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(v510, (uint64_t)&__str, (uint64_t)__dst, &v518);
        sub_20BFD3EBC((int *)v510, (int *)&v518);
        sub_20BFD3F10(v505, (int *)&v518 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v518 + 1);
        sub_20BFD265C(&v518);
        goto LABEL_850;
      case 254:
        sub_20BFD6E54(&__p, v510);
        sub_20BFD6EA4((_DWORD *)__p.__r_.__value_.__r.__words + 1, v505);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        v163 = sub_20C026788(v509);
        if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v163 + 72))(v163, &__p) & 1) == 0)
        {
          v164 = sub_20C026788(v509);
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v164 + 64))(v164, &__p, 11);
          v165 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v165)
            v165 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
          sub_20C1E0B08((uint64_t)v165 + 64, (uint64_t *)__dst, v5);
          if ((__dst[0] & 7) != 0)
          {
            v166 = (unsigned int *)(*(_QWORD *)__dst & 0xFFFFFFFFFFFFFFF8);
            do
              v167 = __ldxr(v166);
            while (__stlxr(v167 - 2, v166));
          }
        }
        v168 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v168)
          v168 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        pxrInternal__aapl__pxrReserved__::TfToTokenVector((__int128 **)(*(_QWORD *)(v5 + 952) - 24), __dst);
        v169 = sub_20C026788(v509);
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C526790;
        sub_20C030230(&__str, (uint64_t **)__dst);
        (*(void (**)(uint64_t, std::string *, uint64_t, std::string *))(*(_QWORD *)v169 + 152))(v169, &__p, (uint64_t)v168 + 56, &__str);
        sub_20BF4C2D8((uint64_t)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_20BEEB2B8((void ***)&__str);
        v170 = *(_QWORD *)(v5 + 928);
        v171 = (void **)(v170 - 24);
        if (*(char *)(v170 - 1) < 0)
          operator delete(*v171);
        *(_QWORD *)(v5 + 928) = v171;
        *(_QWORD *)__dst = *(_QWORD *)(v5 + 952) - 24;
        v172 = *(_QWORD *)__dst;
        sub_20BDE5038((void ***)__dst);
        *(_QWORD *)(v5 + 952) = v172;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        v173 = &__p;
        goto LABEL_714;
      case 257:
        v250 = sub_20C007CCC((uint64_t)v11);
        if (*(char *)(v250 + 23) < 0)
        {
          sub_20BDDBFAC(&__str, *(void **)v250, *(_QWORD *)(v250 + 8));
        }
        else
        {
          v251 = *(_OWORD *)v250;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v250 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v251;
        }
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier((__int128 *)&__str, (uint64_t)__dst);
        if (__dst[24])
        {
          v390 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__dst);
          if (*((char *)v390 + 23) >= 0)
            v393 = (uint64_t)v390;
          else
            v393 = *v390;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v391, v392, v393);
          if (v519 >= 0)
            v394 = (const char *)&v518;
          else
            v394 = (const char *)v518;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v394);
          if (SHIBYTE(v519) < 0)
            operator delete((void *)v518);
          if (__dst[24] && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        v395 = *(_QWORD *)(v5 + 952);
        v396 = (uint64_t *)(v395 - 24);
        v397 = *(_QWORD *)(v395 - 16);
        if (v397 >= *(_QWORD *)(v395 - 8))
        {
          v398 = sub_20BE4EE50(v396, (__int128 *)&__str);
        }
        else
        {
          sub_20BE4EDF4(v396, (__int128 *)&__str);
          v398 = v397 + 24;
        }
        *(_QWORD *)(v395 - 16) = v398;
        memset(__dst, 0, 24);
        sub_20C1DE1D8(v490, (uint64_t)__dst);
        *(_QWORD *)&v518 = __dst;
        sub_20BEEB2B8((void ***)&v518);
        memset(__dst, 0, 24);
        sub_20C1DE1D8(v487, (uint64_t)__dst);
        *(_QWORD *)&v518 = __dst;
        sub_20BEEB2B8((void ***)&v518);
        v399 = *(_QWORD *)(v5 + 928);
        if (*(char *)(v399 - 1) < 0)
        {
          sub_20BDDBFAC(__dst, *(void **)(v399 - 24), *(_QWORD *)(v399 - 16));
        }
        else
        {
          v400 = *(_OWORD *)(v399 - 24);
          *(_QWORD *)&__dst[16] = *(_QWORD *)(v399 - 8);
          *(_OWORD *)__dst = v400;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&__p, (uint64_t)__dst, (uint64_t)&__str, &v518);
        sub_20BFD3EBC((int *)v510, (int *)&v518);
        sub_20BFD3F10(v505, (int *)&v518 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v518 + 1);
        sub_20BFD265C(&v518);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&__p);
        v420 = sub_20C026788(v509);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v420 + 64))(v420, v510, 10);
LABEL_850:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_853;
        v275 = *(void **)__dst;
        goto LABEL_852;
      case 258:
        if (*(_QWORD *)(*(_QWORD *)(v5 + 880) - 24) != *(_QWORD *)(*(_QWORD *)(v5 + 880) - 16))
        {
          v309 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v309)
            v309 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          sub_20C1DE114((uint64_t)v510, (uint64_t)v309 + 32, (uint64_t **)(*(_QWORD *)(v5 + 880) - 24), v5);
        }
        if (*(_QWORD *)(*(_QWORD *)(v5 + 904) - 24) != *(_QWORD *)(*(_QWORD *)(v5 + 904) - 16))
        {
          v310 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v310)
            v310 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          sub_20C1DE114((uint64_t)v510, (uint64_t)v310 + 40, (uint64_t **)(*(_QWORD *)(v5 + 904) - 24), v5);
        }
        *(_QWORD *)__dst = *(_QWORD *)(v5 + 880) - 24;
        v311 = *(_QWORD *)__dst;
        sub_20BEEB2B8((void ***)__dst);
        *(_QWORD *)(v5 + 880) = v311;
        *(_QWORD *)__dst = *(_QWORD *)(v5 + 904) - 24;
        v312 = *(_QWORD *)__dst;
        sub_20BEEB2B8((void ***)__dst);
        *(_QWORD *)(v5 + 904) = v312;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(v510, (uint64_t)__dst);
        __str = *(std::string *)__dst;
        memset(__dst, 0, 24);
        if (v531 < 0)
        {
          operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, &__p);
        sub_20BDDC0E4(__dst, "");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&__p, (uint64_t)&__str, (uint64_t)__dst, &v518);
        sub_20BFD3EBC((int *)v510, (int *)&v518);
        sub_20BFD3F10(v505, (int *)&v518 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v518 + 1);
        sub_20BFD265C(&v518);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&__p);
        goto LABEL_853;
      case 259:
        v78 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v78)
          v78 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v79 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C526790;
        sub_20C030230(__dst, v493);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v79 + 152))(v79, v510, (uint64_t)v78 + 216, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        v80 = *(_QWORD *)(v5 + 160);
        for (i22 = *(_QWORD *)(v5 + 168); i22 != v80; i22 -= 8)
        {
          v83 = *(_QWORD *)(i22 - 8);
          v82 = v83;
          if ((v83 & 7) != 0)
          {
            v84 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
            do
              v85 = __ldxr(v84);
            while (__stlxr(v85 - 2, v84));
          }
        }
        goto LABEL_661;
      case 260:
        v143 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v143)
          v143 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v144 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C526790;
        sub_20C030230(__dst, v493);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v144 + 152))(v144, v510, (uint64_t)v143 + 272, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        v80 = *(_QWORD *)(v5 + 160);
        for (i23 = *(_QWORD *)(v5 + 168); i23 != v80; i23 -= 8)
        {
          v147 = *(_QWORD *)(i23 - 8);
          v146 = v147;
          if ((v147 & 7) != 0)
          {
            v148 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
            do
              v149 = __ldxr(v148);
            while (__stlxr(v149 - 2, v148));
          }
        }
LABEL_661:
        *(_QWORD *)(v5 + 168) = v80;
        goto LABEL_887;
      case 263:
      case 264:
        goto LABEL_358;
      case 265:
        *(_QWORD *)&__dst[8] = 0;
        v191 = v484;
        goto LABEL_361;
      case 266:
        v140 = (std::string *)sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)v507, v140);
        goto LABEL_887;
      case 267:
        v210 = sub_20C007CCC((uint64_t)(v11 - 112));
        v211 = (char *)v210;
        if (*(char *)(v210 + 23) >= 0)
          v212 = *(unsigned __int8 *)(v210 + 23);
        else
          v212 = *(_QWORD *)(v210 + 8);
        v213 = __dst;
        sub_20BDF6BDC((uint64_t)__dst, v212 + 2);
        if (__dst[23] < 0)
          v213 = *(_BYTE **)__dst;
        if (v212)
        {
          if (v211[23] >= 0)
            v214 = v211;
          else
            v214 = *(char **)v211;
          memmove(v213, v214, v212);
        }
        strcpy(&v213[v212], "[]");
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)v507, (std::string *)__dst);
        goto LABEL_832;
      case 268:
        *(_QWORD *)&__dst[8] = 0;
        sub_20BF4B5D8(v500, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        goto LABEL_303;
      case 269:
LABEL_303:
        *(_BYTE *)(v5 + 801) = 0;
        goto LABEL_887;
      case 270:
        sub_20C1E0D04((uint64_t)v11, v5);
        goto LABEL_592;
      case 271:
      case 274:
        if (!*(_BYTE *)(v5 + 600))
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString((uint64_t)v507);
        goto LABEL_887;
      case 272:
      case 275:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 273:
        *(_BYTE *)(v5 + 801) = 1;
        sub_20C1E0D04((uint64_t)v11, v5);
LABEL_592:
        if (!*(_BYTE *)(v5 + 600))
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString((uint64_t)v507);
        goto LABEL_887;
      case 276:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        v93 = *(_DWORD **)(v5 + 288);
        for (i24 = *(_DWORD **)(v5 + 296); i24 != v93; sub_20BFD6F64(v496, i24))
          i24 -= 2;
        goto LABEL_453;
      case 277:
        sub_20C1E147C(0, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 278:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        v93 = *(_DWORD **)(v5 + 288);
        for (i25 = *(_DWORD **)(v5 + 296); i25 != v93; sub_20BFD6F64(v496, i25))
          i25 -= 2;
        goto LABEL_453;
      case 279:
        sub_20C1E147C(1u, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 280:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        v93 = *(_DWORD **)(v5 + 288);
        for (i26 = *(_DWORD **)(v5 + 296); i26 != v93; sub_20BFD6F64(v496, i26))
          i26 -= 2;
        goto LABEL_453;
      case 281:
        sub_20C1E147C(4u, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 282:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        v93 = *(_DWORD **)(v5 + 288);
        for (i27 = *(_DWORD **)(v5 + 296); i27 != v93; sub_20BFD6F64(v496, i27))
          i27 -= 2;
LABEL_453:
        *(_QWORD *)(v5 + 296) = v93;
        *(_BYTE *)(v5 + 312) = 1;
        goto LABEL_887;
      case 283:
        sub_20C1E147C(5u, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 284:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        v280 = *(_DWORD **)(v5 + 288);
        for (i28 = *(_DWORD **)(v5 + 296); i28 != v280; sub_20BFD6F64(v496, i28))
          i28 -= 2;
        goto LABEL_527;
      case 285:
        sub_20C1E147C(2u, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 286:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        v280 = *(_DWORD **)(v5 + 288);
        for (i29 = *(_DWORD **)(v5 + 296); i29 != v280; sub_20BFD6F64(v496, i29))
          i29 -= 2;
LABEL_527:
        *(_QWORD *)(v5 + 296) = v280;
        *(_BYTE *)(v5 + 312) = 0;
        goto LABEL_887;
      case 287:
        sub_20C1E147C(3u, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 288:
        sub_20C1E0D04((uint64_t)(v11 - 168), v5);
        goto LABEL_887;
      case 289:
        v150 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v150)
          v150 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v151 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C528438;
        sub_20C0E81C4(__dst, (uint64_t)v494);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v151 + 152))(v151, v510, (uint64_t)v150 + 432, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v510, __dst);
        sub_20BFD3EBC((int *)v510, (int *)__dst);
        sub_20BFD3F10(v505, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_713;
      case 300:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v510, __dst);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v508, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__dst, (int *)&__str);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str))
        {
          *(_QWORD *)__dst = "sdf/textFileFormat.yy";
          *(_QWORD *)&__dst[8] = "_AttributeAppendConnectionPath";
          *(_QWORD *)&__dst[16] = 688;
          *(_QWORD *)&__dst[24] = "void _AttributeAppendConnectionPath(Sdf_TextParserContext *)";
          LOBYTE(v530) = 0;
          v302 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
          v303 = v478;
          if (*(char *)(v5 + 71) < 0)
            v303 = (_QWORD *)*v478;
          v304 = *(unsigned int *)(v5 + 968);
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)&v518);
          v305 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v518);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Connection path <%s> (in file @%s@, line %i) has a variant selection, but variant selections are not meaningful in connection paths.  Stripping the variant selection and using <%s> instead.  Resaving the file will fix this issue.", v306, v302, v303, v304, v305);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v518 + 1);
          sub_20BFD265C(&v518);
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)__dst);
          sub_20BFD3EBC((int *)&__str, (int *)__dst);
          sub_20BFD3F10((int *)__str.__r_.__value_.__r.__words + 1, (int *)&__dst[4]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
          sub_20BFD265C(__dst);
        }
        v307 = *(_QWORD *)(v5 + 296);
        if (v307 >= *(_QWORD *)(v5 + 304))
        {
          v308 = sub_20BFD7890(v474, &__str);
        }
        else
        {
          sub_20BFD6E54(*(_DWORD **)(v5 + 296), &__str);
          sub_20BFD6EA4((_DWORD *)(v307 + 4), (_DWORD *)__str.__r_.__value_.__r.__words + 1);
          v308 = v307 + 8;
        }
        *(_QWORD *)(v5 + 296) = v308;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        goto LABEL_934;
      case 301:
        *(_OWORD *)&__dst[8] = 0uLL;
        *(_QWORD *)__dst = &__dst[8];
        sub_20BFED2B4((uint64_t)v494, *(_QWORD **)(v5 + 192));
        v141 = *(_QWORD **)&__dst[8];
        *(_QWORD *)(v5 + 184) = *(_QWORD *)__dst;
        *(_QWORD *)(v5 + 192) = v141;
        v142 = *(_QWORD *)&__dst[16];
        *(_QWORD *)(v5 + 200) = *(_QWORD *)&__dst[16];
        if (v142)
        {
          v141[2] = v485;
          *(_QWORD *)__dst = &__dst[8];
          *(_OWORD *)&__dst[8] = 0uLL;
          v141 = 0;
        }
        else
        {
          *v494 = v485;
        }
        sub_20BFED2B4((uint64_t)__dst, v141);
        goto LABEL_887;
      case 307:
        sub_20C00682C((uint64_t)(v11 - 56));
        *(_QWORD *)v492 = v288;
        goto LABEL_887;
      case 308:
        *(_QWORD *)__dst = v492;
        v269 = sub_20C0E7D0C(v494, v492, (uint64_t)&unk_20CAC184C, (uint64_t **)__dst);
        sub_20BF4A9BC(v269 + 5, v501);
        goto LABEL_887;
      case 309:
        sub_20C00682C((uint64_t)(v11 - 112));
        *(_QWORD *)v492 = v270;
        *(_QWORD *)&__dst[8] = (char *)&off_24C52AE00 + 3;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v492;
        v191 = sub_20C0E7D0C(v494, v492, (uint64_t)&unk_20CAC184C, (uint64_t **)&__str) + 5;
        goto LABEL_361;
      case 318:
        v97 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v97)
          v97 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_681;
      case 319:
        v23 = 1;
        goto LABEL_427;
      case 320:
      case 322:
      case 324:
      case 326:
      case 328:
      case 330:
        v23 = 1;
        goto LABEL_22;
      case 321:
        sub_20C1DE314((uint64_t)v11, 1u, v5);
        goto LABEL_557;
      case 323:
        sub_20C1DE314((uint64_t)v11, 1u, v5);
        *(_DWORD *)(v5 + 448) = 1;
        goto LABEL_887;
      case 325:
        sub_20C1DE314((uint64_t)v11, 1u, v5);
        goto LABEL_514;
      case 327:
        sub_20C1DE314((uint64_t)v11, 1u, v5);
        goto LABEL_505;
      case 329:
        sub_20C1DE314((uint64_t)v11, 1u, v5);
        goto LABEL_555;
      case 331:
        v181 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v181)
          v181 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_553;
      case 332:
        v182 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v182)
          v182 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_414;
      case 333:
        v192 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v471 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)v192;
        if (!v192)
          v471 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v193 = sub_20C007CCC((uint64_t)v11);
        UnitFromName = pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(v193);
        if (!*((_DWORD *)UnitFromName + 2)
          && !strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*UnitFromName + 8) & 0x7FFFFFFFFFFFFFFFLL)))
        {
          v197 = *(char *)(v193 + 23) >= 0 ? v193 : *(_QWORD *)v193;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid display unit", v195, v196, v197);
          v198 = __dst[23] >= 0 ? __dst : *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v198);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        v200 = *UnitFromName;
        v199 = UnitFromName[1];
        v201 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C527B88;
        v202 = (char *)operator new(0x18uLL);
        *(_QWORD *)v202 = v200;
        *((_QWORD *)v202 + 1) = v199;
        v203 = (unsigned int *)(v202 + 16);
        atomic_store(0, (unsigned int *)v202 + 4);
        *(_QWORD *)__dst = v202;
        do
          v204 = __ldxr(v203);
        while (__stxr(v204 + 1, v203));
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v201 + 152))(v201, v510, (uint64_t)v471 + 128, __dst);
        goto LABEL_362;
      case 334:
        v174 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v174)
          v174 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        v175 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C5207B8 + 1;
        *(_QWORD *)__dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v176 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 2, v176));
          if ((v177 & 1) == 0)
            *(_QWORD *)__dst = v176;
        }
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v175 + 152))(v175, v510, (uint64_t)v174 + 416, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v178 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v179 = __ldxr(v178);
          while (__stlxr(v179 - 2, v178));
        }
        goto LABEL_887;
      case 335:
        v120 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v120)
          v120 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        goto LABEL_523;
      case 338:
        sub_20BF4C6D0(v528, v501);
        sub_20C1E1784(v510, (pxrInternal__aapl__pxrReserved__::VtValue *)v528, v5);
        v216 = (char *)v528;
        goto LABEL_363;
      case 339:
        v527 = (char *)&off_24C52AE00 + 3;
        sub_20C1E1784(v510, (pxrInternal__aapl__pxrReserved__::VtValue *)v526, v5);
        v216 = v526;
        goto LABEL_363;
      case 340:
      case 354:
        sub_20C1E1CC8((_QWORD *)v5);
        goto LABEL_887;
      case 341:
      case 355:
        v25 = (_QWORD ***)(*(_QWORD *)(v5 + 784) - 8);
        sub_20BF49F14(v25, 0);
        *(_QWORD *)(v5 + 784) = v25;
        goto LABEL_887;
      case 346:
        goto LABEL_747;
      case 347:
        v121 = *(_QWORD *)(v5 + 784);
        v122 = *(_QWORD *)(v5 + 776);
        v123 = (__int128 *)sub_20C007CCC((uint64_t)(v11 - 112));
        v124 = (v121 - v122) >> 3;
        v125 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v122 + 8 * v124-- - 16), v123);
        sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)v125, (const void ****)(*(_QWORD *)(v5 + 776) + 8 * v124));
        v126 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(_QWORD *)(v5 + 776) + 8 * v124);
        goto LABEL_503;
      case 352:
        sub_20C1E1E64((uint64_t)v11, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5);
        goto LABEL_887;
      case 353:
        v129 = sub_20C007CCC((uint64_t)(v11 - 112));
        v130 = (char *)v129;
        if (*(char *)(v129 + 23) >= 0)
          v131 = *(unsigned __int8 *)(v129 + 23);
        else
          v131 = *(_QWORD *)(v129 + 8);
        v132 = __dst;
        sub_20BDF6BDC((uint64_t)__dst, v131 + 2);
        if (__dst[23] < 0)
          v132 = *(_BYTE **)__dst;
        if (v131)
        {
          if (v130[23] >= 0)
            v133 = v130;
          else
            v133 = *(char **)v130;
          memmove(v132, v133, v131);
        }
        strcpy(&v132[v131], "[]");
        if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)v507, (std::string *)__dst) & 1) != 0)goto LABEL_832;
        v136 = __dst;
        if (__dst[23] < 0)
          v136 = *(_BYTE **)__dst;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized value typename '%s' for dictionary", v134, v135, v136);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &__str;
        else
          v137 = (std::string *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_688;
      case 360:
        sub_20BDDC0E4(&__str, "string");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          sub_20BDDBFAC(__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          *(std::string *)__dst = __str;
        LODWORD(v532[0]) = 3;
        sub_20C1E1E64((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5);
        sub_20BFCD42C((uint64_t)__dst);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v507, (uint64_t)v11);
        sub_20C1E1F0C((_QWORD *)v5);
LABEL_747:
        sub_20C1E1E2C((uint64_t)(v11 - 112), v5);
        goto LABEL_887;
      case 361:
        *(_QWORD *)&__dst[8] = 0;
        sub_20BF4B5D8(v501, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507))
          goto LABEL_248;
        goto LABEL_887;
      case 362:
      case 368:
        sub_20C1E2080(v5);
        goto LABEL_887;
      case 363:
        sub_20BF4AB1C(v501, *(const void *****)(v5 + 776));
LABEL_502:
        v126 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776);
LABEL_503:
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(v126);
        goto LABEL_887;
      case 365:
        *(_QWORD *)&__dst[8] = 0;
        sub_20BF4B5D8(v501, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if (!pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507))
          goto LABEL_887;
LABEL_248:
        sub_20BDDC0E4(__dst, "None");
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetRecordedString((uint64_t)v507, (const std::string *)__dst);
        goto LABEL_832;
      case 366:
        sub_20C1E1F0C((_QWORD *)v5);
        goto LABEL_887;
      case 367:
        if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507) & 1) == 0
          && *(_BYTE *)(v5 + 664))
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name has [] for non-shaped value.\n", v272, v273);
          if (__dst[23] >= 0)
            v229 = __dst;
          else
            v229 = *(const char **)__dst;
          goto LABEL_900;
        }
        memset(__dst, 0, 24);
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v507, __dst, v273, &__str);
        sub_20BF4B5D8(v501, &__str);
        sub_20BF4C2D8((uint64_t)&__str);
        __str.__r_.__value_.__l.__size_ = 0;
        v360 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v501, (std::type_info *)&__str, v359);
        sub_20BF4C2D8((uint64_t)&__str);
        if (!v360)
          goto LABEL_832;
        v363 = __dst;
        if (__dst[23] < 0)
          v363 = *(_BYTE **)__dst;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing tuple value: %s", v361, v362, v363);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &__str;
        else
          v137 = (std::string *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_688;
      case 369:
        if (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507))
        {
          sub_20BDDC0E4(__dst, "[]");
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetRecordedString((uint64_t)v507, (const std::string *)__dst);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507) & 1) != 0
          || *(_BYTE *)(v5 + 664))
        {
          memset(__dst, 0, 24);
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v507, __dst, v235, &__str);
          sub_20BF4B5D8(v501, &__str);
          sub_20BF4C2D8((uint64_t)&__str);
          __str.__r_.__value_.__l.__size_ = 0;
          v237 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v501, (std::type_info *)&__str, v236);
          sub_20BF4C2D8((uint64_t)&__str);
          if (v237)
          {
            v240 = __dst;
            if (__dst[23] < 0)
              v240 = *(_BYTE **)__dst;
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing shaped value: %s", v238, v239, v240);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v137 = &__str;
            else
              v137 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_688:
            textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, (const char *)v137);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name missing [] for shaped value.", v234, v235);
          if (__dst[23] >= 0)
            v229 = __dst;
          else
            v229 = *(const char **)__dst;
LABEL_900:
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v229);
        }
LABEL_832:
        if ((__dst[23] & 0x80000000) != 0)
        {
          v416 = *(void **)__dst;
LABEL_855:
          operator delete(v416);
        }
        goto LABEL_887;
      case 370:
        v247 = sub_20C007CCC((uint64_t)v11);
        if (*(char *)(v247 + 23) < 0)
        {
          sub_20BDDBFAC(__dst, *(void **)v247, *(_QWORD *)(v247 + 8));
        }
        else
        {
          v248 = *(_OWORD *)v247;
          *(_QWORD *)&__dst[16] = *(_QWORD *)(v247 + 16);
          *(_OWORD *)__dst = v248;
        }
        v389 = __dst[23];
        if (__dst[23] < 0)
          v389 = *(_QWORD *)&__dst[8];
        if (v389)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&__str, __dst);
        }
        else
        {
          __str.__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        }
        sub_20C0260F8((uint64_t)v501, &__str);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        goto LABEL_830;
      case 371:
      case 372:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v507, (uint64_t)v11);
        goto LABEL_887;
      case 373:
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        *(_QWORD *)__dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v155 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v156 = __ldxr(v155);
          while (__stxr(v156 + 2, v155));
          if ((v156 & 1) == 0)
            *(_QWORD *)__dst &= 0xFFFFFFFFFFFFFFF8;
        }
        LODWORD(v532[0]) = 4;
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v507, (uint64_t)__dst);
        sub_20BFCD42C((uint64_t)__dst);
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v157 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        goto LABEL_887;
      case 374:
        v274 = sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&__str, v274);
        sub_20C0196C4(__dst, (__int128 *)&__str);
        LODWORD(v532[0]) = 5;
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v507, (uint64_t)__dst);
        sub_20BFCD42C((uint64_t)__dst);
        if (v525 < 0)
        {
          v275 = v524;
LABEL_852:
          operator delete(v275);
        }
LABEL_853:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_887;
        v416 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_855;
      case 375:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507);
        goto LABEL_887;
      case 376:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507);
        goto LABEL_887;
      case 383:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507, (const char *)7, v17);
        goto LABEL_887;
      case 384:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v507, (const char *)7, v17);
        goto LABEL_887;
      case 390:
        *(_BYTE *)(v5 + 801) = 0;
LABEL_358:
        *(_QWORD *)&__dst[8] = (char *)&off_24C5269E8 + 3;
        goto LABEL_359;
      case 391:
        *(_BYTE *)(v5 + 801) = 1;
        *(_QWORD *)&__dst[8] = (char *)&off_24C5269E8 + 3;
LABEL_359:
        *(_DWORD *)__dst = 1;
        goto LABEL_360;
      case 392:
        *(_BYTE *)(v5 + 801) = 1;
        goto LABEL_355;
      case 393:
        *(_BYTE *)(v5 + 801) = 0;
LABEL_355:
        *(_QWORD *)&__dst[8] = (char *)&off_24C5269E8 + 3;
        *(_DWORD *)__dst = 0;
LABEL_360:
        v191 = v500;
LABEL_361:
        sub_20BF4B5D8(v191, __dst);
        goto LABEL_362;
      case 394:
        v24 = (uint64_t)(v11 - 168);
        goto LABEL_380;
      case 395:
        v255 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v255)
          v255 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v256 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C528438;
        sub_20C0E81C4(__dst, (uint64_t)v494);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v256 + 152))(v256, v510, (uint64_t)v255 + 432, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        goto LABEL_448;
      case 396:
        sub_20C1E2220((uint64_t)(v11 - 224), v5);
        v253 = sub_20C007CCC((uint64_t)v11);
        if (*(char *)(v253 + 23) < 0)
        {
          sub_20BDDBFAC(__dst, *(void **)v253, *(_QWORD *)(v253 + 8));
        }
        else
        {
          v254 = *(_OWORD *)v253;
          *(_QWORD *)&__dst[16] = *(_QWORD *)(v253 + 16);
          *(_OWORD *)__dst = v254;
        }
        v413 = __dst[23];
        if (__dst[23] < 0)
          v413 = *(_QWORD *)&__dst[8];
        if (v413)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&__str, __dst);
        }
        else
        {
          __str.__r_.__value_.__r.__words[0] = 0;
          sub_20C019BD0(&__str);
        }
        v522 = (char *)&off_24C524B10 + 1;
        sub_20BFD6E54(&v520, &__str);
        sub_20BFD6EA4(&v521, (_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_20C1E1784(v510, (pxrInternal__aapl__pxrReserved__::VtValue *)&v520, v5);
        sub_20BF4C2D8((uint64_t)&v520);
        sub_20C1E25A0(v5);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
LABEL_830:
        v404 = &__str;
LABEL_831:
        sub_20BFD265C(v404);
        goto LABEL_832;
      case 397:
      case 401:
      case 403:
      case 405:
        sub_20C1E2220((uint64_t)v11, v5);
        *(_BYTE *)(v5 + 224) = 1;
        goto LABEL_887;
      case 398:
        goto LABEL_447;
      case 399:
      case 407:
LABEL_380:
        sub_20C1E2220(v24, v5);
        goto LABEL_887;
      case 400:
        v22 = 2;
        goto LABEL_447;
      case 402:
        v22 = 1;
        goto LABEL_447;
      case 404:
        v22 = 4;
        goto LABEL_447;
      case 406:
        v22 = 5;
        goto LABEL_447;
      case 408:
        v22 = 3;
LABEL_447:
        sub_20C1E2804(v22, v5, v17);
LABEL_448:
        sub_20C1E25A0(v5);
        goto LABEL_887;
      case 409:
        sub_20C1E2220((uint64_t)(v11 - 168), v5);
        *(_BYTE *)(v5 + 224) = 1;
        sub_20C1E29D8((uint64_t)(v11 - 56), v5);
        sub_20C1E2B50((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(v5 + 240) - 8), (uint64_t *)v5);
        goto LABEL_887;
      case 420:
        v97 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v97)
          v97 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
LABEL_681:
        v357 = sub_20C007CCC((uint64_t)v11);
        v358 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C520700;
        sub_20BF77444((unsigned int **)__dst, v357);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v358 + 152))(v358, v510, (uint64_t)v97 + 48, __dst);
        goto LABEL_362;
      case 421:
        v23 = 8;
LABEL_427:
        sub_20C1DE314((uint64_t)v11, v23, v5);
        goto LABEL_887;
      case 422:
      case 424:
      case 426:
      case 428:
      case 430:
      case 432:
        v23 = 8;
LABEL_22:
        sub_20C1DE5EC(v23, v5);
        goto LABEL_887;
      case 423:
        sub_20C1DE314((uint64_t)v11, 8u, v5);
LABEL_557:
        v276 = 2;
        goto LABEL_621;
      case 425:
        sub_20C1DE314((uint64_t)v11, 8u, v5);
LABEL_620:
        v276 = 1;
        goto LABEL_621;
      case 427:
        sub_20C1DE314((uint64_t)v11, 8u, v5);
LABEL_514:
        v276 = 4;
        goto LABEL_621;
      case 429:
        sub_20C1DE314((uint64_t)v11, 8u, v5);
LABEL_505:
        v276 = 5;
        goto LABEL_621;
      case 431:
        sub_20C1DE314((uint64_t)v11, 8u, v5);
LABEL_555:
        v276 = 3;
LABEL_621:
        *(_DWORD *)(v5 + 448) = v276;
        goto LABEL_887;
      case 433:
        v181 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v181)
          v181 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
LABEL_553:
        v298 = sub_20C007CCC((uint64_t)v11);
        v299 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = &off_24C520700;
        sub_20BF77444((unsigned int **)__dst, v298);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v299 + 152))(v299, v510, (uint64_t)v181 + 136, __dst);
        goto LABEL_362;
      case 434:
        v182 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v182)
          v182 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
LABEL_414:
        v230 = (uint64_t *)sub_20C007CCC((uint64_t)v11);
        v232 = sub_20C1DF244(v230, (char *)v5, v231);
        v233 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C5298D8 + 3;
        *(_DWORD *)__dst = v232;
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v233 + 152))(v233, v510, (uint64_t)v182 + 248, __dst);
        goto LABEL_362;
      case 435:
        v219 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v219)
          v219 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        v220 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C5207B8 + 1;
        *(_QWORD *)__dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v221 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v222 = __ldxr(v221);
          while (__stxr(v222 + 2, v221));
          if ((v222 & 1) == 0)
            *(_QWORD *)__dst = v221;
        }
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v220 + 152))(v220, v510, (uint64_t)v219 + 416, __dst);
        sub_20BF4C2D8((uint64_t)__dst);
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v223 = (unsigned int *)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v224 = __ldxr(v223);
          while (__stlxr(v224 - 2, v223));
        }
        goto LABEL_887;
      case 436:
        v120 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v120)
          v120 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
LABEL_523:
        v286 = sub_20C026788(v509);
        *(_QWORD *)&__dst[8] = (char *)&off_24C5207B8 + 1;
        *(_QWORD *)__dst = 0;
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, _BYTE *))(*(_QWORD *)v286 + 152))(v286, v510, (uint64_t)v120 + 416, __dst);
LABEL_362:
        v216 = __dst;
LABEL_363:
        sub_20BF4C2D8((uint64_t)v216);
        goto LABEL_887;
      case 440:
      case 441:
        memset(__dst, 0, 24);
        sub_20C026988(v488, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_20BFD6F90((void ***)&__str);
        goto LABEL_887;
      case 445:
        sub_20C1E29D8((uint64_t)v11, v5);
        goto LABEL_887;
      case 446:
        *(_QWORD *)__dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
LABEL_713:
        v173 = (std::string *)__dst;
        goto LABEL_714;
      case 448:
        sub_20C1E08DC((uint64_t)v11, (int *)v5);
        goto LABEL_887;
      case 449:
        v225 = sub_20C007CCC((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__dst, v225);
        sub_20BFD3EBC(v508, (int *)__dst);
        sub_20BFD3F10(v504, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_20BFD265C(__dst);
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v508)
           || pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v508))
          && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)v508))
        {
          goto LABEL_887;
        }
        if (*(char *)(v225 + 23) >= 0)
          v228 = v225;
        else
          v228 = *(_QWORD *)v225;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim or property scene path", v226, v227, v228);
        if (__dst[23] >= 0)
          v229 = __dst;
        else
          v229 = *(const char **)__dst;
        goto LABEL_900;
      default:
        goto LABEL_887;
    }
    goto LABEL_891;
  }
LABEL_957:
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, "syntax error");
LABEL_958:
  v467 = 1;
LABEL_959:
  sub_20BFCD42C((uint64_t)v511);
  for (i30 = 0; i30 != -84000; i30 -= 56)
    sub_20BFCD42C((uint64_t)&v533[i30 + 83944]);
  sub_20BFCD42C((uint64_t)v513);
  return v467;
}

void sub_20C1DD7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char v68;
  uint64_t i;

  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (v68 < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  sub_20BFCD42C((uint64_t)&a68);
  for (i = 0; i != -84000; i -= 56)
    sub_20BFCD42C((uint64_t)&STACK[0x14B28] + i);
  sub_20BFCD42C((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1DE114(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v7 = sub_20C026788((uint64_t *)(a4 + 808));
  v9[1] = &off_24C526790;
  sub_20C030230(v9, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 152))(v7, a1, a2, v9);
  return sub_20BF4C2D8((uint64_t)v9);
}

void sub_20C1DE1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20C1DE1D8(uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_20C1E5F30(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_20C1E60C0(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20C1DE300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E60C0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1DE314(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  char *v12;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *v13;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::VtValue *FallbackValue;
  const std::type_info *v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  std::string *EmptyString;
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::VtValue *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  std::string *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t Type;

  sub_20C007CCC(a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&Type);
  v5 = (uint64_t *)(a3 + 440);
  if (&Type == (uint64_t *)(a3 + 440))
  {
    v8 = Type;
  }
  else
  {
    if ((*v5 & 7) != 0)
    {
      v6 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    v8 = 0;
    *v5 = Type;
    Type = 0;
  }
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  *(_DWORD *)(a3 + 448) = 0;
  Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v12 = (char *)Instance + 72 * a2;
  if (v12[120])
    v13 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v12 + 56);
  else
    v13 = 0;
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 440)))return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString(a3 + 456);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 440));
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(FallbackValue, v16, v17);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v35);
  if (sub_20C1E3934(&Type, &v35))
  {
    v32 = 0;
    v33 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((unint64_t ***)Instance, (const pxrInternal__aapl__pxrReserved__::TfType *)&v35, (unsigned int **)&v32);
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v33, (unsigned int **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (std::string *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(a3 + 456, EmptyString);
    if ((v34 & 7) != 0)
    {
      v24 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if ((v32 & 7) != 0)
    {
      v26 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
  }
  else
  {
    v21 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
    v32 = 0;
    v33 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((unint64_t ***)Instance, v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v32);
    v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v33, (unsigned int **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
      v23 = (std::string *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v23 = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(a3 + 456, v23);
    if ((v34 & 7) != 0)
    {
      v28 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((v32 & 7) != 0)
    {
      v30 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
  }
  return result;
}

uint64_t sub_20C1DE5EC(unsigned int a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  char *v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::VtValue *FallbackValue;
  const std::type_info *v10;
  char *v11;
  const char *v12;
  char *v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  const void ****v20;
  void **v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  const char *p_p;
  uint64_t v27;
  void **v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  std::string *v36;
  uint64_t v37;
  void **p_size;
  void **v40;
  _QWORD v41[2];
  char v42;
  std::string v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  const char *v50;
  uint64_t v51;
  const char *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  v5 = (char *)Instance + 72 * a1;
  if (v5[120])
    v6 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v5 + 56);
  else
    v6 = 0;
  v7 = (_QWORD *)(a2 + 440);
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440)))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440)))
    {
      v18 = *v7 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is registered as a non-metadata field", v16, v17, v19);
      if (v51 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
      goto LABEL_48;
    }
    v61 = 0;
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      v20 = (const void ****)sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760));
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)&__p, v20);
      sub_20C018558((uint64_t)&v60, &__p);
      v21 = &__p;
LABEL_84:
      sub_20BF4C2D8((uint64_t)v21);
      if (v61)
      {
        v37 = sub_20C026788((uint64_t *)(a2 + 808));
        sub_20BF4C6D0(&__p, &v60);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v37 + 152))(v37, a2 + 816, a2 + 440, &__p);
        sub_20BF4C2D8((uint64_t)&__p);
      }
      v28 = (void **)&v60;
      goto LABEL_87;
    }
    v59 = 0;
    v24 = sub_20C026788((uint64_t *)(a2 + 808));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v24 + 112))(v24, a2 + 816, a2 + 440, &v58)&& ((sub_20BFE4DCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v58) & 1) != 0|| (__p = "sdf/textFileFormat.yy", v50 = "operator()", v51 = 1170, v52 = "auto _GenericMetadataEnd(SdfSpecType, Sdf_TextParserContext *)::(anonymous class)::operator()() const", v53 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "v.IsHolding<SdfUnregisteredValue>()", 0) & 1) != 0)))
    {
      if ((v59 & 4) != 0)
        v25 = (_QWORD *)(*(uint64_t (**)(_QWORD **))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58);
      else
        v25 = v58;
      sub_20BF4A9BC(&v58, v25);
    }
    else
    {
      v50 = 0;
      sub_20BF4B5D8(&v58, &__p);
      sub_20BF4C2D8((uint64_t)&__p);
    }
    if (!*(_DWORD *)(a2 + 448))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::GetRecordedString((char *)(a2 + 456), (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)&v43, (uint64_t)&__p);
      sub_20C018558((uint64_t)&v60, &v43);
      sub_20BF4C2D8((uint64_t)&v43);
      if (SHIBYTE(v51) < 0)
        operator delete(__p);
      goto LABEL_83;
    }
    if (v59 && !sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
    {
LABEL_83:
      v21 = (void **)&v58;
      goto LABEL_84;
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)&v43);
    sub_20C02826C((uint64_t *)&v58, (uint64_t)&v43, (uint64_t)&__p);
    p_size = (void **)&v48;
    sub_20BF8CA20(&p_size);
    p_size = (void **)&v47;
    sub_20BF8CA20(&p_size);
    p_size = (void **)&v46;
    sub_20BF8CA20(&p_size);
    p_size = (void **)&v45;
    sub_20BF8CA20(&p_size);
    p_size = (void **)&v44;
    sub_20BF8CA20(&p_size);
    p_size = (void **)&v43.__r_.__value_.__l.__size_;
    sub_20BF8CA20(&p_size);
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::GetRecordedString((char *)(a2 + 456), (uint64_t)&v43);
    v32 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v43.__r_.__value_.__l.__size_)
        goto LABEL_79;
      if (v43.__r_.__value_.__l.__size_ == 4)
      {
        v33 = (unsigned __int8 *)v43.__r_.__value_.__r.__words[0];
        if (*(_DWORD *)v43.__r_.__value_.__l.__data_ == 1701736270)
        {
LABEL_58:
          p_size = 0;
          v40 = 0;
          v41[0] = 0;
LABEL_80:
          if ((v32 & 0x80) != 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetItems((unsigned __int8 *)&__p, (unsigned __int8 *)&p_size, *(_DWORD *)(a2 + 448));
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_size;
          sub_20BF8CA20((void ***)&v43);
          pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)&v43, (uint64_t)&__p);
          sub_20C018558((uint64_t)&v60, &v43);
          sub_20BF4C2D8((uint64_t)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
          sub_20BF8CA20((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
          sub_20BF8CA20((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
          sub_20BF8CA20((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
          sub_20BF8CA20((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
          sub_20BF8CA20((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
          sub_20BF8CA20((void ***)&v43);
          goto LABEL_83;
        }
      }
      else
      {
        v33 = (unsigned __int8 *)v43.__r_.__value_.__r.__words[0];
      }
      v34 = *v33;
    }
    else
    {
      if (HIBYTE(v43.__r_.__value_.__r.__words[2]) == 4 && LODWORD(v43.__r_.__value_.__l.__data_) == 1701736270)
        goto LABEL_58;
      if (!*((_BYTE *)&v43.__r_.__value_.__s + 23))
        goto LABEL_79;
      v34 = v43.__r_.__value_.__s.__data_[0];
    }
    if (v34 == 91)
    {
      std::string::erase(&v43, 0, 1uLL);
      v32 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    if ((v32 & 0x80) != 0)
    {
      if (!v43.__r_.__value_.__l.__size_)
        goto LABEL_79;
      v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v43.__r_.__value_.__r.__words[0] + v43.__r_.__value_.__l.__size_ - 1) != 93)
        goto LABEL_79;
      v35 = --v43.__r_.__value_.__l.__size_;
    }
    else
    {
      if (!v32 || v43.__r_.__value_.__s.__data_[v32 - 1] != 93)
        goto LABEL_79;
      v35 = v32 - 1;
      *((_BYTE *)&v43.__r_.__value_.__s + 23) = v32 - 1;
      v36 = &v43;
    }
    v36->__r_.__value_.__s.__data_[v35] = 0;
LABEL_79:
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v62, (uint64_t)&v43);
    p_size = 0;
    v40 = 0;
    v41[0] = 0;
    v41[1] = &p_size;
    v42 = 0;
    p_size = (void **)operator new(0x10uLL);
    v40 = p_size;
    v41[0] = p_size + 2;
    v40 = (void **)sub_20C0283AC((uint64_t)v41, (uint64_t)v62, (uint64_t)&v63, (uint64_t)p_size);
    sub_20BF4C2D8((uint64_t)v62);
    LOBYTE(v32) = *((_BYTE *)&v43.__r_.__value_.__s + 23);
    goto LABEL_80;
  }
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440));
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  v43.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(FallbackValue, v10, v11);
  if (sub_20C1E3934(&v43, 0))
  {
    sub_20C028114((uint64_t *)FieldDefinition, (_QWORD *)(a2 + 760), &__p);
    if (!(_BYTE)v52)
    {
      sub_20C1E3A4C((char *)&v43, a2, v13);
      goto LABEL_88;
    }
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
    v14 = *v7 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid value for field \"%s\"", v12, v13, v15);
    if (v51 >= 0)
      v31 = (const char *)&__p;
    else
      v31 = (const char *)__p;
    goto LABEL_47;
  }
  sub_20C0281C0((uint64_t *)FieldDefinition, (_QWORD *)(a2 + 760), &__p);
  if ((_BYTE)v52)
  {
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
    goto LABEL_36;
  }
  if (*(_QWORD *)(a2 + 768))
  {
    v27 = sub_20C026788((uint64_t *)(a2 + 808));
    sub_20BF4C6D0(&__p, (_QWORD *)(a2 + 760));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v27 + 152))(v27, a2 + 816, a2 + 440, &__p);
    v28 = &__p;
LABEL_87:
    sub_20BF4C2D8((uint64_t)v28);
    goto LABEL_88;
  }
LABEL_36:
  v29 = *v7 & 0xFFFFFFFFFFFFFFF8;
  if (v29)
  {
    v30 = (const char *)(v29 + 16);
    if (*(char *)(v29 + 39) < 0)
      v30 = *(const char **)v30;
  }
  else
  {
    v30 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid value for field \"%s\"", v22, v23, v30);
  if (v51 >= 0)
    v31 = (const char *)&__p;
  else
    v31 = (const char *)__p;
LABEL_47:
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v31);
LABEL_48:
  if (SHIBYTE(v51) < 0)
    operator delete(__p);
LABEL_88:
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a2 + 456));
  v50 = 0;
  sub_20BF4B5D8((_QWORD *)(a2 + 760), &__p);
  return sub_20BF4C2D8((uint64_t)&__p);
}

void sub_20C1DECEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  sub_20BF4C2D8(v43 - 104);
  sub_20BF4C2D8(v43 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1DEE14@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = sub_20BDF6BDC(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

void textFileFormatYyerror(pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a1, const char *a2)
{
  void *v4;
  size_t v5;
  const char *v6;
  char *v7;
  void **v8;
  uint64_t v9;
  const char *p_p;
  char v11;
  void **v12;
  const char *Text;
  const char *v14;
  char *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  void *v18;
  int v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  void *__p;
  char v26;
  std::string v27;
  void *__dst[2];
  char v29;
  void (*v30[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v30[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v4 = (void *)textFileFormatYyget_text(*((_QWORD **)a1 + 122));
  v5 = textFileFormatYyget_leng(*((_QWORD **)a1 + 122));
  sub_20BDFC7D8(__dst, v4, v5);
  if ((v29 & 0x80000000) == 0)
  {
    if (v29 == 1)
    {
      v8 = __dst;
      goto LABEL_6;
    }
LABEL_8:
    v9 = *((unsigned int *)a1 + 242);
    goto LABEL_9;
  }
  if (__dst[1] != (void *)1)
    goto LABEL_8;
  v8 = (void **)__dst[0];
LABEL_6:
  v9 = *((unsigned int *)a1 + 242);
  if (*(_BYTE *)v8 == 10)
  {
    v9 = (v9 - 1);
    p_p = "";
    v11 = 1;
    goto LABEL_13;
  }
LABEL_9:
  v12 = __dst;
  if (v29 < 0)
    v12 = (void **)__dst[0];
  p_p = (const char *)&__p;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" at '%s'", v6, v7, v12);
  v11 = 0;
  if (v26 < 0)
    p_p = (const char *)__p;
LABEL_13:
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)((char *)a1 + 816));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s in <%s> on line %i", v14, v15, a2, p_p, Text, v9);
  if ((v11 & 1) == 0 && v26 < 0)
    operator delete(__p);
  if (*((char *)a1 + 71) < 0)
  {
    if (!*((_QWORD *)a1 + 7))
      goto LABEL_28;
  }
  else if (!*((_BYTE *)a1 + 71))
  {
    goto LABEL_28;
  }
  std::operator+<char>();
  if (v22 >= 0)
    v16 = (const std::string::value_type *)&v20;
  else
    v16 = (const std::string::value_type *)v20;
  if (v22 >= 0)
    v17 = HIBYTE(v22);
  else
    v17 = (std::string::size_type)v21;
  std::string::append(&v27, v16, v17);
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
LABEL_28:
  std::string::append(&v27, "\n");
  v30[0] = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_20C037274;
  v30[1] = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v9;
  v20 = "sdf/textFileFormat.yy";
  v21 = "textFileFormatYyerror";
  v22 = 3187;
  v23 = "void textFileFormatYyerror(Sdf_TextParserContext *, const char *)";
  v24 = 0;
  v18 = &unk_24C51B120;
  v19 = 3;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, v30, (uint64_t *)&v18, (uint64_t *)&v27);
  *((_BYTE *)a1 + 800) = 1;
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v30);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(__dst[0]);
}

void sub_20C1DF0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a21 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1DF170(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v7 = sub_20C026788((uint64_t *)(a4 + 808));
  v8 = *a3;
  v12[0] = v8;
  v12[1] = (char *)&off_24C5207B8 + 1;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v12[0] = v9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 152))(v7, a1, a2, v12);
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C1DF230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1DF244(uint64_t *a1, char *a2, char *a3)
{
  int v4;
  uint64_t v5;
  const char *p_p;
  void *__p;
  char v12;

  if (*((char *)a1 + 23) < 0)
  {
    v5 = a1[1];
    if (v5 == 6 && *(_DWORD *)*a1 == 1818391920 && *(_WORD *)(*a1 + 4) == 25449)
      return 0;
    if (v5 != 7)
    {
      a1 = (uint64_t *)*a1;
      goto LABEL_25;
    }
    a1 = (uint64_t *)*a1;
LABEL_12:
    if (*(_DWORD *)a1 == 1986622064 && *(_DWORD *)((char *)a1 + 3) == 1702125942)
      return 1;
    goto LABEL_25;
  }
  v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 == 6)
  {
    if (*(_DWORD *)a1 == 1818391920 && *((_WORD *)a1 + 2) == 25449)
      return 0;
    goto LABEL_25;
  }
  if (v4 == 7)
    goto LABEL_12;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid permission constant", a2, a3, a1);
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
  if (v12 < 0)
    operator delete(__p);
  return 0;
}

void sub_20C1DF35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1DF378(int a1, uint64_t a2, char *a3)
{
  void **v5;
  void **v6;
  __n128 *p_p;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  void ***v22;
  uint64_t v23;
  uint64_t *WhyNot;
  const char *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  const char *Text;
  const char *v42;
  char *v43;
  __n128 *v44;
  __n128 __p;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  void **i;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v5 = *(void ***)(a2 + 392);
  v6 = *(void ***)(a2 + 400);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting payload to None (or an empty list) is only allowed when setting explicit payloads, not for list editing", (const char *)a2, a3);
    if (v46 >= 0)
      p_p = &__p;
    else
      p_p = (__n128 *)__p.n128_u64[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)p_p);
LABEL_7:
    if (SHIBYTE(v46) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  else
  {
    v61 = *(void ***)(a2 + 392);
    for (i = v6; ; v6 = i)
    {
      if (v5 == v6)
      {
        v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v9)
          v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v10 = (uint64_t *)(a2 + 392);
        v11 = (_QWORD *)((char *)v9 + 240);
        v12 = *(_QWORD *)(a2 + 392);
        v13 = *(unsigned __int8 **)(a2 + 400);
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-v12] >> 4);
        if (v14 >= 2)
        {
          if (v14 > 0xA)
          {
            if ((unsigned __int8 *)v12 != v13)
            {
              while (1)
              {
                v29 = v12 + 48;
                if ((unsigned __int8 *)(v12 + 48) == v13)
                  break;
                v30 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v12, (unsigned __int8 *)(v12 + 48));
                v12 += 48;
                if (!v30)
                {
                  v13 = (unsigned __int8 *)(v29 - 48);
                  break;
                }
              }
              v31 = *(_QWORD *)(a2 + 400);
              if (v13 != (unsigned __int8 *)v31)
              {
                __p = 0uLL;
                v46 = 0;
                sub_20C02CB7C(&__p, *v10, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - *v10) >> 4));
                v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4));
                if (__p.n128_u64[1] == __p.n128_u64[0])
                  v33 = 0;
                else
                  v33 = v32;
                sub_20C02CE28((unsigned __int8 *)__p.n128_u64[0], (const void **)__p.n128_u64[1], (uint64_t)&v61, v33, 1);
                v35 = __p.n128_u64[1];
                v34 = (unsigned __int8 *)__p.n128_u64[0];
                if (__p.n128_u64[0] == __p.n128_u64[1])
                {
                  v53 = &__p;
                  sub_20C021818((void ***)&v53);
                }
                else
                {
                  while (1)
                  {
                    v36 = v34 + 48;
                    if (v34 + 48 == (unsigned __int8 *)v35)
                      break;
                    v37 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v34, v34 + 48);
                    v34 = v36;
                    if (v37)
                    {
                      v35 = (unint64_t)(v36 - 48);
                      break;
                    }
                  }
                  v38 = __p.n128_u64[1];
                  v53 = &__p;
                  sub_20C021818((void ***)&v53);
                  if (v35 != v38)
                  {
LABEL_51:
                    v39 = *v11 & 0xFFFFFFFFFFFFFFF8;
                    if (v39)
                    {
                      v40 = (const char *)(v39 + 16);
                      if (*(char *)(v39 + 39) < 0)
                        v40 = *(const char **)v40;
                    }
                    else
                    {
                      v40 = "";
                    }
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v42, v43, v40, Text);
                    if (v46 >= 0)
                      v44 = &__p;
                    else
                      v44 = (__n128 *)__p.n128_u64[0];
                    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v44);
                    if (SHIBYTE(v46) < 0)
                      operator delete((void *)__p.n128_u64[0]);
                  }
                }
              }
            }
          }
          else
          {
LABEL_20:
            while ((unsigned __int8 *)v12 != v13 - 48)
            {
              v20 = (unsigned __int8 *)v12;
              v12 += 48;
              v21 = (unsigned __int8 *)v12;
              if ((unsigned __int8 *)v12 != v13)
              {
                while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v20, v21))
                {
                  v21 += 48;
                  if (v21 == v13)
                    goto LABEL_20;
                }
                goto LABEL_51;
              }
            }
          }
        }
        v15 = (uint64_t *)(a2 + 808);
        v16 = sub_20C026788((uint64_t *)(a2 + 808));
        v17 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)&v53);
        v18 = a2 + 816;
        (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v16 + 136))(&v61, v16, v18, v11, v17);
        if (sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v61))
        {
          if ((i & 4) != 0)
            v19 = (void **)(*(uint64_t (**)(void ***))(((unint64_t)i & 0xFFFFFFFFFFFFFFF8) + 168))(&v61);
          else
            v19 = v61;
        }
        else
        {
          v19 = &v53;
        }
        sub_20C02E924((uint64_t)&__p, (uint64_t)v19);
        v22 = (void ***)sub_20BF4C2D8((uint64_t)&v61);
        v61 = (void **)&v60;
        sub_20C021818(v22);
        v61 = (void **)&v59;
        sub_20C021818(&v61);
        v61 = (void **)&v58;
        sub_20C021818(&v61);
        v61 = (void **)&v57;
        sub_20C021818(&v61);
        v61 = (void **)&v56;
        sub_20C021818(&v61);
        v61 = (void **)&v54;
        sub_20C021818(&v61);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetItems((unsigned __int8 *)&__p, (std::string **)v10, a1);
        v23 = sub_20C026788(v15);
        sub_20C02CA4C((char *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v53);
        (*(void (**)(uint64_t, uint64_t, _QWORD *, void **))(*(_QWORD *)v23 + 152))(v23, v18, v11, &v53);
        sub_20BF4C2D8((uint64_t)&v53);
        v53 = &v52;
        sub_20C021818((void ***)&v53);
        v53 = &v51;
        sub_20C021818((void ***)&v53);
        v53 = &v50;
        sub_20C021818((void ***)&v53);
        v53 = &v49;
        sub_20C021818((void ***)&v53);
        v53 = &v48;
        sub_20C021818((void ***)&v53);
        v53 = &__p.n128_i8[8];
        sub_20C021818((void ***)&v53);
        return;
      }
      v8 = sub_20C0231B4((uint64_t *)&v61, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(v8, (uint64_t)&__p);
      if (v47)
        break;
      sub_20C023230(&v61);
      v5 = v61;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
    if (*((char *)WhyNot + 23) >= 0)
      v27 = (uint64_t)WhyNot;
    else
      v27 = *WhyNot;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v25, v26, v27);
    if (v55 >= 0)
      v28 = (const char *)&v53;
    else
      v28 = (const char *)v53;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v28);
    if (v55 < 0)
      operator delete(v53);
    if (v47)
      goto LABEL_7;
  }
}

void sub_20C1DF858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **p_p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  p_p = &__p;
  sub_20C021818(&p_p);
  _Unwind_Resume(a1);
}

void sub_20C1DF904(int a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  uint64_t *WhyNot;
  const char *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  char v16;
  void *__p[2];
  char v18;
  char v19;
  uint64_t v20;
  uint64_t i;

  v5 = *(_QWORD *)(a2 + 320);
  v6 = *(_QWORD *)(a2 + 328);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting inherit paths to None (or empty list) is only allowed when setting explicit inherit paths, not for list editing", (const char *)a2, a3);
    if (v18 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v7);
LABEL_7:
    if (v18 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 320);
    for (i = v6; ; v6 = i)
    {
      if (v5 == v6)
      {
        v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v9)
          v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C1E5894((_QWORD *)v9 + 24, a1, (char **)(a2 + 320), (uint64_t *)a2);
        return;
      }
      v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFD71C4(&v20, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath(v8, (uint64_t)__p);
      if (v19)
        break;
      sub_20BFD7240(&v20);
      v5 = v20;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
    if (*((char *)WhyNot + 23) >= 0)
      v13 = (uint64_t)WhyNot;
    else
      v13 = *WhyNot;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v11, v12, v13);
    if (v16 >= 0)
      v14 = (const char *)&v15;
    else
      v14 = (const char *)v15;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v14);
    if (v16 < 0)
      operator delete(v15);
    if (v19)
      goto LABEL_7;
  }
}

void sub_20C1DFA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C1DFA98(int a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  uint64_t *WhyNot;
  const char *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  char v16;
  void *__p[2];
  char v18;
  char v19;
  uint64_t v20;
  uint64_t i;

  v5 = *(_QWORD *)(a2 + 344);
  v6 = *(_QWORD *)(a2 + 352);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting specializes paths to None (or empty list) is only allowed when setting explicit specializes paths, not for list editing", (const char *)a2, a3);
    if (v18 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v7);
LABEL_7:
    if (v18 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 344);
    for (i = v6; ; v6 = i)
    {
      if (v5 == v6)
      {
        v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v9)
          v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C1E5894((_QWORD *)v9 + 38, a1, (char **)(a2 + 344), (uint64_t *)a2);
        return;
      }
      v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFD71C4(&v20, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath(v8, (uint64_t)__p);
      if (v19)
        break;
      sub_20BFD7240(&v20);
      v5 = v20;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
    if (*((char *)WhyNot + 23) >= 0)
      v13 = (uint64_t)WhyNot;
    else
      v13 = *WhyNot;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v11, v12, v13);
    if (v16 >= 0)
      v14 = (const char *)&v15;
    else
      v14 = (const char *)v15;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v14);
    if (v16 < 0)
      operator delete(v15);
    if (v19)
      goto LABEL_7;
  }
}

void sub_20C1DFBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C1DFC2C(int a1, uint64_t a2, char *a3)
{
  void **v5;
  void **v6;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  __int128 **v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  void ***v22;
  uint64_t v23;
  uint64_t *WhyNot;
  const char *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  unsigned __int8 *v29;
  BOOL v30;
  __int128 *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  char v37;
  unsigned __int8 *v38;
  unint64_t v39;
  const char *v40;
  const char *Text;
  const char *v42;
  char *v43;
  const char *v44;
  void *__p;
  unsigned __int8 *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  void **i;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = *(void ***)(a2 + 368);
  v6 = *(void ***)(a2 + 376);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting references to None (or an empty list) is only allowed when setting explicit references, not for list editing", (const char *)a2, a3);
    if (v47 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
LABEL_7:
    if (SHIBYTE(v47) < 0)
      operator delete(__p);
  }
  else
  {
    v62 = *(void ***)(a2 + 368);
    for (i = v6; ; v6 = i)
    {
      if (v5 == v6)
      {
        v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v9)
          v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v10 = (__int128 **)(a2 + 368);
        v11 = (_QWORD *)((char *)v9 + 280);
        v12 = *(unsigned __int8 **)(a2 + 368);
        v13 = *(unsigned __int8 **)(a2 + 376);
        v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 3);
        if (v14 >= 2)
        {
          if (v14 > 0xA)
          {
            if (v12 != v13)
            {
              while (1)
              {
                v29 = v12 + 56;
                if (v12 + 56 == v13)
                  break;
                v30 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v12, v12 + 56);
                v12 += 56;
                if (!v30)
                {
                  v13 = v29 - 56;
                  break;
                }
              }
              v31 = *(__int128 **)(a2 + 376);
              if (v13 != (unsigned __int8 *)v31)
              {
                __p = 0;
                v46 = 0;
                v47 = 0;
                sub_20C029D40((char *)&__p, *v10, v31, 0x6DB6DB6DB6DB6DB7 * (((char *)v31 - (char *)*v10) >> 3));
                v32 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v46 - (_BYTE *)__p) >> 3));
                if (v46 == __p)
                  v33 = 0;
                else
                  v33 = v32;
                sub_20C029FE4((unsigned __int8 *)__p, v46, (uint64_t)&v62, v33, 1);
                v34 = (unsigned __int8 *)__p;
                v35 = v46;
                if (__p == v46)
                {
                  v54 = &__p;
                  sub_20C021740((void ***)&v54);
                }
                else
                {
                  while (1)
                  {
                    v36 = v34 + 56;
                    if (v34 + 56 == v35)
                      break;
                    v37 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v34, v34 + 56);
                    v34 = v36;
                    if ((v37 & 1) != 0)
                    {
                      v35 = v36 - 56;
                      break;
                    }
                  }
                  v38 = v46;
                  v54 = &__p;
                  sub_20C021740((void ***)&v54);
                  if (v35 != v38)
                  {
LABEL_51:
                    v39 = *v11 & 0xFFFFFFFFFFFFFFF8;
                    if (v39)
                    {
                      v40 = (const char *)(v39 + 16);
                      if (*(char *)(v39 + 39) < 0)
                        v40 = *(const char **)v40;
                    }
                    else
                    {
                      v40 = "";
                    }
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v42, v43, v40, Text);
                    if (v47 >= 0)
                      v44 = (const char *)&__p;
                    else
                      v44 = (const char *)__p;
                    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v44);
                    if (SHIBYTE(v47) < 0)
                      operator delete(__p);
                  }
                }
              }
            }
          }
          else
          {
LABEL_20:
            while (v12 != v13 - 56)
            {
              v20 = v12;
              v12 += 56;
              v21 = v12;
              if (v12 != v13)
              {
                while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v20, v21) & 1) == 0)
                {
                  v21 += 56;
                  if (v21 == v13)
                    goto LABEL_20;
                }
                goto LABEL_51;
              }
            }
          }
        }
        v15 = (uint64_t *)(a2 + 808);
        v16 = sub_20C026788((uint64_t *)(a2 + 808));
        v17 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)&v54);
        v18 = a2 + 816;
        (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v16 + 136))(&v62, v16, v18, v11, v17);
        if (sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((i & 4) != 0)
            v19 = (void **)(*(uint64_t (**)(void ***))(((unint64_t)i & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          else
            v19 = v62;
        }
        else
        {
          v19 = &v54;
        }
        sub_20C02BDC4((uint64_t)&__p, (uint64_t)v19);
        v22 = (void ***)sub_20BF4C2D8((uint64_t)&v62);
        v62 = (void **)&v61;
        sub_20C021740(v22);
        v62 = (void **)&v60;
        sub_20C021740(&v62);
        v62 = (void **)&v59;
        sub_20C021740(&v62);
        v62 = (void **)&v58;
        sub_20C021740(&v62);
        v62 = (void **)&v57;
        sub_20C021740(&v62);
        v62 = (void **)&v55;
        sub_20C021740(&v62);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetItems((unsigned __int8 *)&__p, v10, a1);
        v23 = sub_20C026788(v15);
        sub_20C029C08((char *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v54);
        (*(void (**)(uint64_t, uint64_t, _QWORD *, void **))(*(_QWORD *)v23 + 152))(v23, v18, v11, &v54);
        sub_20BF4C2D8((uint64_t)&v54);
        v54 = &v53;
        sub_20C021740((void ***)&v54);
        v54 = &v52;
        sub_20C021740((void ***)&v54);
        v54 = &v51;
        sub_20C021740((void ***)&v54);
        v54 = &v50;
        sub_20C021740((void ***)&v54);
        v54 = &v49;
        sub_20C021740((void ***)&v54);
        v54 = &v46;
        sub_20C021740((void ***)&v54);
        return;
      }
      v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20C022B90((uint64_t *)&v62, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(v8, (uint64_t)&__p);
      if (v48)
        break;
      sub_20C022C0C(&v62);
      v5 = v62;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
    if (*((char *)WhyNot + 23) >= 0)
      v27 = (uint64_t)WhyNot;
    else
      v27 = *WhyNot;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v25, v26, v27);
    if (v56 >= 0)
      v28 = (const char *)&v54;
    else
      v28 = (const char *)v54;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v28);
    if (v56 < 0)
      operator delete(v54);
    if (v48)
      goto LABEL_7;
  }
}

void sub_20C1E011C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **p_p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  p_p = &__p;
  sub_20C021740(&p_p);
  _Unwind_Resume(a1);
}

void sub_20C1E01C8(unsigned int a1, _QWORD *a2)
{
  uint64_t **v4;
  uint64_t v5;
  char *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t *EmptyString;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  std::type_info **v19;
  __int128 v20;
  char *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  _QWORD *v23;
  unint64_t v24;
  const char *v25;
  uint64_t *WhyNot;
  const char *v27;
  char *v28;
  uint64_t v29;
  void **v30;
  const char *Text;
  const char *v32;
  char *v33;
  const char *v34;
  uint64_t *v35;
  uint64_t v36;
  double v37;
  _DWORD *v38;
  void **v39;
  void ***v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  pxrInternal__aapl__pxrReserved__::TfToken *v44;
  uint64_t *v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD v51[2];
  void *__p[2];
  std::type_info *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  std::type_info **v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 i;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  v50 = 0;
  v51[0] = 0;
  v4 = (uint64_t **)(a2 + 20);
  sub_20BE71C2C((uint64_t *)&v49, (uint64_t)(a2[21] - a2[20]) >> 3);
  for (i = *(_OWORD *)v4; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)&i, v5, v6);
    if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier((__int128 *)EmptyString, (uint64_t)&v59);
    if ((_BYTE)v62)
    {
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&v59);
      if (*((char *)WhyNot + 23) >= 0)
        v29 = (uint64_t)WhyNot;
      else
        v29 = *WhyNot;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v27, v28, v29);
      if (SHIBYTE(v53) >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v30);
      if (SHIBYTE(v53) < 0)
        operator delete(__p[0]);
      if ((_BYTE)v62 && SHIBYTE(v61) < 0)
        operator delete(v59);
      goto LABEL_64;
    }
    v11 = *(_QWORD *)*sub_20C023B90(&i, v9, v10) & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      v12 = (char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0)
        v12 = *(char **)v12;
    }
    else
    {
      v12 = "";
    }
    sub_20BDDC0E4(__p, v12);
    v13 = v50;
    if ((unint64_t)v50 >= v51[0])
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v51[0] - (_QWORD)v49) >> 3) > v16)
        v16 = 0x5555555555555556 * ((uint64_t)(v51[0] - (_QWORD)v49) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51[0] - (_QWORD)v49) >> 3) >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      v63 = v51;
      if (v17)
        v18 = (char *)sub_20BDE4FF4((uint64_t)v51, v17);
      else
        v18 = 0;
      v19 = (std::type_info **)&v18[24 * v15];
      v59 = v18;
      v60 = v19;
      v62 = &v18[24 * v17];
      v20 = *(_OWORD *)__p;
      v19[2] = v53;
      *(_OWORD *)v19 = v20;
      __p[1] = 0;
      v53 = 0;
      __p[0] = 0;
      v61 = (char *)(v19 + 3);
      sub_20BDF34C0((uint64_t *)&v49, &v59);
      v21 = v50;
      sub_20BDF3648((uint64_t)&v59);
      v50 = v21;
      if (SHIBYTE(v53) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v14 = *(_OWORD *)__p;
      *((_QWORD *)v50 + 2) = v53;
      *v13 = v14;
      v50 = (char *)v13 + 24;
    }
  }
  v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22)
    v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v23 = (_QWORD *)((char *)v22 + 472);
  if (sub_20C1E5634((__int128 **)&v49))
  {
    v24 = *v23 & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      v25 = (const char *)(v24 + 16);
      if (*(char *)(v24 + 39) < 0)
        v25 = *(const char **)v25;
    }
    else
    {
      v25 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 102));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v32, v33, v25, Text);
    if (SHIBYTE(v61) >= 0)
      v34 = (const char *)&v59;
    else
      v34 = (const char *)v59;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v34);
    if (SHIBYTE(v61) < 0)
      operator delete(v59);
  }
  v35 = a2 + 101;
  v36 = sub_20C026788(a2 + 101);
  v37 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)__p);
  v38 = a2 + 102;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _DWORD *, _QWORD *, double))(*(_QWORD *)v36 + 136))(&i, v36, v38, v23, v37);
  if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v39 = (void **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v39 = (void **)i;
  }
  else
  {
    v39 = __p;
  }
  sub_20C02F650((uint64_t)&v59, (uint64_t)v39);
  v40 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = &v58;
  sub_20BDE5038(v40);
  *(_QWORD *)&i = &v57;
  sub_20BDE5038((void ***)&i);
  *(_QWORD *)&i = &v56;
  sub_20BDE5038((void ***)&i);
  *(_QWORD *)&i = &v55;
  sub_20BDE5038((void ***)&i);
  *(_QWORD *)&i = &v54;
  sub_20BDE5038((void ***)&i);
  *(_QWORD *)&i = &__p[1];
  sub_20BDE5038((void ***)&i);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetItems((uint64_t *)&v59, (uint64_t)&v49, a1);
  v41 = sub_20C026788(v35);
  sub_20C02F478((char *)&v59, (pxrInternal__aapl__pxrReserved__::VtValue *)__p);
  (*(void (**)(uint64_t, _DWORD *, _QWORD *, void **))(*(_QWORD *)v41 + 152))(v41, v38, v23, __p);
  sub_20BF4C2D8((uint64_t)__p);
  __p[0] = &v67;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v66;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v65;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v64;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v63;
  sub_20BDE5038((void ***)__p);
  __p[0] = &v60;
  sub_20BDE5038((void ***)__p);
  if (a1 <= 1)
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    while (__p[0] != __p[1])
    {
      v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)__p, v42, v43);
      if ((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8) != 0)
        v45 = (uint64_t *)((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v45 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
      sub_20BDDC0E4(&v59, "");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(v38, (uint64_t)v45, (uint64_t)&v59, &i);
      v46 = sub_20C026788(v35);
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v46 + 64))(v46, &i, 11);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (SHIBYTE(v61) < 0)
        operator delete(v59);
      sub_20C023C08(__p);
    }
    v47 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v47)
      v47 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v48 = sub_20C026788(v35);
    v60 = &off_24C526790;
    sub_20C030230(&v59, v4);
    (*(void (**)(uint64_t, _DWORD *, uint64_t, void **))(*(_QWORD *)v48 + 152))(v48, v38, (uint64_t)v47 + 64, &v59);
    sub_20BF4C2D8((uint64_t)&v59);
  }
LABEL_64:
  v59 = &v49;
  sub_20BDE5038((void ***)&v59);
}

void sub_20C1E07CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  sub_20BF4C2D8((uint64_t)&__p);
  a14 = &a11;
  sub_20BDE5038((void ***)&a14);
  _Unwind_Resume(a1);
}

void sub_20C1E08DC(uint64_t a1, int *a2)
{
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;

  v3 = sub_20C007CCC(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__p, v3);
  sub_20BFD3EBC(a2 + 54, (int *)__p);
  sub_20BFD3F10(a2 + 55, (int *)__p + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
  sub_20BFD265C(__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 54)))
  {
    if (*(char *)(v3 + 23) >= 0)
      v6 = v3;
    else
      v6 = *(_QWORD *)v3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim path", v4, v5, v6);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v7);
    if (v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_20C1E09AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_20C1E09CC(uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_20BF3E540(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_20BF3E6D0(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20C1E0AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF3E6D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C1E0B08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void ***v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  void **v19;
  std::type_info **v20;
  uint64_t v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)(a3 + 808);
  v7 = sub_20C026788((uint64_t *)(a3 + 808));
  v8 = a3 + 816;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 136))(&v22, v7, v8, a1);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v22))
  {
    if ((v23 & 4) != 0)
      v9 = (void ***)(*(uint64_t (**)(void ****))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(&v22);
    else
      v9 = v22;
  }
  else
  {
    v9 = &v19;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_20BFE538C(&v16, (uint64_t *)*v9, (uint64_t *)v9[1], v9[1] - *v9);
  sub_20BF4C2D8((uint64_t)&v22);
  v22 = &v19;
  sub_20BEEB2B8((void ***)&v22);
  v10 = v17;
  if ((unint64_t)v17 >= v18)
  {
    v14 = sub_20BFCA068((char **)&v16, a2);
  }
  else
  {
    v11 = *a2;
    *v17 = *a2;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *v10 &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 = (char *)(v10 + 1);
  }
  v17 = v14;
  v15 = sub_20C026788(v6);
  v20 = &off_24C526790;
  sub_20C030230(&v19, &v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)v15 + 152))(v15, v8, a1, &v19);
  sub_20BF4C2D8((uint64_t)&v19);
  v19 = (void **)&v16;
  sub_20BEEB2B8(&v19);
}

void sub_20C1E0CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  sub_20BF4C2D8((uint64_t)&a13);
  a13 = (void **)&a9;
  sub_20BEEB2B8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E0D04(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  uint64_t *EmptyString;
  const char *v5;
  char *v6;
  unint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *Name;
  const char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unint64_t v37;
  const char *v38;
  const char *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  void **v47;
  const char *v48;
  char *v49;
  void **v50;
  void **v51;
  const char *v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  uint64_t v54;
  uint64_t result;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE v66[8];
  uint64_t v67;
  _BYTE v68[8];
  uint64_t v69;
  unsigned int *v70;
  char *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  sub_20C007CCC(a1);
  v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v65);
  if ((v65 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v65 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString) & 1) == 0)
  {
    v7 = v65 & 0xFFFFFFFFFFFFFFF8;
    if ((v65 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0)
        v8 = *(const char **)v8;
    }
    else
    {
      v8 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid attribute name", v5, v6, v8);
    if (v72 >= 0)
      v9 = (const char *)&v70;
    else
      v9 = (const char *)v70;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v9);
    if (v72 < 0)
      operator delete(v70);
  }
  v10 = a2 + 816;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v65, (int *)&v70);
  sub_20BFD3EBC((int *)(a2 + 816), (int *)&v70);
  sub_20BFD3F10((int *)(a2 + 820), (int *)&v70 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
  sub_20BFD265C(&v70);
  v11 = (uint64_t *)(a2 + 808);
  v12 = sub_20C026788((uint64_t *)(a2 + 808));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v12, a2 + 816) & 1) == 0)
  {
    v13 = *(_QWORD *)(a2 + 904);
    v14 = *(_QWORD **)(v13 - 16);
    if ((unint64_t)v14 >= *(_QWORD *)(v13 - 8))
    {
      v18 = sub_20BFCA068((char **)(v13 - 24), &v65);
    }
    else
    {
      v15 = v65;
      *v14 = v65;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *v14 &= 0xFFFFFFFFFFFFFFF8;
      }
      v18 = (char *)(v14 + 1);
    }
    *(_QWORD *)(v13 - 16) = v18;
    v19 = sub_20C026788((uint64_t *)(a2 + 808));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 64))(v19, a2 + 816, 1);
    v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20)
      v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v21 = sub_20C026788((uint64_t *)(a2 + 808));
    v71 = (char *)&unk_24C51FCF3;
    LOBYTE(v70) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v21 + 152))(v21, a2 + 816, (uint64_t)v20 + 64, &v70);
    sub_20BF4C2D8((uint64_t)&v70);
  }
  if (*(_BYTE *)(a2 + 801))
  {
    v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22)
      v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v23 = sub_20C026788((uint64_t *)(a2 + 808));
    v71 = (char *)&unk_24C51FCF3;
    LOBYTE(v70) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v23 + 152))(v23, a2 + 816, (uint64_t)v22 + 64, &v70);
    sub_20BF4C2D8((uint64_t)&v70);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v64);
  v69 = 0;
  v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24)
    v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v25 = sub_20C026788((uint64_t *)(a2 + 808));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v25 + 112))(v25, a2 + 816, (uint64_t)v24 + 448, v68))
  {
    v26 = (_QWORD *)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v68);
    if ((v64 & 0xFFFFFFFFFFFFFFF8) != (*v26 & 0xFFFFFFFFFFFFFFF8))
    {
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      if (*((char *)Name + 23) >= 0)
        v30 = (uint64_t)Name;
      else
        v30 = *Name;
      v31 = *v26 & 0xFFFFFFFFFFFFFFF8;
      if (v31)
      {
        v32 = (const char *)(v31 + 16);
        if (*(char *)(v31 + 39) < 0)
          v32 = *(const char **)v32;
      }
      else
      {
        v32 = "";
      }
      v37 = v64 & 0xFFFFFFFFFFFFFFF8;
      if ((v64 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v38 = (const char *)(v37 + 16);
        if (*(char *)(v37 + 39) < 0)
          v38 = *(const char **)v38;
      }
      else
      {
        v38 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"attribute '%s' already has type '%s', cannot change to '%s'", v28, v29, v30, v32, v38);
      if (v72 >= 0)
        v39 = (const char *)&v70;
      else
        v39 = (const char *)v70;
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v39);
      if (v72 < 0)
        operator delete(v70);
    }
  }
  else
  {
    v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v33)
      v33 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v34 = sub_20C026788((uint64_t *)(a2 + 808));
    v70 = (unsigned int *)v64;
    v71 = (char *)&off_24C5207B8 + 1;
    if ((v64 & 7) != 0)
    {
      v35 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v70 = v35;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v34 + 152))(v34, a2 + 816, (uint64_t)v33 + 448, &v70);
    sub_20BF4C2D8((uint64_t)&v70);
  }
  if (*(_QWORD *)(a2 + 840))
    v40 = *(_DWORD *)sub_20C02569C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 832));
  else
    v40 = 0;
  v67 = 0;
  v41 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v41)
    v41 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v42 = sub_20C026788((uint64_t *)(a2 + 808));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v42 + 112))(v42, a2 + 816, (uint64_t)v41 + 464, v66))
  {
    if (v40 != *(_DWORD *)sub_20C02569C((pxrInternal__aapl__pxrReserved__::VtValue *)v66))
    {
      v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      if (*((char *)v43 + 23) >= 0)
        v44 = (uint64_t)v43;
      else
        v44 = *v43;
      v45 = (unsigned int *)sub_20C02569C((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C5269D8, *v45, (uint64_t)v62);
      v46 = v63;
      v47 = (void **)v62[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C5269D8, v40, (uint64_t)__p);
      v50 = v62;
      if (v46 < 0)
        v50 = v47;
      if (v61 >= 0)
        v51 = __p;
      else
        v51 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"attribute '%s' already has variability '%s', cannot change to '%s'", v48, v49, v44, v50, v51);
      if (v72 >= 0)
        v52 = (const char *)&v70;
      else
        v52 = (const char *)v70;
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v52);
      if (v72 < 0)
        operator delete(v70);
      if (v61 < 0)
        operator delete(__p[0]);
      if (v63 < 0)
        operator delete(v62[0]);
    }
  }
  else
  {
    v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v53)
      v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v54 = sub_20C026788(v11);
    v71 = (char *)&off_24C5269E8 + 3;
    LODWORD(v70) = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v54 + 152))(v54, v10, (uint64_t)v53 + 464, &v70);
    sub_20BF4C2D8((uint64_t)&v70);
  }
  sub_20BF4C2D8((uint64_t)v66);
  result = sub_20BF4C2D8((uint64_t)v68);
  if ((v64 & 7) != 0)
  {
    v56 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  if ((v65 & 7) != 0)
  {
    v58 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  return result;
}

void sub_20C1E1328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;

  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  sub_20BF4C2D8((uint64_t)&a27);
  sub_20BF4C2D8(v27 - 96);
  if ((a25 & 7) != 0)
  {
    v29 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  if ((a26 & 7) != 0)
  {
    v31 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  _Unwind_Resume(a1);
}

void sub_20C1E147C(unsigned int a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v8;
  std::type_info **v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  uint64_t *WhyNot;
  const char *v17;
  char *v18;
  uint64_t v19;
  void **v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  uint64_t i;
  void *__p;
  std::type_info **v26;
  char v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 288);
  v6 = *(_QWORD *)(a2 + 296);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting connection paths to None (or an empty list) is only allowed when setting explicit connection paths, not for list editing", (const char *)a2, a3);
    if (v27 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
LABEL_7:
    if (v27 < 0)
      operator delete(__p);
  }
  else
  {
    v23 = *(_QWORD *)(a2 + 288);
    for (i = v6; ; v6 = i)
    {
      if (v5 == v6)
      {
        if (a1 <= 1)
        {
          v9 = *(std::type_info ***)(a2 + 296);
          __p = *(void **)(a2 + 288);
          v26 = v9;
          while (__p != v26)
          {
            v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&__p, a2, a3);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), v10, v21);
            v11 = sub_20C026788((uint64_t *)(a2 + 808));
            if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 72))(v11, v21) & 1) == 0)
            {
              v12 = sub_20C026788((uint64_t *)(a2 + 808));
              (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v12 + 64))(v12, v21, 2);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
            sub_20BFD265C(v21);
            sub_20BFD7240(&__p);
          }
          v13 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v13)
            v13 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          v14 = sub_20C026788((uint64_t *)(a2 + 808));
          v26 = &off_24C526910;
          sub_20C030C78(&__p, (_DWORD **)(a2 + 288));
          (*(void (**)(uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *, void **))(*(_QWORD *)v14 + 152))(v14, a2 + 816, v13, &__p);
          sub_20BF4C2D8((uint64_t)&__p);
        }
        v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v15)
          v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C1E5894((_QWORD *)v15 + 7, a1, (char **)(a2 + 288), (uint64_t *)a2);
        return;
      }
      v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFD71C4(&v23, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(v8, (uint64_t)&__p);
      if (v28)
        break;
      sub_20BFD7240(&v23);
      v5 = v23;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
    if (*((char *)WhyNot + 23) >= 0)
      v19 = (uint64_t)WhyNot;
    else
      v19 = *WhyNot;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v17, v18, v19);
    if (v22 >= 0)
      v20 = v21;
    else
      v20 = (void **)v21[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v20);
    if (v22 < 0)
      operator delete(v21[0]);
    if (v28)
      goto LABEL_7;
  }
}

void sub_20C1E1708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25)
  {
    if (a24 < 0)
      operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1E1784(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  __int128 v7;
  void *v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t i;
  void *v19;
  void **v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  uint64_t v26;
  uint64_t *v27;
  void *__p[2];
  _BYTE v29[24];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  int v35;
  int v36;
  void *v37[2];
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  void **v45[3];

  v4 = (uint64_t *)a2;
  if (sub_20BFEFCF0(a2))
  {
    v26 = a3;
    v6 = sub_20C1938C4(v4);
    *(_OWORD *)__p = *(_OWORD *)v6;
    *(_QWORD *)v29 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = 0;
    *(_OWORD *)&v29[8] = *(_OWORD *)(v6 + 24);
    v30 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v31 = *(_OWORD *)(v6 + 48);
    v32 = *(_QWORD *)(v6 + 64);
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    v7 = *(_OWORD *)(v6 + 72);
    v34 = *(_QWORD *)(v6 + 88);
    *(_OWORD *)v33 = v7;
    *(_QWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v35);
    sub_20C193954((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v37;
    *(_QWORD *)v29 = v38;
    v37[1] = 0;
    v38 = 0;
    v37[0] = 0;
    sub_20C00BC18((void **)&v29[8]);
    *(_OWORD *)&v29[8] = v39;
    v30 = v40;
    v40 = 0;
    v39 = 0uLL;
    sub_20C00BCC0((void **)&v31);
    v31 = v41;
    v32 = v42;
    v42 = 0;
    v41 = 0uLL;
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
    *(_OWORD *)v33 = v43;
    v34 = v44;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    v45[0] = (void **)&v41;
    sub_20C00E25C(v45);
    v45[0] = (void **)&v39;
    sub_20C00D5A8(v45);
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v8 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(v6 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    v9 = (void **)(v6 + 72);
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)v29;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v29 = 0;
    sub_20C00BC18((void **)(v6 + 24));
    *(_OWORD *)(v6 + 24) = *(_OWORD *)&v29[8];
    *(_QWORD *)(v6 + 40) = v30;
    *(_QWORD *)&v29[8] = 0;
    *(_QWORD *)&v29[16] = 0;
    v30 = 0;
    sub_20C00BCC0((void **)(v6 + 48));
    *(_OWORD *)(v6 + 48) = v31;
    *(_QWORD *)(v6 + 64) = v32;
    v31 = 0uLL;
    v32 = 0;
    if (*(char *)(v6 + 95) < 0)
      operator delete(*v9);
    v10 = *(_OWORD *)v33;
    *(_QWORD *)(v6 + 88) = v34;
    *(_OWORD *)v9 = v10;
    HIBYTE(v34) = 0;
    LOBYTE(v33[0]) = 0;
    v37[0] = &v31;
    sub_20C00E25C((void ***)v37);
    v37[0] = &v29[8];
    sub_20C00D5A8((void ***)v37);
    a3 = v26;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else if (sub_20BFEFDCC((pxrInternal__aapl__pxrReserved__::VtValue *)v4))
  {
    v11 = sub_20C1939F0(v4);
    v12 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)__p = *(_OWORD *)v11;
    *(_OWORD *)v29 = v12;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_QWORD *)&v29[16] = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v11 + 32) = 0;
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
    v15 = *(_QWORD *)&v29[16];
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v16, v17);
    v27 = v4;
    for (i = *(_QWORD *)&v29[16] + 96 * (uint64_t)__p[0]; v15 != i; v15 += 96)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v35);
      sub_20C193954(v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (uint64_t)v37);
      v19 = *(void **)v15;
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)(v15 + 8) = v19;
        operator delete(v19);
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = 0;
      }
      *(_OWORD *)v15 = *(_OWORD *)v37;
      *(_QWORD *)(v15 + 16) = v38;
      v37[0] = 0;
      v37[1] = 0;
      v38 = 0;
      sub_20C00BC18((void **)(v15 + 24));
      *(_OWORD *)(v15 + 24) = v39;
      *(_QWORD *)(v15 + 40) = v40;
      v39 = 0uLL;
      v40 = 0;
      sub_20C00BCC0((void **)(v15 + 48));
      *(_OWORD *)(v15 + 48) = v41;
      *(_QWORD *)(v15 + 64) = v42;
      v41 = 0uLL;
      v42 = 0;
      v20 = (void **)(v15 + 72);
      if (*(char *)(v15 + 95) < 0)
        operator delete(*v20);
      v21 = v43;
      *(_QWORD *)(v15 + 88) = v44;
      *(_OWORD *)v20 = v21;
      HIBYTE(v44) = 0;
      LOBYTE(v43) = 0;
      v45[0] = (void **)&v41;
      sub_20C00E25C(v45);
      v45[0] = (void **)&v39;
      sub_20C00D5A8(v45);
      if (v37[0])
      {
        v37[1] = v37[0];
        operator delete(v37[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_20BFD265C(&v35);
    }
    v4 = v27;
    if ((void **)v11 != __p)
    {
      sub_20C00E910((_QWORD *)v11);
      v22 = *(_OWORD *)v29;
      *(_OWORD *)v11 = *(_OWORD *)__p;
      *(_OWORD *)(v11 + 16) = v22;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v29 = 0u;
      *(_QWORD *)(v11 + 32) = *(_QWORD *)&v29[16];
      *(_QWORD *)&v29[16] = 0;
    }
    sub_20C00E910(__p);
  }
  v23 = sub_20C026788((uint64_t *)(a3 + 808));
  v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24)
    v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, uint64_t *))(*(_QWORD *)v23 + 152))(v23, a1, (uint64_t)v24 + 88, v4);
}

void sub_20C1E1C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,int a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 + 4));
  sub_20BFD265C(&a27);
  if (a25 < 0)
    operator delete(__p);
  *(_QWORD *)(v30 - 104) = v28;
  sub_20C00E25C((void ***)(v30 - 104));
  *(_QWORD *)(v30 - 104) = v27;
  sub_20C00D5A8((void ***)(v30 - 104));
  if (a11)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E1CC8(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD **v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *v21;
  uint64_t result;
  _QWORD **v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;

  v23 = 0;
  v2 = (_QWORD *)a1[98];
  v3 = a1[99];
  if ((unint64_t)v2 >= v3)
  {
    v5 = (int64x2_t *)(a1 + 97);
    v6 = a1[97];
    v7 = ((uint64_t)v2 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_20BDDF694();
    v8 = (uint64_t)(a1 + 99);
    v9 = v3 - v6;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v7 + 1))
      v10 = v7 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v27 = a1 + 99;
    if (v11)
    {
      v12 = (char *)sub_20BDDF6A8(v8, v11);
      v13 = v23;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = &v12[8 * v7];
    v15 = &v12[8 * v11];
    v26 = v15;
    v23 = 0;
    *(_QWORD *)v14 = v13;
    v4 = v14 + 8;
    v25.i64[1] = (uint64_t)(v14 + 8);
    v16 = (_QWORD *)a1[98];
    v17 = (_QWORD *)a1[97];
    if (v16 == v17)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v19 = *v5;
      v4 = (_QWORD *)v25.i64[1];
      v15 = v26;
    }
    a1[97] = v14;
    a1[98] = v4;
    v25 = v19;
    v20 = (char *)a1[99];
    a1[99] = v15;
    v26 = v20;
    v24 = v19.i64[0];
    sub_20C030F7C((uint64_t)&v24);
  }
  else
  {
    *v2 = 0;
    v4 = v2 + 1;
  }
  a1[98] = v4;
  sub_20BF49F14(&v23, 0);
  v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 57);
  result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString(v21);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString((uint64_t)v21);
  return result;
}

void sub_20C1E1E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9)
{
  sub_20BF49F14(&a9, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1E1E2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v3;
  __int128 *v4;
  uint64_t *v5;

  v2 = (_QWORD *)(a2 + 760);
  v3 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(_QWORD *)(a2 + 784) - 16);
  v4 = (__int128 *)sub_20C007CCC(a1);
  v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v3, v4);
  return sub_20BF4A9BC(v5, v2);
}

void sub_20C1E1E64(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  const char *p_p;
  void *__p;
  char v9;

  v3 = sub_20C007CCC(a1);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)a2 + 456, (std::string *)v3) & 1) == 0)
  {
    if (*(char *)(v3 + 23) >= 0)
      v6 = v3;
    else
      v6 = *(_QWORD *)v3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized value typename '%s' for dictionary", v4, v5, v6);
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    textFileFormatYyerror(a2, p_p);
    if (v9 < 0)
      operator delete(__p);
  }
}

void sub_20C1E1EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1E1F0C(_QWORD *a1)
{
  uint64_t v2;
  const char *v3;
  char *v4;
  void **v5;
  const char *v6;
  char *v7;
  void **v8;
  void **v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t)(a1 + 57);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 57)) & 1) != 0
    || !*((_BYTE *)a1 + 664))
  {
    v10[0] = 0;
    v10[1] = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue(v2, v10, v4, __p);
    sub_20BF4B5D8(a1 + 95, __p);
    sub_20BF4C2D8((uint64_t)__p);
    if (!a1[96])
    {
      v8 = v10;
      if (v11 < 0)
        v8 = (void **)v10[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing simple value: %s", v6, v7, v8);
      if (v13 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)v9);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name has [] for non-shaped value!\n", v3, v4);
    if (v11 >= 0)
      v5 = v10;
    else
      v5 = (void **)v10[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)v5);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
}

void sub_20C1E203C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C1E2080(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  char *v4;
  char *v5;
  int v6;
  const char *v7;
  char *v8;
  void **v9;
  std::type_info_vtbl *p_p;
  void **v11;
  void *v12[2];
  uint64_t v13;
  std::type_info __p;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 456)) & 1) != 0
    || *(_BYTE *)(a1 + 664))
  {
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue(v2, v12, v4, &__p);
    sub_20BF4B5D8((_QWORD *)(a1 + 760), &__p);
    sub_20BF4C2D8((uint64_t)&__p);
    __p.__type_name = 0;
    v6 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 760), &__p, v5);
    sub_20BF4C2D8((uint64_t)&__p);
    if (v6)
    {
      v9 = v12;
      if (v13 < 0)
        v9 = (void **)v12[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing shaped value: %s", v7, v8, v9);
      if (v15 >= 0)
        p_p = (std::type_info_vtbl *)&__p;
      else
        p_p = __p.__vftable;
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)p_p);
      if (v15 < 0)
        operator delete(__p.__vftable);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name missing [] for shaped value.", v3, v4);
    if (v13 >= 0)
      v11 = v12;
    else
      v11 = (void **)v12[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)v11);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
}

void sub_20C1E21CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1E2220(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v3;
  uint64_t *EmptyString;
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unint64_t v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  uint64_t v21;
  _DWORD *i;
  _DWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  void *__p[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  sub_20C007CCC(a1);
  v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
  if ((v26 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((v26 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, (int *)__p);
    sub_20BFD3EBC((int *)(a2 + 816), (int *)__p);
    sub_20BFD3F10((int *)(a2 + 820), (int *)__p + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    v7 = sub_20C026788((uint64_t *)(a2 + 808));
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, a2 + 816) & 1) == 0)
    {
      v8 = *(_QWORD *)(a2 + 904);
      v9 = *(_QWORD **)(v8 - 16);
      if ((unint64_t)v9 >= *(_QWORD *)(v8 - 8))
      {
        v13 = sub_20BFCA068((char **)(v8 - 24), &v26);
      }
      else
      {
        v10 = v26;
        *v9 = v26;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        v13 = (char *)(v9 + 1);
      }
      *(_QWORD *)(v8 - 16) = v13;
      v17 = sub_20C026788((uint64_t *)(a2 + 808));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v17, a2 + 816, 8);
    }
    v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v18)
      v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v19 = sub_20C026788((uint64_t *)(a2 + 808));
    sub_20BF4C6D0(__p, (_QWORD *)(a2 + 832));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v19 + 152))(v19, a2 + 816, (uint64_t)v18 + 464, __p);
    sub_20BF4C2D8((uint64_t)__p);
    if (*(_BYTE *)(a2 + 801))
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v20)
        v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v21 = sub_20C026788((uint64_t *)(a2 + 808));
      __p[1] = &unk_24C51FCF3;
      LOBYTE(__p[0]) = *(_BYTE *)(a2 + 801);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v21 + 152))(v21, a2 + 816, (uint64_t)v20 + 64, __p);
      sub_20BF4C2D8((uint64_t)__p);
    }
    *(_BYTE *)(a2 + 224) = 0;
    if (*(_BYTE *)(a2 + 256))
    {
      __p[0] = (void *)(a2 + 232);
      sub_20BFD6F90((void ***)__p);
      *(_BYTE *)(a2 + 256) = 0;
    }
    v23 = *(_DWORD **)(a2 + 264);
    for (i = *(_DWORD **)(a2 + 272); i != v23; sub_20BFD6F64(a2 + 280, i))
      i -= 2;
    *(_QWORD *)(a2 + 272) = v23;
  }
  else
  {
    v14 = v26 & 0xFFFFFFFFFFFFFFF8;
    if ((v26 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relationship name", v5, v6, v15);
    if (v28 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v16);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  if ((v26 & 7) != 0)
  {
    v24 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
}

void sub_20C1E2528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned int *v17;
  unsigned int v18;

  sub_20BF4C2D8((uint64_t)&__p);
  if ((a10 & 7) != 0)
  {
    v17 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1E25A0(uint64_t a1)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v3;
  void ***v4;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v5;
  uint64_t v6;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  void **v11;
  std::type_info **v12;
  uint64_t v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 264) != *(_QWORD *)(a1 + 272))
  {
    v2 = sub_20C026788((uint64_t *)(a1 + 808));
    v3 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v3)
      v3 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 136))(&v14, v2, a1 + 816, (uint64_t)v3 + 48);
    if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v14))
    {
      if ((v15 & 4) != 0)
        v4 = (void ***)(*(uint64_t (**)(void ****))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(&v14);
      else
        v4 = v14;
    }
    else
    {
      v4 = &v11;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_20BFD6D38(&v8, *v4, v4[1], v4[1] - *v4);
    sub_20BF4C2D8((uint64_t)&v14);
    v14 = &v11;
    sub_20BFD6F90((void ***)&v14);
    sub_20C031044((uint64_t *)&v8, v9, *(_DWORD **)(a1 + 264), *(_DWORD **)(a1 + 272), (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v5)
      v5 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v6 = sub_20C026788((uint64_t *)(a1 + 808));
    v12 = &off_24C526910;
    sub_20C030C78(&v11, &v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)v6 + 152))(v6, a1 + 816, (uint64_t)v5 + 48, &v11);
    sub_20BF4C2D8((uint64_t)&v11);
    v11 = (void **)&v8;
    sub_20BFD6F90(&v11);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 816), &v8);
  sub_20BFD3EBC((int *)(a1 + 816), (int *)&v8);
  sub_20BFD3F10((int *)(a1 + 820), (int *)&v8 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  return sub_20BFD265C(&v8);
}

void sub_20C1E2798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  sub_20BF4C2D8((uint64_t)&a13);
  a16 = (void **)&a9;
  sub_20BFD6F90(&a16);
  _Unwind_Resume(a1);
}

void sub_20C1E2804(unsigned int a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v8;
  void *v9;
  void *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  uint64_t *WhyNot;
  const char *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  char v19;
  void *__p;
  void *v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t i;

  if (*(_BYTE *)(a2 + 256))
  {
    v5 = *(_QWORD *)(a2 + 232);
    v6 = *(_QWORD *)(a2 + 240);
    if (a1 && v5 == v6)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting relationship targets to None (or empty list) is only allowed when setting explicit targets, not for list editing", (const char *)a2, a3);
      if (v22 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
LABEL_8:
      if (v22 < 0)
        operator delete(__p);
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 232);
      for (i = v6; ; v6 = i)
      {
        if (v5 == v6)
        {
          if (a1 <= 1)
          {
            v9 = *(void **)(a2 + 232);
            v10 = *(void **)(a2 + 240);
            __p = v9;
            v21 = v10;
            while (v9 != v10)
            {
              v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&__p, a2, a3);
              sub_20C1E2B50(v11, (uint64_t *)a2);
              sub_20BFD7240(&__p);
              v9 = __p;
              v10 = v21;
            }
          }
          v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v12)
            v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          sub_20C1E5894((_QWORD *)v12 + 53, a1, (char **)(a2 + 232), (uint64_t *)a2);
          return;
        }
        v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_20BFD71C4(&v24, a2, a3);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath(v8, (uint64_t)&__p);
        if (v23)
          break;
        sub_20BFD7240(&v24);
        v5 = v24;
      }
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
      if (*((char *)WhyNot + 23) >= 0)
        v16 = (uint64_t)WhyNot;
      else
        v16 = *WhyNot;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v14, v15, v16);
      if (v19 >= 0)
        v17 = (const char *)&v18;
      else
        v17 = (const char *)v18;
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v17);
      if (v19 < 0)
        operator delete(v18);
      if (v23)
        goto LABEL_8;
    }
  }
}

void sub_20C1E2994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C1E29D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;
  int v9;
  void **v10;

  v3 = sub_20C007CCC(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v8, v3);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (int *)v7);
    sub_20BFD3EBC(&v8, (int *)v7);
    sub_20BFD3F10(&v9, (int *)v7 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
    sub_20BFD265C(v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_20BFD265C(&v10);
  }
  if (!*(_BYTE *)(a2 + 256))
  {
    memset(v7, 0, sizeof(v7));
    sub_20C026988(a2 + 232, (uint64_t)v7);
    v10 = (void **)v7;
    sub_20BFD6F90(&v10);
  }
  v4 = *(_QWORD *)(a2 + 240);
  if (v4 >= *(_QWORD *)(a2 + 248))
  {
    v5 = sub_20BFD7890((uint64_t *)(a2 + 232), &v8);
  }
  else
  {
    sub_20BFD6E54(*(_DWORD **)(a2 + 240), &v8);
    sub_20BFD6EA4((_DWORD *)(v4 + 4), &v9);
    v5 = v4 + 8;
  }
  *(_QWORD *)(a2 + 240) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C1E2B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  sub_20BFD6F90((void ***)va1);
  sub_20BFD1A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C1E2B50(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v9;
  int v10;

  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 102), a1, &v9);
  v4 = sub_20C026788(a2 + 101);
  if (((*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 72))(v4, &v9) & 1) == 0)
  {
    v5 = sub_20C026788(a2 + 101);
    (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v5 + 64))(v5, &v9, 9);
    v6 = a2[34];
    if (v6 >= a2[35])
    {
      v7 = sub_20BFD7890(a2 + 33, a1);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a2[34], a1);
      sub_20BFD6EA4((_DWORD *)(v6 + 4), (_DWORD *)a1 + 1);
      v7 = v6 + 8;
    }
    a2[34] = v7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_20BFD265C(&v9);
}

void sub_20C1E2C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *Sdf_MemoryFlexBuffer::Sdf_MemoryFlexBuffer(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  void *v9;
  const char *v10;
  _QWORD v12[4];
  char v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = a4;
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v8 = (char *)operator new[](v7 + 2);
  if ((*(uint64_t (**)(_QWORD, char *, uint64_t, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, v8, v7, 0) == v7)
  {
    *(_WORD *)&v8[v7] = 0;
    v9 = (void *)a1[1];
    a1[1] = v8;
    if (v9)
    {
      operator delete[](v9);
      v8 = (char *)a1[1];
    }
    *a1 = textFileFormatYy_scan_buffer(v8, v7 + 2, a1[2]);
  }
  else
  {
    v12[0] = "sdf/textFileFormat.yy";
    v12[1] = "Sdf_MemoryFlexBuffer";
    v12[2] = 3243;
    v12[3] = "Sdf_MemoryFlexBuffer::Sdf_MemoryFlexBuffer(const std::shared_ptr<ArAsset> &, const std::string &, yyscan_t)";
    v13 = 0;
    if (*(char *)(a3 + 23) >= 0)
      v10 = (const char *)a3;
    else
      v10 = *(const char **)a3;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read asset contents @%s@: an error occurred while reading", v10);
    operator delete[](v8);
  }
  return a1;
}

void sub_20C1E2D4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  operator delete[](v2);
  v4 = *(void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    operator delete[](v4);
  _Unwind_Resume(a1);
}

void Sdf_MemoryFlexBuffer::~Sdf_MemoryFlexBuffer(Sdf_MemoryFlexBuffer *this)
{
  void **v2;
  void *v3;

  v2 = *(void ***)this;
  if (v2)
    textFileFormatYy_delete_buffer(v2, *((_QWORD *)this + 2));
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    operator delete[](v3);
}

BOOL Sdf_ParseLayer(const std::string *a1, _QWORD *a2, const std::string *a3, const std::string *a4, char a5, uint64_t *a6, _BYTE *a7)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v20;
  __int128 __p;
  _QWORD v22[3];
  uint64_t v23;
  int v24;
  std::string v25;
  std::string v26;
  std::string v27[27];
  _QWORD v28[14];
  uint64_t v29;
  char v30;
  char v31;
  void *v32[3];

  v32[1] = *(void **)MEMORY[0x24BDAC8D0];
  sub_20BEB59B0((uint64_t)&v23, (uint64_t)"Sdf", (uint64_t)"Sdf_ParseLayer");
  v20 = dword_254987F50;
  dword_254987F50 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext::Sdf_TextParserContext((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v25);
  v14 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v29;
  v29 = *a6;
  sub_20BF1DD04(a6);
  sub_20BF1D8F4((int)&v29, v14);
  std::string::operator=(v27, a1);
  std::string::operator=(&v25, a3);
  std::string::operator=(&v26, a4);
  v30 = a5;
  *(_QWORD *)&__p = sub_20C1E30C0;
  *((_QWORD *)&__p + 1) = &v25;
  sub_20C1E310C(v28, &__p);
  textFileFormatYylex_init(v32);
  textFileFormatYyset_extra((uint64_t)&v25, (_QWORD *)v32[0]);
  Sdf_MemoryFlexBuffer::Sdf_MemoryFlexBuffer(v22, a2, (uint64_t)a1, (uint64_t)v32[0]);
  if (v22[0])
  {
    v17 = textFileFormatYyparse((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v25, v15, v16);
    *a7 = v31;
  }
  else
  {
    v17 = -1;
  }
  Sdf_MemoryFlexBuffer::~Sdf_MemoryFlexBuffer((Sdf_MemoryFlexBuffer *)v22);
  textFileFormatYylex_destroy((_QWORD *)v32[0]);
  sub_20C1E5CB8((uint64_t)&v25);
  dword_254987F50 = v20 != 0;
  while (v24--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v23);
  return v17 == 0;
}

void sub_20C1E3024()
{
  uint64_t v0;

  Sdf_MemoryFlexBuffer::~Sdf_MemoryFlexBuffer((Sdf_MemoryFlexBuffer *)&v0);
  JUMPOUT(0x20C1E3080);
}

void sub_20C1E302C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20C1E3050);
}

void sub_20C1E3060()
{
  JUMPOUT(0x20C1E3080);
}

void sub_20C1E30A8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20C1E30B0);
  sub_20BDC12F4(a1);
}

void sub_20C1E30C0(uint64_t a1, uint64_t a2)
{
  const char *v4;

  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 456)) & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0)
      v4 = (const char *)a2;
    else
      v4 = *(const char **)a2;
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, v4);
  }
}

_QWORD *sub_20C1E310C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52AEC8;
  v7 = *a2;
  v8 = &v6;
  sub_20C1E62F0(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

BOOL Sdf_ParseLayerFromString(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t *a4, _BYTE *a5)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  const char *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v18;
  uint64_t v19;
  int v20;
  std::string v21;
  std::string v22[28];
  _QWORD v23[14];
  uint64_t v24;
  char v25;
  void *v26[2];

  v26[1] = *(void **)MEMORY[0x24BDAC8D0];
  sub_20BEB59B0((uint64_t)&v19, (uint64_t)"Sdf", (uint64_t)"Sdf_ParseLayerFromString");
  pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext::Sdf_TextParserContext((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v21);
  v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v24;
  v24 = *a4;
  sub_20BF1DD04(a4);
  sub_20BF1D8F4((int)&v24, v10);
  std::string::operator=(&v21, a2);
  std::string::operator=(v22, a3);
  *(_QWORD *)&v18 = sub_20C1E30C0;
  *((_QWORD *)&v18 + 1) = &v21;
  sub_20C1E310C(v23, &v18);
  textFileFormatYylex_init(v26);
  textFileFormatYyset_extra((uint64_t)&v21, (_QWORD *)v26[0]);
  if (*(char *)(a1 + 23) >= 0)
    v11 = (const char *)a1;
  else
    v11 = *(const char **)a1;
  v12 = (void **)textFileFormatYy_scan_string(v11, (uint64_t)v26[0]);
  v15 = textFileFormatYyparse((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v21, v13, v14);
  *a5 = v25;
  textFileFormatYy_delete_buffer(v12, (uint64_t)v26[0]);
  textFileFormatYylex_destroy((_QWORD *)v26[0]);
  sub_20C1E5CB8((uint64_t)&v21);
  while (v20--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v19);
  return v15 == 0;
}

uint64_t sub_20C1E3448(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 48);
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C52ADA0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C52ADD0[v4])(&v5, result, a2);
}

uint64_t sub_20C1E34D4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 48))
    return sub_20C1E3554(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20C1E34F4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 48) != 1)
    return sub_20C1E35B4(result, a3);
  *a2 = *a3;
  return result;
}

uint64_t sub_20C1E3518(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 48) != 2)
    return sub_20C1E3618(result, a3);
  *a2 = *a3;
  return result;
}

void sub_20C1E353C(uint64_t *a1, std::string *a2, std::string *a3)
{
  sub_20C1E367C(*a1, a2, a3);
}

_QWORD *sub_20C1E3544(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  return sub_20C1E3744(*a1, a2, a3);
}

void sub_20C1E354C(uint64_t *a1, std::string *a2, std::string *a3)
{
  sub_20C1E37FC(*a1, a2, a3);
}

uint64_t sub_20C1E3554(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C52ADA0[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_20C1E35B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C52ADA0[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 1;
  return a1;
}

uint64_t sub_20C1E3618(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C52ADA0[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 2;
  return a1;
}

void sub_20C1E367C(uint64_t a1, std::string *this, std::string *__str)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 48) == 3)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_20C1E36C0(v3);
  }
}

void sub_20C1E36C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *__p[2];
  uint64_t v5;

  v2 = *a1;
  v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v1, *(_QWORD *)(v1 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v1;
    v5 = *(_QWORD *)(v1 + 16);
    *(_OWORD *)__p = v3;
  }
  sub_20BFCD1CC(v2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20C1E3728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C1E3744(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 48) == 4)
    return sub_20BF32220(a2, a3);
  else
    return (_QWORD *)sub_20C1E3764(a1, a3);
}

uint64_t sub_20C1E3764(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C52ADA0[v4])(&v9, a1);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 48) = 4;
  return a1;
}

void sub_20C1E37FC(uint64_t a1, std::string *this, std::string *__str)
{
  uint64_t v5[2];

  if (*(_DWORD *)(a1 + 48) == 5)
  {
    std::string::operator=(this, __str);
    std::string::operator=(this + 1, __str + 1);
  }
  else
  {
    v5[0] = a1;
    v5[1] = (uint64_t)__str;
    sub_20C1E3860(v5);
  }
}

void sub_20C1E3860(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  void *v5[2];
  uint64_t v6;
  __int128 __p;
  uint64_t v8;

  v1 = *a1;
  v2 = a1[1];
  if (*(char *)(v2 + 23) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)v2, *(_QWORD *)(v2 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    v6 = *(_QWORD *)(v2 + 16);
    *(_OWORD *)v5 = v3;
  }
  if (*(char *)(v2 + 47) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(v2 + 24);
    v8 = *(_QWORD *)(v2 + 40);
    __p = v4;
  }
  sub_20BFCD398(v1, (__int128 *)v5);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_20C1E3908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C1E3934(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  const std::type_info *v8;
  char *v9;
  const std::type_info *v10;
  char *v11;
  const std::type_info *v12;
  char *v13;
  const std::type_info *v14;
  char *v15;
  const std::type_info *v16;
  char *v17;
  const std::type_info *v18;
  char *v19;
  uint64_t v20;

  v4 = atomic_load((unsigned __int8 *)&qword_254987F48);
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_254987F48);
    if ((_DWORD)v7)
    {
      qword_254987EE8[0] = sub_20C027494(v7, v8, v9);
      unk_254987EF0 = v10;
      qword_254987EF8 = sub_20C0274D4(qword_254987EE8[0], v10, v11);
      unk_254987F00 = v12;
      qword_254987F08 = sub_20C027514(qword_254987EF8, v12, v13);
      unk_254987F10 = v14;
      qword_254987F18 = sub_20C027554(qword_254987F08, v14, v15);
      unk_254987F20 = v16;
      qword_254987F28 = sub_20C027594(qword_254987F18, v16, v17);
      unk_254987F30 = v18;
      qword_254987F38 = sub_20C0275D4(qword_254987F28, v18, v19);
      unk_254987F40 = v20;
      __cxa_guard_release(&qword_254987F48);
    }
  }
  v5 = 0;
  while (qword_254987EE8[v5] != *a1)
  {
    v5 += 2;
    if (v5 == 12)
      return 0;
  }
  result = v5 != 12;
  if (a2)
  {
    *a2 = qword_254987EE8[v5 + 1];
    return 1;
  }
  return result;
}

void sub_20C1E3A34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987F48);
  _Unwind_Resume(a1);
}

void sub_20C1E3A4C(char *a1, uint64_t a2, char *a3)
{
  uint64_t *v5;
  char *v6;
  const std::type_info *v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void ***v19;
  uint64_t *v20;
  char *v21;
  const std::type_info *v22;
  char *v23;
  uint64_t v24;
  __int128 *v25;
  int v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  void ***v34;
  uint64_t *v35;
  char *v36;
  const std::type_info *v37;
  char *v38;
  uint64_t v39;
  __int128 *v40;
  int v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void ***v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  const std::type_info *v56;
  char *v57;
  uint64_t v58;
  __int128 *v59;
  int v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  void ***v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  int v74;
  int v75;
  int *v76;
  int *v77;
  int *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  const std::type_info *v84;
  char *v85;
  uint64_t v86;
  __int128 *v87;
  int v88;
  _QWORD *v89;
  unint64_t v90;
  const char *v91;
  char *v92;
  int v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  char *v106;
  uint64_t v107;
  __int128 *v108;
  int v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  void ***v118;
  char *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  unsigned int v124;
  unsigned int v125;
  int *v126;
  int *v127;
  int *v128;
  int v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  const char *v142;
  const char *Text;
  const char *v144;
  char *v145;
  const char *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  void ***v150;
  uint64_t v151;
  unint64_t v152;
  const char *v153;
  const char *v154;
  const char *v155;
  char *v156;
  const char *v157;
  const char *v158;
  const char *v159;
  char *v160;
  const char *v161;
  uint64_t *v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  void ***v166;
  void ***v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  const void *v178;
  const void *v179;
  int v180;
  unint64_t v181;
  const void *v182;
  const void *v183;
  int v184;
  size_t v185;
  const void *v186;
  size_t v187;
  const void *v188;
  size_t v189;
  int v190;
  _BOOL4 v191;
  unint64_t v192;
  const char *v193;
  const char *v194;
  const char *v195;
  char *v196;
  const char *v197;
  unint64_t v198;
  const char *v199;
  const char *v200;
  const char *v201;
  char *v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  const char *v212;
  const char *v213;
  const char *v214;
  char *v215;
  const char *v216;
  __int128 v217;
  __int128 v218;
  uint64_t *v219;
  void *v220;
  void *v221;
  uint64_t v222;
  const char *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  char *v235;
  uint64_t v236;
  void **v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *__p;
  void *v249;
  void **p_p;
  uint64_t v251;
  uint64_t v252;

  v252 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524CF0, (const std::type_info *)a2, a3);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6))
  {
    if ((sub_20BF64C0C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) == 0)
    {
      if (*(_QWORD *)(a2 + 768))
      {
        v220 = "sdf/textFileFormat.yy";
        v221 = "_SetItemsIfListOp";
        v222 = 1012;
        v223 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<int>]";
        LOBYTE(v224) = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v220, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) == 0)return;
      }
    }
    v219 = 0;
    v217 = 0u;
    v218 = 0u;
    if (sub_20BF64C0C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      v9 = *(_QWORD *)(a2 + 768);
      if ((v9 & 4) != 0)
        v10 = (__int128 *)(*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
      else
        v10 = *(__int128 **)(a2 + 760);
      sub_20C03150C((uint64_t)&v217, v10);
    }
    v11 = *(_DWORD *)(a2 + 448);
    v235 = 0;
    v236 = 0;
    v234 = 0;
    sub_20BE31AF4(&v234, v219, (uint64_t)v219 + 4 * v217, v217);
    v12 = (_QWORD *)(a2 + 440);
    v13 = (char *)v234;
    v14 = v235 - (_BYTE *)v234;
    if ((unint64_t)(v235 - (_BYTE *)v234) >= 8)
    {
      if ((unint64_t)v14 > 0x2B)
      {
        if (v234 != v235)
        {
          v72 = v14 >> 2;
          v73 = (char *)v234 + 4;
          while (v73 != v235)
          {
            v74 = *((_DWORD *)v73 - 1);
            v75 = *(_DWORD *)v73;
            v73 += 4;
            if (v74 >= v75)
            {
              v220 = 0;
              v221 = 0;
              v222 = 0;
              sub_20BE8B214(&v220, v234, (uint64_t)v235, v72);
              std::__sort<std::__less<int,int> &,int *>();
              v76 = (int *)v221;
              v77 = (int *)v220;
              if (v220 != v221)
              {
                v78 = (int *)((char *)v220 + 4);
                while (v78 != v221)
                {
                  v79 = *(v78 - 1);
                  v80 = *v78++;
                  if (v79 == v80)
                  {
                    v77 = v78 - 2;
                    goto LABEL_244;
                  }
                }
                v77 = (int *)v221;
              }
LABEL_244:
              if (v220)
              {
                v221 = v220;
                operator delete(v220);
              }
              if (v77 != v76)
              {
LABEL_247:
                v141 = *v12 & 0xFFFFFFFFFFFFFFF8;
                if (v141)
                {
                  v142 = (const char *)(v141 + 16);
                  if (*(char *)(v141 + 39) < 0)
                    v142 = *(const char **)v142;
                }
                else
                {
                  v142 = "";
                }
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v144, v145, v142, Text);
                if (v222 >= 0)
                  v146 = (const char *)&v220;
                else
                  v146 = (const char *)v220;
                textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v146);
                if (SHIBYTE(v222) < 0)
                  operator delete(v220);
              }
              break;
            }
          }
        }
      }
      else
      {
LABEL_35:
        while (v13 != v235 - 4)
        {
          v50 = v13;
          v13 += 4;
          if (v13 != v235)
          {
            v51 = *(_DWORD *)v50;
            v52 = v13;
            while (v51 != *(_DWORD *)v52)
            {
              v52 += 4;
              if (v52 == v235)
                goto LABEL_35;
            }
            goto LABEL_247;
          }
        }
      }
    }
    v15 = (uint64_t *)(a2 + 808);
    v16 = sub_20C026788((uint64_t *)(a2 + 808));
    v17 = pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)&v237);
    v18 = a2 + 816;
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v16 + 136))(&p_p, v16, v18, v12, v17);
    if (sub_20BFE4F24((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
    {
      if ((v251 & 4) != 0)
        v19 = (void ***)(*(uint64_t (**)(void ***))((v251 & 0xFFFFFFFFFFFFFFF8) + 168))(&p_p);
      else
        v19 = (void ***)p_p;
    }
    else
    {
      v19 = &v237;
    }
    sub_20C031ADC((uint64_t)&v220, (uint64_t)v19);
    sub_20BF4C2D8((uint64_t)&p_p);
    if (__p)
    {
      v249 = __p;
      operator delete(__p);
    }
    if (v246)
    {
      v247 = v246;
      operator delete(v246);
    }
    if (v244)
    {
      v245 = v244;
      operator delete(v244);
    }
    if (v242)
    {
      v243 = v242;
      operator delete(v242);
    }
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetItems((uint64_t)&v220, (uint64_t)&v234, v11);
    v53 = sub_20C026788(v15);
    sub_20C0319E8((char *)&v220, (pxrInternal__aapl__pxrReserved__::VtValue *)&v237);
    (*(void (**)(uint64_t, uint64_t, _QWORD *, void ***))(*(_QWORD *)v53 + 152))(v53, v18, v12, &v237);
    sub_20BF4C2D8((uint64_t)&v237);
    if (v232)
    {
      v233 = v232;
      operator delete(v232);
    }
    if (v230)
    {
      v231 = v230;
      operator delete(v230);
    }
    if (v228)
    {
      v229 = v228;
      operator delete(v228);
    }
    if (v226)
    {
      v227 = v226;
      operator delete(v226);
    }
    if (v224)
    {
      v225 = v224;
      operator delete(v224);
    }
    if (v221)
    {
      v222 = (uint64_t)v221;
      operator delete(v221);
    }
    if (v234)
    {
      v235 = (char *)v234;
      operator delete(v234);
    }
    goto LABEL_233;
  }
  v20 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D00, v7, v8);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v20, v21))
  {
    if ((sub_20C032314((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) == 0)
    {
      if (*(_QWORD *)(a2 + 768))
      {
        v220 = "sdf/textFileFormat.yy";
        v221 = "_SetItemsIfListOp";
        v222 = 1012;
        v223 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<int64_t>]";
        LOBYTE(v224) = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v220, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) == 0)return;
      }
    }
    v219 = 0;
    v217 = 0u;
    v218 = 0u;
    if (sub_20C032314((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      v24 = *(_QWORD *)(a2 + 768);
      if ((v24 & 4) != 0)
        v25 = (__int128 *)(*(uint64_t (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
      else
        v25 = *(__int128 **)(a2 + 760);
      sub_20C03234C((uint64_t)&v217, v25);
    }
    v26 = *(_DWORD *)(a2 + 448);
    v235 = 0;
    v236 = 0;
    v234 = 0;
    sub_20C0327E8(&v234, v219, (uint64_t)&v219[v217], v217);
    v27 = (_QWORD *)(a2 + 440);
    v28 = (char *)v234;
    v29 = v235 - (_BYTE *)v234;
    if ((unint64_t)(v235 - (_BYTE *)v234) >= 0x10)
    {
      if ((unint64_t)v29 > 0x57)
      {
        if (v234 != v235)
        {
          v95 = v29 >> 3;
          v96 = (char *)v234 + 8;
          while (v96 != v235)
          {
            v97 = *((_QWORD *)v96 - 1);
            v98 = *(_QWORD *)v96;
            v96 += 8;
            if (v97 >= v98)
            {
              v220 = 0;
              v221 = 0;
              v222 = 0;
              sub_20C032914(&v220, v234, (uint64_t)v235, v95);
              std::__sort<std::__less<long long,long long> &,long long *>();
              v99 = (uint64_t *)v221;
              v100 = (uint64_t *)v220;
              if (v220 != v221)
              {
                v101 = (uint64_t *)((char *)v220 + 8);
                while (v101 != v221)
                {
                  v102 = *(v101 - 1);
                  v103 = *v101++;
                  if (v102 == v103)
                  {
                    v100 = v101 - 2;
                    goto LABEL_266;
                  }
                }
                v100 = (uint64_t *)v221;
              }
LABEL_266:
              if (v220)
              {
                v221 = v220;
                operator delete(v220);
              }
              if (v100 != v99)
              {
LABEL_269:
                v152 = *v27 & 0xFFFFFFFFFFFFFFF8;
                if (v152)
                {
                  v153 = (const char *)(v152 + 16);
                  if (*(char *)(v152 + 39) < 0)
                    v153 = *(const char **)v153;
                }
                else
                {
                  v153 = "";
                }
                v154 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v155, v156, v153, v154);
                if (v222 >= 0)
                  v157 = (const char *)&v220;
                else
                  v157 = (const char *)v220;
                textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v157);
                if (SHIBYTE(v222) < 0)
                  operator delete(v220);
              }
              break;
            }
          }
        }
      }
      else
      {
LABEL_81:
        while (v28 != v235 - 8)
        {
          v69 = v28;
          v28 += 8;
          if (v28 != v235)
          {
            v70 = *(_QWORD *)v69;
            v71 = v28;
            while (v70 != *(_QWORD *)v71)
            {
              v71 += 8;
              if (v71 == v235)
                goto LABEL_81;
            }
            goto LABEL_269;
          }
        }
      }
    }
    v30 = (uint64_t *)(a2 + 808);
    v31 = sub_20C026788((uint64_t *)(a2 + 808));
    v32 = pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)&v237);
    v33 = a2 + 816;
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v31 + 136))(&p_p, v31, v33, v27, v32);
    if (sub_20BFE4F9C((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
    {
      if ((v251 & 4) != 0)
        v34 = (void ***)(*(uint64_t (**)(void ***))((v251 & 0xFFFFFFFFFFFFFFF8) + 168))(&p_p);
      else
        v34 = (void ***)p_p;
    }
    else
    {
      v34 = &v237;
    }
    sub_20C03298C((uint64_t)&v220, (uint64_t)v34);
    sub_20BF4C2D8((uint64_t)&p_p);
    if (__p)
    {
      v249 = __p;
      operator delete(__p);
    }
    if (v246)
    {
      v247 = v246;
      operator delete(v246);
    }
    if (v244)
    {
      v245 = v244;
      operator delete(v244);
    }
    if (v242)
    {
      v243 = v242;
      operator delete(v242);
    }
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetItems((uint64_t)&v220, (uint64_t)&v234, v26);
    v81 = sub_20C026788(v30);
    sub_20C0327A8((char *)&v220, (pxrInternal__aapl__pxrReserved__::VtValue *)&v237);
    (*(void (**)(uint64_t, uint64_t, _QWORD *, void ***))(*(_QWORD *)v81 + 152))(v81, v33, v27, &v237);
    sub_20BF4C2D8((uint64_t)&v237);
    if (v232)
    {
      v233 = v232;
      operator delete(v232);
    }
    if (v230)
    {
      v231 = v230;
      operator delete(v230);
    }
    if (v228)
    {
      v229 = v228;
      operator delete(v228);
    }
    if (v226)
    {
      v227 = v226;
      operator delete(v226);
    }
    if (v224)
    {
      v225 = v224;
      operator delete(v224);
    }
    if (v221)
    {
      v222 = (uint64_t)v221;
      operator delete(v221);
    }
    if (v234)
    {
      v235 = (char *)v234;
      operator delete(v234);
    }
    goto LABEL_233;
  }
  v35 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D10, v22, v23);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v35, v36))
  {
    if ((sub_20BF6374C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) == 0)
    {
      if (*(_QWORD *)(a2 + 768))
      {
        v220 = "sdf/textFileFormat.yy";
        v221 = "_SetItemsIfListOp";
        v222 = 1012;
        v223 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<unsigned int>]";
        LOBYTE(v224) = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v220, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) == 0)return;
      }
    }
    v219 = 0;
    v217 = 0u;
    v218 = 0u;
    if (sub_20BF6374C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      v39 = *(_QWORD *)(a2 + 768);
      if ((v39 & 4) != 0)
        v40 = (__int128 *)(*(uint64_t (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
      else
        v40 = *(__int128 **)(a2 + 760);
      sub_20C032F5C((uint64_t)&v217, v40);
    }
    v41 = *(_DWORD *)(a2 + 448);
    v235 = 0;
    v236 = 0;
    v234 = 0;
    sub_20C0333F8(&v234, v219, (uint64_t)v219 + 4 * v217, v217);
    v42 = (_QWORD *)(a2 + 440);
    v43 = (char *)v234;
    v44 = v235 - (_BYTE *)v234;
    if ((unint64_t)(v235 - (_BYTE *)v234) >= 8)
    {
      if ((unint64_t)v44 > 0x2B)
      {
        if (v234 != v235)
        {
          v122 = v44 >> 2;
          v123 = (char *)v234 + 4;
          while (v123 != v235)
          {
            v124 = *((_DWORD *)v123 - 1);
            v125 = *(_DWORD *)v123;
            v123 += 4;
            if (v124 >= v125)
            {
              v220 = 0;
              v221 = 0;
              v222 = 0;
              sub_20BE8B28C(&v220, v234, (uint64_t)v235, v122);
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v126 = (int *)v221;
              v127 = (int *)v220;
              if (v220 != v221)
              {
                v128 = (int *)((char *)v220 + 4);
                while (v128 != v221)
                {
                  v129 = *(v128 - 1);
                  v130 = *v128++;
                  if (v129 == v130)
                  {
                    v127 = v128 - 2;
                    goto LABEL_322;
                  }
                }
                v127 = (int *)v221;
              }
LABEL_322:
              if (v220)
              {
                v221 = v220;
                operator delete(v220);
              }
              if (v127 != v126)
              {
LABEL_325:
                v192 = *v42 & 0xFFFFFFFFFFFFFFF8;
                if (v192)
                {
                  v193 = (const char *)(v192 + 16);
                  if (*(char *)(v192 + 39) < 0)
                    v193 = *(const char **)v193;
                }
                else
                {
                  v193 = "";
                }
                v194 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v195, v196, v193, v194);
                if (v222 >= 0)
                  v197 = (const char *)&v220;
                else
                  v197 = (const char *)v220;
                textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v197);
                if (SHIBYTE(v222) < 0)
                  operator delete(v220);
              }
              break;
            }
          }
        }
      }
      else
      {
LABEL_136:
        while (v43 != v235 - 4)
        {
          v92 = v43;
          v43 += 4;
          if (v43 != v235)
          {
            v93 = *(_DWORD *)v92;
            v94 = v43;
            while (v93 != *(_DWORD *)v94)
            {
              v94 += 4;
              if (v94 == v235)
                goto LABEL_136;
            }
            goto LABEL_325;
          }
        }
      }
    }
    v45 = (uint64_t *)(a2 + 808);
    v46 = sub_20C026788((uint64_t *)(a2 + 808));
    v47 = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)&v237);
    v48 = a2 + 816;
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v46 + 136))(&p_p, v46, v48, v42, v47);
    if (sub_20BFE5014((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
    {
      if ((v251 & 4) != 0)
        v49 = (void ***)(*(uint64_t (**)(void ***))((v251 & 0xFFFFFFFFFFFFFFF8) + 168))(&p_p);
      else
        v49 = (void ***)p_p;
    }
    else
    {
      v49 = &v237;
    }
    sub_20C033524((uint64_t)&v220, (uint64_t)v49);
    sub_20BF4C2D8((uint64_t)&p_p);
    if (__p)
    {
      v249 = __p;
      operator delete(__p);
    }
    if (v246)
    {
      v247 = v246;
      operator delete(v246);
    }
    if (v244)
    {
      v245 = v244;
      operator delete(v244);
    }
    if (v242)
    {
      v243 = v242;
      operator delete(v242);
    }
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetItems((uint64_t)&v220, (uint64_t)&v234, v41);
    v104 = sub_20C026788(v45);
    sub_20C0333B8((char *)&v220, (pxrInternal__aapl__pxrReserved__::VtValue *)&v237);
    (*(void (**)(uint64_t, uint64_t, _QWORD *, void ***))(*(_QWORD *)v104 + 152))(v104, v48, v42, &v237);
    sub_20BF4C2D8((uint64_t)&v237);
    if (v232)
    {
      v233 = v232;
      operator delete(v232);
    }
    if (v230)
    {
      v231 = v230;
      operator delete(v230);
    }
    if (v228)
    {
      v229 = v228;
      operator delete(v228);
    }
    if (v226)
    {
      v227 = v226;
      operator delete(v226);
    }
    if (v224)
    {
      v225 = v224;
      operator delete(v224);
    }
    if (v221)
    {
      v222 = (uint64_t)v221;
      operator delete(v221);
    }
    if (v234)
    {
      v235 = (char *)v234;
      operator delete(v234);
    }
    goto LABEL_233;
  }
  v54 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D20, v37, v38);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v54, v55))
  {
    if ((sub_20C033AF4((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) == 0)
    {
      if (*(_QWORD *)(a2 + 768))
      {
        v220 = "sdf/textFileFormat.yy";
        v221 = "_SetItemsIfListOp";
        v222 = 1012;
        v223 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<uint64_t>]";
        LOBYTE(v224) = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v220, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) == 0)return;
      }
    }
    v219 = 0;
    v217 = 0u;
    v218 = 0u;
    if (sub_20C033AF4((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      v58 = *(_QWORD *)(a2 + 768);
      if ((v58 & 4) != 0)
        v59 = (__int128 *)(*(uint64_t (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
      else
        v59 = *(__int128 **)(a2 + 760);
      sub_20C033B2C((uint64_t)&v217, v59);
    }
    v60 = *(_DWORD *)(a2 + 448);
    v235 = 0;
    v236 = 0;
    v234 = 0;
    sub_20C033FC8(&v234, v219, (uint64_t)&v219[v217], v217);
    v61 = (_QWORD *)(a2 + 440);
    v62 = (char *)v234;
    v63 = v235 - (_BYTE *)v234;
    if ((unint64_t)(v235 - (_BYTE *)v234) >= 0x10)
    {
      if ((unint64_t)v63 > 0x57)
      {
        if (v234 != v235)
        {
          v132 = v63 >> 3;
          v133 = (char *)v234 + 8;
          while (v133 != v235)
          {
            v134 = *((_QWORD *)v133 - 1);
            v135 = *(_QWORD *)v133;
            v133 += 8;
            if (v134 >= v135)
            {
              v220 = 0;
              v221 = 0;
              v222 = 0;
              sub_20BDE1364(&v220, v234, (uint64_t)v235, v132);
              std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
              v136 = (uint64_t *)v221;
              v137 = (uint64_t *)v220;
              if (v220 != v221)
              {
                v138 = (uint64_t *)((char *)v220 + 8);
                while (v138 != v221)
                {
                  v139 = *(v138 - 1);
                  v140 = *v138++;
                  if (v139 == v140)
                  {
                    v137 = v138 - 2;
                    goto LABEL_335;
                  }
                }
                v137 = (uint64_t *)v221;
              }
LABEL_335:
              if (v220)
              {
                v221 = v220;
                operator delete(v220);
              }
              if (v137 != v136)
              {
LABEL_338:
                v198 = *v61 & 0xFFFFFFFFFFFFFFF8;
                if (v198)
                {
                  v199 = (const char *)(v198 + 16);
                  if (*(char *)(v198 + 39) < 0)
                    v199 = *(const char **)v199;
                }
                else
                {
                  v199 = "";
                }
                v200 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v201, v202, v199, v200);
                if (v222 >= 0)
                  v203 = (const char *)&v220;
                else
                  v203 = (const char *)v220;
                textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v203);
                if (SHIBYTE(v222) < 0)
                  operator delete(v220);
              }
              break;
            }
          }
        }
      }
      else
      {
LABEL_191:
        while (v62 != v235 - 8)
        {
          v119 = v62;
          v62 += 8;
          if (v62 != v235)
          {
            v120 = *(_QWORD *)v119;
            v121 = v62;
            while (v120 != *(_QWORD *)v121)
            {
              v121 += 8;
              if (v121 == v235)
                goto LABEL_191;
            }
            goto LABEL_338;
          }
        }
      }
    }
    v64 = (uint64_t *)(a2 + 808);
    v65 = sub_20C026788((uint64_t *)(a2 + 808));
    v66 = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)&v237);
    v67 = a2 + 816;
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v65 + 136))(&p_p, v65, v67, v61, v66);
    if (sub_20BFE508C((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
    {
      if ((v251 & 4) != 0)
        v68 = (void ***)(*(uint64_t (**)(void ***))((v251 & 0xFFFFFFFFFFFFFFF8) + 168))(&p_p);
      else
        v68 = (void ***)p_p;
    }
    else
    {
      v68 = &v237;
    }
    sub_20C0340F4((uint64_t)&v220, (uint64_t)v68);
    sub_20BF4C2D8((uint64_t)&p_p);
    if (__p)
    {
      v249 = __p;
      operator delete(__p);
    }
    if (v246)
    {
      v247 = v246;
      operator delete(v246);
    }
    if (v244)
    {
      v245 = v244;
      operator delete(v244);
    }
    if (v242)
    {
      v243 = v242;
      operator delete(v242);
    }
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetItems((uint64_t)&v220, (uint64_t)&v234, v60);
    v131 = sub_20C026788(v64);
    sub_20C033F88((char *)&v220, (pxrInternal__aapl__pxrReserved__::VtValue *)&v237);
    (*(void (**)(uint64_t, uint64_t, _QWORD *, void ***))(*(_QWORD *)v131 + 152))(v131, v67, v61, &v237);
    sub_20BF4C2D8((uint64_t)&v237);
    if (v232)
    {
      v233 = v232;
      operator delete(v232);
    }
    if (v230)
    {
      v231 = v230;
      operator delete(v230);
    }
    if (v228)
    {
      v229 = v228;
      operator delete(v228);
    }
    if (v226)
    {
      v227 = v226;
      operator delete(v226);
    }
    if (v224)
    {
      v225 = v224;
      operator delete(v224);
    }
    if (v221)
    {
      v222 = (uint64_t)v221;
      operator delete(v221);
    }
    if (v234)
    {
      v235 = (char *)v234;
      operator delete(v234);
    }
LABEL_233:
    sub_20BF5618C((uint64_t)&v217);
    return;
  }
  v82 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D30, v56, v57);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v82, v83))
  {
    if ((sub_20BFED418((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(_QWORD *)(a2 + 768)
      || (v220 = "sdf/textFileFormat.yy",
          v221 = "_SetItemsIfListOp",
          v222 = 1012,
          v223 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrRes"
                 "erved__::SdfListOp<std::string>]",
          LOBYTE(v224) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v220, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      v219 = 0;
      v217 = 0u;
      v218 = 0u;
      if (sub_20BFED418((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        v86 = *(_QWORD *)(a2 + 768);
        if ((v86 & 4) != 0)
          v87 = (__int128 *)(*(uint64_t (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        else
          v87 = *(__int128 **)(a2 + 760);
        sub_20C0346C4((uint64_t)&v217, v87);
      }
      v88 = *(_DWORD *)(a2 + 448);
      v235 = 0;
      v236 = 0;
      v234 = 0;
      sub_20C034BA4((char *)&v234, (__int128 *)v219, (__int128 *)&v219[3 * v217], v217);
      v89 = (_QWORD *)(a2 + 440);
      if (sub_20C1E5634((__int128 **)&v234))
      {
        v90 = *v89 & 0xFFFFFFFFFFFFFFF8;
        if (v90)
        {
          v91 = (const char *)(v90 + 16);
          if (*(char *)(v90 + 39) < 0)
            v91 = *(const char **)v91;
        }
        else
        {
          v91 = "";
        }
        v158 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v159, v160, v91, v158);
        if (v222 >= 0)
          v161 = (const char *)&v220;
        else
          v161 = (const char *)v220;
        textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v161);
        if (SHIBYTE(v222) < 0)
          operator delete(v220);
      }
      v162 = (uint64_t *)(a2 + 808);
      v163 = sub_20C026788((uint64_t *)(a2 + 808));
      v164 = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v237);
      v165 = a2 + 816;
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v163 + 136))(&p_p, v163, v165, v89, v164);
      if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
      {
        if ((v251 & 4) != 0)
          v166 = (void ***)(*(uint64_t (**)(void ***))((v251 & 0xFFFFFFFFFFFFFFF8) + 168))(&p_p);
        else
          v166 = (void ***)p_p;
      }
      else
      {
        v166 = &v237;
      }
      sub_20C02F650((uint64_t)&v220, (uint64_t)v166);
      v167 = (void ***)sub_20BF4C2D8((uint64_t)&p_p);
      p_p = &__p;
      sub_20BDE5038(v167);
      p_p = &v246;
      sub_20BDE5038(&p_p);
      p_p = &v244;
      sub_20BDE5038(&p_p);
      p_p = &v242;
      sub_20BDE5038(&p_p);
      p_p = &v240;
      sub_20BDE5038(&p_p);
      p_p = &v238;
      sub_20BDE5038(&p_p);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetItems((uint64_t *)&v220, (uint64_t)&v234, v88);
      v168 = sub_20C026788(v162);
      sub_20C02F478((char *)&v220, (pxrInternal__aapl__pxrReserved__::VtValue *)&v237);
      (*(void (**)(uint64_t, uint64_t, _QWORD *, void ***))(*(_QWORD *)v168 + 152))(v168, v165, v89, &v237);
      sub_20BF4C2D8((uint64_t)&v237);
      v237 = &v232;
      sub_20BDE5038(&v237);
      v237 = &v230;
      sub_20BDE5038(&v237);
      v237 = &v228;
      sub_20BDE5038(&v237);
      v237 = &v226;
      sub_20BDE5038(&v237);
      v237 = &v224;
      sub_20BDE5038(&v237);
      v237 = &v221;
      sub_20BDE5038(&v237);
      v220 = &v234;
      sub_20BDE5038((void ***)&v220);
      sub_20C008280(&v217);
    }
    return;
  }
  v105 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D40, v84, v85);
  if (!pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v105, v106))
    return;
  if ((sub_20BFED450((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) == 0)
  {
    if (*(_QWORD *)(a2 + 768))
    {
      v220 = "sdf/textFileFormat.yy";
      v221 = "_SetItemsIfListOp";
      v222 = 1012;
      v223 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserve"
             "d__::SdfListOp<TfToken>]";
      LOBYTE(v224) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v220, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) == 0)return;
    }
  }
  v219 = 0;
  v217 = 0u;
  v218 = 0u;
  if (sub_20BFED450((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
  {
    v107 = *(_QWORD *)(a2 + 768);
    if ((v107 & 4) != 0)
      v108 = (__int128 *)(*(uint64_t (**)(uint64_t))((v107 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
    else
      v108 = *(__int128 **)(a2 + 760);
    sub_20C034C28((uint64_t)&v217, v108);
  }
  v109 = *(_DWORD *)(a2 + 448);
  v235 = 0;
  v236 = 0;
  v234 = 0;
  sub_20C035144(&v234, v219, &v219[v217], v217);
  v110 = (_QWORD *)(a2 + 440);
  v112 = (uint64_t *)v234;
  v111 = (uint64_t *)v235;
  v113 = v235 - (_BYTE *)v234;
  if ((unint64_t)(v235 - (_BYTE *)v234) < 0x10)
    goto LABEL_187;
  if ((unint64_t)v113 <= 0x57)
  {
LABEL_257:
    while (v112 != (uint64_t *)(v235 - 8))
    {
      v147 = v112++;
      if (v112 != (uint64_t *)v235)
      {
        v148 = *v147 & 0xFFFFFFFFFFFFFFF8;
        v149 = v112;
        while (v148 != (*v149 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v149 == (uint64_t *)v235)
            goto LABEL_257;
        }
        goto LABEL_357;
      }
    }
    goto LABEL_187;
  }
  if (v234 == v235)
    goto LABEL_187;
  v169 = (uint64_t *)((char *)v234 + 8);
  if ((char *)v234 + 8 == v235)
    goto LABEL_187;
  v170 = v113 >> 3;
  v171 = *(_QWORD *)v234;
  while (1)
  {
    v172 = v171;
    v171 = *v169;
    if (v172)
    {
      if (v171)
        break;
    }
    if (v172 || !v171)
      goto LABEL_347;
LABEL_319:
    if (++v169 == v111)
      goto LABEL_187;
  }
  if (v172 != v171)
  {
    v173 = v172 & 0xFFFFFFFFFFFFFFF8;
    v174 = v171 & 0xFFFFFFFFFFFFFFF8;
    v175 = *(_QWORD *)(v173 + 8);
    v176 = *(_QWORD *)((v171 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v175 < v176)
      goto LABEL_319;
    if (v175 == v176)
    {
      v179 = *(const void **)(v174 + 16);
      v177 = v174 + 16;
      v178 = v179;
      v180 = *(char *)(v177 + 23);
      v183 = *(const void **)(v173 + 16);
      v181 = v173 + 16;
      v182 = v183;
      v184 = *(char *)(v181 + 23);
      if (v184 >= 0)
        v185 = *(unsigned __int8 *)(v181 + 23);
      else
        v185 = *(_QWORD *)(v181 + 8);
      if (v184 >= 0)
        v186 = (const void *)v181;
      else
        v186 = v182;
      if (v180 >= 0)
        v187 = *(unsigned __int8 *)(v177 + 23);
      else
        v187 = *(_QWORD *)(v177 + 8);
      if (v180 >= 0)
        v188 = (const void *)v177;
      else
        v188 = v178;
      if (v187 >= v185)
        v189 = v185;
      else
        v189 = v187;
      v190 = memcmp(v186, v188, v189);
      v191 = v185 < v187;
      if (v190)
        v191 = v190 < 0;
      if (v191)
        goto LABEL_319;
    }
  }
LABEL_347:
  if (v169 - 1 != v111)
  {
    v220 = 0;
    v221 = 0;
    v222 = 0;
    sub_20BFE538C(&v220, v112, v111, v170);
    v204 = 126 - 2 * __clz(((_BYTE *)v221 - (_BYTE *)v220) >> 3);
    if (v221 == v220)
      v205 = 0;
    else
      v205 = v204;
    sub_20C0353A4((uint64_t)v220, (uint64_t *)v221, (uint64_t)&p_p, v205, 1);
    v207 = v220;
    v206 = v221;
    if (v220 == v221)
    {
LABEL_356:
      v237 = &v220;
      sub_20BEEB2B8(&v237);
      if (v207 != v206)
      {
LABEL_357:
        v211 = *v110 & 0xFFFFFFFFFFFFFFF8;
        if (v211)
        {
          v212 = (const char *)(v211 + 16);
          if (*(char *)(v211 + 39) < 0)
            v212 = *(const char **)v212;
        }
        else
        {
          v212 = "";
        }
        v213 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v214, v215, v212, v213);
        if (v222 >= 0)
          v216 = (const char *)&v220;
        else
          v216 = (const char *)v220;
        textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v216);
        if (SHIBYTE(v222) < 0)
          operator delete(v220);
      }
    }
    else
    {
      v208 = (char *)v220 + 8;
      while (v208 != v221)
      {
        v209 = *(v208 - 1) & 0xFFFFFFFFFFFFFFF8;
        v210 = *v208++ & 0xFFFFFFFFFFFFFFF8;
        if (v209 == v210)
        {
          v207 = v208 - 2;
          goto LABEL_356;
        }
      }
      v237 = &v220;
      sub_20BEEB2B8(&v237);
    }
  }
LABEL_187:
  v114 = (uint64_t *)(a2 + 808);
  v115 = sub_20C026788((uint64_t *)(a2 + 808));
  v116 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v237);
  v117 = a2 + 816;
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, _QWORD *, double))(*(_QWORD *)v115 + 136))(&p_p, v115, v117, v110, v116);
  if (sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
  {
    if ((v251 & 4) != 0)
      v118 = (void ***)(*(uint64_t (**)(void ***))((v251 & 0xFFFFFFFFFFFFFFF8) + 168))(&p_p);
    else
      v118 = (void ***)p_p;
  }
  else
  {
    v118 = &v237;
  }
  sub_20C0366AC((uint64_t)&v220, (uint64_t)v118);
  v150 = (void ***)sub_20BF4C2D8((uint64_t)&p_p);
  p_p = &__p;
  sub_20BEEB2B8(v150);
  p_p = &v246;
  sub_20BEEB2B8(&p_p);
  p_p = &v244;
  sub_20BEEB2B8(&p_p);
  p_p = &v242;
  sub_20BEEB2B8(&p_p);
  p_p = &v240;
  sub_20BEEB2B8(&p_p);
  p_p = &v238;
  sub_20BEEB2B8(&p_p);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems((unsigned __int8 *)&v220, (uint64_t **)&v234, v109);
  v151 = sub_20C026788(v114);
  sub_20C035104((char *)&v220, (pxrInternal__aapl__pxrReserved__::VtValue *)&v237);
  (*(void (**)(uint64_t, uint64_t, _QWORD *, void ***))(*(_QWORD *)v151 + 152))(v151, v117, v110, &v237);
  sub_20BF4C2D8((uint64_t)&v237);
  v237 = &v232;
  sub_20BEEB2B8(&v237);
  v237 = &v230;
  sub_20BEEB2B8(&v237);
  v237 = &v228;
  sub_20BEEB2B8(&v237);
  v237 = &v226;
  sub_20BEEB2B8(&v237);
  v237 = &v224;
  sub_20BEEB2B8(&v237);
  v237 = &v221;
  sub_20BEEB2B8(&v237);
  v220 = &v234;
  sub_20BEEB2B8((void ***)&v220);
  sub_20C00918C(&v217);
}

void sub_20C1E5238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1E5634(__int128 **a1)
{
  __int128 *v1;
  __int128 *v2;
  unint64_t v3;
  _BOOL8 v4;
  __int128 *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  int v18;
  size_t v19;
  __int128 *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  const void **v28;
  const void **v29;
  const void **v30;
  int v31;
  const void **v32;
  const void **v33;
  uint64_t v34;
  char v35;
  const void ***v36;

  v2 = *a1;
  v1 = a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (char *)*a1) >> 3);
  if (v3 >= 2)
  {
    if (v3 > 0xA)
    {
      if (v2 != v1)
      {
        v15 = *a1;
        while (1)
        {
          v16 = (__int128 *)((char *)v15 + 24);
          if ((__int128 *)((char *)v15 + 24) == v1)
            break;
          v17 = *((char *)v15 + 47);
          v18 = *((char *)v15 + 23);
          if (v18 >= 0)
            v19 = *((unsigned __int8 *)v15 + 23);
          else
            v19 = *((_QWORD *)v15 + 1);
          if (v18 >= 0)
            v20 = v15;
          else
            v20 = *(__int128 **)v15;
          if (v17 >= 0)
            v21 = *((unsigned __int8 *)v15 + 47);
          else
            v21 = *((_QWORD *)v15 + 4);
          if (v17 >= 0)
            v22 = (char *)v15 + 24;
          else
            v22 = (const void *)*((_QWORD *)v15 + 3);
          if (v21 >= v19)
            v23 = v19;
          else
            v23 = v21;
          v24 = memcmp(v20, v22, v23);
          v25 = v24 >= 0;
          if (!v24)
            v25 = v19 >= v21;
          v15 = v16;
          if (v25)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            sub_20BE78B98((char *)&v32, v2, v1, v3);
            v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v33 - v32));
            if (v33 == v32)
              v27 = 0;
            else
              v27 = v26;
            sub_20BEDAFAC((uint64_t)v32, v33, (uint64_t)&v35, v27, 1);
            v28 = v32;
            v29 = v33;
            if (v32 == v33)
            {
              v29 = v32;
            }
            else
            {
              do
              {
                v30 = v28 + 3;
                if (v28 + 3 == v29)
                  goto LABEL_55;
                v31 = sub_20BEB4EF8((uint64_t)&v36, (unsigned __int8 *)v28, (unsigned __int8 *)v28 + 24);
                v28 = v30;
              }
              while (!v31);
              v29 = v30 - 3;
LABEL_55:
              v28 = v33;
            }
            v4 = v29 != v28;
            v36 = &v32;
            sub_20BDE5038((void ***)&v36);
            return v4;
          }
        }
      }
    }
    else if (v2 != (__int128 *)((char *)v1 - 24))
    {
      while (1)
      {
        v6 = v2;
        v2 = (__int128 *)((char *)v2 + 24);
        if (v2 != v1)
          break;
LABEL_25:
        v4 = 0;
        if (v2 == (__int128 *)((char *)v1 - 24))
          return v4;
      }
      v7 = *((unsigned __int8 *)v6 + 23);
      v8 = *((_QWORD *)v6 + 1);
      if ((v7 & 0x80u) == 0)
        v9 = *((unsigned __int8 *)v6 + 23);
      else
        v9 = *((_QWORD *)v6 + 1);
      v10 = v2;
      while (1)
      {
        v11 = *((unsigned __int8 *)v10 + 23);
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)v10 + 1);
        if (v9 == v11)
        {
          if (v12 >= 0)
            v13 = v10;
          else
            v13 = *(__int128 **)v10;
          if ((v7 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v6, v13, v8))
              return 1;
          }
          else
          {
            if (!(_DWORD)v7)
              return 1;
            v14 = 0;
            while (*((unsigned __int8 *)v6 + v14) == *((unsigned __int8 *)v13 + v14))
            {
              if (v7 == ++v14)
                return 1;
            }
          }
        }
        v10 = (__int128 *)((char *)v10 + 24);
        if (v10 == v1)
          goto LABEL_25;
      }
    }
  }
  return 0;
}

void sub_20C1E587C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C1E5894(_QWORD *a1, int a2, char **a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  double v13;
  uint64_t *v14;
  void ***p_p_p;
  char *v16;
  uint64_t v17;
  char *v18;
  void ***v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  const char *Text;
  const char *v34;
  char *v35;
  const char *v36;
  void *__p;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **p_p;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void ***v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  v9 = a3[1];
  v10 = v9 - *a3;
  if (v10 >= 0x10)
  {
    if (v10 > 0x57)
    {
      if (v8 != v9)
      {
        while (1)
        {
          v21 = v8 + 8;
          if (v8 + 8 == v9)
            break;
          v22 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 8));
          v8 = v21;
          if ((v22 & 1) == 0)
          {
            v9 = v21 - 8;
            break;
          }
        }
        v23 = a3[1];
        if (v9 != v23)
        {
          __p = 0;
          v38 = 0;
          v39 = 0;
          sub_20BFD6D38(&__p, *a3, v23, (v23 - *a3) >> 3);
          v24 = 126 - 2 * __clz((v38 - (_BYTE *)__p) >> 3);
          if (v38 == __p)
            v25 = 0;
          else
            v25 = v24;
          sub_20C028540((uint64_t)__p, (int *)v38, (uint64_t)&v52, v25, 1);
          v27 = (char *)__p;
          v26 = v38;
          if (__p == v38)
          {
LABEL_27:
            p_p = &__p;
            sub_20BFD6F90(&p_p);
            if (v27 != v26)
            {
LABEL_28:
              v31 = *a1 & 0xFFFFFFFFFFFFFFF8;
              if (v31)
              {
                v32 = (const char *)(v31 + 16);
                if (*(char *)(v31 + 39) < 0)
                  v32 = *(const char **)v32;
              }
              else
              {
                v32 = "";
              }
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v34, v35, v32, Text);
              if (v39 >= 0)
                v36 = (const char *)&__p;
              else
                v36 = (const char *)__p;
              textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a4, v36);
              if (SHIBYTE(v39) < 0)
                operator delete(__p);
            }
          }
          else
          {
            v28 = (int *)((char *)__p + 8);
            while (v28 != (int *)v38)
            {
              v29 = *((_QWORD *)v28 - 1);
              v30 = *(_QWORD *)v28;
              v28 += 2;
              if (v29 == v30)
              {
                v27 = (char *)(v28 - 4);
                goto LABEL_27;
              }
            }
            p_p = &__p;
            sub_20BFD6F90(&p_p);
          }
        }
      }
    }
    else
    {
LABEL_6:
      while (v8 != v9 - 8)
      {
        v16 = v8;
        v8 += 8;
        if (v8 != v9)
        {
          v17 = *(_QWORD *)v16;
          v18 = v8;
          while (v17 != *(_QWORD *)v18)
          {
            v18 += 8;
            if (v18 == v9)
              goto LABEL_6;
          }
          goto LABEL_28;
        }
      }
    }
  }
  v11 = a4 + 101;
  v12 = sub_20C026788(a4 + 101);
  v13 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&p_p);
  v14 = a4 + 102;
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, _QWORD *, double))(*(_QWORD *)v12 + 136))(&v52, v12, v14, a1, v13);
  if (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v52))
  {
    if ((v53 & 4) != 0)
      p_p_p = (void ***)(*(uint64_t (**)(void ****))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(&v52);
    else
      p_p_p = v52;
  }
  else
  {
    p_p_p = &p_p;
  }
  sub_20BFD6BC4((uint64_t)&__p, (uint64_t)p_p_p);
  v19 = (void ***)sub_20BF4C2D8((uint64_t)&v52);
  v52 = (void ***)&v51;
  sub_20BFD6F90(v19);
  v52 = (void ***)&v50;
  sub_20BFD6F90((void ***)&v52);
  v52 = (void ***)&v49;
  sub_20BFD6F90((void ***)&v52);
  v52 = (void ***)&v48;
  sub_20BFD6F90((void ***)&v52);
  v52 = (void ***)&v47;
  sub_20BFD6F90((void ***)&v52);
  v52 = (void ***)&v46;
  sub_20BFD6F90((void ***)&v52);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetItems(&__p, (_DWORD **)a3, a2);
  v20 = sub_20C026788(v11);
  sub_20C02842C((char *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, void ***))(*(_QWORD *)v20 + 152))(v20, v14, a1, &p_p);
  sub_20BF4C2D8((uint64_t)&p_p);
  p_p = (void **)&v44;
  sub_20BFD6F90(&p_p);
  p_p = (void **)&v43;
  sub_20BFD6F90(&p_p);
  p_p = (void **)&v42;
  sub_20BFD6F90(&p_p);
  p_p = (void **)&v41;
  sub_20BFD6F90(&p_p);
  p_p = (void **)&v40;
  sub_20BFD6F90(&p_p);
  p_p = (void **)&v38;
  sub_20BFD6F90(&p_p);
}

void sub_20C1E5C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **p_p)
{
  p_p = &__p;
  sub_20BFD6F90(&p_p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E5CB8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  void **v10;

  v10 = (void **)(a1 + 944);
  sub_20BF3DFA8(&v10);
  v10 = (void **)(a1 + 920);
  sub_20BDE5038(&v10);
  v10 = (void **)(a1 + 896);
  sub_20C1E5EC0(&v10);
  v10 = (void **)(a1 + 872);
  sub_20C1E5EC0(&v10);
  sub_20BF4C2D8(a1 + 848);
  sub_20BF4C2D8(a1 + 832);
  v2 = *(_QWORD *)(a1 + 824);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 820));
  sub_20BFD265C((_DWORD *)(a1 + 816));
  sub_20C0218E4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 808));
  v10 = (void **)(a1 + 776);
  sub_20C0216CC(&v10);
  sub_20BF4C2D8(a1 + 760);
  sub_20C0214F8(a1 + 456);
  v5 = *(_QWORD *)(a1 + 440);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  sub_20BFE4CE8(a1 + 416, *(_QWORD **)(a1 + 424));
  v10 = (void **)(a1 + 392);
  sub_20C021818(&v10);
  v10 = (void **)(a1 + 368);
  sub_20C021740(&v10);
  v10 = (void **)(a1 + 344);
  sub_20BFD6F90(&v10);
  v10 = (void **)(a1 + 320);
  sub_20BFD6F90(&v10);
  v10 = (void **)(a1 + 288);
  sub_20BFD6F90(&v10);
  v10 = (void **)(a1 + 264);
  sub_20BFD6F90(&v10);
  if (*(_BYTE *)(a1 + 256))
  {
    v10 = (void **)(a1 + 232);
    sub_20BFD6F90(&v10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 220));
  sub_20BFD265C((_DWORD *)(a1 + 216));
  sub_20BFED2B4(a1 + 184, *(_QWORD **)(a1 + 192));
  v10 = (void **)(a1 + 160);
  sub_20BEEB2B8(&v10);
  v8 = *(void **)(a1 + 136);
  if (v8)
  {
    *(_QWORD *)(a1 + 144) = v8;
    operator delete(v8);
  }
  v10 = (void **)(a1 + 112);
  sub_20BDE5038(&v10);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C1E5EC0(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_20BEEB2B8(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C1E5F30(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1E5FA4((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1E5FA4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C1E6044((uint64_t)v11);
  return v9;
}

uint64_t sub_20C1E6044(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1E6078(a1);
  return a1;
}

void sub_20C1E6078(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_20BEEB2B8(&v3);
    v1 += 3;
  }
}

void **sub_20C1E60C0(void **a1)
{
  sub_20C1E60F0((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C1E60F0(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_20BEEB2B8(&v5);
  }
}

uint64_t sub_20C1E614C()
{
  return 1;
}

uint64_t sub_20C1E6154()
{
  return 0;
}

uint64_t sub_20C1E615C()
{
  return 1;
}

uint64_t sub_20C1E6164()
{
  return 1;
}

uint64_t sub_20C1E6170()
{
  return 0;
}

_QWORD *sub_20C1E617C(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20C1E618C()
{
  return &unk_24C527B78;
}

uint64_t sub_20C1E6198()
{
  return 0;
}

uint64_t sub_20C1E61A0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C1E61AC()
{
  return 0;
}

uint64_t sub_20C1E61B4()
{
  return 0;
}

BOOL sub_20C1E61BC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB0C148 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C1E61F4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B78, a2, a3);
}

void *sub_20C1E6214()
{
  return &unk_24C527B78;
}

void sub_20C1E6224(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = (char *)&off_24C52AE00 + 3;
}

__n128 sub_20C1E6240(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52AEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C1E627C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52AEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C1E62A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20C1E62A8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52AF50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C1E62E4()
{
  return &unk_24C52AF50;
}

_QWORD *sub_20C1E62F0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C1E6458(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

void sub_20C1E6464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  char v9;

  sub_20BDDC0E4(v8, "NDR_DISCOVERY");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF68, 0, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v0 = sub_20C1E66D8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "NDR_DISCOVERY", "Diagnostics from discovering nodes for Node Definition Registry");
  sub_20BDDC0E4(v8, "NDR_PARSING");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF68, 1, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v1 = sub_20C1E66D8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "NDR_PARSING", "Diagnostics from parsing nodes for Node Definition Registry");
  sub_20BDDC0E4(v8, "NDR_INFO");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF68, 2, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v2 = sub_20C1E66D8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "NDR_INFO", "Advisory information for Node Definition Registry");
  sub_20BDDC0E4(v8, "NDR_STATS");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF68, 3, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v3 = sub_20C1E66D8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "NDR_STATS", "Statistics for registries derived from NdrRegistry");
  sub_20BDDC0E4(v8, "NDR_DEBUG");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF68, 4, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v4 = sub_20C1E66D8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "NDR_DEBUG", "Advanced debugging for Node Definition Registry");
}

void sub_20C1E669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1E66D8()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C5F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C5F8))
  {
    v2 = operator new(0x14uLL);
    *v2 = 0;
    v2[1] = 0;
    *((_DWORD *)v2 + 4) = 0;
    qword_25473C5F0 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473C5F8);
  }
  return qword_25473C5F0;
}

void sub_20C1E673C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473C5F8);
  _Unwind_Resume(a1);
}

void sub_20C1E6758()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "NdrVersionFilterDefaultOnly");
  sub_20BDDC0E4(__p, "DefaultOnly");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF78, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "NdrVersionFilterAllVersions");
  sub_20BDDC0E4(__p, "AllVersions");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52AF78, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C1E6828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::NdrVersion *pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion(pxrInternal__aapl__pxrReserved__::NdrVersion *this, int a2, int a3)
{
  _QWORD v5[4];
  char v6;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_BYTE *)this + 8) = 0;
  if ((a3 | a2) <= 0)
  {
    *((_BYTE *)this + 8) = 0;
    *(_QWORD *)this = 0;
    v5[0] = "ndr/declare.cpp";
    v5[1] = "NdrVersion";
    v5[2] = 83;
    v5[3] = "pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion(int, int)";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid version %d.%d: both components must be non-negative and at least one non-zero", a2, a3);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion(uint64_t a1, uint64_t a2)
{
  char v3;

  *(_QWORD *)a1 = sub_20C1E691C(a2);
  *(_BYTE *)(a1 + 8) = v3;
  return a1;
}

{
  char v3;

  *(_QWORD *)a1 = sub_20C1E691C(a2);
  *(_BYTE *)(a1 + 8) = v3;
  return a1;
}

uint64_t sub_20C1E691C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  std::string __str;
  const char *v11;
  char v12;
  size_t v13;
  size_t __idx;
  uint64_t v15;
  int v16;
  char v17;

  __idx = 0;
  v2 = std::stoi((const std::string *)a1, &__idx, 10);
  v3 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (__idx == v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
    if (__idx == v3)
    {
LABEL_3:
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&v15, v2, 0);
      return v15;
    }
  }
  if (__idx >= v4)
    goto LABEL_16;
  v5 = (v3 & 0x80u) == 0 ? a1 : *(_QWORD *)a1;
  if (*(_BYTE *)(v5 + __idx) != 46)
    goto LABEL_16;
  v13 = 0;
  std::string::basic_string(&__str, (const std::string *)a1, __idx + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
  v6 = std::stoi(&__str, &v13, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  if (__idx + v13 + 1 == v7)
  {
    pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&v15, v2, v6);
  }
  else
  {
LABEL_16:
    v16 = 0;
    v15 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"ndr/declare.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ParseVersionString";
    __str.__r_.__value_.__r.__words[2] = 70;
    v11 = "NdrVersion pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParseVersionString(const std::string &)";
    v12 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__str, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid version string '%s'", v8);
  }
  return v15;
}

void pxrInternal__aapl__pxrReserved__::NdrVersion::GetString(pxrInternal__aapl__pxrReserved__::NdrVersion *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string __p;
  std::string v13;
  std::string v14;

  v4 = *(_DWORD *)this;
  v5 = *((_DWORD *)this + 1);
  if (v4)
  {
    if (!v5)
    {
      std::to_string(a2, v4);
      return;
    }
  }
  else if (!v5)
  {
    sub_20BDDC0E4(a2, "<invalid version>");
    return;
  }
  std::to_string(&v13, v4);
  v6 = std::string::append(&v13, ".");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_20C1E6C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::NdrVersion::GetStringSuffix(pxrInternal__aapl__pxrReserved__::NdrVersion *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  int v5;
  std::string::const_iterator v6;
  std::string::const_iterator v7;
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string __p;
  std::string v15;
  std::string v16;
  std::string v17;

  if (*((_BYTE *)this + 8))
    goto LABEL_2;
  v4 = *(_DWORD *)this;
  v5 = *((_DWORD *)this + 1);
  if (v4)
  {
    if (!v5)
    {
      std::to_string(&v17, v4);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v17;
      else
        v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17.__r_.__value_.__r.__words[0];
      std::string::insert(&v17, v6, 95);
      *a2 = v17;
      return;
    }
  }
  else if (!v5)
  {
LABEL_2:
    sub_20BDDC0E4(a2, "");
    return;
  }
  std::to_string(&v15, v4);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v15;
  else
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)v15.__r_.__value_.__r.__words[0];
  std::string::insert(&v15, v7, 95);
  v16 = v15;
  memset(&v15, 0, sizeof(v15));
  v8 = std::string::append(&v16, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v17, (const std::string::value_type *)p_p, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20C1E6E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C1E6E88()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52AF78, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52AF78, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1E6F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_24C52AF98;
  return this;
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(unsigned int **this, const void *a2)
{
  sub_20BEBCE60(this + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)this);
}

uint64_t *sub_20C1E6FD8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1E7094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E70D8()
{
  uint64_t *v0;

  v0 = sub_20C1E789C();
  return sub_20C1E79BC(v0);
}

void sub_20C1E70EC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS);
  }
}

void sub_20C1E7130()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS);
  }
}

void sub_20C1E7174()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS);
  }
}

pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  _BYTE *v7;
  void *__p[2];
  char v10;
  __int128 v11;
  uint64_t v12;
  void **v13;

  v2 = pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)this);
  *(_QWORD *)v2 = &off_24C52B000;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t *)(v2 + 24);
  v4 = (uint64_t *)(v2 + 48);
  *(_QWORD *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v5 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS);
  if (!v5)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS);
    v5 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS);
  }
  sub_20BDDC0E4(__p, ":");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v5, (char *)__p, (uint64_t *)&v11);
  sub_20BE7598C(v3);
  *(_OWORD *)((char *)this + 24) = v11;
  *((_QWORD *)this + 5) = v12;
  v12 = 0;
  v11 = 0uLL;
  v13 = (void **)&v11;
  sub_20BDE5038(&v13);
  if (v10 < 0)
    operator delete(__p[0]);
  v6 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS);
  if (!v6)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS);
    v6 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS);
  }
  sub_20BDDC0E4(__p, ":");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v6, (char *)__p, (uint64_t *)&v11);
  sub_20BE7598C(v4);
  *((_OWORD *)this + 3) = v11;
  *((_QWORD *)this + 8) = v12;
  v12 = 0;
  v11 = 0uLL;
  v13 = (void **)&v11;
  sub_20BDE5038(&v13);
  if (v10 < 0)
    operator delete(__p[0]);
  v7 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS);
  if (!v7)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS);
    v7 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS);
  }
  *((_BYTE *)this + 72) = *v7;
  return this;
}

void sub_20C1E735C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;

  v18 = *(_QWORD **)(v16 + 104);
  if (v18 == (_QWORD *)(v16 + 80))
  {
    v19 = 4;
    v18 = (_QWORD *)(v16 + 80);
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_20BDE5038((void ***)&a16);
  sub_20BDE5038((void ***)&a16);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin((unsigned int **)v16, v20);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *v4;

  v4 = pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(a1);
  sub_20C017E4C((_QWORD *)v4 + 10, a2);
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *v4;

  v4 = pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(a1);
  sub_20C017E4C((_QWORD *)v4 + 10, a2);
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::DiscoverNodes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(a1 + 72);
  v11[0] = &unk_24C52B0A0;
  v11[1] = pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier;
  v12 = v11;
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverNodes((char *)(a1 + 24), a1 + 48, v5, a2, (uint64_t)v11, a3);
  result = v12;
  if (v12 == v11)
  {
    v7 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if (*(_QWORD *)(a1 + 104))
  {
    v8 = *a3;
    for (i = *a3; i != a3[1]; i += 216)
    {
      v10 = *(_QWORD *)(a1 + 104);
      if (!v10)
        sub_20BE9E974();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, i))
      {
        if (i != v8)
          sub_20C1E75E4(v8, i);
        v8 += 216;
      }
    }
    return (_QWORD *)sub_20C1E7810((uint64_t)a3, v8, i);
  }
  return result;
}

void sub_20C1E7590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E7E2C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E75E4(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void **v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void **v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  void **v23;
  __int128 v24;
  void **v25;
  __int128 v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;

  if (a2 != a1)
  {
    if ((*(_QWORD *)a1 & 7) != 0)
    {
      v4 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (void **)(a1 + 24);
  v8 = (__int128 *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v7);
  v9 = *v8;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v7 = v9;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (a2 != a1)
  {
    v10 = *(_QWORD *)(a1 + 48);
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v13 = *(_QWORD *)(a1 + 56);
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v16 = *(_QWORD *)(a1 + 64);
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v19 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v19);
  v20 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)v19 = v20;
  *(_BYTE *)(a2 + 95) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  v21 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v21);
  v22 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)v21 = v22;
  *(_BYTE *)(a2 + 119) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  v23 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v23);
  v24 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)v23 = v24;
  *(_BYTE *)(a2 + 143) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  sub_20C1E7B70(a1 + 144, (uint64_t *)(a2 + 144));
  v25 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*v25);
  v26 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)v25 = v26;
  *(_BYTE *)(a2 + 207) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (a2 != a1)
  {
    v27 = *(_QWORD *)(a1 + 208);
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 208) = 0;
  }
  return a1;
}

uint64_t sub_20C1E7810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    sub_20C1E7FEC(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
        v7 = sub_20C1E7E9C(v7 - 216);
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_20C1E7880(uint64_t a1)
{
  void *v1;

  sub_20C1E7CEC(a1);
  operator delete(v1);
}

uint64_t sub_20C1E7894(uint64_t a1)
{
  return a1 + 24;
}

uint64_t *sub_20C1E789C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1E7A44((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C1E7970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E79BC(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C52B048;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C1E7A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C1E7A44(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C1E7AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1E7AD8(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1E7AEC@<X0>(pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C1E7B44(&v4);
}

void sub_20C1E7B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1E7B44(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20C1E7B70(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_20C1E7C10(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_20C1E7C10(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C1E7C64(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20C1E7C64(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C1E7CA0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C1E7CA0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

void sub_20C1E7CEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void **v6;

  v2 = (_QWORD *)(a1 + 80);
  v3 = *(_QWORD **)(a1 + 104);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v6 = (void **)(a1 + 48);
  sub_20BDE5038(&v6);
  v6 = (void **)(a1 + 24);
  sub_20BDE5038(&v6);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin((unsigned int **)a1, v5);
}

_QWORD *sub_20C1E7D70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C52B0A0;
  result[1] = v3;
  return result;
}

uint64_t sub_20C1E7DA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C52B0A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C1E7DC8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, *a3, *a4, *a5);
}

uint64_t sub_20C1E7DE4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52B120))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C1E7E20()
{
  return &unk_24C52B120;
}

void sub_20C1E7E2C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_20C1E7E9C(v4 - 216);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C1E7E9C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 208);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  sub_20C1E7FB4(a1 + 144);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 64);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 56);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 48);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v14 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  return a1;
}

uint64_t sub_20C1E7FB4(uint64_t a1)
{
  void *v2;

  sub_20C1E7C64(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_20C1E7FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C1E75E4(a3, v4);
      v4 += 216;
      a3 += 216;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier(pxrInternal__aapl__pxrReserved__ *this, std::string *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::NdrVersion *a5)
{
  uint64_t *EmptyString;
  std::string::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  std::string *v15;
  std::string *v16;
  unint64_t v17;
  int v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  _BOOL4 v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  std::string __p;
  const char *v44;
  char v45;
  std::string *v46;
  std::string *v47;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)EmptyString, "_", &v46);
  if (v46 == v47)
    goto LABEL_42;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
  v10 = a2->__r_.__value_.__r.__words[0];
  if (&__p != a2)
  {
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v10 = 0;
    a2->__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
  }
  if ((v10 & 7) != 0)
  {
    v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = v46;
  v16 = v47;
  v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3);
  if (v17 == 2)
  {
    if (sub_20C1E8454((unsigned __int8 *)&v47[-1]))
    {
      v18 = std::stoi(v16 - 1, 0, 10);
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&__p, v18, 0);
      *(_QWORD *)a4 = __p.__r_.__value_.__r.__words[0];
      *((_BYTE *)a4 + 8) = __p.__r_.__value_.__s.__data_[8];
      v19 = a3;
      v20 = (pxrInternal__aapl__pxrReserved__ *)a2;
    }
    else
    {
      *((_BYTE *)a4 + 8) = 0;
      *(_QWORD *)a4 = 0;
      v19 = a3;
      v20 = this;
    }
    sub_20BF32220(v19, v20);
    goto LABEL_36;
  }
  if (v17 != 1)
  {
    v21 = sub_20C1E8454((unsigned __int8 *)&v47[-1]);
    if (!sub_20C1E8454((unsigned __int8 *)&v16[-2]))
    {
      if (!v21)
        goto LABEL_16;
      v29 = std::stoi(v15 + v17 - 1, 0, 10);
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&__p, v29, 0);
      *(_QWORD *)a4 = __p.__r_.__value_.__r.__words[0];
      *((_BYTE *)a4 + 8) = __p.__r_.__value_.__s.__data_[8];
      sub_20BEE380C("_", v46, v47 - 1, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
      v30 = *(_QWORD *)a3;
      v31 = *(_QWORD *)a3 & 7;
      if (&v42 == (uint64_t *)a3)
      {
        if (v31)
        {
          v38 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        goto LABEL_34;
      }
      if (v31)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      goto LABEL_33;
    }
    if (v21)
    {
      v23 = std::stoi(v16 - 2, 0, 10);
      v24 = std::stoi(v47 - 1, 0, 10);
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&__p, v23, v24);
      *(_QWORD *)a4 = __p.__r_.__value_.__r.__words[0];
      *((_BYTE *)a4 + 8) = __p.__r_.__value_.__s.__data_[8];
      sub_20BEE380C("_", v46, v47 - 2, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
      v25 = *(_QWORD *)a3;
      v26 = *(_QWORD *)a3 & 7;
      if (&v42 == (uint64_t *)a3)
      {
        if (v26)
        {
          v40 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        goto LABEL_34;
      }
      if (v26)
      {
        v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
LABEL_33:
      *(_QWORD *)a3 = v42;
      v42 = 0;
LABEL_34:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_36;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"ndr/filesystemDiscoveryHelpers.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"NdrFsHelpersSplitShaderIdentifier";
    __p.__r_.__value_.__r.__words[2] = 183;
    v44 = "BOOL pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier(const TfToken &, TfToken *, TfToken *, NdrVersion *)";
    v45 = 0;
    v35 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
    if (v35)
    {
      v36 = (const char *)(v35 + 16);
      if (*(char *)(v35 + 39) < 0)
        v36 = *(const char **)v36;
    }
    else
    {
      v36 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid shader identifier '%s'.", v22, v36);
LABEL_42:
    v34 = 0;
    goto LABEL_43;
  }
  sub_20BF32220(a2, this);
LABEL_16:
  sub_20BF32220(a3, this);
  *(_QWORD *)a4 = 0;
  *((_BYTE *)a4 + 8) = 0;
LABEL_36:
  v34 = 1;
LABEL_43:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_20BDE5038((void ***)&__p);
  return v34;
}

void sub_20C1E83FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_20C1E8454(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v1 = a1[23];
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (a1[23])
    {
      v2 = a1;
      v3 = a1[23];
      goto LABEL_6;
    }
    return 0;
  }
  v3 = *((_QWORD *)a1 + 1);
  if (!v3)
    return 0;
  v2 = *(unsigned __int8 **)a1;
LABEL_6:
  v4 = &v2[v3];
  while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v2 + 60) & 0x400) != 0)
  {
    ++v2;
    if (!--v3)
    {
      v2 = v4;
      break;
    }
  }
  if ((v1 & 0x80u) == 0)
    v5 = a1;
  else
    v5 = *(unsigned __int8 **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  return v2 == &v5[v1];
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverNodes@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD v19[2];
  int v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[16];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v21 = a4;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v24);
  v11 = operator new(0x30uLL);
  *v11 = &off_24C52B150;
  v11[1] = a6;
  v11[2] = v19;
  v11[3] = a2;
  v11[4] = &v21;
  v11[5] = a5;
  v23 = v11;
  sub_20C1E8644(a1, (uint64_t)v22, a3);
  v16 = v23;
  if (v23 == v22)
  {
    v17 = 4;
    v16 = v22;
    goto LABEL_5;
  }
  if (v23)
  {
    v17 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + 8 * v17))(v16, v12, v13, v14, v15);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v24);
  return sub_20BEB3F28((uint64_t)v19);
}

void sub_20C1E85E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v19)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v20 - 72));
  sub_20BEB3F28((uint64_t)&a9);
  sub_20C1E7E2C(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C1E8644(char *result, uint64_t a2, uint64_t a3)
{
  const char *v3;
  const char *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  char v12[24];
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(const char **)result;
  v4 = (const char *)*((_QWORD *)result + 1);
  if (*(const char **)result != v4)
  {
    while (1)
    {
      result = (char *)pxrInternal__aapl__pxrReserved__::TfIsDir(v3, 0);
      if (!(_DWORD)result)
        goto LABEL_13;
      sub_20BE9E6E8((uint64_t)v12, a2);
      v10[0] = &unk_24C51B780;
      v10[1] = pxrInternal__aapl__pxrReserved__::TfWalkIgnoreErrorHandler;
      v11 = v10;
      pxrInternal__aapl__pxrReserved__::TfWalkDirs(v3, v12, (char *)1, (uint64_t)v10, a3);
      v7 = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      result = v13;
      if (v13 == v12)
      {
        result = v12;
        v9 = 4;
        goto LABEL_12;
      }
      if (v13)
      {
        v9 = 5;
LABEL_12:
        result = (char *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v9))();
      }
LABEL_13:
      v3 += 24;
      if (v3 == v4)
        return result;
    }
    v7 = v10;
    v8 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_20C1E8784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v4 = (va_list)v10;
  if (v10 == (_QWORD *)va)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_20C96B754(v2, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v12);
  v10[0] = &off_24C52B1F8;
  v10[1] = a2;
  v10[2] = a4;
  v11 = v10;
  sub_20C1E8644(a1, (uint64_t)v10, a3);
  v8 = v11;
  if (v11 == v10)
  {
    v9 = 4;
    v8 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v12);
}

void sub_20C1E88A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)va1);
  sub_20BE93030((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C1E88FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C52B150;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20C1E8944(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C52B150;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C1E8974(uint64_t a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t *EmptyString;
  size_t v13;
  std::string *p_p;
  const void *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::NdrVersion *v20;
  char v21;
  const char *v22;
  char *v23;
  unint64_t v24;
  const char *v25;
  char v26;
  char *v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  unint64_t v29;
  const char *v30;
  unsigned __int8 **v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t *Resolver;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__ *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  std::string __p;
  const char *v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  std::string v59;
  std::string::size_type v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  unsigned __int8 *v64[2];
  unsigned __int8 v65;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(uint64_t **)(a1 + 24);
    v48 = **(pxrInternal__aapl__pxrReserved__ ***)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    do
    {
      pxrInternal__aapl__pxrReserved__::TfGetExtension(v4, &__p);
      pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)&__p, (uint64_t)v64);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (sub_20C020210(*v9, v9[1], v64) != v9[1])
      {
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a2, v4, &v62);
        pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix(v4, 46, &__p);
        v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v61);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        if (*((char *)EmptyString + 23) >= 0)
          v13 = *((unsigned __int8 *)EmptyString + 23);
        else
          v13 = EmptyString[1];
        sub_20BDF6BDC((uint64_t)&__p, v13 + 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v13)
        {
          if (*((char *)EmptyString + 23) >= 0)
            v15 = EmptyString;
          else
            v15 = (const void *)*EmptyString;
          memmove(p_p, v15, v13);
        }
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v13) = 45;
        if ((v65 & 0x80u) == 0)
          v16 = (const std::string::value_type *)v64;
        else
          v16 = (const std::string::value_type *)v64[0];
        if ((v65 & 0x80u) == 0)
          v17 = v65;
        else
          v17 = (std::string::size_type)v64[1];
        v18 = std::string::append(&__p, v16, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v60 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_20C086844(v8, (unsigned __int8 *)&v59.__r_.__value_.__s.__data_[8], (uint64_t)&v59.__r_.__value_.__l.__size_);
        if ((v21 & 1) != 0)
        {
          v58 = 0;
          v59.__r_.__value_.__r.__words[0] = 0;
          v57 = 0;
          v56 = 0;
          if (*(_QWORD *)(v10 + 24))
            v26 = sub_20C1E9058(v10, (uint64_t)&v61, (uint64_t)&v59, (uint64_t)&v58, (uint64_t)&v56);
          else
            v26 = pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier((pxrInternal__aapl__pxrReserved__ *)&v61, &v59, (pxrInternal__aapl__pxrReserved__::TfToken *)&v58, (pxrInternal__aapl__pxrReserved__::TfToken *)&v56, v20);
          if ((v26 & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
            v50 = v56;
            v51 = 1;
            v28 = v48;
            if (v48)
              v28 = (pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *(**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__ *, uint64_t *))(*(_QWORD *)v48 + 16))(&v49, v48, &v52);
            else
              v49 = 0;
            Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v28);
            pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
            v35 = v7[1];
            if (v35 >= v7[2])
            {
              v36 = sub_20C1E909C(v7, &v61, &v50, &v58, (uint64_t *)&v59, &v52, &v49, &v62, (__int128 *)&__p);
            }
            else
            {
              sub_20C1E9214((pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 2), v35, &v61, &v50, &v58, (uint64_t *)&v59, &v52, &v49, &v62, (__int128 *)&__p);
              v36 = v35 + 216;
              v7[1] = v35 + 216;
            }
            v7[1] = v36;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if ((v49 & 7) != 0)
            {
              v37 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
              do
                v38 = __ldxr(v37);
              while (__stlxr(v38 - 2, v37));
            }
            if ((v52 & 7) != 0)
            {
              v39 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
              do
                v40 = __ldxr(v39);
              while (__stlxr(v40 - 2, v39));
            }
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"ndr/filesystemDiscoveryHelpers.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_FsHelpersExamineFiles";
            __p.__r_.__value_.__r.__words[2] = 96;
            v54 = "BOOL pxrInternal__aapl__pxrReserved__::_FsHelpersExamineFiles(NdrNodeDiscoveryResultVec *, NdrStringSe"
                  "t *, const NdrStringVec &, const NdrDiscoveryPluginContext *, const std::string &, const NdrStringVec "
                  "&, const NdrParseIdentifierFn &)";
            v55 = 0;
            v29 = v61 & 0xFFFFFFFFFFFFFFF8;
            if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v30 = (const char *)(v29 + 16);
              if (*(char *)(v29 + 39) < 0)
                v30 = *(const char **)v30;
            }
            else
            {
              v30 = "";
            }
            v33 = &v62;
            if (v63 < 0)
              v33 = (__int128 *)v62;
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Could not parse the family, name, and version from shader indentifier '%s' for shader file '%s'. Skipping.", v27, v30, v33);
          }
          if ((v58 & 7) != 0)
          {
            v41 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
            do
              v42 = __ldxr(v41);
            while (__stlxr(v42 - 2, v41));
          }
          if ((v59.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v43 = (unsigned int *)(v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v44 = __ldxr(v43);
            while (__stlxr(v44 - 2, v43));
          }
        }
        else if (sub_20C1E8FF8(0))
        {
          v24 = v61 & 0xFFFFFFFFFFFFFFF8;
          if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v25 = (const char *)(v24 + 16);
            if (*(char *)(v24 + 39) < 0)
              v25 = *(const char **)v25;
          }
          else
          {
            v25 = "";
          }
          v31 = v64;
          if ((v65 & 0x80u) != 0)
            v31 = (unsigned __int8 **)v64[0];
          v32 = &v62;
          if (v63 < 0)
            v32 = (__int128 *)v62;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found a duplicate node with identifier [%s] and type [%s] at URI [%s]; ignoring.\n",
            v22,
            v23,
            v25,
            v31,
            v32);
        }
        if (SHIBYTE(v60) < 0)
          operator delete((void *)v59.__r_.__value_.__l.__size_);
        if ((v61 & 7) != 0)
        {
          v45 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        if (v63 < 0)
          operator delete((void *)v62);
      }
      if ((char)v65 < 0)
        operator delete(v64[0]);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return 1;
}

void sub_20C1E8E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;

  if (a23 < 0)
    operator delete(__p);
  if ((a14 & 7) != 0)
  {
    v37 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  if ((a17 & 7) != 0)
  {
    v39 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  if ((a28 & 7) != 0)
  {
    v41 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  if ((a29 & 7) != 0)
  {
    v43 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  if (a35 < 0)
    operator delete(a30);
  v45 = *(_QWORD *)(v35 - 144);
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  if (*(char *)(v35 - 113) < 0)
    operator delete(*(void **)(v35 - 136));
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(exception_object);
}

void sub_20C1E8F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    JUMPOUT(0x20C1E8F90);
  JUMPOUT(0x20C1E8F94);
}

uint64_t sub_20C1E8FB0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52B1D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C1E8FEC()
{
  return &unk_24C52B1D8;
}

BOOL sub_20C1E8FF8(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C1E66D8();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C1E66D8();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C52B1B0[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_20C1E9058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a3;
  v7 = a5;
  v8 = a4;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

uint64_t sub_20C1E909C(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;

  v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684)
    sub_20BDDF694();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11)
    v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v19 = 0x12F684BDA12F684;
  else
    v19 = v11;
  v28 = a1 + 2;
  if (v19)
  {
    v23 = v10;
    v20 = (char *)sub_20C1E9B8C((uint64_t)(a1 + 2), v19);
    v10 = v23;
  }
  else
  {
    v20 = 0;
  }
  v24 = v20;
  v25 = &v20[216 * v10];
  v27 = &v20[216 * v19];
  sub_20C1E9214((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  v26 = v25 + 216;
  sub_20C1E9AF0(a1, &v24);
  v21 = a1[1];
  sub_20C1E9CC4((uint64_t)&v24);
  return v21;
}

void sub_20C1E9200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1E9CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C1E9214(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, __int128 *a9, __int128 *a10)
{
  uint64_t *EmptyString;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 __p;
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  __int128 v24;
  uint64_t v25;

  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v24 = 0uLL;
  v25 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  __p = 0uLL;
  v21 = 0;
  v19 = 0;
  sub_20C1E936C(a2, a3, a4, (__int128 *)EmptyString, a6, a7, a8, a9, a10, &v24, (uint64_t)v22, &__p, &v19);
  if ((v19 & 7) != 0)
  {
    v17 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  sub_20C1E7FB4((uint64_t)v22);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

void sub_20C1E932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  sub_20C96B794((uint64_t)va, (uint64_t)va1, (uint64_t)va2, v7 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E936C(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9, __int128 *a10, uint64_t a11, __int128 *a12, uint64_t *a13)
{
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE *v35;
  __int128 v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;

  v18 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 8) = v21;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 24), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v22 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v22;
  }
  v23 = *a5;
  *(_QWORD *)(a1 + 48) = *a5;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *a6;
  *(_QWORD *)(a1 + 56) = *a6;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      *(_QWORD *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *a7;
  *(_QWORD *)(a1 + 64) = *a7;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      *(_QWORD *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a8 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 72), *(void **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v32 = *a8;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 72) = v32;
  }
  if (*((char *)a9 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 96), *(void **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v33 = *a9;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a9 + 2);
    *(_OWORD *)(a1 + 96) = v33;
  }
  if (*((char *)a10 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 120), *(void **)a10, *((_QWORD *)a10 + 1));
  }
  else
  {
    v34 = *a10;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a10 + 2);
    *(_OWORD *)(a1 + 120) = v34;
  }
  sub_20C1E96B8(a1 + 144, a11);
  v35 = (_BYTE *)(a1 + 184);
  if (*((char *)a12 + 23) < 0)
  {
    sub_20BDDBFAC(v35, *(void **)a12, *((_QWORD *)a12 + 1));
  }
  else
  {
    v36 = *a12;
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a12 + 2);
    *(_OWORD *)v35 = v36;
  }
  v37 = *a13;
  *(_QWORD *)(a1 + 208) = *a13;
  if ((v37 & 7) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 2, v38));
    if ((v39 & 1) == 0)
      *(_QWORD *)(a1 + 208) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_20C1E95B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;

  v7 = v4;
  sub_20C1E7FB4(v7);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v3);
  v9 = *(_QWORD *)(v1 + 64);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = *(_QWORD *)(v1 + 56);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = *(_QWORD *)(v1 + 48);
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if ((*(_QWORD *)v1 & 7) != 0)
  {
    v18 = (unsigned int *)(*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C1E96B8(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20C1E972C(a1, i + 2, i + 2);
  return a1;
}

void sub_20C1E9714(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E7FB4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1E972C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C1E9990(a1, v6, a3, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v21, 0);
  return v10;
}

void sub_20C1E9978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1E9990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C1E9A04(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C1E99EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E9AAC(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1E9A04(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE *v6;
  __int128 v7;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = a1 + 1;
  if (*((char *)a2 + 31) < 0)
  {
    sub_20BDDBFAC(v6, (void *)a2[1], a2[2]);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 1);
    a1[3] = a2[3];
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_20C1E9AAC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C1E7CA0((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C1E9AF0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 216;
      v4 -= 216;
      sub_20C1E9BD4((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_20C1E9B8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685)
    sub_20BDDF5B4();
  return operator new(216 * a2);
}

__n128 sub_20C1E9BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v5 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  v7 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  v8 = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = v8;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v9 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(a2 + 120) = v9;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  sub_20BF20A20(a2 + 144, (uint64_t *)(a3 + 144));
  result = *(__n128 *)(a3 + 184);
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(a3 + 200);
  *(__n128 *)(a2 + 184) = result;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  *(_QWORD *)(a2 + 208) = *(_QWORD *)(a3 + 208);
  *(_QWORD *)(a3 + 208) = 0;
  return result;
}

uint64_t sub_20C1E9CC4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    sub_20C1E7E9C(i - 216);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_20C1E9D18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C52B1F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C1E9D50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C52B1F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C1E9D70(uint64_t a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t *Resolver;
  std::string __str;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  unsigned __int8 *v15[2];
  char v16;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfGetExtension(v4, (std::string *)__p);
      pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)__p, (uint64_t)v15);
      if (SBYTE7(v13) < 0)
        operator delete(__p[0]);
      if (sub_20C020210(**(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v15) != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
      {
        v13 = 0u;
        v14 = 0u;
        *(_OWORD *)__p = 0u;
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a2, v4, &__str);
        if (SBYTE7(v13) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)&v13 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
        pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
        std::string::operator=((std::string *)((char *)&v13 + 8), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        sub_20C1E9F74(*(uint64_t **)(a1 + 16), (__int128 *)__p);
        if (SHIBYTE(v14) < 0)
          operator delete(*((void **)&v13 + 1));
        if (SBYTE7(v13) < 0)
          operator delete(__p[0]);
      }
      if (v16 < 0)
        operator delete(v15[0]);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return 1;
}

void sub_20C1E9EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v27 - 49) < 0)
    operator delete(*(void **)(v27 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1E9F2C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52B258))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C1E9F68()
{
  return &unk_24C52B258;
}

void **sub_20C1E9F74(uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  void *v19[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_20BE6D0B4((uint64_t)result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_20C1EA0DC(a1, v19);
    v10 = a1[1];
    result = sub_20BE94C80(v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_20C1EA0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE94C80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1EA0DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1EA150((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1EA150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_20C1EA204((uint64_t)v13);
  return a6;
}

uint64_t sub_20C1EA204(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE94C30((uint64_t *)a1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9, uint64_t a10, uint64_t a11, __int128 *a12)
{
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)a1 = off_24C52B278;
  v17 = *a2;
  *(_QWORD *)(a1 + 16) = *a2;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *a3;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 24) = v20;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 40), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v21 = *a4;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 40) = v21;
  }
  v22 = *a5;
  *(_QWORD *)(a1 + 64) = *a5;
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      *(_QWORD *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  v25 = *a6;
  *(_QWORD *)(a1 + 72) = *a6;
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 2, v26));
    if ((v27 & 1) == 0)
      *(_QWORD *)(a1 + 72) &= 0xFFFFFFFFFFFFFFF8;
  }
  v28 = *a7;
  *(_QWORD *)(a1 + 80) = *a7;
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 2, v29));
    if ((v30 & 1) == 0)
      *(_QWORD *)(a1 + 80) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a8 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 88), *(void **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v31 = *a8;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 88) = v31;
  }
  if (*((char *)a9 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 112), *(void **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v32 = *a9;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a9 + 2);
    *(_OWORD *)(a1 + 112) = v32;
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a10;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a10 + 16);
  *(_QWORD *)a10 = 0;
  *(_QWORD *)(a10 + 8) = 0;
  *(_QWORD *)(a10 + 16) = 0;
  sub_20C1E96B8(a1 + 160, a11);
  if (*((char *)a12 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 200), *(void **)a12, *((_QWORD *)a12 + 1));
  }
  else
  {
    v33 = *a12;
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a12 + 2);
    *(_OWORD *)(a1 + 200) = v33;
  }
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v34 = *(_QWORD *)(a1 + 136);
  v35 = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(a1 + 8) = v34 != v35;
  v36 = v35 - v34;
  if (v36)
  {
    v37 = 0;
    v38 = v36 >> 3;
    if (v38 <= 1)
      v39 = 1;
    else
      v39 = v38;
    do
    {
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v37);
      v41 = (uint64_t *)(v40 + 8);
      if (*(_BYTE *)(v40 + 40))
      {
        v42 = *(uint64_t **)(a1 + 336);
        if ((unint64_t)v42 >= *(_QWORD *)(a1 + 344))
        {
          v46 = sub_20BFCA068((char **)(a1 + 328), (uint64_t *)(v40 + 8));
        }
        else
        {
          v43 = *v41;
          *v42 = *v41;
          if ((v43 & 7) != 0)
          {
            v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 2, v44));
            if ((v45 & 1) == 0)
              *v42 &= 0xFFFFFFFFFFFFFFF8;
          }
          v46 = (char *)(v42 + 1);
        }
        *(_QWORD *)(a1 + 336) = v46;
        v52 = *v41;
        v63 = v52;
        if ((v52 & 7) != 0)
        {
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 2, v53));
          if ((v54 & 1) == 0)
            v63 &= 0xFFFFFFFFFFFFFFF8;
        }
        v64 = v40;
        sub_20BF2D7C8(a1 + 288, &v63, &v63);
        if ((v63 & 7) != 0)
        {
          v55 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v56 = __ldxr(v55);
          while (__stlxr(v56 - 2, v55));
        }
      }
      else
      {
        v47 = *(uint64_t **)(a1 + 272);
        if ((unint64_t)v47 >= *(_QWORD *)(a1 + 280))
        {
          v51 = sub_20BFCA068((char **)(a1 + 264), (uint64_t *)(v40 + 8));
        }
        else
        {
          v48 = *v41;
          *v47 = *v41;
          if ((v48 & 7) != 0)
          {
            v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 2, v49));
            if ((v50 & 1) == 0)
              *v47 &= 0xFFFFFFFFFFFFFFF8;
          }
          v51 = (char *)(v47 + 1);
        }
        *(_QWORD *)(a1 + 272) = v51;
        v57 = *v41;
        v63 = v57;
        if ((v57 & 7) != 0)
        {
          v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 2, v58));
          if ((v59 & 1) == 0)
            v63 &= 0xFFFFFFFFFFFFFFF8;
        }
        v64 = v40;
        sub_20BF2D7C8(a1 + 224, &v63, &v63);
        if ((v63 & 7) != 0)
        {
          v60 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v61 = __ldxr(v60);
          while (__stlxr(v61 - 2, v60));
        }
      }
      ++v37;
    }
    while (v37 != v39);
  }
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_20C1EA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, void **a5, void **a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  va_list va;

  va_start(va, a7);
  sub_20C1E7FB4(a7);
  sub_20C086448((void ***)va);
  if (*(char *)(v7 + 135) < 0)
    operator delete(*a4);
  if (*(char *)(v7 + 111) < 0)
    operator delete(*a5);
  v9 = *(_QWORD *)(v7 + 80);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = *(_QWORD *)(v7 + 72);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = *(_QWORD *)(v7 + 64);
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (*(char *)(v7 + 63) < 0)
    operator delete(*a6);
  v18 = *(_QWORD *)(v7 + 16);
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode(void **this)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void **v14;

  *this = off_24C52B278;
  v14 = this + 41;
  sub_20BEEB2B8(&v14);
  sub_20BF20BCC((uint64_t)(this + 36));
  v14 = this + 33;
  sub_20BEEB2B8(&v14);
  sub_20BF20BCC((uint64_t)(this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  sub_20C1E7FB4((uint64_t)(this + 20));
  v14 = this + 17;
  sub_20C086448(&v14);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = (unint64_t)this[10];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (unint64_t)this[9];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = (unint64_t)this[8];
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v11 = (unint64_t)this[2];
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::NdrNode::GetInfoString(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  uint64_t *EmptyString;
  unint64_t v3;
  const char *v4;
  const char *v5;
  char *v6;
  std::string *p_p;
  unint64_t v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string __p;

  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  if (*((char *)EmptyString + 23) < 0)
    EmptyString = (uint64_t *)*EmptyString;
  v3 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0)
      v4 = *(const char **)v4;
  }
  else
  {
    v4 = "";
  }
  pxrInternal__aapl__pxrReserved__::NdrVersion::GetString((pxrInternal__aapl__pxrReserved__::NdrNode *)((char *)this + 24), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v8)
  {
    v9 = (const char *)(v8 + 16);
    if (*(char *)(v8 + 39) < 0)
      v9 = *(const char **)v9;
  }
  else
  {
    v9 = "";
  }
  v10 = (_QWORD *)((char *)this + 88);
  if (*((char *)this + 111) < 0)
    v10 = (_QWORD *)*v10;
  v11 = (_QWORD *)((char *)this + 112);
  if (*((char *)this + 135) < 0)
    v11 = (_QWORD *)*v11;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (context: '%s', version: '%s', family: '%s'); definition URI: '%s'; implementation URI: '%s'",
    v5,
    v6,
    EmptyString,
    v4,
    p_p,
    v9,
    v10,
    v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C1EAA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return (uint64_t)this + 264;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return (uint64_t)this + 328;
}

_QWORD *pxrInternal__aapl__pxrReserved__::NdrNode::GetInput(pxrInternal__aapl__pxrReserved__::NdrNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)this + 28, a2);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::NdrNode::GetOutput(pxrInternal__aapl__pxrReserved__::NdrNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)this + 36, a2);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetMetadata(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return (uint64_t)this + 160;
}

uint64_t sub_20C1EAB08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

_QWORD *pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(_QWORD *this)
{
  *this = off_24C52B2B8;
  this[1] = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::NdrParserPlugin::~NdrParserPlugin(unsigned int **this, const void *a2)
{
  sub_20BEBCE60(this + 1, a2);
}

void pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 __p;
  uint64_t v10;
  _OWORD v11[2];
  int v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v4 = operator new(0x160uLL);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v15, "unknown discovery type");
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v14, "unknown source type");
  memset(v13, 0, sizeof(v13));
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  __p = 0uLL;
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode((uint64_t)v4, (uint64_t *)a1, (uint64_t *)(a1 + 8), (__int128 *)(a1 + 24), (uint64_t *)(a1 + 48), &v15, &v14, (__int128 *)(a1 + 96), (__int128 *)(a1 + 96), (uint64_t)v13, (uint64_t)v11, &__p);
  *a2 = v4;
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  sub_20C1E7FB4((uint64_t)v11);
  *(_QWORD *)&v11[0] = v13;
  sub_20C086448((void ***)v11);
  if ((v14 & 7) != 0)
  {
    v5 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C1EAC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;

  if (a19 < 0)
    operator delete(__p);
  sub_20C1E7FB4((uint64_t)&a20);
  a20 = v21 - 72;
  sub_20C086448((void ***)&a20);
  v23 = *(_QWORD *)(v21 - 48);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(v21 - 40);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1EAD00()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C1EADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrProperty::NdrProperty(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  v13 = *a2;
  *(_QWORD *)a1 = off_24C52B318;
  *(_QWORD *)(a1 + 8) = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C6D0((_QWORD *)(a1 + 24), a4);
  *(_BYTE *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  *(_BYTE *)(a1 + 56) = a7;
  *(_BYTE *)(a1 + 57) = 1;
  sub_20C1E96B8(a1 + 64, a8);
  return a1;
}

void sub_20C1EAEE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  sub_20BF4C2D8(v2);
  v4 = *(_QWORD *)(v1 + 16);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = *(_QWORD *)(v1 + 8);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty(pxrInternal__aapl__pxrReserved__::NdrProperty *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)this = off_24C52B318;
  sub_20C1E7FB4((uint64_t)this + 64);
  sub_20BF4C2D8((uint64_t)this + 24);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::NdrProperty::GetInfoString(pxrInternal__aapl__pxrReserved__::NdrProperty *this, const char *a2, char *a3)
{
  unint64_t v3;
  const char *v4;
  unint64_t v5;
  const char *v6;
  const char *v7;

  v3 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0)
      v4 = *(const char **)v4;
  }
  else
  {
    v4 = "";
  }
  v5 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(const char **)v6;
  }
  else
  {
    v6 = "";
  }
  if (*((_BYTE *)this + 40))
    v7 = "output";
  else
    v7 = "input";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (type: '%s'); %s",
    a2,
    a3,
    v4,
    v6,
    v7);
}

BOOL pxrInternal__aapl__pxrReserved__::NdrProperty::IsConnectable(pxrInternal__aapl__pxrReserved__::NdrProperty *this)
{
  return *((_BYTE *)this + 57) && *((_BYTE *)this + 40) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::NdrProperty::CanConnectTo(pxrInternal__aapl__pxrReserved__::NdrProperty *this, const pxrInternal__aapl__pxrReserved__::NdrProperty *a2)
{
  return *((unsigned __int8 *)this + 40) != *((unsigned __int8 *)a2 + 40)
      && (*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFF8);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::NdrProperty::GetTypeAsSdfType@<X0>(pxrInternal__aapl__pxrReserved__::NdrProperty *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!result)
    result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  v5 = *((_QWORD *)this + 2);
  *a2 = *((_QWORD *)result + 11);
  a2[1] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      a2[1] = v6;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrProperty::GetDefaultValueAsSdfType(pxrInternal__aapl__pxrReserved__::NdrProperty *this)
{
  unsigned __int8 v1;
  _QWORD *v2;

  v1 = atomic_load((unsigned __int8 *)&qword_254987F60);
  v2 = &unk_254987000;
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254987F60))
  {
    qword_254987F70 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1A87F4, &unk_254987F68, &dword_20BDBC000);
    qword_254987F58 = (uint64_t)&unk_254987F68;
    v2 = (_QWORD *)&unk_254987000;
    __cxa_guard_release(&qword_254987F60);
  }
  return v2[491];
}

uint64_t sub_20C1EB1AC(uint64_t a1)
{
  return a1 + 64;
}

void sub_20C1EB1B4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY);
  }
}

void sub_20C1EB1F8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY);
  }
}

void sub_20C1EB23C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry_ValidateProperty(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  const std::type_info *v7;
  char *v8;
  uint64_t v9;
  uint64_t *EmptyString;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::TfType *Type;
  uint64_t TypeName;
  const std::type_info *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 48))(&v30);
  v29 = v30;
  if (!*((_QWORD *)v6 + 1)
    || (v9 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v6, v7, v8),
        EmptyString = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v29),
        *EmptyString == v9))
  {
    result = 1;
  }
  else if (a3)
  {
    if ((*(_QWORD *)(*(_QWORD *)a1 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v11 = (*(_QWORD *)(*(_QWORD *)a1 + 16) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v11 = (unint64_t)EmptyString;
    }
    if (*(char *)(v11 + 23) < 0)
      v11 = *(_QWORD *)v11;
    if ((*(_QWORD *)(*(_QWORD *)a1 + 80) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v13 = (*(_QWORD *)(*(_QWORD *)a1 + 80) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v13 = (unint64_t)EmptyString;
    }
    if (*(char *)(v13 + 23) < 0)
      v13 = *(_QWORD *)v13;
    if ((*(_QWORD *)(*a2 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
      v14 = (uint64_t *)((*(_QWORD *)(*a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    if (*((char *)v14 + 23) < 0)
      v14 = (uint64_t *)*v14;
    Type = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v29);
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(Type);
    if (*(char *)(TypeName + 23) >= 0)
      v19 = TypeName;
    else
      v19 = *(_QWORD *)TypeName;
    v26 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v6, v17, v18);
    v20 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v26);
    if (*(char *)(v20 + 23) >= 0)
      v23 = v20;
    else
      v23 = *(_QWORD *)v20;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Default value type does not match specified type for property.\nNode identifier: %s\nSource type: %s\nProperty name: %s.\nType from SdfType: %s.\nType from default value: %s.\n", v21, v22, v11, v13, v14, v19, v23);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    result = 0;
    *(_OWORD *)a3 = v27;
    *(_QWORD *)(a3 + 16) = v28;
  }
  else
  {
    result = 0;
  }
  if ((v31 & 7) != 0)
  {
    v24 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  return result;
}

void sub_20C1EB44C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(v1 - 56);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::NdrRegistry *pxrInternal__aapl__pxrReserved__::NdrRegistry::NdrRegistry(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  uint64_t **v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 850045863;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 850045863;
  v2 = (uint64_t **)((char *)this + 136);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 1065353216;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 90) = 1065353216;
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateParserPlugins(this);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateDiscoveryPlugins(this);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_RunDiscoveryPlugins((uint64_t)this, v2);
  return this;
}

void sub_20C1EB560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  uint64_t v10;
  std::mutex *v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;

  sub_20C1EF7E8(v15);
  sub_20BF2B200(v14, *(_QWORD **)(v10 + 312));
  sub_20BEB3F28(v13);
  sub_20C1EF754(v10 + 224);
  sub_20C086448((void ***)&a10);
  sub_20BF20BCC(v10 + 160);
  sub_20C1EF6E4((void ***)&a10);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v11);
  sub_20BEBCE60((unsigned int **)v10, v16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateParserPlugins(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  _DWORD *v2;
  const std::type_info *v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7[2];

  v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY);
  if (!v2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY);
    v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY);
  }
  if (!*v2)
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = (uint64_t *)v7;
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v5, &v6);
    pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(this, (uint64_t)&v6);
    sub_20BE6100C((uint64_t)&v6, v7[0]);
  }
}

void sub_20C1EB66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BE6100C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateDiscoveryPlugins(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  _DWORD *v2;
  const std::type_info *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t TypeName;
  const char *v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  BOOL v32;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v33;
  char v34[8];
  char *v35;
  void *__p[2];
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39[2];
  char *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  char *v44;

  v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY);
  if (!v2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY);
    v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY);
  }
  if (!*v2)
  {
    v39[0] = 0;
    v39[1] = 0;
    v38 = (uint64_t *)v39;
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v5, &v38);
    v6 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
    if (!v6)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
      v6 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
    }
    if (*(char *)(v6 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)v6, *(_QWORD *)(v6 + 8));
    }
    else
    {
      v7 = *(_OWORD *)v6;
      v37 = *(_QWORD *)(v6 + 16);
      *(_OWORD *)__p = v7;
    }
    pxrInternal__aapl__pxrReserved__::TfStringTokenizeToSet((unsigned __int8 *)__p, ",", (uint64_t)v34);
    v8 = v38;
    if (v38 != (uint64_t *)v39)
    {
      v9 = (_QWORD *)((char *)this + 136);
      do
      {
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 4));
        if (&v35 == (char **)sub_20BDEEBA4((uint64_t)v34, (const void **)TypeName))
        {
          if (sub_20C1E8FF8(0))
          {
            v16 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 4));
            if (*(char *)(v16 + 23) >= 0)
              v19 = v16;
            else
              v19 = *(_QWORD *)v16;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found NdrDiscoveryPlugin '%s'\n", v17, v18, v19);
          }
          v20 = sub_20C1EC088((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 4), v14, v15);
          if (v20
            || (v40 = "ndr/registry.cpp",
                v41 = "_FindAndInstantiateDiscoveryPlugins",
                v42 = 928,
                v43 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateDiscoveryPlugins()",
                LOBYTE(v44) = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v40, "pluginFactory", 0) & 1) != 0))
          {
            (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr, void *))(*(_QWORD *)v20 + 16))(&v33, v20);
            v22 = (_QWORD *)*((_QWORD *)this + 18);
            v21 = *((_QWORD *)this + 19);
            if ((unint64_t)v22 >= v21)
            {
              v24 = ((uint64_t)v22 - *v9) >> 3;
              if ((unint64_t)(v24 + 1) >> 61)
                sub_20BDDF694();
              v25 = v21 - *v9;
              v26 = v25 >> 2;
              if (v25 >> 2 <= (unint64_t)(v24 + 1))
                v26 = v24 + 1;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              v44 = (char *)this + 152;
              if (v27)
                v28 = (char *)sub_20BDDF6A8((uint64_t)this + 152, v27);
              else
                v28 = 0;
              v29 = &v28[8 * v24];
              v40 = v28;
              v41 = v29;
              v43 = &v28[8 * v27];
              *(_QWORD *)v29 = v33;
              v33 = 0;
              v42 = (uint64_t)(v29 + 8);
              sub_20C1EFDB4((uint64_t *)this + 17, &v40);
              v23 = (_QWORD *)*((_QWORD *)this + 18);
              sub_20C1EFD3C((uint64_t)&v40);
            }
            else
            {
              *v22 = v33;
              v23 = v22 + 1;
              v33 = 0;
              *((_QWORD *)this + 18) = v23;
            }
            *((_QWORD *)this + 18) = v23;
            sub_20C1EFD88(&v33);
          }
        }
        else if (sub_20C1E8FF8(0))
        {
          if (*(char *)(TypeName + 23) >= 0)
            v13 = (const void *)TypeName;
          else
            v13 = *(const void **)TypeName;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[PXR_NDR_DISABLE_PLUGINS] Disabled NdrDiscoveryPlugin '%s'\n", v11, v12, v13);
        }
        v30 = (uint64_t *)v8[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (uint64_t *)v8[2];
            v32 = *v31 == (_QWORD)v8;
            v8 = v31;
          }
          while (!v32);
        }
        v8 = v31;
      }
      while (v31 != (uint64_t *)v39);
    }
    sub_20BDECAB8((uint64_t)v34, v35);
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    sub_20BE6100C((uint64_t)&v38, v39[0]);
  }
}

void sub_20C1EB9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28)
{
  sub_20BDECAB8((uint64_t)&a13, a16);
  if (a23 < 0)
    operator delete(__p);
  sub_20BE6100C((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_RunDiscoveryPlugins(uint64_t a1, uint64_t **a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  const void *v8;
  uint64_t *v9;
  uint64_t *v10;
  void **v11;
  int v12;
  unsigned int *v13[2];
  _QWORD v14[3];

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      v7 = sub_20C1EDAEC(v5);
      v12 = 1;
      v11 = (void **)&unk_24C52B548;
      v13[0] = 0;
      v13[1] = (unsigned int *)a1;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, void ***))(*(_QWORD *)v7 + 16))(v14, v7, &v11);
      sub_20BEBCE60(v13, v8);
      pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)&v11);
      v9 = (uint64_t *)v14[0];
      v10 = (uint64_t *)v14[1];
      while (v9 != v10)
      {
        pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(a1, v9);
        v9 += 27;
      }
      v11 = (void **)v14;
      sub_20C1E7E2C(&v11);
      ++v5;
    }
    while (v5 != v6);
  }
  std::mutex::unlock(v4);
}

void sub_20C1EBB3C(_Unwind_Exception *a1, const void *a2, uint64_t a3, ...)
{
  std::mutex *v3;
  unsigned int **v4;
  va_list va;

  va_start(va, a3);
  sub_20BEBCE60(v4, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)va);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::~NdrRegistry(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  const void *v2;
  void **v3;

  sub_20C1EF7E8((uint64_t)this + 328);
  sub_20BF2B200((uint64_t)this + 304, *((_QWORD **)this + 39));
  sub_20BEB3F28((uint64_t)this + 264);
  sub_20C1EF754((uint64_t)this + 224);
  v3 = (void **)((char *)this + 200);
  sub_20C086448(&v3);
  sub_20BF20BCC((uint64_t)this + 160);
  v3 = (void **)((char *)this + 136);
  sub_20C1EF6E4(&v3);
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  sub_20BEBCE60((unsigned int **)this, v2);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD v5[4];
  char v6;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (*(_QWORD *)(a1 + 352))
  {
    v5[0] = "ndr/registry.cpp";
    v5[1] = "SetExtraDiscoveryPlugins";
    v5[2] = 308;
    v5[3] = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(DiscoveryPluginRefPtrVec)";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"SetExtraDiscoveryPlugins() cannot be called after nodes have been parsed; ignoring.");
    std::mutex::unlock(v4);
  }
  else
  {
    std::mutex::unlock(v4);
    pxrInternal__aapl__pxrReserved__::NdrRegistry::_RunDiscoveryPlugins(a1, (uint64_t **)a2);
    sub_20C1EF8D0((uint64_t *)(a1 + 136), *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 144), *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a2, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
}

void sub_20C1EBCD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  pxrInternal__aapl__pxrReserved__::TfType *type_name;
  pxrInternal__aapl__pxrReserved__::TfType *v10;
  uint64_t TypeName;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[2];
  uint64_t *v39;
  _QWORD *v40[2];
  void **v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  _QWORD *v45;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v46[2];

  v40[0] = 0;
  v40[1] = 0;
  v39 = (uint64_t *)v40;
  v8 = (pxrInternal__aapl__pxrReserved__::TfType *)a2->__vftable;
  type_name = (pxrInternal__aapl__pxrReserved__::TfType *)a2->__type_name;
  if ((pxrInternal__aapl__pxrReserved__::TfType *)a2->__vftable == type_name)
  {
LABEL_13:
    v38[0] = 0;
    v18 = 0uLL;
    v37 = 0u;
    v19 = v39;
    if (v39 == (uint64_t *)v40)
    {
      v31 = 0;
    }
    else
    {
      do
      {
        v20 = sub_20C1EC088((pxrInternal__aapl__pxrReserved__::TfType *)(v19 + 4), v6, v7);
        if (v20
          || (v41 = (void **)"ndr/registry.cpp",
              v42 = "SetExtraDiscoveryPlugins",
              v43 = 342,
              v44 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(const std::vector<TfType> &)",
              LOBYTE(v45) = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "pluginFactory", 0) & 1) != 0))
        {
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr, void *))(*(_QWORD *)v20 + 16))(v46, v20);
          v21 = *((_QWORD *)&v37 + 1);
          if (*((_QWORD *)&v37 + 1) >= v38[0])
          {
            v23 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
            if ((unint64_t)(v23 + 1) >> 61)
              sub_20BDDF694();
            v24 = (uint64_t)(v38[0] - v37) >> 2;
            if (v24 <= v23 + 1)
              v24 = v23 + 1;
            if (v38[0] - (_QWORD)v37 >= 0x7FFFFFFFFFFFFFF8uLL)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v24;
            v45 = v38;
            if (v25)
              v26 = (void **)sub_20BDDF6A8((uint64_t)v38, v25);
            else
              v26 = 0;
            v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v26[v23];
            v41 = v26;
            v42 = (const char *)v27;
            v44 = (const char *)&v26[v25];
            *v27 = v46[0];
            v46[0] = 0;
            v43 = (uint64_t)(v27 + 1);
            sub_20C1EFDB4((uint64_t *)&v37, &v41);
            v22 = *((_QWORD *)&v37 + 1);
            sub_20C1EFD3C((uint64_t)&v41);
          }
          else
          {
            **((_QWORD **)&v37 + 1) = v46[0];
            v22 = v21 + 8;
            v46[0] = 0;
          }
          *((_QWORD *)&v37 + 1) = v22;
          sub_20C1EFD88(v46);
        }
        v28 = (uint64_t *)v19[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v19[2];
            v30 = *v29 == (_QWORD)v19;
            v19 = v29;
          }
          while (!v30);
        }
        v19 = v29;
      }
      while (v29 != (uint64_t *)v40);
      v18 = v37;
      v31 = v38[0];
    }
    v35 = v18;
    v36 = v31;
    v38[0] = 0;
    v37 = 0uLL;
    pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(a1, (uint64_t)&v35);
    v41 = (void **)&v35;
    sub_20C1EF6E4(&v41);
    v41 = (void **)&v37;
    sub_20C1EF6E4(&v41);
  }
  else
  {
    v10 = (pxrInternal__aapl__pxrReserved__::TfType *)v5;
    while (1)
    {
      if (!pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)v8, *(_QWORD *)v10, v7))
      {
        v41 = (void **)"ndr/registry.cpp";
        v42 = "SetExtraDiscoveryPlugins";
        v43 = 330;
        v44 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(const std::vector<TfType> &)";
        LOBYTE(v45) = 0;
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
        v33 = *(char *)(TypeName + 23);
        v32 = *(_QWORD *)TypeName;
        v34 = TypeName;
        v12 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
        v15 = v34;
        if (v33 < 0)
          v15 = v32;
        v16 = *(char *)(v12 + 23) >= 0 ? v12 : *(_QWORD *)v12;
        v17 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type %s is not a %s", v13, v14, v15, v16);
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "type.IsA(discoveryPluginType)", v17) & 1) == 0)break;
      }
      sub_20BEB968C(&v39, (unint64_t *)v8, (uint64_t *)v8);
      v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
      if (v8 == type_name)
        goto LABEL_13;
    }
  }
  sub_20BE6100C((uint64_t)&v39, v40[0]);
}

void sub_20C1EC010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  *(_QWORD *)(v24 - 96) = &a19;
  sub_20C1EF6E4((void ***)(v24 - 96));
  sub_20BE6100C((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void *sub_20C1EC088(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::AddDiscoveryResult(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(a1, a2);
  std::mutex::unlock(v4);
}

void sub_20C1EC100(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v5;

  v3 = sub_20C1F1358((_QWORD *)(a1 + 224), a2, (uint64_t)a2);
  v5 = v3 + 3;
  sub_20C1F15A4((_QWORD *)(a1 + 264), (uint64_t)(v3 + 6), &v5);
  return sub_20C129930(a1 + 304, v3 + 11, v3 + 11);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::AddDiscoveryResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v4[27];

  sub_20C1EEAA0((uint64_t)v4, a2);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::AddDiscoveryResult(a1, v4);
  return sub_20C1E7E9C((uint64_t)v4);
}

void sub_20C1EC1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E7E9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraParserPlugins(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfType **a2)
{
  std::mutex *v4;
  const std::type_info *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v10;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  uint64_t TypeName;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23[2];
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (*(_QWORD *)(a1 + 352))
  {
    v24 = "ndr/registry.cpp";
    v25 = "SetExtraParserPlugins";
    v26 = 376;
    v27 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraParserPlugins(const std::vector<TfType> &)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"SetExtraParserPlugins() cannot be called after nodes have been parsed; ignoring.");
    std::mutex::unlock(v4);
  }
  else
  {
    std::mutex::unlock(v4);
    v23[0] = 0;
    v23[1] = 0;
    v22 = (uint64_t *)v23;
    v9 = *a2;
    v10 = a2[1];
    if (*a2 == v10)
    {
LABEL_15:
      pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins((_QWORD *)a1, (uint64_t)&v22);
    }
    else
    {
      v11 = (pxrInternal__aapl__pxrReserved__::TfType *)v7;
      while (1)
      {
        if (!pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)v9, *(_QWORD *)v11, v8))
        {
          v24 = "ndr/registry.cpp";
          v25 = "SetExtraParserPlugins";
          v26 = 388;
          v27 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraParserPlugins(const std::vector<TfType> &)";
          v28 = 0;
          TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
          v20 = *(char *)(TypeName + 23);
          v19 = *(_QWORD *)TypeName;
          v21 = TypeName;
          v13 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
          v16 = v21;
          if (v20 < 0)
            v16 = v19;
          v17 = *(char *)(v13 + 23) >= 0 ? v13 : *(_QWORD *)v13;
          v18 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type %s is not a %s", v14, v15, v16, v17);
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "type.IsA(parserPluginType)", v18) & 1) == 0)break;
        }
        sub_20BEB968C(&v22, (unint64_t *)v9, (uint64_t *)v9);
        v9 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 + 8);
        if (v9 == v10)
          goto LABEL_15;
      }
    }
    sub_20BE6100C((uint64_t)&v22, v23[0]);
  }
}

void sub_20C1EC38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  sub_20BE6100C((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  uint64_t TypeName;
  const char *v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  const char *v32;
  uint64_t v33;
  __int128 v34;
  const char *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  const char *v39;
  char *v40;
  unint64_t v41;
  const char *v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD *v45;
  const std::type_info *v46;
  char *v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t **v56;
  pxrInternal__aapl__pxrReserved__::TfType *v57;
  uint64_t v58;
  pxrInternal__aapl__pxrReserved__::TfType *v59;
  pxrInternal__aapl__pxrReserved__::TfType *v60;
  char v61[8];
  char *v62;
  void *__p[2];
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  const char *v67;
  _QWORD *v68;

  v4 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
    v4 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
  }
  if (*(char *)(v4 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v64 = *(_QWORD *)(v4 + 16);
    *(_OWORD *)__p = v5;
  }
  pxrInternal__aapl__pxrReserved__::TfStringTokenizeToSet((unsigned __int8 *)__p, ",", (uint64_t)v61);
  sub_20C1F0000(&v59, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v6 = 126 - 2 * __clz((v60 - v59) >> 3);
  if (v60 == v59)
    v7 = 0;
  else
    v7 = v6;
  sub_20C1F00F0((uint64_t)v59, v60, v7, 1);
  v8 = v59;
  v57 = v60;
  if (v59 != v60)
  {
    v56 = (uint64_t **)(a1 + 25);
    do
    {
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
      if (&v62 == (char **)sub_20BDEEBA4((uint64_t)v61, (const void **)TypeName))
      {
        if (sub_20C1E8FF8(0))
        {
          v15 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
          if (*(char *)(v15 + 23) >= 0)
            v18 = v15;
          else
            v18 = *(_QWORD *)v15;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found NdrParserPlugin '%s' for discovery types:\n", v16, v17, v18);
        }
        v19 = sub_20C1EE9B4(v8, v13, v14);
        if (v19
          || (v65 = (unint64_t)"ndr/registry.cpp",
              *(_QWORD *)&v66 = "_InstantiateParserPlugins",
              *((_QWORD *)&v66 + 1) = 984,
              v67 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(const std::set<TfType> &)",
              LOBYTE(v68) = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v65, "pluginFactory", 0) & 1) != 0))
        {
          v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
          v21 = v20;
          v23 = (uint64_t *)a1[26];
          v22 = a1[27];
          if ((unint64_t)v23 >= v22)
          {
            v25 = *v56;
            v26 = v23 - *v56;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              sub_20BDDF694();
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            v68 = a1 + 27;
            if (v29)
            {
              v30 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 27), v29);
              v25 = (uint64_t *)a1[25];
              v23 = (uint64_t *)a1[26];
            }
            else
            {
              v30 = 0;
            }
            v31 = (uint64_t *)&v30[8 * v26];
            v32 = &v30[8 * v29];
            v67 = v32;
            *v31 = v21;
            *((_QWORD *)&v66 + 1) = v31 + 1;
            if (v23 == v25)
            {
              v24 = v31 + 1;
            }
            else
            {
              do
              {
                v33 = *--v23;
                *v23 = 0;
                *--v31 = v33;
              }
              while (v23 != v25);
              v24 = (_QWORD *)*((_QWORD *)&v66 + 1);
              v32 = v67;
            }
            v34 = *(_OWORD *)(a1 + 25);
            a1[25] = v31;
            a1[26] = v24;
            v66 = v34;
            v35 = (const char *)a1[27];
            a1[27] = v32;
            v67 = v35;
            v65 = v34;
            sub_20C0A3EB4((uint64_t)&v65);
          }
          else
          {
            *v23 = v20;
            v24 = v23 + 1;
          }
          a1[26] = v24;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
          v37 = *(unint64_t **)v36;
          v38 = *(unint64_t **)(v36 + 8);
          while (v37 != v38)
          {
            if (sub_20C1E8FF8(0))
            {
              v41 = *v37 & 0xFFFFFFFFFFFFFFF8;
              if (v41)
              {
                v42 = (const char *)(v41 + 16);
                if (*(char *)(v41 + 39) < 0)
                  v42 = *(const char **)v42;
              }
              else
              {
                v42 = "";
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - %s\n", v39, v40, v42);
            }
            v65 = *v37;
            if ((v65 & 7) != 0)
            {
              v43 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 2, v43));
              if ((v44 & 1) == 0)
                v65 &= 0xFFFFFFFFFFFFFFF8;
            }
            *(_QWORD *)&v66 = v21;
            v45 = sub_20BF2D7C8((uint64_t)(a1 + 20), &v65, (uint64_t *)&v65);
            if ((v65 & 7) != 0)
            {
              v48 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
              do
                v49 = __ldxr(v48);
              while (__stlxr(v49 - 2, v48));
            }
            if (!(_BYTE)v46)
            {
              v58 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*(_QWORD *)v45[3] - 8), v46, v47);
              v65 = (unint64_t)"ndr/registry.cpp";
              *(_QWORD *)&v66 = "_InstantiateParserPlugins";
              *((_QWORD *)&v66 + 1) = 1001;
              v67 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(const std::set<TfType> &)";
              LOBYTE(v68) = 0;
              v50 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
              if (*(char *)(v50 + 23) >= 0)
                v51 = (const char *)v50;
              else
                v51 = *(const char **)v50;
              v52 = *v37 & 0xFFFFFFFFFFFFFFF8;
              if (v52)
              {
                v53 = (const char *)(v52 + 16);
                if (*(char *)(v52 + 39) < 0)
                  v53 = *(const char **)v53;
              }
              else
              {
                v53 = "";
              }
              v54 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v58);
              if (*(char *)(v54 + 23) >= 0)
                v55 = (const char *)v54;
              else
                v55 = *(const char **)v54;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v65, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin type %s claims discovery type '%s' but that's already claimed by type %s", v51, v53, v55);
            }
            ++v37;
          }
        }
      }
      else if (sub_20C1E8FF8(0))
      {
        if (*(char *)(TypeName + 23) >= 0)
          v12 = (const void *)TypeName;
        else
          v12 = *(const void **)TypeName;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[PXR_NDR_DISABLE_PLUGINS] Disabled NdrParserPlugin '%s'\n", v10, v11, v12);
      }
      v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
    }
    while (v8 != v57);
    v8 = v59;
  }
  if (v8)
  {
    v60 = v8;
    operator delete(v8);
  }
  sub_20BDECAB8((uint64_t)v61, v62);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
}

void sub_20C1EC87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,char *a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p)
    operator delete(__p);
  sub_20BDECAB8((uint64_t)&a20, a21);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromAsset(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5)
{
  uint64_t *Resolver;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  _QWORD *i;
  uint64_t *EmptyString;
  const char *v15;
  char *v16;
  std::string *p_dst;
  unint64_t v18;
  const char *v19;
  const char *v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  const char *v26;
  uint64_t *v27;
  uint64_t NodeByIdentifierAndType;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  int v49;
  void *__p;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string __dst;

  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v56);
  if (v52 < 0)
    operator delete(__p);
  v11 = sub_20BF2B388((_QWORD *)a1 + 20, &v56);
  if (v11)
  {
    __p = 0;
    v51 = 0;
    sub_20C009E34((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&__p, a2, (uint64_t)a2 + 24);
    v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (_QWORD)__p));
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
    {
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      __p = 0;
      v51 = 0;
      sub_20C1EEDE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&__p, (uint64_t *)&v47, (pxrInternal__aapl__pxrReserved__ *)EmptyString, (uint64_t)(i + 3));
      v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55 * (_QWORD)__p);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    }
    std::to_string(&__dst, (unint64_t)v12);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v18 = *a4 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0)
        v19 = *(const char **)v19;
    }
    else
    {
      v19 = "";
    }
    v25 = *(_QWORD *)a5 & 0xFFFFFFFFFFFFFFF8;
    if (v25)
    {
      v26 = (const char *)(v25 + 16);
      if (*(char *)(v25 + 39) < 0)
        v26 = *(const char **)v26;
    }
    else
    {
      v26 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s<%s><%s>", v15, v16, p_dst, v19, v26);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v55);
    if (v52 < 0)
      operator delete(__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v27 = (uint64_t *)a5;
    if (!*(_QWORD *)a5)
      v27 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v11[3] + 32))(v11[3]);
    sub_20C157C64(&v53, &v55, v27);
    NodeByIdentifierAndType = pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, a5);
    if (!NodeByIdentifierAndType)
    {
      v29 = *((unsigned __int8 *)a2 + 47);
      if ((v29 & 0x80u) != 0)
        v29 = *((_QWORD *)a2 + 4);
      if (v29)
        v30 = (uint64_t *)((char *)a2 + 24);
      else
        v30 = (uint64_t *)a2;
      if (*((char *)v30 + 23) < 0)
        sub_20BDDBFAC(&__dst, (void *)*v30, v30[1]);
      else
        __dst = *(std::string *)v30;
      v49 = 0;
      v48 = 0;
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__dst, &v47);
      v46 = 0;
      sub_20BDDC0E4(v44, "");
      sub_20BDDC0E4(v42, "");
      sub_20C1E936C((uint64_t)&__p, &v55, &v48, (__int128 *)&v47, &v46, &v56, v27, (__int128 *)a2, (__int128 *)&__dst, (__int128 *)v44, a3, (__int128 *)v42, a4);
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if ((v46 & 7) != 0)
      {
        v31 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      NodeByIdentifierAndType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_ParseNodeFromAssetOrSourceCode((uint64_t)a1, v11[3], (uint64_t *)&__p);
      sub_20C1E7E9C((uint64_t)&__p);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if ((v54 & 7) != 0)
    {
      v33 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if ((v53 & 7) != 0)
    {
      v35 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
    if ((v55 & 7) != 0)
    {
      v37 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
  }
  else
  {
    if (sub_20C1E8FF8(1))
    {
      if (*((char *)a2 + 23) >= 0)
        v22 = (uint64_t *)a2;
      else
        v22 = *(uint64_t **)a2;
      v23 = v56 & 0xFFFFFFFFFFFFFFF8;
      if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0)
          v24 = *(const char **)v24;
      }
      else
      {
        v24 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Encountered a asset @%s@ of type [%s], but a parser for the type could not be found; ignoring.\n",
        v20,
        v21,
        v22,
        v24);
    }
    NodeByIdentifierAndType = 0;
  }
  if ((v56 & 7) != 0)
  {
    v39 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  return NodeByIdentifierAndType;
}

void sub_20C1ECD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;

  v41 = *(_QWORD *)(v40 - 136);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(v40 - 144);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(v40 - 128);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(v40 - 120);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(pxrInternal__aapl__pxrReserved__::NdrRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t NodeInIdentifierRangeWithSourceType;

  v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v8 = sub_20C1EFE28((_QWORD *)this + 28, a2);
  if (v8 == v7)
    NodeInIdentifierRangeWithSourceType = 0;
  else
    NodeInIdentifierRangeWithSourceType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInIdentifierRangeWithSourceType((uint64_t)this, v8, v7, a3);
  std::mutex::unlock(v6);
  return NodeInIdentifierRangeWithSourceType;
}

void sub_20C1ECF58(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_ParseNodeFromAssetOrSourceCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::mutex *v5;
  uint64_t inserted;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::NdrNode *v11;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::NdrNode *v15;

  (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 16))(&v15, a2, a3);
  if ((sub_20C1ED534(&v15, (uint64_t)a3) & 1) != 0)
  {
    sub_20C157C64(&v13, a3, a3 + 8);
    v5 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(a1, a3);
    inserted = pxrInternal__aapl__pxrReserved__::NdrRegistry::_InsertNodeInCache(a1, &v13, (uint64_t *)&v15);
    std::mutex::unlock(v5);
    if ((v14 & 7) != 0)
    {
      v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    inserted = 0;
  }
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode *))(*(_QWORD *)v11 + 8))(v11);
  return inserted;
}

void sub_20C1ED070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  if ((a11 & 7) != 0)
  {
    v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((a10 & 7) != 0)
  {
    v15 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromSourceCode(pxrInternal__aapl__pxrReserved__::NdrRegistry *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  int v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  _QWORD *i;
  uint64_t *EmptyString;
  uint64_t NodeByIdentifierAndType;
  uint64_t *v18;
  const char *v19;
  char *v20;
  unint64_t v21;
  const char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  const char *v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  char v35;
  uint64_t v36;
  __int128 __p;
  uint64_t v38;
  void *v39[2];
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  std::string v44;
  uint64_t v45;

  v5 = (uint64_t *)*((_QWORD *)a1 + 25);
  v6 = (uint64_t *)*((_QWORD *)a1 + 26);
  if (v5 == v6)
    goto LABEL_56;
  v10 = 0;
  do
  {
    if ((*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v5 + 32))(*v5) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
      v10 = *v5;
    ++v5;
  }
  while (v5 != v6);
  if (!v10)
  {
LABEL_56:
    if (sub_20C1E8FF8(1))
    {
      v21 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0)
          v22 = *(const char **)v22;
      }
      else
      {
        v22 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Encountered source code of type [%s], but a parser for the type could not be found; ignoring.\n",
        v19,
        v20,
        v22);
    }
    return 0;
  }
  else
  {
    v44.__r_.__value_.__r.__words[0] = 0;
    v44.__r_.__value_.__s.__data_[8] = 0;
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = (pxrInternal__aapl__pxrReserved__ *)a2;
    else
      v12 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    if (v11 >= 0)
      v13 = (char *)*(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(char **)(a2 + 8);
    pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v44, v12, v13);
    v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55 * v44.__r_.__value_.__r.__words[0]);
    *(_QWORD *)&v32 = v14;
    for (i = *(_QWORD **)(a4 + 16); i; i = (_QWORD *)*i)
    {
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      v44.__r_.__value_.__r.__words[0] = 0;
      v44.__r_.__value_.__s.__data_[8] = 0;
      sub_20C1EEDE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v44, (uint64_t *)&v32, (pxrInternal__aapl__pxrReserved__ *)EmptyString, (uint64_t)(i + 3));
      v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55 * v44.__r_.__value_.__r.__words[0]);
      *(_QWORD *)&v32 = v14;
    }
    std::to_string(&v44, (unint64_t)v14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v45);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    NodeByIdentifierAndType = pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, a3);
    if (!NodeByIdentifierAndType)
    {
      v43 = 0;
      v42 = 0;
      if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0)
        v18 = (uint64_t *)((v45 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(0);
      v41 = 0;
      sub_20BDDC0E4(&v32, "");
      sub_20BDDC0E4(v39, "");
      __p = 0uLL;
      v38 = 0;
      v36 = 0;
      sub_20C1E936C((uint64_t)&v44, &v45, &v42, (__int128 *)v18, &v41, (uint64_t *)a3, (uint64_t *)a3, &v32, (__int128 *)v39, (__int128 *)a2, a4, &__p, &v36);
      if ((v36 & 7) != 0)
      {
        v23 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if (SHIBYTE(v38) < 0)
        operator delete((void *)__p);
      if (v40 < 0)
        operator delete(v39[0]);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
      if ((v41 & 7) != 0)
      {
        v25 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      NodeByIdentifierAndType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_ParseNodeFromAssetOrSourceCode((uint64_t)a1, v10, (uint64_t *)&v44);
      if (!NodeByIdentifierAndType)
      {
        *(_QWORD *)&v32 = "ndr/registry.cpp";
        *((_QWORD *)&v32 + 1) = "GetNodeFromSourceCode";
        v33 = 510;
        v34 = "NdrNodeConstPtr pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromSourceCode(const std::string &, "
              "const TfToken &, const NdrTokenMap &)";
        v35 = 0;
        v27 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
        if (v27)
        {
          v28 = (const char *)(v27 + 16);
          if (*(char *)(v27 + 39) < 0)
            v28 = *(const char **)v28;
        }
        else
        {
          v28 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not create node for the given source code of source type '%s'.", v28);
      }
      sub_20C1E7E9C((uint64_t)&v44);
    }
    if ((v45 & 7) != 0)
    {
      v29 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
  }
  return NodeByIdentifierAndType;
}

void sub_20C1ED450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;

  sub_20C1E7E9C((uint64_t)&a38);
  v45 = *(_QWORD *)(v43 - 72);
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C1ED534(pxrInternal__aapl__pxrReserved__::NdrNode **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::NdrNode *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  pxrInternal__aapl__pxrReserved__::NdrNode *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  const char *v14;
  unint64_t v15;
  const char *v16;
  BOOL v17;
  uint64_t *EmptyString;
  uint64_t InputNames;
  const pxrInternal__aapl__pxrReserved__::TfToken *v20;
  const pxrInternal__aapl__pxrReserved__::TfToken *v21;
  uint64_t OutputNames;
  const pxrInternal__aapl__pxrReserved__::TfToken *v23;
  const pxrInternal__aapl__pxrReserved__::TfToken *v24;
  int v26;
  std::string *v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  pxrInternal__aapl__pxrReserved__::NdrNode *v29;
  const char *v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t *v36;
  std::string *p_p;
  const char *v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  const char *v42;
  std::string __p;
  uint64_t v44;
  int v45;
  std::string v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  char v51;

  v4 = *a1;
  if (!v4)
  {
    v47 = "ndr/registry.cpp";
    v48 = "_ValidateNode";
    v49 = 213;
    v50 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateNode(const NdrNodeUniquePtr &, const Nd"
          "rNodeDiscoveryResult &)";
    v14 = *(const char **)(a2 + 96);
    v51 = 0;
    if (*(char *)(a2 + 119) >= 0)
      v14 = (const char *)(a2 + 96);
    v15 = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v16 = *(const char **)v16;
    }
    else
    {
      v16 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v47, 3, (pxrInternal__aapl__pxrReserved__ *)"Parser for asset @%s@ of type %s returned null", v14, v16);
    return 0;
  }
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::NdrNode *))(*(_QWORD *)v4 + 16))(v4);
  v6 = *a1;
  if ((_DWORD)v5)
  {
    v7 = *((_QWORD *)v6 + 2) & 0xFFFFFFFFFFFFFFF8;
    if (v7 != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    v8 = *((unsigned __int8 *)v6 + 63);
    if ((v8 & 0x80u) == 0)
      v9 = *((unsigned __int8 *)v6 + 63);
    else
      v9 = *((_QWORD *)v6 + 6);
    v10 = *(unsigned __int8 *)(a2 + 47);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 32);
    if (v9 != v10)
      goto LABEL_33;
    v12 = (const void **)((char *)v6 + 40);
    if (v11 >= 0)
      v13 = (unsigned __int8 *)(a2 + 24);
    else
      v13 = *(unsigned __int8 **)(a2 + 24);
    if ((v8 & 0x80) != 0)
    {
      v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)memcmp(*v12, v13, *((_QWORD *)v6 + 6));
      if ((_DWORD)v5)
      {
LABEL_33:
        v47 = "ndr/registry.cpp";
        v48 = "_ValidateNode";
        v49 = 242;
        v50 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateNode(const NdrNodeUniquePtr &, cons"
              "t NdrNodeDiscoveryResult &)";
        v51 = 0;
        if (v7)
          EmptyString = (uint64_t *)(v7 + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
        if (*((char *)EmptyString + 23) < 0)
          EmptyString = (uint64_t *)*EmptyString;
        v26 = *((_DWORD *)*a1 + 8);
        v44 = *((_QWORD *)*a1 + 3);
        v45 = v26;
        v27 = &v46;
        pxrInternal__aapl__pxrReserved__::NdrVersion::GetString((pxrInternal__aapl__pxrReserved__::NdrVersion *)&v44, &v46);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
        v29 = *a1;
        v30 = (char *)*a1 + 40;
        if (*((char *)*a1 + 63) < 0)
          v30 = *(const char **)v30;
        v31 = *((_QWORD *)v29 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v31)
        {
          v32 = (const char *)(v31 + 16);
          if (*(char *)(v31 + 39) < 0)
            v32 = *(const char **)v32;
        }
        else
        {
          v32 = "";
        }
        v33 = *((_QWORD *)v29 + 10) & 0xFFFFFFFFFFFFFFF8;
        if (v33)
        {
          v34 = (const char *)(v33 + 16);
          if (*(char *)(v33 + 39) < 0)
            v34 = *(const char **)v34;
        }
        else
        {
          v34 = "";
        }
        if (*(char *)(a2 + 119) >= 0)
          v35 = (const char *)(a2 + 96);
        else
          v35 = *(const char **)(a2 + 96);
        if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
          v36 = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
        if (*((char *)v36 + 23) < 0)
          v36 = (uint64_t *)*v36;
        pxrInternal__aapl__pxrReserved__::NdrVersion::GetString((pxrInternal__aapl__pxrReserved__::NdrVersion *)(a2 + 8), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (*(char *)(a2 + 47) >= 0)
          v38 = (const char *)(a2 + 24);
        else
          v38 = *(const char **)(a2 + 24);
        v39 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v39)
        {
          v40 = (const char *)(v39 + 16);
          if (*(char *)(v39 + 39) < 0)
            v40 = *(const char **)v40;
        }
        else
        {
          v40 = "";
        }
        v41 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF8;
        if (v41)
        {
          v42 = (const char *)(v41 + 16);
          if (*(char *)(v41 + 39) < 0)
            v42 = *(const char **)v42;
        }
        else
        {
          v42 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v47, 3, (pxrInternal__aapl__pxrReserved__ *)"Parsed node %s:%s:%s:%s:%s doesn't match discovery result created for asset @%s@ - %s:%s:%s:%s:%s (identifier:version:name:family:source type); discarding.",
          (const char *)EmptyString,
          (const char *)v27,
          v30,
          v32,
          v34,
          v35,
          (const char *)v36,
          (const char *)p_p,
          v38,
          v40,
          v42);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        return 0;
      }
    }
    else if (*((_BYTE *)v6 + 63))
    {
      while (*(unsigned __int8 *)v12 == *v13)
      {
        v12 = (const void **)((char *)v12 + 1);
        ++v13;
        if (!--v8)
          goto LABEL_26;
      }
      goto LABEL_33;
    }
LABEL_26:
    v17 = *(_DWORD *)(a2 + 8) == *((_DWORD *)v6 + 6) && *(_DWORD *)(a2 + 12) == *((_DWORD *)v6 + 7);
    if (!v17
      || (*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8)
      || (*((_QWORD *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF8))
    {
      goto LABEL_33;
    }
  }
  v47 = (char *)v6;
  InputNames = pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(v6);
  v20 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)InputNames;
  v21 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(InputNames + 8);
  while (v20 != v21)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)pxrInternal__aapl__pxrReserved__::NdrNode::GetInput(*a1, v20);
    sub_20C1EEE20((uint64_t)&v47, &v46);
    v20 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v20 + 8);
  }
  OutputNames = pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(*a1);
  v23 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)OutputNames;
  v24 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(OutputNames + 8);
  while (v23 != v24)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)pxrInternal__aapl__pxrReserved__::NdrNode::GetOutput(*a1, v23);
    sub_20C1EEE20((uint64_t)&v47, &v46);
    v23 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v23 + 8);
  }
  return 1;
}

void sub_20C1ED958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_InsertNodeInCache(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  v7 = sub_20C1F17F8(a1 + 328, a2, (uint64_t)a2, a3)[4];
  std::mutex::unlock(v6);
  return v7;
}

void sub_20C1ED9EC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetSearchURIs(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  __int128 **v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  void **v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 17);
  for (i = (uint64_t *)*((_QWORD *)this + 18); v2 != i; ++v2)
  {
    v5 = sub_20C1EDAEC(v2);
    v6 = (__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    sub_20BE78B98((char *)&v7, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
    sub_20C07F738((uint64_t *)a2, *(__int128 **)(a2 + 8), v7, v8, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
    v10 = (void **)&v7;
    sub_20BDE5038(&v10);
  }
}

void sub_20C1EDABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  sub_20BDE5038((void ***)&a12);
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1EDAEC(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC2DB5 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeIdentifiers(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_20BFC9A6C((char **)a4, *(_QWORD *)(a1 + 248));
  for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
  {
    if ((!*a2 || (*a2 & 0xFFFFFFFFFFFFFFF8) == (i[9] & 0xFFFFFFFFFFFFFFF8)) && (a3 || *((_BYTE *)i + 40)))
    {
      v10 = i + 3;
      v11 = *(uint64_t **)(a4 + 8);
      if (*(uint64_t **)a4 == v11 || (*(v11 - 1) & 0xFFFFFFFFFFFFFFF8) != (*v10 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((unint64_t)v11 >= *(_QWORD *)(a4 + 16))
        {
          v15 = sub_20BFCA068((char **)a4, v10);
        }
        else
        {
          v12 = *v10;
          *v11 = *v10;
          if ((v12 & 7) != 0)
          {
            v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 2, v13));
            if ((v14 & 1) == 0)
              *v11 &= 0xFFFFFFFFFFFFFFF8;
          }
          v15 = (char *)(v11 + 1);
        }
        *(_QWORD *)(a4 + 8) = v15;
      }
    }
  }
  std::mutex::unlock(v8);
}

void sub_20C1EDC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeNames(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  std::mutex *v6;
  _QWORD *i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  __int128 *v16;
  uint64_t v17;

  v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20BE71C2C(a3, *((_QWORD *)this + 36));
  for (i = (_QWORD *)*((_QWORD *)this + 35); i; i = (_QWORD *)*i)
  {
    v8 = i[5];
    if (!*(_QWORD *)a2 || (*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v9 = a3[1];
      if (*a3 == v9)
        goto LABEL_20;
      v10 = *(unsigned __int8 *)(v9 - 1);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v9 - 1);
      else
        v11 = *(_QWORD *)(v9 - 16);
      v12 = *(unsigned __int8 *)(v8 + 47);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v8 + 32);
      if (v11 != v12)
        goto LABEL_20;
      v14 = (const void **)(v9 - 24);
      if (v13 >= 0)
        v15 = (unsigned __int8 *)(v8 + 24);
      else
        v15 = *(unsigned __int8 **)(v8 + 24);
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*v14, v15, *(_QWORD *)(v9 - 16)))
          goto LABEL_20;
      }
      else if (*(_BYTE *)(v9 - 1))
      {
        while (*(unsigned __int8 *)v14 == *v15)
        {
          v14 = (const void **)((char *)v14 + 1);
          ++v15;
          if (!--v10)
            goto LABEL_24;
        }
LABEL_20:
        v16 = (__int128 *)(v8 + 24);
        if (v9 >= a3[2])
        {
          v17 = sub_20BE4EE50(a3, v16);
        }
        else
        {
          sub_20BE4EDF4(a3, v16);
          v17 = v9 + 24;
        }
        a3[1] = v17;
      }
    }
LABEL_24:
    ;
  }
  std::mutex::unlock(v6);
}

void sub_20C1EDDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifier(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t NodeInIdentifierRangeWithSourceType;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = sub_20C1EFE28((_QWORD *)(a1 + 224), a2);
  v9 = v8;
  if (v7 == v8)
  {
LABEL_5:
    NodeInIdentifierRangeWithSourceType = 0;
  }
  else
  {
    v10 = *(_QWORD **)a3;
    v11 = *(_QWORD **)(a3 + 8);
    if (*(_QWORD **)a3 == v11)
    {
      while (1)
      {
        NodeInIdentifierRangeWithSourceType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, v7 + 3);
        if (NodeInIdentifierRangeWithSourceType)
          break;
        v7 = (_QWORD *)*v7;
        if (v7 == v9)
          goto LABEL_5;
      }
    }
    else
    {
      while (1)
      {
        NodeInIdentifierRangeWithSourceType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInIdentifierRangeWithSourceType(a1, v7, v9, v10);
        if (NodeInIdentifierRangeWithSourceType)
          break;
        if (++v10 == v11)
          goto LABEL_5;
      }
    }
  }
  std::mutex::unlock(v6);
  return NodeInIdentifierRangeWithSourceType;
}

void sub_20C1EDEE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(uint64_t a1, uint64_t *a2)
{
  uint64_t NodeInCache;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  const char *v14;
  pxrInternal__aapl__pxrReserved__::NdrNode *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::NdrNode *v19;
  uint64_t v20;
  uint64_t v21;

  sub_20C157C64(&v20, a2, a2 + 8);
  NodeInCache = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindNodeInCache(a1, &v20);
  if (!NodeInCache)
  {
    v10 = sub_20BF2B388((_QWORD *)(a1 + 160), a2 + 7);
    if (v10)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode **__return_ptr, _QWORD, uint64_t *))(*(_QWORD *)v10[3] + 16))(&v19, v10[3], a2);
      if ((sub_20C1ED534(&v19, (uint64_t)a2) & 1) != 0)
        NodeInCache = pxrInternal__aapl__pxrReserved__::NdrRegistry::_InsertNodeInCache(a1, &v20, (uint64_t *)&v19);
      else
        NodeInCache = 0;
      v15 = v19;
      v19 = 0;
      if (v15)
        (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode *))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      if (sub_20C1E8FF8(1))
      {
        v13 = a2[7] & 0xFFFFFFFFFFFFFFF8;
        if (v13)
        {
          v14 = (const char *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0)
            v14 = *(const char **)v14;
        }
        else
        {
          v14 = "";
        }
        v18 = a2[3];
        v17 = a2 + 3;
        v16 = v18;
        if (*((char *)v17 + 23) >= 0)
          v16 = (uint64_t)v17;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Encountered a node of type [%s], with name [%s], but a parser for that type could not be found; ignoring.\n",
          v11,
          v12,
          v14,
          v16);
      }
      NodeInCache = 0;
    }
  }
  if ((v21 & 7) != 0)
  {
    v5 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v20 & 7) != 0)
  {
    v7 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return NodeInCache;
}

void sub_20C1EE064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;

  if ((a14 & 7) != 0)
  {
    v14 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if ((a13 & 7) != 0)
  {
    v16 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInIdentifierRangeWithSourceType(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t result;

  if (a2 == a3)
    return 0;
  v6 = a2;
  while (1)
  {
    if ((v6[11] & 0xFFFFFFFFFFFFFFF8) == (*a4 & 0xFFFFFFFFFFFFFFF8))
    {
      result = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, v6 + 3);
      if (result)
        break;
    }
    v6 = (_QWORD *)*v6;
    if (v6 == a3)
      return 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  std::mutex *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t NodeInNameRangeWithSourceType;
  uint64_t v15;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v9 = sub_20BFF1FA4((_QWORD *)(a1 + 264), a2);
  v11 = v10;
  if (v9 == v10)
  {
LABEL_10:
    NodeInNameRangeWithSourceType = 0;
  }
  else
  {
    v12 = *(_QWORD **)a3;
    v13 = *(_QWORD **)(a3 + 8);
    if (*(_QWORD **)a3 == v13)
    {
      while (1)
      {
        v15 = *((_QWORD *)v9 + 5);
        if (a4 || *(_BYTE *)(v15 + 16))
        {
          NodeInNameRangeWithSourceType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, (uint64_t *)v15);
          if (NodeInNameRangeWithSourceType)
            break;
        }
        v9 = *(unsigned __int8 **)v9;
        if (v9 == v11)
          goto LABEL_10;
      }
    }
    else
    {
      while (1)
      {
        NodeInNameRangeWithSourceType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInNameRangeWithSourceType(a1, v9, v11, v12, a4);
        if (NodeInNameRangeWithSourceType)
          break;
        if (++v12 == v13)
          goto LABEL_10;
      }
    }
  }
  std::mutex::unlock(v8);
  return NodeInNameRangeWithSourceType;
}

void sub_20C1EE234(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInNameRangeWithSourceType(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t result;

  if (a2 == a3)
    return 0;
  v8 = a2;
  while (1)
  {
    v10 = v8[5];
    if ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFFFF8) == (*a4 & 0xFFFFFFFFFFFFFFF8) && (a5 || *(_BYTE *)(v10 + 16)))
    {
      result = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, (uint64_t *)v10);
      if (result)
        break;
    }
    v8 = (_QWORD *)*v8;
    if (v8 == a3)
      return 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByNameAndType(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, int a4)
{
  std::mutex *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t NodeInNameRangeWithSourceType;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v10 = sub_20BFF1FA4((_QWORD *)(a1 + 264), a2);
  if (v10 == v9)
    NodeInNameRangeWithSourceType = 0;
  else
    NodeInNameRangeWithSourceType = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInNameRangeWithSourceType(a1, v10, v9, a3, a4);
  std::mutex::unlock(v8);
  return NodeInNameRangeWithSourceType;
}

void sub_20C1EE36C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByIdentifier(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void **a3@<X8>)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = sub_20C1EFE28((_QWORD *)this + 28, a2);
  for (i = v8; v7 != i; v7 = (_QWORD *)*v7)
  {
    v10 = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache((uint64_t)this, v7 + 3);
    v11 = v10;
    if (v10)
    {
      v13 = (uint64_t *)a3[1];
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((char *)v13 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_20BDDF694();
        v16 = v12 - (_QWORD)*a3;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)sub_20BDDF6A8((uint64_t)(a3 + 2), v18);
        else
          v19 = 0;
        v20 = (uint64_t *)&v19[8 * v15];
        *v20 = v11;
        v14 = v20 + 1;
        v22 = (char *)*a3;
        v21 = (char *)a3[1];
        if (v21 != *a3)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = (char *)*a3;
        }
        *a3 = v20;
        a3[1] = v14;
        a3[2] = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v13 = v10;
        v14 = v13 + 1;
      }
      a3[1] = v14;
    }
  }
  std::mutex::unlock(v6);
}

void sub_20C1EE4D4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, void **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  std::mutex *v26;

  v26 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = sub_20BFF1FA4((_QWORD *)(a1 + 264), a2);
  for (i = v9; v8 != i; v8 = *(unsigned __int8 **)v8)
  {
    v11 = *((_QWORD *)v8 + 5);
    if (a3 || *(_BYTE *)(v11 + 16))
    {
      v12 = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, (uint64_t *)v11);
      v13 = v12;
      if (v12)
      {
        v15 = (uint64_t *)a4[1];
        v14 = (unint64_t)a4[2];
        if ((unint64_t)v15 >= v14)
        {
          v17 = ((char *)v15 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            sub_20BDDF694();
          v18 = v14 - (_QWORD)*a4;
          v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1))
            v19 = v17 + 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)sub_20BDDF6A8((uint64_t)(a4 + 2), v20);
          else
            v21 = 0;
          v22 = (uint64_t *)&v21[8 * v17];
          *v22 = v13;
          v16 = v22 + 1;
          v24 = (char *)*a4;
          v23 = (char *)a4[1];
          if (v23 != *a4)
          {
            do
            {
              v25 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v22 = v25;
            }
            while (v23 != v24);
            v23 = (char *)*a4;
          }
          *a4 = v22;
          a4[1] = v16;
          a4[2] = &v21[8 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v15 = v12;
          v16 = v15 + 1;
        }
        a4[1] = v16;
      }
    }
  }
  std::mutex::unlock(v26);
}

void sub_20C1EE668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  std::mutex *v7;
  unint64_t v8;
  _QWORD *i;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[3];
  std::mutex *v24;
  char v25;
  int v26;
  uint64_t (**v27[2])(_QWORD);

  v26 = a3;
  v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v24 = (std::mutex *)(a1 + 72);
  v25 = 1;
  std::mutex::lock((std::mutex *)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 352);
  if (v8 != *(_QWORD *)(a1 + 248))
  {
    sub_20C1EE8C0((uint64_t)&v24);
    v23[0] = a1;
    v23[1] = a2;
    v23[2] = &v26;
    v27[0] = (uint64_t (**)(_QWORD))off_24C52B378;
    v27[1] = (uint64_t (**)(_QWORD))v23;
    tbb::interface7::internal::isolate_within_arena(v27, 0);
    sub_20C1EE900((uint64_t)&v24);
    v8 = *(_QWORD *)(a1 + 352);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20BE8BBC4((void **)a4, v8);
  for (i = *(_QWORD **)(a1 + 344); i; i = (_QWORD *)*i)
  {
    v10 = i[4];
    if ((!*a2 || (*a2 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFFFF8))
      && (v26 || *(_BYTE *)(v10 + 32)))
    {
      v12 = a4[1];
      v11 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v11)
      {
        v14 = (v12 - *a4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_20BDDF694();
        v15 = v11 - (_QWORD)*a4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_20BDDF6A8((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v10;
        v13 = v19 + 8;
        v21 = *a4;
        v20 = a4[1];
        if (v20 != *a4)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *a4;
        }
        *a4 = v19;
        a4[1] = v13;
        a4[2] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v12 = v10;
        v13 = v12 + 8;
      }
      a4[1] = v13;
    }
  }
  if (v25)
    std::mutex::unlock(v24);
  std::mutex::unlock(v7);
}

void sub_20C1EE870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
  std::mutex *v13;

  if (a13)
    std::mutex::unlock(a12);
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20C1EE8C0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_20C1EE900();
  }
}

void sub_20C1EE900(uint64_t a1)
{
  std::mutex *v2;
  pxrInternal__aapl__pxrReserved__::NdrRegistry *v3;
  _QWORD *v4;

  v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetAllNodeSourceTypes(v3, v4);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetAllNodeSourceTypes(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_20C1EFE78(a2, *((_QWORD **)this + 38), (_QWORD *)this + 39);
  std::mutex::unlock(v4);
}

void sub_20C1EE9A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_20C1EE9B4(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

void sub_20C1EE9E8(unsigned int **a1, const void *a2)
{
  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindNodeInCache(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  v5 = sub_20C1F1700((_QWORD *)(a1 + 328), a2);
  if (v5)
    v6 = v5[4];
  else
    v6 = 0;
  std::mutex::unlock(v4);
  return v6;
}

void sub_20C1EEA6C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetParserForDiscoveryType(pxrInternal__aapl__pxrReserved__::NdrRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)this + 20, a2);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

uint64_t sub_20C1EEAA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(a1 + 8) = v7;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 24), (void *)a2[3], a2[4]);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_OWORD *)(a1 + 24) = v8;
  }
  v9 = a2[6];
  *(_QWORD *)(a1 + 48) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = a2[7];
  *(_QWORD *)(a1 + 56) = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = a2[8];
  *(_QWORD *)(a1 + 64) = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      *(_QWORD *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 72), (void *)a2[9], a2[10]);
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 9);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_OWORD *)(a1 + 72) = v18;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 96), (void *)a2[12], a2[13]);
  }
  else
  {
    v19 = *((_OWORD *)a2 + 6);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_OWORD *)(a1 + 96) = v19;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 120), (void *)a2[15], a2[16]);
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 15);
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_OWORD *)(a1 + 120) = v20;
  }
  sub_20C1E96B8(a1 + 144, (uint64_t)(a2 + 18));
  v21 = (_BYTE *)(a1 + 184);
  if (*((char *)a2 + 207) < 0)
  {
    sub_20BDDBFAC(v21, (void *)a2[23], a2[24]);
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 23);
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_OWORD *)v21 = v22;
  }
  v23 = a2[26];
  *(_QWORD *)(a1 + 208) = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      *(_QWORD *)(a1 + 208) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_20C1EECEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  sub_20C1E7FB4(v6);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v3);
  v8 = *(_QWORD *)(v1 + 64);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(v1 + 56);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(v1 + 48);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if ((*(_QWORD *)v1 & 7) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

unint64_t sub_20C1EEDE8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*((_BYTE *)a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *((_BYTE *)a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C009E34(a1, a3, a4);
}

void sub_20C1EEE20(uint64_t a1, _QWORD *a2)
{
  _QWORD v2[4];
  char v3;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if ((pxrInternal__aapl__pxrReserved__::NdrRegistry_ValidateProperty(a1, a2, (uint64_t)&__p) & 1) == 0)
  {
    v2[0] = "ndr/registry.cpp";
    v2[1] = "_ValidateProperty";
    v2[2] = 200;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateProperty(const NdrNodeConstPtr &, con"
            "st NdrPropertyConstPtr &)";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C1EEE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C1EEEBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  tbb::interface5::internal::task_base *v7;
  _QWORD *v8;
  tbb::task *v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  _QWORD v13[2];
  tbb::interface5::internal::task_base *v14;
  tbb::task_group_context *v15;
  _DWORD v16[32];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 240);
  v10 = *(_OWORD *)(v4 + 1);
  v11 = v5;
  v16[0] = 0;
  v17 = 65539;
  v18 = 55;
  tbb::task_group_context::init((uint64_t)v16, a2, a3, a4);
  v12 = &v10;
  if (v6)
  {
    v13[0] = off_24C52B3B8;
    v15 = (tbb::task_group_context *)v16;
    v7 = (tbb::interface5::internal::task_base *)tbb::internal::allocate_root_with_context_proxy::allocate(&v15, 8uLL);
    *((_BYTE *)v7 - 11) = 1;
    *(_QWORD *)v7 = &unk_24C5164A8;
    v13[1] = &v12;
    v14 = v7;
    v8 = (_QWORD *)tbb::internal::allocate_child_proxy::allocate(v7, 0x20uLL);
    *((_BYTE *)v8 - 11) = 1;
    *v8 = &off_24C52B470;
    v8[1] = v6;
    v8[2] = 0;
    v8[3] = v13;
    *((_QWORD *)v7 - 3) = 2;
    (*(void (**)(_QWORD, tbb::interface5::internal::task_base *, _QWORD *))(**((_QWORD **)v7 - 5) + 8))(*((_QWORD *)v7 - 5), v7, v8);
    v13[0] = off_24C52B3B8;
    tbb::interface5::internal::task_base::destroy(v14, v9);
  }
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v16);
}

void sub_20C1EEFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, tbb::interface5::internal::task_base *a16, uint64_t a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

uint64_t sub_20C1EF040(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  int *v4;
  int v5;
  uint64_t v6;

  v2 = **a1;
  v4 = (int *)(*a1)[1];
  result = (uint64_t)(*a1)[2];
  v5 = *v4;
  v6 = *v2;
  if ((!v6 || (v6 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8))
    && (v5 || *(_BYTE *)(a2 + 24)))
  {
    return pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(result, (uint64_t *)(a2 + 8));
  }
  return result;
}

uint64_t sub_20C1EF084(uint64_t a1, tbb::task *a2)
{
  *(_QWORD *)a1 = off_24C52B3B8;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_20C1EF0BC(uint64_t a1, tbb::task *a2)
{
  void *v2;

  v2 = (void *)sub_20C1EF084(a1, a2);
  operator delete(v2);
}

uint64_t sub_20C1EF0D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0xF0uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = off_24C52B428;
  sub_20C1EF2B4(v5 + 1, a2);
  v5[29] = a1;
  return (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v5 - 5))(*(v5 - 5), v5, (uint64_t)(v5 - 1));
}

void sub_20C1EF150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::task *v9;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1EF16C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0xF0uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = off_24C52B428;
  sub_20C1EF338((uint64_t)(v5 + 1), a2);
  v5[29] = a1;
  return (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v5 - 5))(*(v5 - 5), v5, (uint64_t)(v5 - 1));
}

_QWORD *sub_20C1EF1EC(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = off_24C52B428;
  sub_20C1E7E9C((uint64_t)(a1 + 2));
  v2 = a1[1];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return a1;
}

void sub_20C1EF23C(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = off_24C52B428;
  sub_20C1E7E9C((uint64_t)(a1 + 2));
  v2 = a1[1];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  operator delete(a1);
}

uint64_t sub_20C1EF28C(uint64_t a1)
{
  sub_20C1EF040(*(uint64_t ****)(*(_QWORD *)(a1 + 232) + 8), a1 + 8);
  return 0;
}

uint64_t *sub_20C1EF2B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C1EEAA0((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

uint64_t sub_20C1EF338(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = a2[1];
  a2[1] = 0;
  v7 = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_OWORD *)(a1 + 32) = v8;
  a2[5] = 0;
  a2[6] = 0;
  a2[4] = 0;
  *(_QWORD *)(a1 + 56) = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 72) = a2[9];
  a2[9] = 0;
  v9 = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_OWORD *)(a1 + 80) = v9;
  a2[11] = 0;
  a2[12] = 0;
  a2[10] = 0;
  v10 = *(_OWORD *)(a2 + 13);
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_OWORD *)(a1 + 104) = v10;
  a2[14] = 0;
  a2[15] = 0;
  a2[13] = 0;
  v11 = *((_OWORD *)a2 + 8);
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_OWORD *)(a1 + 128) = v11;
  a2[17] = 0;
  a2[18] = 0;
  a2[16] = 0;
  sub_20BF20A20(a1 + 152, a2 + 19);
  v12 = *((_OWORD *)a2 + 12);
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_OWORD *)(a1 + 192) = v12;
  a2[24] = 0;
  a2[25] = 0;
  a2[26] = 0;
  *(_QWORD *)(a1 + 216) = a2[27];
  a2[27] = 0;
  return a1;
}

_QWORD *sub_20C1EF468(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[2];

  v2 = 0;
  v4 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  v5 = v4;
  while (v5 != v3)
  {
    v5 = (_QWORD *)*v5;
    a1[1] = v5;
    if (++v2 == 4)
    {
      if (v5 != v3)
        *((_BYTE *)a1 - 12) = 1;
      v2 = 4;
      goto LABEL_8;
    }
  }
  if (v2)
  {
LABEL_8:
    v6 = *(_QWORD *)(a1[3] + 16);
    v9[0] = 0;
    v9[1] = v6;
    result = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x20uLL);
    v8 = a1[3];
    *((_BYTE *)result - 11) = 1;
    *result = &off_24C52B4B8;
    result[1] = v8;
    result[2] = v4;
    result[3] = v2;
    return result;
  }
  return 0;
}

uint64_t sub_20C1EF51C(tbb::internal::allocate_child_proxy *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v2 = &v10;
  v3 = 0x200000000;
  for (i = 1; ; ++i)
  {
    v11 = v2;
    v5 = (_QWORD *)tbb::internal::allocate_child_proxy::allocate(this, 0x18uLL);
    v6 = v5;
    v7 = *((_QWORD *)this + 1);
    *((_BYTE *)v5 - 11) = 1;
    *v5 = &off_24C52B500;
    v5[1] = *((_QWORD *)this + 2);
    v5[2] = v7;
    v8 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = **((_QWORD **)this + 2);
    if (i == v8)
      break;
    *(v5 - 1) = 0;
    v2 = v5 - 1;
    *v11 = (uint64_t)v5;
    v3 += 0x100000000;
  }
  *((_QWORD *)this - 3) = v3 >> 32;
  if (v10)
  {
    (***(void (****)(_QWORD, uint64_t, uint64_t *))(v10 - 40))(*(_QWORD *)(v10 - 40), v10, v11);
    v10 = 0;
    v11 = &v10;
  }
  (*(void (**)(_QWORD, tbb::internal::allocate_child_proxy *, _QWORD *))(**((_QWORD **)this - 5) + 8))(*((_QWORD *)this - 5), this, v6);
  return 0;
}

uint64_t sub_20C1EF620(uint64_t a1)
{
  sub_20C1EF040(*(uint64_t ****)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 8) + 16);
  return 0;
}

void sub_20C1EF644(unsigned int **a1, const void *a2)
{
  void *v3;

  sub_20BEBCE60(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

unsigned int **sub_20C1EF670@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int **result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  result = (unsigned int **)sub_20BF2B2B4((_QWORD *)(*(_QWORD *)(a1 + 24) + 160), a2);
  if (!result || (result = (unsigned int **)result[3]) == 0)
  {
    v6 = 0;
LABEL_9:
    *a3 = v6;
    return result;
  }
  result = (unsigned int **)(*((uint64_t (**)(unsigned int **))*result + 4))(result);
  v5 = *result;
  *a3 = *result;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      goto LABEL_9;
  }
  return result;
}

void sub_20C1EF6E4(void ***a1)
{
  void **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  void *v5;

  v1 = *a1;
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_20C1EFD88(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C1EF754(uint64_t a1)
{
  void *v2;

  sub_20C1EF78C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C1EF78C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C1E7E9C((uint64_t)(v2 + 3));
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C1EF7E8(uint64_t a1)
{
  void *v2;

  sub_20C1EF820(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C1EF820(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C1EF85C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C1EF85C(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  result = a1[2];
  a1[2] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v3 = a1[1];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((*a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1EF8D0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v22;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v26;
  _QWORD v28[5];

  v5 = a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = ((uint64_t)a2 - v13) >> 3;
    v16 = v10 - v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v28[4] = v9;
    if (v17)
      v18 = (char *)sub_20BDDF6A8(v9, v17);
    else
      v18 = 0;
    v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v18[8 * v15];
    v28[0] = v18;
    v28[1] = v24;
    v28[3] = &v18[8 * v17];
    v25 = 8 * a5;
    v26 = &v24[a5];
    do
    {
      *v24++ = *a3;
      *a3++ = 0;
      v25 -= 8;
    }
    while (v25);
    v28[2] = v26;
    v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20C1EFAA8(a1, v28, (uint64_t)v5);
    sub_20C1EFD3C((uint64_t)v28);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
LABEL_18:
    sub_20C1EFA60((uint64_t)a1, a2, v12, (uint64_t)&a2[a5]);
    sub_20C1EFBC0(a3, v20, v5);
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(_QWORD *)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v9 - 8);
    do
    {
      *v23++ = *v22;
      *v22++ = 0;
      v21 += 8;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - (_QWORD)a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_20C1EFA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1EFD3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1EFA60(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8++ = *v9;
      *v9++ = 0;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C1EFB58(a2, v7, v6);
}

uint64_t sub_20C1EFAA8(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C1EFC24((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C1EFCB8(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *sub_20C1EFB58(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v5;
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;

  if (a2 != a1)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 - 8);
    v6 = a2;
    v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 - 8);
    do
    {
      v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*--v6;
      v9 = *v5;
      *v7-- = v8;
      *v6 = 0;
      sub_20BF1D8F4((int)v5, v9);
      v5 = v7;
    }
    while (v6 != a1);
  }
  return a2;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1EFBC0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = a3;
    do
    {
      v6 = *a3;
      *v5++ = *v3;
      *v3++ = 0;
      sub_20BF1D8F4((int)a3, v6);
      a3 = v5;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_20C1EFC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (uint64_t *)(v11 + v10);
    *v12 = *(_QWORD *)(a3 + v10 - 8);
    v10 -= 8;
    sub_20BF1DD04(v12);
  }
  return a6;
}

uint64_t sub_20C1EFCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      sub_20BF1DD04((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C1EFD18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 8;
    do
    {
      sub_20C1EFD88((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1EFD3C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20C1EFD88((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C1EFD88(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C1EFDB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1EFC24((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20C1EFE28(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = sub_20BF2B388(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && (v4[2] & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8));
  }
  return result;
}

_QWORD *sub_20C1EFE78(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20C1EFEFC(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20C1EFEFC(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = sub_20C1EFF80((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C1EFF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1EFF80(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  result = a4;
  if (a2 != a3)
  {
    do
    {
      v5 = a2[4];
      *result = v5;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 2, v6));
        if ((v7 & 1) == 0)
          *result &= 0xFFFFFFFFFFFFFFF8;
      }
      v8 = (_QWORD *)a2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)a2[2];
          v10 = *v9 == (_QWORD)a2;
          a2 = v9;
        }
        while (!v10);
      }
      ++result;
      a2 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

_QWORD *sub_20C1F0000(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20C1F0084(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20C1F0084(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_20BDDF654(result, a4);
    return (_QWORD *)sub_20BFC4B6C(v6, a2, a3);
  }
  return result;
}

void sub_20C1F00D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1F00F0(uint64_t result, pxrInternal__aapl__pxrReserved__::TfType *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::TfType *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  BOOL v37;
  pxrInternal__aapl__pxrReserved__::TfType *v38;
  pxrInternal__aapl__pxrReserved__::TfType *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  size_t v55;
  const void *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  BOOL v61;
  pxrInternal__aapl__pxrReserved__::TfType *v62;
  pxrInternal__aapl__pxrReserved__::TfType *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  size_t v69;
  const void *v70;
  size_t v71;
  const void *v72;
  size_t v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  size_t v80;
  const void *v81;
  size_t v82;
  const void *v83;
  size_t v84;
  int v85;
  _BOOL4 v86;
  uint64_t *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  size_t v93;
  const void *v94;
  size_t v95;
  const void *v96;
  size_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  size_t v103;
  const void *v104;
  size_t v105;
  const void *v106;
  size_t v107;
  BOOL v108;
  pxrInternal__aapl__pxrReserved__::TfType *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  size_t v114;
  const void *v115;
  size_t v116;
  const void *v117;
  size_t v118;
  _BOOL4 v119;
  pxrInternal__aapl__pxrReserved__::TfType *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  size_t v125;
  const void *v126;
  size_t v127;
  const void *v128;
  size_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  size_t v136;
  const void *v137;
  size_t v138;
  const void *v139;
  size_t v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  size_t v147;
  const void *v148;
  size_t v149;
  const void *v150;
  size_t v151;
  BOOL v152;
  uint64_t *v153;
  uint64_t TypeName;
  uint64_t v155;
  int v156;
  int v157;
  size_t v158;
  const void *v159;
  size_t v160;
  const void *v161;
  size_t v162;
  _BOOL4 v163;
  uint64_t v164;
  pxrInternal__aapl__pxrReserved__::TfType *v165;
  BOOL v167;
  uint64_t v168;
  pxrInternal__aapl__pxrReserved__::TfType *v169;
  pxrInternal__aapl__pxrReserved__::TfType *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  size_t v175;
  const void *v176;
  size_t v177;
  const void *v178;
  size_t v179;
  _BOOL4 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  size_t v186;
  const void *v187;
  size_t v188;
  const void *v189;
  size_t v190;
  BOOL v191;
  _QWORD *v192;
  int64_t v193;
  int64_t v194;
  int64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  size_t v202;
  const void *v203;
  size_t v204;
  const void *v205;
  size_t v206;
  int v207;
  _BOOL4 v208;
  pxrInternal__aapl__pxrReserved__::TfType *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  size_t v214;
  const void *v215;
  size_t v216;
  const void *v217;
  size_t v218;
  BOOL v219;
  pxrInternal__aapl__pxrReserved__::TfType *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int64_t v227;
  size_t v228;
  const void *v229;
  size_t v230;
  const void *v231;
  size_t v232;
  int v233;
  BOOL v234;
  _BOOL4 v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  size_t v240;
  const void *v241;
  size_t v242;
  const void *v243;
  size_t v244;
  _BOOL4 v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  size_t v256;
  const void *v257;
  size_t v258;
  const void *v259;
  size_t v260;
  _BOOL4 v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  pxrInternal__aapl__pxrReserved__::TfType *v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  size_t v270;
  const void *v271;
  size_t v272;
  const void *v273;
  size_t v274;
  _BOOL4 v275;
  pxrInternal__aapl__pxrReserved__::TfType *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  size_t v281;
  const void *v282;
  size_t v283;
  const void *v284;
  size_t v285;
  BOOL v286;
  pxrInternal__aapl__pxrReserved__::TfType *v288;
  pxrInternal__aapl__pxrReserved__::TfType *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  size_t v294;
  const void *v295;
  size_t v296;
  const void *v297;
  size_t v298;
  _BOOL4 v299;
  pxrInternal__aapl__pxrReserved__::TfType *v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  int v304;
  size_t v305;
  const void *v306;
  size_t v307;
  const void *v308;
  size_t v309;
  BOOL v310;
  unint64_t v311;
  int64_t v312;
  uint64_t v313;
  uint64_t v315;

  v6 = result;
LABEL_2:
  v7 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
  v8 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
  while (2)
  {
    v6 = (uint64_t)v8;
    v9 = a2;
    v10 = a2 - v8;
    v11 = (a2 - v8) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
        v155 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v6);
        v156 = *(char *)(v155 + 23);
        v157 = *(char *)(TypeName + 23);
        if (v157 >= 0)
          v158 = *(unsigned __int8 *)(TypeName + 23);
        else
          v158 = *(_QWORD *)(TypeName + 8);
        if (v157 >= 0)
          v159 = (const void *)TypeName;
        else
          v159 = *(const void **)TypeName;
        if (v156 >= 0)
          v160 = *(unsigned __int8 *)(v155 + 23);
        else
          v160 = *(_QWORD *)(v155 + 8);
        if (v156 >= 0)
          v161 = (const void *)v155;
        else
          v161 = *(const void **)v155;
        if (v160 >= v158)
          v162 = v158;
        else
          v162 = v160;
        result = memcmp(v159, v161, v162);
        v163 = v158 < v160;
        if ((_DWORD)result)
          v163 = (int)result < 0;
        if (v163)
        {
          v164 = *(_QWORD *)v6;
          *(_QWORD *)v6 = *(_QWORD *)v7;
          *(_QWORD *)v7 = v164;
        }
        return result;
      case 3:
        return sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), v7);
      case 4:
        return sub_20BFC630C((pxrInternal__aapl__pxrReserved__::TfType *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 16), v7);
      case 5:
        return sub_20BFC5BCC((pxrInternal__aapl__pxrReserved__::TfType *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 24), v7);
      default:
        if (v10 <= 191)
        {
          v165 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8);
          v167 = (pxrInternal__aapl__pxrReserved__::TfType *)v6 == a2 || v165 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v167)
            {
              v168 = 0;
              v169 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
              do
              {
                v170 = v169;
                v169 = v165;
                v171 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v165);
                v172 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v170);
                v173 = *(char *)(v172 + 23);
                v174 = *(char *)(v171 + 23);
                if (v174 >= 0)
                  v175 = *(unsigned __int8 *)(v171 + 23);
                else
                  v175 = *(_QWORD *)(v171 + 8);
                if (v174 >= 0)
                  v176 = (const void *)v171;
                else
                  v176 = *(const void **)v171;
                if (v173 >= 0)
                  v177 = *(unsigned __int8 *)(v172 + 23);
                else
                  v177 = *(_QWORD *)(v172 + 8);
                if (v173 >= 0)
                  v178 = (const void *)v172;
                else
                  v178 = *(const void **)v172;
                if (v177 >= v175)
                  v179 = v175;
                else
                  v179 = v177;
                result = memcmp(v176, v178, v179);
                v180 = v175 < v177;
                if ((_DWORD)result)
                  v180 = (int)result < 0;
                if (v180)
                {
                  v315 = *(_QWORD *)v169;
                  v181 = v168;
                  while (1)
                  {
                    *(_QWORD *)(v6 + v181 + 8) = *(_QWORD *)(v6 + v181);
                    if (!v181)
                      break;
                    v181 -= 8;
                    v182 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                    v183 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v181 + v6));
                    v184 = *(char *)(v183 + 23);
                    v185 = *(char *)(v182 + 23);
                    if (v185 >= 0)
                      v186 = *(unsigned __int8 *)(v182 + 23);
                    else
                      v186 = *(_QWORD *)(v182 + 8);
                    if (v185 >= 0)
                      v187 = (const void *)v182;
                    else
                      v187 = *(const void **)v182;
                    if (v184 >= 0)
                      v188 = *(unsigned __int8 *)(v183 + 23);
                    else
                      v188 = *(_QWORD *)(v183 + 8);
                    if (v184 >= 0)
                      v189 = (const void *)v183;
                    else
                      v189 = *(const void **)v183;
                    if (v188 >= v186)
                      v190 = v186;
                    else
                      v190 = v188;
                    result = memcmp(v187, v189, v190);
                    v191 = v186 < v188;
                    if ((_DWORD)result)
                      v191 = (int)result < 0;
                    if (!v191)
                    {
                      v192 = (_QWORD *)(v6 + v181 + 8);
                      goto LABEL_329;
                    }
                  }
                  v192 = (_QWORD *)v6;
LABEL_329:
                  *v192 = v315;
                }
                v165 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v169 + 8);
                v168 += 8;
              }
              while ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v169 + 8) != a2);
            }
          }
          else if (!v167)
          {
            v288 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 - 8);
            do
            {
              v289 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
              v6 = (uint64_t)v165;
              v290 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v165);
              v291 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v289);
              v292 = *(char *)(v291 + 23);
              v293 = *(char *)(v290 + 23);
              if (v293 >= 0)
                v294 = *(unsigned __int8 *)(v290 + 23);
              else
                v294 = *(_QWORD *)(v290 + 8);
              if (v293 >= 0)
                v295 = (const void *)v290;
              else
                v295 = *(const void **)v290;
              if (v292 >= 0)
                v296 = *(unsigned __int8 *)(v291 + 23);
              else
                v296 = *(_QWORD *)(v291 + 8);
              if (v292 >= 0)
                v297 = (const void *)v291;
              else
                v297 = *(const void **)v291;
              if (v296 >= v294)
                v298 = v294;
              else
                v298 = v296;
              result = memcmp(v295, v297, v298);
              v299 = v294 < v296;
              if ((_DWORD)result)
                v299 = (int)result < 0;
              if (v299)
              {
                v315 = *(_QWORD *)v6;
                v300 = v288;
                do
                {
                  *((_QWORD *)v300 + 2) = *((_QWORD *)v300 + 1);
                  v301 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                  v302 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v300);
                  v303 = *(char *)(v302 + 23);
                  v304 = *(char *)(v301 + 23);
                  if (v304 >= 0)
                    v305 = *(unsigned __int8 *)(v301 + 23);
                  else
                    v305 = *(_QWORD *)(v301 + 8);
                  if (v304 >= 0)
                    v306 = (const void *)v301;
                  else
                    v306 = *(const void **)v301;
                  if (v303 >= 0)
                    v307 = *(unsigned __int8 *)(v302 + 23);
                  else
                    v307 = *(_QWORD *)(v302 + 8);
                  if (v303 >= 0)
                    v308 = (const void *)v302;
                  else
                    v308 = *(const void **)v302;
                  if (v307 >= v305)
                    v309 = v305;
                  else
                    v309 = v307;
                  result = memcmp(v306, v308, v309);
                  v310 = v305 < v307;
                  if ((_DWORD)result)
                    v310 = (int)result < 0;
                  v300 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v300 - 8);
                }
                while (v310);
                *((_QWORD *)v300 + 2) = v315;
              }
              v165 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8);
              v288 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v288 + 8);
            }
            while ((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((pxrInternal__aapl__pxrReserved__::TfType *)v6 != a2)
          {
            v311 = v10;
            v193 = (unint64_t)(v11 - 2) >> 1;
            v194 = v193;
            do
            {
              v195 = v194;
              if (v193 >= v194)
              {
                v196 = (2 * v194) | 1;
                v197 = v6 + 8 * v196;
                if (2 * v194 + 2 < v11)
                {
                  v198 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v196));
                  v199 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v197 + 8));
                  v200 = *(char *)(v199 + 23);
                  v201 = *(char *)(v198 + 23);
                  if (v201 >= 0)
                    v202 = *(unsigned __int8 *)(v198 + 23);
                  else
                    v202 = *(_QWORD *)(v198 + 8);
                  if (v201 >= 0)
                    v203 = (const void *)v198;
                  else
                    v203 = *(const void **)v198;
                  if (v200 >= 0)
                    v204 = *(unsigned __int8 *)(v199 + 23);
                  else
                    v204 = *(_QWORD *)(v199 + 8);
                  if (v200 >= 0)
                    v205 = (const void *)v199;
                  else
                    v205 = *(const void **)v199;
                  if (v204 >= v202)
                    v206 = v202;
                  else
                    v206 = v204;
                  v207 = memcmp(v203, v205, v206);
                  v208 = v202 < v204;
                  if (v207)
                    v208 = v207 < 0;
                  if (v208)
                  {
                    v197 += 8;
                    v196 = 2 * v195 + 2;
                  }
                }
                v209 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v195);
                v210 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v197);
                v211 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v209);
                v212 = *(char *)(v211 + 23);
                v213 = *(char *)(v210 + 23);
                if (v213 >= 0)
                  v214 = *(unsigned __int8 *)(v210 + 23);
                else
                  v214 = *(_QWORD *)(v210 + 8);
                if (v213 >= 0)
                  v215 = (const void *)v210;
                else
                  v215 = *(const void **)v210;
                if (v212 >= 0)
                  v216 = *(unsigned __int8 *)(v211 + 23);
                else
                  v216 = *(_QWORD *)(v211 + 8);
                if (v212 >= 0)
                  v217 = (const void *)v211;
                else
                  v217 = *(const void **)v211;
                if (v216 >= v214)
                  v218 = v214;
                else
                  v218 = v216;
                result = memcmp(v215, v217, v218);
                v219 = v214 < v216;
                if ((_DWORD)result)
                  v219 = (int)result < 0;
                if (!v219)
                {
                  v312 = v195;
                  v315 = *(_QWORD *)v209;
                  do
                  {
                    v220 = (pxrInternal__aapl__pxrReserved__::TfType *)v197;
                    *(_QWORD *)v209 = *(_QWORD *)v197;
                    if (v193 < v196)
                      break;
                    v221 = (2 * v196) | 1;
                    v197 = v6 + 8 * v221;
                    v222 = 2 * v196 + 2;
                    if (v222 < v11)
                    {
                      v223 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v221));
                      v224 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v197 + 8));
                      v225 = *(char *)(v224 + 23);
                      v226 = *(char *)(v223 + 23);
                      v227 = v193;
                      if (v226 >= 0)
                        v228 = *(unsigned __int8 *)(v223 + 23);
                      else
                        v228 = *(_QWORD *)(v223 + 8);
                      if (v226 >= 0)
                        v229 = (const void *)v223;
                      else
                        v229 = *(const void **)v223;
                      if (v225 >= 0)
                        v230 = *(unsigned __int8 *)(v224 + 23);
                      else
                        v230 = *(_QWORD *)(v224 + 8);
                      if (v225 >= 0)
                        v231 = (const void *)v224;
                      else
                        v231 = *(const void **)v224;
                      if (v230 >= v228)
                        v232 = v228;
                      else
                        v232 = v230;
                      v233 = memcmp(v229, v231, v232);
                      v234 = v228 >= v230;
                      v193 = v227;
                      v235 = !v234;
                      if (v233)
                        v235 = v233 < 0;
                      if (v235)
                      {
                        v197 += 8;
                        v221 = v222;
                      }
                    }
                    v236 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v197);
                    v237 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                    v238 = *(char *)(v237 + 23);
                    v239 = *(char *)(v236 + 23);
                    if (v239 >= 0)
                      v240 = *(unsigned __int8 *)(v236 + 23);
                    else
                      v240 = *(_QWORD *)(v236 + 8);
                    if (v239 >= 0)
                      v241 = (const void *)v236;
                    else
                      v241 = *(const void **)v236;
                    if (v238 >= 0)
                      v242 = *(unsigned __int8 *)(v237 + 23);
                    else
                      v242 = *(_QWORD *)(v237 + 8);
                    if (v238 >= 0)
                      v243 = (const void *)v237;
                    else
                      v243 = *(const void **)v237;
                    if (v242 >= v240)
                      v244 = v240;
                    else
                      v244 = v242;
                    result = memcmp(v241, v243, v244);
                    v245 = v240 < v242;
                    if ((_DWORD)result)
                      v245 = (int)result < 0;
                    v209 = v220;
                    v196 = v221;
                  }
                  while (!v245);
                  *(_QWORD *)v220 = v315;
                  v195 = v312;
                }
              }
              v194 = v195 - 1;
            }
            while (v195);
            v246 = v311 >> 3;
            do
            {
              v247 = 0;
              v313 = *(_QWORD *)v6;
              v248 = (_QWORD *)v6;
              do
              {
                v249 = (uint64_t)&v248[v247 + 1];
                v250 = (2 * v247) | 1;
                v251 = 2 * v247 + 2;
                if (v251 < v246)
                {
                  v252 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v248[v247 + 1]);
                  v253 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v249 + 8));
                  v254 = *(char *)(v253 + 23);
                  v255 = *(char *)(v252 + 23);
                  if (v255 >= 0)
                    v256 = *(unsigned __int8 *)(v252 + 23);
                  else
                    v256 = *(_QWORD *)(v252 + 8);
                  if (v255 >= 0)
                    v257 = (const void *)v252;
                  else
                    v257 = *(const void **)v252;
                  if (v254 >= 0)
                    v258 = *(unsigned __int8 *)(v253 + 23);
                  else
                    v258 = *(_QWORD *)(v253 + 8);
                  if (v254 >= 0)
                    v259 = (const void *)v253;
                  else
                    v259 = *(const void **)v253;
                  if (v258 >= v256)
                    v260 = v256;
                  else
                    v260 = v258;
                  result = memcmp(v257, v259, v260);
                  v261 = v256 < v258;
                  if ((_DWORD)result)
                    v261 = (int)result < 0;
                  if (v261)
                  {
                    v249 += 8;
                    v250 = v251;
                  }
                }
                *v248 = *(_QWORD *)v249;
                v248 = (_QWORD *)v249;
                v247 = v250;
              }
              while (v250 <= (uint64_t)((unint64_t)(v246 - 2) >> 1));
              v262 = (uint64_t *)((char *)a2 - 8);
              if ((pxrInternal__aapl__pxrReserved__::TfType *)v249 == (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8))
              {
                *(_QWORD *)v249 = v313;
              }
              else
              {
                *(_QWORD *)v249 = *v262;
                *v262 = v313;
                v263 = v249 - v6 + 8;
                if (v263 >= 9)
                {
                  v264 = (((unint64_t)v263 >> 3) - 2) >> 1;
                  v265 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v264);
                  v266 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v265);
                  v267 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v249);
                  v268 = *(char *)(v267 + 23);
                  v269 = *(char *)(v266 + 23);
                  if (v269 >= 0)
                    v270 = *(unsigned __int8 *)(v266 + 23);
                  else
                    v270 = *(_QWORD *)(v266 + 8);
                  if (v269 >= 0)
                    v271 = (const void *)v266;
                  else
                    v271 = *(const void **)v266;
                  if (v268 >= 0)
                    v272 = *(unsigned __int8 *)(v267 + 23);
                  else
                    v272 = *(_QWORD *)(v267 + 8);
                  if (v268 >= 0)
                    v273 = (const void *)v267;
                  else
                    v273 = *(const void **)v267;
                  if (v272 >= v270)
                    v274 = v270;
                  else
                    v274 = v272;
                  result = memcmp(v271, v273, v274);
                  v275 = v270 < v272;
                  if ((_DWORD)result)
                    v275 = (int)result < 0;
                  if (v275)
                  {
                    v315 = *(_QWORD *)v249;
                    do
                    {
                      v276 = v265;
                      *(_QWORD *)v249 = *(_QWORD *)v265;
                      if (!v264)
                        break;
                      v264 = (v264 - 1) >> 1;
                      v265 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * v264);
                      v277 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v265);
                      v278 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                      v279 = *(char *)(v278 + 23);
                      v280 = *(char *)(v277 + 23);
                      if (v280 >= 0)
                        v281 = *(unsigned __int8 *)(v277 + 23);
                      else
                        v281 = *(_QWORD *)(v277 + 8);
                      if (v280 >= 0)
                        v282 = (const void *)v277;
                      else
                        v282 = *(const void **)v277;
                      if (v279 >= 0)
                        v283 = *(unsigned __int8 *)(v278 + 23);
                      else
                        v283 = *(_QWORD *)(v278 + 8);
                      if (v279 >= 0)
                        v284 = (const void *)v278;
                      else
                        v284 = *(const void **)v278;
                      if (v283 >= v281)
                        v285 = v281;
                      else
                        v285 = v283;
                      result = memcmp(v282, v284, v285);
                      v286 = v281 < v283;
                      if ((_DWORD)result)
                        v286 = (int)result < 0;
                      v249 = (uint64_t)v276;
                    }
                    while (v286);
                    *(_QWORD *)v276 = v315;
                  }
                }
              }
              a2 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
            }
            while (v246-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x401)
        {
          sub_20BFC5E14(v13, (pxrInternal__aapl__pxrReserved__::TfType *)v6, v7);
        }
        else
        {
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)v6, v13, v7);
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 - 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 16));
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 + 8 * v12), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 24));
          v9 = a2;
          sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 - 8), v13, (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8 + 8 * v12));
          v14 = *(_QWORD *)v6;
          *(_QWORD *)v6 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v6 - 8));
          v16 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v6);
          v17 = *(char *)(v16 + 23);
          v18 = *(char *)(v15 + 23);
          if (v18 >= 0)
            v19 = *(unsigned __int8 *)(v15 + 23);
          else
            v19 = *(_QWORD *)(v15 + 8);
          if (v18 >= 0)
            v20 = (const void *)v15;
          else
            v20 = *(const void **)v15;
          if (v17 >= 0)
            v21 = *(unsigned __int8 *)(v16 + 23);
          else
            v21 = *(_QWORD *)(v16 + 8);
          if (v17 >= 0)
            v22 = (const void *)v16;
          else
            v22 = *(const void **)v16;
          if (v21 >= v19)
            v23 = v19;
          else
            v23 = v21;
          v24 = memcmp(v20, v22, v23);
          v25 = v19 < v21;
          if (v24)
            v25 = v24 < 0;
          if (!v25)
          {
            v315 = *(_QWORD *)v6;
            v89 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
            v90 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
            v91 = *(char *)(v90 + 23);
            v92 = *(char *)(v89 + 23);
            if (v92 >= 0)
              v93 = *(unsigned __int8 *)(v89 + 23);
            else
              v93 = *(_QWORD *)(v89 + 8);
            if (v92 >= 0)
              v94 = (const void *)v89;
            else
              v94 = *(const void **)v89;
            if (v91 >= 0)
              v95 = *(unsigned __int8 *)(v90 + 23);
            else
              v95 = *(_QWORD *)(v90 + 8);
            if (v91 >= 0)
              v96 = (const void *)v90;
            else
              v96 = *(const void **)v90;
            if (v95 >= v93)
              v97 = v93;
            else
              v97 = v95;
            result = memcmp(v94, v96, v97);
            v98 = v93 < v95;
            if ((_DWORD)result)
              v98 = (int)result < 0;
            if (v98)
            {
              v8 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
              do
              {
                v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
                v99 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v100 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                v101 = *(char *)(v100 + 23);
                v102 = *(char *)(v99 + 23);
                if (v102 >= 0)
                  v103 = *(unsigned __int8 *)(v99 + 23);
                else
                  v103 = *(_QWORD *)(v99 + 8);
                if (v102 >= 0)
                  v104 = (const void *)v99;
                else
                  v104 = *(const void **)v99;
                if (v101 >= 0)
                  v105 = *(unsigned __int8 *)(v100 + 23);
                else
                  v105 = *(_QWORD *)(v100 + 8);
                if (v101 >= 0)
                  v106 = (const void *)v100;
                else
                  v106 = *(const void **)v100;
                if (v105 >= v103)
                  v107 = v103;
                else
                  v107 = v105;
                result = memcmp(v104, v106, v107);
                v108 = v103 < v105;
                if ((_DWORD)result)
                  v108 = (int)result < 0;
              }
              while (!v108);
            }
            else
            {
              v109 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 8);
              do
              {
                v8 = v109;
                if (v109 >= v9)
                  break;
                v110 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v111 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                v112 = *(char *)(v111 + 23);
                v113 = *(char *)(v110 + 23);
                if (v113 >= 0)
                  v114 = *(unsigned __int8 *)(v110 + 23);
                else
                  v114 = *(_QWORD *)(v110 + 8);
                if (v113 >= 0)
                  v115 = (const void *)v110;
                else
                  v115 = *(const void **)v110;
                if (v112 >= 0)
                  v116 = *(unsigned __int8 *)(v111 + 23);
                else
                  v116 = *(_QWORD *)(v111 + 8);
                if (v112 >= 0)
                  v117 = (const void *)v111;
                else
                  v117 = *(const void **)v111;
                if (v116 >= v114)
                  v118 = v114;
                else
                  v118 = v116;
                result = memcmp(v115, v117, v118);
                v119 = (int)result < 0;
                if (!(_DWORD)result)
                  v119 = v114 < v116;
                v109 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
              }
              while (!v119);
            }
            v120 = v9;
            if (v8 < v9)
            {
              v120 = v9;
              do
              {
                v120 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v120 - 8);
                v121 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v122 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v120);
                v123 = *(char *)(v122 + 23);
                v124 = *(char *)(v121 + 23);
                if (v124 >= 0)
                  v125 = *(unsigned __int8 *)(v121 + 23);
                else
                  v125 = *(_QWORD *)(v121 + 8);
                if (v124 >= 0)
                  v126 = (const void *)v121;
                else
                  v126 = *(const void **)v121;
                if (v123 >= 0)
                  v127 = *(unsigned __int8 *)(v122 + 23);
                else
                  v127 = *(_QWORD *)(v122 + 8);
                if (v123 >= 0)
                  v128 = (const void *)v122;
                else
                  v128 = *(const void **)v122;
                if (v127 >= v125)
                  v129 = v125;
                else
                  v129 = v127;
                result = memcmp(v126, v128, v129);
                v130 = v125 < v127;
                if ((_DWORD)result)
                  v130 = (int)result < 0;
              }
              while (v130);
            }
            while (v8 < v120)
            {
              v131 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v120;
              *(_QWORD *)v120 = v131;
              do
              {
                v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
                v132 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v133 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                v134 = *(char *)(v133 + 23);
                v135 = *(char *)(v132 + 23);
                if (v135 >= 0)
                  v136 = *(unsigned __int8 *)(v132 + 23);
                else
                  v136 = *(_QWORD *)(v132 + 8);
                if (v135 >= 0)
                  v137 = (const void *)v132;
                else
                  v137 = *(const void **)v132;
                if (v134 >= 0)
                  v138 = *(unsigned __int8 *)(v133 + 23);
                else
                  v138 = *(_QWORD *)(v133 + 8);
                if (v134 >= 0)
                  v139 = (const void *)v133;
                else
                  v139 = *(const void **)v133;
                if (v138 >= v136)
                  v140 = v136;
                else
                  v140 = v138;
                v141 = memcmp(v137, v139, v140);
                v142 = v136 < v138;
                if (v141)
                  v142 = v141 < 0;
              }
              while (!v142);
              do
              {
                v120 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v120 - 8);
                v143 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
                v144 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v120);
                v145 = *(char *)(v144 + 23);
                v146 = *(char *)(v143 + 23);
                if (v146 >= 0)
                  v147 = *(unsigned __int8 *)(v143 + 23);
                else
                  v147 = *(_QWORD *)(v143 + 8);
                if (v146 >= 0)
                  v148 = (const void *)v143;
                else
                  v148 = *(const void **)v143;
                if (v145 >= 0)
                  v149 = *(unsigned __int8 *)(v144 + 23);
                else
                  v149 = *(_QWORD *)(v144 + 8);
                if (v145 >= 0)
                  v150 = (const void *)v144;
                else
                  v150 = *(const void **)v144;
                if (v149 >= v147)
                  v151 = v147;
                else
                  v151 = v149;
                result = memcmp(v148, v150, v151);
                v152 = v147 < v149;
                if ((_DWORD)result)
                  v152 = (int)result < 0;
              }
              while (v152);
            }
            v153 = (uint64_t *)((char *)v8 - 8);
            if ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 - 8) != (pxrInternal__aapl__pxrReserved__::TfType *)v6)
              *(_QWORD *)v6 = *v153;
            a4 = 0;
            *v153 = v315;
            continue;
          }
        }
        v26 = 0;
        v315 = *(_QWORD *)v6;
        do
        {
          v26 += 8;
          v27 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v26 + v6));
          v28 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
          v29 = *(char *)(v28 + 23);
          v30 = *(char *)(v27 + 23);
          if (v30 >= 0)
            v31 = *(unsigned __int8 *)(v27 + 23);
          else
            v31 = *(_QWORD *)(v27 + 8);
          if (v30 >= 0)
            v32 = (const void *)v27;
          else
            v32 = *(const void **)v27;
          if (v29 >= 0)
            v33 = *(unsigned __int8 *)(v28 + 23);
          else
            v33 = *(_QWORD *)(v28 + 8);
          if (v29 >= 0)
            v34 = (const void *)v28;
          else
            v34 = *(const void **)v28;
          if (v33 >= v31)
            v35 = v31;
          else
            v35 = v33;
          v36 = memcmp(v32, v34, v35);
          v37 = v31 < v33;
          if (v36)
            v37 = v36 < 0;
        }
        while (v37);
        v38 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + v26);
        v39 = v9;
        if (v26 == 8)
        {
          v39 = v9;
          do
          {
            if (v38 >= v39)
              break;
            v39 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v39 - 8);
            v51 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v39);
            v52 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
            v53 = *(char *)(v52 + 23);
            v54 = *(char *)(v51 + 23);
            if (v54 >= 0)
              v55 = *(unsigned __int8 *)(v51 + 23);
            else
              v55 = *(_QWORD *)(v51 + 8);
            if (v54 >= 0)
              v56 = (const void *)v51;
            else
              v56 = *(const void **)v51;
            if (v53 >= 0)
              v57 = *(unsigned __int8 *)(v52 + 23);
            else
              v57 = *(_QWORD *)(v52 + 8);
            if (v53 >= 0)
              v58 = (const void *)v52;
            else
              v58 = *(const void **)v52;
            if (v57 >= v55)
              v59 = v55;
            else
              v59 = v57;
            v60 = memcmp(v56, v58, v59);
            v61 = v55 < v57;
            if (v60)
              v61 = v60 < 0;
          }
          while (!v61);
        }
        else
        {
          do
          {
            v39 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v39 - 8);
            v40 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v39);
            v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
            v42 = *(char *)(v41 + 23);
            v43 = *(char *)(v40 + 23);
            if (v43 >= 0)
              v44 = *(unsigned __int8 *)(v40 + 23);
            else
              v44 = *(_QWORD *)(v40 + 8);
            if (v43 >= 0)
              v45 = (const void *)v40;
            else
              v45 = *(const void **)v40;
            if (v42 >= 0)
              v46 = *(unsigned __int8 *)(v41 + 23);
            else
              v46 = *(_QWORD *)(v41 + 8);
            if (v42 >= 0)
              v47 = (const void *)v41;
            else
              v47 = *(const void **)v41;
            if (v46 >= v44)
              v48 = v44;
            else
              v48 = v46;
            v49 = memcmp(v45, v47, v48);
            v50 = v44 < v46;
            if (v49)
              v50 = v49 < 0;
          }
          while (!v50);
        }
        if (v38 >= v39)
        {
          v87 = (uint64_t *)((char *)v38 - 8);
        }
        else
        {
          v62 = v38;
          v63 = v39;
          do
          {
            v64 = *(_QWORD *)v62;
            *(_QWORD *)v62 = *(_QWORD *)v63;
            *(_QWORD *)v63 = v64;
            do
            {
              v62 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v62 + 8);
              v65 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v62);
              v66 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
              v67 = *(char *)(v66 + 23);
              v68 = *(char *)(v65 + 23);
              if (v68 >= 0)
                v69 = *(unsigned __int8 *)(v65 + 23);
              else
                v69 = *(_QWORD *)(v65 + 8);
              if (v68 >= 0)
                v70 = (const void *)v65;
              else
                v70 = *(const void **)v65;
              if (v67 >= 0)
                v71 = *(unsigned __int8 *)(v66 + 23);
              else
                v71 = *(_QWORD *)(v66 + 8);
              if (v67 >= 0)
                v72 = (const void *)v66;
              else
                v72 = *(const void **)v66;
              if (v71 >= v69)
                v73 = v69;
              else
                v73 = v71;
              v74 = memcmp(v70, v72, v73);
              v75 = v69 < v71;
              if (v74)
                v75 = v74 < 0;
            }
            while (v75);
            do
            {
              v63 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v63 - 8);
              v76 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v63);
              v77 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v315);
              v78 = *(char *)(v77 + 23);
              v79 = *(char *)(v76 + 23);
              if (v79 >= 0)
                v80 = *(unsigned __int8 *)(v76 + 23);
              else
                v80 = *(_QWORD *)(v76 + 8);
              if (v79 >= 0)
                v81 = (const void *)v76;
              else
                v81 = *(const void **)v76;
              if (v78 >= 0)
                v82 = *(unsigned __int8 *)(v77 + 23);
              else
                v82 = *(_QWORD *)(v77 + 8);
              if (v78 >= 0)
                v83 = (const void *)v77;
              else
                v83 = *(const void **)v77;
              if (v82 >= v80)
                v84 = v80;
              else
                v84 = v82;
              v85 = memcmp(v81, v83, v84);
              v86 = v80 < v82;
              if (v85)
                v86 = v85 < 0;
            }
            while (!v86);
          }
          while (v62 < v63);
          v87 = (uint64_t *)((char *)v62 - 8);
        }
        if (v87 != (uint64_t *)v6)
          *(_QWORD *)v6 = *v87;
        *v87 = v315;
        if (v38 < v39)
        {
LABEL_134:
          result = sub_20C1F00F0(v6, v87, a3, a4 & 1);
          a4 = 0;
          v8 = (pxrInternal__aapl__pxrReserved__::TfType *)(v87 + 1);
          continue;
        }
        v88 = sub_20C1F10A0((uint64_t *)v6, (pxrInternal__aapl__pxrReserved__::TfType *)v87);
        v8 = (pxrInternal__aapl__pxrReserved__::TfType *)(v87 + 1);
        result = sub_20C1F10A0(v87 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v88)
            continue;
          goto LABEL_134;
        }
        a2 = (pxrInternal__aapl__pxrReserved__::TfType *)v87;
        if (!v88)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_20C1F10A0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t TypeName;
  uint64_t v8;
  int v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::TfType *v19;
  pxrInternal__aapl__pxrReserved__::TfType *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  _QWORD *v46;
  uint64_t v47;

  v4 = (a2 - (pxrInternal__aapl__pxrReserved__::TfType *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (uint64_t *)((char *)a2 - 8);
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      v8 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
      v9 = *(char *)(v8 + 23);
      v10 = *(char *)(TypeName + 23);
      if (v10 >= 0)
        v11 = *(unsigned __int8 *)(TypeName + 23);
      else
        v11 = *(_QWORD *)(TypeName + 8);
      if (v10 >= 0)
        v12 = (const void *)TypeName;
      else
        v12 = *(const void **)TypeName;
      if (v9 >= 0)
        v13 = *(unsigned __int8 *)(v8 + 23);
      else
        v13 = *(_QWORD *)(v8 + 8);
      if (v9 >= 0)
        v14 = (const void *)v8;
      else
        v14 = *(const void **)v8;
      if (v13 >= v11)
        v15 = v11;
      else
        v15 = v13;
      v16 = memcmp(v12, v14, v15);
      v17 = v11 < v13;
      if (v16)
        v17 = v16 < 0;
      if (v17)
      {
        v18 = *a1;
        *a1 = *v6;
        *v6 = v18;
      }
      return 1;
    case 3:
      sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 4:
      sub_20BFC630C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 5:
      sub_20BFC5BCC((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    default:
      v19 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2);
      sub_20BFC5E14((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
      v20 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v23 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v20);
    v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v19);
    v25 = *(char *)(v24 + 23);
    v26 = *(char *)(v23 + 23);
    if (v26 >= 0)
      v27 = *(unsigned __int8 *)(v23 + 23);
    else
      v27 = *(_QWORD *)(v23 + 8);
    if (v26 >= 0)
      v28 = (const void *)v23;
    else
      v28 = *(const void **)v23;
    if (v25 >= 0)
      v29 = *(unsigned __int8 *)(v24 + 23);
    else
      v29 = *(_QWORD *)(v24 + 8);
    if (v25 >= 0)
      v30 = (const void *)v24;
    else
      v30 = *(const void **)v24;
    if (v29 >= v27)
      v31 = v27;
    else
      v31 = v29;
    v32 = memcmp(v28, v30, v31);
    v33 = v27 < v29;
    if (v32)
      v33 = v32 < 0;
    if (v33)
    {
      v47 = *(_QWORD *)v20;
      v34 = v21;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v34 + 24) = *(uint64_t *)((char *)a1 + v34 + 16);
        if (v34 == -16)
          break;
        v35 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v47);
        v36 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + v34 + 8));
        v37 = *(char *)(v36 + 23);
        v38 = *(char *)(v35 + 23);
        if (v38 >= 0)
          v39 = *(unsigned __int8 *)(v35 + 23);
        else
          v39 = *(_QWORD *)(v35 + 8);
        if (v38 >= 0)
          v40 = (const void *)v35;
        else
          v40 = *(const void **)v35;
        if (v37 >= 0)
          v41 = *(unsigned __int8 *)(v36 + 23);
        else
          v41 = *(_QWORD *)(v36 + 8);
        if (v37 >= 0)
          v42 = (const void *)v36;
        else
          v42 = *(const void **)v36;
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        v34 -= 8;
        if (!v45)
        {
          v46 = (uint64_t *)((char *)a1 + v34 + 24);
          goto LABEL_63;
        }
      }
      v46 = a1;
LABEL_63:
      *v46 = v47;
      if (++v22 == 8)
        return (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8) == a2;
    }
    v19 = v20;
    v21 += 8;
    v20 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8);
    if (v20 == a2)
      return 1;
  }
}

_QWORD *sub_20C1F1358(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = operator new(0xF0uLL);
  *v6 = 0;
  v6[1] = 0;
  sub_20C1F1418((uint64_t)(v6 + 2), a2, a3);
  v6[1] = bswap64(0x9E3779B97F4A7C55 * (v6[2] & 0xFFFFFFFFFFFFFFF8));
  return sub_20BF321C0(a1, v6);
}

void sub_20C1F13FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20C1F1540(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1F1418(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v8 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  v10 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  v11 = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a3 + 112);
  *(_OWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v12 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  sub_20BF20A20(a1 + 152, (uint64_t *)(a3 + 144));
  v13 = *(_OWORD *)(a3 + 184);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a3 + 200);
  *(_OWORD *)(a1 + 192) = v13;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a3 + 208);
  *(_QWORD *)(a3 + 208) = 0;
  return a1;
}

void sub_20C1F1540(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20C1E7E9C((uint64_t)(a2 + 3));
    v3 = a2[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_20C1F15A4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5[3];

  sub_20C1F1600((uint64_t)a1, a2, a3, (uint64_t)v5);
  return sub_20BFF24F4(a1, v5[0]);
}

void sub_20C1F15DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C1F1600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  int v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  char *v13;
  unint64_t result;
  uint64_t v15;
  char v16;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  v9 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  v10 = (pxrInternal__aapl__pxrReserved__ *)(v8 + 16);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(v8 + 16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v9 + 5) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  v15 = 0;
  v16 = 0;
  v11 = v9[39];
  if (v11 >= 0)
    v12 = v10;
  else
    v12 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)v9 + 2);
  if (v11 >= 0)
    v13 = (char *)v9[39];
  else
    v13 = (char *)*((_QWORD *)v9 + 3);
  result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v15, v12, v13);
  *((_QWORD *)v9 + 1) = bswap64(0x9E3779B97F4A7C55 * v15);
  return result;
}

void sub_20C1F16E4(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  sub_20BEB52E4(v3, v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1F1700(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v5 = bswap64(0x9E3779B97F4A7C55 * (v4 + ((((v4 + v3) | 1) * (v4 + v3)) >> 1)));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_20C1F17F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v10 = bswap64(0x9E3779B97F4A7C55 * (v9 + ((((v9 + v8) | 1) * (v9 + v8)) >> 1)));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if ((v14[2] & 0xFFFFFFFFFFFFFFF8) == v8 && (v14[3] & 0xFFFFFFFFFFFFFFF8) == v9)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = a1 + 16;
  v17 = operator new(0x28uLL);
  v28[0] = v17;
  v28[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v18 = *a4;
  *a4 = 0;
  v17[4] = v18;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v14 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1F1AAC((uint64_t)v28, 0);
  return v14;
}

void sub_20C1F1A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1F1AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C1F1AAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C1EF85C(v2 + 2);
    operator delete(v2);
  }
}

void sub_20C1F1AF0()
{
  uint64_t v0;
  void *__p[2];
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SDR_TYPE_CONFORMANCE");
  __p[0] = 0;
  __p[1] = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B5C8, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
  v0 = sub_20C1F1BA4();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "SDR_TYPE_CONFORMANCE", "Diagnostcs from parsing and conforming default values for Sdr and Sdf type conformance");
}

void sub_20C1F1B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1F1BA4()
{
  unsigned __int8 v0;
  _DWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C6C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C6C8))
  {
    v2 = operator new(4uLL);
    *v2 = 0;
    qword_25473C6C0 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473C6C8);
  }
  return qword_25473C6C0;
}

void sub_20C1F1C04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473C6C8);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  pxrInternal__aapl__pxrReserved__::NdrRegistry *v6;
  char *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC2EB9 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdrRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdrRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v6 = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)operator new(0x170uLL);
      pxrInternal__aapl__pxrReserved__::NdrRegistry::NdrRegistry(v6);
      v8 = atomic_load(a1);
      if (v8)
      {
        if (v6 != (pxrInternal__aapl__pxrReserved__::NdrRegistry *)v8)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::"
                "_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdrRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v7);
        }
      }
      else
      {
        do
          v10 = __ldaxr(a1);
        while (__stlxr((unint64_t)v6, a1));
        if (v10)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::"
                "_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdrRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdrRegistry*> &)::isInitializing);
  }
  v11 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_11SdrRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20C1F1E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::SetInstanceConstructed(unint64_t result)
{
  unint64_t v1;
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance));
  if (v1)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::Se"
            "tInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::SdrRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::DeleteInstance()
{
  pxrInternal__aapl__pxrReserved__::NdrRegistry *i;
  unint64_t v1;
  void *v2;

  for (i = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
        i;
        i = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
    if ((pxrInternal__aapl__pxrReserved__::NdrRegistry *)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance))
      {
        pxrInternal__aapl__pxrReserved__::NdrRegistry::~NdrRegistry(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::SdrRegistry *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByIdentifier(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t Instance;
  void *result;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifier(Instance, a2, a3);
  if (result)
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByIdentifierAndType(pxrInternal__aapl__pxrReserved__::SdrRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::NdrRegistry *Instance;
  void *result;

  Instance = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(Instance, a2, a3);
  if (result)
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeFromAsset(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5)
{
  pxrInternal__aapl__pxrReserved__ *Instance;
  void *result;

  Instance = (pxrInternal__aapl__pxrReserved__ *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromAsset(Instance, a2, a3, a4, a5);
  if (result)
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeFromSourceCode(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::NdrRegistry *Instance;
  void *result;

  Instance = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromSourceCode(Instance, a2, a3, a4);
  if (result)
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  unint64_t Instance;
  void *result;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByName(Instance, a2, a3, a4);
  if (result)
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByNameAndType(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, int a4)
{
  unint64_t Instance;
  void *result;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByNameAndType(Instance, a2, a3, a4);
  if (result)
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodesByIdentifier(const pxrInternal__aapl__pxrReserved__::TfToken *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::NdrRegistry *Instance;
  void *__p[3];

  Instance = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByIdentifier(Instance, a1, __p);
  sub_20C1F2328((void ***)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20C1F230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_20C1F2328@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  void **v2;
  void **v3;
  void *v4;
  void **i;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *result;
  v3 = result[1];
  for (i = (void **)a2; v2 != v3; ++v2)
  {
    v4 = *v2;
    result = sub_20C1F24D8(&i, &v4);
  }
  return result;
}

void sub_20C1F238C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodesByName(unsigned __int8 *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t Instance;
  void *__p[3];

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByName(Instance, a1, a2, __p);
  sub_20C1F2328((void ***)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20C1F2424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodesByFamily(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t Instance;
  void *__p[3];

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily(Instance, a1, a2, (char **)__p);
  sub_20C1F2328((void ***)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20C1F24BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_20C1F24D8(void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20BDDF6A8(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  void **v3;
  unint64_t v4;
  char v5;
  void **v6;
  void **v7;
  _BOOL8 v9;
  void **v10;
  void *v11;
  void *__p[2];
  uint64_t v15;

  v2 = sub_20BF2B2B4(a2, a1);
  if (!v2)
    return 0;
  v3 = (void **)(v2 + 3);
  if (*((char *)v2 + 47) < 0)
  {
    v4 = v2[4];
    if (v4)
    {
      sub_20BDDBFAC(__p, *v3, v4);
LABEL_7:
      v5 = HIBYTE(v15);
      if (v15 >= 0)
        v6 = (void **)((char *)__p + HIBYTE(v15));
      else
        v6 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      if (v15 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if (v7 != v6)
      {
        do
        {
          *(_BYTE *)v7 = __tolower(*(char *)v7);
          v7 = (void **)((char *)v7 + 1);
        }
        while (v7 != v6);
        v5 = HIBYTE(v15);
      }
      if ((v5 & 0x80) == 0)
      {
        if (v5 != 1)
        {
          if (v5 != 5)
            return 1;
          return LODWORD(__p[0]) != 1936482662 || BYTE4(__p[0]) != 101;
        }
        if (LOBYTE(__p[0]) == 48)
          return 0;
        v10 = __p;
LABEL_40:
        v9 = *(unsigned __int8 *)v10 != 102;
        if ((v5 & 0x80) == 0)
          return v9;
LABEL_41:
        v10 = (void **)__p[0];
        goto LABEL_42;
      }
      v10 = (void **)__p[0];
      v11 = __p[1];
      if (__p[1] != (void *)1 || *(_BYTE *)__p[0] != 48)
      {
        if (__p[1] != (void *)5)
          goto LABEL_32;
        if (*(_DWORD *)__p[0] != 1936482662 || *((_BYTE *)__p[0] + 4) != 101)
        {
          v10 = (void **)__p[0];
          v11 = __p[1];
LABEL_32:
          if (v11 != (void *)1)
          {
            v9 = 1;
LABEL_42:
            operator delete(v10);
            return v9;
          }
          goto LABEL_40;
        }
      }
      v9 = 0;
      if ((v5 & 0x80) == 0)
        return v9;
      goto LABEL_41;
    }
  }
  else if (*((_BYTE *)v2 + 47))
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v15 = v2[5];
    goto LABEL_7;
  }
  return 1;
}

void sub_20C1F2748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  __int128 v7;
  void *v8;
  unint64_t v9;

  result = sub_20BF2B2B4(a2, a1);
  if (result)
  {
    if ((*((char *)result + 47) & 0x80000000) == 0)
    {
      v7 = *(_OWORD *)(result + 3);
      *(_QWORD *)(a4 + 16) = result[5];
      *(_OWORD *)a4 = v7;
      return result;
    }
    v8 = (void *)result[3];
    v9 = result[4];
  }
  else
  {
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a4 = *(_OWORD *)a3;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 16);
      return result;
    }
    v8 = *(void **)a3;
    v9 = *(_QWORD *)(a3 + 8);
  }
  return sub_20BDDBFAC((_BYTE *)a4, v8, v9);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X8>)
{
  _QWORD *result;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;

  result = sub_20BF2B2B4(a2, a1);
  if (result)
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4);
  v7 = *a3;
  *a4 = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *a4 = v8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IntVal(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  const std::string *v4;

  v4 = (const std::string *)sub_20BF2B2B4(a2, a1);
  if (v4)
    return std::stoi(v4 + 1, 0, 10);
  return a3;
}

void sub_20C1F28A8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20C1F2898);
}

void pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVecVal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v4;
  std::string *v5;
  void *__p[2];
  char v7;

  v4 = (std::string *)sub_20BF2B2B4(a2, a1);
  if (v4)
  {
    v5 = v4 + 1;
    sub_20BDDC0E4(__p, "|");
    pxrInternal__aapl__pxrReserved__::TfStringSplit(v5, (char *)__p, a3);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20C1F292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVecVal(_QWORD *a1@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;

  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVecVal(a1, a2, &v24);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = v24;
  for (i = v25; v4 != i; v4 += 24)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v30);
    v7 = a3[1];
    v6 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v6)
    {
      v10 = (v7 - *a3) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        sub_20BDDF694();
      v11 = v6 - (_QWORD)*a3;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v29 = a3 + 2;
      if (v13)
        v14 = (char *)sub_20BDDF6A8((uint64_t)(a3 + 2), v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      v28 = v16;
      *(_QWORD *)v15 = v30;
      v9 = v15 + 8;
      v30 = 0;
      v27.i64[1] = (uint64_t)(v15 + 8);
      v18 = *a3;
      v17 = a3[1];
      if (v17 == *a3)
      {
        v20 = vdupq_n_s64((unint64_t)v17);
      }
      else
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
          *(_QWORD *)v17 = 0;
        }
        while (v17 != v18);
        v20 = *(int64x2_t *)a3;
        v9 = (char *)v27.i64[1];
        v16 = v28;
      }
      *a3 = v15;
      a3[1] = v9;
      v27 = v20;
      v21 = a3[2];
      a3[2] = v16;
      v28 = v21;
      v26 = (void **)v20.i64[0];
      sub_20BF1EE98((uint64_t)&v26);
      v8 = v30;
    }
    else
    {
      v8 = 0;
      *(_QWORD *)v7 = v30;
      v9 = v7 + 8;
      v30 = 0;
    }
    a3[1] = v9;
    if ((v8 & 7) != 0)
    {
      v22 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  v26 = (void **)&v24;
  sub_20BDE5038(&v26);
}

void sub_20C1F2ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unsigned int *v19;
  unsigned int v20;

  if ((a18 & 7) != 0)
  {
    v19 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  sub_20BEEB2B8((void ***)&a18);
  a18 = (unint64_t)&a10;
  sub_20BDE5038((void ***)&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::OptionVecVal(std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  const std::string *v4;
  const std::string *i;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  unint64_t v10;
  std::string::size_type *v11;
  _QWORD *v12;
  std::string::size_type v13;
  unint64_t v14;
  std::string::size_type *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  std::string::size_type *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  std::string::size_type *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  std::string v37;
  std::string::size_type v38;
  std::string v39;
  std::string::size_type v40;
  const std::string *v41;
  const std::string *v42;
  void *__p;
  std::string::size_type *v44;
  _QWORD *v45;
  char *v46;
  uint64_t *v47;

  sub_20BDDC0E4(&__p, "|");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a1, (char *)&__p, (uint64_t *)&v41);
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = v41;
  for (i = v42; v4 != i; ++v4)
  {
    v6 = std::string::find(v4, 58, 0);
    if (v6 == -1)
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v39);
      v13 = v39.__r_.__value_.__r.__words[0];
      v39.__r_.__value_.__r.__words[0] = 0;
      v15 = (std::string::size_type *)a2[1];
      v14 = a2[2];
      if ((unint64_t)v15 >= v14)
      {
        v28 = ((uint64_t)v15 - *a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          sub_20BDDF694();
        v30 = v14 - *a2;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        v47 = a2 + 2;
        v32 = (char *)sub_20BDEA2F0((uint64_t)(a2 + 2), v31);
        v33 = (std::string::size_type *)&v32[16 * v28];
        __p = v32;
        v44 = v33;
        v46 = &v32[16 * v34];
        *v33 = v13;
        v33[1] = 0;
        v45 = v33 + 2;
        sub_20C1F3728(a2, &__p);
        v16 = (_QWORD *)a2[1];
        sub_20C1F38C8((uint64_t)&__p);
      }
      else
      {
        *v15 = v13;
        v15[1] = 0;
        v16 = v15 + 2;
        a2[1] = (uint64_t)(v15 + 2);
      }
      a2[1] = (uint64_t)v16;
      if ((v39.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v35 = (unsigned int *)(v39.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
    }
    else
    {
      v7 = v6;
      std::string::basic_string(&v39, v4, 0, v6, (std::allocator<char> *)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v40);
      std::string::basic_string(&v37, v4, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v38);
      v8 = v40;
      v40 = 0;
      v9 = v38;
      v38 = 0;
      v11 = (std::string::size_type *)a2[1];
      v10 = a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v17 = ((uint64_t)v11 - *a2) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          sub_20BDDF694();
        v19 = v10 - *a2;
        if (v19 >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v47 = a2 + 2;
        v21 = (char *)sub_20BDEA2F0((uint64_t)(a2 + 2), v20);
        v22 = (std::string::size_type *)&v21[16 * v17];
        __p = v21;
        v44 = v22;
        v46 = &v21[16 * v23];
        *v22 = v8;
        v22[1] = v9;
        v45 = v22 + 2;
        sub_20C1F3728(a2, &__p);
        v12 = (_QWORD *)a2[1];
        sub_20C1F38C8((uint64_t)&__p);
      }
      else
      {
        *v11 = v8;
        v11[1] = v9;
        v12 = v11 + 2;
        a2[1] = (uint64_t)(v11 + 2);
      }
      a2[1] = (uint64_t)v12;
      if ((v38 & 7) != 0)
      {
        v24 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if ((v40 & 7) != 0)
      {
        v26 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  __p = &v41;
  sub_20BDE5038((void ***)&__p);
}

void sub_20C1F2E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::CreateStringFromStringVec@<X0>(std::string **a1@<X0>, std::string *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::TfStringJoin("|", a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsPropertyAnAssetIdentifier(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2)
    v2 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  result = (uint64_t)sub_20BF2B2B4(a1, (_QWORD *)v2 + 5);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
    v4 = sub_20C1F30AC();
    v5 = v12;
    if ((v12 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFFFF8)
      || (v6 = (_QWORD *)sub_20C1F30AC(), v5 = v12, (v12 & 0xFFFFFFFFFFFFFFF8) == (*v6 & 0xFFFFFFFFFFFFFFF8))
      || (v7 = sub_20C1F30AC(),
          v5 = v12,
          v8 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8),
          (v12 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8)))
    {
      if ((v5 & 7) != 0)
      {
        v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      return 1;
    }
    else
    {
      if ((v12 & 7) != 0)
      {
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_20C1F30AC()
{
  char *v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_254987F78);
  if (!v0)
  {
    v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "filename", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "fileInput", 0);
    v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "assetIdInput", 0);
    v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "terminal", 0);
    v5 = *(void ***)v0;
    v36 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v36 = (void **)v6;
    }
    v8 = (unsigned int *)*v2;
    v37 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v37 = v9;
    }
    v11 = (unsigned int *)*v3;
    v38 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 = v12;
    }
    v14 = (unsigned int *)*v4;
    v39 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v39 = v15;
    }
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 6) = 0;
    v17 = operator new(0x20uLL);
    v18 = 0;
    *((_QWORD *)v0 + 4) = v17;
    *((_QWORD *)v0 + 5) = v17;
    *((_QWORD *)v0 + 6) = v17 + 4;
    do
    {
      v19 = (unint64_t)(&v36)[v18];
      *v17 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v18;
      ++v17;
    }
    while (v18 != 4);
    v22 = (void ***)&v40;
    *((_QWORD *)v0 + 5) = v17;
    do
    {
      v24 = (uint64_t)*--v22;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &v36);
    while (!__ldaxr(&qword_254987F78))
    {
      if (!__stlxr((unint64_t)v0, &qword_254987F78))
        return (unint64_t)v0;
    }
    __clrex();
    v36 = (void **)(v0 + 32);
    sub_20BEEB2B8(&v36);
    if ((*v4 & 7) != 0)
    {
      v28 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((*v3 & 7) != 0)
    {
      v30 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((*v2 & 7) != 0)
    {
      v32 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v34 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    operator delete(v0);
    return atomic_load(&qword_254987F78);
  }
  return (unint64_t)v0;
}

void sub_20C1F338C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      operator delete(v16);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsPropertyATerminal(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v2;
  _QWORD *v3;
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *v6;
  const char *v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  const char *v12;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2)
    v2 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v3 = sub_20BF2B2B4(a1, (_QWORD *)v2 + 3);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1F30AC();
  v6 = (*((_QWORD *)v5 + 3) & 0xFFFFFFFFFFFFFFF8) != 0
     ? (uint64_t *)((*((_QWORD *)v5 + 3) & 0xFFFFFFFFFFFFFFF8) + 16)
     : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  v7 = *((char *)v6 + 23) >= 0 ? (const char *)v6 : (const char *)*v6;
  v8 = *((char *)v4 + 47);
  v9 = v8 >= 0 ? *((unsigned __int8 *)v4 + 47) : v4[4];
  v10 = strlen(v7);
  if (v9 >= v10
    && ((v11 = v10, v8 >= 0) ? (v12 = (const char *)(v4 + 3)) : (v12 = (const char *)v4[3]), !strncmp(v12, v7, v11)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

_QWORD **pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::GetRoleFromMetadata@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v4;
  _QWORD **result;
  pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4)
    v4 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  result = (_QWORD **)sub_20BF2B2B4(a1, (_QWORD *)v4 + 4);
  if (!result)
    goto LABEL_18;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  v6 = (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (!v6)
    v6 = sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  v7 = (_QWORD *)*((_QWORD *)v6 + 1);
  v8 = (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (!v8)
    v8 = sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  v9 = (_QWORD *)*((_QWORD *)v8 + 2);
  if (v7 != v9)
  {
    while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v7 == v9)
      {
        v7 = (_QWORD *)*((_QWORD *)v8 + 2);
        break;
      }
    }
  }
  result = (_QWORD **)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (!result)
    result = (_QWORD **)sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (v7 == result[2])
  {
    if ((*a2 & 7) != 0)
    {
      v10 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
LABEL_18:
    *a2 = 0;
  }
  return result;
}

void sub_20C1F3668(_Unwind_Exception *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;

  if ((*v1 & 7) != 0)
  {
    v2 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void sub_20C1F3690(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C1F36D0((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_20C1F36D0(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  for (i = *(_QWORD *)(result + 8); i != a2; i -= 16)
  {
    v3 = *(_QWORD *)(i - 8);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    v7 = *(_QWORD *)(i - 16);
    v6 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_20C1F3728(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C1F379C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C1F379C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(a3 - 2);
      a3 -= 2;
      *(_QWORD *)(v7 - 16) = v8;
      *a3 = 0;
      *(_QWORD *)(v7 - 8) = a3[1];
      a3[1] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 16;
      *((_QWORD *)&v14 + 1) -= 16;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C1F3834((uint64_t)v11);
  return v9;
}

uint64_t sub_20C1F3834(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1F3868(a1);
  return a1;
}

uint64_t sub_20C1F3868(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1[1];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    if ((*v1 & 7) != 0)
    {
      v6 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    v1 += 2;
  }
  return result;
}

uint64_t sub_20C1F38C8(uint64_t a1)
{
  sub_20C1F38FC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C1F38FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  while (1)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2 == a2)
      break;
    v3 = (uint64_t *)(v2 - 16);
    *(_QWORD *)(result + 16) = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    v7 = *v3;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *sub_20C1F3958(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *result;
  void *v4;

  result = sub_20C1F39A0();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::~SdrPropertyMetadata_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *sub_20C1F39A0()
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)operator new(0xC0uLL);
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::SdrPropertyMetadata_StaticTokenType(v0);
  return v0;
}

void sub_20C1F39CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *sub_20C1F39E0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *result;
  void *v4;

  result = sub_20C1F3A28();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::~SdrPropertyRole_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *sub_20C1F3A28()
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::SdrPropertyRole_StaticTokenType(v0);
  return v0;
}

void sub_20C1F3A54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::~SdrNodeMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  void **v34;

  v34 = (void **)((char *)this + 88);
  sub_20BEEB2B8(&v34);
  v2 = *((_QWORD *)this + 10);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 9);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 7);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 6);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 5);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 4);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 3);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 2);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v32 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
}

pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::SdrNodeMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v46 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "category", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v46, "role", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "departments", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "help", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "label", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "pages", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "primvars", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "__SDR__implementationName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "__SDR__target", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "sdrUsdEncodingVersion", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "sdrDefinitionNameFallbackPrefix", 0);
  v2 = *(_QWORD *)this;
  v47 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v46;
  v48 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v49 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v50 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v51 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v52 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v53 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v54 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v55 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v56 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v57 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v35 = operator new(0x58uLL);
  v36 = 0;
  *((_QWORD *)this + 11) = v35;
  *((_QWORD *)this + 12) = v35;
  *((_QWORD *)this + 13) = v35 + 11;
  do
  {
    v37 = *(&v47 + v36);
    *v35 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v36;
    ++v35;
  }
  while (v36 != 11);
  v40 = &v58;
  *((_QWORD *)this + 12) = v35;
  do
  {
    v42 = *--v40;
    v41 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  while (v40 != &v47);
  return this;
}

void sub_20C1F4060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;

  sub_20BEEB2B8(&a11);
  v34 = (char *)&a24;
  while (1)
  {
    v36 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    v35 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if (v34 == &a13)
    {
      if ((*v25 & 7) != 0)
      {
        v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v33 & 7) != 0)
      {
        v41 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v32 & 7) != 0)
      {
        v43 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v31 & 7) != 0)
      {
        v45 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v30 & 7) != 0)
      {
        v47 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v29 & 7) != 0)
      {
        v49 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v28 & 7) != 0)
      {
        v51 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v27 & 7) != 0)
      {
        v53 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v26 & 7) != 0)
      {
        v55 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*a10 & 7) != 0)
      {
        v57 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v24 & 7) != 0)
      {
        v59 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C1F4248()
{
  JUMPOUT(0x20C1F41FCLL);
}

void sub_20C1F4250()
{
  JUMPOUT(0x20C1F4220);
}

void pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::~SdrNodeContext_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v28;

  v28 = (void **)((char *)this + 72);
  sub_20BEEB2B8(&v28);
  v2 = *((_QWORD *)this + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 7);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 6);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 4);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 3);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 2);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v26 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
}

pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::SdrNodeContext_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "pattern", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "light", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "displayFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "lightFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "pixelFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "sampleFilter", 0);
  v3 = *(_QWORD *)this;
  v41 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v42 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v43 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v44 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v45 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v46 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v47 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v48 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v27 = *((_QWORD *)this + 8);
  v49 = v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v30 = operator new(0x48uLL);
  v31 = 0;
  *((_QWORD *)this + 9) = v30;
  *((_QWORD *)this + 10) = v30;
  *((_QWORD *)this + 11) = v30 + 9;
  do
  {
    v32 = *(&v41 + v31);
    *v30 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        *v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v31;
    ++v30;
  }
  while (v31 != 9);
  v35 = &v50;
  *((_QWORD *)this + 10) = v30;
  do
  {
    v37 = *--v35;
    v36 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
  }
  while (v35 != &v41);
  return this;
}

void sub_20C1F4778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;

  sub_20BEEB2B8(&a9);
  v30 = &a20;
  while (1)
  {
    v32 = *--v30;
    v31 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if (v30 == (uint64_t *)&a11)
    {
      if ((*v28 & 7) != 0)
      {
        v35 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v27 & 7) != 0)
      {
        v37 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v26 & 7) != 0)
      {
        v39 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v25 & 7) != 0)
      {
        v41 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v24 & 7) != 0)
      {
        v43 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v23 & 7) != 0)
      {
        v45 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v22 & 7) != 0)
      {
        v47 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v21 & 7) != 0)
      {
        v49 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v20 & 7) != 0)
      {
        v51 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType::~SdrNodeRole_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v13 = (void **)((char *)this + 32);
  sub_20BEEB2B8(&v13);
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType::SdrNodeRole_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "primvar", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "texture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "field", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "math", 0);
  v3 = *this;
  v26 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v26 = v4;
  }
  v6 = *v2;
  v27 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v27 = v7;
  }
  v9 = this[2];
  v28 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v28 = v10;
  }
  v12 = this[3];
  v29 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v29 = v13;
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  v15 = (unsigned int *)operator new(0x20uLL);
  v16 = 0;
  this[4] = v15;
  this[5] = v15;
  this[6] = v15 + 8;
  do
  {
    v17 = (&v26)[v16];
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v20 = (unsigned int **)&v30;
  this[5] = v15;
  do
  {
    v22 = (uint64_t)*--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v26);
  return (pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType *)this;
}

void sub_20C1F4BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9, uint64_t a10, uint64_t a11, __int128 *a12)
{
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *i;
  const void *v19;
  void *v20;
  _QWORD *j;
  const void *v22;
  void *v23;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v39;
  void **v41;
  void **v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;

  v13 = pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  *(_QWORD *)v13 = &unk_24C52B600;
  v14 = (__int128 *)(v13 + 400);
  v15 = (__int128 *)(v13 + 408);
  v41 = (void **)(v13 + 440);
  v42 = (void **)(v13 + 416);
  *(_OWORD *)(v13 + 352) = 0u;
  *(_OWORD *)(v13 + 368) = 0u;
  v16 = v13 + 464;
  *(_OWORD *)(v13 + 384) = 0u;
  *(_OWORD *)(v13 + 400) = 0u;
  *(_OWORD *)(v13 + 416) = 0u;
  *(_OWORD *)(v13 + 432) = 0u;
  *(_OWORD *)(v13 + 448) = 0u;
  *(_OWORD *)(v13 + 464) = 0u;
  *(_OWORD *)(v13 + 480) = 0u;
  *(_DWORD *)(v13 + 496) = 1065353216;
  v17 = v13 + 504;
  *(_OWORD *)(v13 + 504) = 0u;
  *(_OWORD *)(v13 + 520) = 0u;
  *(_DWORD *)(v13 + 536) = 1065353216;
  for (i = *(_QWORD **)(v13 + 240); i; i = (_QWORD *)*i)
  {
    v19 = (const void *)i[3];
    if (v19)
    else
      v20 = 0;
    v45 = (unint64_t)(i + 2);
    sub_20BF2B45C(v16, i + 2, (uint64_t)&unk_20CAC184C, (uint64_t **)&v45)[3] = v20;
  }
  for (j = *(_QWORD **)(a1 + 304); j; j = (_QWORD *)*j)
  {
    v22 = (const void *)j[3];
    if (v22)
    else
      v23 = 0;
    v45 = (unint64_t)(j + 2);
    sub_20BF2B45C(v17, j + 2, (uint64_t)&unk_20CAC184C, (uint64_t **)&v45)[3] = v23;
  }
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::_InitializePrimvars((pxrInternal__aapl__pxrReserved__::SdrShaderNode *)a1);
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::_PostProcessProperties((pxrInternal__aapl__pxrReserved__::SdrShaderNode *)a1);
  v24 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v24)
    v24 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  v45 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((_QWORD *)v24 + 4, (_QWORD *)(a1 + 160), (unsigned int **)&v45, (unsigned int **)&v43);
  if (&v43 == v14)
  {
    v27 = v43;
  }
  else
  {
    if ((*(_QWORD *)v14 & 7) != 0)
    {
      v25 = (unsigned int *)(*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    v27 = 0;
    *(_QWORD *)v14 = v43;
    *(_QWORD *)&v43 = 0;
  }
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  if ((v45 & 7) != 0)
  {
    v30 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v32)
    v32 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  v45 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal(v32, (_QWORD *)(a1 + 160), (unsigned int **)&v45, (unsigned int **)&v43);
  if (&v43 == v15)
  {
    if ((v43 & 7) != 0)
    {
      v35 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
  }
  else
  {
    if ((*(_QWORD *)v15 & 7) != 0)
    {
      v33 = (unsigned int *)(*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    *(_QWORD *)v15 = v43;
    *(_QWORD *)&v43 = 0;
  }
  if ((v45 & 7) != 0)
  {
    v37 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  v39 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v39)
    v39 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVecVal((_QWORD *)v39 + 2, (_QWORD *)(a1 + 160), (char **)&v43);
  sub_20C0B4038(v42);
  *(_OWORD *)(a1 + 416) = v43;
  *(_QWORD *)(a1 + 432) = v44;
  v44 = 0;
  v43 = 0uLL;
  v45 = (unint64_t)&v43;
  sub_20BEEB2B8((void ***)&v45);
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::_ComputePages((char *)a1, (uint64_t)&v43);
  sub_20C0B4038(v41);
  *(_OWORD *)v41 = v43;
  *(_QWORD *)(a1 + 456) = v44;
  v44 = 0;
  v43 = 0uLL;
  v45 = (unint64_t)&v43;
  sub_20BEEB2B8((void ***)&v45);
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_20C1F5068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15)
{
  void **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;

  sub_20BF20BCC(v18);
  sub_20BF20BCC(v17);
  a15 = a13;
  sub_20BEEB2B8(&a15);
  a15 = a14;
  sub_20BEEB2B8(&a15);
  if ((*v16 & 7) != 0)
  {
    v21 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  if ((*v19 & 7) != 0)
  {
    v23 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  a15 = v15 + 47;
  sub_20BEEB2B8(&a15);
  a15 = v15 + 44;
  sub_20BEEB2B8(&a15);
  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrShaderNode::_InitializePrimvars(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _QWORD *ShaderInput;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v12;
  const char *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  std::string::size_type v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int64x2_t v45;
  char *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  std::string __p;
  uint64_t v51;
  uint64_t v52;
  int64x2_t v53;
  _QWORD v54[2];
  int64x2_t v55;
  _QWORD v56[2];
  unint64_t v57;
  int64x2_t v58;
  char *v59;
  _QWORD *v60;

  v55 = 0uLL;
  v56[0] = 0;
  v53 = 0uLL;
  v54[0] = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v2)
    v2 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVecVal((_QWORD *)v2 + 6, (_QWORD *)this + 20, &v51);
  v3 = v51;
  for (i = v52; v3 != i; v3 += 24)
  {
    v5 = *(unsigned __int8 *)(v3 + 23);
    v6 = (char)v5;
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(v3 + 8);
    if (!v5)
      goto LABEL_23;
    v7 = *(_BYTE **)v3;
    if (v6 >= 0)
      v7 = (_BYTE *)v3;
    if (*v7 == 36)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTrimLeft("$", (const std::string *)v3, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
      ShaderInput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57);
      v9 = ShaderInput;
      if ((v57 & 7) != 0)
      {
        v10 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      if (!ShaderInput)
        goto LABEL_74;
      v12 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v12)
        v12 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if ((v9[2] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v49);
        v33 = v53.i64[1];
        if (v53.i64[1] >= v54[0])
        {
          v36 = (v53.i64[1] - v53.i64[0]) >> 3;
          if ((unint64_t)(v36 + 1) >> 61)
            sub_20BDDF694();
          v37 = (v54[0] - v53.i64[0]) >> 2;
          if (v37 <= v36 + 1)
            v37 = v36 + 1;
          if (v54[0] - v53.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          v60 = v54;
          if (v38)
            v39 = (char *)sub_20BDDF6A8((uint64_t)v54, v38);
          else
            v39 = 0;
          v40 = &v39[8 * v36];
          v41 = &v39[8 * v38];
          v59 = v41;
          *(_QWORD *)v40 = v49;
          v35 = v40 + 8;
          v49 = 0;
          v58.i64[1] = (uint64_t)(v40 + 8);
          v42 = (_QWORD *)v53.i64[1];
          v43 = (_QWORD *)v53.i64[0];
          if (v53.i64[1] == v53.i64[0])
          {
            v45 = vdupq_n_s64(v53.u64[1]);
          }
          else
          {
            do
            {
              v44 = *--v42;
              *((_QWORD *)v40 - 1) = v44;
              v40 -= 8;
              *v42 = 0;
            }
            while (v42 != v43);
            v45 = v53;
            v35 = (_QWORD *)v58.i64[1];
            v41 = v59;
          }
          v53.i64[0] = (uint64_t)v40;
          v53.i64[1] = (uint64_t)v35;
          v58 = v45;
          v46 = (char *)v54[0];
          v54[0] = v41;
          v59 = v46;
          v57 = v45.i64[0];
          sub_20BF1EE98((uint64_t)&v57);
          v34 = v49;
        }
        else
        {
          v34 = 0;
          *(_QWORD *)v53.i64[1] = v49;
          v35 = (_QWORD *)(v33 + 8);
          v49 = 0;
        }
        v53.i64[1] = (uint64_t)v35;
        if ((v34 & 7) != 0)
        {
          v47 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
          do
            v48 = __ldxr(v47);
          while (__stlxr(v48 - 2, v47));
        }
      }
      else
      {
LABEL_74:
        if (sub_20C1E8FF8(1))
        {
          v15 = (char *)this + 40;
          if (*((char *)this + 63) < 0)
            v15 = (char *)*((_QWORD *)this + 5);
          v16 = (_BYTE *)v3;
          if (*(char *)(v3 + 23) < 0)
            v16 = *(_BYTE **)v3;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found a node [%s] whose metadata indicates a primvar naming property [%s] but the property's type is not string; ignoring.",
            v13,
            v14,
            v15,
            v16);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_23:
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
      v17 = v55.i64[1];
      if (v55.i64[1] >= v56[0])
      {
        v20 = (v55.i64[1] - v55.i64[0]) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          sub_20BDDF694();
        v21 = (v56[0] - v55.i64[0]) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if (v56[0] - v55.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        v60 = v56;
        if (v22)
          v23 = (char *)sub_20BDDF6A8((uint64_t)v56, v22);
        else
          v23 = 0;
        v24 = &v23[8 * v20];
        v25 = &v23[8 * v22];
        v59 = v25;
        *(_QWORD *)v24 = __p.__r_.__value_.__r.__words[0];
        v19 = v24 + 8;
        __p.__r_.__value_.__r.__words[0] = 0;
        v58.i64[1] = (uint64_t)(v24 + 8);
        v26 = (_QWORD *)v55.i64[1];
        v27 = (_QWORD *)v55.i64[0];
        if (v55.i64[1] == v55.i64[0])
        {
          v29 = vdupq_n_s64(v55.u64[1]);
        }
        else
        {
          do
          {
            v28 = *--v26;
            *((_QWORD *)v24 - 1) = v28;
            v24 -= 8;
            *v26 = 0;
          }
          while (v26 != v27);
          v29 = v55;
          v19 = (_QWORD *)v58.i64[1];
          v25 = v59;
        }
        v55.i64[0] = (uint64_t)v24;
        v55.i64[1] = (uint64_t)v19;
        v58 = v29;
        v30 = (char *)v56[0];
        v56[0] = v25;
        v59 = v30;
        v57 = v29.i64[0];
        sub_20BF1EE98((uint64_t)&v57);
        v18 = __p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v18 = 0;
        *(_QWORD *)v55.i64[1] = __p.__r_.__value_.__r.__words[0];
        v19 = (_QWORD *)(v17 + 8);
        __p.__r_.__value_.__r.__words[0] = 0;
      }
      v55.i64[1] = (uint64_t)v19;
      if ((v18 & 7) != 0)
      {
        v31 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
    }
  }
  if ((int64x2_t *)((char *)this + 352) != &v55)
    sub_20C106430((_QWORD *)this + 44, (uint64_t *)v55.i64[0], (uint64_t *)v55.i64[1], (v55.i64[1] - v55.i64[0]) >> 3);
  if ((int64x2_t *)((char *)this + 376) != &v53)
    sub_20C106430((_QWORD *)this + 47, (uint64_t *)v53.i64[0], (uint64_t *)v53.i64[1], (v53.i64[1] - v53.i64[0]) >> 3);
  v57 = (unint64_t)&v51;
  sub_20BDE5038((void ***)&v57);
  v57 = (unint64_t)&v53;
  sub_20BEEB2B8((void ***)&v57);
  v57 = (unint64_t)&v55;
  sub_20BEEB2B8((void ***)&v57);
}

void sub_20C1F55D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char **a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  unsigned int *v27;
  unsigned int v28;

  if ((a12 & 7) != 0)
  {
    v27 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if (a18 < 0)
    operator delete(__p);
  __p = &a19;
  sub_20BDE5038((void ***)&__p);
  a19 = &a22;
  sub_20BEEB2B8((void ***)&a19);
  a22 = &a26;
  sub_20BEEB2B8((void ***)&a22);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrShaderNode::_PostProcessProperties(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v2;
  int v3;
  const void **v4;
  const void **i;
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v2)
    v2 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  v3 = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IntVal((_QWORD *)v2 + 9, (_QWORD *)this + 20, 0xFFFFFFFFLL);
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetAllVstructNames(this, &v8);
  v4 = (const void **)*((_QWORD *)this + 17);
  for (i = (const void **)*((_QWORD *)this + 18); v4 != i; ++v4)
  {
    if (*v4)
    else
      v6 = 0;
    if (v3 != -1)
      pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_SetUsdEncodingVersion((uint64_t)v6, v3);
    v7 = v8;
    if (v8 != v9)
    {
      while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v7 == v9)
        {
          v7 = v9;
          break;
        }
      }
    }
    if (v7 != v9)
      pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_ConvertToVStruct(v6);
    pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_FinalizeProperty(v6);
  }
  v10 = (void **)&v8;
  sub_20BEEB2B8(&v10);
}

void sub_20C1F57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdrShaderNode::_ComputePages@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  v3 = (_QWORD *)*((_QWORD *)this + 18);
  if (v2 != v3)
  {
    this = 0;
    do
    {
      v5 = (uint64_t *)(*v2 + 200);
      v6 = this;
      if (*(char **)a2 != this)
      {
        v6 = *(char **)a2;
        while ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != (*v5 & 0xFFFFFFFFFFFFFFF8))
        {
          v6 += 8;
          if (v6 == this)
          {
            v6 = this;
            break;
          }
        }
      }
      if (v6 == this)
      {
        if ((unint64_t)this >= *(_QWORD *)(a2 + 16))
        {
          this = sub_20BFCA068((char **)a2, v5);
        }
        else
        {
          v7 = *v5;
          *(_QWORD *)this = *v5;
          if ((v7 & 7) != 0)
          {
            v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
            do
              v9 = __ldxr(v8);
            while (__stxr(v9 + 2, v8));
            if ((v9 & 1) == 0)
              *(_QWORD *)this &= 0xFFFFFFFFFFFFFFF8;
          }
          this += 8;
        }
        *(_QWORD *)(a2 + 8) = this;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_20C1F590C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetAllVstructNames@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **i;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v13;
  uint64_t *EmptyString;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v31;
  __int128 v32;
  int v33;

  v31 = 0u;
  v32 = 0u;
  v33 = 1065353216;
  for (i = (uint64_t **)*((_QWORD *)this + 60); i; i = (uint64_t **)*i)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*i[3] + 24))(i[3]);
    v6 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v6)
      v6 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF2B2B4(v5, (_QWORD *)v6 + 10);
    if (!v7)
      goto LABEL_14;
    v8 = (_QWORD *)((char *)v7 + 24);
    v9 = *((char *)v7 + 47);
    if (v9 < 0)
    {
      if (*((_QWORD *)v7 + 4) != 7)
        goto LABEL_14;
      v8 = (_QWORD *)*v8;
    }
    else if (v9 != 7)
    {
      goto LABEL_14;
    }
    v10 = *(_DWORD *)v8;
    v11 = *(_DWORD *)((char *)v8 + 3);
    if (v10 == 1920234358 && v11 == 1952675186)
    {
      if (((unint64_t)i[2] & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_20;
      EmptyString = (uint64_t *)(((unint64_t)i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      goto LABEL_21;
    }
LABEL_14:
    if (!pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStructMember((pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)i[3]))
      continue;
    v13 = i[3] + 27;
    v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF2B2B4((_QWORD *)this + 58, v13);
    if (!v7)
      continue;
    if ((*v13 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_20:
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      goto LABEL_21;
    }
    EmptyString = (uint64_t *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_21:
    sub_20C086844((uint64_t)&v31, (unsigned __int8 *)EmptyString, (uint64_t)EmptyString);
  }
  v15 = (uint64_t **)*((_QWORD *)this + 65);
  if (v15)
  {
    v16 = (_QWORD *)((char *)this + 504);
    do
    {
      v17 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v15[3] + 24))(v15[3]);
      v18 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v18)
        v18 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF2B2B4(v17, (_QWORD *)v18 + 10);
      if (!v19)
        goto LABEL_37;
      v20 = (_QWORD *)((char *)v19 + 24);
      v21 = *((char *)v19 + 47);
      if (v21 < 0)
      {
        if (*((_QWORD *)v19 + 4) != 7)
          goto LABEL_37;
        v20 = (_QWORD *)*v20;
      }
      else if (v21 != 7)
      {
        goto LABEL_37;
      }
      v22 = *(_DWORD *)v20;
      v23 = *(_DWORD *)((char *)v20 + 3);
      if (v22 == 1920234358 && v23 == 1952675186)
      {
        if (((unint64_t)v15[2] & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_43;
        v26 = (uint64_t *)(((unint64_t)v15[2] & 0xFFFFFFFFFFFFFFF8) + 16);
        goto LABEL_44;
      }
LABEL_37:
      if (!pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStructMember((pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)v15[3]))
        goto LABEL_45;
      v25 = v15[3] + 27;
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF2B2B4(v16, v25);
      if (!v19)
        goto LABEL_45;
      if ((*v25 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_43:
        v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
        goto LABEL_44;
      }
      v26 = (uint64_t *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_44:
      sub_20C086844((uint64_t)&v31, (unsigned __int8 *)v26, (uint64_t)v26);
LABEL_45:
      v15 = (uint64_t **)*v15;
    }
    while (v15);
  }
  v27 = (_QWORD *)v32;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v28 = 0;
  if (v27)
  {
    v29 = v27;
    do
    {
      ++v28;
      v29 = (_QWORD *)*v29;
    }
    while (v29);
  }
  sub_20C1F6228(a2, v27, 0, v28);
  return sub_20BEB3F28((uint64_t)&v31);
}

void sub_20C1F5BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB3F28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::NdrNode::GetInput(this, a2);
  if (result)
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::NdrNode::GetOutput(this, a2);
  if (result)
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetAssetIdentifierInputNames@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(this);
  v5 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)result;
  v6 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(result + 8);
  while (v5 != v6)
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(this, v5);
    v7 = result;
    if (result)
    {
      result = pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsAssetIdentifier((pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)result);
      if ((_DWORD)result)
      {
        v8 = (uint64_t *)(v7 + 8);
        v9 = *(uint64_t **)(a2 + 8);
        if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
        {
          result = (uint64_t)sub_20BFCA068((char **)a2, v8);
        }
        else
        {
          v10 = *v8;
          *v9 = *v8;
          if ((v10 & 7) != 0)
          {
            v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 2, v11));
            if ((v12 & 1) == 0)
              *v9 &= 0xFFFFFFFFFFFFFFF8;
          }
          result = (uint64_t)(v9 + 1);
        }
        *(_QWORD *)(a2 + 8) = result;
      }
    }
    v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
  }
  return result;
}

void sub_20C1F5D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrShaderProperty *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetDefaultInput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this)
{
  uint64_t InputNames;
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *ShaderInput;
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *v6;

  InputNames = pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(this);
  v3 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)InputNames;
  v4 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(InputNames + 8);
  while (v3 != v4)
  {
    ShaderInput = (pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(this, v3);
    if (ShaderInput)
    {
      v6 = ShaderInput;
      if (pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsDefaultInput(ShaderInput))
        return v6;
    }
    v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 + 8);
  }
  return 0;
}

void pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetHelp(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v4;
  void *__p[2];
  uint64_t v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v4)
    v4 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((_QWORD *)v4 + 3, (_QWORD *)this + 20, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20C1F5E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetImplementationName@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v4)
    v4 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  return pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((_QWORD *)v4 + 7, (_QWORD *)this + 20, (uint64_t)this + 40, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetRole@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v4)
    v4 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  return pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((_QWORD *)v4 + 1, (_QWORD *)this + 20, (uint64_t)this + 40, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetPropertyNamesForPage@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v3;
  const void **i;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(const void ***)(result + 136);
  for (i = *(const void ***)(result + 144); v3 != i; ++v3)
  {
    if (*v3)
    else
      v7 = 0;
    result = pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 200), a2);
    if ((_DWORD)result)
    {
      v8 = (uint64_t *)(v7 + 8);
      v9 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v9 >= *(_QWORD *)(a3 + 16))
      {
        result = (uint64_t)sub_20BFCA068((char **)a3, v8);
      }
      else
      {
        v10 = *v8;
        *v9 = *v8;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        result = (uint64_t)(v9 + 1);
      }
      *(_QWORD *)(a3 + 8) = result;
    }
  }
  return result;
}

void sub_20C1F5FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C1F6004(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void **v8;

  *(_QWORD *)a1 = &unk_24C52B600;
  sub_20BF20BCC(a1 + 504);
  sub_20BF20BCC(a1 + 464);
  v8 = (void **)(a1 + 440);
  sub_20BEEB2B8(&v8);
  v8 = (void **)(a1 + 416);
  sub_20BEEB2B8(&v8);
  v2 = *(_QWORD *)(a1 + 408);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 400);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = (void **)(a1 + 376);
  sub_20BEEB2B8(&v8);
  v8 = (void **)(a1 + 352);
  sub_20BEEB2B8(&v8);
  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode((void **)a1);
}

void sub_20C1F60D0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  void **v9;

  *(_QWORD *)a1 = &unk_24C52B600;
  sub_20BF20BCC(a1 + 504);
  sub_20BF20BCC(a1 + 464);
  v9 = (void **)(a1 + 440);
  sub_20BEEB2B8(&v9);
  v9 = (void **)(a1 + 416);
  sub_20BEEB2B8(&v9);
  v2 = *(_QWORD *)(a1 + 408);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 400);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v9 = (void **)(a1 + 376);
  sub_20BEEB2B8(&v9);
  v9 = (void **)(a1 + 352);
  sub_20BEEB2B8(&v9);
  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode((void **)a1);
  operator delete(v8);
}

pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *sub_20C1F61A0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *result;
  void *v4;

  result = sub_20C1F61E8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::~SdrNodeMetadata_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *sub_20C1F61E8()
{
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::SdrNodeMetadata_StaticTokenType(v0);
  return v0;
}

void sub_20C1F6214(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1F6228(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = (_QWORD *)sub_20C1F62AC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C1F628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1F62AC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4 + v7);
      v6 = (_QWORD *)*v6;
      v7 += 8;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C1F6314(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (v3)
  {
    do
    {
      v5 = *(_QWORD *)(v2 - 8);
      v2 -= 8;
      v4 = v5;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
    }
    while (v2 != v1);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *sub_20C1F6344(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *result;
  void *v4;

  result = sub_20C1F638C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::~SdrPropertyTypes_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *sub_20C1F638C()
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::SdrPropertyTypes_StaticTokenType(v0);
  return v0;
}

void sub_20C1F63B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::~SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  void **v43;

  v43 = (void **)((char *)this + 112);
  sub_20BEEB2B8(&v43);
  v2 = *((_QWORD *)this + 13);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 11);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 10);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 9);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 8);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 7);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 6);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 5);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 4);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 3);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 2);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v41 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v55 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "int", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v55, "string", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "float", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "half", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "color4", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "point", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "normal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "vector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "matrix", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "struct", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "terminal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "vstruct", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "unknown", 0);
  v2 = *(_QWORD *)this;
  v56 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v55;
  v57 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v58 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v59 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v60 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v61 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v62 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v63 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v64 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v65 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v66 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v67 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v68 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v69 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v44 = operator new(0x70uLL);
  v45 = 0;
  *((_QWORD *)this + 14) = v44;
  *((_QWORD *)this + 15) = v44;
  *((_QWORD *)this + 16) = v44 + 14;
  do
  {
    v46 = *(&v56 + v45);
    *v44 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
      if ((v48 & 1) == 0)
        *v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v45;
    ++v44;
  }
  while (v45 != 14);
  v49 = &v70;
  *((_QWORD *)this + 15) = v44;
  do
  {
    v51 = *--v49;
    v50 = v51;
    if ((v51 & 7) != 0)
    {
      v52 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
  }
  while (v49 != &v56);
  return this;
}

void sub_20C1F6B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, void **a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;

  sub_20BEEB2B8(&a15);
  v41 = (char *)&a31;
  while (1)
  {
    v43 = *((_QWORD *)v41 - 1);
    v41 -= 8;
    v42 = v43;
    if ((v43 & 7) != 0)
    {
      v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if (v41 == &a17)
    {
      if ((*v35 & 7) != 0)
      {
        v46 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v34 & 7) != 0)
      {
        v48 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*v33 & 7) != 0)
      {
        v50 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v32 & 7) != 0)
      {
        v52 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v40 & 7) != 0)
      {
        v54 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v39 & 7) != 0)
      {
        v56 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v38 & 7) != 0)
      {
        v58 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v37 & 7) != 0)
      {
        v60 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v36 & 7) != 0)
      {
        v62 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*a11 & 7) != 0)
      {
        v64 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*a12 & 7) != 0)
      {
        v66 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*a13 & 7) != 0)
      {
        v68 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a14 & 7) != 0)
      {
        v70 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v31 & 7) != 0)
      {
        v72 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C1F6D68()
{
  JUMPOUT(0x20C1F6CB0);
}

void sub_20C1F6D70()
{
  JUMPOUT(0x20C1F6CD4);
}

void sub_20C1F6D78()
{
  JUMPOUT(0x20C1F6CF8);
}

void sub_20C1F6D80()
{
  JUMPOUT(0x20C1F6D1CLL);
}

void sub_20C1F6D88()
{
  JUMPOUT(0x20C1F6D40);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::~SdrPropertyMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  void **v64;

  v64 = (void **)((char *)this + 168);
  sub_20BEEB2B8(&v64);
  v2 = *((_QWORD *)this + 20);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 19);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 18);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 17);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 16);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 15);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 14);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 13);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 12);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 11);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 10);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 9);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 8);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 7);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 6);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 5);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 4);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 3);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 2);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 1);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v62 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::SdrPropertyMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v76 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "label", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v76, "help", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "page", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "renderType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "role", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "widget", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "hints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "options", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "isDynamicArray", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "connectable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "tag", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "validConnectionTypes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "vstructMemberOf", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "vstructMemberName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "vstructConditionalExpr", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "__SDR__isAssetIdentifier", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "__SDR__implementationName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "sdrUsdDefinitionType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "__SDR__defaultinput", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "__SDR__target", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "__SDR__colorspace", 0);
  v2 = *(_QWORD *)this;
  v77 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v76;
  v78 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v79 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v80 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v81 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v82 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v83 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v84 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v85 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v86 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v87 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v88 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v89 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v90 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v91 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v92 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v93 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v94 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v95 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v96 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v97 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v65 = operator new(0xA8uLL);
  v66 = 0;
  *((_QWORD *)this + 21) = v65;
  *((_QWORD *)this + 22) = v65;
  *((_QWORD *)this + 23) = v65 + 21;
  do
  {
    v67 = *(&v77 + v66);
    *v65 = v67;
    if ((v67 & 7) != 0)
    {
      v68 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 2, v68));
      if ((v69 & 1) == 0)
        *v65 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v66;
    ++v65;
  }
  while (v66 != 21);
  v70 = &v98;
  *((_QWORD *)this + 22) = v65;
  do
  {
    v72 = *--v70;
    v71 = v72;
    if ((v72 & 7) != 0)
    {
      v73 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
  }
  while (v70 != &v77);
  return this;
}

void sub_20C1F77EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,void **a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;

  sub_20BEEB2B8(&a22);
  v55 = (char *)&a45;
  while (1)
  {
    v57 = *((_QWORD *)v55 - 1);
    v55 -= 8;
    v56 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if (v55 == &a24)
    {
      if ((*v47 & 7) != 0)
      {
        v60 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v46 & 7) != 0)
      {
        v62 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v54 & 7) != 0)
      {
        v64 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v53 & 7) != 0)
      {
        v66 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v52 & 7) != 0)
      {
        v68 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v51 & 7) != 0)
      {
        v70 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v50 & 7) != 0)
      {
        v72 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v49 & 7) != 0)
      {
        v74 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v48 & 7) != 0)
      {
        v76 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a11 & 7) != 0)
      {
        v78 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a12 & 7) != 0)
      {
        v80 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a13 & 7) != 0)
      {
        v82 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a14 & 7) != 0)
      {
        v84 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a15 & 7) != 0)
      {
        v86 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a16 & 7) != 0)
      {
        v88 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a17 & 7) != 0)
      {
        v90 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a18 & 7) != 0)
      {
        v92 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a19 & 7) != 0)
      {
        v94 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a20 & 7) != 0)
      {
        v96 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a21 & 7) != 0)
      {
        v98 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*v45 & 7) != 0)
      {
        v100 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C1F7B3C()
{
  JUMPOUT(0x20C1F7988);
}

void sub_20C1F7B44()
{
  JUMPOUT(0x20C1F79ACLL);
}

void sub_20C1F7B4C()
{
  JUMPOUT(0x20C1F79D0);
}

void sub_20C1F7B54()
{
  JUMPOUT(0x20C1F79F4);
}

void sub_20C1F7B5C()
{
  JUMPOUT(0x20C1F7A18);
}

void sub_20C1F7B64()
{
  JUMPOUT(0x20C1F7A3CLL);
}

void sub_20C1F7B6C()
{
  JUMPOUT(0x20C1F7A60);
}

void sub_20C1F7B74()
{
  JUMPOUT(0x20C1F7A84);
}

void sub_20C1F7B7C()
{
  JUMPOUT(0x20C1F7AA8);
}

void sub_20C1F7B84()
{
  JUMPOUT(0x20C1F7ACCLL);
}

void sub_20C1F7B8C()
{
  JUMPOUT(0x20C1F7AF0);
}

void sub_20C1F7B94()
{
  JUMPOUT(0x20C1F7B14);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::~SdrPropertyRole_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::SdrPropertyRole_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "none", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C1F7D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType::~SdrPropertyTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType::SdrPropertyTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, ":", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C1F7EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty(uint64_t a1, uint64_t *a2, unsigned int **a3, _QWORD *a4, int a5, unsigned int *a6, _QWORD *a7, uint64_t a8, uint64_t **a9)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  void **v20;
  void **v21;
  void **v22;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v25;
  BOOL IsTruthy;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v38;
  unsigned int *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v62;
  unsigned int *v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v77;
  void **v79;
  void **v80;
  void **v81;
  void *__p[2];
  uint64_t v83;
  char v84;
  unsigned int *v85[2];
  unsigned int *v86;

  v86 = a6;
  sub_20C1F88EC(a3, &v86, a7, (unsigned int **)__p);
  sub_20C1F88EC(a3, &v86, a7, v85);
  pxrInternal__aapl__pxrReserved__::NdrProperty::NdrProperty(a1, a2, (uint64_t *)__p, a4, a5, (uint64_t)v85[1], 0, (uint64_t)a7);
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  *(_QWORD *)a1 = off_24C52B630;
  sub_20C1E96B8(a1 + 104, a8);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_20C1FD1B0((uint64_t *)(a1 + 144), *a9, a9[1], ((char *)a9[1] - (char *)*a9) >> 4);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  v20 = (void **)(a1 + 200);
  *(_OWORD *)(a1 + 216) = 0u;
  v21 = (void **)(a1 + 216);
  v80 = (void **)(a1 + 208);
  v81 = (void **)(a1 + 192);
  v79 = (void **)(a1 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v22 = (void **)(a1 + 232);
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 256) = 1;
  v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v23)
    v23 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  *(_BYTE *)(a1 + 56) = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy((_QWORD *)v23 + 8, (_QWORD *)(a1 + 64));
  if (a5)
  {
    *(_BYTE *)(a1 + 57) = 1;
  }
  else
  {
    v24 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v24)
      v24 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (sub_20BF2B2B4((_QWORD *)(a1 + 64), (_QWORD *)v24 + 9))
    {
      v25 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v25)
        v25 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      IsTruthy = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy((_QWORD *)v25 + 9, (_QWORD *)(a1 + 64));
    }
    else
    {
      IsTruthy = 1;
    }
    *(_BYTE *)(a1 + 57) = IsTruthy;
  }
  v27 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v27)
    v27 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  sub_20C1FBB44((uint64_t *)__p, (uint64_t *)v27 + 5, "default");
  sub_20C1FD34C(a1 + 64, __p, (uint64_t *)__p);
  if (v84 < 0)
    operator delete(__p[1]);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v28 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v30)
    v30 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v85[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal(v30, (_QWORD *)(a1 + 64), v85, (unsigned int **)__p);
  if (__p == v81)
  {
    v33 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v81 & 7) != 0)
    {
      v31 = (unsigned int *)((unint64_t)*v81 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    v33 = 0;
    *v81 = __p[0];
    __p[0] = 0;
  }
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v36 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v38)
    v38 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v85[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((_QWORD *)v38 + 2, (_QWORD *)(a1 + 64), v85, (unsigned int **)__p);
  if (__p == v20)
  {
    v41 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v20 & 7) != 0)
    {
      v39 = (unsigned int *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    v41 = 0;
    *v20 = __p[0];
    __p[0] = 0;
  }
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v44 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  v46 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v46)
    v46 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v85[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((_QWORD *)v46 + 5, (_QWORD *)(a1 + 64), v85, (unsigned int **)__p);
  if (__p == v80)
  {
    v49 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v80 & 7) != 0)
    {
      v47 = (unsigned int *)((unint64_t)*v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
    v49 = 0;
    *v80 = __p[0];
    __p[0] = 0;
  }
  if ((v49 & 7) != 0)
  {
    v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  v54 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v54)
    v54 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v85[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((_QWORD *)v54 + 12, (_QWORD *)(a1 + 64), v85, (unsigned int **)__p);
  if (__p == v21)
  {
    v57 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v21 & 7) != 0)
    {
      v55 = (unsigned int *)((unint64_t)*v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    v57 = 0;
    *v21 = __p[0];
    __p[0] = 0;
  }
  if ((v57 & 7) != 0)
  {
    v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v60 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v62)
    v62 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v85[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((_QWORD *)v62 + 13, (_QWORD *)(a1 + 64), v85, (unsigned int **)__p);
  if (__p == v79)
  {
    v65 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v79 & 7) != 0)
    {
      v63 = (unsigned int *)((unint64_t)*v79 & 0xFFFFFFFFFFFFFFF8);
      do
        v64 = __ldxr(v63);
      while (__stlxr(v64 - 2, v63));
    }
    v65 = 0;
    *v79 = __p[0];
    __p[0] = 0;
  }
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v68 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stlxr(v69 - 2, v68));
  }
  v70 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v70)
    v70 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  v85[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((_QWORD *)v70 + 14, (_QWORD *)(a1 + 64), v85, (unsigned int **)__p);
  if (__p == v22)
  {
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v73 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
  }
  else
  {
    if (((unint64_t)*v22 & 7) != 0)
    {
      v71 = (unsigned int *)((unint64_t)*v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v72 = __ldxr(v71);
      while (__stlxr(v72 - 2, v71));
    }
    *v22 = __p[0];
    __p[0] = 0;
  }
  if (((uint64_t)v85[0] & 7) != 0)
  {
    v75 = (unsigned int *)((unint64_t)v85[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v77)
    v77 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVecVal((_QWORD *)v77 + 11, (_QWORD *)(a1 + 64), (char **)__p);
  sub_20C0B4038((void **)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 184) = v83;
  __p[1] = 0;
  v83 = 0;
  __p[0] = 0;
  v85[0] = (unsigned int *)__p;
  sub_20BEEB2B8((void ***)v85);
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_20C1F863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  pxrInternal__aapl__pxrReserved__::NdrProperty *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;

  sub_20BF4C2D8(v23 + 72);
  if ((*v25 & 7) != 0)
  {
    v28 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  if ((*a10 & 7) != 0)
  {
    v30 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((*v26 & 7) != 0)
  {
    v32 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  if ((*a11 & 7) != 0)
  {
    v34 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((*v24 & 7) != 0)
  {
    v36 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if ((*a12 & 7) != 0)
  {
    v38 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  a13 = v23;
  sub_20BEEB2B8((void ***)&a13);
  sub_20C1F3690((void ***)&a13);
  sub_20C1E7FB4(v22);
  pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1F88EC@<X0>(unsigned int **a1@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X2>, unsigned int **a4@<X8>)
{
  uint64_t result;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;

  result = (uint64_t)pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::GetRoleFromMetadata(a3, &v19);
  if (*a1)
    v8 = v19 == 0;
  else
    v8 = 1;
  if (!v8
    && (v9 = (_QWORD *)sub_20C1FA7A4(), v10 = sub_20BF2B2B4(v9, a1), result = sub_20C1FA7A4(), v10)
    && (result = (uint64_t)sub_20BF2B2B4(v10 + 3, &v19)) != 0)
  {
    v11 = *(unsigned int **)(result + 24);
    *a4 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *a4 = v12;
    }
    a2 = (unsigned int **)(result + 32);
  }
  else
  {
    v14 = *a1;
    *a4 = *a1;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *a4 = v15;
    }
  }
  a4[1] = *a2;
  if ((v19 & 7) != 0)
  {
    v17 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  return result;
}

void sub_20C1F89F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrShaderProperty::GetHelp(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v4;
  void *__p[2];
  uint64_t v6;

  v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4)
    v4 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((_QWORD *)v4 + 1, (_QWORD *)this + 8, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20C1F8A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdrShaderProperty::GetImplementationName@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *v2;
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *v4;
  uint64_t *EmptyString;

  v2 = this;
  v4 = (pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4)
  {
    this = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    v4 = this;
  }
  if ((*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  return pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((_QWORD *)v4 + 16, (_QWORD *)v2 + 8, (uint64_t)EmptyString, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::CanConnectTo(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this, const pxrInternal__aapl__pxrReserved__::NdrProperty *a2)
{
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *v2;
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty *v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v20;
  _BOOL4 v21;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v26;
  _BOOL4 v27;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  _BOOL4 v30;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  _BOOL4 v33;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  if (*((_BYTE *)this + 40))
    v2 = a2;
  else
    v2 = this;
  if (*((_BYTE *)this + 40))
    v3 = this;
  else
    v3 = a2;
  if (*((unsigned __int8 *)this + 40) == *((unsigned __int8 *)a2 + 40))
    return 0;
  v6 = *((_QWORD *)v2 + 6);
  v7 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *))(*(_QWORD *)v2 + 24))(v2);
  v8 = *((_QWORD *)v3 + 6);
  v9 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *))(*(_QWORD *)v3 + 24))(v3);
  v10 = (uint64_t *)((char *)v2 + 16);
  v11 = (_QWORD *)((char *)v3 + 16);
  v12 = *((_QWORD *)v2 + 2) & 0xFFFFFFFFFFFFFFF8;
  v13 = *((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFFFF8;
  if (v12 == v13 && (_DWORD)v6 == (_DWORD)v8)
    return 1;
  v15 = (_QWORD *)v9;
  if (v12 == v13 && !*((_QWORD *)v3 + 6) && !*((_BYTE *)v3 + 56) && *((_BYTE *)v2 + 56))
    return 1;
  sub_20C1F9014(v10, (int)v6, v7, *((unsigned int *)this + 64), &v42);
  sub_20C1F9014((uint64_t *)v3 + 2, (int)v8, v15, *((unsigned int *)this + 64), &v40);
  v16 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v16)
    v16 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 4) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_31;
  v17 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v17)
    v17 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 6) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_31;
  v18 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v18)
    v18 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 7) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_31;
  v19 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v19)
    v19 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_31:
    v21 = 1;
  }
  else
  {
    v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v20)
      v20 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v21 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v42, (_QWORD **)v20 + 20);
  }
  v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v22)
    v22 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 4) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_47;
  v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v23)
    v23 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 6) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_47;
  v24 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v24)
    v24 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 7) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_47;
  v25 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v25)
    v25 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_47:
    v27 = 1;
  }
  else
  {
    v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v26)
      v26 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v27 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v40, (_QWORD **)v26 + 20);
  }
  if (v21 && v27)
    goto LABEL_64;
  v28 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v28)
    v28 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v28 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = 1;
  }
  else
  {
    v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29)
      v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v30 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v42, (_QWORD **)v29 + 21);
  }
  v31 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v31)
    v31 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v31 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    v33 = 1;
  }
  else
  {
    v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v32)
      v32 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v33 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v40, (_QWORD **)v32 + 21);
  }
  if (v30 && v33)
    goto LABEL_64;
  v34 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v34)
    v34 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v34 + 12) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_71;
  v35 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v35)
    v35 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v35 + 2) & 0xFFFFFFFFFFFFFFF8))
LABEL_64:
    result = 1;
  else
LABEL_71:
    result = 0;
  if ((v41 & 7) != 0)
  {
    v36 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if ((v43 & 7) != 0)
  {
    v38 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  return result;
}

void sub_20C1F8FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((a12 & 7) != 0)
  {
    v14 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_20C1F9014@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *result;
  void **v12;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v13;
  unsigned __int8 v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  const char *v18;
  char *v19;
  void *v20;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v33;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **Instance;
  uint64_t *v45;
  uint64_t *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  void *__p;
  const char *v52;
  uint64_t v53;
  const char *v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  void **v60;

  if ((_DWORD)a4 == 1)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v13)
      v13 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    v57 = 0;
    v58 = 0;
    v59 = 0;
    pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((_QWORD *)v13 + 17, a3, (uint64_t)&v57, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v56);
    if (SHIBYTE(v53) < 0)
      operator delete(__p);
    if (SHIBYTE(v59) < 0)
      operator delete(v57);
    if (v56)
    {
      v14 = atomic_load((unsigned __int8 *)&qword_254987FF8);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254987FF8))
      {
        xmmword_254988000 = 0u;
        *(_OWORD *)algn_254988010 = 0u;
        dword_254988020 = 1065353216;
        Instance = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        if (!Instance)
          Instance = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetAllTypes(Instance, &__p);
        v45 = (uint64_t *)__p;
        v46 = (uint64_t *)v52;
        if (__p != v52)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)v45, (unsigned int **)&v57);
            sub_20C1FC80C((uint64_t)&xmmword_254988000, &v57, (uint64_t *)&v57, v45);
            if ((v57 & 7) != 0)
            {
              v47 = (unsigned int *)((unint64_t)v57 & 0xFFFFFFFFFFFFFFF8);
              do
                v48 = __ldxr(v47);
              while (__stlxr(v48 - 2, v47));
            }
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens((uint64_t **)v45, &v57);
            v50 = (uint64_t *)v57;
            v49 = v58;
            while (v50 != v49)
            {
              sub_20C1FCA70((uint64_t)&xmmword_254988000, v50, v50, v45);
              ++v50;
            }
            v60 = &v57;
            sub_20BEEB2B8(&v60);
            ++v45;
          }
          while (v45 != v46);
          v45 = (uint64_t *)__p;
        }
        if (v45)
        {
          v52 = (const char *)v45;
          operator delete(v45);
        }
        __cxa_atexit((void (*)(void *))sub_20C1FC794, &xmmword_254988000, &dword_20BDBC000);
        qword_254987FF0 = (uint64_t)&xmmword_254988000;
        __cxa_guard_release(&qword_254987FF8);
      }
      v15 = (_QWORD *)qword_254987FF0;
      if (sub_20BF2B2B4((_QWORD *)qword_254987FF0, &v56))
      {
        v17 = sub_20BF2B2B4(v15, &v56);
        if (!v17)
          sub_20BEB9194("unordered_map::at: key not found");
        __p = (void *)v17[3];
      }
      else
      {
        __p = "sdr/shaderProperty.cpp";
        v52 = "_GetSdrUsdDefinitionType";
        v53 = 178;
        v54 = "SdfValueTypeName pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetSdrUsdDefinitionType(const NdrTokenMap &)";
        v55 = 0;
        v24 = v56 & 0xFFFFFFFFFFFFFFF8;
        if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v25 = (const char *)(v24 + 16);
          if (*(char *)(v24 + 39) < 0)
            v25 = *(const char **)v25;
        }
        else
        {
          v25 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid SdfValueTypeName or alias provided for sdrUsdDefinitionType metadata: %s", v16, v25);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
    }
    if ((v56 & 7) != 0)
    {
      v30 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
    if ((result & 1) != 0)
    {
      v32 = sub_20C1FBBC8(a2, a3);
      if (sub_20C1F9A58(a3))
      {
        result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (v32)
        {
          if (!result)
            result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          v12 = (void **)((char *)result + 552);
        }
        else
        {
          if (!result)
            result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          v12 = (void **)((char *)result + 96);
        }
        goto LABEL_88;
      }
      v33 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v33)
        v33 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v33 + 11) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_81;
      v34 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v34)
        v34 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v34 + 10) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_81;
      v35 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v35)
        v35 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v35 + 12) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_81:
        result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (v32)
        {
          if (!result)
            result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          v38 = (uint64_t *)((char *)result + 544);
        }
        else
        {
          if (!result)
            result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          v38 = (uint64_t *)((char *)result + 88);
        }
        v39 = *v38;
        v40 = *a1;
        *a5 = v39;
        a5[1] = v40;
        if ((v40 & 7) == 0)
          return result;
        v27 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 2, v27));
LABEL_108:
        if ((v28 & 1) == 0)
          a5[1] = v27;
        return result;
      }
      v36 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v36)
        v36 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8))
      {
        switch(a2)
        {
          case 4:
            result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!result)
              result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            v20 = (void *)*((_QWORD *)result + 15);
            goto LABEL_89;
          case 3:
            result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!result)
              result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            v20 = (void *)*((_QWORD *)result + 14);
            goto LABEL_89;
          case 2:
            result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!result)
              result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            v20 = (void *)*((_QWORD *)result + 13);
            goto LABEL_89;
        }
      }
      v37 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v37)
        v37 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v37 + 2) & 0xFFFFFFFFFFFFFFF8))
        return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)sub_20C1FBC1C(a1, v32, a5);
      if (a2 == 4)
      {
        result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!result)
          result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v20 = (void *)*((_QWORD *)result + 21);
        goto LABEL_89;
      }
      if (a2 == 3)
      {
        result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!result)
          result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v20 = (void *)*((_QWORD *)result + 20);
        goto LABEL_89;
      }
      if (a2 != 2)
        return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)sub_20C1FBC1C(a1, v32, a5);
      result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!result)
        result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v20 = (void *)*((_QWORD *)result + 19);
    }
    else
    {
      v20 = __p;
    }
LABEL_89:
    *a5 = v20;
    a5[1] = 0;
    return result;
  }
  if ((_DWORD)a4)
  {
    if (sub_20C1E8FF8(1))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Invalid/unsupported usdEncodingVersion %d. Current version is %d.", v18, v19, a4, 1);
    result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result)
      result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v20 = (void *)*((_QWORD *)result + 11);
    goto LABEL_89;
  }
  v10 = sub_20C1FBBC8(a2, a3);
  if (sub_20C1F9A58(a3))
  {
    result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v10)
    {
      if (!result)
        result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v12 = (void **)((char *)result + 536);
    }
    else
    {
      if (!result)
        result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v12 = (void **)((char *)result + 80);
    }
LABEL_88:
    v20 = *v12;
    goto LABEL_89;
  }
  v21 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v21)
    v21 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v21 + 11) & 0xFFFFFFFFFFFFFFF8))
  {
    result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result)
      result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v26 = *a1;
    *a5 = *((_QWORD *)result + 11);
    a5[1] = v26;
    if ((v26 & 7) == 0)
      return result;
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    goto LABEL_108;
  }
  v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v22)
    v22 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
    result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result)
      result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v29 = *a1;
    *a5 = *((_QWORD *)result + 10);
    a5[1] = v29;
    if ((v29 & 7) == 0)
      return result;
    v27 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    goto LABEL_108;
  }
  v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v23)
    v23 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v23 + 12) & 0xFFFFFFFFFFFFFFF8))
    return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)sub_20C1FBC1C(a1, v10, a5);
  result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (v10)
  {
    if (!result)
      result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v41 = (uint64_t *)((char *)result + 512);
  }
  else
  {
    if (!result)
      result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v41 = (uint64_t *)((char *)result + 56);
  }
  v42 = *v41;
  v43 = *a1;
  *a5 = v42;
  a5[1] = v43;
  if ((v43 & 7) != 0)
  {
    v27 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    goto LABEL_108;
  }
  return result;
}

void sub_20C1F98AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  unsigned int *v27;
  unsigned int v28;

  sub_20BF20BCC((uint64_t)&xmmword_254988000);
  __cxa_guard_abort(&qword_254987FF8);
  if ((a19 & 7) != 0)
  {
    v27 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStructMember(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2)
    v2 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  return sub_20BF2B2B4((_QWORD *)this + 8, (_QWORD *)v2 + 13) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStruct(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v2)
    v2 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  return (*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v2 + 12) & 0xFFFFFFFFFFFFFFF8);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::SdrShaderProperty::GetTypeAsSdfType@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this@<X0>, _QWORD *a2@<X8>)
{
  return sub_20C1F9014((uint64_t *)this + 2, *((_QWORD *)this + 6), (_QWORD *)this + 8, *((unsigned int *)this + 64), a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsAssetIdentifier(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  return sub_20C1F9A58((_QWORD *)this + 8);
}

BOOL sub_20C1F9A58(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2)
    v2 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  return sub_20BF2B2B4(a1, (_QWORD *)v2 + 15) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsDefaultInput(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2)
    v2 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  return sub_20BF2B2B4((_QWORD *)this + 8, (_QWORD *)v2 + 18) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_SetUsdEncodingVersion(uint64_t this, int a2)
{
  *(_DWORD *)(this + 256) = a2;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_ConvertToVStruct(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v2;
  _QWORD *DefaultValue;
  _QWORD *result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v2)
    v2 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  sub_20BF32220((_QWORD *)this + 2, (_QWORD *)v2 + 12);
  (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::SdrShaderProperty *))(*(_QWORD *)this + 48))(&v8, this);
  v7 = v8;
  DefaultValue = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v7);
  result = sub_20BF4A9BC((_QWORD *)this + 3, DefaultValue);
  if ((v9 & 7) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_FinalizeProperty(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t Type;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v10;
  const pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  int v12;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v22;
  int v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  const std::string *v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  _DWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  _QWORD *DefaultValue;
  unsigned int *v58;
  unsigned int v59;
  void *v60;
  char v61;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v62;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v63;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v64;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v65;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v66;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v67;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v68;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v69;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v70;
  char v71;
  int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  const std::type_info *v79;
  char *v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  const char *v84;
  const char *v85;
  char *v86;
  void **v87;
  const char *v88;
  char *v89;
  char v90;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  char *v100;
  unsigned int v101;
  _DWORD *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  char *v107;
  unsigned int v108;
  uint64_t v109;
  char *v110;
  unsigned int v111;
  _DWORD *v112;
  unsigned int *v113;
  unsigned int v114;
  const char *v115;
  char *v116;
  void *v117[2];
  __int128 v118;
  unsigned int *v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  __n128 v126[2];
  uint64_t v127;
  _BYTE v128[32];
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)((char *)this + 24);
  v3 = (_QWORD *)((char *)this + 16);
  v4 = (_QWORD *)((char *)this + 64);
  if (!*((_QWORD *)this + 4))
  {
    sub_20BF4C6D0(&v124, v2);
    goto LABEL_63;
  }
  v5 = (void *)*((_QWORD *)this + 6);
  sub_20C1F9014((uint64_t *)this + 2, (uint64_t)v5, v4, *((unsigned int *)this + 64), &v122);
  v121 = v122;
  Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v2, v6, v7);
  if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v121) == Type)
  {
    sub_20BF4C6D0(&v124, v2);
    goto LABEL_60;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v9)
    v9 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (sub_20BF2B2B4(v4, (_QWORD *)v9 + 17))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v121);
    Typeid = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid(v10);
    pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(v2, Typeid, &v124);
    if (v125)
      goto LABEL_60;
    sub_20BF4C2D8((uint64_t)&v124);
  }
  v12 = sub_20C1FBBC8((uint64_t)v5, v4);
  v13 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v13)
    v13 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF8) && sub_20C1F9A58(v4))
  {
    if (v12)
    {
      v129 = 0;
      memset(v128, 0, sizeof(v128));
      if (sub_20BFED418(v2))
      {
        v14 = *((_QWORD *)this + 4);
        if ((v14 & 4) != 0)
          v15 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
        else
          v15 = *(__int128 **)v2;
        sub_20C0346C4((uint64_t)v128, v15);
      }
      v127 = 0;
      memset(v126, 0, sizeof(v126));
      sub_20C1FCD48(v126[0].n128_u64, *(unint64_t *)v128);
      sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v128, v16, v17);
      v18 = v129;
      sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v128, v19, v20);
      v21 = v129 + 24 * *(_QWORD *)v128;
      while (v18 != v21)
      {
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v117, v18);
        sub_20C1FCED4((uint64_t)v126, (__int128 *)v117);
        if (v120 < 0)
          operator delete(*((void **)&v118 + 1));
        if (SBYTE7(v118) < 0)
          operator delete(v117[0]);
        v18 += 24;
      }
      sub_20C1FCDD4(v126, (pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
      sub_20C00A724(v126);
      sub_20C008280(v128);
    }
    else
    {
      memset(v128, 0, 24);
      if (sub_20BFB4608(v2))
      {
        v32 = *((_QWORD *)this + 4);
        if ((v32 & 4) != 0)
          v33 = (const std::string *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
        else
          v33 = *(const std::string **)v2;
        std::string::operator=((std::string *)v128, v33);
      }
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v117, v128);
      v125 = (char *)&off_24C5255B8;
      sub_20C00A0DC(&v124, (__int128 *)v117);
      if (v120 < 0)
        operator delete(*((void **)&v118 + 1));
      if (SBYTE7(v118) < 0)
        operator delete(v117[0]);
      if ((v128[23] & 0x80000000) != 0)
        operator delete(*(void **)v128);
    }
    goto LABEL_60;
  }
  v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v22)
    v22 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 2) & 0xFFFFFFFFFFFFFFF8))
    v23 = v12;
  else
    v23 = 0;
  if (v23 == 1)
  {
    v119 = 0;
    *(_OWORD *)v117 = 0u;
    v118 = 0u;
    sub_20C1FCE14(v2, (uint64_t)v117);
    if (v117[0] != v5)
    {
      if (sub_20C1FCE78(0))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Default value for fixed size float array type does not have the right length (%zu vs expected %zu)", v30, v31, v117[0], v5);
      sub_20BF4C6D0(&v124, v2);
      goto LABEL_40;
    }
    if (v5 == (void *)4)
    {
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v24, v25);
      v34 = *v119;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v35, v36);
      v37 = v119[1];
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v38, v39);
      v40 = v119[2];
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v41, v42);
      v43 = v119[3];
      v125 = (char *)&off_24C51E300 + 2;
      v44 = operator new(0x14uLL);
      *v44 = v34;
      v44[1] = v37;
      v44[2] = v40;
      v44[3] = v43;
      v45 = v44 + 4;
      atomic_store(0, v44 + 4);
      v124 = (char *)v44;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      goto LABEL_40;
    }
    if (v5 == (void *)3)
    {
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v24, v25);
      v47 = *v119;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v48, v49);
      v50 = v119[1];
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v51, v52);
      v53 = v119[2];
      v125 = (char *)&off_24C51E0D8 + 2;
      v54 = operator new(0x10uLL);
      *v54 = v47;
      v54[1] = v50;
      v54[2] = v53;
      v55 = v54 + 3;
      atomic_store(0, v54 + 3);
      v124 = (char *)v54;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      goto LABEL_40;
    }
    if (v5 == (void *)2)
    {
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v24, v25);
      v26 = *v119;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v27, v28);
      v29 = v119[1];
      v125 = (char *)&off_24C51DEB0 + 3;
      v124 = (char *)__PAIR64__(v29, v26);
LABEL_40:
      sub_20BF5618C((uint64_t)v117);
      goto LABEL_60;
    }
    sub_20BF5618C((uint64_t)v117);
  }
  DefaultValue = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v121);
  sub_20BF4C6D0(&v124, DefaultValue);
LABEL_60:
  if ((v123 & 7) != 0)
  {
    v58 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
LABEL_63:
  sub_20BF4B5D8((_QWORD *)this + 30, &v124);
  sub_20BF4C2D8((uint64_t)&v124);
  v60 = (void *)*((_QWORD *)this + 6);
  v61 = sub_20C1FBBC8((uint64_t)v60, v4);
  sub_20BF4C6D0(v126, v2);
  v62 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v62)
    v62 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v61 & 1) != 0)
      v71 = sub_20BF64C0C(v2);
    else
      v71 = sub_20BFB2CEC(v2);
LABEL_109:
    if ((v71 & 1) != 0)
      goto LABEL_128;
    goto LABEL_110;
  }
  v63 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v63)
    v63 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v63 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v61 & 1) != 0)
      v71 = sub_20BFED418(v2);
    else
      v71 = sub_20BFB4608(v2);
    goto LABEL_109;
  }
  v64 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v64)
    v64 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v64 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v61 & 1) == 0)
    {
      v71 = sub_20BF7B9F8(v2);
      goto LABEL_109;
    }
    v119 = 0;
    *(_OWORD *)v117 = 0u;
    v118 = 0u;
    v72 = sub_20C1FCE14(v2, (uint64_t)v117);
    if (v117[0] == v60)
    {
      if (v72)
      {
        if (v60 == (void *)4)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v73, v74);
          v92 = *v119;
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v93, v94);
          v95 = v119[1];
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v96, v97);
          v98 = v119[2];
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v99, v100);
          v101 = v119[3];
          *(_QWORD *)&v128[8] = (char *)&off_24C51E300 + 2;
          v102 = operator new(0x14uLL);
          *v102 = v92;
          v102[1] = v95;
          v102[2] = v98;
          v102[3] = v101;
          v103 = v102 + 4;
          atomic_store(0, v102 + 4);
          *(_QWORD *)v128 = v102;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
          goto LABEL_137;
        }
        if (v60 == (void *)3)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v73, v74);
          v105 = *v119;
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v106, v107);
          v108 = v119[1];
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v109, v110);
          v111 = v119[2];
          *(_QWORD *)&v128[8] = (char *)&off_24C51E0D8 + 2;
          v112 = operator new(0x10uLL);
          *v112 = v105;
          v112[1] = v108;
          v112[2] = v111;
          v113 = v112 + 3;
          atomic_store(0, v112 + 3);
          *(_QWORD *)v128 = v112;
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
          goto LABEL_137;
        }
        if (v60 == (void *)2)
        {
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v73, v74);
          v75 = *v119;
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v117, v76, v77);
          v78 = v119[1];
          *(_QWORD *)&v128[8] = (char *)&off_24C51DEB0 + 3;
          *(_QWORD *)v128 = __PAIR64__(v78, v75);
LABEL_137:
          sub_20BF4B5D8(v126, v128);
          sub_20BF4C2D8((uint64_t)v128);
          v90 = 0;
LABEL_127:
          sub_20BF5618C((uint64_t)v117);
          if ((v90 & 1) == 0)
            goto LABEL_128;
          goto LABEL_110;
        }
        if (sub_20C1FCE78(0))
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Invalid arraySize provided. Expects 2/3/4 but %zu  provided.", v115, v116, v60);
      }
    }
    else if (sub_20C1FCE78(0))
    {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Default value for fixed size float array type does not have the right length (%zu vs expected %zu)", v88, v89, v117[0], v60);
    }
    v90 = 1;
    goto LABEL_127;
  }
  v65 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v65)
    v65 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v65 + 4) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_96;
  v66 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v66)
    v66 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v66 + 6) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_96;
  v67 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v67)
    v67 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v67 + 7) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_96;
  v68 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v68)
    v68 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v68 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_96:
    if ((v61 & 1) != 0)
      v71 = sub_20BF5B118(v2);
    else
      v71 = sub_20BFA2E0C(v2);
    goto LABEL_109;
  }
  v69 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v69)
    v69 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v69 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v61 & 1) != 0)
      v71 = sub_20BF5D738(v2);
    else
      v71 = sub_20BFA6978(v2);
    goto LABEL_109;
  }
  v70 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v70)
    v70 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v70 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v61 & 1) != 0)
      v71 = sub_20BF5FDC8(v2);
    else
      v71 = sub_20BFADE60(v2);
    goto LABEL_109;
  }
LABEL_110:
  if (sub_20C1FCE78(0))
  {
    v81 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
    if (v81)
    {
      v82 = (const char *)(v81 + 16);
      if (*(char *)(v81 + 39) < 0)
        v82 = *(const char **)v82;
    }
    else
    {
      v82 = "";
    }
    v83 = *v3 & 0xFFFFFFFFFFFFFFF8;
    if (v83)
    {
      v84 = (const char *)(v83 + 16);
      if (*(char *)(v83 + 39) < 0)
        v84 = *(const char **)v84;
    }
    else
    {
      v84 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v126, v79, v80, (uint64_t)v117);
    if ((SBYTE7(v118) & 0x80u) == 0)
      v87 = v117;
    else
      v87 = (void **)v117[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Expected type for defaultValue for property: %s is %s, but %s was provided.", v85, v86, v82, v84, v87);
    if (SBYTE7(v118) < 0)
      operator delete(v117[0]);
  }
LABEL_128:
  sub_20BF4B5D8(v2, v126);
  return sub_20BF4C2D8((uint64_t)v126);
}

void sub_20C1FA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20BF5618C((uint64_t)&a13);
  sub_20BF4C2D8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20C1FA780(uint64_t a1)
{
  void *v1;

  sub_20C1FD08C(a1);
  operator delete(v1);
}

uint64_t sub_20C1FA794(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_20C1FA79C(uint64_t a1)
{
  return a1 + 240;
}

uint64_t sub_20C1FA7A4()
{
  unsigned __int8 v0;
  void *v2;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v3;
  uint64_t *v4;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v21;
  uint64_t *v22;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v27;
  uint64_t *v28;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68[2];
  _BYTE v69[40];
  uint64_t v70[2];
  _BYTE v71[40];
  uint64_t v72[2];
  _BYTE v73[40];
  uint64_t v74[2];
  _BYTE v75[40];
  uint64_t v76[2];
  _BYTE v77[40];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[6];
  uint64_t v89[6];
  uint64_t v90[6];
  uint64_t v91[6];
  uint64_t v92[6];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254987F88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254987F88))
  {
    v2 = operator new(0x28uLL);
    v3 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v3)
      v3 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v4 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v4)
      v4 = (uint64_t *)sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    v5 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v5)
      v5 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v6 = *((_QWORD *)v5 + 2);
    v76[0] = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v76[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v76[1] = 3;
    sub_20C1FB1B8(&v86, v4, v76);
    sub_20C1FB22C((uint64_t)v77, &v86, 1);
    sub_20C1FB57C(v88, (uint64_t *)v3 + 4, (uint64_t)v77);
    v9 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v9)
      v9 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v10 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v10)
      v10 = (uint64_t *)sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    v11 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v11)
      v11 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v12 = *((_QWORD *)v11 + 2);
    v74[0] = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v74[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v74[1] = 4;
    sub_20C1FB1B8(&v84, v10, v74);
    sub_20C1FB22C((uint64_t)v75, &v84, 1);
    sub_20C1FB57C(v89, (uint64_t *)v9 + 5, (uint64_t)v75);
    v15 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v15)
      v15 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v16 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v16)
      v16 = (uint64_t *)sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    v17 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v17)
      v17 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v18 = *((_QWORD *)v17 + 2);
    v72[0] = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v72[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v72[1] = 3;
    sub_20C1FB1B8(&v82, v16, v72);
    sub_20C1FB22C((uint64_t)v73, &v82, 1);
    sub_20C1FB57C(v90, (uint64_t *)v15 + 6, (uint64_t)v73);
    v21 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v21)
      v21 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v22 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v22)
      v22 = (uint64_t *)sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v23)
      v23 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v24 = *((_QWORD *)v23 + 2);
    v70[0] = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v70[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v70[1] = 3;
    sub_20C1FB1B8(&v80, v22, v70);
    sub_20C1FB22C((uint64_t)v71, &v80, 1);
    sub_20C1FB57C(v91, (uint64_t *)v21 + 7, (uint64_t)v71);
    v27 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v27)
      v27 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v28 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v28)
      v28 = (uint64_t *)sub_20C1F39E0(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    v29 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v29)
      v29 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v30 = *((_QWORD *)v29 + 2);
    v68[0] = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v68[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v68[1] = 3;
    sub_20C1FB1B8(&v78, v28, v68);
    sub_20C1FB22C((uint64_t)v69, &v78, 1);
    sub_20C1FB57C(v92, (uint64_t *)v27 + 8, (uint64_t)v69);
    sub_20C1FB674((uint64_t)v2, v88, 5);
    v33 = &v93;
    do
    {
      sub_20BFC9C88((uint64_t)(v33 - 5));
      v35 = *(v33 - 6);
      v33 -= 6;
      v34 = v35;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    while (v33 != v88);
    sub_20BFC9C88((uint64_t)v69);
    if ((v79 & 7) != 0)
    {
      v38 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    if ((v78 & 7) != 0)
    {
      v40 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    if ((v68[0] & 7) != 0)
    {
      v42 = (unsigned int *)(v68[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    sub_20BFC9C88((uint64_t)v71);
    if ((v81 & 7) != 0)
    {
      v44 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if ((v80 & 7) != 0)
    {
      v46 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if ((v70[0] & 7) != 0)
    {
      v48 = (unsigned int *)(v70[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    sub_20BFC9C88((uint64_t)v73);
    if ((v83 & 7) != 0)
    {
      v50 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((v82 & 7) != 0)
    {
      v52 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    if ((v72[0] & 7) != 0)
    {
      v54 = (unsigned int *)(v72[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    sub_20BFC9C88((uint64_t)v75);
    if ((v85 & 7) != 0)
    {
      v56 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if ((v84 & 7) != 0)
    {
      v58 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if ((v74[0] & 7) != 0)
    {
      v60 = (unsigned int *)(v74[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    sub_20BFC9C88((uint64_t)v77);
    if ((v87 & 7) != 0)
    {
      v62 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    if ((v86 & 7) != 0)
    {
      v64 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    if ((v76[0] & 7) != 0)
    {
      v66 = (unsigned int *)(v76[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    qword_254987F80 = (uint64_t)v2;
    __cxa_guard_release(&qword_254987F88);
  }
  return qword_254987F80;
}

void sub_20C1FAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  char *v61;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;

  sub_20BFC9C88((uint64_t)&a19);
  if ((a49 & 7) != 0)
  {
    v63 = (unsigned int *)(a49 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  if ((a48 & 7) != 0)
  {
    v65 = (unsigned int *)(a48 & 0xFFFFFFFFFFFFFFF8);
    do
      v66 = __ldxr(v65);
    while (__stlxr(v66 - 2, v65));
  }
  if ((a17 & 7) != 0)
  {
    v67 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  sub_20BFC9C88((uint64_t)&a26);
  if ((a52 & 7) != 0)
  {
    v69 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  if ((a51 & 7) != 0)
  {
    v71 = (unsigned int *)(a51 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  if ((a24 & 7) != 0)
  {
    v73 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  sub_20BFC9C88((uint64_t)&a33);
  if ((a55 & 7) != 0)
  {
    v75 = (unsigned int *)(a55 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  if ((a54 & 7) != 0)
  {
    v77 = (unsigned int *)(a54 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stlxr(v78 - 2, v77));
  }
  if ((a31 & 7) != 0)
  {
    v79 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  sub_20BFC9C88((uint64_t)&a40);
  if ((a58 & 7) != 0)
  {
    v81 = (unsigned int *)(a58 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  if ((a57 & 7) != 0)
  {
    v83 = (unsigned int *)(a57 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  if ((a38 & 7) != 0)
  {
    v85 = (unsigned int *)(a38 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  while (v61 != &a60)
  {
    sub_20BFC9C88((uint64_t)(v61 - 40));
    v88 = *((_QWORD *)v61 - 6);
    v61 -= 48;
    v87 = v88;
    if ((v88 & 7) != 0)
    {
      v89 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
      do
        v90 = __ldxr(v89);
      while (__stlxr(v90 - 2, v89));
    }
  }
  operator delete(v60);
  __cxa_guard_abort(&qword_254987F88);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1FB1B8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *result = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *a3;
  result[1] = *a3;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[2] = a3[1];
  return result;
}

uint64_t sub_20C1FB22C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      sub_20C1FB2A4(a1, a2, a2);
      a2 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_20C1FB290(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFC9C88(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1FB2A4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  v13 = (uint64_t *)(a1 + 16);
  i = (uint64_t *)operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  sub_20C1FB508(i + 2, a3);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = (uint64_t)i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = (uint64_t)i;
  *(_QWORD *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (uint64_t *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C1FB4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BFC9F84(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1FB508(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *a2;
  *result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = a2[1];
  result[1] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[2] = a2[2];
  return result;
}

uint64_t *sub_20C1FB57C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C1FB600((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_20C1FB600(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20C1FB2A4(a1, i + 2, i + 2);
  return a1;
}

void sub_20C1FB65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFC9C88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FB674(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      sub_20C1FB6EC(a1, a2, a2);
      a2 += 6;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_20C1FB6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1FBAB0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1FB6EC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C1FB940(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C1FB91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11)
{
  if (a10)
    sub_20C1FBA4C((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C1FB940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C1FB9C8(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C1FB9AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C1FBA4C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1FB9C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C1FB600((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_20C1FBA4C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BFC9C88((uint64_t)(a2 + 3));
    v3 = a2[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_20C1FBAB0(uint64_t a1)
{
  void *v2;

  sub_20C1FBAE8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C1FBAE8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BFC9C88((uint64_t)(v2 + 3));
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_20C1FBB44(uint64_t *a1, uint64_t *a2, char *__s)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BDDC0E4(a1 + 1, __s);
  return a1;
}

uint64_t sub_20C1FBBC8(uint64_t a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v4;
  uint64_t result;

  v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4)
    v4 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy((_QWORD *)v4 + 8, a2);
  if (a1)
    return 1;
  else
    return result;
}

_QWORD *sub_20C1FBC1C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v5;
  _QWORD *v6;
  unsigned __int8 v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  __guard *v62;
  void *v63;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v64;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v69;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v74;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v79;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v84;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v89;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v94;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v99;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v104;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254987FB8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254987FB8))
    {
      v6 = &unk_254987F90;
      goto LABEL_6;
    }
    v12 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v12)
      v12 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13)
      v13 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v14 = *(_QWORD *)v12;
    v114 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v114 &= 0xFFFFFFFFFFFFFFF8;
    }
    v115 = *((_QWORD *)v13 + 58);
    v17 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v17)
      v17 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v18)
      v18 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v19 = *((_QWORD *)v17 + 1);
    v116 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v116 &= 0xFFFFFFFFFFFFFFF8;
    }
    v117 = *((_QWORD *)v18 + 67);
    v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v22)
      v22 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v23)
      v23 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v24 = *((_QWORD *)v22 + 2);
    v118 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v118 &= 0xFFFFFFFFFFFFFFF8;
    }
    v119 = *((_QWORD *)v23 + 64);
    v27 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v27)
      v27 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v28)
      v28 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v29 = *((_QWORD *)v27 + 4);
    v120 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        v120 &= 0xFFFFFFFFFFFFFFF8;
    }
    v121 = *((_QWORD *)v28 + 92);
    v32 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v32)
      v32 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v33)
      v33 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v34 = *((_QWORD *)v32 + 5);
    v122 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v122 &= 0xFFFFFFFFFFFFFFF8;
    }
    v123 = *((_QWORD *)v33 + 95);
    v37 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v37)
      v37 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v38)
      v38 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v39 = *((_QWORD *)v37 + 6);
    v124 = v39;
    if ((v39 & 7) != 0)
    {
      v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 2, v40));
      if ((v41 & 1) == 0)
        v124 &= 0xFFFFFFFFFFFFFFF8;
    }
    v125 = *((_QWORD *)v38 + 83);
    v42 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v42)
      v42 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v43)
      v43 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v44 = *((_QWORD *)v42 + 7);
    v126 = v44;
    if ((v44 & 7) != 0)
    {
      v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 2, v45));
      if ((v46 & 1) == 0)
        v126 &= 0xFFFFFFFFFFFFFFF8;
    }
    v127 = *((_QWORD *)v43 + 89);
    v47 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v47)
      v47 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v48)
      v48 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v49 = *((_QWORD *)v47 + 8);
    v128 = v49;
    if ((v49 & 7) != 0)
    {
      v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 2, v50));
      if ((v51 & 1) == 0)
        v128 &= 0xFFFFFFFFFFFFFFF8;
    }
    v129 = *((_QWORD *)v48 + 86);
    v52 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v52)
      v52 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v53)
      v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v54 = *((_QWORD *)v52 + 9);
    v130 = v54;
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 2, v55));
      if ((v56 & 1) == 0)
        v130 &= 0xFFFFFFFFFFFFFFF8;
    }
    v131 = *((_QWORD *)v53 + 102);
    sub_20C1FC798((uint64_t)&unk_254987F90, &v114, 9);
    v57 = &v132;
    do
    {
      v59 = *(v57 - 2);
      v57 -= 2;
      v58 = v59;
      if ((v59 & 7) != 0)
      {
        v60 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
    }
    while (v57 != &v114);
    v62 = &qword_254987FB8;
    v63 = &unk_254987F90;
  }
  else
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254987FE8);
    if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_254987FE8))
    {
      v6 = &unk_254987FC0;
      goto LABEL_6;
    }
    v64 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v64)
      v64 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v65)
      v65 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v66 = *(_QWORD *)v64;
    v114 = v66;
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 2, v67));
      if ((v68 & 1) == 0)
        v114 &= 0xFFFFFFFFFFFFFFF8;
    }
    v115 = *((_QWORD *)v65 + 2);
    v69 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v69)
      v69 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v70)
      v70 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v71 = *((_QWORD *)v69 + 1);
    v116 = v71;
    if ((v71 & 7) != 0)
    {
      v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 2, v72));
      if ((v73 & 1) == 0)
        v116 &= 0xFFFFFFFFFFFFFFF8;
    }
    v117 = *((_QWORD *)v70 + 10);
    v74 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v74)
      v74 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v75)
      v75 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v76 = *((_QWORD *)v74 + 2);
    v118 = v76;
    if ((v76 & 7) != 0)
    {
      v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 2, v77));
      if ((v78 & 1) == 0)
        v118 &= 0xFFFFFFFFFFFFFFF8;
    }
    v119 = *((_QWORD *)v75 + 7);
    v79 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v79)
      v79 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v80)
      v80 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v81 = *((_QWORD *)v79 + 4);
    v120 = v81;
    if ((v81 & 7) != 0)
    {
      v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 2, v82));
      if ((v83 & 1) == 0)
        v120 &= 0xFFFFFFFFFFFFFFF8;
    }
    v121 = *((_QWORD *)v80 + 35);
    v84 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v84)
      v84 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v85)
      v85 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v86 = *((_QWORD *)v84 + 5);
    v122 = v86;
    if ((v86 & 7) != 0)
    {
      v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 2, v87));
      if ((v88 & 1) == 0)
        v122 &= 0xFFFFFFFFFFFFFFF8;
    }
    v123 = *((_QWORD *)v85 + 38);
    v89 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v89)
      v89 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v90 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v90)
      v90 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v91 = *((_QWORD *)v89 + 6);
    v124 = v91;
    if ((v91 & 7) != 0)
    {
      v92 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 2, v92));
      if ((v93 & 1) == 0)
        v124 &= 0xFFFFFFFFFFFFFFF8;
    }
    v125 = *((_QWORD *)v90 + 26);
    v94 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v94)
      v94 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v95 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v95)
      v95 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v96 = *((_QWORD *)v94 + 7);
    v126 = v96;
    if ((v96 & 7) != 0)
    {
      v97 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 2, v97));
      if ((v98 & 1) == 0)
        v126 &= 0xFFFFFFFFFFFFFFF8;
    }
    v127 = *((_QWORD *)v95 + 32);
    v99 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v99)
      v99 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v100 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v100)
      v100 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v101 = *((_QWORD *)v99 + 8);
    v128 = v101;
    if ((v101 & 7) != 0)
    {
      v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 2, v102));
      if ((v103 & 1) == 0)
        v128 &= 0xFFFFFFFFFFFFFFF8;
    }
    v129 = *((_QWORD *)v100 + 29);
    v104 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v104)
      v104 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v105 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v105)
      v105 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v106 = *((_QWORD *)v104 + 9);
    v130 = v106;
    if ((v106 & 7) != 0)
    {
      v107 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 2, v107));
      if ((v108 & 1) == 0)
        v130 &= 0xFFFFFFFFFFFFFFF8;
    }
    v131 = *((_QWORD *)v105 + 45);
    sub_20C1FC798((uint64_t)&unk_254987FC0, &v114, 9);
    v109 = &v132;
    do
    {
      v111 = *(v109 - 2);
      v109 -= 2;
      v110 = v111;
      if ((v111 & 7) != 0)
      {
        v112 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
    }
    while (v109 != &v114);
    v62 = &qword_254987FE8;
    v63 = &unk_254987FC0;
  }
  __cxa_atexit((void (*)(void *))sub_20C1FC794, v63, &dword_20BDBC000);
  __cxa_guard_release(v62);
  v6 = v63;
LABEL_6:
  result = sub_20BF2B2B4(v6, a1);
  if (result)
  {
    *a3 = result[3];
    a3[1] = 0;
  }
  else
  {
    result = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result)
      result = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v9 = *a1;
    *a3 = result[11];
    a3[1] = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        a3[1] = v10;
    }
  }
  return result;
}

void sub_20C1FC694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254987FE8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FC798(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      sub_20BF2D7C8(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_20C1FC7F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF20BCC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1FC80C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  v16 = *a3;
  *a3 = 0;
  v17 = *a4;
  i[2] = v16;
  i[3] = v17;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v4) = v15;
  if (*i)
  {
    v26 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C1FCA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1FCA70(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C1FCCB8(a1, v7, a3, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C1FCCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1FCCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v9 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v9;
  *result = 0;
  result[1] = a2;
  v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C1FCD48(unint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v6 = sub_20C00AA30((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20C00AA30((uint64_t)a1, a2);
    sub_20C00ABDC(v3, v3 + 48 * v5, (uint64_t)v6);
LABEL_9:
    sub_20C00A724(a1);
    a1[4] = (unint64_t)v6;
  }
}

double sub_20C1FCDD4@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20C1D1A90(a2, a1).n128_u64[0];
  return result;
}

void sub_20C1FCE00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FCE14(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;

  v4 = sub_20BF565F0(a1);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)a1 + 1);
    if ((v5 & 4) != 0)
      v6 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(a1);
    else
      v6 = *(__int128 **)a1;
    sub_20BF9B1F8(a2, v6);
  }
  return v4;
}

BOOL sub_20C1FCE78(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C1F1BA4();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C1F1BA4();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "SDR_TYPE_CONFORMANCE");
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_20C1FCED4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  int v20;
  _QWORD v21[4];
  char v22;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_15;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = v5 + 48 * v4;
      v10 = *a2;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v9 = v10;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v11 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v9 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v9 + 24) = v11;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_15:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 < v4 + 1);
    v15 = sub_20C00AA30(a1, v14);
    v16 = 3 * v4;
    sub_20C00ABDC(v12, v12 + 16 * v16, (uint64_t)v15);
    v17 = *((_QWORD *)a2 + 2);
    v18 = &v15[2 * v16];
    *(_OWORD *)v18 = *a2;
    v18[2] = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 24);
    v18[5] = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v18 + 3) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    sub_20C00A724((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v21[0] = "vt/array.h";
  v21[1] = "emplace_back";
  v21[2] = 433;
  v21[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::emplace_back("
           "Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath, Args = <pxrInternal__aapl__pxrReserved__::SdfAssetPath>]";
  v22 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v20 = 4;
    else
      v20 = 3;
  }
  else
  {
    v20 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v20);
}

void sub_20C1FD08C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  void **v20;

  *(_QWORD *)a1 = off_24C52B630;
  sub_20BF4C2D8(a1 + 240);
  v2 = *(_QWORD *)(a1 + 232);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 216);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 208);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 200);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 192);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = (void **)(a1 + 168);
  sub_20BEEB2B8(&v20);
  v20 = (void **)(a1 + 144);
  sub_20C1F3690(&v20);
  sub_20C1E7FB4(a1 + 104);
  pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty((pxrInternal__aapl__pxrReserved__::NdrProperty *)a1);
}

uint64_t *sub_20C1FD1B0(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = sub_20C1FD234((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_20C1FD214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C1F3690(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C1FD234(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C15A32C(v4, v6);
      v6 += 2;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C1FD2BC((uint64_t)v8);
  return v4;
}

uint64_t sub_20C1FD2BC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C1FD2F0(a1);
  return a1;
}

uint64_t sub_20C1FD2F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 - 8);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    v7 = *(_QWORD *)(v1 - 16);
    v1 -= 16;
    v6 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  return result;
}

_QWORD *sub_20C1FD34C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C1FD5B0(a1, v6, a3, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v21, 0);
  return v10;
}

void sub_20C1FD598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C1FD5B0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = *a3;
  *((_QWORD *)v8 + 2) = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *((_QWORD *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(v8 + 24) = result;
  *((_QWORD *)v8 + 5) = a3[3];
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C1FD644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;

  sub_20BDDC0E4(v9, "PCP_CHANGES");
  __p = 0;
  v7 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B688, 0, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  v0 = sub_20C1FD928();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "PCP_CHANGES", "Pcp change processing");
  sub_20BDDC0E4(v9, "PCP_DEPENDENCIES");
  __p = 0;
  v7 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B688, 1, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  v1 = sub_20C1FD928();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "PCP_DEPENDENCIES", "Pcp dependencies");
  sub_20BDDC0E4(v9, "PCP_PRIM_INDEX");
  __p = 0;
  v7 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B688, 2, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  v2 = sub_20C1FD928();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "PCP_PRIM_INDEX", "Print debug output to terminal during prim indexing");
  sub_20BDDC0E4(v9, "PCP_PRIM_INDEX_GRAPHS");
  __p = 0;
  v7 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B688, 3, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  v3 = sub_20C1FD928();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "PCP_PRIM_INDEX_GRAPHS", "Write graphviz 'dot' files during prim indexing (requires PCP_PRIM_INDEX)");
  sub_20BDDC0E4(v9, "PCP_PRIM_INDEX_GRAPHS_MAPPINGS");
  __p = 0;
  v7 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B688, 4, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  v4 = sub_20C1FD928();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "PCP_PRIM_INDEX_GRAPHS_MAPPINGS", "Include namespace mappings in graphviz files generated during prim indexing (requires PCP_PRIM_INDEX_GRAPHS)");
  sub_20BDDC0E4(v9, "PCP_NAMESPACE_EDIT");
  __p = 0;
  v7 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52B688, 5, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  v5 = sub_20C1FD928();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5 + 20, "PCP_NAMESPACE_EDIT", "Pcp namespace edits");
}

void sub_20C1FD8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1FD928()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C6E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C6E8))
  {
    v2 = operator new(0x18uLL);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    qword_25473C6E0 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473C6E8);
  }
  return qword_25473C6E0;
}

void sub_20C1FD98C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473C6E8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::ConcurrentPopulationContext(uint64_t this, pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = 0;
  if (*((_QWORD *)a2 + 36))
  {
    v3[0] = "pcp/dependencies.cpp";
    v3[1] = "ConcurrentPopulationContext";
    v3[2] = 48;
    v3[3] = "pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::ConcurrentPopulationContext"
            "(Pcp_Dependencies &)";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_deps._concurrentPopulationContext");
  }
  *((_QWORD *)a2 + 36) = this;
  return this;
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::~ConcurrentPopulationContext(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *this)
{
  *(_QWORD *)(*(_QWORD *)this + 288) = 0;
}

{
  *(_QWORD *)(*(_QWORD *)this + 288) = 0;
}

double pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Pcp_Dependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((_DWORD *)this + 70) = 1065353216;
  *((_QWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((_DWORD *)this + 70) = 1065353216;
  *((_QWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::~Pcp_Dependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  sub_20C201594((uint64_t)this + 248);
  sub_20C2014EC((uint64_t)this + 208);
  sub_20BF20BCC((uint64_t)this + 168);
  sub_20BF20BCC((uint64_t)this + 128);
  sub_20C20143C((uint64_t)this + 88);
  sub_20C201380((uint64_t)this + 48);
  sub_20C2012F8((uint64_t)this);
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Add(_QWORD *a1, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *Text;
  const char *v13;
  char *v14;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  uint64_t v22;
  _QWORD *LayerStack;
  _DWORD *v24;
  _QWORD *v25;
  char v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  __int128 *v33;
  unsigned int ArcType;
  void *v35;
  pxrInternal__aapl__pxrReserved__::SdfPath *v36;
  const char *v37;
  uint64_t *v38;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v39;
  uint64_t *Identifier;
  const char *v41;
  char *v42;
  void *p_p;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t *v59;
  unsigned int *i;
  __int128 *v61;
  const char *v62;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v63;
  uint64_t *v64;
  const char *v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t *RelevantFieldNames;
  _QWORD *v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  BOOL v75;
  uint64_t *RelevantAttributeNames;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _QWORD *v86;
  _BYTE *v87;
  const char *v88;
  char *v89;
  uint64_t v94;
  int v95;
  void *__p;
  char v97;
  void *v98;
  pxrInternal__aapl__pxrReserved__::SdfPath *v99;
  char v100;
  _QWORD v101[2];
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  sub_20BEB59B0((uint64_t)&v106, (uint64_t)"Pcp", (uint64_t)"Pcp_Dependencies::Add");
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
  if (v8 && v7 != -1)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
    *(_QWORD *)&v108 = v9;
    *((_QWORD *)&v108 + 1) = v10;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v108);
    if (sub_20C1FE3D8(1))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Pcp_Dependencies: Adding deps for index <%s>:\n", v13, v14, Text);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v102);
    v17 = v102;
    v16 = v103;
    v18 = v104;
    if (v102 == v104 && v103 == v105)
    {
      v95 = 0;
    }
    else
    {
      v19 = 0;
      v95 = 0;
      v94 = ~v103 + v105;
      do
      {
        v20 = v19;
        v101[0] = v17;
        v101[1] = v16 + v19;
        v21 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)v101, v15);
        if ((v21 & 6) != 0)
        {
          v98 = 0;
          LOBYTE(v99) = 0;
          v22 = a1[36];
          if (v22)
            sub_20C15BA90(&v98, v22 + 8);
          LayerStack = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
          v24 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
          v110 = 0;
          v108 = 0u;
          v109 = 0u;
          v25 = sub_20C1FFCEC((uint64_t)a1, LayerStack, LayerStack, (uint64_t)&v108);
          v27 = v26;
          sub_20C20003C((uint64_t *)&v108);
          if (v27)
            ++a1[5];
          v28 = (uint64_t *)sub_20C1FFC20((uint64_t)(v25 + 3), v24);
          v29 = v28;
          v30 = v28[1];
          if (v30 >= v28[2])
          {
            v31 = sub_20BFD7890(v28, Path);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)v28[1], Path);
            sub_20BFD6EA4((_DWORD *)(v30 + 4), (_DWORD *)Path + 1);
            v31 = v30 + 8;
          }
          v29[1] = v31;
          v32 = v98;
          if (v98)
          {
            __dmb(0xBu);
            *v32 = 0;
          }
          ++v95;
          if (sub_20C1FE3D8(1))
          {
            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v21, (std::string *)&v108);
            if ((SBYTE7(v109) & 0x80u) == 0)
              v33 = &v108;
            else
              v33 = (__int128 *)v108;
            ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
            pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, ArcType, (uint64_t)&v98);
            if (v100 >= 0)
              v35 = &v98;
            else
              v35 = v98;
            v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
            v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v36);
            v38 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
            v39 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v38);
            Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v39);
            sub_20C1FE438(Identifier);
            p_p = &__p;
            if (v97 < 0)
              p_p = __p;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node %i (%s %s): <%s> %s\n", v41, v42, v20, v33, v35, v37, p_p);
            if (v97 < 0)
              operator delete(__p);
            if (v100 < 0)
              operator delete(v98);
            if (SBYTE7(v109) < 0)
              operator delete((void *)v108);
          }
        }
        v19 = v20 + 1;
      }
      while (v17 != v18 || v94 != v20);
    }
    v45 = *a3;
    v44 = a3[1];
    if (*a3 != v44)
    {
      v102 = 0;
      LOBYTE(v103) = 0;
      v46 = a1[36];
      if (v46)
      {
        sub_20C15BA90(&v102, v46 + 8);
        v45 = *a3;
        v44 = a3[1];
      }
      if (v45 == v44)
      {
        v54 = v44;
      }
      else
      {
        do
        {
          v110 = 0;
          v108 = 0u;
          v109 = 0u;
          v47 = sub_20C1FFCEC((uint64_t)a1, (_QWORD *)(v45 + 8), (_QWORD *)(v45 + 8), (uint64_t)&v108);
          v49 = v48;
          sub_20C20003C((uint64_t *)&v108);
          if (v49)
            ++a1[5];
          v50 = (uint64_t *)sub_20C1FFC20((uint64_t)(v47 + 3), (_DWORD *)(v45 + 16));
          v51 = v50;
          v52 = v50[1];
          if (v52 >= v50[2])
          {
            v53 = sub_20BFD7890(v50, Path);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)v50[1], Path);
            sub_20BFD6EA4((_DWORD *)(v52 + 4), (_DWORD *)Path + 1);
            v53 = v52 + 8;
          }
          v51[1] = v53;
          v45 += 88;
        }
        while (v45 != v44);
        v44 = *a3;
        v54 = a3[1];
      }
      *(_QWORD *)&v108 = Path;
      v55 = sub_20C201668((uint64_t)(a1 + 6), (unsigned int *)Path, (uint64_t)&unk_20CAC184C, (_DWORD **)&v108);
      v56 = (void **)(v55 + 3);
      v57 = v55[3];
      if (v57 == v55[4])
      {
        sub_20C20198C(v56);
        *(_OWORD *)(v55 + 3) = *(_OWORD *)a3;
        v55[5] = a3[2];
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      else
      {
        sub_20C201A48((uint64_t *)v56, v57, *a3, a3[1], 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
      }
      v58 = v102;
      if (v102)
      {
        __dmb(0xBu);
        *v58 = 0;
      }
      v95 -= 1171354717 * ((unint64_t)(v54 - v44) >> 3);
      if (sub_20C1FE3D8(1))
      {
        v59 = (uint64_t *)v55[3];
        for (i = (unsigned int *)v55[4]; v59 != (uint64_t *)i; v59 += 11)
        {
          if (sub_20C1FE3D8(1))
          {
            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString((pxrInternal__aapl__pxrReserved__ *)*(unsigned int *)v59, (std::string *)&v108);
            if ((SBYTE7(v109) & 0x80u) == 0)
              v61 = &v108;
            else
              v61 = (__int128 *)v108;
            v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v59 + 2));
            v63 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v59 + 1);
            v64 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v63);
            sub_20C1FE438(v64);
            if (SHIBYTE(v104) >= 0)
              v67 = &v102;
            else
              v67 = v102;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node (culled) (%s): <%s> %s\n", v65, v66, v61, v62, v67);
            if (SHIBYTE(v104) < 0)
              operator delete(v102);
            if (SBYTE7(v109) < 0)
              operator delete((void *)v108);
          }
        }
      }
    }
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)&v108 = 0;
      BYTE8(v108) = 0;
      v68 = a1[36];
      if (v68)
        sub_20C15BA90(&v108, v68 + 8);
      RelevantFieldNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantFieldNames(a4);
      v71 = RelevantFieldNames + 1;
      v70 = (_QWORD *)*RelevantFieldNames;
      if ((uint64_t *)*RelevantFieldNames != RelevantFieldNames + 1)
      {
        do
        {
          LODWORD(v102) = 0;
          v72 = sub_20C200698((uint64_t)(a1 + 16), v70 + 4, v70 + 4, &v102);
          ++*((_DWORD *)v72 + 6);
          v73 = (uint64_t *)v70[1];
          if (v73)
          {
            do
            {
              v74 = v73;
              v73 = (uint64_t *)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              v74 = (uint64_t *)v70[2];
              v75 = *v74 == (_QWORD)v70;
              v70 = v74;
            }
            while (!v75);
          }
          v70 = v74;
        }
        while (v74 != v71);
      }
      RelevantAttributeNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(a4);
      v78 = RelevantAttributeNames + 1;
      v77 = (_QWORD *)*RelevantAttributeNames;
      if ((uint64_t *)*RelevantAttributeNames != RelevantAttributeNames + 1)
      {
        do
        {
          LODWORD(v102) = 0;
          v79 = sub_20C200698((uint64_t)(a1 + 21), v77 + 4, v77 + 4, &v102);
          ++*((_DWORD *)v79 + 6);
          v80 = (uint64_t *)v77[1];
          if (v80)
          {
            do
            {
              v81 = v80;
              v80 = (uint64_t *)*v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              v81 = (uint64_t *)v77[2];
              v75 = *v81 == (_QWORD)v77;
              v77 = v81;
            }
            while (!v75);
          }
          v77 = v81;
        }
        while (v81 != v78);
      }
      v102 = Path;
      v82 = sub_20C202490((uint64_t)(a1 + 11), (unsigned int *)Path, (uint64_t)&unk_20CAC184C, (_DWORD **)&v102);
      v83 = v82[3];
      v82[3] = *(_QWORD *)a4;
      *(_QWORD *)a4 = v83;
      v84 = (_BYTE *)v108;
      if ((_QWORD)v108)
      {
        __dmb(0xBu);
        *v84 = 0;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)a5))
    {
      v102 = 0;
      LOBYTE(v103) = 0;
      v85 = a1[36];
      if (v85)
        sub_20C15BA90(&v102, v85 + 8);
      v98 = a1;
      v99 = Path;
      *(_QWORD *)&v108 = &v98;
      *((_QWORD *)&v108 + 1) = sub_20C202740;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_ForEachDependency((uint64_t)a5, (uint64_t)&v108);
      *(_QWORD *)&v108 = Path;
      v86 = sub_20C202ADC((uint64_t)(a1 + 26), (unsigned int *)Path, (uint64_t)&unk_20CAC184C, (_DWORD **)&v108);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::operator=(v86 + 3, a5);
      v87 = v102;
      if (v102)
      {
        __dmb(0xBu);
        *v87 = 0;
      }
    }
    if (!v95 && sub_20C1FE3D8(1))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    None\n", v88, v89);
  }
  while (v107--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v106);
}

void sub_20C1FE2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  sub_20BEB24F4(v40 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_20C1FE3D8(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C1FD928();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C1FD928();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C52B698[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_20C1FE438(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C1FE4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FE500(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>::operator->()"
            " const [U = pxrInternal__aapl__pxrReserved__::PcpLayerStack]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC7D08 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *Text;
  const char *v11;
  char *v12;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  std::string *v21;
  unsigned int ArcType;
  void **v23;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  const char *v25;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v27;
  uint64_t *Identifier;
  const char *v29;
  char *v30;
  void *p_p;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  unsigned int *i;
  __int128 *v40;
  const char *v41;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v42;
  uint64_t *v43;
  const char *v44;
  char *v45;
  std::string *v46;
  _QWORD *v47;
  _QWORD *v48;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *v49;
  uint64_t *RelevantFieldNames;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  BOOL v60;
  uint64_t *RelevantAttributeNames;
  _QWORD *v62;
  uint64_t *v63;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  _QWORD *v70;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *v71;
  unsigned int *v72;
  void *__p;
  char v74;
  void *v75[2];
  char v76;
  std::string v77;
  _QWORD v78[2];
  _QWORD *v79[3];
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v80;
  __int128 v81;
  __int128 v82;
  char v83;

  v80 = a3;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
  if (v6 && v5 != -1)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
    *(_QWORD *)&v81 = v7;
    *((_QWORD *)&v81 + 1) = v8;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v81);
    if (sub_20C1FE3D8(1))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Pcp_Dependencies: Removing deps for index <%s>\n", v11, v12, Text);
    }
    v71 = this;
    v72 = (unsigned int *)Path;
    v79[0] = this;
    v79[1] = Path;
    v79[2] = &v80;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v81);
    v14 = v81;
    v15 = v82;
    if (v81 != v82)
    {
      v16 = 0;
      v17 = ~*((_QWORD *)&v81 + 1) + *((_QWORD *)&v82 + 1);
      do
      {
        v18 = v16;
        v78[0] = v14;
        v78[1] = *((_QWORD *)&v14 + 1) + v16;
        v19 = pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)v78, v13);
        if ((v19 & 6) != 0)
        {
          v20 = (pxrInternal__aapl__pxrReserved__ *)v19;
          if (sub_20C1FE3D8(1))
          {
            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v20, &v77);
            if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v77;
            else
              v21 = (std::string *)v77.__r_.__value_.__r.__words[0];
            ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
            pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, ArcType, (uint64_t)v75);
            if (v76 >= 0)
              v23 = v75;
            else
              v23 = (void **)v75[0];
            v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
            v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
            v27 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v27);
            sub_20C1FE438(Identifier);
            p_p = &__p;
            if (v74 < 0)
              p_p = __p;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node %i (%s %s): <%s> %s\n", v29, v30, v18, v21, v23, v25, p_p);
            if (v74 < 0)
              operator delete(__p);
            if (v76 < 0)
              operator delete(v75[0]);
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v77.__r_.__value_.__l.__data_);
          }
          v32 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
          v33 = (unsigned int *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
          sub_20C1FEBA8(v79, v32, v33);
        }
        v16 = v18 + 1;
      }
      while ((_QWORD)v14 != v15 || v17 != v18);
    }
    v35 = (std::string::size_type)v71;
    v34 = v72;
    v36 = sub_20C0AD934((_QWORD *)v71 + 6, v72);
    if (v36)
    {
      v37 = v36;
      v38 = (uint64_t *)v36[3];
      for (i = (unsigned int *)v36[4]; v38 != (uint64_t *)i; v38 += 11)
      {
        if (sub_20C1FE3D8(1))
        {
          pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString((pxrInternal__aapl__pxrReserved__ *)*(unsigned int *)v38, (std::string *)&v81);
          if ((SBYTE7(v82) & 0x80u) == 0)
            v40 = &v81;
          else
            v40 = (__int128 *)v81;
          v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 + 2));
          v42 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v38 + 1);
          v43 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v42);
          sub_20C1FE438(v43);
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v77;
          else
            v46 = (std::string *)v77.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node (culled) (%s): <%s> %s\n", v44, v45, v40, v41, v46);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          if (SBYTE7(v82) < 0)
            operator delete((void *)v81);
        }
        sub_20C1FEBA8(v79, v38 + 1, (unsigned int *)v38 + 4);
      }
      sub_20BEB587C((_QWORD *)v71 + 6, v37, (uint64_t)&v81);
      sub_20C201948((uint64_t)&v81, 0);
      v34 = v72;
    }
    v47 = sub_20C0AD934((_QWORD *)v71 + 11, v34);
    if (v47)
    {
      v48 = v47;
      v49 = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)(v47 + 3);
      if (v47[3]
        || (*(_QWORD *)&v81 = "pcp/dependencies.cpp",
            *((_QWORD *)&v81 + 1) = "Remove",
            *(_QWORD *)&v82 = 345,
            *((_QWORD *)&v82 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimIndex &"
                                    ", PcpLifeboat *)",
            v83 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v81, "!it->second.IsEmpty()", 0) & 1) != 0))
      {
        RelevantFieldNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantFieldNames(v49);
        v52 = RelevantFieldNames + 1;
        v51 = (_QWORD *)*RelevantFieldNames;
        if ((uint64_t *)*RelevantFieldNames != RelevantFieldNames + 1)
        {
          v53 = (_QWORD *)((char *)v71 + 128);
          do
          {
            v54 = sub_20BF2B388(v53, v51 + 4);
            if (v54
              || (*(_QWORD *)&v81 = "pcp/dependencies.cpp",
                  *((_QWORD *)&v81 + 1) = "operator()",
                  *(_QWORD *)&v82 = 352,
                  *((_QWORD *)&v82 + 1) = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimI"
                                          "ndex &, PcpLifeboat *)::(anonymous class)::operator()(_FileFormatArgumentField"
                                          "DepMap &, const TfToken::Set &) const",
                  v83 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v81, "depMapIt != depMap.end()", 0) & 1) != 0))
            {
              v55 = *((_DWORD *)v54 + 6);
              v56 = __OFSUB__(v55, 1);
              v57 = v55 - 1;
              if ((v57 < 0) ^ v56 | (v57 == 0))
                sub_20C2010B0(v53, v54);
              else
                *((_DWORD *)v54 + 6) = v57;
            }
            v58 = (uint64_t *)v51[1];
            if (v58)
            {
              do
              {
                v59 = v58;
                v58 = (uint64_t *)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                v59 = (uint64_t *)v51[2];
                v60 = *v59 == (_QWORD)v51;
                v51 = v59;
              }
              while (!v60);
            }
            v51 = v59;
          }
          while (v59 != v52);
        }
        RelevantAttributeNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(v49);
        v63 = RelevantAttributeNames + 1;
        v62 = (_QWORD *)*RelevantAttributeNames;
        v35 = (std::string::size_type)v71;
        if ((uint64_t *)*RelevantAttributeNames != RelevantAttributeNames + 1)
        {
          do
          {
            v64 = sub_20BF2B388((_QWORD *)v71 + 21, v62 + 4);
            if (v64
              || (*(_QWORD *)&v81 = "pcp/dependencies.cpp",
                  *((_QWORD *)&v81 + 1) = "operator()",
                  *(_QWORD *)&v82 = 352,
                  *((_QWORD *)&v82 + 1) = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimI"
                                          "ndex &, PcpLifeboat *)::(anonymous class)::operator()(_FileFormatArgumentField"
                                          "DepMap &, const TfToken::Set &) const",
                  v83 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v81, "depMapIt != depMap.end()", 0) & 1) != 0))
            {
              v65 = *((_DWORD *)v64 + 6);
              v56 = __OFSUB__(v65, 1);
              v66 = v65 - 1;
              if ((v66 < 0) ^ v56 | (v66 == 0))
                sub_20C2010B0((_QWORD *)v71 + 21, v64);
              else
                *((_DWORD *)v64 + 6) = v66;
            }
            v67 = (uint64_t *)v62[1];
            if (v67)
            {
              do
              {
                v68 = v67;
                v67 = (uint64_t *)*v67;
              }
              while (v67);
            }
            else
            {
              do
              {
                v68 = (uint64_t *)v62[2];
                v60 = *v68 == (_QWORD)v62;
                v62 = v68;
              }
              while (!v60);
            }
            v62 = v68;
          }
          while (v68 != v63);
        }
      }
      sub_20BEB587C((_QWORD *)v71 + 11, v48, (uint64_t)&v81);
      sub_20C2026FC((uint64_t)&v81, 0);
      v34 = v72;
    }
    v69 = sub_20C0AD934((_QWORD *)(v35 + 208), v34);
    if (v69)
    {
      v70 = v69;
      v77.__r_.__value_.__r.__words[0] = v35;
      v77.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
      *(_QWORD *)&v81 = &v77;
      *((_QWORD *)&v81 + 1) = sub_20C202E60;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_ForEachDependency((uint64_t)(v69 + 3), (uint64_t)&v81);
      sub_20BEB587C((_QWORD *)(v35 + 208), v70, (uint64_t)&v81);
      sub_20C202E1C((uint64_t)&v81, 0);
    }
  }
}

void sub_20C1FEB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_20C1FEBA8(_QWORD **a1, _QWORD *a2, unsigned int *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  char *v9;
  char *v10;
  int *v11;
  int *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  const char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  char *v21;
  void *v22;
  unint64_t v23;
  const char *Text;
  const char *v25;
  char *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v28;
  uint64_t *Identifier;
  const char *v30;
  char *v31;
  void **v32;
  int v33;
  int v34;
  _QWORD *v35;
  void *v36;
  void *__p;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;

  v6 = *a1;
  __p = a2;
  v7 = sub_20C200A5C((uint64_t)v6, a2, (uint64_t)&unk_20CAC184C, (_QWORD **)&__p);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 3);
  v9 = sub_20C1FFC20((uint64_t)(v7 + 3), a3);
  v10 = v9;
  v11 = *(int **)v9;
  v12 = (int *)*((_QWORD *)v9 + 1);
  if (*(int **)v9 != v12)
  {
    while (*(_QWORD *)v11 != *a1[1])
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = (int *)*((_QWORD *)v9 + 1);
        break;
      }
    }
  }
  if (v11 == v12)
  {
    __p = "pcp/dependencies.cpp";
    v38 = "operator()";
    v39 = 251;
    v40 = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimIndex &, PcpLifeboat *)::(anonymo"
          "us class)::operator()(const PcpLayerStackRefPtr &, const SdfPath &) const";
    v41 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "i != deps.end()", 0))
      return;
    v12 = (int *)*((_QWORD *)v10 + 1);
  }
  sub_20C200970(v11, v12 - 2);
  sub_20C0D8454((uint64_t)&__p, v12, *((int **)v10 + 1), v12 - 2);
  v14 = v13;
  v15 = (_DWORD *)*((_QWORD *)v10 + 1);
  if (v15 != v13)
  {
    do
    {
      v15 -= 2;
      sub_20BFD6F64((uint64_t)(v10 + 16), v15);
    }
    while (v15 != v14);
  }
  *((_QWORD *)v10 + 1) = v14;
  if (*(_DWORD **)v10 == v14)
  {
    if (sub_20C1FE3D8(1))
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"      Removed last dep on site\n", v16, v17);
    v38 = 0;
    __p = sub_20C200D44(v8, a3);
    v18 = (_QWORD *)sub_20C200DAC((uint64_t)&__p);
    v19 = __p;
    v35 = __p;
    v36 = __p;
    if (v18 == __p)
      goto LABEL_18;
    while (v19[1] == v19[2])
    {
      v19 = (_QWORD *)v19[5];
      if (!v19)
        v19 = (_QWORD *)sub_20C200DAC((uint64_t)&v36);
      v36 = v19;
      if (v19 == v18)
        goto LABEL_18;
    }
    if (v19 == v18)
    {
LABEL_18:
      sub_20C200A20(v8, (uint64_t *)&v35);
      if (sub_20C1FE3D8(1))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"      No subtree deps\n", v20, v21);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v33);
      while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v33))
      {
        v38 = 0;
        __p = sub_20C200D44(v8, (unsigned int *)&v33);
        v22 = (void *)sub_20C200DAC((uint64_t)&__p);
        v35 = __p;
        if (__p == v22)
          break;
        v23 = *((_QWORD *)__p + 5);
        if (!v23)
          v23 = sub_20C200DAC((uint64_t)&__p);
        if ((void *)v23 != v22 || v35[1] != v35[2])
          break;
        if (sub_20C1FE3D8(1))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    Removing empty parent entry <%s>\n", v25, v26, Text);
        }
        sub_20C200A20(v8, (uint64_t *)&v35);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &__p);
        sub_20BFD3EBC(&v33, (int *)&__p);
        sub_20BFD3F10(&v34, (int *)&__p + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_20BFD265C(&v33);
      if (!v7[6])
      {
        v27 = *a1[2];
        if (v27)
          pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain(v27, a2);
        sub_20C201034(v6, a2);
        ++v6[5];
        if (sub_20C1FE3D8(1))
        {
          v28 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a2);
          Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v28);
          sub_20C1FE438(Identifier);
          v32 = v39 >= 0 ? &__p : (void **)__p;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    Removed last dep on %s\n", v30, v31, v32);
          if (SHIBYTE(v39) < 0)
            operator delete(__p);
        }
      }
    }
  }
}

void sub_20C1FEF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::RemoveAll(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a2)
{
  const char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_20C1FE3D8(1))
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Pcp_Dependencies::RemoveAll: Clearing all dependencies\n", v4, v5);
  if (a2)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = 0;
    if (v7)
    {
      do
      {
        v6 = sub_20C1FF03C(&v7, (uint64_t)v4, v5);
        pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain((uint64_t)a2, (unint64_t *)(*v6 + 16));
        sub_20C1FF0B4((uint64_t)&v7);
      }
      while (v7 != v8);
    }
  }
  sub_20C202F30((uint64_t)this);
  ++*((_QWORD *)this + 5);
  sub_20BF2B260((uint64_t)this + 128);
  sub_20BF2B260((uint64_t)this + 168);
  sub_20C202F84((uint64_t)this + 48);
  sub_20C202FD8((uint64_t)this + 88);
  sub_20C20302C((uint64_t)this + 208);
  sub_20C203080((uint64_t)this + 248);
}

_QWORD *sub_20C1FF03C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__pxrReserved__::"
            "TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<st"
            "d::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator-"
            ">() [T = std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Pcp"
            "LayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::Sd"
            "fPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C1FF0B4(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__p"
            "xrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::S"
            "dfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHas"
            "h>>::operator++() [T = std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrR"
            "eserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxr"
            "Reserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedLayers@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t Layers;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a4 + 8) = 0;
  v5 = (_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v11 = *(_QWORD *)(this + 16);
  v12 = 0;
  while (v11 != v12)
  {
    v6 = sub_20C1FF1E8(&v11, a2, a3);
    v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)(*v6 + 16));
    Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
    v9 = *(uint64_t **)Layers;
    v10 = *(uint64_t **)(Layers + 8);
    while (v9 != v10)
      sub_20C2030D4((uint64_t **)a4, v5, v9++);
    this = sub_20C1FF260((uint64_t)&v11);
  }
  return this;
}

void sub_20C1FF1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFF29AC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1FF1E8(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::unordered_map<pxrInternal__aapl__pxrReserv"
            "ed__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTa"
            "ble<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>>::ope"
            "rator->() [T = const std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrRes"
            "erved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxrRe"
            "served__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C1FF260(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::unordered_map<pxrInternal__a"
            "apl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserve"
            "d__::SdfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__:"
            ":TfHash>>::operator++() [T = const std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal"
            "__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInterna"
            "l__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedRootLayers@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v6;
  uint64_t *Identifier;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v14 = *(_QWORD *)(this + 16);
  v15 = 0;
  while (v14 != v15)
  {
    v5 = sub_20C1FF1E8(&v14, a2, a3);
    sub_20C2033F4(&v12, (uint64_t *)(*v5 + 16));
    v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(&v12);
    Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v6);
    sub_20BFF2A18((uint64_t **)a4, (uint64_t)Identifier, Identifier);
    v8 = v13;
    if (v13)
    {
      v9 = (unsigned int *)(v13 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    this = sub_20C1FF260((uint64_t)&v14);
  }
  return this;
}

void sub_20C1FF390(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFF29AC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FF3C0(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::PcpLayerStack>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::PcpLayerStack]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC7E06 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::UsesLayerStack(_QWORD *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;

  v3 = a2[1];
  if (v3)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)a2 + 1) + 14))
      v3 = *a2;
    else
      v3 = 0;
  }
  v7 = v3;
  sub_20BF1DD04((uint64_t *)&v7);
  v5 = sub_20BEDA270(a1, &v7) != 0;
  sub_20C2012CC(&v7);
  return v5;
}

void sub_20C1FF4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetCulledDependencies(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  unsigned int *v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)&qword_254988040);
  if ((v2 & 1) == 0)
  {
    v6 = a2;
    v7 = a1;
    v5 = __cxa_guard_acquire(&qword_254988040);
    a2 = v6;
    a1 = v7;
    if (v5)
    {
      qword_254988028 = 0;
      unk_254988030 = 0;
      qword_254988038 = 0;
      __cxa_atexit((void (*)(void *))sub_20C1FF58C, &qword_254988028, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988040);
      a2 = v6;
      a1 = v7;
    }
  }
  v3 = sub_20C0E70D0((_QWORD *)(a1 + 48), a2);
  if (v3)
    return v3 + 3;
  else
    return &qword_254988028;
}

{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetCulledDependencies(*(_QWORD *)(a1 + 288), a2);
}

void **sub_20C1FF58C(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20C2034B0(&v3);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentFieldDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  return *((_QWORD *)this + 19) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentAttributeDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  return *((_QWORD *)this + 24) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentField(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_20BF2B2B4((_QWORD *)this + 16, a2) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentAttribute(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_20BF2B2B4((_QWORD *)this + 21, a2) != 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetDynamicFileFormatArgumentDependencyData(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  unsigned int *v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)&qword_254988050);
  if ((v2 & 1) == 0)
  {
    v6 = a2;
    v7 = a1;
    v5 = __cxa_guard_acquire(&qword_254988050);
    a2 = v6;
    a1 = v7;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))sub_20C1FF6BC, &unk_254988048, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988050);
      a2 = v6;
      a1 = v7;
    }
  }
  v3 = sub_20C0E70D0((_QWORD *)(a1 + 88), a2);
  if (v3)
    return v3 + 3;
  else
    return &unk_254988048;
}

uint64_t *sub_20C1FF6BC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_20C201118((uint64_t)a1, v2);
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetPrimsUsingExpressionVariablesFromLayerStack(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)&qword_254988070);
  if ((v2 & 1) == 0)
  {
    v6 = a2;
    v7 = a1;
    v5 = __cxa_guard_acquire(&qword_254988070);
    a2 = v6;
    a1 = v7;
    if (v5)
    {
      qword_254988058 = 0;
      unk_254988060 = 0;
      qword_254988068 = 0;
      __cxa_atexit((void (*)(void *))sub_20C1FF790, &qword_254988058, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988070);
      a2 = v6;
      a1 = v7;
    }
  }
  v3 = sub_20C203534((_QWORD *)(a1 + 248), a2);
  if (v3)
    return v3 + 4;
  else
    return &qword_254988058;
}

void **sub_20C1FF790(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20BFD6F90(&v3);
  return a1;
}

__int128 *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetExpressionVariablesFromLayerStackUsedByPrim(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned __int8 v4;
  _QWORD *v5;
  __int128 *v6;
  _QWORD *DependenciesForLayerStack;
  unsigned int *v9;
  int v10;
  int v11;
  uint64_t v12;

  v4 = atomic_load((unsigned __int8 *)&qword_2549880A0);
  if ((v4 & 1) == 0)
  {
    v12 = a1;
    v9 = a2;
    v10 = __cxa_guard_acquire(&qword_2549880A0);
    a2 = v9;
    v11 = v10;
    a1 = v12;
    if (v11)
    {
      xmmword_254988078 = 0u;
      unk_254988088 = 0u;
      dword_254988098 = 1065353216;
      __cxa_atexit((void (*)(void *))sub_20C1FF890, &xmmword_254988078, &dword_20BDBC000);
      __cxa_guard_release(&qword_2549880A0);
      a1 = v12;
      a2 = v9;
    }
  }
  v5 = sub_20C0E70D0((_QWORD *)(a1 + 208), a2);
  v6 = &xmmword_254988078;
  if (v5)
  {
    DependenciesForLayerStack = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::GetDependenciesForLayerStack((_QWORD **)v5 + 3, a3);
    if (DependenciesForLayerStack)
      return (__int128 *)DependenciesForLayerStack;
  }
  return v6;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Pcp_AddCulledDependency(pxrInternal__aapl__pxrReserved__ *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  int v5;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  _DWORD *Path;
  uint64_t v9;
  _DWORD *v10;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v12;
  char *v13;
  char *v14;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[56];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency(a1, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a2);
  if ((result & 6) != 0)
  {
    v5 = (int)result;
    sub_20C1FFB08((uint64_t)&v20);
    v20 = v5;
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
    v7 = v21;
    v21 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*LayerStack;
    sub_20BF1DD04(LayerStack);
    sub_20BF1D8F4((int)&v21, v7);
    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
    sub_20C01A074(&v22, Path);
    sub_20C01A0C8(&v23, Path + 1);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 3)
    {
      v18[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
      v18[1] = v9;
      v10 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
      sub_20BFD6E54(&v19, v10);
      sub_20BFD6EA4((_DWORD *)&v19 + 1, v10 + 1);
    }
    else
    {
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v19);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v19 + 1);
    }
    sub_20C01A074(&v24, &v19);
    sub_20C01A0C8(&v25, (_DWORD *)&v19 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_20BFD265C(&v19);
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a1);
    v14 = (char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v12, v13);
    if (v26 != v14)
    {
      v15 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v26);
      sub_20C20123C(v15, (uint64_t)v14);
    }
    *(_OWORD *)&v26[40] = *(_OWORD *)(v14 + 40);
    v16 = a2[1];
    if (v16 >= a2[2])
    {
      v17 = sub_20C203654(a2, (uint64_t)&v20);
    }
    else
    {
      sub_20C201E54((uint64_t)(a2 + 2), a2[1], (uint64_t)&v20);
      v17 = v16 + 88;
      a2[1] = v16 + 88;
    }
    a2[1] = v17;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_20BFD265C(&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_20BFD265C(&v22);
    return sub_20C2012CC(&v21);
  }
  return result;
}

void sub_20C1FFAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v5 + 8) = v6;
  sub_20C1FFBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FFB08(uint64_t a1)
{
  _DWORD *v2;

  *(_DWORD *)a1 = 0;
  v2 = (_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 28));
  sub_20C20116C(a1 + 32);
  return a1;
}

void sub_20C1FFB8C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v5);
  sub_20BFD265C(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20BFD265C(v2);
  sub_20C2012CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1FFBC8(uint64_t a1)
{
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

char *sub_20C1FFC20(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _QWORD v6[3];
  unsigned int v7;
  int v8;
  _QWORD v9[3];
  void **v10;

  sub_20BFD6E54(&v7, a2);
  sub_20BFD6EA4(&v8, a2 + 1);
  memset(v9, 0, sizeof(v9));
  memset(v6, 0, sizeof(v6));
  v4 = sub_20C200158(a1, &v7);
  v10 = (void **)v9;
  sub_20BFD6F90(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  v10 = (void **)v6;
  sub_20BFD6F90(&v10);
  return (char *)v4 + 8;
}

void sub_20C1FFCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  sub_20C200110((uint64_t)&a12);
  *(_QWORD *)(v12 - 40) = &a9;
  sub_20BFD6F90((void ***)(v12 - 40));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1FFCEC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == *a2)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C1FFF38(a1, v6, a3, a4, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C1FFF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    sub_20C1FFFF0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C1FFF38@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  __n128 result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 2) = *a3;
  sub_20BF1DD04((uint64_t *)v10 + 2);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  result = *(__n128 *)(a4 + 24);
  *((__n128 *)v10 + 3) = result;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C1FFFD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C1FFFF0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C1FFFF0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_20C20003C((uint64_t *)__p + 3);
    sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p + 2);
  }
  if (__p)
    operator delete(__p);
}

uint64_t *sub_20C20003C(uint64_t *a1)
{
  void *v2;

  sub_20C200070(a1);
  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C200070(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void **v9;

  v2 = a1[1] - *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 3;
    do
    {
      v5 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 32);
          v9 = (void **)(v6 + 8);
          sub_20BFD6F90(&v9);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          v8 = sub_20BFD265C((_DWORD *)v6);
          operator delete(v8);
          v6 = v7;
        }
        while (v7);
        v5 = *a1;
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

_DWORD *sub_20C200110(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  sub_20BFD6F90(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C200158(uint64_t a1, unsigned int *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5[2];
  unsigned int *v6;

  v6 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2002CC(a1, a2, (uint64_t *)&v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_20C2001A4(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_20C2001A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  int v9;
  int v10;
  _QWORD v11[3];
  int v12;
  int v13;
  void **v14;

  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v12);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12))
  {
    sub_20BFD6E54(&v9, &v12);
    sub_20BFD6EA4(&v10, &v13);
    memset(v11, 0, sizeof(v11));
    memset(v8, 0, sizeof(v8));
    v4 = sub_20C200158(a1, &v9);
    v14 = (void **)v11;
    sub_20BFD6F90(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    v14 = (void **)v8;
    sub_20BFD6F90(&v14);
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
      v6 = v5 | 1;
    else
      v6 = v4;
    *((_QWORD *)v3 + 6) = v6;
    *(_QWORD *)(v4 + 40) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_20BFD265C(&v12);
}

void sub_20C200298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20C200110((uint64_t)va1);
  *(_QWORD *)(v2 - 56) = va;
  sub_20BFD6F90((void ***)(v2 - 56));
  sub_20BFD1A18((int *)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2002CC(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_20C20040C((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = (_QWORD *)*v7;
    while (*v9 != *(_QWORD *)a2)
    {
      v9 = (_QWORD *)v9[4];
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      sub_20C20040C((void **)a1);
      v7 = (_QWORD *)(*(_QWORD *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = (_QWORD *)*v7;
    }
    v9 = operator new(0x38uLL);
    sub_20C200634((uint64_t)v9, *a3);
    v9[5] = 0;
    v9[6] = 0;
    v9[4] = v8;
    *v7 = v9;
    ++*(_QWORD *)(a1 + 24);
  }
  return v9;
}

void sub_20C2003F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C20040C(void **a1)
{
  char *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  _BOOL4 v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;

  sub_20BEB59B0((uint64_t)&v21, (uint64_t)"Sdf", (uint64_t)"SdfPathTable::_Grow");
  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Grow() [MappedType = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>]", 0, v2);
    v5 = v4 != 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19 = v4;
  v20 = v5;
  v6 = (2 * (_QWORD)a1[4]) | 1;
  if (v6 <= 7)
    v6 = 7;
  a1[4] = (void *)v6;
  sub_20C2005C0(&v17, v6 + 1);
  v7 = a1[1];
  if (v7 != *a1)
  {
    v8 = 0;
    v9 = (v7 - (_BYTE *)*a1) >> 3;
    do
    {
      v10 = (unsigned int *)*((_QWORD *)*a1 + v8);
      if (v10)
      {
        v11 = (unint64_t)a1[4];
        do
        {
          v12 = (unsigned int *)*((_QWORD *)v10 + 4);
          v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          v14 = v17;
          *((_QWORD *)v10 + 4) = *(_QWORD *)(v17 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v10;
          v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  v15 = a1[2];
  a1[2] = v18;
  *(_QWORD *)&v17 = v7;
  v18 = v15;
  if (v7)
  {
    *((_QWORD *)&v17 + 1) = v7;
    operator delete(v7);
  }
  v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_20C200594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2005C0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C200618(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C200634(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

void sub_20C200684(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C200698(uint64_t a1, _QWORD *a2, uint64_t *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C2008E0(a1, v7, a3, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C2008C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2008E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v9 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v9;
  *result = 0;
  result[1] = a2;
  v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

_DWORD *sub_20C200970(int *a1, int *a2)
{
  int v5;
  int v6;

  v5 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  v6 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  sub_20BFD3EBC(a1, a2);
  sub_20BFD3F10(a1 + 1, a2 + 1);
  sub_20BFD3EBC(a2, &v5);
  sub_20BFD3F10(a2 + 1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C200A20(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_20C200DE8(a1, *a2);
  sub_20C200E28(a1, v3);
  sub_20C200EC0(a1, (unsigned int *)v3);
}

_QWORD *sub_20C200A5C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == *a2)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C200CA8(a1, v6, a4, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C200C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    sub_20C1FFFF0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

double sub_20C200CA8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_QWORD *)v8 + 2) = **a3;
  sub_20BF1DD04((uint64_t *)v8 + 2);
  *((_QWORD *)v8 + 7) = 0;
  result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C200D28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C1FFFF0(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C200D44(_QWORD *a1, unsigned int *a2)
{
  _QWORD *result;

  if (!a1[3])
    return 0;
  for (result = *(_QWORD **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        result = (_QWORD *)result[4])
  {
    if (*result == *(_QWORD *)a2)
      break;
  }
  return result;
}

unint64_t sub_20C200DAC(uint64_t a1)
{
  uint64_t i;
  unint64_t result;
  BOOL v4;

  if (!*(_QWORD *)a1)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 48); ; i = *(_QWORD *)(result + 48))
  {
    result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0)
      break;
    if (result)
      v4 = (i & 7) == 0;
    else
      v4 = 0;
    if (!v4)
      return 0;
  }
  return result;
}

void sub_20C200DE8(_QWORD *a1, uint64_t a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    sub_20C200F74(a1, *(_QWORD *)(a2 + 40));
    sub_20C200EC0(a1, v2);
  }
}

_QWORD *sub_20C200E28(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *result;
  _QWORD *v5;
  unsigned int v6;
  int v7;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(_QWORD *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    v5 = sub_20C200D44(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_20BFD265C(&v6);
    return (_QWORD *)sub_20C200FE8((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_20C200EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C200EC0(_QWORD *a1, unsigned int *a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _DWORD *v7;
  void **v8;

  v3 = a2 + 1;
  v4 = (_QWORD *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    v5 = v4;
    v6 = (unsigned int *)*v4;
    v4 = (_QWORD *)(*v4 + 32);
  }
  while (v6 != a2);
  --a1[3];
  *v5 = *((_QWORD *)a2 + 4);
  v8 = (void **)(a2 + 2);
  sub_20BFD6F90(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  v7 = sub_20BFD265C(a2);
  operator delete(v7);
}

void sub_20C200F74(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  ((void (*)(void))sub_20C200DE8)();
  v4 = *(_QWORD *)(a2 + 48);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      v7 = *(_QWORD *)(v5 + 48);
      if ((v7 & 7) != 0)
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      else
        v8 = 0;
      sub_20C200DE8(a1, v5);
      sub_20C200EC0(a1, (unsigned int *)v5);
      v5 = v8;
    }
    while (v8);
  }
}

uint64_t sub_20C200FE8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 40);
  if (v2 == a2)
  {
    v5 = *(_QWORD *)(a2 + 48);
    if ((v5 & 7) != 0)
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    else
      v6 = 0;
    *(_QWORD *)(result + 40) = v6;
  }
  else
  {
    do
    {
      v3 = v2;
      v4 = *(_QWORD *)(v2 + 48);
      if ((v4 & 7) != 0)
        v2 = v4 & 0xFFFFFFFFFFFFFFF8;
      else
        v2 = 0;
    }
    while (v2 != a2);
    *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 48);
  }
  return result;
}

uint64_t *sub_20C201034(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_20BEB4074(a1, a2);
  if (result)
  {
    sub_20C201068(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_20C201068(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    sub_20C1FFFF0((uint64_t)&v6, v3);
  return v2;
}

uint64_t sub_20C2010B0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *__p;
  char v9;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
  {
    if (v9)
    {
      v4 = v3[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    operator delete(v3);
  }
  return v2;
}

void sub_20C201118(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (a2)
  {
    sub_20BF2B200(a2 + 48, *(_QWORD **)(a2 + 56));
    sub_20BF2B200(a2 + 24, *(_QWORD **)(a2 + 32));
    v3 = (void **)a2;
    sub_20BF8CB68(&v3);
    operator delete((void *)a2);
  }
}

uint64_t sub_20C20116C(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)(a1 + 40), 0.0, 1.0);
  return a1;
}

void sub_20C2011A4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  sub_20C2011B8(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *sub_20C2011B8(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  int v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  int v4;

  v2 = *((_DWORD *)this + 8);
  if (v2 > 2)
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(this);
  }
  else
  {
    *((_DWORD *)this + 8) = v2 - 1;
    if (v2)
    {
      v3 = this;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v3 + 3);
        sub_20BFD265C((_DWORD *)v3 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v3 + 1);
        sub_20BFD265C(v3);
        v3 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)v3 + 16);
        v4 = *((_DWORD *)this + 8);
        *((_DWORD *)this + 8) = v4 - 1;
      }
      while (v4);
    }
  }
  return this;
}

_DWORD *sub_20C20123C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (_DWORD *)a2;
  v3 = a1;
  v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((_BYTE *)a1 + 36) = *(_BYTE *)(a2 + 36);
  if (v4 > 2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v5 = *(int *)(a2 + 32);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        v7 = sub_20C0D9B58(a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2012CC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C2012F8(uint64_t a1)
{
  void *v2;

  sub_20C201330(a1, *(void **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C201330(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(void **)v2;
      sub_20C20003C((uint64_t *)v2 + 3);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C201380(uint64_t a1)
{
  void *v2;

  sub_20C2013B8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2013B8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2013F4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C2013F4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  sub_20C2034B0(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C20143C(uint64_t a1)
{
  void *v2;

  sub_20C201474(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C201474(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2014B0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C2014B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C201118((uint64_t)v2, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C2014EC(uint64_t a1)
{
  void *v2;

  sub_20C201524(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C201524(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20C201560(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C201560(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C201594(uint64_t a1)
{
  void *v2;

  sub_20C2015CC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2015CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C201608((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C201608(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;

  v6 = (void **)(a1 + 16);
  sub_20BFD6F90(&v6);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_20C201668(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C2018D4(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C201948((uint64_t)v21, 0);
  return v10;
}

void sub_20C2018BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C201948((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2018D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  sub_20BFD6E54((_DWORD *)v8 + 4, v9);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, v9 + 1);
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C201948(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2013F4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C20198C(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_20C2019F8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2019F8(uint64_t a1, uint64_t a2)
{
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
  sub_20BFD265C((_DWORD *)(a2 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  return sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 8));
}

uint64_t sub_20C201A48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = a3 + 88 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_20C201DAC(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20C201C54((uint64_t)a1, v5, v12, v5 + 88 * a5);
      sub_20C2020B0((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL)
        sub_20BDDF694();
      v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x1745D1745D1745DLL)
        v18 = 0x2E8BA2E8BA2E8BALL;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_20BF23478(v9, v18);
      else
        v19 = 0;
      v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v19 + 88 * v15);
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = (char *)v19 + 88 * v18;
      v23 = 88 * a5;
      v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 88 * a5);
      do
      {
        sub_20C201E54(v29, (uint64_t)v22, v7);
        v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 88);
        v7 += 88;
        v23 -= 88;
      }
      while (v23);
      v27 = v24;
      v5 = sub_20C201CFC(a1, v26, v5);
      sub_20C20241C(v26);
    }
  }
  return v5;
}

void sub_20C201C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C201C54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      sub_20C201E54(a1 + 16, v8, v10);
      v10 += 88;
      v8 += 88;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C201FCC((uint64_t)&v12, a2, v7, v6);
}

void sub_20C201CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C201CFC(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C20217C((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C202234(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C201DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C201E54(a1, v4, v6);
      v6 += 88;
      v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C201F48((uint64_t)v9);
  return v4;
}

void sub_20C201E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C201F48((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C201E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  sub_20BFD38DC((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  sub_20BFD38A4((_DWORD *)(a2 + 24), (_DWORD *)(a3 + 24));
  sub_20BFD38DC((_DWORD *)(a2 + 28), (_DWORD *)(a3 + 28));
  sub_20C201ECC((_DWORD *)(a2 + 32), a3 + 32);
  result = *(__n128 *)(a3 + 72);
  *(__n128 *)(a2 + 72) = result;
  return result;
}

_DWORD *sub_20C201ECC(_DWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = (_DWORD *)a2;
  v3 = a1;
  v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((_BYTE *)a1 + 36) = *(_BYTE *)(a2 + 36);
  if (v4 > 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    v5 = *(int *)(a2 + 32);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        v7 = sub_20C0308C4(a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

uint64_t sub_20C201F48(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C201F7C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C201F7C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 88;
      result = (uint64_t *)sub_20C2019F8(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_20C201FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v11;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a3 + v7;
      v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a4 + v7 - 80);
      v10 = *v11;
      *((_DWORD *)v11 - 2) = *(_DWORD *)(a3 + v7 - 88);
      *v11 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 + v7 - 80);
      *(_QWORD *)(a3 + v7 - 80) = 0;
      sub_20BF1D8F4(a4 + v7 - 80, v10);
      sub_20BFD3EBC((int *)(a4 + v7 - 72), (int *)(a3 + v7 - 72));
      sub_20BFD3F10((int *)(a4 + v7 - 68), (int *)(a3 + v7 - 68));
      sub_20BFD3EBC((int *)(a4 + v7 - 64), (int *)(a3 + v7 - 64));
      sub_20BFD3F10((int *)(a4 + v7 - 60), (int *)(a3 + v7 - 60));
      if (a3 != a4)
      {
        v12 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v8 - 56));
        sub_20C201ECC(v12, v9 - 56);
      }
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(v9 - 16);
      v7 -= 88;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_20C2020B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v9;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 32;
  do
  {
    v7 = v6 - 32;
    *(_DWORD *)a4 = *(_DWORD *)(v6 - 32);
    v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(v6 - 24);
    *(_QWORD *)(v6 - 24) = 0;
    sub_20BF1D8F4(a4 + 8, v8);
    sub_20BFD3EBC((int *)(a4 + 16), (int *)(v6 - 16));
    sub_20BFD3F10((int *)(a4 + 20), (int *)(v6 - 12));
    sub_20BFD3EBC((int *)(a4 + 24), (int *)(v6 - 8));
    sub_20BFD3F10((int *)(a4 + 28), (int *)(v6 - 4));
    if (a4 != v6 - 32)
    {
      v9 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a4 + 32));
      sub_20C201ECC(v9, v6);
    }
    *(_OWORD *)(a4 + 72) = *(_OWORD *)(v6 + 40);
    a4 += 88;
    v6 += 88;
  }
  while (v7 + 88 != v5);
  return v5;
}

uint64_t sub_20C20217C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 88;
      sub_20C2022D4(v7 - 88, v9);
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C202398((uint64_t)v12);
  return v10;
}

void sub_20C202220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C202398((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C202234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C2022D4(v4, v6);
      v6 += 88;
      v4 = v11 + 88;
      v11 += 88;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C201F48((uint64_t)v8);
  return v4;
}

void sub_20C2022C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C201F48((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2022D4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_20BF1DD04((uint64_t *)(a1 + 8));
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4(v4, (_DWORD *)(a2 + 20));
  sub_20BFD6E54((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_20BFD6EA4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  sub_20C20123C((_DWORD *)(a1 + 32), a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

void sub_20C202374(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  _DWORD *v2;
  _DWORD *v3;

  sub_20BFD1A18(v3);
  sub_20BFD1A18(v2);
  sub_20C2012CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C202398(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2023CC((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C2023CC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2019F8(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C20241C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20C20244C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C20244C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = (uint64_t)v3[4];
      v3[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v1 - 88);
      result = sub_20C2019F8(v4, (uint64_t)v1 - 88);
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *sub_20C202490(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C12C484(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C2026FC((uint64_t)v21, 0);
  return v10;
}

void sub_20C2026E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2026FC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C2026FC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2014B0((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C202740(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t result;
  _QWORD *v9;

  v3 = *a1 + 248;
  v9 = a2;
  v4 = sub_20C2027D0(v3, (uint64_t)a2, (uint64_t)&unk_20CAC184C, &v9);
  v5 = v4;
  v6 = (_DWORD *)a1[1];
  v7 = v4[5];
  if (v7 >= v4[6])
  {
    result = sub_20BFD7890(v4 + 4, v6);
  }
  else
  {
    sub_20BFD6E54((_DWORD *)v4[5], v6);
    sub_20BFD6EA4((_DWORD *)(v7 + 4), v6 + 1);
    result = v7 + 8;
  }
  v5[5] = result;
  return result;
}

_QWORD *sub_20C2027D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v8 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v10 = bswap64(v8);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_20BEB560C((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = operator new(0x38uLL);
  v31[0] = v17;
  v31[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v17[2] = **a4;
  v19 = v18[1];
  v17[3] = v19;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v17[4] = 0;
  v17[5] = 0;
  v17[6] = 0;
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    sub_20BDEC6E0(a1, v27);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v31[0] = *v28;
    *v28 = v31[0];
  }
  else
  {
    *(_QWORD *)v31[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v31[0])
    {
      v29 = *(_QWORD *)(*(_QWORD *)v31[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11)
          v29 %= v11;
      }
      else
      {
        v29 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v31[0];
    }
  }
  v15 = (_QWORD *)v31[0];
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C202A98((uint64_t)v31, 0);
  return v15;
}

void sub_20C202A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C202A98((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C202A98(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C201608((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C202ADC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C202D48(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C202E1C((uint64_t)v21, 0);
  return v10;
}

void sub_20C202D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C202E1C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C202D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C202DB4((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C202D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C202E1C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C202DB4(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData((_QWORD *)(a1 + 8));
  return a1;
}

void sub_20C202DFC(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

void sub_20C202E1C(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C201560(v2 + 4);
    operator delete(v2);
  }
}

void sub_20C202E60(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int *v5;
  _QWORD v6[4];
  char v7;

  v3 = *a1 + 31;
  v4 = sub_20BEB5714(v3, a2);
  if (v4
    || (v6[0] = "pcp/dependencies.cpp",
        v6[1] = "operator()",
        v6[2] = 386,
        v6[3] = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimIndex &, PcpLifeboat *)::(a"
                "nonymous class)::operator()(const PcpLayerStackPtr &, const std::unordered_set<std::string> &) const",
        v7 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "layerStackIt != _layerStackExprVarsMap.end()", 0) & 1) != 0))
  {
    v5 = sub_20C11D810((int *)v4[4], (int *)v4[5], a1[1]);
    sub_20C11D784((uint64_t)(v4 + 4), v5, (int *)v4[5]);
    if (v4[4] == v4[5])
    {
      sub_20BEB587C(v3, v4, (uint64_t)v6);
      sub_20C202A98((uint64_t)v6, 0);
    }
  }
}

void sub_20C202F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C201330(a1, *(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20C202F84(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C2013B8(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20C202FD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C201474(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20C20302C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C201524(a1, *(_DWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20C203080(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C2015CC(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t *sub_20C2030D4(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  uint64_t v12;

  sub_20C203184((uint64_t)a1, a3, (uint64_t)&__p);
  v5 = (uint64_t **)sub_20C203208(a1, a2, &v10, &v9, (uint64_t)__p + 32);
  v6 = *v5;
  if (*v5)
  {
    v7 = __p;
    __p = 0;
    if (v7)
      sub_20C20338C((uint64_t)&v12, v7);
  }
  else
  {
    sub_20BDDE1B4(a1, v10, v5, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v6;
}

void sub_20C203160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p, uint64_t a13)
{
  if (__p)
    sub_20C20338C((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C203184@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = (uint64_t *)operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C1034E8(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C2031EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C20338C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C203208(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_20BFF2B40(a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_20BFF2B40((uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_20BFF2AB0((uint64_t)a1, a3, a5);
  }
  if (sub_20BFF2B40((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20BFF2B40(a5, (uint64_t)(v15 + 4)))
        return sub_20BFF2AB0((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_20C20338C(uint64_t a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (unsigned int *)__p[5];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_20C2033F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20C203498(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

void sub_20C2034B0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_20C2019F8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20C203534(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v4 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = bswap64(v4);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v7 == v13)
      {
        if (sub_20BEB560C((uint64_t)(v12 + 2), a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_20C203654(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20BDDF694();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_20BF23478((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (uint64_t)v7 + 88 * v3;
  v13 = (char *)v7 + 88 * v6;
  sub_20C201E54((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 88;
  sub_20C203778(a1, &v10);
  v8 = a1[1];
  sub_20C20241C(&v10);
  return v8;
}

void sub_20C203764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C20241C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C203778(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C20217C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::Pcp_Dump@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, std::string *a6@<X8>)
{
  const char *v9;
  _QWORD *v10;
  const char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  std::string *p_p;
  std::string::size_type size;
  const char *v17;
  char *v18;
  BOOL v19;
  int v20;
  _QWORD *v21;
  int v22;
  const char *v23;
  std::string *v24;
  std::string::size_type v25;
  unsigned int ArcType;
  const char *v27;
  char *v28;
  std::string *v29;
  std::string *v30;
  std::string::size_type v31;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v32;
  pxrInternal__aapl__pxrReserved__ *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *Text;
  const char *v40;
  char *v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t *LayerStack;
  const char *v45;
  char *v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  const char *v50;
  char *v51;
  const char *v52;
  pxrInternal__aapl__pxrReserved__::SdfPath *v53;
  std::string *v54;
  std::string::size_type v55;
  const char *v56;
  char *v57;
  BOOL v58;
  int v59;
  uint64_t *v60;
  std::string *v61;
  std::string *v62;
  std::string::size_type v63;
  uint64_t OriginNode;
  const char *v65;
  char *v66;
  _QWORD *v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  std::string *v71;
  std::string::size_type v72;
  uint64_t SiblingNumAtOrigin;
  const char *v74;
  char *v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  std::string::size_type v79;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v81;
  char *v82;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v83;
  const char *v84;
  char *v85;
  std::string *v86;
  std::string *v87;
  std::string::size_type v88;
  const char *v89;
  char *v90;
  std::string *v91;
  std::string::size_type v92;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v94;
  char *v95;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v96;
  const char *v97;
  char *v98;
  std::string *v99;
  std::string *v100;
  std::string::size_type v101;
  uint64_t NamespaceDepth;
  const char *v103;
  char *v104;
  std::string *v105;
  std::string::size_type v106;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v107;
  uint64_t DepthBelowIntroduction;
  const char *v109;
  char *v110;
  std::string *v111;
  std::string::size_type v112;
  unsigned int Permission;
  const char *v114;
  char *v115;
  std::string *v116;
  std::string *v117;
  std::string::size_type v118;
  const char *v119;
  char *v120;
  const char *v121;
  std::string *v122;
  std::string::size_type v123;
  const char *v124;
  char *v125;
  const char *v126;
  std::string *v127;
  std::string::size_type v128;
  const char *v129;
  char *v130;
  const char *v131;
  std::string *v132;
  std::string::size_type v133;
  uint64_t SpecContributionRestrictedDepth;
  const char *v135;
  char *v136;
  std::string *v137;
  std::string::size_type v138;
  const char *v139;
  char *v140;
  const char *v141;
  std::string *v142;
  std::string::size_type v143;
  const char *v144;
  char *v145;
  const char *v146;
  std::string *v147;
  std::string::size_type v148;
  uint64_t v149;
  char *v150;
  _QWORD *v151;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v152;
  uint64_t **v153;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v154;
  uint64_t Identifier;
  std::string::size_type v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v160;
  const char *v161;
  std::string *v162;
  uint64_t **v163;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v164;
  uint64_t v165;
  const char *v166;
  char *v167;
  uint64_t v168;
  void **v169;
  std::string::size_type v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  std::string::size_type v176;
  std::string::size_type v177;
  _QWORD *v178;
  std::string *v179;
  std::string::size_type v180;
  std::string __p;
  __int128 v186;
  std::string::size_type v187;
  std::string::size_type v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  void *v194[2];
  char v195;
  void *v196[2];
  unsigned __int8 v197;
  std::string v198;
  std::string v199;
  _QWORD v200[2];
  std::string v201;
  char *v202;
  char v203;
  uint64_t ParentNode;
  const char *v205;

  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
  v205 = v9;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  a6->__r_.__value_.__r.__words[0] = 0;
  v10 = sub_20C209D5C(a2, a1);
  v13 = (_QWORD *)(a2 + 8);
  if ((_QWORD *)(a2 + 8) == v10)
    v14 = 0;
  else
    v14 = *((unsigned int *)v10 + 12);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Node %d:\n", v11, v12, v14);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (ParentNode)
    v19 = v205 + 1 == 0;
  else
    v19 = 1;
  v20 = !v19;
  if (v19)
  {
    v23 = "NONE";
  }
  else
  {
    v21 = sub_20C209D5C(a2, &ParentNode);
    if (v13 == v21)
      v22 = 0;
    else
      v22 = *((_DWORD *)v21 + 12);
    LODWORD(v201.__r_.__value_.__l.__data_) = v22;
    sub_20BFEC9D8();
    if (v203 >= 0)
      v23 = (const char *)&v202;
    else
      v23 = v202;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Parent node:              %s\n", v17, v18, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v20)
      goto LABEL_38;
  }
  else if (!v20)
  {
    goto LABEL_38;
  }
  if (v203 < 0)
    operator delete(v202);
LABEL_38:
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, ArcType, (uint64_t)&v201);
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v201;
  else
    v29 = (std::string *)v201.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Type:                     %s\n", v27, v28, v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &__p;
  else
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v31 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  std::string::append(a6, "    DependencyType:           ");
  v33 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency(a1, v32);
  pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v33, &v201);
  v34 = std::string::append(&v201, "\n");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &__p;
  else
    v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v37 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v36, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Source path:              <%s>\n", v40, v41, Text);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &__p;
  else
    v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v43 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  sub_20C204894(LayerStack);
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v201;
  else
    v47 = (std::string *)v201.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Source layer stack:       %s\n", v45, v46, v47);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &__p;
  else
    v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v49 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v48, v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
  v52 = "NONE";
  if (ParentNode && v205 != (const char *)-1)
  {
    v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
    v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v53);
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Target path:              <%s>\n", v50, v51, v52);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &__p;
  else
    v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v55 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v54, v55);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (ParentNode)
    v58 = v205 + 1 == 0;
  else
    v58 = 1;
  v59 = !v58;
  if (v58)
  {
    v61 = (std::string *)"NONE";
  }
  else
  {
    v60 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
    sub_20C204894(v60);
    if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = &v201;
    else
      v61 = (std::string *)v201.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Target layer stack:       %s\n", v56, v57, v61);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &__p;
  else
    v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v63 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v62, v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v59)
      goto LABEL_116;
  }
  else if (!v59)
  {
    goto LABEL_116;
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
LABEL_116:
  OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a1);
  v200[0] = OriginNode;
  v200[1] = v65;
  if (v65 != v205 || ParentNode != OriginNode)
  {
    v67 = sub_20C209D5C(a2, v200);
    if (v13 == v67)
      v70 = 0;
    else
      v70 = *((unsigned int *)v67 + 12);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Origin node:              %d\n", v68, v69, v70);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &__p;
    else
      v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v72 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v71, v72);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Sibling # at origin:      %d\n", v74, v75, SiblingNumAtOrigin);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &__p;
    else
      v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v77 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v76, v77);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Map to parent:\n", v65, v66);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &__p;
    else
      v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v79 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v78, v79);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
    v83 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v81, v82);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v83, &v198);
    sub_20BDDC0E4(v196, "\n");
    sub_20BDDC0E4(v194, "\n        ");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v198, (unsigned __int8 *)v196, (unsigned __int8 *)v194, &v199);
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v199;
    else
      v86 = (std::string *)v199.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"        %s\n", v84, v85, v86);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = &__p;
    else
      v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v88 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v87, v88);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    if (v195 < 0)
      operator delete(v194[0]);
    if ((char)v197 < 0)
      operator delete(v196[0]);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Map to root:\n", v89, v90);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v91 = &__p;
    else
      v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v92 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v91, v92);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a1);
    v96 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v94, v95);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v96, &v198);
    sub_20BDDC0E4(v196, "\n");
    sub_20BDDC0E4(v194, "\n        ");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v198, (unsigned __int8 *)v196, (unsigned __int8 *)v194, &v199);
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = &v199;
    else
      v99 = (std::string *)v199.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"        %s\n", v97, v98, v99);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = &__p;
    else
      v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v101 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v100, v101);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    if (v195 < 0)
      operator delete(v194[0]);
    if ((char)v197 < 0)
      operator delete(v196[0]);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
  }
  NamespaceDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a1);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Namespace depth:          %d\n", v103, v104, NamespaceDepth);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v105 = &__p;
  else
    v105 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v106 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v105, v106);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(a1, v107);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Depth below introduction: %d\n", v109, v110, DepthBelowIntroduction);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v111 = &__p;
  else
    v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v112 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v112 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v111, v112);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Permission = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission(a1);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&stru_24C5298C8, Permission, (uint64_t)&v199);
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = &v199;
  else
    v116 = (std::string *)v199.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Permission:               %s\n", v114, v115, v116);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = &__p;
  else
    v117 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v118 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v118 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v117, v118);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(a1))
    v121 = "TRUE";
  else
    v121 = "FALSE";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Is restricted:            %s\n", v119, v120, v121);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v122 = &__p;
  else
    v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v123 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v122, v123);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(a1))
    v126 = "TRUE";
  else
    v126 = "FALSE";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Is inert:                 %s\n", v124, v125, v126);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v127 = &__p;
  else
    v127 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v128 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v127, v128);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a1))
    v131 = "TRUE";
  else
    v131 = "FALSE";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Contribute specs:         %s\n", v129, v130, v131);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v132 = &__p;
  else
    v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v133 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v132, v133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth(a1);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"        Restricted at depth:  %zu\n", v135, v136, SpecContributionRestrictedDepth);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v137 = &__p;
  else
    v137 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v138 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v137, v138);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1))
    v141 = "TRUE";
  else
    v141 = "FALSE";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Has specs:                %s\n", v139, v140, v141);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &__p;
  else
    v142 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v143 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v142, v143);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry(a1))
    v146 = "TRUE";
  else
    v146 = "FALSE";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Has symmetry:             %s\n", v144, v145, v146);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v147 = &__p;
  else
    v147 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v148 = __p.__r_.__value_.__l.__size_;
  std::string::append(a6, (const std::string::value_type *)v147, v148);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v151 = sub_20C209D5C(a3, a1);
  if ((_QWORD *)(a3 + 8) != v151)
  {
    std::string::append(a6, "    Prim stack:\n");
    *(_OWORD *)v194 = *((_OWORD *)v151 + 3);
    while (v194[0] != v194[1])
    {
      v152 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D86D0((uint64_t *)v194, v149, v150);
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)&v199.__r_.__value_.__r.__words[1] = 0uLL;
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__l.__size_;
      v153 = (uint64_t **)sub_20C0B0CA4(v152);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v153, (uint64_t *)&v198);
      v154 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v198);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v154);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(Identifier, &__p, &v199);
      v156 = v198.__r_.__value_.__l.__size_;
      if (v198.__r_.__value_.__l.__size_)
      {
        v157 = (unsigned int *)(v198.__r_.__value_.__l.__size_ + 8);
        do
        {
          v158 = __ldxr(v157);
          v159 = v158 - 1;
        }
        while (__stlxr(v159, v157));
        if (!v159)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v156 + 8))(v156);
      }
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__p, &v198);
      v160 = sub_20C0B0CA4(v152);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v160, &v192);
      v161 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v192);
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v162 = &v198;
      else
        v162 = (std::string *)v198.__r_.__value_.__r.__words[0];
      v163 = (uint64_t **)sub_20C0B0CA4(v152);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v163, &v190);
      v164 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v190);
      v165 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v164);
      if (*(char *)(v165 + 23) >= 0)
        v168 = v165;
      else
        v168 = *(_QWORD *)v165;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"      <%s> %s - @%s@\n", v166, v167, v161, v162, v168);
      if ((v197 & 0x80u) == 0)
        v169 = v196;
      else
        v169 = (void **)v196[0];
      if ((v197 & 0x80u) == 0)
        v170 = v197;
      else
        v170 = (std::string::size_type)v196[1];
      std::string::append(a6, (const std::string::value_type *)v169, v170);
      if ((char)v197 < 0)
        operator delete(v196[0]);
      v171 = v191;
      if (v191)
      {
        v172 = (unsigned int *)(v191 + 8);
        do
        {
          v173 = __ldxr(v172);
          v174 = v173 - 1;
        }
        while (__stlxr(v174, v172));
        if (!v174)
          (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v193);
      sub_20BFD265C(&v192);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      sub_20BDE9D48((uint64_t)&v199, (_QWORD *)v199.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_20C0D874C(v194);
    }
  }
  v175 = *((_QWORD *)a1 + 1);
  v188 = *(_QWORD *)a1;
  v189 = v175;
  v176 = **(_QWORD **)(v188 + 16);
  v177 = *(unsigned __int16 *)(v176 + 48 * v175 + 28);
  __p.__r_.__value_.__r.__words[0] = v188;
  __p.__r_.__value_.__l.__size_ = v177;
  __p.__r_.__value_.__r.__words[2] = v176;
  *(_QWORD *)&v186 = v188;
  *((_QWORD *)&v186 + 1) = 0xFFFFLL;
  v187 = v176;
  while (*(_OWORD *)&__p.__r_.__value_.__l.__data_ != v186)
  {
    v178 = sub_20C20495C(&__p, v149, v150);
    pxrInternal__aapl__pxrReserved__::Pcp_Dump(&v199, v178, a2, a3, a4, a5);
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v179 = &v199;
    else
      v179 = (std::string *)v199.__r_.__value_.__r.__words[0];
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v180 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
    else
      v180 = v199.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)v179, v180);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    sub_20C2049E8(&__p);
  }
  return std::string::append(a6, "\n");
}

void sub_20C2045A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v49 - 169) < 0)
    operator delete(*(void **)(v49 - 192));
  if (a35 < 0)
    operator delete(a30);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (*(char *)(v48 + 23) < 0)
    operator delete(*(void **)v48);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C204894(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C204948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C20495C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (result[1] == result[4] && *result == result[3])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator*";
    v3[2] = 271;
    v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateC"
            "hildrenConstRange>::operator*() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChildrenConstRange,"
            " Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C2049E8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = a1[1];
  if (v2 == a1[4] && *a1 == a1[3])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNo"
            "deRef_PrivateChildrenConstRange>::operator++() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChil"
            "drenConstRange, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[1] = *(unsigned __int16 *)(a1[2] + 48 * v2 + 34);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpDump(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  BOOL v5;
  unsigned int v7;
  char **v9;
  char *v10[2];
  uint64_t *v11;
  _QWORD *v12[2];

  if (*(_QWORD *)this)
    v5 = *((_QWORD *)this + 1) == -1;
  else
    v5 = 1;
  if (v5)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v7 = a2;
    v12[0] = 0;
    v12[1] = 0;
    v11 = (uint64_t *)v12;
    LODWORD(v9) = 0;
    sub_20C207E08(&v11, (uint64_t *)this, &v9);
    v10[0] = 0;
    v10[1] = 0;
    v9 = v10;
    pxrInternal__aapl__pxrReserved__::Pcp_Dump(this, (uint64_t)&v11, (uint64_t)&v9, v7, a3, a4);
    sub_20C209E5C((uint64_t)&v9, v10[0]);
    sub_20BE6100C((uint64_t)&v11, v12[0]);
  }
}

void sub_20C204B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20C209E5C((uint64_t)&a9, a10);
  sub_20BE6100C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpDump(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  __int128 v33;
  int v34;
  _DWORD v35[3];
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char **v40;
  char *v41[2];
  uint64_t *v42;
  _QWORD *v43[2];
  _OWORD *v44[2];

  v5 = a2;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  if (!v9 || v8 == -1)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v31 = v5;
    v10 = a3;
    v43[0] = 0;
    v43[1] = 0;
    v42 = (uint64_t *)v43;
    v41[0] = 0;
    v41[1] = 0;
    v40 = v41;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, (uint64_t *)&v36);
    v11 = v36;
    v12 = v37;
    v13 = v38;
    if (v36 != v38 || v37 != v39)
    {
      v14 = 0;
      v15 = ~v37 + v39;
      do
      {
        do
        {
          v16 = v14;
          *(_QWORD *)&v33 = v11;
          *((_QWORD *)&v33 + 1) = v12 + v14;
          v44[0] = &v33;
          *((_DWORD *)sub_20C209DD4(&v42, &v33, (uint64_t)&unk_20CAC184C, v44) + 12) = v14;
          v14 = v16 + 1;
        }
        while (v11 != v13);
      }
      while (v15 != v16);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange((uint64_t *)this, 6u, &v33);
    sub_20C209EB4((uint64_t)&v36, &v33);
    while (!pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v36, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v38))
    {
      sub_20C204E50((uint64_t)&v36, (uint64_t)&v33);
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v33);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v35);
      sub_20BFD265C(&v34);
      v18 = *((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v19 = (unsigned int *)(*((_QWORD *)&v33 + 1) + 8);
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      *(_QWORD *)&v33 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode(&v36);
      *((_QWORD *)&v33 + 1) = v22;
      v44[0] = &v33;
      v23 = sub_20C209EF4((uint64_t **)&v40, &v33, (uint64_t)&unk_20CAC184C, v44);
      v24 = v23;
      v25 = (_QWORD *)*((_QWORD *)v23 + 7);
      if ((unint64_t)v25 >= *((_QWORD *)v23 + 8))
      {
        v28 = sub_20C0D7E80((unsigned int ***)v23 + 6, &v32);
      }
      else
      {
        v26 = v32;
        *v25 = v32;
        if (v26)
        {
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
        }
        v28 = (char *)(v25 + 1);
      }
      *((_QWORD *)v24 + 7) = v28;
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v32);
      sub_20C204F34((uint64_t)&v36);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
    v36 = v29;
    v37 = v30;
    pxrInternal__aapl__pxrReserved__::Pcp_Dump((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v36, (uint64_t)&v42, (uint64_t)&v40, v31, v10, a4);
    sub_20C209E5C((uint64_t)&v40, v41[0]);
    sub_20BE6100C((uint64_t)&v42, v43[0]);
  }
}

void sub_20C204DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  uint64_t v25;

  sub_20C209E5C((uint64_t)&a24, a25);
  sub_20BE6100C(v25 - 128, *(_QWORD **)(v25 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_20C204E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  _QWORD v6[4];
  char v7;
  int v8;

  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)a1, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)(a1 + 16)))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    v6[2] = 271;
    v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpPrimIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>>::operator*() [T = std::pair<pxrInternal__aapl__p"
            "xrReserved__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, Reverse = false]";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return pxrInternal__aapl__pxrReserved__::PcpPrimIterator::dereference((uint64_t **)a1, a2);
}

uint64_t sub_20C204ED4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_20C204F34(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)a1, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)(a1 + 16)))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserve"
            "d__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>>::operator++() [T = std::pair<pxrIn"
            "ternal__aapl__pxrReserved__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::PcpNodeRef *pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v10[0] = v7;
  v10[1] = v8;
  return pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10, a2, a3, a4);
}

pxrInternal__aapl__pxrReserved__::PcpNodeRef *pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, const char *a3, uint64_t a4)
{
  BOOL v4;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  char v13;
  uint64_t v14;
  _BYTE v15[408];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)this)
    v4 = *((_QWORD *)this + 1) == -1;
  else
    v4 = 1;
  if (!v4)
  {
    v8 = this;
    sub_20BE81108(&v14);
    if ((v15[*(_QWORD *)(v14 - 24) + 24] & 5) != 0)
    {
      v9 = "pcp/diagnostic.cpp";
      v10 = "PcpDumpDotGraph";
      v11 = 424;
      v12 = "void pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(const PcpNodeRef &, const char *, BOOL, BOOL)";
      v13 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not write to %s\n", (const char *)a2);
    }
    else
    {
      sub_20BDDC1C8(&v14, (uint64_t)"digraph PcpPrimIndex {\n", 23);
      v10 = 0;
      v11 = 0;
      v9 = (char *)&v10;
      sub_20C2051BC(&v14, v8, (uint64_t)a3, a4, (uint64_t)&v9, 0);
      sub_20BE6100C((uint64_t)&v9, v10);
      sub_20BDDC1C8(&v14, (uint64_t)"}\n", 2);
    }
    v14 = *MEMORY[0x24BEDB7E8];
    *(_QWORD *)&v15[*(_QWORD *)(v14 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
    MEMORY[0x212B92AB4](v15);
    std::ostream::~ostream();
    return (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)MEMORY[0x212B92EB0](v16);
  }
  return this;
}

void sub_20C205188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20BE6100C((uint64_t)va, v5);
  sub_20C0FCC58((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2051BC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v7;
  uint64_t v8;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  int HasPrimSpecs;
  std::string *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  std::string::size_type v24;
  __int128 v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  std::string::size_type v33;
  __int128 v34;
  std::string *v35;
  std::string *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  std::string::size_type v42;
  __int128 v43;
  std::string *v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  uint64_t NamespaceDepth;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v49;
  uint64_t DepthBelowIntroduction;
  const char *v51;
  char *v52;
  std::string *v53;
  std::string::size_type size;
  char *v55;
  _QWORD *v56;
  uint64_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  pxrInternal__aapl__pxrReserved__::SdfPath *v61;
  _QWORD *v62;
  uint64_t UniqueIdentifier;
  const char *v64;
  char *v65;
  void *v66;
  std::string *p_p;
  std::string *v68;
  std::string *v69;
  std::string::size_type v70;
  const char *v71;
  char *v72;
  std::string *v73;
  std::string::size_type v74;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v76;
  char *v77;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v86;
  char *v87;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v88;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v89;
  const char *v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  std::string::size_type v98;
  const char *v99;
  char *v100;
  std::string *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string *v105;
  std::string *v106;
  std::string *v107;
  uint64_t v108;
  uint64_t OriginNode;
  uint64_t v110;
  uint64_t v111;
  uint64_t ParentNode;
  uint64_t v113;
  std::string::size_type v114;
  uint64_t v115;
  char *v116;
  std::string::size_type v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  char *v121;
  std::string *v122;
  std::string *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::string::size_type v130;
  uint64_t v131;
  const char *v132;
  char *v133;
  std::string *v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  _QWORD *v139;
  std::string v141;
  std::string v142;
  std::string v143;
  void *v144;
  char v145;
  std::string __p;
  std::string *v147;
  std::string *v148;
  unint64_t v149;
  std::string v150;
  __int128 v151;
  std::string::size_type v152;
  std::string::size_type v153;
  uint64_t v154;
  void *v155;
  char v156;
  uint64_t v157;
  std::string v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2)
    v7 = *((_QWORD *)a2 + 1) == -1;
  else
    v7 = 1;
  if (v7)
  {
    sub_20BDDC1C8(a1, (uint64_t)"\t0 [label=\"...\",shape=box,style=dotted];\n", 41);
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a2))
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
    Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a2);
    HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
  }
  else
  {
    HasPrimSpecs = 0;
  }
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(a2))
  {
    sub_20BDDC0E4(&__p, "permission denied");
    v18 = v148;
    if ((unint64_t)v148 >= v149)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v149 - (_QWORD)v147) >> 3) > v21)
        v21 = 0x5555555555555556 * ((uint64_t)(v149 - (_QWORD)v147) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (_QWORD)v147) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      *((_QWORD *)&v151 + 1) = &v149;
      if (v22)
        v23 = (char *)sub_20BDE4FF4((uint64_t)&v149, v22);
      else
        v23 = 0;
      v24 = (std::string::size_type)&v23[24 * v20];
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      v150.__r_.__value_.__l.__size_ = v24;
      *(_QWORD *)&v151 = &v23[24 * v22];
      v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v24 = v25;
      memset(&__p, 0, sizeof(__p));
      v150.__r_.__value_.__r.__words[2] = v24 + 24;
      sub_20BDF34C0((uint64_t *)&v147, &v150);
      v26 = v148;
      sub_20BDF3648((uint64_t)&v150);
      v148 = v26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v148->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      v148 = v18 + 1;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(a2))
  {
    sub_20BDDC0E4(&__p, "inert");
    v27 = v148;
    if ((unint64_t)v148 >= v149)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v149 - (_QWORD)v147) >> 3) > v30)
        v30 = 0x5555555555555556 * ((uint64_t)(v149 - (_QWORD)v147) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (_QWORD)v147) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v30;
      *((_QWORD *)&v151 + 1) = &v149;
      if (v31)
        v32 = (char *)sub_20BDE4FF4((uint64_t)&v149, v31);
      else
        v32 = 0;
      v33 = (std::string::size_type)&v32[24 * v29];
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v150.__r_.__value_.__l.__size_ = v33;
      *(_QWORD *)&v151 = &v32[24 * v31];
      v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v33 = v34;
      memset(&__p, 0, sizeof(__p));
      v150.__r_.__value_.__r.__words[2] = v33 + 24;
      sub_20BDF34C0((uint64_t *)&v147, &v150);
      v35 = v148;
      sub_20BDF3648((uint64_t)&v150);
      v148 = v35;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v148->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
      v148 = v27 + 1;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a2))
  {
    sub_20BDDC0E4(&__p, "culled");
    v36 = v148;
    if ((unint64_t)v148 >= v149)
    {
      v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3);
      v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v149 - (_QWORD)v147) >> 3) > v39)
        v39 = 0x5555555555555556 * ((uint64_t)(v149 - (_QWORD)v147) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (_QWORD)v147) >> 3) >= 0x555555555555555)
        v40 = 0xAAAAAAAAAAAAAAALL;
      else
        v40 = v39;
      *((_QWORD *)&v151 + 1) = &v149;
      if (v40)
        v41 = (char *)sub_20BDE4FF4((uint64_t)&v149, v40);
      else
        v41 = 0;
      v42 = (std::string::size_type)&v41[24 * v38];
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      v150.__r_.__value_.__l.__size_ = v42;
      *(_QWORD *)&v151 = &v41[24 * v40];
      v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v42 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v42 = v43;
      memset(&__p, 0, sizeof(__p));
      v150.__r_.__value_.__r.__words[2] = v42 + 24;
      sub_20BDF34C0((uint64_t *)&v147, &v150);
      v44 = v148;
      sub_20BDF3648((uint64_t)&v150);
      v148 = v44;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v148->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
      v148 = v36 + 1;
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (v147 != v148)
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", &v147, &v150);
    v45 = std::string::insert(&v150, 0, "\\n");
    v46 = v45->__r_.__value_.__r.__words[0];
    v158.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
    v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v46;
    __p.__r_.__value_.__l.__size_ = v158.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v47;
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
  }
  if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a2) & 1) == 0)
    std::string::append(&__p, "\\nCANNOT contribute specs");
  NamespaceDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2);
  DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(a2, v49);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\\ndepth (below intro): %i (%i)", v51, v52, NamespaceDepth, DepthBelowIntroduction);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v150;
  else
    v53 = (std::string *)v150.__r_.__value_.__r.__words[0];
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  else
    size = v150.__r_.__value_.__l.__size_;
  std::string::append(&__p, (const std::string::value_type *)v53, size);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (HasPrimSpecs)
    v55 = "solid";
  else
    v55 = "dotted";
  sub_20BDDC0E4(&v158, v55);
  if (sub_20C207ED4(a5, a2))
    std::string::append(&v158, ", filled");
  sub_20BDDE5E0((uint64_t)&v150);
  v56 = pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(&v150);
  v57 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  v58 = pxrInternal__aapl__pxrReserved__::operator<<(v56, v57);
  v59 = sub_20BDDC1C8(v58, (uint64_t)"\\n", 2);
  v60 = sub_20BDDC1C8(v59, (uint64_t)"<", 1);
  v61 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a2);
  v62 = pxrInternal__aapl__pxrReserved__::operator<<(v60, v61);
  sub_20BDDC1C8(v62, (uint64_t)">", 1);
  std::stringbuf::str();
  v150.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words
                            + *(_QWORD *)(v150.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                               + 24);
  v150.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
  if (v156 < 0)
    operator delete(v155);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v157);
  UniqueIdentifier = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(a2);
  v66 = &v144;
  if (v145 < 0)
    v66 = v144;
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v68 = &v158;
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v68 = (std::string *)v158.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\t%zu [label=\"%s (%i)\\n%s\", shape=\"box\", style=\"%s\"];\n",
    v64,
    v65,
    UniqueIdentifier,
    v66,
    a6,
    p_p,
    v68);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = &v150;
  else
    v69 = (std::string *)v150.__r_.__value_.__r.__words[0];
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  else
    v70 = v150.__r_.__value_.__l.__size_;
  sub_20BDDC1C8(a1, (uint64_t)v69, v70);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  memset(&v143, 0, sizeof(v143));
  if ((_DWORD)a4)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n", v71, v72);
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v150;
    else
      v73 = (std::string *)v150.__r_.__value_.__r.__words[0];
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    else
      v74 = v150.__r_.__value_.__l.__size_;
    std::string::append(&v143, (const std::string::value_type *)v73, v74);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a2);
    v78 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v76, v77);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v78, &v141);
    v79 = std::string::insert(&v141, 0, "-- mapToParent:\n");
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    v81 = std::string::append(&v142, "\n");
    v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &v150;
    else
      v83 = (std::string *)v150.__r_.__value_.__r.__words[0];
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    else
      v84 = v150.__r_.__value_.__l.__size_;
    std::string::append(&v143, (const std::string::value_type *)v83, v84);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a2))
    {
      MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a2);
      v88 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v86, v87);
      if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v88))
      {
        v89 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a2);
        v92 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v89, v90, v91);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v92, &v141);
        v93 = std::string::insert(&v141, 0, "-- mapToRoot:\n");
        v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        v95 = std::string::append(&v142, "\n");
        v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
        v150.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v96;
        v95->__r_.__value_.__l.__size_ = 0;
        v95->__r_.__value_.__r.__words[2] = 0;
        v95->__r_.__value_.__r.__words[0] = 0;
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v97 = &v150;
        else
          v97 = (std::string *)v150.__r_.__value_.__r.__words[0];
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v98 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
        else
          v98 = v150.__r_.__value_.__l.__size_;
        std::string::append(&v143, (const std::string::value_type *)v97, v98);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
      }
    }
    sub_20BDDC0E4(&v142, "\n");
    sub_20BDDC0E4(&v141, "\\l");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v143, (unsigned __int8 *)&v142, (unsigned __int8 *)&v141, &v150);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    v143 = v150;
    *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
    v150.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
  }
  memset(&v142, 0, sizeof(v142));
  switch(pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2))
  {
    case 1u:
      v101 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v101 = (std::string *)v143.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=green, label=\"inherit%s\"", v99, v100, v101);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v150;
      else
        v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v103 = v150.__r_.__value_.__l.__size_;
      goto LABEL_176;
    case 2u:
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=orange, label=\"variant\"", v99, v100);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v150;
      else
        v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v103 = v150.__r_.__value_.__l.__size_;
      goto LABEL_176;
    case 3u:
      v105 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v105 = (std::string *)v143.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=purple, label=\"relocate%s\"", v99, v100, v105);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v150;
      else
        v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v103 = v150.__r_.__value_.__l.__size_;
      goto LABEL_176;
    case 4u:
      v106 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v106 = (std::string *)v143.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=red, label=\"reference%s\"", v99, v100, v106);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v150;
      else
        v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v103 = v150.__r_.__value_.__l.__size_;
      goto LABEL_176;
    case 5u:
      v104 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v104 = (std::string *)v143.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=indigo, label=\"payload%s\"", v99, v100, v104);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v150;
      else
        v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v103 = v150.__r_.__value_.__l.__size_;
      goto LABEL_176;
    case 6u:
      v107 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v107 = (std::string *)v143.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=sienna, label=\"specialize%s\"", v99, v100, v107);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v150;
      else
        v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v103 = v150.__r_.__value_.__l.__size_;
LABEL_176:
      std::string::append(&v142, (const std::string::value_type *)v102, v103);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      break;
    case 7u:
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      v150.__r_.__value_.__l.__size_ = (std::string::size_type)"_WriteGraph";
      v150.__r_.__value_.__r.__words[2] = 345;
      *(_QWORD *)&v151 = "int pxrInternal__aapl__pxrReserved__::_WriteGraph(std::ostream &, const PcpNodeRef &, BOOL, boo"
                         "l, const Pcp_NodeSet &, int)";
      BYTE8(v151) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v150, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid arc type");
      break;
    default:
      break;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2))
  {
    if (v108 != -1)
    {
      OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
      v111 = v110;
      ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
      if (v111 != v113 || OriginNode != ParentNode)
      {
        v114 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
        if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v114 = v142.__r_.__value_.__l.__size_;
        if (v114)
          std::string::append(&v142, ", ");
        std::string::append(&v142, "style=dashed");
      }
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2) || v115 == -1)
    goto LABEL_199;
  v141.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  v141.__r_.__value_.__l.__size_ = v117;
  v118 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141);
  v119 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(a2);
  v122 = &v142;
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v122 = (std::string *)v142.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\t%zu -> %zu [%s];\n",
    v120,
    v121,
    v118,
    v119,
    v122);
  v123 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v150
       : (std::string *)v150.__r_.__value_.__r.__words[0];
  v124 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v150.__r_.__value_.__r.__words[2])
       : v150.__r_.__value_.__l.__size_;
  sub_20BDDC1C8(a1, (uint64_t)v123, v124);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v150.__r_.__value_.__l.__data_);
    if ((_DWORD)a3)
    {
LABEL_200:
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2))
      {
        if (v115 != -1)
        {
          v125 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
          v127 = v126;
          v128 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
          if (v127 != v115 || v125 != v128)
          {
            v129 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(a2);
            v141.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
            v141.__r_.__value_.__l.__size_ = v130;
            v131 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\t%zu -> %zu [style=dotted label=\"origin\" constraint=\"false\"];\n",
              v132,
              v133,
              v129,
              v131);
            v134 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v150
                 : (std::string *)v150.__r_.__value_.__r.__words[0];
            v135 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(v150.__r_.__value_.__r.__words[2])
                 : v150.__r_.__value_.__l.__size_;
            sub_20BDDC1C8(a1, (uint64_t)v134, v135);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  else
  {
LABEL_199:
    if ((_DWORD)a3)
      goto LABEL_200;
  }
  v8 = (a6 + 1);
  v136 = *((_QWORD *)a2 + 1);
  v153 = *(_QWORD *)a2;
  v154 = v136;
  v137 = **(_QWORD **)(v153 + 16);
  v138 = *(unsigned __int16 *)(v137 + 48 * v136 + 28);
  v150.__r_.__value_.__r.__words[0] = v153;
  v150.__r_.__value_.__l.__size_ = v138;
  v150.__r_.__value_.__r.__words[2] = v137;
  *(_QWORD *)&v151 = v153;
  *((_QWORD *)&v151 + 1) = 0xFFFFLL;
  v152 = v137;
  while (*(_OWORD *)&v150.__r_.__value_.__l.__data_ != v151)
  {
    v139 = sub_20C20495C(&v150, v115, v116);
    v8 = sub_20C2051BC(a1, v139, a3, a4, a5, v8);
    sub_20C2049E8(&v150);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v145 < 0)
    operator delete(v144);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v150.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
  sub_20BDE5038((void ***)&v150);
  return v8;
}

void sub_20C20601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (a53 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v53 - 105) < 0)
    operator delete(*(void **)(v53 - 128));
  if (a44 < 0)
    operator delete(a39);
  a39 = &a45;
  sub_20BDE5038((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_FormatSite(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpSite *a2)
{
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  sub_20BDDE5E0((uint64_t)v5);
  v3 = pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(v5);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, (uint64_t *)this);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v7);
}

void sub_20C2062EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_FormatSite(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2)
{
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  sub_20BDDE5E0((uint64_t)v5);
  v3 = pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(v5);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, (uint64_t *)this);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v7);
}

void sub_20C2063B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::Pcp_IndexingOutputManager(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this)
{
  _OWORD *v1;
  uint64_t i;
  double result;

  v1 = (_OWORD *)((char *)this + 528);
  for (i = 536; i != 584; i += 24)
    *(_QWORD *)((char *)this + i) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  __dmb(0xBu);
  *(_QWORD *)this = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 65) = 0;
  *v1 = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 1) = v1;
  __dmb(0xBu);
  *(_QWORD *)this = 1;
  return result;
}

{
  _OWORD *v1;
  uint64_t i;
  double result;

  v1 = (_OWORD *)((char *)this + 528);
  for (i = 536; i != 584; i += 24)
    *(_QWORD *)((char *)this + i) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  __dmb(0xBu);
  *(_QWORD *)this = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 65) = 0;
  *v1 = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 1) = v1;
  __dmb(0xBu);
  *(_QWORD *)this = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PushIndex(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a4)
{
  uint64_t *v6;
  unint64_t v7;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  void **v12;
  _QWORD v13[2];
  void *v14[2];
  char v15;
  std::string __p;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v17;

  v17 = a3;
  v6 = (uint64_t *)sub_20C206658((uint64_t *)this, (uint64_t)a2);
  sub_20C2066C4(v6);
  v7 = v6[1];
  if (v7 >= v6[2])
  {
    v9 = sub_20C209F80(v6, &v17, (_DWORD *)a4 + 2);
  }
  else
  {
    *(_QWORD *)v7 = a3;
    sub_20BFD6E54((_DWORD *)(v7 + 8), (_DWORD *)a4 + 2);
    sub_20BFD6EA4((_DWORD *)(v7 + 12), (_DWORD *)a4 + 3);
    *(_OWORD *)(v7 + 73) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    v9 = v7 + 96;
  }
  v6[1] = v9;
  pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v14, a4, v8);
  if (v15 >= 0)
    v12 = v14;
  else
    v12 = (void **)v14[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Computing prim index for %s", v10, v11, v12);
  v13[0] = 0;
  v13[1] = -1;
  sub_20C206710(v6, &__p, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_20C206624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C206658(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_20C207F3C(a1, (uint64_t)&v4, &v7);
  v2 = v6 + 24;
  v6 = 0;
  sub_20BEBF29C(&v4);
  return v2;
}

void sub_20C2066AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  sub_20BEBF29C(&a10);
  _Unwind_Resume(a1);
}

void sub_20C2066C4(uint64_t *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 != v1)
  {
    if (*(_BYTE *)(v1 - 8))
    {
      sub_20C208960(a1);
      sub_20BDE5078((uint64_t *)(*(_QWORD *)(a1[1] - 24) - 24));
      *(_BYTE *)(a1[1] - 8) = 0;
    }
  }
}

void sub_20C206710(uint64_t *a1, std::string *a2, _QWORD *a3)
{
  uint64_t **v6;
  _QWORD *v7;
  _QWORD v8[4];
  char v9;

  if (*a1 != a1[1]
    || (v8[0] = "pcp/diagnostic.cpp",
        v8[1] = "BeginPhase",
        v8[2] = 496,
        v8[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::BeginPhase(std::string &&,"
                " const PcpNodeRef &)",
        v9 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "!indexStack.empty()", 0) & 1) != 0))
  {
    sub_20C208CD0(a1, a2);
    sub_20C2066C4(a1);
    sub_20C20902C((uint64_t *)(a1[1] - 32), (__int128 *)a2);
    if (*a3)
    {
      if (a3[1] != -1)
      {
        v6 = *(uint64_t ***)(a1[1] - 24);
        v7 = *(v6 - 5);
        v6 -= 5;
        sub_20BE6100C((uint64_t)(v6 - 1), v7);
        *(v6 - 1) = (uint64_t *)v6;
        *v6 = 0;
        v6[1] = 0;
        sub_20C209434(v6 - 1, a3, a3);
        sub_20C206A94(a1);
      }
    }
    sub_20C206C78((std::string::size_type *)a1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  std::string::size_type *v4;
  std::string::size_type v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  void *__p[2];
  uint64_t v23;
  const char *v24;
  char v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;

  v4 = (std::string::size_type *)sub_20C206658((uint64_t *)this, (uint64_t)a2);
  v5 = v4[1];
  if (*v4 == v5)
  {
    v26 = "pcp/diagnostic.cpp";
    v27 = "PopIndex";
    v28 = 797;
    v29 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(const PcpPrimIndex *)";
    LOBYTE(v30) = 0;
    result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "!info->indexStack.empty()", 0);
    if (!(_DWORD)result)
      return result;
    v5 = v4[1];
  }
  if (*(_QWORD *)(v5 - 32) == *(_QWORD *)(v5 - 24))
  {
    __p[0] = "pcp/diagnostic.cpp";
    __p[1] = "PopIndex";
    v23 = 798;
    v24 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(const PcpPrimIndex *)";
    v25 = 0;
    result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!info->indexStack.back().phases.empty()", 0);
    if (!(_DWORD)result)
      return result;
    v5 = v4[1];
  }
  v6 = *(_QWORD *)(v5 - 24);
  std::operator+<char>();
  v7 = *(_QWORD *)(v6 - 16);
  v8 = *(_QWORD *)(v6 - 8);
  if (v7 >= v8)
  {
    v10 = *(_QWORD *)(v6 - 24);
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v30 = v6 - 8;
    if (v14)
      v15 = (char *)sub_20BDE4FF4(v6 - 8, v14);
    else
      v15 = 0;
    v16 = &v15[24 * v11];
    v26 = v15;
    v27 = v16;
    v29 = &v15[24 * v14];
    v17 = *(_OWORD *)__p;
    *((_QWORD *)v16 + 2) = v23;
    *(_OWORD *)v16 = v17;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    v28 = (uint64_t)(v16 + 24);
    sub_20BDF34C0((uint64_t *)(v6 - 24), &v26);
    v18 = *(_QWORD *)(v6 - 16);
    sub_20BDF3648((uint64_t)&v26);
    v19 = SHIBYTE(v23);
    *(_QWORD *)(v6 - 16) = v18;
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = *(_OWORD *)__p;
    *(_QWORD *)(v7 + 16) = v23;
    *(_OWORD *)v7 = v9;
    *(_QWORD *)(v6 - 16) = v7 + 24;
  }
  sub_20C206A94(v4);
  sub_20C206C78(v4);
  sub_20C20728C((uint64_t *)v4);
  v20 = v4[1] - 96;
  result = (uint64_t)sub_20C2087F4((uint64_t)(v4 + 2), v20);
  v4[1] = v20;
  if (*v4 == v20)
  {
    sub_20C2073A8((uint64_t)v4);
    v26 = (char *)a2;
    return sub_20C2097BC((uint64_t *)this, &v26);
  }
  return result;
}

void sub_20C206A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20BDF3648((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C206A94(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  const char *v20;
  char v21;

  result = sub_20C1FE3D8(3);
  if ((_DWORD)result)
  {
    v3 = a1[1];
    if (*a1 == v3)
    {
      v11[0] = "pcp/diagnostic.cpp";
      v11[1] = "UpdateCurrentDotGraph";
      v12 = 631;
      v13 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraph()";
      v14 = 0;
      result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "!indexStack.empty()", 0);
      if (!(_DWORD)result)
        return result;
      v3 = a1[1];
    }
    if (*(_QWORD *)(v3 - 32) == *(_QWORD *)(v3 - 24))
    {
      *(_QWORD *)&v18 = "pcp/diagnostic.cpp";
      *((_QWORD *)&v18 + 1) = "UpdateCurrentDotGraph";
      v19 = 632;
      v20 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraph()";
      v21 = 0;
      result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "!indexStack.back().phases.empty()", 0);
      if (!(_DWORD)result)
        return result;
      v3 = a1[1];
    }
    v4 = *(_QWORD *)(v3 - 24);
    sub_20BDDBD68((uint64_t)v11);
    v5 = sub_20C1FE3D8(4);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v3 - 96));
    *(_QWORD *)&v18 = v6;
    *((_QWORD *)&v18 + 1) = v7;
    sub_20C2051BC(&v12, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18, 1, v5, v4 - 48, 0);
    std::stringbuf::str();
    v8 = (void **)(v3 - 80);
    if (*(char *)(v3 - 57) < 0)
      operator delete(*v8);
    v9 = v18;
    *(_QWORD *)(v3 - 64) = v19;
    *(_OWORD *)v8 = v9;
    *(_BYTE *)(v3 - 8) = 1;
    v11[0] = *MEMORY[0x24BEDB7F0];
    v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v12 = v10;
    v13 = (const char *)(MEMORY[0x24BEDB848] + 16);
    if (v16 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x212B92EB0](&v17);
  }
  return result;
}

void sub_20C206C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BDDBE98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C206C78(std::string::size_type *a1)
{
  std::string::size_type v2;
  uint64_t v3;
  uint64_t *v4;
  const char *v5;
  char *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  uint64_t v18;
  char *v19;
  std::string::size_type v20;
  int v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  void **v32;
  std::string::size_type v33;
  const char *v34;
  char *v35;
  void **v36;
  std::string *v37;
  std::string *v38;
  void **v39;
  __int128 v40;
  void *v41[2];
  char v42;
  void *__p[2];
  unsigned __int8 v44;
  std::string v45;
  std::string v46;
  void *v47[2];
  char v48;
  std::string v49;
  const char *v50;
  char v51;
  std::string v52;
  const char *v53;
  char v54;

  if (sub_20C1FE3D8(3))
  {
    v2 = a1[1];
    if (*a1 == v2)
    {
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      v52.__r_.__value_.__l.__size_ = (std::string::size_type)"UpdateCurrentDotGraphLabel";
      v52.__r_.__value_.__r.__words[2] = 662;
      v53 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraphLabel()";
      v54 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v52, "!indexStack.empty()", 0))return;
      v2 = a1[1];
    }
    if (*(_QWORD *)(v2 - 32) == *(_QWORD *)(v2 - 24))
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)"UpdateCurrentDotGraphLabel";
      v49.__r_.__value_.__r.__words[2] = 663;
      v50 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraphLabel()";
      v51 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v49, "!indexStack.back().phases.empty()", 0))return;
      v2 = a1[1];
    }
    v3 = *(_QWORD *)(v2 - 24);
    v4 = (uint64_t *)(v3 - 72);
    sub_20BDDC0E4(v47, "\n<table cellborder=\"0\" border=\"0\">\n<tr><td balign=\"left\" align=\"left\">\n%s\n</td></tr>\n<tr><td bgcolor=\"black\" height=\"1\" cellpadding=\"0\">\n</td></tr>\n<tr><td balign=\"left\" align=\"left\">\nTasks:<br/>\n%s\n</td></tr>\n</table>");
    v7 = *a1;
    v8 = a1[1];
    if (*a1 == v8)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v9 -= 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 64)) >> 3);
        v7 += 96;
      }
      while (v7 != v8);
    }
    if (*(char *)(v3 - 49) < 0)
      v10 = *v4;
    else
      v10 = v3 - 72;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d. %s\n", v5, v6, v9, v10);
    v13 = (v9 - 1);
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)(v3 - 24);
    while (v45.__r_.__value_.__r.__words[0] != v45.__r_.__value_.__l.__size_)
    {
      sub_20BF44378((uint64_t *)&v45, v11, v12);
      std::operator+<char>();
      v14 = std::string::append(&v49, "\n");
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v52;
      else
        v16 = (std::string *)v52.__r_.__value_.__r.__words[0];
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      else
        size = v52.__r_.__value_.__l.__size_;
      std::string::append(&v46, (const std::string::value_type *)v16, size);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      sub_20BF4457C(&v45);
    }
    pxrInternal__aapl__pxrReserved__::TfGetXmlEscapedString((unsigned __int8 *)&v46, (uint64_t)&v49);
    sub_20BDDC0E4(&v45, "\n");
    sub_20BDDC0E4(__p, "<br/>\n");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v49, (unsigned __int8 *)&v45, (unsigned __int8 *)__p, &v52);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    v46 = v52;
    *((_BYTE *)&v52.__r_.__value_.__s + 23) = 0;
    v52.__r_.__value_.__s.__data_[0] = 0;
    if ((char)v44 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    memset(&v45, 0, sizeof(v45));
    v20 = *a1;
    v52.__r_.__value_.__r.__words[0] = a1[1];
    v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
    v52.__r_.__value_.__r.__words[2] = v20;
    v53 = (const char *)v20;
    v21 = 5;
    while ((const char *)v52.__r_.__value_.__l.__size_ != v53 && v21 != 0)
    {
      v25 = *(_QWORD *)(sub_20C209544((uint64_t)&v52, v18, v19) + 8);
      v49.__r_.__value_.__r.__words[0] = *(_QWORD *)(v25 - 24);
      v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
      v49.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 - 32);
      v50 = (const char *)v49.__r_.__value_.__r.__words[2];
      while ((const char *)v49.__r_.__value_.__l.__size_ != v50)
      {
        if ((uint64_t *)sub_20C2095C0((uint64_t)&v49, v23, v24) != v4)
        {
          v30 = *(_QWORD *)(sub_20C209640((uint64_t)&v49, v26, v27) + 8);
          v31 = (_QWORD *)(v30 - 72);
          if (*(char *)(v30 - 49) < 0)
            v31 = (_QWORD *)*v31;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d. %s\n", v28, v29, v13, v31);
          if ((v44 & 0x80u) == 0)
            v32 = __p;
          else
            v32 = (void **)__p[0];
          if ((v44 & 0x80u) == 0)
            v33 = v44;
          else
            v33 = (std::string::size_type)__p[1];
          std::string::append(&v45, (const std::string::value_type *)v32, v33);
          if ((char)v44 < 0)
            operator delete(__p[0]);
          v13 = (v13 - 1);
          if (!--v21)
            break;
        }
        sub_20C2096BC((uint64_t)&v49);
      }
      sub_20C20973C((uint64_t)&v52);
    }
    pxrInternal__aapl__pxrReserved__::TfGetXmlEscapedString((unsigned __int8 *)&v45, (uint64_t)&v49);
    sub_20BDDC0E4(__p, "\n");
    sub_20BDDC0E4(v41, "<br/>\n");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v49, (unsigned __int8 *)__p, (unsigned __int8 *)v41, &v52);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v45 = v52;
    *((_BYTE *)&v52.__r_.__value_.__s + 23) = 0;
    v52.__r_.__value_.__s.__data_[0] = 0;
    if (v42 < 0)
      operator delete(v41[0]);
    if ((char)v44 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (v48 >= 0)
      v36 = v47;
    else
      v36 = (void **)v47[0];
    v37 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v46.__r_.__value_.__r.__words[0];
    v38 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v36, v34, v35, v37, v38);
    v39 = (void **)(v2 - 56);
    if (*(char *)(v2 - 33) < 0)
      operator delete(*v39);
    v40 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 - 40) = *((_QWORD *)&v52.__r_.__value_.__l + 2);
    *(_OWORD *)v39 = v40;
    *(_BYTE *)(v2 - 8) = 1;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (v48 < 0)
      operator delete(v47[0]);
  }
}

void sub_20C20716C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void sub_20C20728C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  char v6;
  _QWORD v7[4];
  char v8;

  v2 = a1[1];
  if (*a1 == v2)
  {
    v7[0] = "pcp/diagnostic.cpp";
    v7[1] = "EndPhase";
    v7[2] = 512;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::EndPhase()";
    v8 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "!indexStack.empty()", 0))
      return;
    v2 = a1[1];
  }
  if (*(_QWORD *)(v2 - 32) != *(_QWORD *)(v2 - 24)
    || (v5[0] = "pcp/diagnostic.cpp",
        v5[1] = "EndPhase",
        v5[2] = 513,
        v5[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::EndPhase()",
        v6 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "!indexStack.back().phases.empty()", 0) & 1) != 0))
  {
    sub_20C2066C4(a1);
    v3 = a1[1];
    v4 = *(_QWORD *)(v3 - 24) - 72;
    sub_20C2088E0(v3 - 16, v4);
    *(_QWORD *)(v3 - 24) = v4;
    if (*(_QWORD *)(a1[1] - 32) != *(_QWORD *)(a1[1] - 24))
    {
      sub_20C206A94(a1);
      sub_20C206C78((std::string::size_type *)a1);
      *(_BYTE *)(a1[1] - 8) = 0;
    }
  }
}

void sub_20C2073A8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;

  v2 = atomic_load((unsigned __int8 *)&qword_25473C730);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25473C730))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25473C6F0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473C730);
  }
  std::mutex::lock(&stru_25473C6F0);
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  while (v4 != v3)
  {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(v4);
    v4 += 24;
  }
  std::mutex::unlock(&stru_25473C6F0);
}

void sub_20C207440(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_25473C6F0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::BeginPhase(uint64_t *a1, uint64_t a2, std::string *a3, _QWORD *a4)
{
  uint64_t *v6;

  v6 = (uint64_t *)sub_20C206658(a1, a2);
  sub_20C206710(v6, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::EndPhase(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_20C206658((uint64_t *)this, (uint64_t)a2);
  sub_20C20728C(v2);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::Update(uint64_t *a1, uint64_t a2, __int128 *a3, const std::string *a4)
{
  uint64_t *v6;

  v6 = (uint64_t *)sub_20C206658(a1, a2);
  sub_20C2074C4(v6, a3, a4);
}

void sub_20C2074C4(uint64_t *a1, __int128 *a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD v20[4];
  char v21;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a1[1];
  if (*a1 == v6)
  {
    *(_QWORD *)&v22 = "pcp/diagnostic.cpp";
    *((_QWORD *)&v22 + 1) = "Update";
    v23 = 530;
    v24 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Update(const PcpNodeRef &, std::string &&)";
    LOBYTE(v25) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v22, "!indexStack.empty()", 0))return;
    v6 = a1[1];
  }
  if (*(_QWORD *)(v6 - 32) != *(_QWORD *)(v6 - 24)
    || (v20[0] = "pcp/diagnostic.cpp",
        v20[1] = "Update",
        v20[2] = 531,
        v20[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Update(const PcpNodeRef &"
                 ", std::string &&)",
        v21 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "!indexStack.back().phases.empty()", 0) & 1) != 0))
  {
    sub_20C208CD0(a1, a3);
    sub_20C2066C4(a1);
    v7 = *(_QWORD *)(a1[1] - 24);
    v8 = *(_QWORD *)(v7 - 16);
    v9 = *(_QWORD *)(v7 - 8);
    if (v8 >= v9)
    {
      v12 = *(_QWORD *)(v7 - 24);
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v25 = v7 - 8;
      if (v16)
        v17 = (char *)sub_20BDE4FF4(v7 - 8, v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      *(_QWORD *)&v22 = v17;
      *((_QWORD *)&v22 + 1) = v18;
      v24 = &v17[24 * v16];
      v19 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
      *((_QWORD *)v18 + 2) = *((_QWORD *)&a3->__r_.__value_.__l + 2);
      *(_OWORD *)v18 = v19;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      a3->__r_.__value_.__r.__words[0] = 0;
      v23 = (uint64_t)(v18 + 24);
      sub_20BDF34C0((uint64_t *)(v7 - 24), &v22);
      v11 = *(_QWORD *)(v7 - 16);
      sub_20BDF3648((uint64_t)&v22);
    }
    else
    {
      v10 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)&a3->__r_.__value_.__l + 2);
      *(_OWORD *)v8 = v10;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      a3->__r_.__value_.__r.__words[0] = 0;
      v11 = v8 + 24;
      *(_QWORD *)(v7 - 16) = v8 + 24;
    }
    *(_QWORD *)(v7 - 16) = v11;
    v22 = *a2;
    sub_20C209950((uint64_t **)(v7 - 48), &v22, &v23);
    sub_20C206A94(a1);
    sub_20C206C78((std::string::size_type *)a1);
    sub_20C2066C4(a1);
  }
}

void sub_20C207720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::Msg(uint64_t *a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  uint64_t *v6;

  v6 = (uint64_t *)sub_20C206658(a1, a2);
  sub_20C207768(v6, a3, a4);
}

void sub_20C207768(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD v27[4];
  char v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;

  v6 = a1[1];
  if (*a1 == v6)
  {
    v29 = "pcp/diagnostic.cpp";
    v30 = "Msg";
    v31 = 548;
    v32 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Msg(std::string &&, const Pcp_NodeSet &)";
    LOBYTE(v33) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "!indexStack.empty()", 0))return;
    v6 = a1[1];
  }
  if (*(_QWORD *)(v6 - 32) != *(_QWORD *)(v6 - 24)
    || (v27[0] = "pcp/diagnostic.cpp",
        v27[1] = "Msg",
        v27[2] = 549,
        v27[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Msg(std::string &&, const Pcp_NodeSet &)",
        v28 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v27, "!indexStack.back().phases.empty()", 0) & 1) != 0))
  {
    sub_20C208CD0(a1, a2);
    v7 = *(_QWORD *)(a1[1] - 24);
    if (*(_QWORD *)(v7 - 32) == *(_QWORD *)(a3 + 16))
    {
      v8 = *(_QWORD **)(v7 - 48);
      if (v8 == (_QWORD *)(v7 - 40))
      {
LABEL_26:
        v15 = *(_QWORD *)(v7 - 8);
        v16 = *(_QWORD *)(v7 - 16);
        if (v16 >= v15)
        {
          v19 = *(_QWORD *)(v7 - 24);
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v19) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v19) >> 3);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v21;
          v33 = v7 - 8;
          if (v23)
            v24 = (char *)sub_20BDE4FF4(v7 - 8, v23);
          else
            v24 = 0;
          v25 = &v24[24 * v20];
          v29 = v24;
          v30 = v25;
          v32 = &v24[24 * v23];
          v26 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
          *((_QWORD *)v25 + 2) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
          *(_OWORD *)v25 = v26;
          a2->__r_.__value_.__l.__size_ = 0;
          a2->__r_.__value_.__r.__words[2] = 0;
          a2->__r_.__value_.__r.__words[0] = 0;
          v31 = (uint64_t)(v25 + 24);
          sub_20BDF34C0((uint64_t *)(v7 - 24), &v29);
          v18 = *(_QWORD *)(v7 - 16);
          sub_20BDF3648((uint64_t)&v29);
        }
        else
        {
          v17 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
          *(_QWORD *)(v16 + 16) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
          *(_OWORD *)v16 = v17;
          a2->__r_.__value_.__l.__size_ = 0;
          a2->__r_.__value_.__r.__words[2] = 0;
          a2->__r_.__value_.__r.__words[0] = 0;
          v18 = v16 + 24;
          *(_QWORD *)(v7 - 16) = v16 + 24;
        }
        *(_QWORD *)(v7 - 16) = v18;
        sub_20C206C78((std::string::size_type *)a1);
        return;
      }
      v9 = *(_QWORD **)a3;
      while (1)
      {
        v10 = v8[5] == v9[5] && v8[4] == v9[4];
        if (!v10)
          break;
        v11 = (_QWORD *)v8[1];
        v12 = v8;
        if (v11)
        {
          do
          {
            v8 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v12[2];
            v10 = *v8 == (_QWORD)v12;
            v12 = v8;
          }
          while (!v10);
        }
        v13 = (_QWORD *)v9[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v9[2];
            v10 = *v14 == (_QWORD)v9;
            v9 = v14;
          }
          while (!v10);
        }
        v9 = v14;
        if (v8 == (_QWORD *)(v7 - 40))
          goto LABEL_26;
      }
    }
    sub_20C2066C4(a1);
    if (v7 - 48 != a3)
      sub_20C209ACC((uint64_t **)(v7 - 48), *(_QWORD **)a3, (_QWORD *)(a3 + 8));
    sub_20C206A94(a1);
    goto LABEL_26;
  }
}

void sub_20C207A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PushIndex(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2)
{
  pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)atomic_load(&qword_2549880A8);
  if (!v4)
    v4 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)sub_20C20A360(&qword_2549880A8);
  pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PushIndex(v4, this[1], *this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PopIndex(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **this)
{
  pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)atomic_load(&qword_2549880A8);
  if (!v2)
    v2 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)sub_20C20A360(&qword_2549880A8);
  return pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(v2, this[1]);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(uint64_t *a1, uint64_t a2, _QWORD *a3, std::string *a4)
{
  uint64_t *v7;
  uint64_t *v8;

  *a1 = a2;
  v7 = (uint64_t *)atomic_load(&qword_2549880A8);
  if (!v7)
    v7 = (uint64_t *)sub_20C20A360(&qword_2549880A8);
  v8 = (uint64_t *)sub_20C206658(v7, *a1);
  sub_20C206710(v8, a4, a3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope(pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *this)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = (uint64_t *)atomic_load(&qword_2549880A8);
  if (!v2)
    v2 = (uint64_t *)sub_20C20A360(&qword_2549880A8);
  v3 = (uint64_t *)sub_20C206658(v2, *(_QWORD *)this);
  sub_20C20728C(v3);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v6;
  uint64_t *v7;

  v6 = (uint64_t *)atomic_load(&qword_2549880A8);
  if (!v6)
    v6 = (uint64_t *)sub_20C20A360(&qword_2549880A8);
  v7 = (uint64_t *)sub_20C206658(v6, a1);
  sub_20C2074C4(v7, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const char *a4, ...)
{
  uint64_t *v6;
  uint64_t *v7;
  _BYTE v8[8];
  _QWORD *v9;
  std::string __p;
  va_list v11;
  __int128 v12;
  uint64_t v13;
  va_list va;

  va_start(va, a4);
  v13 = *MEMORY[0x24BDAC8D0];
  va_copy(v11, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a3, va, (char *)a3);
  v12 = *(_OWORD *)a2;
  sub_20C20A594((uint64_t)v8, &v12, 1);
  v6 = (uint64_t *)atomic_load(&qword_2549880A8);
  if (!v6)
    v6 = (uint64_t *)sub_20C20A360(&qword_2549880A8);
  v7 = (uint64_t *)sub_20C206658(v6, (uint64_t)this);
  sub_20C207768(v7, &__p, (uint64_t)v8);
  sub_20BE6100C((uint64_t)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C207CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a4, const char *a5, ...)
{
  __int128 v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE v11[8];
  _QWORD *v12;
  std::string __p;
  va_list v14;
  _OWORD v15[2];
  uint64_t v16;
  va_list va;

  va_start(va, a5);
  v16 = *MEMORY[0x24BDAC8D0];
  va_copy(v14, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a4, va, (char *)a3);
  v8 = *(_OWORD *)a3;
  v15[0] = *(_OWORD *)a2;
  v15[1] = v8;
  sub_20C20A594((uint64_t)v11, v15, 2);
  v9 = (uint64_t *)atomic_load(&qword_2549880A8);
  if (!v9)
    v9 = (uint64_t *)sub_20C20A360(&qword_2549880A8);
  v10 = (uint64_t *)sub_20C206658(v9, (uint64_t)this);
  sub_20C207768(v10, &__p, (uint64_t)v11);
  sub_20BE6100C((uint64_t)v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C207DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C207E08(uint64_t **a1, uint64_t *a2, _DWORD *a3)
{
  int v6;
  _DWORD *result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (*a3)++;
  v15 = a2;
  result = sub_20C209DD4(a1, a2, (uint64_t)&unk_20CAC184C, &v15);
  result[12] = v6;
  v10 = a2[1];
  v21 = *a2;
  v22 = v10;
  v11 = **(_QWORD **)(v21 + 16);
  v12 = *(unsigned __int16 *)(v11 + 48 * v10 + 28);
  v15 = (_OWORD *)v21;
  v16 = v12;
  v17 = v11;
  v18 = (_OWORD *)v21;
  v13 = 0xFFFFLL;
  v19 = 0xFFFFLL;
  v20 = v11;
  while (v12 != v13 || v15 != v18)
  {
    v14 = sub_20C20495C(&v15, v8, v9);
    sub_20C207E08(a1, v14, a3);
    result = sub_20C2049E8(&v15);
    v12 = v16;
    v13 = v19;
  }
  return result;
}

uint64_t sub_20C207ED4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2, v2 + 4))
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v2 + 4, a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_20C207F3C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C207FA0(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _QWORD *, uint64_t))sub_20C2082B8, 0);
}

uint64_t sub_20C207FA0(uint64_t *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _QWORD *, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v32;
  unint64_t v33;
  tbb::spin_rw_mutex_v3 *v35;
  char v36;
  uint64_t v37;

  v33 = 0;
  v13 = *a3 ^ (*a3 >> 3);
  v14 = *a1;
  __dmb(0xBu);
  v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C208514((uint64_t)&v35, (uint64_t)a1, v14 & v13, 0);
    v15 = (_QWORD *)(v37 + 16);
    do
      v15 = (_QWORD *)*v15;
    while ((unint64_t)v15 >= 0x40 && *a3 != v15[2]);
    if (a2)
      break;
    if (v15)
    {
      v16 = 1;
LABEL_10:
      v17 = (uint64_t)a8;
      if (!a5)
        goto LABEL_51;
      goto LABEL_11;
    }
    v26 = *a1;
    __dmb(0xBu);
    if (v14 == v26 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
    {
      sub_20BEBF29C(&v35);
      return 0;
    }
LABEL_34:
    sub_20BEBF29C(&v35);
    v14 = v26;
  }
  if (v15)
  {
LABEL_7:
    v16 = 0;
    goto LABEL_10;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v32, a3, a4);
  if (!v36)
  {
    v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v35) & 1) == 0)
    {
      v15 = (_QWORD *)(v37 + 16);
      while (1)
      {
        v15 = (_QWORD *)*v15;
        if ((unint64_t)v15 < 0x40)
          break;
        if (*a3 == v15[2])
        {
          if (!v36)
            goto LABEL_7;
          v27 = (unint64_t *)v35;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v16 = 0;
          v36 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v26 = *a1;
  __dmb(0xBu);
  if (v14 != v26)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
      goto LABEL_36;
    goto LABEL_34;
  }
  v26 = v14;
LABEL_36:
  v33 = sub_20BECF26C((uint64_t)a1, v37, a8, v26);
  v17 = 0;
  v16 = 1;
  v15 = a8;
  if (!a5)
  {
LABEL_51:
    sub_20BEBF29C(&v35);
    goto LABEL_46;
  }
LABEL_11:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
  {
    sched_yield();
    v18 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
    {
      sched_yield();
      v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        v20 = (unint64_t *)v35;
        v35 = 0;
        if (v36)
        {
          while (1)
          {
            v21 = *v20;
            v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v23 = __ldaxr(v20);
                if (v23 != v21)
                  break;
                if (!__stlxr(v22, v20))
                  goto LABEL_25;
              }
              __clrex();
              do
                v24 = __ldxr(v20);
              while (__stxr(v24, v20));
            }
            while (v24 == v21);
            sched_yield();
          }
        }
        do
          v25 = __ldaxr(v20);
        while (__stlxr(v25 - 4, v20));
LABEL_25:
        sched_yield();
        v26 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v17;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v35);
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_46:
  if (v33)
    sub_20C208330(a1, v33, v32, 0);
  if (v17)
    sub_20C2084C4((uint64_t)a1, v17);
  return v16;
}

void sub_20C208298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2082B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v7[2];

  v4 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x50);
  v7[1] = a1;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 72) = 0;
  v7[0] = 0;
  sub_20C208930(v7, v5);
  return v4;
}

void sub_20C208330(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C2084B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C2084C4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void **v6;

  v3 = (void **)(a2 + 24);
  v6 = (void **)(a2 + 56);
  sub_20BDE5038(&v6);
  v6 = v3;
  sub_20C208770(&v6);
  return tbb::internal::deallocate_via_handler_v3(a2, v4);
}

uint64_t sub_20C208514(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C2085EC(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C2085D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2085EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C208514(&v15, a1, v10 & a3, 0);
  v11 = (_QWORD *)(v17 + 16);
  v12 = *(_QWORD **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while ((((v12[2] >> 3) ^ v12[2]) & v13) == a3)
    {
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *v12;
        *v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = (_QWORD *)*v11;
        if (*v11 <= 0x3FuLL)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (_QWORD *)(v17 + 16);
        v12 = *(_QWORD **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C20875C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C208770(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_20C2087F4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C2087F4(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 64);
  sub_20C20885C(&v4);
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  return sub_20BFD265C((_DWORD *)(a2 + 8));
}

void sub_20C20885C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_20C2088E0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C2088E0(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  sub_20BDE5038(&v3);
  sub_20BE6100C(a2 + 24, *(_QWORD **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *sub_20C208930(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

void sub_20C208960(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *Name;
  const char *v4;
  char *v5;
  std::string *p_p;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  const char *v22;
  char v23;
  void *v24[2];
  char v25;
  void *v26;
  char v27;
  std::string __p;
  const char *v29;
  _BYTE v30[384];
  _QWORD v31[20];

  v31[19] = *MEMORY[0x24BDAC8D0];
  if (sub_20C1FE3D8(3))
  {
    v2 = *a1;
    if (*a1 == a1[1])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"OutputGraph";
      __p.__r_.__value_.__r.__words[2] = 583;
      v29 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::OutputGraph() const";
      v30[0] = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!indexStack.empty()", 0))return;
      v2 = *a1;
    }
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8));
    sub_20BDDC0E4(v20, "/");
    sub_20BDDC0E4(v24, "_");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)Name, (unsigned __int8 *)v20, (unsigned __int8 *)v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"pcp.%s.%06d.dot", v4, v5, p_p, *((unsigned int *)a1 + 6));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
    sub_20BE81108(&__p);
    if ((v30[*(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
    {
      v20[0] = "pcp/diagnostic.cpp";
      v20[1] = "OutputGraph";
      v21 = 599;
      v22 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::OutputGraph() const";
      v23 = 0;
      v7 = (const char *)&v26;
      if (v27 < 0)
        v7 = (const char *)v26;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open %s to write graph", v7);
    }
    else
    {
      ++*((_DWORD *)a1 + 6);
      sub_20BDDC1C8(&__p, (uint64_t)"digraph PcpPrimIndex {\n", 23);
      v8 = a1[1];
      v9 = sub_20BDDC1C8(&__p, (uint64_t)"\tlabel = <", 10);
      v10 = *(char *)(v8 - 33);
      if (v10 >= 0)
        v11 = v8 - 56;
      else
        v11 = *(_QWORD *)(v8 - 56);
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v8 - 33);
      else
        v12 = *(_QWORD *)(v8 - 48);
      v13 = sub_20BDDC1C8(v9, v11, v12);
      sub_20BDDC1C8(v13, (uint64_t)">\n", 2);
      sub_20BDDC1C8(&__p, (uint64_t)"\tlabelloc = b\n", 14);
      v16 = *(_QWORD *)(v8 - 80);
      v15 = v8 - 80;
      v14 = v16;
      v17 = *(char *)(v15 + 23);
      if (v17 >= 0)
        v18 = v15;
      else
        v18 = v14;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v15 + 23);
      else
        v19 = *(_QWORD *)(v15 + 8);
      sub_20BDDC1C8(&__p, v18, v19);
      sub_20BDDC1C8(&__p, (uint64_t)"}\n", 2);
    }
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                                + 24);
    MEMORY[0x212B92AB4](&__p.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x212B92EB0](v31);
    if (v27 < 0)
      operator delete(v26);
  }
}

void sub_20C208C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_20C0FCC58(&a32);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C208CD0(uint64_t *a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  std::string::size_type v19;
  std::string __p;
  std::string v21;
  void *__b[2];
  char v23;
  std::string v24;
  char *v25;
  _QWORD *v26;
  void *v27[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v6 -= 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 3);
      v4 += 96;
    }
    while (v4 != v5);
  }
  sub_20BDDC468(__b, 4 * v6, 32);
  pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", a2, &v24);
  sub_20BDDC0E4(&__p, "\n");
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v24, (unsigned __int8 *)&__p, (unsigned __int8 *)v27, &v21);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)__b, (const void **)&v21.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v7 = std::string::append(&__p, "\n");
  v8 = v7->__r_.__value_.__r.__words[0];
  v27[0] = (void *)v7->__r_.__value_.__l.__size_;
  *(void **)((char *)v27 + 7) = *(void **)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v10 = a1[6];
  v11 = a1[5];
  if (v11 >= v10)
  {
    v13 = a1[4];
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v13) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    v26 = a1 + 6;
    if (v17)
      v18 = (char *)sub_20BDE4FF4((uint64_t)(a1 + 6), v17);
    else
      v18 = 0;
    v19 = (std::string::size_type)&v18[24 * v14];
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    v24.__r_.__value_.__l.__size_ = v19;
    v25 = &v18[24 * v17];
    *(_QWORD *)v19 = v8;
    *(void **)(v19 + 8) = v27[0];
    *(void **)(v19 + 15) = *(void **)((char *)v27 + 7);
    *(_BYTE *)(v19 + 23) = v9;
    v24.__r_.__value_.__r.__words[2] = v19 + 24;
    sub_20BDF34C0(a1 + 4, &v24);
    v12 = a1[5];
    sub_20BDF3648((uint64_t)&v24);
  }
  else
  {
    *(_QWORD *)v11 = v8;
    *(void **)(v11 + 8) = v27[0];
    *(void **)(v11 + 15) = *(void **)((char *)v27 + 7);
    *(_BYTE *)(v11 + 23) = v9;
    v12 = v11 + 24;
    a1[5] = v11 + 24;
  }
  a1[5] = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(__b[0]);
}

void sub_20C208F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_20BDF3648((uint64_t)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C20902C(uint64_t *a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  void *v19[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x1C71C71C71C71C7)
      v14 = 0x38E38E38E38E38ELL;
    else
      v14 = v12;
    v19[4] = v4;
    if (v14)
      v15 = (char *)sub_20BE7BBA0((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[72 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[72 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v16 + 4) = 0;
    v16 += 32;
    *((_QWORD *)v16 - 1) = v16;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *((_QWORD *)v16 + 4) = 0;
    v19[2] = v16 + 40;
    sub_20C2091A0(a1, v19);
    v10 = (_QWORD *)a1[1];
    sub_20C2093C0(v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v9 = (_QWORD *)(v7 + 32);
    *(v9 - 1) = v9;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v10 = v9 + 5;
    a1[1] = (uint64_t)(v9 + 5);
  }
  a1[1] = (uint64_t)v10;
  return v10 - 9;
}

void sub_20C20918C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2093C0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2091A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C209214((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C209214(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 72);
      sub_20C2092C8(a1, v7 - 72, v9);
      v7 = *((_QWORD *)&v16 + 1) - 72;
      *((_QWORD *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C20933C((uint64_t)v13);
  return v11;
}

__n128 sub_20C2092C8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a3 + 3);
  v4 = a3 + 2;
  v5 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(a2 + 32) = v5;
  v6 = a2 + 32;
  v7 = *((_QWORD *)a3 + 5);
  *(_QWORD *)(a2 + 40) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *((_QWORD *)a3 + 3) = v4;
    *v4 = 0;
    *((_QWORD *)a3 + 5) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v6;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = (__n128)a3[3];
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  return result;
}

uint64_t sub_20C20933C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C209370((uint64_t *)a1);
  return a1;
}

void sub_20C209370(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C2088E0(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_20C2093C0(void **a1)
{
  sub_20C2093F0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C2093F0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_20C2088E0(v4, i - 72);
  }
}

uint64_t *sub_20C209434(uint64_t **a1, _QWORD *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20C2094B4((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_20BDDE1B4(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *sub_20C2094B4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_20C209544(uint64_t result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Ind"
            "exingOutputManager::_IndexInfo>, true>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_"
            "IndexingOutputManager::_IndexInfo>, Reverse = true]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C2095C0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v5[4];
  char v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Ind"
            "exingOutputManager::_Phase>, true>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Index"
            "ingOutputManager::_Phase>, Reverse = true]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 72;
}

void sub_20C209638()
{
  JUMPOUT(0x20C2095E0);
}

uint64_t sub_20C209640(uint64_t result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Ind"
            "exingOutputManager::_Phase>, true>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Inde"
            "xingOutputManager::_Phase>, Reverse = true]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C2096BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::Pcp_IndexingOutputManager::_Phase>, true>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserv"
            "ed__::Pcp_IndexingOutputManager::_Phase>, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 - 72;
  }
  return a1;
}

uint64_t sub_20C20973C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::Pcp_IndexingOutputManager::_IndexInfo>, true>::operator++() [T = std::vector<pxrInternal__aapl__pxrRe"
            "served__::Pcp_IndexingOutputManager::_IndexInfo>, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 - 96;
  }
  return a1;
}

uint64_t sub_20C2097BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  tbb::spin_rw_mutex_v3 *v14;
  char v15;
  uint64_t v16;

  v4 = *a2 ^ (*a2 >> 3);
  v5 = *a1;
  __dmb(0xBu);
  while (2)
  {
    sub_20C208514((uint64_t)&v14, (uint64_t)a1, v5 & v4, 0);
    while (1)
    {
      v6 = (_QWORD *)(v16 + 16);
      while (1)
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
        if ((unint64_t)v6 < 0x40)
          break;
        if (*a2 == v6[2])
          goto LABEL_8;
      }
      if (!v6)
        break;
LABEL_8:
      if (v15 || (v15 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v14) & 1) != 0))
      {
        *v7 = *v6;
        v10 = (unint64_t *)(a1 + 65);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        sub_20BEBF29C(&v14);
        v12 = 1;
        v15 = 1;
        v14 = (tbb::spin_rw_mutex_v3 *)(v6 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(v6 + 1));
        sub_20BEBF29C(&v14);
        sub_20C2084C4((uint64_t)a1, (uint64_t)v6);
        return v12;
      }
      v8 = *a1;
      __dmb(0xBu);
      if (v5 != v8)
      {
        v9 = sub_20BECF7E4((uint64_t)a1, v4, v5, v8);
        v5 = v8;
        if (v9)
          goto LABEL_15;
      }
    }
    v8 = *a1;
    __dmb(0xBu);
    if (v5 != v8 && sub_20BECF7E4((uint64_t)a1, v4, v5, v8))
    {
LABEL_15:
      sub_20BEBF29C(&v14);
      v5 = v8;
      continue;
    }
    break;
  }
  sub_20BEBF29C(&v14);
  return 0;
}

void sub_20C209934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20C209950(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = sub_20BDFC6B0((uint64_t)v8);
      while (a2 != a3)
      {
        sub_20C209A54(v5, a2, (uint64_t)v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            a2 += 2;
            break;
          }
          v11 = sub_20BDFC6B0((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        a2 += 2;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)sub_20BE64AA8((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)sub_20C209434(v5, a2, a2);
    a2 += 2;
  }
  return result;
}

void sub_20C209A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE64AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C209A54(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v8;

  v6 = (uint64_t **)sub_20C2094B4((uint64_t)a1, &v8, a2);
  if (*v6)
    return *v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)a2;
  sub_20BDDE1B4(a1, v8, v6, (uint64_t *)a3);
  return (uint64_t *)a3;
}

uint64_t **sub_20C209ACC(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          sub_20C209C2C(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_20BDFC6B0((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_20BE64AA8((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20C209CB0(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20C209C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE64AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C209C2C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2 + 4, v4 + 4))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v5, v6, a2);
  return a2;
}

uint64_t *sub_20C209CB0(uint64_t **a1, _OWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;

  v4 = (uint64_t *)operator new(0x30uLL);
  *((_OWORD *)v4 + 2) = *a2;
  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v4 + 4, v5 + 4))
          break;
        v5 = *v6;
        v7 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v5 = v6[1];
    }
    while (v5);
    v7 = v6 + 1;
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v6, v7, v4);
  return v4;
}

void sub_20C209D48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C209D5C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2, v5 + 4))
    return v2;
  return v5;
}

_OWORD *sub_20C209DD4(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_20C2094B4((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    sub_20BDDE1B4(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_20C209E5C(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_20C209E5C(a1, *(_QWORD *)a2);
    sub_20C209E5C(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 48);
    sub_20BFE69E4(&v4);
    operator delete(a2);
  }
}

uint64_t sub_20C209EB4(uint64_t a1, _OWORD *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator((_QWORD *)a1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(v4 + 2);
  v5 = a2[1];
  *(_OWORD *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

_OWORD *sub_20C209EF4(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_20C2094B4((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = 0;
    sub_20BDDE1B4(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_20C209F80(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v16[5];

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v6 = v5 + 1;
  if (v5 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x155555555555555)
    v11 = 0x2AAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v16[4] = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BE90940(v9, v11);
  else
    v12 = 0;
  v13 = &v12[96 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v16[3] = &v12[96 * v11];
  *(_QWORD *)v13 = *a2;
  sub_20BFD6E54((_DWORD *)v13 + 2, a3);
  sub_20BFD6EA4((_DWORD *)v13 + 3, a3 + 1);
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *(_OWORD *)(v13 + 73) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  v16[2] = v13 + 96;
  sub_20C20A0A8(a1, v16);
  v14 = a1[1];
  sub_20C20A2EC(v16);
  return v14;
}

void sub_20C20A094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C20A2EC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20A0A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C20A11C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C20A11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      sub_20C20A1D0(a1, v7 - 96, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C20A268((uint64_t)v13);
  return v11;
}

__n128 sub_20C20A1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  sub_20BFD38A4((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_20BFD38DC((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  v5 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v6 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(a3 + 88);
  return result;
}

uint64_t sub_20C20A268(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C20A29C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C20A29C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2087F4(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C20A2EC(void **a1)
{
  sub_20C20A31C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C20A31C(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 96;
      result = sub_20C2087F4(v4, v1 - 96);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t sub_20C20A360(unint64_t *a1)
{
  unint64_t *v2;
  unint64_t *v3;

  sub_20C20A3BC();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    sub_20C20A47C(v2);
    operator delete(v3);
  }
  return atomic_load(a1);
}

double sub_20C20A3BC()
{
  char *v0;
  _OWORD *v1;
  uint64_t i;
  double result;

  v0 = (char *)operator new(0x248uLL);
  v1 = v0 + 528;
  for (i = 536; i != 584; i += 24)
    *(_QWORD *)&v0[i] = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 488) = 0u;
  *(_OWORD *)(v0 + 504) = 0u;
  *(_OWORD *)(v0 + 456) = 0u;
  *(_OWORD *)(v0 + 472) = 0u;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_OWORD *)(v0 + 440) = 0u;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 360) = 0u;
  *(_OWORD *)(v0 + 376) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_OWORD *)(v0 + 344) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  __dmb(0xBu);
  *(_QWORD *)v0 = 0;
  __dmb(0xBu);
  *((_QWORD *)v0 + 65) = 0;
  *v1 = 0u;
  *((_OWORD *)v0 + 34) = 0u;
  *((_OWORD *)v0 + 35) = 0u;
  *((_QWORD *)v0 + 1) = v1;
  __dmb(0xBu);
  *(_QWORD *)v0 = 1;
  return result;
}

uint64_t sub_20C20A47C(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C2084C4((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C20A548((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C20A548(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

uint64_t sub_20C20A594(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_20C20A610((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20C20A5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C20A610(uint64_t **a1, _QWORD *a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_20C20A694(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_20BDDE1B4(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20C20A694(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v12 + 4, a5))
      goto LABEL_16;
    return sub_20C2094B4((uint64_t)a1, a3, a5);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a5, v15 + 4))
        return sub_20C2094B4((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_20C20A818()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexIsInstanceable(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  char *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v19;
  uint64_t Layers;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  int HasField;
  int v25;
  uint64_t v26;
  unint64_t v27;
  __n128 *v28;
  _BOOL8 v29;
  int *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  __n128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v41;
  int v42;
  int v43;
  __int128 v44;
  char v45;
  char v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_2549880B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2549880B8))
  {
    v31 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE);
    if (!v31)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE);
      v31 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE);
    }
    dword_2549880B0 = *v31;
    __cxa_guard_release(&qword_2549880B8);
  }
  if (!dword_2549880B0
    || (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsUsd(this) & 1) == 0 && dword_2549880B0 == -1)
  {
    return 0;
  }
  v46 = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v53 = v6;
  v54 = v4;
  v7 = *v6[2];
  v8 = *(unsigned __int16 *)(v7 + 48 * v4 + 28);
  v47 = v6;
  v48 = v8;
  v49 = v7;
  v50 = v6;
  v9 = 0xFFFFLL;
  v51 = 0xFFFFLL;
  v52 = v7;
  while (v8 != v9 || v47 != v50)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C20495C(&v47, v4, v5);
    sub_20C20AE24(v10, &v46, 0);
    sub_20C2049E8(&v47);
    v8 = v48;
    v9 = v51;
  }
  if (!v46)
    return 0;
  v45 = 0;
  v11 = atomic_load((unsigned __int8 *)&qword_2549880C8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2549880C8))
  {
    v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v32)
      v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v33 = *((_QWORD *)v32 + 25);
    qword_2549880C0 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        qword_2549880C0 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_2549880C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549880C8);
  }
  v55 = 0x4000000000;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v36.n128_u64[0] = v12;
  v36.n128_u64[1] = v13;
  sub_20C20AF08((uint64_t)&v47, &v36);
  v14 = v55;
  if ((_DWORD)v55)
  {
    v15 = MEMORY[0x24BEDB770];
    do
    {
      v16 = &v47;
      if (HIDWORD(v55) >= 0x41)
        v16 = v47;
      v44 = v16[v14 - 1];
      LODWORD(v55) = v14 - 1;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v44))
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v44, (uint64_t)&v41);
        v19 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)&v41);
        Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v19);
        v21 = *(uint64_t **)Layers;
        v22 = *(uint64_t **)(Layers + 8);
        if (*(uint64_t **)Layers == v22)
        {
          v25 = 0;
        }
        else
        {
          do
          {
            v23 = (_QWORD *)sub_20C0EEAF8(v21);
            v36.n128_u64[1] = (unint64_t)&v45;
            v37 = v15;
            LOWORD(v38) = 0;
            v36.n128_u64[0] = (unint64_t)&unk_24C52B6E8;
            HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_2549880C0, &v36);
            if ((_BYTE)v38)
              v25 = 0;
            else
              v25 = HasField;
            if ((v25 & 1) != 0)
              break;
            ++v21;
          }
          while (v21 != v22);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
        sub_20BFD265C(&v42);
        sub_20C2012CC(&v41);
        if (v25)
          break;
      }
      v40 = v44;
      v26 = **(_QWORD **)(v44 + 16);
      v27 = *(unsigned __int16 *)(v26 + 48 * *((_QWORD *)&v44 + 1) + 30);
      v36.n128_u64[0] = v44;
      v36.n128_u64[1] = v27;
      v37 = v26;
      *(_QWORD *)&v38 = v44;
      *((_QWORD *)&v38 + 1) = 0xFFFFLL;
      v39 = v26;
      while (*(_OWORD *)&v36 != v38)
      {
        v28 = (__n128 *)sub_20C20ACFC(&v36, v17, v18);
        sub_20C20AF08((uint64_t)&v47, v28);
        sub_20C20AD88(&v36);
      }
      v14 = v55;
    }
    while ((_DWORD)v55);
  }
  v29 = v45 != 0;
  if (HIDWORD(v55) >= 0x41)
    free(v47);
  return v29;
}

void sub_20C20AC28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549880C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C20ACA4(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if ((*result & 7) != 0)
  {
    v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C20ACC8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

_QWORD *sub_20C20ACFC(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (result[1] == result[4] && *result == result[3])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator*";
    v3[2] = 271;
    v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateC"
            "hildrenConstRange, true>::operator*() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChildrenConst"
            "Range, Reverse = true]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C20AD88(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = a1[1];
  if (v2 == a1[4] && *a1 == a1[3])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNo"
            "deRef_PrivateChildrenConstRange, true>::operator++() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_Priva"
            "teChildrenConstRange, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[1] = *(unsigned __int16 *)(a1[2] + 48 * v2 + 32);
  }
  return a1;
}

uint64_t sub_20C20AE24(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, _BYTE *a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) != 0)
    return result;
  if ((a3 & 1) != 0)
  {
    v7 = 1;
    goto LABEL_5;
  }
  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1);
  v7 = result ^ 1;
  if ((result & 1) == 0)
  {
LABEL_5:
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
    if ((_DWORD)result)
    {
      *a2 = 1;
      return result;
    }
  }
  if (!*a2)
  {
    v10 = *((_QWORD *)a1 + 1);
    v21 = *(_QWORD *)a1;
    v22 = v10;
    v11 = **(_QWORD **)(v21 + 16);
    v12 = *(unsigned __int16 *)(v11 + 48 * v10 + 28);
    v15 = v21;
    v16 = v12;
    v17 = v11;
    v18 = v21;
    v13 = 0xFFFFLL;
    v19 = 0xFFFFLL;
    v20 = v11;
    while (v12 != v13 || v15 != v18)
    {
      v14 = sub_20C20495C(&v15, v8, v9);
      sub_20C20AE24(v14, a2, v7);
      result = (uint64_t)sub_20C2049E8(&v15);
      v12 = v16;
      v13 = v19;
    }
  }
  return result;
}

__n128 sub_20C20AF08(uint64_t a1, __n128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __n128 result;

  v4 = *(_DWORD *)(a1 + 1024);
  v5 = *(_DWORD *)(a1 + 1028);
  if (v4 == v5)
  {
    sub_20C20AF74(a1, v4 + (v4 >> 1) + 1);
    v5 = *(_DWORD *)(a1 + 1028);
  }
  v6 = a1;
  if (v5 >= 0x41)
    v6 = *(_QWORD *)a1;
  result = *a2;
  *(__n128 *)(v6 + 16 * (*(_DWORD *)(a1 + 1024))++) = *a2;
  return result;
}

void sub_20C20AF74(uint64_t a1, unsigned int a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;

  v4 = malloc(16 * a2);
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 1028);
  v7 = (__int128 *)a1;
  if (v6 >= 0x41)
    v7 = *(__int128 **)a1;
  v8 = *(unsigned int *)(a1 + 1024);
  if ((_DWORD)v8)
  {
    v9 = 16 * v8;
    v10 = v4;
    do
    {
      v11 = *v7++;
      *v10++ = v11;
      v9 -= 16;
    }
    while (v9);
  }
  if (v6 >= 0x41)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 1028) = a2;
}

uint64_t sub_20C20AFF4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BFB1AC0(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_BYTE **)(a1 + 8) = *(_BYTE *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C20B074(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20BFB1AC0(a2))
  {
    **(_BYTE **)(a1 + 8) = sub_20C20B0D8(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

BOOL sub_20C20B0D8(_QWORD *a1)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C1CFDE0(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::New@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  void *v8;
  uint64_t result;

  v8 = operator new(0x20uLL);
  result = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Pcp_LayerStackRegistry((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_20C20B188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Pcp_LayerStackRegistry(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  void *v8;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C52B720;
  v8 = operator new(0x188uLL);
  sub_20C20CE58((uint64_t)v8, a2, a3, a4);
  *(_QWORD *)(a1 + 24) = v8;
  return a1;
}

void sub_20C20B218(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfRefBase *v1;
  unsigned int **v2;
  void *v3;
  const void *v5;

  operator delete(v3);
  sub_20BEBCE60(v2, v5);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::~Pcp_LayerStackRegistry(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  unsigned int **v2;
  const void *v3;

  *(_QWORD *)this = off_24C52B720;
  v2 = (unsigned int **)((char *)this + 16);
  sub_20C20D564((uint64_t *)this + 3, 0);
  sub_20BEBCE60(v2, v3);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::~Pcp_LayerStackRegistry(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::MuteAndUnmuteLayers(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::MuteAndUnmuteLayers(*(_QWORD *)(a1 + 24) + 336, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::MuteAndUnmuteLayers(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  const void **v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void **v19;
  const void **v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  const void **v28;
  const void **v29;
  const void **v30;
  uint64_t v31;
  __int128 *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void **v36;
  const void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  char v54;
  char v55;

  v52 = 0uLL;
  v53 = 0;
  v50 = 0uLL;
  v51 = 0;
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId((unsigned __int8 *)a1, a2, v8, __p);
      v10 = (void *)HIBYTE(v49);
      v11 = HIBYTE(v49);
      if (v49 < 0)
        v10 = __p[1];
      if (!v10)
        goto LABEL_29;
      v12 = *(const void ***)(a1 + 24);
      v13 = *(const void ***)(a1 + 32);
      v54 = 0;
      v14 = sub_20C20F1B8(v12, v13, (const void **)__p, (uint64_t)&v55);
      v15 = (uint64_t)v14;
      if (*(const void ***)(a1 + 32) == v14)
        goto LABEL_22;
      v16 = *((unsigned __int8 *)v14 + 23);
      if ((v16 & 0x80u) == 0)
        v17 = (void *)*((unsigned __int8 *)v14 + 23);
      else
        v17 = (void *)v14[1];
      v18 = (void *)HIBYTE(v49);
      v11 = HIBYTE(v49);
      if (v49 < 0)
        v18 = __p[1];
      if (v17 != v18)
        goto LABEL_22;
      if (v49 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*v14, v19, (size_t)v14[1]))
          goto LABEL_22;
      }
      else if (*((_BYTE *)v14 + 23))
      {
        v20 = v14;
        while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v19)
        {
          v20 = (const void **)((char *)v20 + 1);
          v19 = (void **)((char *)v19 + 1);
          if (!--v16)
            goto LABEL_29;
        }
LABEL_22:
        sub_20C20CCE8((uint64_t *)(a1 + 24), v15, (__int128 *)__p);
        v21 = (_OWORD *)*((_QWORD *)&v52 + 1);
        if (*((_QWORD *)&v52 + 1) >= v53)
        {
          v23 = sub_20BE4EE50((uint64_t *)&v52, (__int128 *)__p);
        }
        else
        {
          if (SHIBYTE(v49) < 0)
          {
            sub_20BDDBFAC(*((_BYTE **)&v52 + 1), __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v22 = *(_OWORD *)__p;
            *(_QWORD *)(*((_QWORD *)&v52 + 1) + 16) = v49;
            *v21 = v22;
          }
          v23 = (uint64_t)v21 + 24;
        }
        *((_QWORD *)&v52 + 1) = v23;
        v11 = HIBYTE(v49);
      }
LABEL_29:
      if (v11 < 0)
        operator delete(__p[0]);
      v8 += 24;
    }
    while (v8 != v9);
  }
  v24 = *a4;
  v25 = a4[1];
  if (*a4 != v25)
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId((unsigned __int8 *)a1, a2, v24, __p);
      v26 = (void *)HIBYTE(v49);
      v27 = HIBYTE(v49);
      if (v49 < 0)
        v26 = __p[1];
      if (!v26)
        goto LABEL_65;
      v28 = *(const void ***)(a1 + 24);
      v29 = *(const void ***)(a1 + 32);
      v54 = 0;
      v30 = sub_20C20F1B8(v28, v29, (const void **)__p, (uint64_t)&v55);
      v31 = (uint64_t)v30;
      v32 = *(__int128 **)(a1 + 32);
      v33 = (void *)HIBYTE(v49);
      v27 = HIBYTE(v49);
      if (v32 == (__int128 *)v30)
        goto LABEL_65;
      v34 = *((unsigned __int8 *)v30 + 23);
      if ((v34 & 0x80u) == 0)
        v35 = (void *)*((unsigned __int8 *)v30 + 23);
      else
        v35 = (void *)v30[1];
      if (v49 < 0)
        v33 = __p[1];
      if (v35 != v33)
        goto LABEL_65;
      v36 = v49 >= 0 ? __p : (void **)__p[0];
      if ((v34 & 0x80) == 0)
        break;
      if (!memcmp(*v30, v36, (size_t)v30[1]))
        goto LABEL_53;
LABEL_65:
      if (v27 < 0)
        operator delete(__p[0]);
      v24 += 24;
      if (v24 == v25)
        goto LABEL_68;
    }
    if (*((_BYTE *)v30 + 23))
    {
      v37 = v30;
      while (*(unsigned __int8 *)v37 == *(unsigned __int8 *)v36)
      {
        v37 = (const void **)((char *)v37 + 1);
        v36 = (void **)((char *)v36 + 1);
        if (!--v34)
          goto LABEL_53;
      }
      goto LABEL_65;
    }
LABEL_53:
    sub_20C07F91C((uint64_t)&v55, (__int128 *)(v31 + 24), v32, v31);
    v39 = v38;
    for (i = *(_QWORD *)(a1 + 32); i != v39; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 32) = v39;
    v41 = (_OWORD *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) >= v51)
    {
      v43 = sub_20BE4EE50((uint64_t *)&v50, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v49) < 0)
      {
        sub_20BDDBFAC(*((_BYTE **)&v50 + 1), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v42 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16) = v49;
        *v41 = v42;
      }
      v43 = (uint64_t)v41 + 24;
    }
    *((_QWORD *)&v50 + 1) = v43;
    v27 = HIBYTE(v49);
    goto LABEL_65;
  }
LABEL_68:
  v44 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v52;
  v52 = v44;
  v45 = a3[2];
  a3[2] = v53;
  v53 = v45;
  v46 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v50;
  v50 = v46;
  v47 = a4[2];
  a4[2] = v51;
  v51 = v47;
  __p[0] = &v50;
  sub_20BDE5038((void ***)__p);
  *(_QWORD *)&v50 = &v52;
  sub_20BDE5038((void ***)&v50);
}

void sub_20C20B648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a16;
  sub_20BDE5038((void ***)&__p);
  a16 = &a20;
  sub_20BDE5038((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetMutedLayers(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((_QWORD *)this + 3) + 360;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::GetMutedLayers(pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers *this)
{
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::IsLayerMuted(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(*(_QWORD *)(a1 + 24) + 336, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  void *v6;
  const void **v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  _BYTE v16[34];

  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
    return 0;
  pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId((unsigned __int8 *)a1, a2, a3, __p);
  v6 = (void *)HIBYTE(v15);
  if (v15 < 0)
    v6 = __p[1];
  if (!v6
    || (v7 = *(const void ***)(a1 + 24),
        v8 = *(const void ***)(a1 + 32),
        v16[1] = 0,
        v9 = sub_20C20F1B8(v7, v8, (const void **)__p, (uint64_t)v16),
        v8 == v9)
    || sub_20BDDDF74((uint64_t)v16, (const void **)__p, v9))
  {
    v10 = 0;
  }
  else
  {
    if (a4)
    {
      v12 = *((_QWORD *)a4 + 2);
      v13 = *a4;
      *a4 = *(_OWORD *)__p;
      *((_QWORD *)a4 + 2) = v15;
      *(_OWORD *)__p = v13;
      v15 = v12;
    }
    v10 = 1;
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v10;
}

void sub_20C20B7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingMutedLayer(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD v8[3];
  __int16 v9;

  v4 = (unint64_t *)(*(_QWORD *)(a1 + 24) + 384);
  v8[0] = 0;
  v9 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v8, v4, 0);
  v5 = sub_20BEC301C((_QWORD *)(*(_QWORD *)(a1 + 24) + 120), a2);
  if (v5)
    v6 = (uint64_t)(v5 + 40);
  else
    v6 = *(_QWORD *)(a1 + 24) + 200;
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v8);
  return v6;
}

void sub_20C20B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindOrCreate(const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t (*v13)(uint64_t *);
  char v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t (*v25)(uint64_t *);
  char v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  char *v51;
  _OWORD v52[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v53;
  _QWORD v54[3];
  const char *v55;
  char v56;
  void **v57;

  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator BOOL(a2))
  {
    v8 = (unint64_t *)(*((_QWORD *)a1 + 3) + 384);
    v54[0] = 0;
    *(_WORD *)((char *)&v55 + 1) = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v54, v8, 0);
    *a4 = 0;
    v9 = sub_20C20DD88(*((_QWORD **)a1 + 3), (uint64_t)a2);
    if (v9)
    {
      v10 = v9[13];
      *(_QWORD *)&v52[0] = v9[12];
      *((_QWORD *)&v52[0] + 1) = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
    else
    {
      v52[0] = 0uLL;
    }
    v13 = sub_20C20BDB4(v52);
    if (v14 & 1 | (unint64_t)v13)
    {
      sub_20C103494((uint64_t)v52, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v57);
      v15 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a4;
      *a4 = (uint64_t)v57;
      v57 = 0;
      sub_20BF1D8F4((int)a4, v15);
      sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v57);
    }
    v16 = *((_QWORD *)&v52[0] + 1);
    if (*((_QWORD *)&v52[0] + 1))
    {
      v17 = (unsigned int *)(*((_QWORD *)&v52[0] + 1) + 8);
      do
      {
        v18 = __ldxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    if (!*a4)
    {
      tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)v54);
      v20 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)operator new(0x1C8uLL);
      pxrInternal__aapl__pxrReserved__::PcpLayerStack::PcpLayerStack(v20, a2, a1);
      v53 = v20;
      tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v54, (unint64_t *)(*((_QWORD *)a1 + 3) + 384), 1);
      v21 = sub_20C20DD88(*((_QWORD **)a1 + 3), (uint64_t)a2);
      if (v21)
      {
        v22 = v21[13];
        *(_QWORD *)&v52[0] = v21[12];
        *((_QWORD *)&v52[0] + 1) = v22;
        if (v22)
        {
          v23 = (unsigned int *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      else
      {
        v52[0] = 0uLL;
      }
      v25 = sub_20C20BDB4(v52);
      if (v26 & 1 | (unint64_t)v25)
      {
        sub_20C103494((uint64_t)v52, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v57);
        v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a4;
        *a4 = (uint64_t)v57;
        v57 = 0;
        sub_20BF1D8F4((int)a4, v27);
        sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v57);
      }
      v28 = *((_QWORD *)&v52[0] + 1);
      if (*((_QWORD *)&v52[0] + 1))
      {
        v29 = (unsigned int *)(*((_QWORD *)&v52[0] + 1) + 8);
        do
        {
          v30 = __ldxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      if (!*a4)
      {
        *a4 = (uint64_t)v53;
        sub_20BF1DD04((uint64_t *)&v53);
        sub_20BF1D8F4((int)a4, 0);
        sub_20C2033F4((uint64_t *)v52, a4);
        v32 = *((_QWORD *)a1 + 3);
        v57 = (void **)a2;
        v33 = sub_20C20D6CC(v32, (uint64_t)a2, (uint64_t)&unk_20CAC184C, (uint64_t *)&v57);
        v34 = (unsigned int *)v33[13];
        *((_OWORD *)v33 + 6) = v52[0];
        *((_QWORD *)&v52[0] + 1) = 0;
        if (v34)
        {
          v35 = v34 + 2;
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
          v38 = *((_QWORD *)&v52[0] + 1);
          *(_QWORD *)&v52[0] = 0;
          if (*((_QWORD *)&v52[0] + 1))
          {
            v39 = (unsigned int *)(*((_QWORD *)&v52[0] + 1) + 8);
            do
            {
              v40 = __ldxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          }
        }
        sub_20C20DAE4(v52, (uint64_t)a1);
        v42 = sub_20C1FE500(a4);
        v43 = *(unsigned int **)(v42 + 112);
        *(_OWORD *)(v42 + 104) = v52[0];
        *((_QWORD *)&v52[0] + 1) = 0;
        if (v43)
        {
          v44 = v43 + 2;
          do
          {
            v45 = __ldxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
            (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
          v47 = *((_QWORD *)&v52[0] + 1);
          *(_QWORD *)&v52[0] = 0;
          if (*((_QWORD *)&v52[0] + 1))
          {
            v48 = (unsigned int *)(*((_QWORD *)&v52[0] + 1) + 8);
            do
            {
              v49 = __ldxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          }
        }
        pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStack *)*a4);
        tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)v54);
        v51 = (char *)sub_20C1FE500(a4);
        sub_20C20C368(v51, (uint64_t)v52);
        sub_20C20DB9C(a3, a3[1], *(uint64_t **)&v52[0], *((uint64_t **)&v52[0] + 1), (uint64_t)(*((_QWORD *)&v52[0] + 1) - *(_QWORD *)&v52[0]) >> 4);
        v57 = (void **)v52;
        sub_20BDE9EB0(&v57);
      }
      sub_20C2012CC(&v53);
    }
    sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v54);
  }
  else
  {
    v54[0] = "pcp/layerStackRegistry.cpp";
    v54[1] = "FindOrCreate";
    v54[2] = 152;
    v55 = "PcpLayerStackRefPtr pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindOrCreate(const PcpLayerStack"
          "Identifier &, PcpErrorVector *)";
    v56 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v54, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build layer stack with null rootLayer");
    *a4 = 0;
  }
}

void sub_20C20BC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 56) = &a9;
  sub_20BDE9EB0((void ***)(v15 - 56));
  sub_20C2012CC(&a13);
  sub_20C2012CC(v14);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a14);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_Find@<X0>(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = sub_20C20DD88(*((_QWORD **)this + 3), (uint64_t)a2);
  if (result)
  {
    v5 = result[13];
    *a3 = result[12];
    a3[1] = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t (*sub_20C20BDB4(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20C20D68C;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStack *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t Layers;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t MutedLayers;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  const void **v58;
  const void **v59;
  const void **v60;
  uint64_t v61;
  unsigned __int8 *v62;
  const void **v63;
  const void **v64;
  uint64_t result;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 **v73;

  sub_20C20E010(&v72, (uint64_t)a2);
  v4 = *((_QWORD *)this + 3) + 80;
  v69 = &v72;
  v5 = sub_20C20E0C8(v4, (uint64_t)&v72, (uint64_t)&unk_20CAC184C, (_QWORD **)&v69);
  v7 = (__int128 *)v5[4];
  v8 = (__int128 *)v5[5];
  for (i = (uint64_t)(v5 + 4); v7 != v8; ++v7)
  {
    v9 = *((_QWORD *)this + 3) + 40;
    v69 = v7;
    v10 = sub_20C20E0C8(v9, (uint64_t)v7, (uint64_t)&unk_20CAC184C, (_QWORD **)&v69);
    v11 = v10;
    v12 = v10[4];
    v13 = v10[5];
    if (v12 == v13)
    {
      v14 = v10[4];
    }
    else
    {
      while (!sub_20BEB560C(v12, (uint64_t)&v72))
      {
        v12 += 16;
        if (v12 == v13)
        {
          v12 = v13;
          break;
        }
      }
      v14 = v12;
      v12 = v11[5];
    }
    sub_20C20E3D4((uint64_t)&v69, v14 + 16, v12, v14);
    v16 = v15;
    for (j = v11[5]; j != v16; j -= 16)
    {
      v18 = *(unsigned int **)(j - 8);
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    v11[5] = v16;
  }
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(a2);
  v23 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v23)
    sub_20C20E45C((_QWORD *)(*((_QWORD *)this + 3) + 80), (uint64_t)&v72);
  else
    sub_20C20E4A8(i, *(uint64_t **)Layers, v23, ((uint64_t)v23 - *(_QWORD *)Layers) >> 3);
  v24 = *(uint64_t **)Layers;
  v25 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers != v25)
  {
    do
    {
      v26 = *((_QWORD *)this + 3);
      sub_20C1034E8((uint64_t *)&v69, v24);
      v73 = &v69;
      v27 = sub_20C20E7C0(v26 + 40, (uint64_t)&v69, (uint64_t)&unk_20CAC184C, (_OWORD **)&v73);
      sub_20C20C7BC(v27 + 4, &v72);
      v28 = v70;
      if (v70)
      {
        v29 = (unsigned int *)(v70 + 8);
        do
        {
          v30 = __ldxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v32 = sub_20BEB5714((_QWORD *)(*((_QWORD *)this + 3) + 160), (uint64_t)&v72);
  v33 = v32;
  if (v32)
  {
    v34 = (_QWORD *)v32[4];
    v35 = v32 + 5;
    if (v34 != v32 + 5)
    {
      do
      {
        v36 = *((_QWORD *)this + 3) + 120;
        v69 = (__int128 *)(v34 + 4);
        v37 = sub_20C20EA6C(v36, (unsigned __int8 *)v34 + 32, (uint64_t)&unk_20CAC184C, &v69);
        v38 = v37;
        v39 = *((_QWORD *)v37 + 5);
        v40 = *((_QWORD *)v37 + 6);
        if (v39 == v40)
        {
          v41 = *((_QWORD *)v37 + 5);
        }
        else
        {
          while (!sub_20BEB560C(v39, (uint64_t)&v72))
          {
            v39 += 16;
            if (v39 == v40)
            {
              v39 = v40;
              break;
            }
          }
          v41 = v39;
          v39 = *((_QWORD *)v38 + 6);
        }
        sub_20C20E3D4((uint64_t)&v69, v41 + 16, v39, v41);
        v43 = v42;
        for (k = *((_QWORD *)v38 + 6); k != v43; k -= 16)
        {
          v45 = *(unsigned int **)(k - 8);
          if (v45)
          {
            v46 = v45 + 2;
            do
            {
              v47 = __ldxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
              (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
          }
        }
        *((_QWORD *)v38 + 6) = v43;
        v49 = (_QWORD *)v34[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v34[2];
            v51 = *v50 == (_QWORD)v34;
            v34 = v50;
          }
          while (!v51);
        }
        v34 = v50;
      }
      while (v50 != v35);
    }
  }
  MutedLayers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetMutedLayers(a2);
  if (*(_QWORD *)(MutedLayers + 16))
  {
    if (v33)
    {
      v53 = v33 + 4;
    }
    else
    {
      v54 = *((_QWORD *)this + 3) + 160;
      v69 = &v72;
      v53 = sub_20C20EEA4(v54, (uint64_t)&v72, (uint64_t)&unk_20CAC184C, (_QWORD **)&v69) + 4;
    }
    sub_20C20F16C((uint64_t *)&v69, *(const void ***)MutedLayers, (const void ***)(MutedLayers + 8));
    v55 = v53 + 1;
    sub_20BDECAB8((uint64_t)v53, (char *)v53[1]);
    v56 = v70;
    *v53 = v69;
    v53[1] = v56;
    v57 = v71;
    v53[2] = v71;
    if (v57)
    {
      *(_QWORD *)(v56 + 16) = v55;
      v69 = (__int128 *)&v70;
      v70 = 0;
      v71 = 0;
      v56 = 0;
    }
    else
    {
      *v53 = v55;
    }
    sub_20BDECAB8((uint64_t)&v69, (char *)v56);
  }
  else if (v33)
  {
    sub_20C20EE14((_QWORD *)(*((_QWORD *)this + 3) + 160), (uint64_t)&v72);
  }
  v60 = *(const void ***)MutedLayers;
  v58 = (const void **)(MutedLayers + 8);
  v59 = v60;
  if (v60 != v58)
  {
    do
    {
      v61 = *((_QWORD *)this + 3) + 120;
      v69 = (__int128 *)(v59 + 4);
      v62 = sub_20C20EA6C(v61, (unsigned __int8 *)v59 + 32, (uint64_t)&unk_20CAC184C, &v69);
      sub_20C20C7BC((uint64_t *)v62 + 5, &v72);
      v63 = (const void **)v59[1];
      if (v63)
      {
        do
        {
          v64 = v63;
          v63 = (const void **)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (const void **)v59[2];
          v51 = *v64 == v59;
          v59 = v64;
        }
        while (!v51);
      }
      v59 = v64;
    }
    while (v64 != v58);
  }
  result = *((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v66 = (unsigned int *)(*((_QWORD *)&v72 + 1) + 8);
    do
    {
      v67 = __ldxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C20C2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a14)
  {
    v15 = a14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20C20C368@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;

  v2 = (_QWORD **)*((_QWORD *)result + 29);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v2)
    return sub_20C20D4C4((char *)a2, *v2, v2[1], ((char *)v2[1] - (char *)*v2) >> 4);
  return result;
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find@<X0>(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v6;
  _QWORD v8[3];
  __int16 v9;

  v6 = (unint64_t *)(*((_QWORD *)this + 3) + 384);
  v8[0] = 0;
  v9 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v8, v6, 0);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_Find(this, a2, a3);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v8);
}

void sub_20C20C3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Contains(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  if (!a2[1])
    return 0;
  v4 = sub_20BEB47BC(a2 + 1);
  v5 = *a2;
  if (!*(_BYTE *)(v4 + 14) || v5 == 0)
    return 0;
  v8 = *(_QWORD *)(v5 + 112);
  if (v8)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(v5 + 112)) + 14))
      v8 = *(_QWORD *)(v5 + 104);
    else
      v8 = 0;
  }
  return v8 == a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingLayer(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  __int16 v9;

  v4 = (unint64_t *)(*(_QWORD *)(a1 + 24) + 384);
  v8[0] = 0;
  v9 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v8, v4, 0);
  v5 = sub_20BEB5714((_QWORD *)(*(_QWORD *)(a1 + 24) + 40), a2);
  if (v5)
    v6 = (uint64_t)(v5 + 4);
  else
    v6 = *(_QWORD *)(a1 + 24) + 200;
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v8);
  return v6;
}

void sub_20C20C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks@<X0>(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  char *v14;
  void *p_p;
  char *v16;
  void *__p;
  char v19;
  _QWORD v20[4];
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  __int16 v25;

  v4 = (unint64_t *)(*((_QWORD *)this + 3) + 384);
  v24[0] = 0;
  v25 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v24, v4, 0);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20C20C6B4(a2, *(_QWORD *)(*((_QWORD *)this + 3) + 24));
  v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v23 = 0;
  while (v22 != v23)
  {
    v7 = sub_20C20C744(&v22, v5, v6);
    v8 = sub_20C20BDB4((_QWORD *)(*v7 + 96));
    if (!(v9 & 1 | (unint64_t)v8))
    {
      v20[0] = "pcp/layerStackRegistry.cpp";
      v20[1] = "GetAllLayerStacks";
      v20[2] = 232;
      v20[3] = "std::vector<PcpLayerStackPtr> pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks() const";
      v21 = 0;
      v12 = sub_20C20C744(&v22, v9, v10);
      sub_20C1FE438((uint64_t *)(*v12 + 16));
      if (v19 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v16 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected dead layer stack %s", v13, v14, p_p);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "i->second", v16);
      if (v19 < 0)
        operator delete(__p);
    }
    v11 = sub_20C20C744(&v22, v9, v10);
    sub_20C20C7BC(a2, (__int128 *)(*v11 + 96));
    sub_20C20C8E4((uint64_t)&v22);
  }
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v24);
}

void sub_20C20C674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20BEB4844((void ***)&__p);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a24);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C20C6B4(uint64_t *a1, unint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (unsigned int *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDEA2F0((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_20C20DE8C(a1, v7);
    return sub_20BEB5F68((unsigned int *)v7);
  }
  return result;
}

void sub_20C20C730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C20C744(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__pxrReserved__::"
            "PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLa"
            "yerStack>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = std::unordered_map<pxrInternal__aap"
            "l__pxrReserved__::PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__px"
            "rReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

unsigned int *sub_20C20C7BC(uint64_t *a1, __int128 *a2)
{
  unsigned int *result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (unsigned int *)(a1 + 2);
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20BDDF694();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)sub_20BDEA2F0((uint64_t)result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    sub_20C20DE8C(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = sub_20BEB5F68((unsigned int *)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_20C20C8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20C8E4(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__p"
            "xrReserved__::PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrRes"
            "erved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = std::unordered_map<px"
            "rInternal__aapl__pxrReserved__::PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInte"
            "rnal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::ForEachLayerStack(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[3];
  void **v6;

  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(a1, v5);
  v3 = v5[0];
  v4 = v5[1];
  while (v3 != v4)
  {
    (*(void (**)(_QWORD, uint64_t))(a2 + 8))(*(_QWORD *)a2, v3);
    v3 += 16;
  }
  v6 = (void **)v5;
  sub_20BEB4844(&v6);
}

void sub_20C20C9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEB4844(&a12);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayersAndRemove(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::PcpLayerStack *a3)
{
  unint64_t *v6;
  _QWORD *v7;
  _QWORD v9[3];
  __int16 v10;

  v6 = (unint64_t *)(*((_QWORD *)this + 3) + 384);
  v9[0] = 0;
  v10 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v9, v6, 1);
  v7 = sub_20C20DD88(*((_QWORD **)this + 3), (uint64_t)a2);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(this, a3);
  if (v7 && (const pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v7 + 12) == a3)
    sub_20C20DFC4(*((_QWORD **)this + 3), (uint64_t)a2);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v9);
}

void sub_20C20CA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((_QWORD *)this + 3) + 224;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetFileFormatTarget(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((_QWORD *)this + 3) + 304;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_IsUsd(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 328);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetMutedLayers(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((_QWORD *)this + 3) + 336;
}

void pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *IsAnonymousLayerIdentifier;
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  void *v10;
  char v11;
  void *__p[2];
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15[2];
  void *v16[2];
  uint64_t v17;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v14 = (uint64_t *)v15;
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(a3, v16, &v14) & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_13;
  }
  IsAnonymousLayerIdentifier = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(v16);
  if ((_DWORD)IsAnonymousLayerIdentifier)
  {
    if (SHIBYTE(v17) < 0)
    {
      sub_20BDDBFAC(__p, v16[0], (unint64_t)v16[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v16;
      v13 = v17;
    }
  }
  else
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(IsAnonymousLayerIdentifier);
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v9);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  }
  v10 = (void *)HIBYTE(v13);
  v11 = HIBYTE(v13);
  if (v13 < 0)
    v10 = __p[1];
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::Pcp_StripFileFormatTarget(a1, &v14);
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateIdentifier(__p, &v14);
    if ((v13 & 0x8000000000000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v11 < 0)
LABEL_12:
    operator delete(__p[0]);
LABEL_13:
  sub_20BDE9D48((uint64_t)&v14, v15[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_20C20CBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
    operator delete(__p);
  sub_20BDE9D48((uint64_t)&a16, a17);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::Pcp_MutedLayers(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  return __dst;
}

{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  return __dst;
}

__int128 *sub_20C20CCE8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  __int128 *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = (__int128 *)a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)sub_20BDE4FF4(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[24 * v12];
    v20 = v19;
    v21 = &v16[24 * v15];
    sub_20C20F24C(&v18, a3);
    v4 = (__int128 *)sub_20BE753F0((uint64_t)a1, &v18, v4);
    sub_20BDF3648((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_20BE4EDF4(a1, a3);
  }
  else
  {
    sub_20BE752D4((uint64_t)a1, a2, v6, a2 + 24);
    if (v4 <= a3)
      a3 = (__int128 *)((char *)a3 + 24 * (a1[1] > (unint64_t)a3));
    std::string::operator=((std::string *)v4, (const std::string *)a3);
  }
  return v4;
}

void sub_20C20CE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20CE58(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 232) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 248) = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_20BFB73DC((char *)(a1 + 256), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 288) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 72);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 304), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 304) = v17;
  }
  *(_BYTE *)(a1 + 328) = a4;
  v18 = (_BYTE *)(a1 + 336);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v18, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v19 = *a3;
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v18 = v19;
  }
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  __dmb(0xBu);
  *(_QWORD *)(a1 + 384) = 0;
  return a1;
}

void sub_20C20CFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 327) < 0)
    operator delete(*v8);
  sub_20C20D09C(v7);
  sub_20BEB4844((void ***)va);
  sub_20C20D134(v6);
  sub_20C20D204(v5);
  sub_20C20D2BC(v4);
  sub_20C20D2BC(v3);
  sub_20C20D390(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20D09C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  v11 = (void **)(a1 + 32);
  sub_20BDE9EB0(&v11);
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_20C20D134(uint64_t a1)
{
  void *v2;

  sub_20C20D16C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C20D16C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C20D1A8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C20D1A8(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  sub_20BDECAB8(a1 + 16, *(char **)(a1 + 24));
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20C20D204(uint64_t a1)
{
  void *v2;

  sub_20C20D23C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C20D23C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C20D278((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C20D278(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20BEB4844(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C20D2BC(uint64_t a1)
{
  void *v2;

  sub_20C20D2F4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C20D2F4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C20D330((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C20D330(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;

  v6 = (void **)(a1 + 16);
  sub_20BEB4844(&v6);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20C20D390(uint64_t a1)
{
  void *v2;

  sub_20C20D3C8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C20D3C8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C20D404((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C20D404(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void **v14;

  v2 = *(unsigned int **)(a1 + 88);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  v14 = (void **)(a1 + 32);
  sub_20BDE9EB0(&v14);
  v6 = *(unsigned int **)(a1 + 24);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v11 = (unsigned int *)(result + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *sub_20C20D4C4(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C20D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE9EB0(&a9);
  _Unwind_Resume(a1);
}

void sub_20C20D564(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C20D590(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C20D590(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  v11 = (void **)(a1 + 360);
  sub_20BDE5038(&v11);
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 280));
  v11 = (void **)(a1 + 256);
  sub_20BDE9EB0(&v11);
  v2 = *(unsigned int **)(a1 + 248);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 232);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v11 = (void **)(a1 + 200);
  sub_20BEB4844(&v11);
  sub_20C20D134(a1 + 160);
  sub_20C20D204(a1 + 120);
  sub_20C20D2BC(a1 + 80);
  sub_20C20D2BC(a1 + 40);
  return sub_20C20D390(a1);
}

uint64_t sub_20C20D68C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

_QWORD *sub_20C20D6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)(a2 + 72));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v7)
          {
            if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v13 + 2), a2) & 1) != 0)
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v8)
                v14 %= v8;
            }
            else
            {
              v14 &= v8 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_20C20D958(a1, v7, a4, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C20DAA0((uint64_t)v24, 0);
  return v13;
}

void sub_20C20D940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C20DAA0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20D958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C20D9C4((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C20D9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C20DAA0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20D9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v13;
  return a1;
}

void sub_20C20DA80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

void sub_20C20DAA0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C20D404((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C20DAE4(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C20DB84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C20DB9C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      sub_20BDDF694();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)sub_20BDEA2F0(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)sub_20BFC7064(a1, v33, v5);
    sub_20BDEA324((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    sub_20BFC6E90((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        sub_20BDE881C(v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_20C20DD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C20DD88(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)(a2 + 72));
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v7 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = v9[1];
      if (v10 == v4)
      {
        if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v9 + 2), a2) & 1) != 0)
          return v9;
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

uint64_t sub_20C20DE8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C20DF00((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C20DF00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C20DF90((uint64_t)v12);
  return v10;
}

uint64_t sub_20C20DF90(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEB5F08((unsigned int *)a1);
  return a1;
}

uint64_t sub_20C20DFC4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20C20DD88(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C20DAA0((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *sub_20C20E010(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C20E0B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C20E0C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v8 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v10 = bswap64(v8);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_20BEB560C((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = operator new(0x38uLL);
  v31[0] = v17;
  v31[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v17[2] = **a4;
  v19 = v18[1];
  v17[3] = v19;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v17[4] = 0;
  v17[5] = 0;
  v17[6] = 0;
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    sub_20BDEC6E0(a1, v27);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v31[0] = *v28;
    *v28 = v31[0];
  }
  else
  {
    *(_QWORD *)v31[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v31[0])
    {
      v29 = *(_QWORD *)(*(_QWORD *)v31[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11)
          v29 %= v11;
      }
      else
      {
        v29 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v31[0];
    }
  }
  v15 = (_QWORD *)v31[0];
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C20E390((uint64_t)v31, 0);
  return v15;
}

void sub_20C20E378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C20E390((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C20E390(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C20D330((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C20E3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *(unsigned int **)(a4 + 8);
      *(_OWORD *)a4 = *(_OWORD *)v5;
      *(_QWORD *)(v5 + 8) = 0;
      if (v7)
      {
        v8 = v7 + 2;
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
      *(_QWORD *)v5 = 0;
      v5 += 16;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20C20E45C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20BEB5714(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C20E390((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t *sub_20C20E4A8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *result;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  char v23;

  v8 = a1 + 16;
  v9 = *(_QWORD *)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_20BF49804(a1);
    if (a4 >> 60)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BE90F0C((_QWORD *)a1, v12);
    result = sub_20C20E618(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (*(_QWORD *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    v15 = &a2[v14];
    sub_20C20E6F0((uint64_t)&v22, a2, v15, v9);
    result = sub_20C20E618(v8, v15, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C20E6F0((uint64_t)&v23, a2, a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      result = *(uint64_t **)(v18 - 8);
      if (result)
      {
        v19 = (unsigned int *)(result + 1);
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_20C20E608(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C20E610(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_20C20E618(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C1034E8(v4, v6++);
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C20E6BC((uint64_t)v8);
  return v4;
}

void sub_20C20E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C20E6BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C20E6BC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF43244((_QWORD **)a1);
  return a1;
}

uint64_t *sub_20C20E6F0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v16;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20C1034E8((uint64_t *)&v16, v5);
      v7 = *(unsigned int **)(a4 + 8);
      *(_OWORD *)a4 = v16;
      *((_QWORD *)&v16 + 1) = 0;
      if (v7)
      {
        v8 = v7 + 2;
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
        v11 = *((_QWORD *)&v16 + 1);
        *(_QWORD *)&v16 = 0;
        if (*((_QWORD *)&v16 + 1))
        {
          v12 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
          do
          {
            v13 = __ldxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_20C20E7C0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v8 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v10 = bswap64(v8);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_20BEB560C((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = operator new(0x38uLL);
  v28[0] = v17;
  v28[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  *((_OWORD *)v17 + 1) = **a4;
  *v18 = 0;
  v18[1] = 0;
  v17[5] = 0;
  v17[6] = 0;
  v17[4] = 0;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v15 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C20E390((uint64_t)v28, 0);
  return v15;
}

void sub_20C20EA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C20E390((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C20EA6C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20C20ED30(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C20EDD0((uint64_t)&v26, 0);
  return i;
}

void sub_20C20ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C20EDD0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C20ED30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C20EDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C20EDD0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C20EDD0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C20D278((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C20EE14(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20BEB5714(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C20EE60((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_20C20EE60(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C20D1A8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C20EEA4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v8 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v10 = bswap64(v8);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_20BEB560C((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = operator new(0x38uLL);
  v31[0] = v17;
  v31[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v17[2] = **a4;
  v19 = v18[1];
  v17[3] = v19;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v17[5] = 0;
  v17[6] = 0;
  v17[4] = v17 + 5;
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    sub_20BDEC6E0(a1, v27);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v31[0] = *v28;
    *v28 = v31[0];
  }
  else
  {
    *(_QWORD *)v31[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v31[0])
    {
      v29 = *(_QWORD *)(*(_QWORD *)v31[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11)
          v29 %= v11;
      }
      else
      {
        v29 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v31[0];
    }
  }
  v15 = (_QWORD *)v31[0];
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C20EE60((uint64_t)v31, 0);
  return v15;
}

void sub_20C20F154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C20EE60((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C20F16C(uint64_t *a1, const void **a2, const void ***a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C10486C(a1, a2, a3);
  return a1;
}

void sub_20C20F1A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

const void **sub_20C20F1B8(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  const void **v4;
  unint64_t v7;
  const void **v8;
  _BOOL4 v9;

  v4 = a1;
  if (a2 != a1)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
    do
    {
      v8 = &v4[3 * (v7 >> 1)];
      v9 = sub_20BDDDF74(a4, v8, a3);
      if (v9)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v9)
        v4 = v8 + 3;
    }
    while (v7);
  }
  return v4;
}

_QWORD *sub_20C20F24C(_QWORD *result, __int128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = result;
  v4 = result[2];
  if (v4 == result[3])
  {
    v5 = (__int128 *)result[1];
    if ((unint64_t)v5 <= *result)
    {
      v11 = v4 - *result;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v15 = result[4];
      v32 = v3[4];
      v16 = (char *)sub_20BDE4FF4(v15, v13);
      v18 = &v16[24 * v14];
      v19 = v3[1];
      v20 = v3[2] - v19;
      if (v20)
      {
        v21 = v20 / 24;
        v22 = &v18[24 * v21];
        v23 = 24 * v21;
        v24 = &v16[24 * v14];
        do
        {
          v25 = *(_OWORD *)v19;
          *((_QWORD *)v24 + 2) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)v24 = v25;
          v24 += 24;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = 0;
          v19 += 24;
          v23 -= 24;
        }
        while (v23);
        v26 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v26 = vdupq_n_s64(v19);
        v22 = &v16[24 * v14];
      }
      v29 = *v3;
      *v3 = v16;
      v3[1] = v18;
      v30 = v26;
      v27 = v3[3];
      v3[2] = v22;
      v3[3] = &v16[24 * v17];
      v31 = v27;
      result = (_QWORD *)sub_20BDF3648((uint64_t)&v29);
      v4 = v3[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      result = sub_20C07F91C((uint64_t)&v29, v5, (__int128 *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      v4 = v9;
      v3[1] += 8 * v8;
      v3[2] = v9;
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_20BDDBFAC((_BYTE *)v4, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v28 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v28;
  }
  v3[2] += 24;
  return result;
}

pxrInternal__aapl__pxrReserved__ **pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression *MapToRoot;
  char *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v9;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__ *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v14;
  pxrInternal__aapl__pxrReserved__ *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (*(_DWORD *)(a2 + 48) >= 0x10000u)
  {
    v17 = (pxrInternal__aapl__pxrReserved__ *)"pcp/primIndex_Graph.cpp";
    v18 = "SetArc";
    v19 = 91;
    v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "static_cast<size_t>(arc.siblingNumAtOrigin) <= ((1lu << _nodeIndexSize) - 1)", 0);
  }
  if (*(_DWORD *)(a2 + 52) >= 0x10000u)
  {
    v17 = (pxrInternal__aapl__pxrReserved__ *)"pcp/primIndex_Graph.cpp";
    v18 = "SetArc";
    v19 = 93;
    v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "static_cast<size_t>(arc.namespaceDepth) <= ((1lu << _depthSize) - 1)", 0);
  }
  if ((unint64_t)(*(_QWORD *)(a2 + 16) + 1) >= 0x10000)
  {
    v17 = (pxrInternal__aapl__pxrReserved__ *)"pcp/primIndex_Graph.cpp";
    v18 = "SetArc";
    v19 = 95;
    v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "arc.parent._GetNodeIndex() + 1 <= _invalidNodeIndex", 0);
  }
  if ((unint64_t)(*(_QWORD *)(a2 + 32) + 1) >= 0x10000)
  {
    v17 = (pxrInternal__aapl__pxrReserved__ *)"pcp/primIndex_Graph.cpp";
    v18 = "SetArc";
    v19 = 96;
    v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "arc.origin._GetNodeIndex() + 1 <= _invalidNodeIndex", 0);
  }
  *(_BYTE *)(a1 + 40) = *(_DWORD *)a2;
  *(_WORD *)(a1 + 36) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 38) = *(_DWORD *)(a2 + 52);
  v4 = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 26) = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a2 + 8) || v4 == -1)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v16);
    v11 = v16;
    v13 = *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
    v12 = a1 + 8;
    v16 = 0;
    v17 = v13;
    *(_QWORD *)v12 = v11;
    sub_20C211C74(&v17, v14);
    sub_20C211C28((pxrInternal__aapl__pxrReserved__ **)(v12 + 8), (uint64_t *)v12);
  }
  else
  {
    sub_20C211C28((pxrInternal__aapl__pxrReserved__ **)(a1 + 16), (uint64_t *)(a2 + 40));
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a2 + 8));
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(MapToRoot, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)(a1 + 16), v6, &v16);
    v7 = v16;
    v8 = *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
    v16 = 0;
    v17 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    sub_20C211C74(&v17, v9);
  }
  return sub_20C211C74(&v16, v10);
}

void sub_20C20F5EC(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__ *a9)
{
  sub_20C211C74(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New@<X0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2@<X1>, pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a3@<X8>)
{
  int v3;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v6;
  uint64_t result;
  uint64_t v9;
  int v10;

  v3 = (int)a2;
  sub_20BEB59B0((uint64_t)&v9, (uint64_t)"Pcp", (uint64_t)"PcpPrimIndex_Graph");
  v6 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)operator new(0x40uLL);
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::PcpPrimIndex_Graph(v6, this, v3);
  *a3 = v6;
  while (v10--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v9);
  return result;
}

void sub_20C20F684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t result;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"Pcp", (uint64_t)"PcpPrimIndex_Graph");
  v4 = operator new(0x40uLL);
  result = sub_20C211CA4((uint64_t)v4, *a1);
  *a2 = v4;
  while (v8--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return result;
}

void sub_20C20F72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::PcpPrimIndex_Graph(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2, int a3)
{
  _QWORD *v6;
  char v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v9;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v10;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v11;
  pxrInternal__aapl__pxrReserved__ *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__ *v19[2];
  pxrInternal__aapl__pxrReserved__ *v20;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &unk_24C52B778;
  v6 = operator new(0x30uLL);
  v6[2] = 0;
  *v6 = &unk_24C52B7B0;
  v6[1] = 0;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v6 + 3;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a3)
    v7 = 8;
  else
    v7 = 0;
  *((_BYTE *)this + 56) = *((_BYTE *)this + 56) & 0xF0 | v7;
  v15 = 0;
  v16 = -1;
  v17 = 0;
  v18 = -1;
  v14 = 0;
  v19[0] = 0;
  v19[1] = 0;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v13);
  v8 = v13;
  v13 = 0;
  v20 = v19[0];
  v19[0] = v8;
  sub_20C211C74(&v20, v9);
  sub_20C211C74(&v13, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNode((uint64_t)this, (uint64_t *)a2, (uint64_t)&v14);
  sub_20C211C74(v19, v11);
  return this;
}

void sub_20C20F858(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__ **v12;
  void **v13;

  sub_20C211C74(v12, a2);
  a11 = v13;
  sub_20C211F88(&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v11 + 16));
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase((pxrInternal__aapl__pxrReserved__::TfSimpleRefBase *)v11);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;

  v6 = a2 + 1;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 >= *(_QWORD *)(a1 + 48))
  {
    v8 = sub_20C212E3C((uint64_t *)(a1 + 32), v6);
  }
  else
  {
    sub_20C212F40(*(_QWORD *)(a1 + 40), v6);
    v8 = v7 + 12;
    *(_QWORD *)(a1 + 40) = v7 + 12;
  }
  *(_QWORD *)(a1 + 40) = v8;
  sub_20C2117A8(*(uint64_t **)(a1 + 16));
  *(_BYTE *)(a1 + 56) &= ~4u;
  v9 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*(v9 - 6);
  v9 -= 6;
  *v9 = *a2;
  sub_20BF1DD04(a2);
  sub_20BF1D8F4((int)v9, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc((uint64_t)v9, a3);
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 4) - 1;
}

void sub_20C20F96C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(uint64_t this, char a2)
{
  *(_BYTE *)(this + 56) = *(_BYTE *)(this + 56) & 0xFE | a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::HasPayloads(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  return *((_BYTE *)this + 56) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetIsInstanceable(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 56) = *(_BYTE *)(this + 56) & 0xFD | v2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::IsInstanceable(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  return (*((unsigned __int8 *)this + 56) >> 1) & 1;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  ;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeUsingSite(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = **(_QWORD **)(result + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v4 = v3 - v2;
  if (v3 == v2)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = v4 / 48;
  v10 = *a2;
  v9 = a2[1];
  while (1)
  {
    if ((*(_BYTE *)(v2 + 42) & 2) == 0)
    {
      v11 = *(_QWORD *)(result + 32) + v6;
      if ((*(_BYTE *)(v11 + 10) & 2) == 0 && *(_QWORD *)v2 == v10 && *(_QWORD *)v11 == v9)
        break;
    }
    ++v7;
    v2 += 48;
    v6 += 12;
    if (v8 == v7)
      return 0;
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int i;
  int v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if ((*(_BYTE *)(a1 + 56) & 4) == 0)
  {
    v18 = "pcp/primIndex_Graph.cpp";
    v19 = "GetNodeIndexesForRange";
    v20 = 253;
    v21 = "std::pair<size_t, size_t> pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(PcpRangeType) const";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "_finalized", 0);
  }
  v4 = **(_QWORD **)(a1 + 16);
  v5 = (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - v4) >> 4;
  v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  v7 = a2;
  switch(a2)
  {
    case 0u:
      return v7;
    case 6u:
      return 0;
    case 7u:
      return 1;
    case 8u:
      v12 = *(unsigned __int16 *)(v4 + 28);
      if (v12 == 0xFFFF)
        return 0;
      while (*(_BYTE *)(v4 + 48 * v12 + 40) != 5)
      {
        v12 = *(unsigned __int16 *)(v4 + 48 * v12 + 34);
        if (v12 == 0xFFFF)
          return 0;
      }
      return 0;
    case 9u:
      v18 = "pcp/primIndex_Graph.cpp";
      v19 = "GetNodeIndexesForRange";
      v20 = 259;
      v21 = "std::pair<size_t, size_t> pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(PcpRangeType) const";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid range type specified");
      return v6;
    default:
      v8 = *(unsigned __int16 *)(v4 + 28);
      v7 = 0xAAAAAAAAAAAAAAABLL * v5;
      if (v8 == 0xFFFF)
        return v7;
      break;
  }
  while (1)
  {
    v9 = *(unsigned __int8 *)(v4 + 48 * v8 + 40);
    if (a2 >= 6)
    {
      v18 = "pcp/primIndex_Graph.cpp";
      v19 = "_GetArcTypeForRangeType";
      v20 = 241;
      v21 = "PcpArcType pxrInternal__aapl__pxrReserved__::_GetArcTypeForRangeType(const PcpRangeType)";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled range type");
      v10 = 0;
    }
    else
    {
      v10 = dword_20CAC314C[a2];
    }
    v7 = v8;
    v11 = *(uint64_t **)(a1 + 16);
    if (v10 == v9)
      break;
    v4 = *v11;
    v8 = *(unsigned __int16 *)(*v11 + 48 * v8 + 34);
    if (v8 == 0xFFFF)
      return 0xAAAAAAAAAAAAAAABLL * ((v11[1] - v4) >> 4);
  }
  v14 = *v11;
  for (i = *(unsigned __int16 *)(*v11 + 48 * v8 + 34); i != 0xFFFF; i = *(unsigned __int16 *)(v14 + 48 * i + 34))
  {
    v16 = *(unsigned __int8 *)(v14 + 48 * i + 40);
    if (a2 >= 6)
    {
      v18 = "pcp/primIndex_Graph.cpp";
      v19 = "_GetArcTypeForRangeType";
      v20 = 241;
      v21 = "PcpArcType pxrInternal__aapl__pxrReserved__::_GetArcTypeForRangeType(const PcpRangeType)";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled range type");
      v17 = 0;
    }
    else
    {
      v17 = dword_20CAC314C[a2];
    }
    if (v17 != v16)
      break;
    v14 = **(_QWORD **)(a1 + 16);
  }
  return v7;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexForNode(uint64_t a1, _QWORD *a2)
{
  if (*a2 == a1)
    return a2[1];
  else
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 4);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForSubtreeRange(uint64_t a1, _QWORD *a2)
{
  unint64_t result;
  uint64_t v4;
  unint64_t v5;

  if (*a2 != a1)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 4);
  result = a2[1];
  v4 = **(_QWORD **)(a1 + 16);
  v5 = result;
  do
    v5 = *(unsigned __int16 *)(v4 + 48 * v5 + 30);
  while (v5 != 0xFFFF);
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::Finalize(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  char *v2;
  char *v3;
  void *__p;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 56) & 4) == 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMapping((uint64_t)this, (uint64_t *)&v7) & 1) == 0)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(this, (char **)&v7, v2);
    __p = 0;
    v5 = 0;
    v6 = 0;
    if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeEraseCulledNodeIndexMapping(this, &__p))
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(this, (char **)&__p, v3);
    *((_BYTE *)this + 56) |= 4u;
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_20C20FE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMapping(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;

  sub_20BDFC880((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 4));
  v5 = 0;
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMappingRecursively(a1, 0, &v5, a2);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, char **a2, char *a3)
{
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _WORD *v29;
  int v30;
  uint64_t v31;
  _WORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  _WORD *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  const char *v80;
  char v81;
  void **v82;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(a1, (uint64_t)a2, a3);
  v74 = (uint64_t *)*((_QWORD *)a1 + 2);
  v75 = a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 4);
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 2))
  {
    *(_QWORD *)&v78 = "pcp/primIndex_Graph.cpp";
    *((_QWORD *)&v78 + 1) = "_ApplyNodeIndexMapping";
    v79 = 376;
    v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
    v81 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "oldNodes.size() == oldUnshared.size()", 0);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 4);
  }
  v7 = *a2;
  v6 = a2[1];
  if (v5 != (v6 - *a2) >> 3)
  {
    *(_QWORD *)&v78 = "pcp/primIndex_Graph.cpp";
    *((_QWORD *)&v78 + 1) = "_ApplyNodeIndexMapping";
    v79 = 377;
    v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
    v81 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "nodeIndexMap.size() == oldNodes.size()", 0);
    v7 = *a2;
    v6 = a2[1];
  }
  if (v7 == v6)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 4);
    v13 = v14;
  }
  else
  {
    v8 = 0;
    v9 = v7;
    do
    {
      v10 = *(_QWORD *)v9;
      v9 += 8;
      if (v10 == 0xFFFF)
        ++v8;
    }
    while (v9 != v6);
    v12 = *v74;
    v11 = v74[1];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *v74) >> 4);
    v14 = v13 - v8;
    if (v13 < v8)
    {
      *(_QWORD *)&v78 = "pcp/primIndex_Graph.cpp";
      *((_QWORD *)&v78 + 1) = "_ApplyNodeIndexMapping";
      v79 = 385;
      v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
      v81 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "newNumNodes <= oldNumNodes", 0);
      v7 = *a2;
      v6 = a2[1];
      v8 = 1;
    }
    v15 = v6 - v7;
    if (v15)
    {
      v16 = 0;
      v17 = v15 >> 3;
      do
      {
        v18 = *(_QWORD *)&(*a2)[8 * v16];
        if (v18 >= v14 && v18 != 0xFFFF)
        {
          *(_QWORD *)&v78 = "pcp/primIndex_Graph.cpp";
          *((_QWORD *)&v78 + 1) = "_ConvertOldToNewIndex";
          v79 = 393;
          v80 = "pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &"
                ")::_ConvertOldToNewIndex::_ConvertOldToNewIndex(const std::vector<size_t> &, size_t)";
          v81 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "_table[i] < numNewNodes || _table[i] == _Node::_invalidNodeIndex", 0);
        }
        ++v16;
      }
      while (v17 != v16);
    }
    if (v8)
    {
      if (v11 != v12)
      {
        v20 = 0;
        v21 = 0;
        v22 = (uint64_t *)*((_QWORD *)v75 + 2);
        while (1)
        {
          if (v21 == 0xFFFF)
          {
            v23 = *v22;
          }
          else
          {
            v23 = *v22;
            if (*(_QWORD *)&(*a2)[8 * v21] != 0xFFFFLL)
            {
              v34 = *(unsigned __int16 *)(v23 + v20 + 24);
              if (v34 != 0xFFFF && *(_QWORD *)&(*a2)[8 * v34] == 0xFFFFLL)
              {
                *(_QWORD *)&v78 = "pcp/primIndex_Graph.cpp";
                *((_QWORD *)&v78 + 1) = "_ApplyNodeIndexMapping";
                v79 = 431;
                v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
                v81 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "!parentWillBeErased", 0);
              }
              goto LABEL_37;
            }
          }
          v24 = (unsigned __int16 *)(v23 + v20);
          v25 = *(unsigned __int16 *)(v23 + v20 + 32);
          if (v25 != 0xFFFF)
            *(_WORD *)(v23 + 48 * *(unsigned __int16 *)(v23 + v20 + 32) + 34) = v24[17];
          v26 = v24[17];
          if (v26 != 0xFFFF)
            *(_WORD *)(v23 + 48 * v24[17] + 32) = v25;
          v27 = v24[12];
          v28 = v23 + 48 * v24[12];
          v30 = *(unsigned __int16 *)(v28 + 28);
          v29 = (_WORD *)(v28 + 28);
          if (v21 == v30)
            *v29 = v26;
          v31 = v23 + 48 * v27;
          v33 = *(unsigned __int16 *)(v31 + 30);
          v32 = (_WORD *)(v31 + 30);
          if (v21 == v33)
            *v32 = v24[16];
LABEL_37:
          ++v21;
          v20 += 48;
          if (v13 == v21)
            goto LABEL_41;
        }
      }
      v13 = 0;
    }
  }
LABEL_41:
  sub_20C212070(&v78, v14);
  sub_20C2121A8(&v76, v14);
  if (v13)
  {
    v35 = 0;
    v36 = 0;
    for (i = 0; i != v13; ++i)
    {
      if (i != 0xFFFF)
      {
        v38 = *(_QWORD *)&(*a2)[8 * i];
        if (v38 != 0xFFFF)
        {
          v39 = v78;
          v40 = v78 + 48 * v38;
          sub_20C210864((uint64_t *)v40, (uint64_t *)(*v74 + v36));
          v43 = *(unsigned __int16 *)(v40 + 24);
          v42 = (_WORD *)(v40 + 24);
          v41 = v43;
          LOWORD(v44) = -1;
          if (v43 != 0xFFFFLL)
            v44 = *(_QWORD *)&(*a2)[8 * v41];
          *v42 = v44;
          v45 = v39 + 48 * v38;
          v48 = *(unsigned __int16 *)(v45 + 26);
          v46 = (_WORD *)(v45 + 26);
          v47 = v48;
          LOWORD(v49) = -1;
          if (v48 != 0xFFFFLL)
            v49 = *(_QWORD *)&(*a2)[8 * v47];
          *v46 = v49;
          v50 = v39 + 48 * v38;
          v53 = *(unsigned __int16 *)(v50 + 28);
          v51 = (_WORD *)(v50 + 28);
          v52 = v53;
          LOWORD(v49) = -1;
          if (v53 != 0xFFFFLL)
            v49 = *(_QWORD *)&(*a2)[8 * v52];
          *v51 = v49;
          v54 = v39 + 48 * v38;
          v57 = *(unsigned __int16 *)(v54 + 30);
          v55 = (_WORD *)(v54 + 30);
          v56 = v57;
          LOWORD(v49) = -1;
          if (v57 != 0xFFFFLL)
            v49 = *(_QWORD *)&(*a2)[8 * v56];
          *v55 = v49;
          v58 = v39 + 48 * v38;
          v61 = *(unsigned __int16 *)(v58 + 32);
          v59 = (_WORD *)(v58 + 32);
          v60 = v61;
          LOWORD(v49) = -1;
          if (v61 != 0xFFFFLL)
            v49 = *(_QWORD *)&(*a2)[8 * v60];
          *v59 = v49;
          v62 = v39 + 48 * v38;
          v65 = *(unsigned __int16 *)(v62 + 34);
          v63 = (_WORD *)(v62 + 34);
          v64 = v65;
          LOWORD(v49) = -1;
          if (v65 != 0xFFFFLL)
            v49 = *(_QWORD *)&(*a2)[8 * v64];
          *v63 = v49;
          v66 = *((_QWORD *)v75 + 4) + v35;
          v67 = v76 + 12 * v38;
          sub_20C01A074((int *)v67, (_DWORD *)v66);
          sub_20C01A0C8((int *)(v67 + 4), (_DWORD *)(v66 + 4));
          v68 = *(_BYTE *)(v66 + 10);
          *(_WORD *)(v67 + 8) = *(_WORD *)(v66 + 8);
          *(_BYTE *)(v67 + 10) = v68;
        }
      }
      v36 += 48;
      v35 += 12;
    }
  }
  v69 = (__int128 *)*((_QWORD *)v75 + 2);
  v70 = *v69;
  *v69 = v78;
  v78 = v70;
  v71 = *((_QWORD *)v69 + 2);
  *((_QWORD *)v69 + 2) = v79;
  v79 = v71;
  v72 = *((_OWORD *)v75 + 2);
  *((_OWORD *)v75 + 2) = v76;
  v76 = v72;
  v73 = *((_QWORD *)v75 + 6);
  *((_QWORD *)v75 + 6) = v77;
  v77 = v73;
  v82 = (void **)&v76;
  sub_20C211F88(&v82);
  *(_QWORD *)&v76 = &v78;
  sub_20C212108((void ***)&v76);
}

void sub_20C2104B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C212108((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeEraseCulledNodeIndexMapping(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  void *__p;
  unint64_t v40;
  char *v41;
  int v42;
  _QWORD *v43;
  int v44;

  v4 = (uint64_t *)a1[2];
  v6 = *v4;
  v5 = v4[1];
  v7 = (unsigned __int128)((v5 - *v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  sub_20C213784(&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - a1[4]) >> 2));
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 - v9;
  if (v8 != v9)
  {
    v11 = 0;
    v12 = v10 / 12;
    v13 = __p;
    v14 = (char *)(v9 + 10);
    do
    {
      v15 = *v14;
      v14 += 12;
      v16 = v11 >> 6;
      v17 = 1 << v11;
      if ((v15 & 2) != 0)
        v18 = v13[v16] | v17;
      else
        v18 = v13[v16] & ~v17;
      v13[v16] = v18;
      ++v11;
    }
    while (v12 != v11);
  }
  v19 = (v7 >> 3) + ((unint64_t)v7 >> 63);
  v20 = __p;
  if (v5 != v6)
  {
    v21 = 0;
    v22 = *(_QWORD *)a1[2];
    if (v19 <= 1)
      v23 = 1;
    else
      v23 = v19;
    do
    {
      if (*(__int16 *)(v22 + 48 * v21 + 26) != -1)
      {
        v24 = 0;
        v25 = v21;
        do
        {
          v26 = (1 << v25) & *(_QWORD *)((char *)v20 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8));
          v27 = (v26 == 0) | v24;
          if (v26 && (v24 & 1) != 0)
          {
            if (v25 != 0xFFFF)
            {
              for (i = v25; i != 0xFFFF; i = *(unsigned __int16 *)(v22 + 48 * i + 24))
              {
                v29 = v20[i >> 6];
                if ((v29 & (1 << i)) == 0)
                  break;
                v20[i >> 6] = v29 & ~(1 << i);
              }
            }
            v27 = v24;
          }
          v30 = v22 + 48 * v25;
          v25 = *(unsigned __int16 *)(v30 + 26);
          v31 = *(unsigned __int16 *)(v30 + 24);
          v24 = v27;
        }
        while ((_DWORD)v25 != v31);
      }
      ++v21;
    }
    while (v21 != v23);
    v20 = __p;
  }
  v38 = 1;
  v43 = v20;
  v44 = 0;
  v41 = (char *)&v20[v40 >> 6];
  v42 = v40 & 0x3F;
  v32 = sub_20C213828((uint64_t *)&v43, (uint64_t)&v41, &v38);
  if (v32)
  {
    sub_20BDFC880((uint64_t)a2, v19);
    v33 = (char *)__p;
    if (v5 != v6)
    {
      v34 = 0;
      v35 = 0;
      if (v19 <= 1)
        v36 = 1;
      else
        v36 = v19;
      do
      {
        if (((*(_QWORD *)&v33[(v34 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v34) & 1) != 0)
        {
          *(_QWORD *)(*a2 + 8 * v34) = 0xFFFFLL;
          ++v35;
        }
        else
        {
          *(_QWORD *)(*a2 + 8 * v34) = v34 - v35;
        }
        ++v34;
      }
      while (v36 != v34);
      goto LABEL_35;
    }
  }
  else
  {
    v33 = (char *)__p;
  }
  if (v33)
LABEL_35:
    operator delete(v33);
  return v32 != 0;
}

void sub_20C21073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t **v4;
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  _QWORD *v15;
  int v16;

  v3 = *((_QWORD *)this + 3);
  if (!v3 || *(_QWORD *)(v3 + 8))
  {
    v4 = (uint64_t **)((char *)this + 16);
    v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if ((v5 & 1) != 0)
    {
      v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_DetachSharedNodePool", 0, a3);
      v7 = v6 != 0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v15 = v6;
    v16 = v7;
    sub_20C212284(*v4, &v14);
    sub_20BDE82DC((uint64_t)v4, &v14);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v16--;
    if (v11)
    {
      v12 = (uint64_t)v15;
      v13 = v11 - 2;
      do
      {
        pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
        v16 = v13--;
      }
      while (v13 != -2);
    }
  }
}

void sub_20C21084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C210864(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;

  v4 = *a1;
  *a1 = 0;
  *a1 = *a2;
  *a2 = v4;
  v11 = 0;
  sub_20BF1D8F4((int)a2, 0);
  result = sub_20C2012CC(&v11);
  v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  v7 = a1[2];
  a1[2] = a2[2];
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a1 + 8);
  v8 = a1[3];
  v9 = *((_DWORD *)a2 + 8);
  a1[3] = a2[3];
  *((_DWORD *)a1 + 8) = v9;
  a2[3] = v8;
  *((_DWORD *)a2 + 8) = v7;
  v10 = *(uint64_t *)((char *)a1 + 36);
  *(uint64_t *)((char *)a1 + 36) = *(uint64_t *)((char *)a2 + 36);
  *(uint64_t *)((char *)a2 + 36) = v10;
  return result;
}

void sub_20C210908(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20BDC12F4(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::AppendChildNameToAllSites(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  int *v4;
  int *i;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  int v8;
  int v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v10);
  v4 = (int *)*((_QWORD *)this + 4);
  for (i = (int *)*((_QWORD *)this + 5); v4 != i; v4 += 3)
  {
    if (*(_QWORD *)v4 == v10)
    {
      sub_20C01A074(v4, a2);
      sub_20C01A0C8(v4 + 1, (_DWORD *)a2 + 1);
    }
    else
    {
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v4, NameToken, &v8);
      sub_20BFD3EBC(v4, &v8);
      sub_20BFD3F10(v4 + 1, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
      sub_20BFD265C(&v8);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  return sub_20BFD265C(&v10);
}

void sub_20C210A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *inserted)
{
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t Node;
  __int128 v19;
  uint64_t v20;
  const char *v21;
  char v22;
  uint64_t v23;
  int v24;

  sub_20BEB59B0((uint64_t)&v23, (uint64_t)"Pcp", (uint64_t)"PcpPrimIndex_Graph");
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)&v19 = "pcp/primIndex_Graph.cpp";
    *((_QWORD *)&v19 + 1) = "InsertChildNode";
    v20 = 512;
    v21 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(const PcpNodeRef &, const Pcp"
          "LayerStackSite &, const PcpArc &, PcpErrorBasePtr *)";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "arc.type != PcpArcTypeRoot", 0);
  }
  if (*(_QWORD *)(a4 + 16) != a2[1] || *(_QWORD *)(a4 + 8) != *a2)
  {
    *(_QWORD *)&v19 = "pcp/primIndex_Graph.cpp";
    *((_QWORD *)&v19 + 1) = "InsertChildNode";
    v20 = 513;
    v21 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(const PcpNodeRef &, const Pcp"
          "LayerStackSite &, const PcpArc &, PcpErrorBasePtr *)";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "arc.parent == parent", 0);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) - **((_QWORD **)a1 + 2)) >> 4) >= 0xFFFF)
  {
    if (!inserted)
      goto LABEL_21;
    pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New(2, &v19);
    sub_20BDE82DC((uint64_t)inserted, &v19);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
      goto LABEL_18;
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_16;
  }
  if (*(int *)(a4 + 52) < 0x10000)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePoolForNewNodes(a1, 0xFFFFFFFFFFFFFFFFLL, v10);
    v15 = a2[1];
    Node = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNode((uint64_t)a1, a3, a4);
    inserted = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(a1, v15, Node);
    goto LABEL_21;
  }
  if (inserted)
  {
    pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New(4, &v19);
    sub_20BDE82DC((uint64_t)inserted, &v19);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
    {
LABEL_18:
      inserted = 0;
      goto LABEL_21;
    }
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v14);
    while (__stlxr(v13 - 1, v14));
LABEL_16:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_18;
  }
LABEL_21:
  while (v24--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v23);
  return inserted;
}

void sub_20C210C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePoolForNewNodes(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, unint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t **v5;
  unsigned __int8 v6;
  _QWORD *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  int v22;

  v4 = *((_QWORD *)this + 3);
  if (!v4 || *(_QWORD *)(v4 + 8))
  {
    v5 = (uint64_t **)((char *)this + 16);
    v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if ((v6 & 1) != 0)
    {
      v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_DetachSharedNodePoolForNewNodes", 0, a3);
      v8 = v7 != 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v21 = v7;
    v22 = v8;
    v10 = **v5;
    v9 = (*v5)[1];
    v11 = operator new(0x30uLL);
    v11[2] = 0;
    *v11 = &unk_24C52B7B0;
    v11[1] = 0;
    v11[4] = 0;
    v11[5] = 0;
    v11[3] = 0;
    v19 = v11 + 3;
    v20 = (std::__shared_weak_count *)v11;
    v12 = (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 4)) >> 2;
    if (v12 <= 1)
      v12 = 1;
    if (a2 != -1)
      v12 = a2;
    sub_20C2116F8(v11 + 3, v12 - 0x5555555555555555 * ((v9 - v10) >> 4));
    sub_20C21291C(v19, *v19, **v5, (*v5)[1], 0xAAAAAAAAAAAAAAABLL * (((*v5)[1] - **v5) >> 4));
    sub_20BDE881C(v5, (uint64_t *)&v19);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v22--;
    if (v16)
    {
      v17 = (uint64_t)v21;
      v18 = v16 - 2;
      do
      {
        pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
        v22 = v18--;
      }
      while (v18 != -2);
    }
  }
}

void sub_20C210DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BEB24F4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v9;
  _WORD *v10;
  unsigned int v11;
  _BOOL4 v12;
  uint64_t v13;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v14;
  _WORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;

  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4) <= a2)
  {
    v37 = "pcp/primIndex_Graph.cpp";
    v38 = "_InsertChildInStrengthOrder";
    v39 = 577;
    v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
    v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "parentNodeIdx < _GetNumNodes()", 0);
    v6 = (uint64_t *)*((_QWORD *)this + 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4) <= a3)
  {
    v37 = "pcp/primIndex_Graph.cpp";
    v38 = "_InsertChildInStrengthOrder";
    v39 = 578;
    v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
    v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "childNodeIdx < _GetNumNodes()", 0);
    v6 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v7 = *v6;
  v36 = this;
  v8 = v7 + 48 * a2;
  v11 = *(unsigned __int16 *)(v8 + 28);
  v10 = (_WORD *)(v8 + 28);
  v9 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v11;
  if (v11 == 0xFFFFLL)
  {
    v19 = v7 + 48 * a2;
    v21 = *(__int16 *)(v19 + 30);
    v20 = (_WORD *)(v19 + 30);
    if (v21 != -1)
    {
      v37 = "pcp/primIndex_Graph.cpp";
      v38 = "_InsertChildInStrengthOrder";
      v39 = 588;
      v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
      v41 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "LAST_CHILD(parentNode) == _Node::_invalidNodeIndex", 0);
    }
    *v20 = a3;
    goto LABEL_13;
  }
  v12 = sub_20C211628(&v36, a3, v9);
  v13 = v7 + 48 * a2;
  v16 = *(unsigned __int16 *)(v13 + 30);
  v15 = (_WORD *)(v13 + 30);
  v14 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16;
  if (v12)
  {
    if ((_DWORD)v14 == 0xFFFF)
    {
      v37 = "pcp/primIndex_Graph.cpp";
      v38 = "_InsertChildInStrengthOrder";
      v39 = 595;
      v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
      v41 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "LAST_CHILD(parentNode) != _Node::_invalidNodeIndex", 0);
    }
    v17 = (unsigned __int16)*v10;
    v18 = *v6;
    *(_WORD *)(v7 + 48 * a3 + 34) = v17;
    *(_WORD *)(v18 + 48 * v17 + 32) = a3;
LABEL_13:
    *v10 = a3;
    return this;
  }
  if (sub_20C211628(&v36, a3, v14))
  {
    v23 = (unsigned __int16)*v10;
    if (v23 != 0xFFFF)
    {
      while (1)
      {
        v24 = v23;
        v25 = sub_20C211628(&v36, a3, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23);
        v26 = *v6;
        if (v25)
          break;
        v23 = *(unsigned __int16 *)(v26 + 48 * v24 + 34);
        if (v23 == 0xFFFF)
          return this;
      }
      v29 = v26 + 48 * v24;
      v32 = *(unsigned __int16 *)(v29 + 32);
      v30 = (unsigned __int16 *)(v29 + 32);
      v31 = v32;
      if (v32 == 0xFFFF)
      {
        v37 = "pcp/primIndex_Graph.cpp";
        v38 = "_InsertChildInStrengthOrder";
        v39 = 616;
        v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
        v41 = 0;
        v35 = v30;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "PREV_SIBLING(nextNode) != _Node::_invalidNodeIndex", 0);
        v30 = v35;
        v31 = *v35;
      }
      v33 = *v6;
      v34 = v7 + 48 * a3;
      *(_WORD *)(v34 + 32) = v31;
      *(_WORD *)(v34 + 34) = v24;
      *v30 = a3;
      *(_WORD *)(v33 + 48 * v31 + 34) = a3;
    }
  }
  else
  {
    v27 = (unsigned __int16)*v15;
    v28 = *v6;
    *(_WORD *)(v7 + 48 * a3 + 32) = v27;
    *(_WORD *)(v28 + 48 * v27 + 34) = a3;
    *v15 = a3;
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *inserted;
  uint64_t v19;
  unint64_t v20;
  unint64_t NodesForSubgraph;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t v28;
  int v29;

  sub_20BEB59B0((uint64_t)&v28, (uint64_t)"Pcp", (uint64_t)"PcpPrimIndex_Graph");
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)&v24 = "pcp/primIndex_Graph.cpp";
    *((_QWORD *)&v24 + 1) = "InsertChildSubgraph";
    v25 = 549;
    v26 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(const PcpNodeRef &, const"
          " PcpPrimIndex_GraphRefPtr &, const PcpArc &, PcpErrorBasePtr *)";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "arc.type != PcpArcTypeRoot", 0);
  }
  if (*(_QWORD *)(a4 + 16) != a2[1] || *(_QWORD *)(a4 + 8) != *a2)
  {
    *(_QWORD *)&v24 = "pcp/primIndex_Graph.cpp";
    *((_QWORD *)&v24 + 1) = "InsertChildSubgraph";
    v25 = 550;
    v26 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(const PcpNodeRef &, const"
          " PcpPrimIndex_GraphRefPtr &, const PcpArc &, PcpErrorBasePtr *)";
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "arc.parent == parent", 0);
  }
  v10 = (uint64_t *)*((_QWORD *)a1 + 2);
  v12 = *v10;
  v11 = v10[1];
  v13 = sub_20C21137C(a3);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4)
     - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8) - **(_QWORD **)(v13 + 16)) >> 4) < 0xFFFF)
  {
    v19 = *a3;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePoolForNewNodes(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*a3 + 16) + 8) - **(_QWORD **)(*a3 + 16)) >> 4), v14);
    v20 = a2[1];
    NodesForSubgraph = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph((uint64_t)a1, v19, a4);
    inserted = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(a1, v20, NodesForSubgraph);
  }
  else
  {
    if (a5)
    {
      pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New(2, &v24);
      sub_20BDE82DC(a5, &v24);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    inserted = 0;
  }
  while (v29--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v28);
  return inserted;
}

void sub_20C211350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21137C(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC3102 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression *v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v22;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v23;
  _WORD *v24;
  char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;
  pxrInternal__aapl__pxrReserved__ *v31[2];
  pxrInternal__aapl__pxrReserved__ *v32[2];

  v32[0] = (pxrInternal__aapl__pxrReserved__ *)a2;
  v32[1] = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v32)
    && v6 != -1
    || (v31[0] = (pxrInternal__aapl__pxrReserved__ *)a2,
        v31[1] = 0,
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v31))
    && v7 != -1)
  {
    v26 = "pcp/primIndex_Graph.cpp";
    v27 = "_CreateNodesForSubgraph";
    v28 = 687;
    v29 = "size_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph(const PcpPrimIndex_Graph "
          "&, const PcpArc &)";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "!subgraph.GetRootNode().GetParentNode() && !subgraph.GetRootNode().GetOriginNode()", 0);
  }
  v8 = *(uint64_t **)(a1 + 16);
  v9 = (v8[1] - *v8) / 48;
  *(_BYTE *)(a1 + 56) &= ~4u;
  sub_20C21291C(v8, v8[1], **(_QWORD **)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) - **(_QWORD **)(a2 + 16)) >> 4));
  sub_20C2131FC((uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *v10;
  v12 = (v10[1] - *v10) / 48;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(*v10 + 48 * v9, a3);
  v26 = (char *)v9;
  v27 = (const char *)v12;
  v14 = v9 >= v12;
  v15 = v9 - v12;
  if (!v14)
  {
    v16 = 0;
    v17 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)(v11 + 48 * v9 + 8);
    v18 = 48 * v9 + 24;
    do
    {
      v19 = *v10;
      if (v16)
      {
        v20 = (_WORD *)(v19 + v18);
        pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(v17, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)(v19 + v18 - 16), v13, v31);
        v21 = v31[0];
        v31[0] = 0;
        v32[0] = *(pxrInternal__aapl__pxrReserved__ **)(v19 + v18 - 16);
        *((_QWORD *)v20 - 2) = v21;
        sub_20C211C74(v32, v22);
        sub_20C211C74(v31, v23);
        *v20 = sub_20C2118D0(&v26, *(unsigned __int16 *)(v19 + v18));
        v20[1] = sub_20C2118D0(&v26, *(unsigned __int16 *)(v19 + v18 + 2));
      }
      v24 = (_WORD *)(v19 + v18);
      v24[2] = sub_20C2118D0(&v26, (unsigned __int16)v24[2]);
      v24[3] = sub_20C2118D0(&v26, (unsigned __int16)v24[3]);
      v24[4] = sub_20C2118D0(&v26, (unsigned __int16)v24[4]);
      v24[5] = sub_20C2118D0(&v26, (unsigned __int16)v24[5]);
      --v16;
      v18 += 48;
    }
    while (v15 != v16);
  }
  return v9;
}

BOOL sub_20C211628(_QWORD *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  int v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t *String;
  const char *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  _QWORD v12[2];
  _QWORD v13[4];
  char v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v16[0] = *a1;
  v16[1] = a2;
  v15[0] = v16[0];
  v15[1] = a3;
  v4 = pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength((pxrInternal__aapl__pxrReserved__ *)v16, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v15, a3);
  if (v4)
    return v4 == -1;
  v13[0] = "pcp/primIndex_Graph.cpp";
  v13[1] = "operator()";
  v13[2] = 54;
  v13[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ArcStrengthOrder::operator()(size_t, size_t) const";
  v14 = 0;
  v12[0] = *a1;
  v12[1] = 0;
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v12);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(Path);
  v10 = *((char *)String + 23) >= 0 ? String : (uint64_t *)*String;
  v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Redundant nodes in prim index for <%s>", v8, v9, v10);
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "result != 0", v11) & 1) != 0)
    return v4 == -1;
  else
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v16, v15);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2116F8(uint64_t *a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7[5];

  v4 = a1[2];
  result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)result;
    v7[0] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_20BE6D0B4((uint64_t)result, a2);
    v7[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v7[0] + v5);
    v7[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v7[0] + v5);
    v7[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v7[0] + 48 * v6);
    sub_20C2125AC(a1, v7);
    return sub_20C212888(v7);
  }
  return result;
}

void sub_20C211794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C212888((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2117A8(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14[5];

  v4 = a1[2];
  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)(a1 + 2);
  v3 = v4;
  v5 = *((_QWORD *)v2 - 1);
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    v8 = v7 + 1;
    if (v7 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_20BE6D0B4((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = (char *)v11 + 48 * v7;
    v14[0] = v11;
    v14[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v12;
    v14[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v11 + 48 * v10);
    *(_QWORD *)(v12 + 36) = 0;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 3) = -1;
    *((_DWORD *)v12 + 8) = -1;
    v14[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)(v12 + 48);
    sub_20C2125AC(a1, v14);
    v6 = a1[1];
    sub_20C212888(v14);
  }
  else
  {
    *(_QWORD *)(v5 + 36) = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = -1;
    *(_DWORD *)(v5 + 32) = -1;
    v6 = v5 + 48;
    a1[1] = v5 + 48;
  }
  a1[1] = v6;
  return v6 - 48;
}

void sub_20C2118BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C212888((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C2118D0(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  _QWORD v5[4];
  char v6;

  result = 0xFFFFLL;
  if (a2 != 0xFFFF)
  {
    result = *a1 + a2;
    if (result >= a1[1])
    {
      v5[0] = "pcp/primIndex_Graph.cpp";
      v5[1] = "operator()";
      v5[2] = 719;
      v5[3] = "size_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph(const PcpPrimIndex_Gr"
              "aph &, const PcpArc &)::_ConvertOldToNewIndex::operator()(size_t) const";
      v6 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "oldIndex + _base < _numNewNodes", 0);
      return *a1 + a2;
    }
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, unint64_t a2, char *a3)
{
  _QWORD v6[4];
  char v7;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) - **((_QWORD **)this + 2)) >> 4) <= a2)
  {
    v6[0] = "pcp/primIndex_Graph.cpp";
    v6[1] = "_GetWriteableNode";
    v6[2] = 761;
    v6[3] = "PcpPrimIndex_Graph::_Node &pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(size_t)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "idx < _GetNumNodes()", 0);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(this, a2, a3);
  return **((_QWORD **)this + 2) + 48 * a2;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char *a3)
{
  unint64_t v4;
  _QWORD v6[4];
  char v7;

  v4 = *((_QWORD *)a2 + 1);
  if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) - **((_QWORD **)this + 2)) >> 4))
  {
    v6[0] = "pcp/primIndex_Graph.cpp";
    v6[1] = "_GetWriteableNode";
    v6[2] = 770;
    v6[3] = "PcpPrimIndex_Graph::_Node &pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(const PcpNodeRef &)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "idx < _GetNumNodes()", 0);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(this, (uint64_t)a2, a3);
  return **((_QWORD **)this + 2) + 48 * v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMappingRecursively(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  int i;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v8 = *a3;
  v9 = *a4;
  for (i = 1; ; i &= v12)
  {
    *(_QWORD *)(v9 + 8 * a2) = v8;
    v11 = *a3;
    v12 = *a3 == a2;
    v13 = **(_QWORD **)(a1 + 16);
    v14 = *(unsigned __int16 *)(v13 + 48 * a2 + 28);
    if (v14 != 0xFFFF)
    {
      *a3 = v11 + 1;
      v15 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMappingRecursively(a1, v14, a3, a4);
      if (v11 == a2)
        v12 = v15;
      else
        v12 = 0;
      v9 = *a4;
    }
    a2 = *(unsigned __int16 *)(v13 + 48 * a2 + 34);
    if (a2 == 0xFFFF)
      break;
    v8 = *a3 + 1;
    *a3 = v8;
  }
  return i & v12;
}

void sub_20C211B74(void **a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  void **v3;

  *a1 = &unk_24C52B778;
  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 2);
  v3 = a1 + 4;
  sub_20C211F88(&v3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase((pxrInternal__aapl__pxrReserved__::TfSimpleRefBase *)a1);
}

void sub_20C211BCC(void **a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  void *v3;
  void **v4;

  *a1 = &unk_24C52B778;
  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 2);
  v4 = a1 + 4;
  sub_20C211F88(&v4);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase((pxrInternal__aapl__pxrReserved__::TfSimpleRefBase *)a1);
  operator delete(v3);
}

pxrInternal__aapl__pxrReserved__ **sub_20C211C28(pxrInternal__aapl__pxrReserved__ **a1, uint64_t *a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__ *v5;

  v3 = *a2;
  if (*a2)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(*a2);
  v5 = *a1;
  *a1 = (pxrInternal__aapl__pxrReserved__ *)v3;
  sub_20C211C74(&v5, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)a2);
  return a1;
}

pxrInternal__aapl__pxrReserved__ **sub_20C211C74(pxrInternal__aapl__pxrReserved__ **a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__ *v3;

  v3 = *a1;
  if (v3)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3, a2);
  return a1;
}

uint64_t sub_20C211CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &unk_24C52B778;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20C211D5C((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

void sub_20C211D40(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase *v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C211D5C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C211DE0(result, a4);
    result = (_QWORD *)sub_20C211E30((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C211DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C211F88(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C211DE0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    sub_20BDDF694();
  result = (char *)sub_20C152228((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

uint64_t sub_20C211E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD6E54((_DWORD *)v4, (_DWORD *)v6);
      sub_20BFD6EA4((_DWORD *)(v4 + 4), (_DWORD *)(v6 + 4));
      v7 = *(_WORD *)(v6 + 8);
      *(_BYTE *)(v4 + 10) = *(_BYTE *)(v6 + 10);
      *(_WORD *)(v4 + 8) = v7;
      v4 = v12 + 12;
      v12 += 12;
      v6 += 12;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C211ED8((uint64_t)v9);
  return v4;
}

uint64_t sub_20C211ED8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C211F0C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C211F0C(uint64_t *result)
{
  _DWORD **v1;
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_DWORD **)result[2];
  v3 = *v1;
  v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 3;
      result = (uint64_t *)sub_20C211F5C(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_20C211F5C(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

void sub_20C211F88(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_20C211F5C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C21200C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C52B7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C212020(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C52B7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C212044(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  sub_20C212108(&v1);
}

_QWORD *sub_20C212070(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C02CC00(a1, a2);
    v4 = a1[1];
    v5 = v4 + 48 * a2;
    v6 = 48 * a2;
    v7 = v4 + 24;
    do
    {
      *(_QWORD *)(v7 + 12) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)v7 = -1;
      *(_DWORD *)(v7 + 8) = -1;
      v7 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2120F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C212108(&a9);
  _Unwind_Resume(a1);
}

void sub_20C212108(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C212148((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)*v2);
    operator delete(**a1);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C212148(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *i;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v5;

  v3 = result;
  for (i = result[1]; i != a2; i = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)i - 48))
  {
    sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)i - 4, a2);
    sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)i - 5, v5);
    result = sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)i - 6);
  }
  v3[1] = a2;
  return result;
}

_QWORD *sub_20C2121A8(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C211DE0(a1, a2);
    sub_20C212210(a1, a2);
  }
  return a1;
}

void sub_20C2121FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C211F88(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C212210(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *((_QWORD *)result + 1);
  if (a2)
  {
    v4 = v3 + 12 * a2;
    v5 = 12 * a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v3);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v3 + 4));
      *(_BYTE *)(v3 + 10) &= 0xF8u;
      v3 += 12;
      v5 -= 12;
    }
    while (v5);
    v3 = v4;
  }
  *((_QWORD *)v2 + 1) = v3;
  return result;
}

uint64_t sub_20C212284@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = sub_20C2122DC((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_20C2122C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2122DC(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24C52B7B0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20C212350((_QWORD *)(a1 + 24), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  return a1;
}

void sub_20C21233C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C212350(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C02CC00(result, a4);
    result = (_QWORD *)sub_20C2123D4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C2123B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C212108(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2123D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C21247C(a1, v4, v6);
      v6 += 48;
      v4 = v12 + 48;
      v12 += 48;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C21250C((uint64_t)v9);
  return v4;
}

void sub_20C212468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C21250C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C21247C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  sub_20BF1DD04((uint64_t *)a2);
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v5);
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 16) = v6;
  if (v6)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v6);
  result = *(__n128 *)(a3 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20C2124E8(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__ **v3;

  sub_20C211C74(v3, a2);
  sub_20C2012CC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21250C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C212554(*(_QWORD *)a1, **(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node ***)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C212554(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)(v6 - 32), a2);
      sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)(v6 - 40), v7);
      result = sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v6 - 48));
      v6 -= 48;
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t sub_20C2125AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C212620((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C212620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 48;
      sub_20C2126E8(a1, v7 - 48, v9);
      v7 = *((_QWORD *)&v16 + 1) - 48;
      *((_QWORD *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C212778((uint64_t)v13);
  return v11;
}

void sub_20C2126D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C212778((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C2126E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  sub_20BF1DD04((uint64_t *)a2);
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v5);
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 16) = v6;
  if (v6)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v6);
  result = *(__n128 *)(a3 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20C212754(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__ **v3;

  sub_20C211C74(v3, a2);
  sub_20C2012CC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C212778(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2127AC((uint64_t *)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2127AC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_20C212820(v4, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v14, (uint64_t)v9);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C212820(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **i;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;

  for (i = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((_QWORD *)a2 + 4);
        i != *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a3 + 32);
        *((_QWORD *)a2 + 4) = i)
  {
    sub_20C211C74(i + 2, a2);
    sub_20C211C74(i + 1, v6);
    result = sub_20C2012CC(i);
    i = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*((_QWORD *)a2 + 4) + 48);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C212888(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20C2128BC(a1, a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C2128BC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)v2 - 48);
      sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)v2 - 4, a2);
      sub_20C211C74((pxrInternal__aapl__pxrReserved__ **)v2 - 5, v5);
      result = sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2 - 6);
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_20C21291C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        v21 = a3 + 48 * a5;
      }
      else
      {
        v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_20C2123D4(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20C212B0C((uint64_t)a1, v5, v12, v5 + 48 * a5);
      sub_20C212CF8((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_20BE6D0B4(v9, v18);
      else
        v19 = 0;
      v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v19 + 48 * v15);
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = (char *)v19 + 48 * v18;
      v23 = 3 * a5;
      v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 48 * a5);
      v25 = 16 * v23;
      do
      {
        sub_20C21247C(v30, (uint64_t)v22, v7);
        v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 48);
        v7 += 48;
        v25 -= 48;
      }
      while (v25);
      v28 = v24;
      v5 = sub_20C212B90(a1, v27, v5);
      sub_20C212888(v27);
    }
  }
  return v5;
}

void sub_20C212AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C212B0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      v10 = *(_OWORD *)(v9 + 24);
      *(_DWORD *)(v8 + 40) = *(_DWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v10;
      v8 += 48;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C212C40((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_20C212B90(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C212620((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C212D94(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C212C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__ *v16;

  if (a3 != a2)
  {
    v6 = a4 - 48;
    v7 = a3;
    do
    {
      v8 = *(_QWORD *)(v7 - 48);
      v7 -= 48;
      v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6;
      *(_QWORD *)v6 = v8;
      *(_QWORD *)v7 = 0;
      sub_20BF1D8F4(v6, v9);
      v10 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      v16 = *(pxrInternal__aapl__pxrReserved__ **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = v10;
      sub_20C211C74(&v16, v11);
      v12 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      v16 = *(pxrInternal__aapl__pxrReserved__ **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = v12;
      sub_20C211C74(&v16, v13);
      v14 = *(_OWORD *)(v7 + 24);
      *(_DWORD *)(v6 + 40) = *(_DWORD *)(v7 + 40);
      *(_OWORD *)(v6 + 24) = v14;
      v6 -= 48;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_20C212CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  int v8;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a4;
    *(_QWORD *)a4 = *(_QWORD *)v5;
    sub_20BF1DD04((uint64_t *)v5);
    sub_20BF1D8F4(a4, v7);
    sub_20C211C28((pxrInternal__aapl__pxrReserved__ **)(a4 + 8), (uint64_t *)(v5 + 8));
    sub_20C211C28((pxrInternal__aapl__pxrReserved__ **)(a4 + 16), (uint64_t *)(v5 + 16));
    v8 = *(_DWORD *)(v5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 + 24);
    *(_DWORD *)(a4 + 40) = v8;
    a4 += 48;
    v5 += 48;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C212D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C2126E8(a1, v4, v6);
      v6 += 48;
      v4 = v12 + 48;
      v12 += 48;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C21250C((uint64_t)v9);
  return v4;
}

void sub_20C212E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C21250C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C212E3C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20C152228(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[12 * v4];
  v16 = &v10[12 * v9];
  sub_20C212F40((uint64_t)v14, a2);
  v15 = v14 + 12;
  sub_20C212FCC(a1, &v13);
  v11 = a1[1];
  sub_20C213188(&v13);
  return v11;
}

void sub_20C212F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C213188((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C212F40(uint64_t a1, _DWORD *a2)
{
  int v5;
  int v6;

  sub_20BFD6E54(&v5, a2);
  sub_20BFD6EA4(&v6, a2 + 1);
  sub_20BFD38A4((_DWORD *)a1, &v5);
  sub_20BFD38DC((_DWORD *)(a1 + 4), &v6);
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) &= 0xF8u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_20BFD265C(&v5);
  return a1;
}

uint64_t sub_20C212FCC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C213040((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C213040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_20BFD38A4((_DWORD *)(v7 - 12), (_DWORD *)(v9 - 12));
      sub_20BFD38DC((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      v10 = *(_WORD *)(v9 - 4);
      *(_BYTE *)(v7 - 2) = *(_BYTE *)(v9 - 2);
      *(_WORD *)(v7 - 4) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 12;
      *((_QWORD *)&v16 + 1) -= 12;
      v9 -= 12;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C213104((uint64_t)v13);
  return v11;
}

uint64_t sub_20C213104(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C213138((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C213138(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C211F5C(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C213188(void **a1)
{
  sub_20C2131B8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C2131B8(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 12;
      result = sub_20C211F5C(v4, (_DWORD *)(v1 - 12));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C2131FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 2)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 2)) >= a5)
      {
        v21 = a3 + 12 * a5;
      }
      else
      {
        v21 = a3 + 4 * ((uint64_t)(v12 - a2) >> 2);
        a1[1] = sub_20C211E30(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20C2133C0((uint64_t)a1, v5, v12, v5 + 12 * a5);
      sub_20C213660((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 2);
      if (v14 > 0x1555555555555555)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 2);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 2);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0xAAAAAAAAAAAAAAALL)
        v18 = 0x1555555555555555;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_20C152228(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[12 * v15];
      v25 = v24;
      v26 = &v19[12 * v18];
      sub_20C213494(&v23, a3, a5);
      v5 = sub_20C213524(a1, &v23, v5);
      sub_20C213188(&v23);
    }
  }
  return v5;
}

void sub_20C2133A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2133C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + 4 * ((v6 - a4) >> 2) + 4;
    v11 = v6 + 4;
    do
    {
      sub_20BFD38A4((_DWORD *)(v11 - 4), (_DWORD *)(v10 - 4));
      sub_20BFD38DC((_DWORD *)v11, (_DWORD *)v10);
      v12 = *(_WORD *)(v10 + 4);
      *(_BYTE *)(v11 + 6) = *(_BYTE *)(v10 + 6);
      *(_WORD *)(v11 + 4) = v12;
      v13 = v10 + 8;
      v10 += 12;
      v11 += 12;
    }
    while (v13 < a3);
    v8 = v11 - 4;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C2135D4((uint64_t)&v15, a2, v7, v6);
}

_DWORD *sub_20C213494(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (a3)
  {
    v5 = v4 + 12 * a3;
    v6 = v4 + 4;
    v7 = 12 * a3;
    v8 = a2 + 4;
    do
    {
      sub_20BFD6E54((_DWORD *)(v6 - 4), (_DWORD *)(v8 - 4));
      result = sub_20BFD6EA4((_DWORD *)v6, (_DWORD *)v8);
      v9 = *(_WORD *)(v8 + 4);
      *(_BYTE *)(v6 + 6) = *(_BYTE *)(v8 + 6);
      *(_WORD *)(v6 + 4) = v9;
      v6 += 12;
      v8 += 12;
      v7 -= 12;
    }
    while (v7);
  }
  else
  {
    v5 = *((_QWORD *)result + 2);
  }
  *((_QWORD *)v3 + 2) = v5;
  return result;
}

uint64_t sub_20C213524(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C213040((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C2136DC(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C2135D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      sub_20BFD3EBC((int *)(a4 + v7 - 12), (int *)(a3 + v7 - 12));
      sub_20BFD3F10((int *)(a4 + v7 - 8), (int *)(a3 + v7 - 8));
      v9 = *(_BYTE *)(a3 + v7 - 2);
      *(_WORD *)(v8 - 4) = *(_WORD *)(a3 + v7 - 4);
      *(_BYTE *)(v8 - 2) = v9;
      v7 -= 12;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_20C213660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C01A074((int *)a4, (_DWORD *)v5);
    sub_20C01A0C8((int *)(a4 + 4), (_DWORD *)(v5 + 4));
    v7 = *(_BYTE *)(v5 + 10);
    *(_WORD *)(a4 + 8) = *(_WORD *)(v5 + 8);
    *(_BYTE *)(a4 + 10) = v7;
    a4 += 12;
    v5 += 12;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C2136DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD38A4((_DWORD *)v4, (_DWORD *)v6);
      sub_20BFD38DC((_DWORD *)(v4 + 4), (_DWORD *)(v6 + 4));
      v7 = *(_WORD *)(v6 + 8);
      *(_BYTE *)(v4 + 10) = *(_BYTE *)(v6 + 10);
      *(_WORD *)(v4 + 8) = v7;
      v4 = v12 + 12;
      v12 += 12;
      v6 += 12;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C211ED8((uint64_t)v9);
  return v4;
}

_QWORD *sub_20C213784(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE6B698(a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        sub_20BE6BAB8((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_20C213828(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  if (*a3)
  {
    v6 = *a1;
    return sub_20C2138A0((uint64_t)&v6, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(_QWORD *)a2 - v3));
  }
  else
  {
    v5 = *a1;
    return sub_20C213960((uint64_t)&v5, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(_QWORD *)a2 - v3));
  }
}

uint64_t sub_20C2138A0(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2)
      v3 = a2;
    else
      v3 = (64 - v2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & **(_QWORD **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    a2 -= v3;
    *(_QWORD *)a1 += 8;
  }
  else
  {
    v5 = 0;
  }
  if (a2 >= 0x40)
  {
    v6 = *(int8x8_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(_QWORD *)a1 = v6;
  }
  if (a2)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(**(_QWORD **)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2)));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t sub_20C213960(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2)
      v3 = a2;
    else
      v3 = (64 - v2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(_QWORD **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    a2 -= v3;
    *(_QWORD *)a1 += 8;
  }
  else
  {
    v5 = 0;
  }
  if (a2 >= 0x40)
  {
    v6 = *(uint64_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(_QWORD *)a1 = v6;
  }
  if (a2)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(_QWORD **)a1));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

void sub_20C213A2C(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const char *v10;
  char *v11;
  void *locale;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  _QWORD *v29;
  const char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  _QWORD *v39;
  const char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  _QWORD *v46;
  const char *v47;
  char *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  _QWORD *v53;
  const char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  _QWORD *v60;
  const char *v61;
  char *v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  const std::locale::facet *v66;
  _QWORD *v67;
  const char *v68;
  char *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  const std::locale::facet *v73;
  _QWORD *v74;
  const char *v75;
  char *v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  const std::locale::facet *v80;
  const std::locale::facet *v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  _QWORD *v84;
  const std::locale::facet *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  const std::locale::facet *v93;
  _QWORD *v94;
  const std::locale::facet *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  std::locale v102;
  std::locale::__imp *v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD **v108;
  _QWORD *v109[3];
  uint64_t v110;
  _QWORD **v111;
  _QWORD *v112[3];
  uint64_t v113;
  uint64_t v114;
  _QWORD **v115;
  _QWORD *v116[3];
  uint64_t v117;
  _QWORD **v118;
  _QWORD *v119[3];
  std::locale::__imp *v120;
  _QWORD *v121[2];
  std::locale::__imp *v122;
  _QWORD *v123[2];
  std::locale v124;

  memset(v109, 0, sizeof(v109));
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = v109;
  v110 = 0;
  v111 = v112;
  memset(v112, 0, sizeof(v112));
  v113 = 0;
  v114 = 0;
  v115 = v116;
  memset(v116, 0, sizeof(v116));
  memset(v119, 0, sizeof(v119));
  v117 = 0;
  v118 = v119;
  v121[0] = 0;
  v121[1] = 0;
  v120 = (std::locale::__imp *)v121;
  v123[0] = 0;
  v123[1] = 0;
  v122 = (std::locale::__imp *)v123;
  sub_20C214B54(a1, (uint64_t)&v105);
  v3 = sub_20BDDC1C8(a2, (uint64_t)"PcpCache Statistics", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v5 = sub_20BDDC1C8(v3, (uint64_t)"-------------------", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v7 = sub_20BDDC1C8(a2, (uint64_t)"Entries: ", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v9 = sub_20BDDC1C8(a2, (uint64_t)"  Prim indexes:                      ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v10, v11, v105);
  if ((v104 & 0x80u) == 0)
    locale = &v102;
  else
    locale = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v13 = v104;
  else
    v13 = (uint64_t)v103;
  v14 = sub_20BDDC1C8(v9, (uint64_t)locale, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  v16 = sub_20BDDC1C8(a2, (uint64_t)"  Property indexes:                  ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v17, v18, v106);
  if ((v104 & 0x80u) == 0)
    v19 = &v102;
  else
    v19 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v20 = v104;
  else
    v20 = (uint64_t)v103;
  v21 = sub_20BDDC1C8(v16, (uint64_t)v19, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v23 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v24 = sub_20BDDC1C8(a2, (uint64_t)"Prim graphs: ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  sub_20C214ED0(&v107, &v110, a2);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v26 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v27 = sub_20BDDC1C8(a2, (uint64_t)"Prim graphs (shared): ", 22);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v29 = sub_20BDDC1C8(a2, (uint64_t)"  Graph instances:                   ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v30, v31, v113);
  if ((v104 & 0x80u) == 0)
    v32 = &v102;
  else
    v32 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v33 = v104;
  else
    v33 = (uint64_t)v103;
  v34 = sub_20BDDC1C8(v29, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
  v35 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  sub_20C214ED0(&v114, &v117, a2);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v36 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v37 = sub_20BDDC1C8(a2, (uint64_t)"Memory usage: ", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
  v38 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v39 = sub_20BDDC1C8(a2, (uint64_t)"  sizeof(PcpMapFunction):            ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v40, v41, 56);
  if ((v104 & 0x80u) == 0)
    v42 = &v102;
  else
    v42 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v43 = v104;
  else
    v43 = (uint64_t)v103;
  v44 = sub_20BDDC1C8(v39, (uint64_t)v42, v43);
  std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
  v45 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  v46 = sub_20BDDC1C8(a2, (uint64_t)"  sizeof(PcpLayerStackPtr):          ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v47, v48, 16);
  if ((v104 & 0x80u) == 0)
    v49 = &v102;
  else
    v49 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v50 = v104;
  else
    v50 = (uint64_t)v103;
  v51 = sub_20BDDC1C8(v46, (uint64_t)v49, v50);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
  v52 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  v53 = sub_20BDDC1C8(a2, (uint64_t)"  sizeof(PcpLayerStackSite):         ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v54, v55, 16);
  if ((v104 & 0x80u) == 0)
    v56 = &v102;
  else
    v56 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v57 = v104;
  else
    v57 = (uint64_t)v103;
  v58 = sub_20BDDC1C8(v53, (uint64_t)v56, v57);
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
  v59 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  v60 = sub_20BDDC1C8(a2, (uint64_t)"  sizeof(PcpPrimIndex):              ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v61, v62, 40);
  if ((v104 & 0x80u) == 0)
    v63 = &v102;
  else
    v63 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v64 = v104;
  else
    v64 = (uint64_t)v103;
  v65 = sub_20BDDC1C8(v60, (uint64_t)v63, v64);
  std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(_QWORD *)(*v65 - 24)));
  v66 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  v67 = sub_20BDDC1C8(a2, (uint64_t)"  sizeof(PcpPrimIndex_Graph):        ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v68, v69, 64);
  if ((v104 & 0x80u) == 0)
    v70 = &v102;
  else
    v70 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v71 = v104;
  else
    v71 = (uint64_t)v103;
  v72 = sub_20BDDC1C8(v67, (uint64_t)v70, v71);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(_QWORD *)(*v72 - 24)));
  v73 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  v74 = sub_20BDDC1C8(a2, (uint64_t)"  sizeof(PcpPrimIndex_Graph::_Node): ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v75, v76, 48);
  if ((v104 & 0x80u) == 0)
    v77 = &v102;
  else
    v77 = v102.__locale_;
  if ((v104 & 0x80u) == 0)
    v78 = v104;
  else
    v78 = (uint64_t)v103;
  v79 = sub_20BDDC1C8(v74, (uint64_t)v77, v78);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(_QWORD *)(*v79 - 24)));
  v80 = std::locale::use_facet(&v124, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0)
    operator delete(v102.__locale_);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v81 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v82 = sub_20BDDC1C8(a2, (uint64_t)"PcpMapFunction size histogram: ", 31);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
  v83 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v84 = sub_20BDDC1C8(a2, (uint64_t)"SIZE    COUNT", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(_QWORD *)(*v84 - 24)));
  v85 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v102.__locale_ = v120;
  v103 = (std::locale::__imp *)v121;
  while (v102.__locale_ != v103)
  {
    v88 = *(_QWORD *)(*sub_20C215614(&v102, v86, v87) + 32);
    v91 = sub_20C215614(&v102, v89, v90);
    printf("%zu   %zu\n", v88, *(_QWORD *)(*v91 + 40));
    sub_20C21568C(&v102);
  }
  v92 = sub_20BDDC1C8(a2, (uint64_t)"PcpLayerStack pathsWithRelocates size histogram: ", 49);
  std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(_QWORD *)(*v92 - 24)));
  v93 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v94 = sub_20BDDC1C8(a2, (uint64_t)"SIZE    COUNT", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(_QWORD *)(*v94 - 24)));
  v95 = std::locale::use_facet(&v102, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v102.__locale_ = v122;
  v103 = (std::locale::__imp *)v123;
  while (v102.__locale_ != v103)
  {
    v98 = *(_QWORD *)(*sub_20C215614(&v102, v96, v97) + 32);
    v101 = sub_20C215614(&v102, v99, v100);
    printf("%zu   %zu\n", v98, *(_QWORD *)(*v101 + 40));
    sub_20C21568C(&v102);
  }
  sub_20BE6100C((uint64_t)&v122, v123[0]);
  sub_20BE6100C((uint64_t)&v120, v121[0]);
  sub_20BE6100C((uint64_t)&v118, v119[0]);
  sub_20BE6100C((uint64_t)&v115, v116[0]);
  sub_20BE6100C((uint64_t)&v111, v112[0]);
  sub_20BE6100C((uint64_t)&v108, v109[0]);
}

void sub_20C214824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, _QWORD *a17)
{
  sub_20C215730(&a17);
  _Unwind_Resume(a1);
}

void sub_20C214914(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::locale::__imp *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  const std::locale::facet *v12;
  std::locale v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17[3];
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[3];
  std::locale v21;

  v19 = v20;
  memset(v20, 0, sizeof(v20));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v15 = 0;
  v16 = v17;
  sub_20C215810(a1, (uint64_t)&v18, 0);
  sub_20C215810(a1, (uint64_t)&v15, 1);
  v4 = sub_20BDDC1C8(a2, (uint64_t)"PcpPrimIndex Statistics - ", 26);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
  v13.__locale_ = v5;
  v14 = v6;
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v4, Path);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  v10 = sub_20BDDC1C8(v8, (uint64_t)"-----------------------", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  sub_20C214ED0(&v18, &v15, a2);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v12 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  sub_20BE6100C((uint64_t)&v16, v17[0]);
  sub_20BE6100C((uint64_t)&v19, v20[0]);
}

void sub_20C214B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;
  uint64_t v20;

  std::locale::~locale(&a10);
  sub_20BE6100C(v20, a14);
  sub_20BE6100C(v19, a19);
  _Unwind_Resume(a1);
}

void sub_20C214B54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v17;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v19;
  char *v20;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v32;
  _QWORD *PathsToPrimsWithRelocates;
  uint64_t *v34;
  uint64_t *v35[2];
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t *v45;
  _QWORD *v46[2];

  v46[0] = 0;
  v46[1] = 0;
  v45 = (uint64_t *)v46;
  v42 = 0u;
  v43 = 0u;
  v44 = 1065353216;
  v40 = (uint64_t)sub_20C215C40((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 26));
  v41 = 0;
  while ((void **)v40 != v41)
  {
    v6 = (uint64_t *)(*sub_20C215798(&v40, v4, v5) + 8);
    if (*v6)
    {
      ++*(_QWORD *)a2;
      sub_20C215810(v6, a2 + 16, 0);
      sub_20C215810(v6, a2 + 56, 1);
      v7 = sub_20C21137C(v6);
      sub_20C215CE8(&v45, (unint64_t *)(v7 + 16), (uint64_t *)(v7 + 16));
      if ((v8 & 1) != 0)
      {
        ++*(_QWORD *)(a2 + 96);
        sub_20C215810(v6, a2 + 104, 0);
        sub_20C215810(v6, a2 + 144, 1);
      }
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v6, 6u, (uint64_t *)&v36);
      v10 = v36;
      v9 = v37;
      v11 = v38;
      if (v36 != v38 || v37 != v39)
      {
        v12 = (uint64_t *)((char *)v39 - 1);
        do
        {
          do
          {
            v13 = v9;
            v35[0] = v10;
            v35[1] = v9;
            MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v35);
            v17 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v15, v16);
            sub_20C215E20((uint64_t)&v42, v17, (uint64_t)v17);
            MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v35);
            v21 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v19, v20);
            sub_20C215E20((uint64_t)&v42, v21, (uint64_t)v21);
            v9 = (uint64_t *)((char *)v13 + 1);
          }
          while (v10 != v11);
        }
        while (v12 != v13);
      }
    }
    sub_20C21593C((unint64_t *)&v40);
  }
  v36 = sub_20C216190((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 31));
  v37 = 0;
  while (v36 != v37)
  {
    v24 = sub_20C2159C4(&v36, v22, v23);
    if (!pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(*v24 + 8)))
      ++*(_QWORD *)(a2 + 8);
    sub_20C215A3C((unint64_t *)&v36);
  }
  v40 = v43;
  v41 = 0;
  while ((void **)v40 != v41)
  {
    v35[0] = 0;
    v25 = sub_20C215AC4(&v40, v22, v23);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(*v25 + 16), &v36);
    v26 = v38;
    sub_20BFE4CE8((uint64_t)&v36, v37);
    v35[0] = v26;
    v36 = (uint64_t *)v35;
    v27 = sub_20C127DF0((uint64_t **)(a2 + 184), (unint64_t *)v35, (uint64_t)&unk_20CAC184C, &v36);
    ++v27[5];
    sub_20C215B3C((uint64_t)&v40);
  }
  v28 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8(a1 + 25);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(v28, (uint64_t *)&v36);
  v29 = v36;
  v30 = v37;
  if (v36 != v37)
  {
    v31 = (uint64_t **)(a2 + 208);
    do
    {
      v40 = 0;
      v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v29);
      PathsToPrimsWithRelocates = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(v32);
      v40 = (uint64_t)(PathsToPrimsWithRelocates[1] - *PathsToPrimsWithRelocates) >> 3;
      v35[0] = &v40;
      v34 = sub_20C127DF0(v31, (unint64_t *)&v40, (uint64_t)&unk_20CAC184C, v35);
      ++v34[5];
      v29 += 2;
    }
    while (v29 != v30);
  }
  v40 = (uint64_t)&v36;
  sub_20BEB4844((void ***)&v40);
  sub_20C216274((uint64_t)&v42);
  sub_20C2162E8((uint64_t)&v45, v46[0]);
}

void sub_20C214E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  sub_20C216274((uint64_t)&a17);
  sub_20C2162E8((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void sub_20C214ED0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  const char *v6;
  char *v7;
  void *locale;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  const char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  unsigned int v21;
  std::locale::id *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t **v29;
  const char *v30;
  char *v31;
  void **v32;
  uint64_t **v33;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  void **v38;
  void *p_p;
  uint64_t v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  _QWORD *v43;
  const char *v44;
  char *v45;
  int v46;
  void **v47;
  const char *v48;
  char *v49;
  const char *v50;
  char *v51;
  void **v52;
  void **v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  _QWORD *v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  _QWORD *v61;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *__p;
  uint64_t v68;
  unsigned __int8 v69;
  std::locale v70;
  uint64_t v71;
  unsigned __int8 v72;
  unsigned int v73;
  std::locale v74;
  _QWORD *v75;
  std::locale v76;
  _QWORD *v77;
  unsigned __int8 v78;
  std::locale v79;

  v5 = sub_20BDDC1C8(a3, (uint64_t)"  Total nodes:                       ", 37);
  v61 = a1;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v6, v7, *a1);
  if ((v78 & 0x80u) == 0)
    locale = &v76;
  else
    locale = v76.__locale_;
  if ((v78 & 0x80u) == 0)
    v9 = v78;
  else
    v9 = (uint64_t)v77;
  v10 = sub_20BDDC1C8(v5, (uint64_t)locale, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v74, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v74);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v78 < 0)
    operator delete(v76.__locale_);
  v12 = sub_20BDDC1C8(a3, (uint64_t)"  Total culled* nodes:               ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v13, v14, *a2);
  if ((v78 & 0x80u) == 0)
    v15 = &v76;
  else
    v15 = v76.__locale_;
  if ((v78 & 0x80u) == 0)
    v16 = v78;
  else
    v16 = (uint64_t)v77;
  v17 = sub_20BDDC1C8(v12, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v74, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v74);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v78 < 0)
    operator delete(v76.__locale_);
  v19 = sub_20BDDC1C8(a3, (uint64_t)"  By type (total / culled*):         ", 37);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v76, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v76);
  std::ostream::put();
  std::ostream::flush();
  sub_20C216330((uint64_t *)&v76, (uint64_t)(a1 + 1));
  sub_20C216330((uint64_t *)&v74, (uint64_t)(a2 + 1));
  v21 = 0;
  v73 = 0;
  v22 = (std::locale::id *)MEMORY[0x24BEDB350];
  do
  {
    pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, v21, (uint64_t)&v70);
    v23 = sub_20BDDC1C8(a3, (uint64_t)"    ", 4);
    if ((v72 & 0x80u) == 0)
      v24 = &v70;
    else
      v24 = v70.__locale_;
    if ((v72 & 0x80u) == 0)
      v25 = v72;
    else
      v25 = v71;
    v26 = sub_20BDDC1C8(v23, (uint64_t)v24, v25);
    v27 = sub_20BDDC1C8(v26, (uint64_t)": ", 2);
    if ((v72 & 0x80u) == 0)
      v28 = v72;
    else
      v28 = v71;
    v63[0] = &v73;
    v29 = sub_20C1257EC((uint64_t **)&v76, (int *)&v73, (uint64_t)&unk_20CAC184C, (_DWORD **)v63);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v30, v31, v29[5]);
    if (v66 >= 0)
      v32 = v65;
    else
      v32 = (void **)v65[0];
    v79.__locale_ = (std::locale::__imp *)&v73;
    v33 = sub_20C1257EC((uint64_t **)&v74, (int *)&v73, (uint64_t)&unk_20CAC184C, &v79);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v34, v35, v33[5]);
    v38 = v63;
    if (v64 < 0)
      v38 = (void **)v63[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%*s%s / %s", v36, v37, (31 - v28), "", v32, v38);
    if ((v69 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v69 & 0x80u) == 0)
      v40 = v69;
    else
      v40 = v68;
    v41 = sub_20BDDC1C8(v27, (uint64_t)p_p, v40);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
    v42 = std::locale::use_facet(&v79, v22);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v79);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v69 < 0)
      operator delete(__p);
    if (v64 < 0)
      operator delete(v63[0]);
    if (v66 < 0)
      operator delete(v65[0]);
    if (v73 == 1)
    {
      v43 = sub_20BDDC1C8(a3, (uint64_t)"      implied inherits: ", 24);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v44, v45, v61[4]);
      v46 = v66;
      v47 = (void **)v65[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v48, v49, a2[4]);
      v52 = v65;
      if (v46 < 0)
        v52 = v47;
      v53 = v63;
      if (v64 < 0)
        v53 = (void **)v63[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%*s%s / %s", v50, v51, 13, "", v52, v53);
      if ((v69 & 0x80u) == 0)
        v54 = &__p;
      else
        v54 = __p;
      if ((v69 & 0x80u) == 0)
        v55 = v69;
      else
        v55 = v68;
      v56 = sub_20BDDC1C8(v43, (uint64_t)v54, v55);
      std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
      v57 = std::locale::use_facet(&v79, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
      std::locale::~locale(&v79);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v69 < 0)
        operator delete(__p);
      if (v64 < 0)
        operator delete(v63[0]);
      if (v66 < 0)
        operator delete(v65[0]);
    }
    if ((char)v72 < 0)
      operator delete(v70.__locale_);
    v21 = v73 + 1;
    v73 = v21;
  }
  while (v21 != 7);
  v58 = sub_20BDDC1C8(a3, (uint64_t)"  (*) This does not include culled nodes that were erased ", 58);
  v59 = sub_20BDDC1C8(v58, (uint64_t)"from the graph", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
  v60 = std::locale::use_facet(&v70, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale(&v70);
  std::ostream::put();
  std::ostream::flush();
  sub_20BE6100C((uint64_t)&v74, v75);
  sub_20BE6100C((uint64_t)&v76, v77);
}

void sub_20C21550C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::locale a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::locale a40,uint64_t a41)
{
  uint64_t v41;

  sub_20BE6100C(v41 - 128, *(_QWORD **)(v41 - 120));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C215614(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, unsigned long>>::operator->()"
            " [T = std::map<unsigned long, unsigned long>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C21568C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, unsigned long>>"
            "::operator++() [T = std::map<unsigned long, unsigned long>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

_QWORD **sub_20C215730(_QWORD **a1)
{
  sub_20BE6100C((uint64_t)(a1 + 26), a1[27]);
  sub_20BE6100C((uint64_t)(a1 + 23), a1[24]);
  sub_20BE6100C((uint64_t)(a1 + 19), a1[20]);
  sub_20BE6100C((uint64_t)(a1 + 14), a1[15]);
  sub_20BE6100C((uint64_t)(a1 + 8), a1[9]);
  sub_20BE6100C((uint64_t)(a1 + 3), a1[4]);
  return a1;
}

_QWORD *sub_20C215798(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfPathTable<"
            "pxrInternal__aapl__pxrReserved__::PcpPrimIndex>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::"
            "SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t *sub_20C215810(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t OriginNode;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int ArcType;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *p_ArcType;

  result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, &v19);
  v7 = v19;
  v6 = v20;
  v8 = v21;
  if (v19 != v21 || v20 != v22)
  {
    v10 = v22 - 1;
    do
    {
      v11 = v6;
      v18[0] = v7;
      v18[1] = v6;
      if (!a3
        || (result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18),
            (_DWORD)result))
      {
        ++*(_QWORD *)a2;
        ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
        p_ArcType = &ArcType;
        v12 = sub_20C1257EC((uint64_t **)(a2 + 8), &ArcType, (uint64_t)&unk_20CAC184C, &p_ArcType);
        v12[5] = (uint64_t *)((char *)v12[5] + 1);
        OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
        v15 = v14;
        result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
        if (v15 != v16 || (uint64_t *)OriginNode != result)
        {
          result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
          if ((_DWORD)result == 1)
            ++*(_QWORD *)(a2 + 32);
        }
      }
      v6 = v11 + 1;
    }
    while (v7 != v8 || v10 != v11);
  }
  return result;
}

unint64_t *sub_20C21593C(unint64_t *a1)
{
  unint64_t v2;
  _QWORD v4[4];
  char v5;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>>::operator++() [T = const pxrInternal__aapl__p"
            "xrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v2 = *(_QWORD *)(*a1 + 56);
    if (!v2)
      v2 = sub_20C216154((uint64_t)a1);
    *a1 = v2;
  }
  return a1;
}

_QWORD *sub_20C2159C4(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfPathTable<"
            "pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>>::operator->() [T = const pxrInternal__aapl__pxrReserved"
            "__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

unint64_t *sub_20C215A3C(unint64_t *a1)
{
  unint64_t v2;
  _QWORD v4[4];
  char v5;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>>::operator++() [T = const pxrInternal__aap"
            "l__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v2 = *(_QWORD *)(*a1 + 48);
    if (!v2)
      v2 = sub_20C216238((uint64_t)a1);
    *a1 = v2;
  }
  return a1;
}

_QWORD *sub_20C215AC4(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrIntern"
            "al__aapl__pxrReserved__::PcpMapFunction, pxrInternal__aapl__pxrReserved__::Pcp_Statistics::MapFuncHash>>::op"
            "erator->() [T = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::PcpMapFunction"
            ", pxrInternal__aapl__pxrReserved__::Pcp_Statistics::MapFuncHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C215B3C(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hSet<pxrInternal__aapl__pxrReserved__::PcpMapFunction, pxrInternal__aapl__pxrReserved__::Pcp_Statistics::Map"
            "FuncHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::"
            "PcpMapFunction, pxrInternal__aapl__pxrReserved__::Pcp_Statistics::MapFuncHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t sub_20C215BB8(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry>::ope"
            "rator->() const [U = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC3164 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

_QWORD *sub_20C215C40(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  unsigned int *v2;

  if (!*((_QWORD *)a1 + 3))
    return 0;
  v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  return sub_20C215C80(a1, v2);
}

_QWORD *sub_20C215C80(_QWORD *a1, unsigned int *a2)
{
  _QWORD *result;

  if (!a1[3])
    return 0;
  for (result = *(_QWORD **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        result = (_QWORD *)result[6])
  {
    if (*result == *(_QWORD *)a2)
      break;
  }
  return result;
}

uint64_t *sub_20C215CE8(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];
  char v17;

  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    sub_20C215DDC(v16, 0);
  }
  return v11;
}

void sub_20C215DDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 32));
    operator delete((void *)v2);
  }
}

_QWORD *sub_20C215E20(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapFunction *this, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v24[3];

  v7 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Hash(this);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if ((pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==((uint64_t)(v13 + 2), (uint64_t)this) & 1) != 0)
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_20C21608C(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C216110(v24, 0);
  return v13;
}

void sub_20C216074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C216110((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C21608C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  sub_20C20123C((_DWORD *)v8 + 4, a3);
  result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v8 + 56) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C2160F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20C216110(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C216110(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 16));
    operator delete((void *)v2);
  }
}

unint64_t sub_20C216154(uint64_t a1)
{
  uint64_t i;
  unint64_t result;
  BOOL v4;

  if (!*(_QWORD *)a1)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 64); ; i = *(_QWORD *)(result + 64))
  {
    result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0)
      break;
    if (result)
      v4 = (i & 7) == 0;
    else
      v4 = 0;
    if (!v4)
      return 0;
  }
  return result;
}

_QWORD *sub_20C216190(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  unsigned int *v2;

  if (!*((_QWORD *)a1 + 3))
    return 0;
  v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  return sub_20C2161D0(a1, v2);
}

_QWORD *sub_20C2161D0(_QWORD *a1, unsigned int *a2)
{
  _QWORD *result;

  if (!a1[3])
    return 0;
  for (result = *(_QWORD **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        result = (_QWORD *)result[5])
  {
    if (*result == *(_QWORD *)a2)
      break;
  }
  return result;
}

unint64_t sub_20C216238(uint64_t a1)
{
  uint64_t i;
  unint64_t result;
  BOOL v4;

  if (!*(_QWORD *)a1)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 56); ; i = *(_QWORD *)(result + 56))
  {
    result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0)
      break;
    if (result)
      v4 = (i & 7) == 0;
    else
      v4 = 0;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_20C216274(uint64_t a1)
{
  void *v2;

  sub_20C2162AC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2162AC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2162E8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C2162E8(a1, *a2);
    sub_20C2162E8(a1, a2[1]);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C216330(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C216384(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_20C21636C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C216384(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20C216408(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20C216408(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_20C21648C(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_20BDDE1B4(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20C21648C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression@<X0>(const std::string *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X5>, char **a7@<X6>, uint64_t a8@<X8>)
{
  unsigned __int8 *i;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v43;
  __int128 v44;
  std::string v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(&v45, a1);
  sub_20C2169A0((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)&v45, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 16), &v48);
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)&v45);
  if (a6)
  {
    for (i = v53; i; i = *(unsigned __int8 **)i)
      sub_20C086844(a6, i + 16, (uint64_t)(i + 16));
  }
  if (a7 && v50 != v51)
  {
    pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::New(&v44);
    std::string::operator=((std::string *)(v44 + 104), a1);
    sub_20BEE380C("; ", v50, v51, &v45);
    v17 = v44;
    v18 = (void **)(v44 + 128);
    if (*(char *)(v44 + 151) < 0)
    {
      operator delete(*v18);
      v17 = v44;
    }
    *(std::string *)v18 = v45;
    std::string::operator=((std::string *)(v17 + 152), a3);
    sub_20BF2D298(v44 + 176, a4);
    v19 = v44;
    sub_20C01A074((int *)(v44 + 192), a5);
    sub_20C01A0C8((int *)(v19 + 196), a5 + 1);
    v20 = v44;
    v44 = 0uLL;
    v21 = (unint64_t)a7[2];
    v22 = a7[1];
    if ((unint64_t)v22 >= v21)
    {
      v43 = v20;
      v24 = (v22 - *a7) >> 4;
      if ((unint64_t)(v24 + 1) >> 60)
        sub_20BDDF694();
      v25 = v21 - (_QWORD)*a7;
      v26 = v25 >> 3;
      if (v25 >> 3 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v47 = a7 + 2;
      v28 = (char *)sub_20BDEA2F0((uint64_t)(a7 + 2), v27);
      v30 = &v28[16 * v24];
      *(_OWORD *)v30 = v43;
      v32 = *a7;
      v31 = a7[1];
      if (v31 == *a7)
      {
        v35 = vdupq_n_s64((unint64_t)v31);
        v33 = &v28[16 * v24];
      }
      else
      {
        v33 = &v28[16 * v24];
        do
        {
          v34 = *((_OWORD *)v31 - 1);
          v31 -= 16;
          *((_OWORD *)v33 - 1) = v34;
          v33 -= 16;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 1) = 0;
        }
        while (v31 != v32);
        v35 = *(int64x2_t *)a7;
      }
      v23 = v30 + 16;
      *a7 = v33;
      a7[1] = v30 + 16;
      *(int64x2_t *)&v45.__r_.__value_.__r.__words[1] = v35;
      v36 = a7[2];
      a7[2] = &v28[16 * v29];
      v46 = v36;
      v45.__r_.__value_.__r.__words[0] = v35.i64[0];
      sub_20BDEA324((uint64_t)&v45);
    }
    else
    {
      *(_OWORD *)v22 = v20;
      v23 = v22 + 16;
    }
    a7[1] = v23;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v48))
  {
    if ((v49 & 4) != 0)
      v40 = (*(uint64_t (**)(uint64_t *))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(&v48);
    else
      v40 = v48;
    if (*(char *)(v40 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a8, *(void **)v40, *(_QWORD *)(v40 + 8));
    }
    else
    {
      v41 = *(_OWORD *)v40;
      *(_QWORD *)(a8 + 16) = *(_QWORD *)(v40 + 16);
      *(_OWORD *)a8 = v41;
    }
  }
  else
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
  }
  sub_20BEB3F28((uint64_t)&v52);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  sub_20BDE5038((void ***)&v45);
  return sub_20BF4C2D8((uint64_t)&v48);
}

void sub_20C216948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  sub_20C216BE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20C2169A0(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *a1@<X0>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::VtValue *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  std::type_info v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::Evaluate(a1, a2, (uint64_t)a3);
  if (a3[1] && (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)a3) & 1) == 0)
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    v22.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C520700;
    sub_20BF77444((unsigned int **)&v22, (uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::SdfVariableExpression::_FormatUnexpectedTypeError((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)a3, &v22, v4);
    v5 = a3[4];
    v6 = a3[3];
    if (v6 >= v5)
    {
      v8 = a3[2];
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 3);
      v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v10;
      v27 = a3 + 4;
      if (v12)
        v13 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 4), v12);
      else
        v13 = 0;
      v14 = &v13[24 * v9];
      v23 = v13;
      v24 = v14;
      v26 = &v13[24 * v12];
      v15 = *(_OWORD *)__p;
      *((_QWORD *)v14 + 2) = v21;
      *(_OWORD *)v14 = v15;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v25 = v14 + 24;
      sub_20BDF34C0(a3 + 2, &v23);
      v16 = a3[3];
      sub_20BDF3648((uint64_t)&v23);
      v17 = SHIBYTE(v21);
      a3[3] = v16;
      if (v17 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(v6 + 16) = v21;
      *(_OWORD *)v6 = v7;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      a3[3] = v6 + 24;
    }
    sub_20BF4C2D8((uint64_t)&v22);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    v24 = 0;
    sub_20BF4B5D8(a3, &v23);
    sub_20BF4C2D8((uint64_t)&v23);
  }
}

void sub_20C216B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  sub_20BDF3648((uint64_t)&a23);
  if (a20 < 0)
    operator delete(__p);
  sub_20BF4C2D8((uint64_t)&a21);
  if (a14 < 0)
    operator delete(a9);
  sub_20C216BE8(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_20C216BE8(uint64_t a1)
{
  void **v3;

  sub_20BEB3F28(a1 + 40);
  v3 = (void **)(a1 + 16);
  sub_20BDE5038(&v3);
  return sub_20BF4C2D8(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  v12 = 0;
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
  pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(a1, a2, &__p, (uint64_t)&v11, &v10, 0, 0, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  v6 = v12;
  if (v12)
  {
    v7 = (unsigned int *)(v12 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C216D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a9);
  if (a11)
    sub_20C96B0D8(a11);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  return pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a1, a2, (uint64_t **)a3);
}

void sub_20C216D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDE9D48(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;
  uint64_t *v8;
  __int128 *v9;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    result = sub_20C216E2C(result);
    if ((result & 1) == 0)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
      if (!v6)
        v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
      if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      v9 = (__int128 *)EmptyString;
      v8 = sub_20BDDDFDC(a3, (const void **)EmptyString, (uint64_t)&unk_20CAC184C, &v9);
      return (uint64_t)std::string::operator=((std::string *)(v8 + 7), (const std::string *)a2);
    }
  }
  return result;
}

BOOL sub_20C216E2C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v1;
  uint64_t *EmptyString;
  _BOOL8 v3;
  _QWORD **v5;
  _QWORD *v6[2];
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(a1, __p, &v5))
  {
    v1 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v1)
      v1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if ((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v1);
    v3 = v6 != (_QWORD **)sub_20BDEEBA4((uint64_t)&v5, (const void **)EmptyString);
  }
  else
  {
    v3 = 0;
  }
  sub_20BDE9D48((uint64_t)&v5, v6[0]);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C216EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BDE9D48((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  void *__dst[2];
  char v7;
  void *__p;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v5)
      v5 = (_QWORD *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    sub_20C217594((pxrInternal__aapl__pxrReserved__::TfToken *)__dst, v5, (__int128 *)a1);
    sub_20C103414((uint64_t)a2, (const void **)__dst, 1);
    if (v9 < 0)
      operator delete(__p);
    if (v7 < 0)
      operator delete(__dst[0]);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
}

void sub_20C216FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE930F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;

  if (!sub_20C216E2C(a1))
    return (uint64_t **)a2;
  if (a3 != (uint64_t **)a2)
    sub_20BDFC4AC(a3, *(__int128 **)a2, (__int128 *)(a2 + 8));
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v5)
    v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  sub_20BE9DD48(a3, (const void **)EmptyString);
  return a3;
}

void pxrInternal__aapl__pxrReserved__::Pcp_StripFileFormatTarget(unsigned __int8 *a1, uint64_t **a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v4)
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  v6 = sub_20BDEEBA4((uint64_t)a2, (const void **)EmptyString);
  if (a2 + 1 == (uint64_t **)v6)
    return;
  v7 = (uint64_t *)v6;
  v8 = *(unsigned __int8 *)(v6 + 79);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v6 + 79);
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = a1[23];
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a1 + 1);
  if (v9 != v10)
    return;
  v12 = (const void **)(v6 + 56);
  if (v11 >= 0)
    v13 = a1;
  else
    v13 = *(unsigned __int8 **)a1;
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(_QWORD *)(v6 + 64)))
      return;
LABEL_23:
    sub_20BE10B80(a2, v7);
    sub_20BDDE3E4((uint64_t)(v7 + 4));
    operator delete(v7);
    return;
  }
  if (!*(_BYTE *)(v6 + 79))
    goto LABEL_23;
  while (*(unsigned __int8 *)v12 == *v13)
  {
    v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v8)
      goto LABEL_23;
  }
}

double pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy@<D0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t a2@<X8>)
{
  int ArcType;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  int DepthBelowIntroduction;
  double v8;
  uint64_t v9;
  int v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  BOOL v12;
  uint64_t v13;
  double v14;
  double result;
  double v16[3];
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType != 1 && ArcType != 6)
  {
    v17 = "pcp/utils.cpp";
    v18 = "Pcp_FindStartingNodeOfClassHierarchy";
    v19 = 164;
    v20 = "std::pair<PcpNodeRef, PcpNodeRef> pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy(const PcpNodeRef &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "PcpIsClassBasedArc(n.GetArcType())", 0);
  }
  DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(this, v6);
  v8 = 0.0;
  *(_OWORD *)v16 = *(_OWORD *)this;
  v9 = -1;
  while (1)
  {
    v10 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16);
    v12 = v10 == 6 || v10 == 1;
    if (!v12
      || pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16, v11) != DepthBelowIntroduction)
    {
      break;
    }
    if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16)
      || v13 == -1)
    {
      v17 = "pcp/utils.cpp";
      v18 = "Pcp_FindStartingNodeOfClassHierarchy";
      v19 = 172;
      v20 = "std::pair<PcpNodeRef, PcpNodeRef> pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy(con"
            "st PcpNodeRef &)";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "instanceNode.GetParentNode()", 0);
    }
    v9 = *(_QWORD *)&v16[1];
    v8 = v16[0];
    *(_QWORD *)&v16[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16);
    v16[1] = v14;
  }
  result = v16[0];
  *(_OWORD *)a2 = *(_OWORD *)v16;
  *(double *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v11;
  uint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
  {
    sub_20BFD6E54((_DWORD *)a3, a2);
    result = sub_20BFD6EA4((_DWORD *)(a3 + 4), (_DWORD *)a2 + 1);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)this;
  }
  else
  {
    v27 = *(_OWORD *)this;
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, &v25);
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
    v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v9, v10);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v11, a2, &v23);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23))
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
      *(_QWORD *)&v27 = v12;
      *((_QWORD *)&v27 + 1) = v13;
      sub_20BFD3EBC(&v25, &v23);
      sub_20BFD3F10(&v26, &v24);
    }
    else
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27))
          break;
        MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27);
        v17 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v15, v16);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v22);
        v18 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        if (v18)
        {
          *(_QWORD *)&v27 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27);
          *((_QWORD *)&v27 + 1) = v19;
          sub_20BFD3EBC(&v25, (int *)&v22);
          sub_20BFD3F10(&v26, (int *)&v22 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
        sub_20BFD265C(&v22);
      }
      while (v18);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27, &v23);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v20);
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, 1);
      sub_20BFD3EBC(&v25, (int *)&v22);
      sub_20BFD3F10(&v26, (int *)&v22 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
      sub_20BFD265C(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
    sub_20BFD6E54((_DWORD *)a3, &v25);
    sub_20BFD6EA4((_DWORD *)(a3 + 4), &v26);
    *(_OWORD *)(a3 + 8) = v27;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    return sub_20BFD265C(&v25);
  }
  return result;
}

void sub_20C217528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11, int a12, int a13)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a13);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20C217594(pxrInternal__aapl__pxrReserved__::TfToken *__dst, _QWORD *a2, __int128 *a3)
{
  uint64_t *EmptyString;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(__dst);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v6 = *(_OWORD *)EmptyString;
    *((_QWORD *)__dst + 2) = EmptyString[2];
    *(_OWORD *)__dst = v6;
  }
  v7 = (char *)__dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  return __dst;
}

void sub_20C217620(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C21763C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_CULLING))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_CULLING);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_CULLING);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::PcpCache(uint64_t a1, uint64_t *a2, __int128 *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *v20;

  v8 = a2[1];
  if (v8)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
      v8 = *a2;
    else
      v8 = 0;
  }
  *(_QWORD *)a1 = v8;
  sub_20BF1DD04((uint64_t *)a1);
  v9 = a2[3];
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 3) + 14))
      v9 = a2[2];
    else
      v9 = 0;
  }
  *(_QWORD *)(a1 + 8) = v9;
  sub_20BF1DD04((uint64_t *)(a1 + 8));
  v10 = a2[1];
  *(_QWORD *)(a1 + 16) = *a2;
  *(_QWORD *)(a1 + 24) = v10;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a2[3];
  *(_QWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 40) = v13;
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20BFB73DC((char *)(a1 + 48), (_QWORD *)a2[4], (_QWORD *)a2[5], (a2[5] - a2[4]) >> 4);
  v16 = a2[8];
  *(_QWORD *)(a1 + 72) = a2[7];
  *(_QWORD *)(a1 + 80) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 88) = a2[9];
  *(_BYTE *)(a1 + 96) = a4;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 104), *(void **)a3, *((_QWORD *)a3 + 1));
    a4 = *(_BYTE *)(a1 + 96) != 0;
  }
  else
  {
    v19 = *a3;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 104) = v19;
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::New(a1 + 16, (__int128 *)(a1 + 104), a4, (_QWORD *)(a1 + 200));
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  v20 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *)operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Pcp_Dependencies(v20);
  *(_QWORD *)(a1 + 288) = v20;
  *(_QWORD *)(a1 + 296) = 0;
  return a1;
}

void sub_20C21785C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  uint64_t v3;

  sub_20C20D09C(v3);
  sub_20C103234(v2);
  sub_20C103234(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::~PcpCache(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::PcpCache *v12;
  void **v13[2];

  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)this + 128);
  v13[0] = *((void ***)this + 16);
  *((_QWORD *)this + 16) = 0;
  sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v13);
  v12 = this;
  v13[0] = (void **)off_24C52B800;
  v13[1] = (void **)&v12;
  tbb::interface7::internal::isolate_within_arena((uint64_t (***)(_QWORD))v13, 0);
  sub_20C217AA0((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)this + 36, 0);
  sub_20C217ACC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 25);
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
    sub_20C2235D8((uint64_t)this + 296, v3);
  sub_20C217AA0((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)this + 36, 0);
  sub_20C220F48((uint64_t *)this + 31);
  sub_20C220F14((uint64_t *)this + 26);
  sub_20C220E2C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 25);
  sub_20C220ECC((uint64_t)this + 176, *((_QWORD **)this + 23));
  sub_20C220E58((uint64_t)this + 136);
  sub_20C2012CC(v2);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 72));
  v13[0] = (void **)((char *)this + 48);
  sub_20BDE9EB0(v13);
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 1);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this);
}

void sub_20C217AA0(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **a1, pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *a2)
{
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::~Pcp_Dependencies(v3);
    operator delete(v4);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C217ACC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;

  v1 = *a1;
  *a1 = 0;
  v3 = 0;
  sub_20BF1D8F4((int)a1, v1);
  return sub_20C220E2C(&v3);
}

void sub_20C217B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C220E2C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return (uint64_t)this + 16;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_20C2033F4(a2, (uint64_t *)this + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::HasRootLayerStack(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = a2[1];
  if (v3)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
      v3 = *a2;
    else
      v3 = 0;
  }
  return v3 == *(_QWORD *)(a1 + 128);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::PcpCache::FindLayerStack@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v5;

  v5 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8((uint64_t *)this + 25);
  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find(v5, a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::UsesLayerStack(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_20C215BB8((uint64_t *)(a1 + 200));
  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Contains(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_20C215BB8((uint64_t *)(a1 + 200));
  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingLayer(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetFileFormatTarget(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return (uint64_t)this + 104;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::GetVariantFallbacks@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return sub_20C220F7C(a2, this + 22);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::SetVariantFallbacks(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t **v5;
  unsigned __int8 *v6;
  uint64_t v7;
  __int128 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  __int128 *v12;
  __int128 *v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  uint64_t **v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  uint64_t **v17;
  uint64_t v18;
  char *v19;
  uint64_t **v20;
  _QWORD v21[15];

  v5 = (uint64_t **)result;
  if (*(_QWORD *)(result + 192) == *(_QWORD *)(a2 + 16))
  {
    v6 = *(unsigned __int8 **)(result + 176);
    v7 = result + 184;
    if (v6 == (unsigned __int8 *)(result + 184))
      return result;
    v8 = *(__int128 **)a2;
    while (1)
    {
      result = sub_20C221224((uint64_t)&v20, v6 + 32, (unsigned __int8 *)v8 + 32);
      if ((result & 1) == 0)
        break;
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      v10 = v6;
      if (v9)
      {
        do
        {
          v6 = v9;
          v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v6 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
          v11 = *(_QWORD *)v6 == (_QWORD)v10;
          v10 = v6;
        }
        while (!v11);
      }
      v12 = (__int128 *)*((_QWORD *)v8 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(__int128 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (__int128 *)*((_QWORD *)v8 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v11);
      }
      v8 = v13;
      if (v6 == (unsigned __int8 *)v7)
        return result;
    }
  }
  if (v5 + 22 != (uint64_t **)a2)
    sub_20C221320(v5 + 22, *(__int128 **)a2, (__int128 *)(a2 + 8));
  v20 = a3;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v21);
  v15 = v20;
  v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14);
  if (v15)
    v17 = v15;
  else
    v17 = (uint64_t **)v21;
  pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v17, (const pxrInternal__aapl__pxrReserved__::PcpCache *)v5, v16);
  return (uint64_t)sub_20C21DA80(&v20, v18, v19);
}

void sub_20C217D4C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C21DA80(&a9, a2, a3);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsPayloadIncluded(uint64_t a1, unsigned int *a2)
{
  return sub_20C0E70D0((_QWORD *)(a1 + 136), a2) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetIncludedPayloads(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return (uint64_t)this + 136;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t **a4)
{
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  char *v14;
  uint64_t **v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  uint64_t **v17;
  _QWORD *v18;
  const char *Text;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  uint64_t v27;
  char *v28;
  uint64_t **v29;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  uint64_t **v31;
  _QWORD *v32;
  const char *v33;
  pxrInternal__aapl__pxrReserved__::PcpCache *v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t **v44;
  _QWORD v45[16];

  v44 = a4;
  pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v45);
  v42 = (_QWORD *)*a2;
  v43 = a2 + 1;
  v36 = (pxrInternal__aapl__pxrReserved__::PcpCache *)a1;
  v8 = a1 + 17;
  while (v42 != v43)
  {
    v9 = sub_20C217FC8(&v42, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v9 + 28)))
    {
      v12 = (unsigned int *)sub_20C218040(&v42, v10, v11);
      sub_20C2215D8((uint64_t)v8, v12, v12);
      if ((v13 & 1) != 0)
      {
        v15 = v44;
        v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v42, v13, v14);
        if (v15)
          v17 = v15;
        else
          v17 = (uint64_t **)v45;
        pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v17, v36, v16);
      }
    }
    else
    {
      v37 = "pcp/cache.cpp";
      v38 = "RequestPayloads";
      v39 = 257;
      v40 = "void pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(const SdfPathSet &, const SdfPathSet &, PcpChanges *)";
      v41 = 0;
      v18 = sub_20C217FC8(&v42, v10, v11);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v18 + 28));
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a prim path", Text);
    }
    sub_20C2180BC(&v42);
  }
  v42 = (_QWORD *)*a3;
  v43 = a3 + 1;
  while (v42 != v43)
  {
    v20 = sub_20C217FC8(&v42, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v20 + 28)))
    {
      v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v42, v21, v22);
      if (a2 + 1 == sub_20BFE4AF0((uint64_t)a2, v23))
      {
        v26 = (unsigned int *)sub_20C218040(&v42, v24, v25);
        if (sub_20C2218F0(v8, v26))
        {
          v29 = v44;
          v30 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v42, v27, v28);
          if (v29)
            v31 = v29;
          else
            v31 = (uint64_t **)v45;
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v31, v36, v30);
        }
      }
    }
    else
    {
      v37 = "pcp/cache.cpp";
      v38 = "RequestPayloads";
      v39 = 269;
      v40 = "void pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(const SdfPathSet &, const SdfPathSet &, PcpChanges *)";
      v41 = 0;
      v32 = sub_20C217FC8(&v42, v21, v22);
      v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v32 + 28));
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a prim path", v33);
    }
    sub_20C2180BC(&v42);
  }
  return sub_20C21DA80(&v44, v6, v7);
}

void sub_20C217FA0(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20C21DA80((uint64_t *)va, a2, a3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C217FC8(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath>>::operator->() [T = const std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C218040(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath>>::operator*() [T = const std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 28;
}

void sub_20C2180B4()
{
  JUMPOUT(0x20C21805CLL);
}

_QWORD *sub_20C2180BC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrRe"
            "served__::SdfPath>>::operator++() [T = const std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::RequestLayerMuting(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void **v53;
  std::__shared_weak_count *v54;
  _QWORD v55[3];
  unint64_t j;
  void **v57;
  char *v58;
  uint64_t v59;
  const char *v60;
  char v61;
  __int128 v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  _BYTE v66[48];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v66, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(a1 + 6));
  v64 = 0uLL;
  v65 = 0;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      if (*(char *)(v8 + 23) < 0)
      {
        if (*(_QWORD *)(v8 + 8))
        {
LABEL_6:
          v58 = 0;
          v59 = 0;
          v57 = (void **)&v58;
          pxrInternal__aapl__pxrReserved__::SdfLayer::Find(v8, (uint64_t)&v57, (uint64_t *)&v62);
          v10 = sub_20C1020E4(&v62, a1);
          v11 = *((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1))
          {
            v12 = (unsigned int *)(*((_QWORD *)&v62 + 1) + 8);
            do
            {
              v13 = __ldxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          }
          sub_20BDE9D48((uint64_t)&v57, v58);
          if (v10)
          {
            v57 = (void **)"pcp/cache.cpp";
            v58 = "RequestLayerMuting";
            v59 = 293;
            v60 = "void pxrInternal__aapl__pxrReserved__::PcpCache::RequestLayerMuting(const std::vector<std::string> &, "
                  "const std::vector<std::string> &, PcpChanges *, std::vector<std::string> *, std::vector<std::string> *)";
            v61 = 0;
            v15 = (const char *)v8;
            if (*(char *)(v8 + 23) < 0)
              v15 = *(const char **)v8;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot mute cache's root layer @%s@", v15);
          }
          else
          {
            v16 = (__int128 *)*((_QWORD *)&v64 + 1);
            if (*((_QWORD *)&v64 + 1) >= v65)
            {
              v18 = sub_20BE4EE50((uint64_t *)&v64, (__int128 *)v8);
            }
            else
            {
              if (*(char *)(v8 + 23) < 0)
              {
                sub_20BDDBFAC(*((_BYTE **)&v64 + 1), *(void **)v8, *(_QWORD *)(v8 + 8));
              }
              else
              {
                v17 = *(_OWORD *)v8;
                *(_QWORD *)(*((_QWORD *)&v64 + 1) + 16) = *(_QWORD *)(v8 + 16);
                *v16 = v17;
              }
              v18 = (uint64_t)v16 + 24;
            }
            *((_QWORD *)&v64 + 1) = v18;
          }
        }
      }
      else if (*(_BYTE *)(v8 + 23))
      {
        goto LABEL_6;
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
  v62 = 0uLL;
  v63 = 0;
  v20 = *a3;
  v19 = a3[1];
  while (v20 != v19)
  {
    if (*(char *)(v20 + 23) < 0)
    {
      if (!*(_QWORD *)(v20 + 8))
        goto LABEL_37;
    }
    else if (!*(_BYTE *)(v20 + 23))
    {
      goto LABEL_37;
    }
    if (sub_20C020210(*a2, a2[1], (unsigned __int8 **)v20) == a2[1])
    {
      v21 = (__int128 *)*((_QWORD *)&v62 + 1);
      if (*((_QWORD *)&v62 + 1) >= v63)
      {
        v23 = sub_20BE4EE50((uint64_t *)&v62, (__int128 *)v20);
      }
      else
      {
        if (*(char *)(v20 + 23) < 0)
        {
          sub_20BDDBFAC(*((_BYTE **)&v62 + 1), *(void **)v20, *(_QWORD *)(v20 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v20;
          *(_QWORD *)(*((_QWORD *)&v62 + 1) + 16) = *(_QWORD *)(v20 + 16);
          *v21 = v22;
        }
        v23 = (uint64_t)v21 + 24;
      }
      *((_QWORD *)&v62 + 1) = v23;
    }
LABEL_37:
    v20 += 24;
  }
  if ((_QWORD)v64 != *((_QWORD *)&v64 + 1) || (_QWORD)v62 != *((_QWORD *)&v62 + 1))
  {
    v24 = sub_20C215BB8(a1 + 25);
    sub_20C1034E8((uint64_t *)&v57, a1);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::MuteAndUnmuteLayers(v24, (uint64_t *)&v57, (uint64_t *)&v64, (uint64_t *)&v62);
    v25 = v58;
    if (v58)
    {
      v26 = (unsigned int *)(v58 + 8);
      do
      {
        v27 = __ldxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
    }
    v57 = a4;
    pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(&v58);
    v31 = *((_QWORD *)&v64 + 1);
    for (i = v64; i != v31; i += 24)
    {
      if (v57)
        v33 = (uint64_t **)v57;
      else
        v33 = (uint64_t **)&v58;
      pxrInternal__aapl__pxrReserved__::PcpChanges::DidMuteLayer(v33, (pxrInternal__aapl__pxrReserved__::PcpCache *)a1, i);
    }
    v34 = *((_QWORD *)&v62 + 1);
    v35 = v62;
    if ((_QWORD)v62 != *((_QWORD *)&v62 + 1))
    {
      do
      {
        if (v57)
          v36 = (uint64_t **)v57;
        else
          v36 = (uint64_t **)&v58;
        pxrInternal__aapl__pxrReserved__::PcpChanges::DidUnmuteLayer(v36, a1, v35);
        v35 += 24;
      }
      while (v35 != v34);
      if ((_QWORD)v62 != *((_QWORD *)&v62 + 1))
      {
        v37 = (unint64_t)sub_20C215C40((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 26));
        for (j = v37; v37; j = v37)
        {
          if (*(_QWORD *)(v37 + 8))
          {
            sub_20C2187AC((char *)(v37 + 8), (uint64_t)v55);
            v38 = v55[0];
            v39 = v55[1];
            while (v38 != v39)
            {
              if (*(_QWORD *)v38
              {
                v41 = *(std::__shared_weak_count **)(v38 + 8);
                v53 = (void **)v40;
                v54 = v41;
                if (v41)
                {
                  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
                  do
                    v43 = __ldxr(p_shared_owners);
                  while (__stxr(v43 + 1, p_shared_owners));
                }
                v44 = sub_20C020210(v62, *((uint64_t *)&v62 + 1), (unsigned __int8 **)v40 + 28);
                if (v44 != *((_QWORD *)&v62 + 1))
                {
                  if (v57)
                    v45 = (uint64_t **)v57;
                  else
                    v45 = (uint64_t **)&v58;
                  pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(v45, (pxrInternal__aapl__pxrReserved__::PcpCache *)a1, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v53 + 13), (uint64_t *)v53 + 31, (uint64_t)(v53 + 28));
                }
              }
              else
              {
                v53 = 0;
                v54 = 0;
              }
              v46 = v54;
              if (v54)
              {
                v47 = (unint64_t *)&v54->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              v38 += 16;
            }
            v53 = (void **)v55;
            sub_20BDE9EB0(&v53);
            v37 = j;
          }
          v37 = *(_QWORD *)(v37 + 56);
          if (!v37)
            v37 = sub_20C216154((uint64_t)&j);
        }
      }
    }
    if (a5)
    {
      sub_20BE7598C(a5);
      *(_OWORD *)a5 = v64;
      a5[2] = v65;
      v65 = 0;
      v64 = 0uLL;
    }
    if (a6)
    {
      sub_20BE7598C(a6);
      *(_OWORD *)a6 = v62;
      a6[2] = v63;
      v63 = 0;
      v62 = 0uLL;
    }
    sub_20C21DA80(&v57, v29, v30);
  }
  v57 = (void **)&v62;
  sub_20BDE5038(&v57);
  v57 = (void **)&v64;
  sub_20BDE5038(&v57);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v66);
}

void sub_20C218684(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;

  sub_20C21DA80(&a21, a2, a3);
  a21 = (void **)(v21 - 208);
  sub_20BDE5038(&a21);
  a21 = (void **)(v21 - 176);
  sub_20BDE5038(&a21);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v21 - 144));
  _Unwind_Resume(a1);
}

char *sub_20C2187AC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;

  v2 = (_QWORD **)*((_QWORD *)result + 4);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v2)
    return sub_20C20D4C4((char *)a2, *v2, v2[1], ((char *)v2[1] - (char *)*v2) >> 4);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetMutedLayers(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8((uint64_t *)this + 25);
  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetMutedLayers(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t IsLayerMuted;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;

  sub_20C1034E8(&v11, a1);
  v4 = sub_20C215BB8(a1 + 25);
  IsLayerMuted = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::IsLayerMuted(v4, &v11, a2, 0);
  v6 = v12;
  if (v12)
  {
    v7 = (unsigned int *)(v12 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return IsLayerMuted;
}

void sub_20C218870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;

  v7 = sub_20C215BB8((uint64_t *)(a1 + 200));
  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::IsLayerMuted(v7, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[3];
  __int128 v13;
  std::string __p;
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0u;
  memset(&__p, 0, sizeof(__p));
  v15 = 1;
  *(_QWORD *)&v10 = this;
  *((_QWORD *)&v10 + 1) = (char *)this + 176;
  v11 = (unint64_t)this + 136;
  v4 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_CULLING);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::PCP_CULLING);
    v4 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_CULLING);
  }
  LOBYTE(v15) = *v4;
  std::string::operator=(&__p, (const std::string *)((char *)this + 104));
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v11;
  v5 = v12;
  v6 = v13;
  if (!(_QWORD)v13)
    goto LABEL_6;
  if ((_QWORD *)v13 != v12)
  {
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 16))();
LABEL_6:
    *(_QWORD *)(a2 + 56) = v6;
    goto LABEL_8;
  }
  *(_QWORD *)(a2 + 56) = a2 + 32;
  (*(void (**)(_QWORD *, uint64_t))(v12[0] + 24))(v12, a2 + 32);
LABEL_8:
  *(_QWORD *)(a2 + 64) = *((_QWORD *)&v13 + 1);
  v7 = (_BYTE *)(a2 + 72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20BDDBFAC(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_WORD *)(a2 + 96) = v15;
    if (v8 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 88) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_WORD *)(a2 + 96) = v15;
  }
  if ((_QWORD *)v13 == v12)
  {
    v9 = 4;
  }
  else
  {
    if (!(_QWORD)v13)
      return;
    v9 = 5;
    v5 = (_QWORD *)v13;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

void sub_20C218A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v9 + 56);
  if (v12 == v10)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
    v10 = *(_QWORD **)(v9 + 56);
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v13))(v10);
LABEL_6:
  sub_20C218AA8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C218AA8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(_QWORD **)(a1 + 56);
  if (v2 == (_QWORD *)(a1 + 32))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 32);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;

  v8 = (const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8((uint64_t *)(a1 + 200));
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindOrCreate(v8, a2, a3, a4);
  v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, a1 + 16))
    {
      v10 = *v9;
      *v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a4;
      sub_20BF1DD04(a4);
      sub_20BF1D8F4(a1 + 128, v10);
    }
  }
}

void sub_20C218B8C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20C2012CC(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex(uint64_t a1, unsigned int *a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_20C215C80((_QWORD *)(a1 + 208), a2);
  if (!v2)
    return 0;
  v4 = v2[1];
  result = v2 + 1;
  if (!v4)
    return 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpCache::_GetPrimIndex(uint64_t a1, unsigned int *a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_20C215C80((_QWORD *)(a1 + 208), a2);
  if (!v2)
    return 0;
  v4 = v2[1];
  result = v2 + 1;
  if (!v4)
    return 0;
  return result;
}

{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_20C215C80((_QWORD *)(a1 + 208), a2);
  if (!v2)
    return 0;
  v4 = v2[1];
  result = v2 + 1;
  if (!v4)
    return 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeRelationshipTargetPaths(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, int a4, _QWORD *a5, char a6, _QWORD *a7, uint64_t *a8)
{
  char *v16;
  const char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  const char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  const char *Text;
  void **v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  __int128 v36[3];
  char v37;
  void **v38;

  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) != 0)
  {
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v28, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), this);
    v16 = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, this, a8);
    pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v16, 8, a4, a5, a6, a1, v36, a7, a8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
    sub_20BFD265C(&v34);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v33);
    v38 = (void **)&v32;
    sub_20BDE9EB0(&v38);
    v17 = v31;
    if (v31)
    {
      v18 = (unsigned int *)(v31 + 8);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(const char *))(*(_QWORD *)v17 + 8))(v17);
    }
    v21 = v29;
    if (v29)
    {
      v22 = (unsigned int *)(v29 + 8);
      do
      {
        v23 = __ldxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(const char *))(*(_QWORD *)v21 + 8))(v21);
    }
    v25 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v36[0];
    v36[0] = v25;
    v26 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v36[1];
    *(_QWORD *)&v36[1] = v26;
    v28 = (void **)&v36[1] + 1;
    sub_20BDE9EB0(&v28);
    v28 = (void **)v36;
    sub_20BFD6F90(&v28);
  }
  else
  {
    v28 = (void **)"pcp/cache.cpp";
    v29 = "ComputeRelationshipTargetPaths";
    v30 = 437;
    v31 = "void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeRelationshipTargetPaths(const SdfPath &, SdfPathVector"
          " *, BOOL, const SdfSpecHandle &, BOOL, SdfPathVector *, PcpErrorVector *)";
    v32 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a relationship path", Text);
  }
}

void sub_20C218DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20C219018((void **)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex(pxrInternal__aapl__pxrReserved__::PcpCache *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t *a3)
{
  unsigned __int8 v6;
  char *v7;
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;

  v6 = atomic_load((unsigned __int8 *)&qword_2549880F0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2549880F0))
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&unk_2549880D0);
    __cxa_atexit((void (*)(void *))sub_20C21C2CC, &unk_2549880D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549880F0);
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) == 0)
  {
    v9 = "pcp/cache.cpp";
    v10 = "ComputePropertyIndex";
    v11 = 1763;
    v12 = "const PcpPropertyIndex &pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex(const SdfPath &, PcpErrorVector *)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a property path");
    return (char *)&unk_2549880D0;
  }
  if (*((_BYTE *)a1 + 96))
  {
    v9 = "pcp/cache.cpp";
    v10 = "ComputePropertyIndex";
    v11 = 1776;
    v12 = "const PcpPropertyIndex &pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex(const SdfPath &, PcpErrorVector *)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"PcpCache will not compute a cached property index in USD mode; use PcpBuildPro"
                                          "pertyIndex() instead.  Path was <%s>");
    return (char *)&unk_2549880D0;
  }
  v7 = sub_20C21D1B0((uint64_t)a1 + 248, this);
  if (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v7))
    pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(this, a1, (uint64_t)v7, a3);
  return v7;
}

void sub_20C218F54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549880F0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C218F6C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 84));
  sub_20BFD265C((_DWORD *)(a1 + 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  v11 = (void **)(a1 + 32);
  sub_20BDE9EB0(&v11);
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

void **sub_20C219018(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_20BDE9EB0(&v3);
  v3 = a1;
  sub_20BFD6F90(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeAttributeConnectionPaths(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, int a4, _QWORD *a5, char a6, _QWORD *a7, uint64_t *a8)
{
  char *v16;
  const char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  const char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  const char *Text;
  void **v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  __int128 v36[3];
  char v37;
  void **v38;

  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) != 0)
  {
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v28, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), this);
    v16 = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, this, a8);
    pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v16, 1, a4, a5, a6, a1, v36, a7, a8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
    sub_20BFD265C(&v34);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v33);
    v38 = (void **)&v32;
    sub_20BDE9EB0(&v38);
    v17 = v31;
    if (v31)
    {
      v18 = (unsigned int *)(v31 + 8);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(const char *))(*(_QWORD *)v17 + 8))(v17);
    }
    v21 = v29;
    if (v29)
    {
      v22 = (unsigned int *)(v29 + 8);
      do
      {
        v23 = __ldxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(const char *))(*(_QWORD *)v21 + 8))(v21);
    }
    v25 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v36[0];
    v36[0] = v25;
    v26 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v36[1];
    *(_QWORD *)&v36[1] = v26;
    v28 = (void **)&v36[1] + 1;
    sub_20BDE9EB0(&v28);
    v28 = (void **)v36;
    sub_20BFD6F90(&v28);
  }
  else
  {
    v28 = (void **)"pcp/cache.cpp";
    v29 = "ComputeAttributeConnectionPaths";
    v30 = 464;
    v31 = "void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeAttributeConnectionPaths(const SdfPath &, SdfPathVecto"
          "r *, BOOL, const SdfSpecHandle &, BOOL, SdfPathVector *, PcpErrorVector *)";
    v32 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be an attribute path", Text);
  }
}

void sub_20C219238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20C219018((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = sub_20C2161D0((_QWORD *)this + 31, (unsigned int *)a2);
  if (result)
  {
    v3 = result + 1;
    if (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(result + 1)))
      return 0;
    else
      return v3;
  }
  return result;
}

{
  _QWORD *result;
  _QWORD *v3;

  result = sub_20C2161D0((_QWORD *)this + 31, (unsigned int *)a2);
  if (result)
  {
    v3 = result + 1;
    if (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(result + 1)))
      return 0;
    else
      return v3;
  }
  return result;
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayers@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **result;
  uint64_t *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t *v10;
  uint64_t *v11;

  result = (uint64_t **)pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedLayers(*((_QWORD *)this + 36), a2, a3, a4);
  v8 = *((_QWORD *)this + 16);
  v7 = (uint64_t *)((char *)this + 128);
  if (v8)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v7);
    result = (uint64_t **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
    v10 = *result;
    v11 = result[1];
    if (*result != v11)
    {
      do
        result = (uint64_t **)sub_20C2030D4((uint64_t **)a4, (_QWORD *)(a4 + 8), v10++);
      while (v10 != v11);
    }
  }
  return result;
}

void sub_20C219308(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFF29AC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayersRevision(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 36) + 40);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedRootLayers@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedRootLayers(*((_QWORD *)this + 36), a2, a3, (uint64_t)a4);
  sub_20C1034E8(&v10, (uint64_t *)this);
  sub_20C22193C(a4, (uint64_t)&v10, (uint64_t)&v10);
  result = v11;
  if (v11)
  {
    v7 = (unsigned int *)(v11 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C2193AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  sub_20BFF29AC(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t AllUsingLayer;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *LayerOffsetForLayer;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v27[3];
  _BYTE v28[40];
  __int128 v29;
  void **v30;
  int v31;
  int v32;
  _BYTE v33[56];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v10 = sub_20C215BB8(a1 + 25);
  AllUsingLayer = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingLayer(v10, (uint64_t)a2);
  v12 = *(uint64_t **)AllUsingLayer;
  v20 = *(uint64_t **)(AllUsingLayer + 8);
  if (*(uint64_t **)AllUsingLayer != v20)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a1, v12, a3, a4, a5, a6, a7, v27);
      v14 = v27[0];
      v13 = v27[1];
      while (v14 != v13)
      {
        sub_20C21A06C((uint64_t)&v30, v14);
        v15 = (_QWORD *)sub_20C1FF3C0(v12);
        LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v15, a2);
        if (LayerOffsetForLayer)
        {
          pxrInternal__aapl__pxrReserved__::PcpMapFunction::ComposeOffset((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v33, LayerOffsetForLayer, (uint64_t)v28);
          v17 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v33);
          sub_20C201ECC(v17, (uint64_t)v28);
          *(_OWORD *)&v33[40] = v29;
          sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v28);
        }
        v18 = a8[1];
        if (v18 >= a8[2])
        {
          v19 = sub_20C221A8C(a8, (uint64_t)&v30);
        }
        else
        {
          sub_20C221BB0((uint64_t)(a8 + 2), a8[1], (uint64_t)&v30);
          v19 = v18 + 72;
          a8[1] = v18 + 72;
        }
        a8[1] = v19;
        sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v33);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
        sub_20BFD265C(&v31);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
        sub_20BFD265C(&v30);
        v14 += 72;
      }
      v30 = (void **)v27;
      sub_20C2219C0(&v30);
      v12 += 2;
    }
    while (v12 != v20);
  }
}

void sub_20C2195D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  sub_20C2219C0(&a28);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(_QWORD *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  unsigned __int8 *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  char v21;
  void **v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  void **i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  _QWORD *v29;
  pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  int64x2_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  void **j;
  void **v60;
  int64x2_t v61;
  _QWORD v62[2];
  uint64_t *v63;
  __int128 v64;
  _QWORD v65[7];
  int *v66;
  int v67;
  int v68;
  _QWORD *v69;
  char v70;
  int v71;
  void **v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  char v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v71 = a4;
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  if ((a4 & 0x30) != 0)
  {
    if ((a4 & 0xF) != 0)
    {
      if ((a4 & 0x21) == 1)
      {
        v72 = (void **)"pcp/cache.cpp";
        v73 = "FindSiteDependencies";
        v74 = 650;
        v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStackPt"
              "r &, const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
        v76 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"depMask of PcpDependencyTypeRoot requires PcpDependencyTypeNonVirtual");
      }
      else
      {
        v15 = sub_20C1FF3C0(a2);
        if (sub_20C1020E4((_QWORD *)(v15 + 104), a1 + 25))
        {
          v69 = a1;
          v70 = a7;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v67);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v68);
          v66 = a3;
          v16 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
          if ((v16 & 1) == 0)
          {
            if (*(_QWORD *)a3 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v16))
            {
              sub_20BFD6E54(&v72, a3);
              sub_20BFD6EA4((_DWORD *)&v72 + 1, a3 + 1);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v72);
            }
            sub_20C01A074(&v67, &v72);
            sub_20C01A0C8(&v68, (_DWORD *)&v72 + 1);
            sub_20BFD1A18(&v72);
            v66 = &v67;
          }
          if ((v71 & 1) != 0
            && sub_20C1020E4(a2, a1 + 16)
            && (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)a3) & 1) == 0
            && sub_20C21A1C0((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3))
          {
            sub_20BFD6E54(&v72, a3);
            sub_20BFD6EA4((_DWORD *)&v72 + 1, a3 + 1);
            sub_20BFD6E54(&v73, a3);
            v17 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)sub_20BFD6EA4((_DWORD *)&v73 + 1, a3 + 1);
            v18 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity(v17);
            sub_20C20123C(&v74, v18);
            v77 = *(_OWORD *)(v18 + 40);
            sub_20C21A11C(a8, (uint64_t)&v72);
            sub_20C21A178(&v72);
          }
          v65[0] = &v66;
          v65[1] = a3;
          v65[2] = &v71;
          v65[3] = &v69;
          v65[4] = a8;
          v65[5] = a2;
          v65[6] = a1;
          v19 = (_QWORD *)a1[36];
          v20 = (unsigned int *)v66;
          v21 = v71;
          v22 = (void **)a2[1];
          if (v22)
          {
            if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
              v22 = (void **)*a2;
            else
              v22 = 0;
          }
          v72 = v22;
          sub_20BF1DD04((uint64_t *)&v72);
          v23 = sub_20BEDA270(v19, &v72);
          sub_20C2012CC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v72);
          if (v23)
          {
            v24 = v23 + 3;
            if (a5)
            {
              v73 = 0;
              v72 = (void **)sub_20C200D44(v23 + 3, v20);
              v25 = sub_20C200DAC((uint64_t)&v72);
              for (i = v72; i != (void **)v25; v72 = i)
              {
                v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)i[1];
                v28 = (pxrInternal__aapl__pxrReserved__::SdfPath *)i[2];
                if (v27 != v28)
                {
                  do
                  {
                    sub_20C221E38((uint64_t)v65, v27, (pxrInternal__aapl__pxrReserved__::SdfPath *)v72);
                    v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
                  }
                  while (v27 != v28);
                  i = v72;
                }
                i = (void **)i[5];
                if (!i)
                  i = (void **)sub_20C200DAC((uint64_t)&v72);
              }
            }
            else
            {
              v29 = sub_20C200D44(v23 + 3, v20);
              if (v29)
              {
                v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v29[1];
                v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v29[2];
                while (v30 != v31)
                {
                  sub_20C221E38((uint64_t)v65, v30, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20);
                  v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v30 + 8);
                }
              }
            }
            if ((v21 & 8) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v20, &v72);
              while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v72))
              {
                v32 = sub_20C200D44(v24, (unsigned int *)&v72);
                if (v32)
                {
                  v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v32[1];
                  v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v32[2];
                  while (v33 != v34)
                  {
                    sub_20C221E38((uint64_t)v65, v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
                    v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8);
                  }
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, &v63);
                sub_20BFD3EBC((int *)&v72, (int *)&v63);
                sub_20BFD3F10((int *)&v72 + 1, (int *)&v63 + 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
                sub_20BFD265C(&v63);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
              sub_20BFD265C(&v72);
            }
          }
          if (a6)
          {
            v35 = 0uLL;
            v64 = 0u;
            v63 = (uint64_t *)&v64;
            v62[0] = 0;
            v61 = 0u;
            v36 = *a8;
            v57 = a8[1];
            if (*a8 == v57)
            {
              v55 = 0;
              v54 = vdupq_n_s64(v36);
            }
            else
            {
              do
              {
                v37 = (_QWORD *)v64;
                v38 = (uint64_t *)&v64;
                if ((_QWORD)v64)
                {
                  v38 = (uint64_t *)&v64;
                  do
                  {
                    v39 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v37 + 28));
                    v40 = v37 + 1;
                    if (v39)
                    {
                      v40 = v37;
                      v38 = v37;
                    }
                    v37 = (_QWORD *)*v40;
                  }
                  while (*v40);
                }
                if (v38 == v63)
                  goto LABEL_55;
                v41 = *v38;
                if (*v38)
                {
                  do
                  {
                    v42 = (uint64_t *)v41;
                    v41 = *(_QWORD *)(v41 + 8);
                  }
                  while (v41);
                }
                else
                {
                  do
                  {
                    v42 = (uint64_t *)v38[2];
                    v43 = *v42 == (_QWORD)v38;
                    v38 = v42;
                  }
                  while (v43);
                }
                if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28)))
                {
LABEL_55:
                  sub_20C0A7BE0(&v63, (pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (_DWORD *)v36);
                  v44 = v61.i64[1];
                  if (v61.i64[1] >= v62[0])
                  {
                    v45 = sub_20C222AE4(v61.i64, v36);
                  }
                  else
                  {
                    sub_20C21A06C(v61.i64[1], v36);
                    v45 = v44 + 72;
                  }
                  v61.i64[1] = v45;
                  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v36))
                  {
                    v73 = 0;
                    v72 = (void **)sub_20C215C80(a1 + 26, (unsigned int *)v36);
                    v46 = (void **)sub_20C216154((uint64_t)&v72);
                    j = v72;
                    v60 = v46;
                    if (v46 != v72)
                    {
                      v47 = (void **)v72[7];
                      if (!v47)
                      {
                        v47 = (void **)sub_20C216154((uint64_t)&j);
                        v46 = v60;
                      }
                      v58 = v47;
                      j = v47;
                      if (v46 != v47)
                      {
                        do
                        {
                          if (v47[1])
                          {
                            sub_20BFD6E54(&v72, v47);
                            sub_20BFD6EA4((_DWORD *)&v72 + 1, (_DWORD *)v47 + 1);
                            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v36 + 8), 1);
                            sub_20C20123C(&v74, v36 + 16);
                            v77 = *(_OWORD *)(v36 + 56);
                            v48 = v61.i64[1];
                            if (v61.i64[1] >= v62[0])
                            {
                              v49 = sub_20C221A8C(v61.i64, (uint64_t)&v72);
                            }
                            else
                            {
                              sub_20C221BB0((uint64_t)v62, v61.i64[1], (uint64_t)&v72);
                              v49 = v48 + 72;
                            }
                            v61.i64[1] = v49;
                            sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v74);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
                            sub_20BFD265C(&v73);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
                            sub_20BFD265C(&v72);
                            v47 = v58;
                          }
                          v47 = (void **)v47[7];
                          if (!v47)
                            v47 = (void **)sub_20C216154((uint64_t)&v58);
                          v58 = v47;
                        }
                        while (v60 != v47);
                      }
                    }
                  }
                  v73 = 0;
                  v72 = (void **)sub_20C2161D0(a1 + 31, (unsigned int *)v36);
                  v50 = sub_20C216238((uint64_t)&v72);
                  v51 = v72;
                  for (j = v72; v51 != (void **)v50; j = v51)
                  {
                    if (!pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(v51 + 1)))
                    {
                      sub_20BFD6E54(&v72, v51);
                      sub_20BFD6EA4((_DWORD *)&v72 + 1, (_DWORD *)v51 + 1);
                      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v36 + 8), 1);
                      sub_20C20123C(&v74, v36 + 16);
                      v77 = *(_OWORD *)(v36 + 56);
                      v52 = v61.i64[1];
                      if (v61.i64[1] >= v62[0])
                      {
                        v53 = sub_20C221A8C(v61.i64, (uint64_t)&v72);
                      }
                      else
                      {
                        sub_20C221BB0((uint64_t)v62, v61.i64[1], (uint64_t)&v72);
                        v53 = v52 + 72;
                      }
                      v61.i64[1] = v53;
                      sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v74);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
                      sub_20BFD265C(&v73);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
                      sub_20BFD265C(&v72);
                    }
                    v51 = (void **)j[6];
                    if (!v51)
                      v51 = (void **)sub_20C216238((uint64_t)&j);
                  }
                }
                v36 += 72;
              }
              while (v36 != v57);
              v54 = *(int64x2_t *)a8;
              v35 = v61;
              v55 = v62[0];
            }
            *(int64x2_t *)a8 = v35;
            v61 = v54;
            v56 = a8[2];
            a8[2] = v55;
            v62[0] = v56;
            v72 = (void **)&v61;
            sub_20C2219C0(&v72);
            sub_20BFD7C28((uint64_t)&v63, (_QWORD *)v64);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
          sub_20BFD265C(&v67);
        }
        else
        {
          v72 = (void **)"pcp/cache.cpp";
          v73 = "FindSiteDependencies";
          v74 = 654;
          v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStack"
                "Ptr &, const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
          v76 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"PcpLayerStack does not belong to this PcpCache");
        }
      }
    }
    else
    {
      v72 = (void **)"pcp/cache.cpp";
      v73 = "FindSiteDependencies";
      v74 = 643;
      v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStackPtr "
            "&, const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
      v76 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"depMask must include at least one of {PcpDependencyTypeRoot, PcpDependencyTypePurelyDirect, PcpDependencyTypePartlyDirect, PcpDependencyTypeAncestral}");
    }
  }
  else
  {
    v72 = (void **)"pcp/cache.cpp";
    v73 = "FindSiteDependencies";
    v74 = 634;
    v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStackPtr &,"
          " const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
    v76 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"depMask must include at least one of {PcpDependencyTypeVirtual, PcpDependencyTypeNonVirtual}");
  }
}

void sub_20C219EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  uint64_t v28;

  sub_20BFD1A18((_DWORD *)(v28 - 200));
  a28 = a11;
  sub_20C2219C0(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21A06C(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  sub_20BFD6E54((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  sub_20C20123C((_DWORD *)(a1 + 16), a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

void sub_20C21A0E8(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_20BFD265C(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21A11C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = sub_20C221A8C(a1, a2);
  }
  else
  {
    sub_20C221BB0(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 72;
    a1[1] = v5 + 72;
  }
  a1[1] = result;
  return result;
}

void sub_20C21A170(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20C21A178(_DWORD *a1)
{
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C21A1C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::PcpCache *v3;
  _QWORD *v4;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 1;
  v3 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)a1;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this))
  {
    v4 = sub_20C215C80((_QWORD *)v3 + 26, (unsigned int *)this);
    return v4 && v4[1];
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
    if ((_DWORD)result)
      return pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(v3, this) != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::CanHaveOpinionForSite(uint64_t a1, unsigned int *a2, _QWORD *a3, int *a4)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *LayerStack;
  char v15;
  char v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _DWORD *Path;
  uint64_t v27[3];
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34[2];

  result = (uint64_t)sub_20C215C80((_QWORD *)(a1 + 208), a2);
  if (result)
  {
    v8 = *(_QWORD *)(result + 8);
    v7 = (uint64_t *)(result + 8);
    if (v8)
    {
      v34[0] = 0;
      v34[1] = 0;
      v33 = (uint64_t *)v34;
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v7, 6u, &v29);
      v9 = v29;
      v10 = v30;
      v11 = v31;
      v12 = v32;
      if (v29 != v31 || v30 != v32)
      {
        do
        {
          v28[0] = v9;
          v28[1] = v10;
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28))
          {
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28);
            sub_20C2033F4(v27, LayerStack);
            sub_20C22193C(&v33, (uint64_t)v27, (uint64_t)v27);
            v16 = v15;
            v17 = v27[1];
            if (v27[1])
            {
              v18 = (unsigned int *)(v27[1] + 8);
              do
              {
                v19 = __ldxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
                (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            }
            if ((v16 & 1) != 0)
            {
              v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28);
              v22 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v21);
              *(_OWORD *)v27 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v22);
              while (v27[0] != v27[1])
              {
                v25 = (_QWORD *)sub_20C21A438(v27, v23, v24);
                if (sub_20C1020E4(a3, v25))
                {
                  if (a4)
                  {
                    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v28);
                    sub_20C01A074(a4, Path);
                    sub_20C01A0C8(a4 + 1, Path + 1);
                  }
                  sub_20BFF29AC((uint64_t)&v33, v34[0]);
                  return 1;
                }
                sub_20C21A4B4(v27);
              }
            }
          }
          ++v10;
        }
        while (v9 != v11 || v10 != v12);
      }
      sub_20BFF29AC((uint64_t)&v33, v34[0]);
    }
    return 0;
  }
  return result;
}

void sub_20C21A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_20BFF29AC((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21A438(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = const std::vector<pxrInternal__aapl_"
            "_pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C21A4AC()
{
  JUMPOUT(0x20C21A45CLL);
}

_QWORD *sub_20C21A4B4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = const std::vector<pxr"
            "Internal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidSublayerIdentifiers(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const void **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  __int128 j;
  _OWORD v19[2];
  __int128 i;
  uint64_t v21[3];
  char **v22;
  char *v23[2];

  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  v3 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8((uint64_t *)this + 25);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(v3, v21);
  for (i = *(_OWORD *)v21; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C21A88C(&i))
  {
    v6 = (uint64_t *)sub_20C21A718((uint64_t *)&i, v4, v5);
    v7 = (char *)sub_20C1FF3C0(v6);
    sub_20C20C368(v7, (uint64_t)v19);
    for (j = v19[0]; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C21A810(&j))
    {
      v10 = sub_20C21A794((uint64_t *)&j, v8, v9);
      if (*(_QWORD *)v10)
      {
        if (v11)
        {
          v12 = *(std::__shared_weak_count **)(v10 + 8);
          v17 = v12;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(p_shared_owners);
            while (__stxr(v14 + 1, p_shared_owners));
          }
          sub_20BE74FC0((uint64_t **)&v22, v11 + 15, (uint64_t)(v11 + 15));
          if (v17)
          {
            v15 = (unint64_t *)&v17->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
      }
    }
    *(_QWORD *)&j = v19;
    sub_20BDE9EB0((void ***)&j);
  }
  sub_20C222C00(a2, v22, v23);
  *(_QWORD *)&v19[0] = v21;
  sub_20BEB4844((void ***)v19);
  sub_20BDECAB8((uint64_t)&v22, v23[0]);
}

void sub_20C21A6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  a13 = (void **)&a19;
  sub_20BEB4844(&a13);
  sub_20BDECAB8(v19 - 72, *(char **)(v19 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C21A718(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfWeakP"
            "tr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C21A78C()
{
  JUMPOUT(0x20C21A73CLL);
}

uint64_t sub_20C21A794(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal__aapl__pxrRes"
            "erved__::PcpErrorBase>>>::operator*() [T = std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Pcp"
            "ErrorBase>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C21A808()
{
  JUMPOUT(0x20C21A7B8);
}

_QWORD *sub_20C21A810(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal"
            "__aapl__pxrReserved__::PcpErrorBase>>>::operator++() [T = std::vector<std::shared_ptr<pxrInternal__aapl__pxr"
            "Reserved__::PcpErrorBase>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_QWORD *sub_20C21A88C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator++() [T = std::vector<pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsInvalidSublayerIdentifier(pxrInternal__aapl__pxrReserved__::PcpCache *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidSublayerIdentifiers(a1, &v6);
  v3 = sub_20C020210(v6, v7, a2);
  v4 = v3 != v7;
  v8 = (void **)&v6;
  sub_20BDE5038(&v8);
  return v4;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidAssetPaths@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  std::__shared_weak_count *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD *v31;
  _DWORD *v32;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  result = sub_20C215C40((pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 208));
  v30 = result;
  v31 = 0;
  while (v30 != v31)
  {
    v6 = (_DWORD *)*sub_20C215798(&v30, v4, v5);
    v9 = *sub_20C215798(&v30, v7, v8);
    v11 = *(_QWORD *)(v9 + 8);
    v10 = (char *)(v9 + 8);
    if (v11)
    {
      sub_20C2187AC(v10, (uint64_t)v29);
      v12 = v29[0];
      v13 = v29[1];
      while (v12 != v13)
      {
        if (*(_QWORD *)v12)
        {
          if (v14)
          {
            v15 = v14;
            v16 = *(std::__shared_weak_count **)(v12 + 8);
            v27 = v14;
            v28 = v16;
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldxr(p_shared_owners);
              while (__stxr(v18 + 1, p_shared_owners));
            }
            v32 = v6;
            v19 = sub_20C222D98((uint64_t **)a2, (unint64_t *)v6, (uint64_t)&unk_20CAC184C, &v32);
            v20 = (uint64_t *)(v19 + 5);
            v21 = (__int128 *)(v15 + 28);
            v22 = v19[6];
            if (v22 >= v19[7])
            {
              v23 = sub_20BE4EE50(v20, v21);
            }
            else
            {
              sub_20BE4EDF4(v20, v21);
              v23 = (uint64_t)(v22 + 3);
            }
            v19[6] = (uint64_t *)v23;
            v24 = v28;
            if (v28)
            {
              v25 = (unint64_t *)&v28->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
          }
        }
        v12 += 16;
      }
      v27 = (void **)v29;
      sub_20BDE9EB0(&v27);
    }
    result = sub_20C21593C((unint64_t *)&v30);
  }
  return result;
}

void sub_20C21AAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C222D08(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsInvalidAssetPath(pxrInternal__aapl__pxrReserved__::PcpCache *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  char *v4;
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  __int128 i;
  _QWORD **v17;
  _QWORD **v18;
  _QWORD **v19;
  _QWORD *v20;

  pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidAssetPaths(a1, (uint64_t)&v19);
  v17 = v19;
  v18 = &v20;
  while (1)
  {
    v5 = v17;
    v6 = v18;
    if (v17 == v18)
      break;
    for (i = *(_OWORD *)(*sub_20C21AC80(&v17, v3, v4) + 40); (_QWORD)i != *((_QWORD *)&i + 1); sub_20BEC9CF0(&i))
    {
      v9 = (unsigned __int8 *)sub_20BEC9C74((uint64_t *)&i, v7, v8);
      v10 = v9[23];
      if ((v10 & 0x80u) == 0)
        v11 = v9[23];
      else
        v11 = *((_QWORD *)v9 + 1);
      v12 = a2[23];
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)a2 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a2;
        else
          v14 = *(unsigned __int8 **)a2;
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v9, v14, *((_QWORD *)v9 + 1)))
            goto LABEL_22;
        }
        else
        {
          if (!v9[23])
            goto LABEL_22;
          while (*v9 == *v14)
          {
            ++v9;
            ++v14;
            if (!--v10)
              goto LABEL_22;
          }
        }
      }
    }
    sub_20C21ACF8(&v17);
  }
LABEL_22:
  sub_20C222D08((uint64_t)&v19, v20);
  return v5 != v6;
}

void sub_20C21AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20C222D08((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C21AC80(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, s"
            "td::vector<std::string>, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>>::operator->() [T = std::m"
            "ap<pxrInternal__aapl__pxrReserved__::SdfPath, std::vector<std::string>, pxrInternal__aapl__pxrReserved__::Sd"
            "fPath::FastLessThan>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C21ACF8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, std::vector<std::string>, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>>::operator++"
            "() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::vector<std::string>, pxrInternal__aapl__pxr"
            "Reserved__::SdfPath::FastLessThan>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentFieldDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentFieldDependencies(this[36]);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentAttributeDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentAttributeDependencies(this[36]);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentField(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentField(this[36], a2);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentAttribute(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentAttribute(this[36], a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData(uint64_t a1, unsigned int *a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetDynamicFileFormatArgumentDependencyData(*(_QWORD *)(a1 + 288), a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimsUsingExpressionVariablesFromLayerStack(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetPrimsUsingExpressionVariablesFromLayerStack(*(_QWORD *)(a1 + 288), a2);
}

__int128 *pxrInternal__aapl__pxrReserved__::PcpCache::GetExpressionVariablesFromLayerStackUsedByPrim(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetExpressionVariablesFromLayerStackUsedByPrim(*(_QWORD *)(a1 + 288), a2, a3);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::Apply(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  int *v19;
  int *v20;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v21;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int *v27;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v29;
  void **v30;
  void **v31;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v32;
  uint64_t v33;
  char *v34;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v36;
  _DWORD *v37;
  _DWORD *v38;
  pxrInternal__aapl__pxrReserved__::SdfPath *v39;
  _DWORD *v40;
  _DWORD *v41;
  pxrInternal__aapl__pxrReserved__::SdfPath *v42;
  _DWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v50;
  __int128 v51;
  _DWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v55;
  void **v56;
  void **v57;

  v55 = a3;
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (sub_20C222ED4(a2, v6))
  {
    sub_20C21B218((uint64_t *)(a1 + 208));
    sub_20C21B2C4((uint64_t *)(a1 + 248));
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::RemoveAll(*(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)(a1 + 288), a3);
  }
  else
  {
    if (*(_BYTE *)(a2 + 120))
      ++*(_QWORD *)(*(_QWORD *)(a1 + 288) + 40);
    v56 = *(void ***)a2;
    v57 = (void **)(a2 + 8);
    while (v56 != v57)
    {
      v28 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v56, v7, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v28))
        pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v28, v55);
      else
        pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v28, v29);
      sub_20C2180BC(&v56);
    }
    v30 = *(void ***)(a2 + 48);
    v31 = (void **)(a2 + 56);
    v56 = v30;
    v57 = (void **)(a2 + 56);
    while (v30 != v31)
    {
      v32 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v56, v7, v8);
      pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimCache((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v32, v55);
      v35 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v56, v33, v34);
      pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v35, v36);
      sub_20C2180BC(&v56);
      v30 = v56;
      v31 = v57;
    }
    v56 = (void **)a1;
    v57 = (void **)&v55;
    v37 = *(_DWORD **)(a2 + 24);
    v38 = (_DWORD *)(a2 + 32);
    v52 = v37;
    v53 = (_DWORD *)(a2 + 32);
    while (v37 != v38)
    {
      v39 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v52, v7, v8);
      sub_20C21B528((uint64_t *)&v56, v39);
      sub_20C2180BC(&v52);
      v37 = v52;
      v38 = v53;
    }
    v40 = *(_DWORD **)(a2 + 128);
    v41 = (_DWORD *)(a2 + 136);
    v52 = v40;
    v53 = (_DWORD *)(a2 + 136);
    while (v40 != v41)
    {
      v42 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C218040(&v52, v7, v8);
      sub_20C21B528((uint64_t *)&v56, v42);
      sub_20C2180BC(&v52);
      v40 = v52;
      v41 = v53;
    }
    v43 = *(_DWORD **)(a2 + 104);
    v52 = *(_DWORD **)(a2 + 96);
    v53 = v43;
    if (v52 != v43)
    {
      do
      {
        v44 = sub_20C21B670(&v52, v7, v8);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*v44 + 8)))
        {
          v47 = sub_20C21B670(&v52, v45, v46);
          pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v47 + 8), v55);
        }
        sub_20C21B6E8(&v52);
      }
      while (v52 != v53);
      v48 = *(_DWORD **)(a2 + 96);
      v49 = *(_DWORD **)(a2 + 104);
      v52 = v48;
      v53 = v49;
      while (v48 != v49)
      {
        v50 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)sub_20C21B670(&v52, v7, v8);
        pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, *v50, v55);
        sub_20C21B6E8(&v52);
        v48 = v52;
        v49 = v53;
      }
    }
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v51 = *(_OWORD *)(a2 + 96);
  v9 = a1 + 136;
  while ((_QWORD)v51 != *((_QWORD *)&v51 + 1))
  {
    v10 = *(_QWORD **)(a1 + 152);
    while (v10)
    {
      v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)sub_20C21B670(&v51, v7, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 2), *v11))
      {
        v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*sub_20C21B670(&v51, v7, v8);
        v15 = sub_20C21B670(&v51, v13, v14);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v56, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 2), v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v15 + 8), 0);
        v16 = v53;
        if ((unint64_t)v53 >= v54)
        {
          v17 = (_DWORD *)sub_20C12C530((uint64_t *)&v52, &v56);
        }
        else
        {
          sub_20BFD38A4(v53, &v56);
          sub_20BFD38DC(v16 + 1, (_DWORD *)&v56 + 1);
          v17 = v16 + 2;
        }
        v53 = v17;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
        sub_20BFD265C(&v56);
        v18 = (_QWORD *)*v10;
        sub_20BEB587C((_QWORD *)(a1 + 136), v10, (uint64_t)&v56);
        sub_20C2218AC((uint64_t)&v56, 0);
        v10 = v18;
      }
      else
      {
        v10 = (_QWORD *)*v10;
      }
    }
    v19 = v52;
    v20 = v53;
    while (v19 != v20)
    {
      v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)sub_20C21B670(&v51, v7, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v19, *v21))
      {
        v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*sub_20C21B670(&v51, v7, v8);
        v25 = sub_20C21B670(&v51, v23, v24);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v56, (pxrInternal__aapl__pxrReserved__::SdfPath *)v19, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v25 + 8), 0);
        sub_20BFD3EBC(v19, (int *)&v56);
        sub_20BFD3F10(v19 + 1, (int *)&v56 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
        sub_20BFD265C(&v56);
      }
      v19 += 2;
    }
    sub_20C21B6E8(&v51);
  }
  v26 = v52;
  v27 = v53;
  while (v26 != v27)
  {
    sub_20C2215D8(v9, v26, v26);
    v26 += 2;
  }
  v56 = (void **)&v52;
  sub_20BFD6F90(&v56);
}

void sub_20C21B1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a12;
  sub_20BFD6F90(&a16);
  _Unwind_Resume(a1);
}

void sub_20C21B218(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;

  v2 = a1[1] - *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 3;
    do
    {
      v5 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 48);
          sub_20BF1C150((void ***)(v6 + 40), 0);
          v8 = *(void **)(v6 + 16);
          if (v8)
          {
            *(_QWORD *)(v6 + 24) = v8;
            operator delete(v8);
          }
          sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v6 + 8));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          v9 = sub_20BFD265C((_DWORD *)v6);
          operator delete(v9);
          v6 = v7;
        }
        while (v7);
        v5 = *a1;
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

void sub_20C21B2C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void **v9;

  v2 = a1[1] - *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 3;
    do
    {
      v5 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 40);
          sub_20BF1C150((void ***)(v6 + 32), 0);
          v9 = (void **)(v6 + 8);
          sub_20C21DAE8(&v9);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          v8 = sub_20BFD265C((_DWORD *)v6);
          operator delete(v8);
          v6 = v7;
        }
        while (v7);
        v5 = *a1;
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v6 = (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 208);
  v12 = 0;
  v11 = sub_20C215C80((_QWORD *)this + 26, (unsigned int *)a2);
  v8 = sub_20C216154((uint64_t)&v11);
  v9 = (unint64_t)v11;
  v12 = v8;
  v10 = (uint64_t)v11;
  if ((_QWORD *)v8 != v11)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(*((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)this + 36), (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(v9 + 8), a3);
      v9 = *(_QWORD *)(v10 + 56);
      if (!v9)
        v9 = sub_20C216154((uint64_t)&v10);
      v10 = v9;
    }
    while (v12 != v9);
    if (v11 != (_QWORD *)v9)
      sub_20C21C21C(v6, (uint64_t *)&v11);
  }
  pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches(this, a2, v7);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  _QWORD *v4;
  unint64_t v5;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 248);
  v5 = 0;
  v4 = sub_20C2161D0((_QWORD *)this + 31, (unsigned int *)a2);
  v5 = sub_20C216238((uint64_t)&v4);
  if ((_QWORD *)v5 != v4)
    sub_20C21C30C(v3, (uint64_t *)&v4);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimCache(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  void *__p;
  void *v10;
  void **v11;

  result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20C215C80((_QWORD *)this + 26, (unsigned int *)a2);
  if (result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *)*((_QWORD *)this + 36);
    v7 = (uint64_t *)(result + 1);
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(v6, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(result + 1), a3);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v8);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap(v7, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v8);
    sub_20BF1C150(&v11, 0);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    return sub_20C21DABC(&v8);
  }
  return result;
}

void sub_20C21B514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C21C1E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C21B528(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v12;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a1;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this))
  {
    v5 = sub_20C215C80((_QWORD *)(v4 + 208), (unsigned int *)this);
    if (v5)
    {
      v6 = v5 + 1;
      if (v5[1])
      {
        pxrInternal__aapl__pxrReserved__::Pcp_RescanForSpecs((pxrInternal__aapl__pxrReserved__ *)(v5 + 1), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)*(unsigned __int8 *)(v4 + 96), 1);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v6, 6u, &v15);
        v8 = v15;
        v7 = v16;
        v9 = v17;
        if (v15 == v17 && v16 == v18)
        {
LABEL_10:
          pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)v4, this, *(pxrInternal__aapl__pxrReserved__::PcpLifeboat **)a1[1]);
        }
        else
        {
          v10 = v18 - 1;
          while (1)
          {
            v11 = v7;
            v14[0] = v8;
            v14[1] = v7;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14) & 1) != 0)
              break;
            v7 = v11 + 1;
            if (v8 == v9 && v10 == v11)
              goto LABEL_10;
          }
        }
      }
    }
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCache((pxrInternal__aapl__pxrReserved__::PcpCache *)v4, this, v12);
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)v4, this, v13);
  }
}

_QWORD *sub_20C21B670(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal__aapl__pxrRes"
            "erved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator->() [T = const std::vector<std::pai"
            "r<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C21B6E8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal"
            "__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator++() [T = const std::v"
            "ector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::Reload(pxrInternal__aapl__pxrReserved__::PcpCache *this, uint64_t **a2)
{
  uint64_t *v2;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v33;
  uint64_t j;
  uint64_t v35;
  char *v36;
  __int128 i;
  void **p_i;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  uint64_t *v41;
  __int128 v42;
  _BYTE v43[48];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)((char *)this + 128);
  if (*((_QWORD *)this + 16))
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v43, (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 48));
    v5 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8((uint64_t *)this + 25);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(v5, (uint64_t *)&v42);
    for (i = v42; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C21A88C(&i))
    {
      v8 = (uint64_t *)sub_20C21A718((uint64_t *)&i, v6, v7);
      v9 = (char *)sub_20C1FF3C0(v8);
      sub_20C20C368(v9, (uint64_t)&v40);
      v10 = v40;
      v11 = v41;
      while (v10 != v11)
      {
        if (*v10)
        {
          if (v12)
          {
            v13 = v10[1];
            p_i = (void **)v12;
            v39 = (std::__shared_weak_count *)v13;
            if (v13)
            {
              v14 = (unint64_t *)(v13 + 8);
              do
                v15 = __ldxr(v14);
              while (__stxr(v15 + 1, v14));
            }
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixSublayer(a2, this, (uint64_t *)v12 + 13, (uint64_t)v12 + 120);
            v16 = v39;
            if (v39)
            {
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              do
                v18 = __ldaxr(p_shared_owners);
              while (__stlxr(v18 - 1, p_shared_owners));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
          }
        }
        v10 += 2;
      }
      p_i = (void **)&v40;
      sub_20BDE9EB0(&p_i);
    }
    for (i = (unint64_t)sub_20C215C40((pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 208));
          (_QWORD)i != *((_QWORD *)&i + 1);
          sub_20C21BB90((unint64_t *)&i))
    {
      v21 = *sub_20C21BB18(&i, v19, v20);
      v23 = *(_QWORD *)(v21 + 8);
      v22 = (char *)(v21 + 8);
      if (v23)
      {
        sub_20C2187AC(v22, (uint64_t)&v40);
        v24 = v40;
        v25 = v41;
        while (v24 != v25)
        {
          if (*v24)
          {
            if (v26)
            {
              v27 = v24[1];
              p_i = (void **)v26;
              v39 = (std::__shared_weak_count *)v27;
              if (v27)
              {
                v28 = (unint64_t *)(v27 + 8);
                do
                  v29 = __ldxr(v28);
                while (__stxr(v29 + 1, v28));
              }
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(a2, this, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v26 + 104), (uint64_t *)v26 + 31, (uint64_t)(v26 + 224));
              v30 = v39;
              if (v39)
              {
                v31 = (unint64_t *)&v39->__shared_owners_;
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                  std::__shared_weak_count::__release_weak(v30);
                }
              }
            }
          }
          v24 += 2;
        }
        p_i = (void **)&v40;
        sub_20BDE9EB0(&p_i);
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayers(this, v19, v20, (uint64_t)&v40);
    v33 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v2);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers(v33, (uint64_t *)&i);
    v35 = *((_QWORD *)&i + 1);
    for (j = i; j != v35; j += 16)
      sub_20C222F90(&v40, j);
    p_i = (void **)&i;
    sub_20BEB4844(&p_i);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers((uint64_t)&v40, 0, v36);
    sub_20BFF29AC((uint64_t)&v40, v41);
    v40 = (uint64_t *)&v42;
    sub_20BEB4844((void ***)&v40);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v43);
  }
}

void sub_20C21BA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v7;
  va_list va;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void **);
  v9 = va_arg(va1, _QWORD *);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_20BFF29AC((uint64_t)va, v9);
  va_copy((va_list)v7, va1);
  sub_20BEB4844((void ***)va);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C21BB18(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInt"
            "ernal__aapl__pxrReserved__::PcpPrimIndex>>::operator->() [T = pxrInternal__aapl__pxrReserved__::SdfPathTable"
            "<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

unint64_t *sub_20C21BB90(unint64_t *a1)
{
  unint64_t v2;
  _QWORD v4[4];
  char v5;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfPa"
            "thTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>>::operator++() [T = pxrInternal__aapl__pxrReserved__"
            "::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v2 = *(_QWORD *)(*a1 + 56);
    if (!v2)
      v2 = sub_20C216154((uint64_t)a1);
    *a1 = v2;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ReloadReferences(pxrInternal__aapl__pxrReserved__::PcpCache *this, uint64_t **a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  void **v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v43;
  uint64_t Layers;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t *v61;
  std::__shared_weak_count *v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  void **v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69[2];
  _BYTE v70[48];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v70, (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 48));
  v69[0] = 0;
  v69[1] = 0;
  v68 = (uint64_t *)v69;
  v62 = 0;
  v61 = sub_20C215C80((_QWORD *)this + 26, (unsigned int *)a3);
  v7 = (uint64_t *)sub_20C216154((uint64_t)&v61);
  v8 = v61;
  v67 = v61;
  if (v61 != v7)
  {
    v54 = v7;
    do
    {
      v9 = v8 + 1;
      if (v8[1])
      {
        sub_20C2187AC((char *)v8 + 8, (uint64_t)&v65);
        v10 = v65;
        v11 = (void **)&v66->__vftable;
        while (v10 != v11)
        {
          if (*v10)
          {
            if (v12)
            {
              v13 = (std::__shared_weak_count *)v10[1];
              v61 = v12;
              v62 = v13;
              if (v13)
              {
                p_shared_owners = (unint64_t *)&v13->__shared_owners_;
                do
                  v15 = __ldxr(p_shared_owners);
                while (__stxr(v15 + 1, p_shared_owners));
              }
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(a2, this, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v12 + 13), v12 + 31, (uint64_t)(v12 + 28));
              v16 = v62;
              if (v62)
              {
                v17 = (unint64_t *)&v62->__shared_owners_;
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 - 1, v17));
                if (!v18)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
              }
            }
          }
          v10 += 2;
        }
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v9, 6u, (uint64_t *)&v61);
        v19 = v61;
        v20 = &v62->__vftable;
        v22 = v63;
        v21 = &v64->__vftable;
        v23 = v61 == v63 && v62 == v64;
        if (!v23)
        {
          do
          {
            v60[0] = v19;
            v60[1] = v20;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v60, (uint64_t)&v55);
            sub_20C2033F4(&v58, (uint64_t *)&v55);
            sub_20C22193C(&v68, (uint64_t)&v58, (uint64_t)&v58);
            v24 = v59;
            if (v59)
            {
              v25 = (unsigned int *)(v59 + 8);
              do
              {
                v26 = __ldxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
            sub_20BFD265C(&v56);
            sub_20C2012CC(&v55);
            v20 = (_QWORD *)((char *)v20 + 1);
          }
          while (v19 != v22 || v20 != v21);
        }
        v61 = (uint64_t *)&v65;
        sub_20BDE9EB0((void ***)&v61);
        v8 = v67;
        v7 = v54;
      }
      v8 = (uint64_t *)v8[7];
      if (!v8)
        v8 = (uint64_t *)sub_20C216154((uint64_t)&v67);
      v67 = v8;
    }
    while (v8 != v7);
  }
  v28 = v68;
  if (v68 == (uint64_t *)v69)
  {
    v62 = 0;
    v63 = 0;
    v61 = (uint64_t *)&v62;
  }
  else
  {
    do
    {
      v29 = (char *)sub_20C1FF3C0(v28 + 4);
      sub_20C20C368(v29, (uint64_t)&v61);
      v30 = v61;
      v31 = (uint64_t *)v62;
      while (v30 != v31)
      {
        if (*v30)
        {
          if (v32)
          {
            v33 = v30[1];
            v65 = (void **)v32;
            v66 = (std::__shared_weak_count *)v33;
            if (v33)
            {
              v34 = (unint64_t *)(v33 + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixSublayer(a2, this, (uint64_t *)v32 + 13, (uint64_t)v32 + 120);
            v36 = v66;
            if (v66)
            {
              v37 = (unint64_t *)&v66->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
          }
        }
        v30 += 2;
      }
      v65 = (void **)&v61;
      sub_20BDE9EB0(&v65);
      v39 = (uint64_t *)v28[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (uint64_t *)v28[2];
          v23 = *v40 == (_QWORD)v28;
          v28 = v40;
        }
        while (!v23);
      }
      v28 = v40;
    }
    while (v40 != (uint64_t *)v69);
    v41 = v68;
    v62 = 0;
    v63 = 0;
    v61 = (uint64_t *)&v62;
    if (v68 != (uint64_t *)v69)
    {
      v42 = (uint64_t *)((char *)this + 128);
      do
      {
        v43 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v41 + 4);
        Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v43);
        v45 = *(uint64_t **)Layers;
        v46 = *(uint64_t **)(Layers + 8);
        while (v45 != v46)
        {
          v47 = sub_20C1FE500(v42);
          if (!pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v47, v45))
          {
            sub_20C1034E8((uint64_t *)&v65, v45);
            sub_20C22193C(&v61, (uint64_t)&v65, (uint64_t)&v65);
            v48 = v66;
            if (v66)
            {
              v49 = (unsigned int *)&v66->__shared_owners_;
              do
              {
                v50 = __ldxr(v49);
                v51 = v50 - 1;
              }
              while (__stlxr(v51, v49));
              if (!v51)
                ((void (*)(std::__shared_weak_count *))v48->~__shared_weak_count_0)(v48);
            }
          }
          ++v45;
        }
        v52 = (uint64_t *)v41[1];
        if (v52)
        {
          do
          {
            v53 = v52;
            v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = (uint64_t *)v41[2];
            v23 = *v53 == (_QWORD)v41;
            v41 = v53;
          }
          while (!v23);
        }
        v41 = v53;
      }
      while (v53 != (uint64_t *)v69);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers((uint64_t)&v61, 0, v6);
  sub_20BFF29AC((uint64_t)&v61, v62);
  sub_20BFF29AC((uint64_t)&v68, v69[0]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v70);
}

void sub_20C21C0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  uint64_t v27;

  sub_20BFF29AC((uint64_t)&a18, a19);
  sub_20BFF29AC((uint64_t)&a26, a27);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v27 - 144));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C21C1E0(uint64_t a1)
{
  void *v2;

  sub_20BF1C150((void ***)(a1 + 32), 0);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

void sub_20C21C21C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_20C2230A8(a1, *a2);
  sub_20C2230E8(a1, v3);
  sub_20C223180(a1, (unsigned int *)v3);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCache(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE v5[24];
  void **v6;
  void **v7;

  v3 = sub_20C2161D0((_QWORD *)this + 31, (unsigned int *)a2);
  if (v3)
  {
    v4 = v3;
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v5);
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::Swap(v4 + 1, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v5);
    sub_20BF1C150(&v6, 0);
    v7 = (void **)v5;
    sub_20C21DAE8(&v7);
  }
}

void sub_20C21C2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C21C2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21C2CC(uint64_t a1)
{
  void **v3;

  sub_20BF1C150((void ***)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20C21DAE8(&v3);
  return a1;
}

void sub_20C21C30C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_20C223308(a1, *a2);
  sub_20C223348(a1, v3);
  sub_20C2233E0(a1, (unsigned int *)v3);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachLayerStack(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_20C215BB8((uint64_t *)(a1 + 200));
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::ForEachLayerStack(v3, a2);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachPrimIndex(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;

  result = (unint64_t)sub_20C215C40((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 208));
  while (1)
  {
    v4 = result;
    if (!result)
      break;
    if (*(_QWORD *)(result + 8))
    {
      (*(void (**)(_QWORD, unint64_t))(a2 + 8))(*(_QWORD *)a2, result + 8);
      result = v4;
    }
    result = *(_QWORD *)(result + 56);
    if (!result)
      result = sub_20C216154((uint64_t)&v4);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexesInParallel(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  uint64_t *v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v38;
  uint64_t v39;
  int v40;
  char *v41;
  _OWORD v42[2];
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  _QWORD v49[3];
  _QWORD *v50;
  _OWORD v51[2];
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;
  __int128 __p;
  uint64_t v56;
  __int16 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[3];
  _QWORD *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int16 v65;
  _BYTE v66[16];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v41 = a8;
  if (!*(_BYTE *)(a1 + 96))
  {
    *(_QWORD *)&v58 = "pcp/cache.cpp";
    *((_QWORD *)&v58 + 1) = "_ComputePrimIndexesInParallel";
    *(_QWORD *)&v59 = 1630;
    *((_QWORD *)&v59 + 1) = "void pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexesInParallel(const SdfPath"
                            "Vector &, PcpErrorVector *, _UntypedIndexingChildrenPredicate, _UntypedIndexingPayloadPredic"
                            "ate, const char *, const char *)";
    LOBYTE(v60[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v58, 1, (pxrInternal__aapl__pxrReserved__ *)"Computing prim indexes in parallel only supported for USD caches.");
    return;
  }
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v66);
  sub_20C223568((uint64_t)&v39, &v41, (char *)&a9);
  if (!*(_QWORD *)(a1 + 128))
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), a3, (uint64_t *)&v38);
    sub_20C2012CC(&v38);
  }
  v16 = *(uint64_t **)(a1 + 296);
  if (!v16)
  {
    v17 = operator new(0x258uLL);
    sub_20C2033F4((uint64_t *)&v58, (uint64_t *)(a1 + 128));
    sub_20C21DB58((uint64_t)v17, a1, (uint64_t *)&v58);
    v18 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v17;
    if (v18)
      sub_20C2235D8(a1 + 296, v18);
    v19 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v58 + 1) + 8);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    v16 = *(uint64_t **)(a1 + 296);
  }
  pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, (uint64_t)v51);
  HIBYTE(v57) = *(_BYTE *)(a1 + 96);
  v49[0] = &unk_24C52BBB8;
  v49[1] = a6;
  v49[2] = a7;
  v50 = v49;
  v23 = v52;
  sub_20C21E484(v52, (uint64_t)v49);
  v58 = v51[0];
  v59 = v51[1];
  v24 = v60;
  v25 = (uint64_t)v53;
  if (!v53)
    goto LABEL_16;
  if (v53 != v52)
  {
    v25 = (*(uint64_t (**)(void))(*v53 + 16))();
LABEL_16:
    v61 = (_QWORD *)v25;
    goto LABEL_19;
  }
  v61 = v60;
  (*(void (**)(_QWORD *, _QWORD *))(v52[0] + 24))(v52, v60);
LABEL_19:
  v62 = v54;
  if (SHIBYTE(v56) < 0)
  {
    sub_20BDDBFAC(&v63, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v63 = __p;
    v64 = v56;
  }
  v65 = v57;
  v26 = v50;
  if (v50 == v49)
  {
    v27 = 4;
    v26 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_27;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_27:
  if (SHIBYTE(v56) < 0)
    operator delete((void *)__p);
  if (v53 == v52)
  {
    v28 = 4;
  }
  else
  {
    if (!v53)
      goto LABEL_34;
    v28 = 5;
    v23 = v53;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v28))(v23);
LABEL_34:
  v42[0] = v58;
  v42[1] = v59;
  v29 = v43;
  v30 = (uint64_t)v61;
  if (!v61)
  {
LABEL_37:
    v44 = (_BYTE *)v30;
    goto LABEL_39;
  }
  if (v61 != v60)
  {
    v30 = (*(uint64_t (**)(void))(*v61 + 16))();
    goto LABEL_37;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v43);
LABEL_39:
  v45 = v62;
  if (SHIBYTE(v64) < 0)
  {
    sub_20BDDBFAC(&v46, (void *)v63, *((unint64_t *)&v63 + 1));
  }
  else
  {
    v46 = v63;
    v47 = v64;
  }
  v48 = v65;
  v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C21CA10((uint64_t)v16, a4, a5, (uint64_t)v42, (uint64_t)a3, (uint64_t)v66, (uint64_t)v41, a9);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v44 == v43)
  {
    v32 = 4;
  }
  else
  {
    if (!v44)
      goto LABEL_49;
    v32 = 5;
    v29 = v44;
  }
  v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(_QWORD *))(*v29 + 8 * v32))(v29);
LABEL_49:
  v33 = *a2;
  v34 = a2[1];
  if (*a2 != v34)
  {
    do
    {
      if (*(_QWORD *)v33 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v31))
      {
        v35 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v33, v51);
        v35 = pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs(a1, (unsigned int *)v51, (uint64_t)&v58, a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v51 + 1);
        sub_20BFD265C(v51);
      }
      v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C21CD48(v16, (char *)v35, v33);
      v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8);
    }
    while (v33 != v34);
  }
  sub_20C21CE84((uint64_t)v16);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (v61 == v60)
  {
    v36 = 4;
    goto LABEL_60;
  }
  if (v61)
  {
    v36 = 5;
    v24 = v61;
LABEL_60:
    (*(void (**)(_QWORD *))(*v24 + 8 * v36))(v24);
  }
  while (v40--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v39);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v66);
}

void sub_20C21C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  if (a20 == v20)
  {
    v23 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
    v20 = a20;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v23))(v20);
LABEL_6:
  sub_20C218AA8(v21 - 208);
  sub_20BEB24F4((uint64_t)&a10);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v21 - 104));
  _Unwind_Resume(a1);
}

void *sub_20C21CA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v14;
  void *result;
  uint64_t v16;
  uint64_t i;

  *(_QWORD *)(a1 + 384) = a2;
  *(_QWORD *)(a1 + 392) = a3;
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 416) = v14;
  sub_20C21E484((_QWORD *)(a1 + 432), a4 + 32);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a4 + 64);
  result = std::string::operator=((std::string *)(a1 + 472), (const std::string *)(a4 + 72));
  *(_WORD *)(a1 + 496) = *(_WORD *)(a4 + 96);
  *(_QWORD *)(a1 + 424) = a1 + 40;
  *(_QWORD *)(a1 + 504) = a5;
  *(_QWORD *)(a1 + 520) = a6;
  *(_QWORD *)(a1 + 528) = a7;
  *(_QWORD *)(a1 + 536) = a8;
  v16 = *(_QWORD *)(a1 + 552);
  for (i = *(_QWORD *)(a1 + 544); v16 != i; result = sub_20C21E424(a1 + 560, v16))
    v16 -= 16;
  *(_QWORD *)(a1 + 552) = i;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  void **v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  void *__p;
  void *v22;
  void **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v31;

  v8 = a1 + 208;
  v9 = sub_20C215C80((_QWORD *)(a1 + 208), a2);
  if (!v9 || (v10 = v9 + 1, !v9[1]))
  {
    if (!*(_QWORD *)(a1 + 128))
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), a4, (uint64_t *)&v31);
      sub_20C2012CC(&v31);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v20);
    v28 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v27 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v29);
    memset(v30, 0, sizeof(v30));
    sub_20C2033F4((uint64_t *)&v18, (uint64_t *)(a1 + 128));
    pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t *)&v18, a3, (uint64_t)&v20, 0);
    v11 = v19;
    if (v19)
    {
      v12 = (unsigned int *)(v19 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    sub_20C20DB9C(a4, a4[1], v24, v25, ((char *)v25 - (char *)v24) >> 4);
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Add(*(_QWORD **)(a1 + 288), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v20, v30, (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)&v28, &v29);
    v15 = v27;
    if (v27 == 3)
    {
      sub_20C2215D8(a1 + 136, a2, a2);
      v15 = v27;
    }
    if (v15 == 4)
      sub_20C2218F0((_QWORD *)(a1 + 136), a2);
    v10 = (uint64_t *)sub_20C21CFD8(v8, a2);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap(v10, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v20);
    v18 = (void **)v30;
    sub_20C2034B0(&v18);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v29);
    v16 = v28;
    v28 = 0;
    if (v16)
      sub_20C201118((uint64_t)&v28, v16);
    v18 = (void **)&v24;
    sub_20BDE9EB0(&v18);
    sub_20BF1C150(&v23, 0);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    sub_20C21DABC(&v20);
  }
  return v10;
}

void sub_20C21CCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C21D0F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C21CD48(uint64_t *a1, char *a2, _DWORD *a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v10;
  _QWORD v11[3];
  char v12;
  int v13;

  if (!a2
    && *(_QWORD *)a3 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
  {
    v10 = "pcp/cache.cpp";
    v11[0] = "ComputeIndex";
    v11[1] = 1396;
    v11[2] = "void pxrInternal__aapl__pxrReserved__::PcpCache::_ParallelIndexer::ComputeIndex(const PcpPrimIndex *, const SdfPath &)";
    v12 = 0;
    v13 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v10, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "parentIndex || path == SdfPath::AbsoluteRootPath()");
  }
  v10 = a2;
  sub_20BFD6E54(v11, a3);
  sub_20BFD6EA4((_DWORD *)v11 + 1, a3 + 1);
  v7 = a1[69];
  if (v7 >= a1[70])
  {
    v8 = sub_20C21E690(a1 + 68, (uint64_t)&v10);
  }
  else
  {
    *(_QWORD *)v7 = v10;
    sub_20BFD38A4((_DWORD *)(v7 + 8), v11);
    sub_20BFD38DC((_DWORD *)(v7 + 12), (_DWORD *)v11 + 1);
    v8 = v7 + 16;
  }
  a1[69] = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
  return sub_20BFD265C(v11);
}

void sub_20C21CE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C21E450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C21CE84(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3[2])(_QWORD);

  v2 = a1;
  v3[0] = (uint64_t (**)(_QWORD))off_24C52BAA0;
  v3[1] = (uint64_t (**)(_QWORD))&v2;
  tbb::interface7::internal::isolate_within_arena(v3, 0);
  sub_20C21E9B0(a1, (pxrInternal__aapl__pxrReserved__ *)(a1 + 544), *(_QWORD *)(a1 + 552) - *(_QWORD *)(a1 + 544) > 0x3FF0uLL);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::ComputePrimIndex(pxrInternal__aapl__pxrReserved__::PcpCache *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[32];
  _BYTE v11[24];
  _BYTE *v12;
  void *__p;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(a1, (uint64_t)v10);
  v15 = *((_BYTE *)a1 + 96);
  v6 = pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs((uint64_t)a1, a2, (uint64_t)v10, a3);
  if (v14 < 0)
    operator delete(__p);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_7;
  }
  if (v12)
  {
    v8 = 5;
LABEL_7:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

void sub_20C21CFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C218AA8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20C21CFD8(uint64_t a1, _DWORD *a2)
{
  __int128 v4;
  void **v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  void *v8[2];
  __int128 v9;
  void **v10;
  int v11;
  int v12;
  void *__p[2];
  __int128 v14;
  void **v15;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v8);
  sub_20BFD6E54(&v11, a2);
  sub_20BFD6EA4(&v12, a2 + 1);
  v4 = *(_OWORD *)v8;
  v8[0] = 0;
  v8[1] = 0;
  *(_OWORD *)__p = v4;
  v14 = v9;
  v9 = 0uLL;
  v5 = v10;
  v10 = 0;
  v15 = v5;
  v6 = sub_20C22008C(a1, &v11);
  sub_20BF1C150(&v15, 0);
  if (__p[1])
  {
    *(void **)&v14 = __p[1];
    operator delete(__p[1]);
  }
  sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  sub_20BF1C150(&v10, 0);
  if (v8[1])
  {
    *(void **)&v9 = v8[1];
    operator delete(v8[1]);
  }
  sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8);
  return (char *)v6 + 8;
}

void sub_20C21D0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20C21D958((uint64_t)&a15);
  sub_20C21C1E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C21D0F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 88);
  sub_20C2034B0(&v5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    sub_20C201118(a1 + 72, v2);
  v5 = (void **)(a1 + 40);
  sub_20BDE9EB0(&v5);
  sub_20BF1C150((void ***)(a1 + 32), 0);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

char *sub_20C21D1B0(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _BYTE v6[24];
  void **v7;
  int v8;
  int v9;
  uint64_t v10;
  void **v11;
  void **v12;

  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v6);
  sub_20C223C7C(&v8, a2, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v6);
  v4 = sub_20C22374C(a1, &v8);
  sub_20BF1C150(&v11, 0);
  v12 = (void **)&v10;
  sub_20C21DAE8(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  sub_20BF1C150(&v7, 0);
  v12 = (void **)v6;
  sub_20C21DAE8(&v12);
  return (char *)v4 + 8;
}

void sub_20C21D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20C222F3C((uint64_t)&a13);
  sub_20C21C2CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::PrintStatistics(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_PrintCacheStatistics(this, MEMORY[0x24BEDB318]);
}

void sub_20C21D294(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[256];
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  v1 = **(_QWORD **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v10);
  v8 = 0;
  v9 = v11;
  v2 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((_BYTE *)v2 - 11) = 1;
  *v2 = &off_24C52B840;
  v2[1] = v1;
  v2[2] = v12;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v2 - 5))(*(v2 - 5), v2, (uint64_t)(v2 - 1));
  v8 = 0;
  v9 = v11;
  v3 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((_BYTE *)v3 - 11) = 1;
  *v3 = &off_24C52B888;
  v3[1] = v1;
  v3[2] = v12;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v3 - 5))(*(v3 - 5), v3, (uint64_t)(v3 - 1));
  v8 = 0;
  v9 = v11;
  v4 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((_BYTE *)v4 - 11) = 1;
  *v4 = &off_24C52B8D0;
  v4[1] = v1;
  v4[2] = v12;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
  v8 = 0;
  v9 = v11;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = &off_24C52B918;
  v5[1] = v1;
  v5[2] = v12;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v5 - 5))(*(v5 - 5), v5, (uint64_t)(v5 - 1));
  v8 = 0;
  v9 = v11;
  v6 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((_BYTE *)v6 - 11) = 1;
  *v6 = &off_24C52B960;
  v6[1] = v1;
  v6[2] = v12;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v6 - 5))(*(v6 - 5), v6, (uint64_t)(v6 - 1));
  v8 = 0;
  v9 = v11;
  v7 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((_BYTE *)v7 - 11) = 1;
  *v7 = &off_24C52B9A8;
  v7[1] = v1;
  v7[2] = v12;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v7 - 5))(*(v7 - 5), v7, (uint64_t)(v7 - 1));
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v10);
}

void sub_20C21D4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C21D4DC(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C21D57C(*(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C21D568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C21D57C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;

  v1 = *a1;
  *a1 = 0;
  v3 = 0;
  sub_20BF1D8F4((int)a1, v1);
  return sub_20C103234(&v3);
}

void sub_20C21D5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21D5D0(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C21D57C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(_QWORD *)(a1 + 8) + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C21D660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21D67C(uint64_t a1)
{
  uint64_t v2;
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  _OWORD v8[2];
  int v9;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  v2 = *(_QWORD *)(a1 + 8) + 136;
  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  sub_20BFDC9B4((uint64_t)v8, v2);
  sub_20C220E58((uint64_t)v8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = v7;
  v5 = atomic_load(Instance + 18);
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_20C21D728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21D744(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *Instance;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = &v14;
  v6 = *(_QWORD **)(v2 + 184);
  v5 = (_QWORD *)(v2 + 184);
  v4 = v6;
  v14 = *(v5 - 1);
  v15[0] = v6;
  v7 = v5[1];
  *v5 = 0;
  v5[1] = 0;
  v15[1] = v7;
  v8 = v6 + 2;
  if (v7)
    v3 = v8;
  *v3 = (uint64_t)v15;
  *(v5 - 1) = v5;
  sub_20C220ECC((uint64_t)&v14, v4);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v10 = v13;
  v11 = atomic_load(Instance + 18);
  if (v10 < v11
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v13, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  return 0;
}

void sub_20C21D808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21D824(uint64_t a1)
{
  uint64_t v2;
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char v8;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  v2 = *(_QWORD *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_VisitPathTableInParallel(*(pxrInternal__aapl__pxrReserved__ **)(v2 + 208), (uint64_t)(*(_QWORD *)(v2 + 216) - *(_QWORD *)(v2 + 208)) >> 3, (uint64_t)&v8, (void (*)(uint64_t))sub_20C21D8E0);
  *(_QWORD *)(v2 + 232) = 0;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = v7;
  v5 = atomic_load(Instance + 18);
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_20C21D8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C21D8E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _DWORD *v6;

  v3 = *a2;
  if (*a2)
  {
    do
    {
      v4 = *(_QWORD *)(v3 + 48);
      sub_20BF1C150((void ***)(v3 + 40), 0);
      v5 = *(void **)(v3 + 16);
      if (v5)
      {
        *(_QWORD *)(v3 + 24) = v5;
        operator delete(v5);
      }
      sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v3 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v3 + 4));
      v6 = sub_20BFD265C((_DWORD *)v3);
      operator delete(v6);
      v3 = v4;
    }
    while (v4);
  }
  *a2 = 0;
}

_DWORD *sub_20C21D958(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  void *v3;

  v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
  sub_20BF1C150((void ***)(a1 + 40), 0);
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
  sub_20C21DABC(v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C21D9B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  v2 = *(_QWORD *)(a1 + 8);
  v8 = *(_OWORD *)(v2 + 248);
  *(_OWORD *)(v2 + 248) = 0u;
  v9 = *(_QWORD *)(v2 + 264);
  *(_QWORD *)(v2 + 264) = 0;
  v10 = *(_OWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 272) = 0u;
  sub_20C220F48((uint64_t *)&v8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = v7;
  v5 = atomic_load(Instance + 18);
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_20C21DA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C21DA80(_QWORD *a1, uint64_t a2, char *a3)
{
  if (!*a1)
    pxrInternal__aapl__pxrReserved__::PcpChanges::Apply((pxrInternal__aapl__pxrReserved__::PcpChanges *)(a1 + 1), a2, a3);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)(a1 + 1));
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C21DABC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20C21DAE8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 - 24));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C21DB58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *Resolver;
  void *v9;
  void *v10;

  v5 = *a3;
  v4 = a3[1];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = Resolver;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 48));
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_WORD *)(a1 + 496) = 1;
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 568) = &unk_24C52BA60;
  v10 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v9);
  *(_QWORD *)(a1 + 576) = v10;
  bzero(v10, 0x2C0uLL);
  *(_OWORD *)(*(_QWORD *)(a1 + 576) + 256) = xmmword_20CAC3990;
  *(_QWORD *)(a1 + 568) = &unk_24C52B9F0;
  atomic_store(0, (unsigned __int8 *)(a1 + 592));
  return a1;
}

void sub_20C21DC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v11;
  void **v12;
  uint64_t v13;
  void **v14;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v14 = v12;
  a10 = v14;
  sub_20C21E3A0(&a10);
  sub_20C218AA8(v13);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v11);
  v16 = *(unsigned int **)(v10 + 16);
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

void sub_20C21DCB4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C21DD44(a1);
  operator delete(v1);
}

uint64_t sub_20C21DCC8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 120 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C21DCE4(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 120 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C21DD00(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C21DD3C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_20C21DD44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C52B9F0;
  sub_20C21DDC8((uint64_t)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C21DE58((uint64_t)a1, v4);
}

uint64_t sub_20C21DDC8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[120];

  sub_20C21DE94((uint64_t)v8);
  while (1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    sub_20C21DFC0(a1, (uint64_t)v8);
  }
  return sub_20C21E300((uint64_t)v8);
}

void sub_20C21DE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C21E300((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21DE58(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C52BA60;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

uint64_t sub_20C21DE94(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 8));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData((_QWORD *)(a1 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

void sub_20C21DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;

  v12 = v10;
  v14 = *v12;
  *v12 = 0;
  if (v14)
    sub_20C201118((uint64_t)v12, v14);
  sub_20C96B898(v11, (uint64_t)v8, v9, a4, a5, a6, a7, a8);
  v15 = *v8;
  *v8 = 0;
  if (v15)
    sub_20C21DF58((uint64_t)v8, v15);
  _Unwind_Resume(a1);
}

void sub_20C21DF58(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  void *v4;
  _DWORD *v5;

  if (a2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 8);
    sub_20BF1C150((void ***)(a2 + 40), 0);
    v4 = *(void **)(a2 + 16);
    if (v4)
    {
      *(_QWORD *)(a2 + 24) = v4;
      operator delete(v4);
    }
    sub_20C21DABC(v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
    v5 = sub_20BFD265C((_DWORD *)a2);
    operator delete(v5);
  }
}

BOOL sub_20C21DFC0(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20C21E090((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20C21E090(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v22[0] = v8 + 8;
  v22[1] = (uint64_t)a1;
  v22[2] = v17;
  v22[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    sub_20C21E1B0((uint64_t)a1, a2, v13, v16);
  }
  else
  {
    v19 = (unint64_t *)(v14 + 272);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  sub_20BF39F2C(v22);
  return v18 != 0;
}

void sub_20C21E19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF39F2C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21E1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  v4 = (uint64_t *)(a3 + 120 * a4 + 16);
  sub_20C21E1F8(a2, v4);
  return sub_20C21E300((uint64_t)v4);
}

void sub_20C21E1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C21E300(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21E1F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    sub_20C21DF58(a1, v5);
  sub_20C21E2A8(a1 + 8, (uint64_t)(a2 + 1));
  sub_20BE10AE4((void **)(a1 + 48));
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[7] = 0;
  a2[8] = 0;
  a2[6] = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2[10];
  a2[10] = v6;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::operator=((uint64_t *)(a1 + 88), a2 + 11);
  sub_20C20198C((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_QWORD *)(a1 + 112) = a2[14];
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  return a1;
}

uint64_t sub_20C21E2A8(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;
  void **v5;

  v4 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  sub_20BF1D8F4(a1, v4);
  sub_20C14D5BC(a1 + 8, (__n128 *)(a2 + 8));
  v5 = *(void ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  sub_20BF1C150((void ***)(a1 + 32), v5);
  return a1;
}

uint64_t sub_20C21E300(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void **v6;

  v6 = (void **)(a1 + 96);
  sub_20C2034B0(&v6);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    sub_20C201118(a1 + 80, v2);
  v6 = (void **)(a1 + 48);
  sub_20BDE9EB0(&v6);
  sub_20BF1C150((void ***)(a1 + 40), 0);
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
  sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    sub_20C21DF58(a1, v4);
  return a1;
}

void sub_20C21E3A0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_20C21E424((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C21E424(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  return sub_20BFD265C((_DWORD *)(a2 + 8));
}

uint64_t sub_20C21E450(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_20C21E484(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20BE9E6E8((uint64_t)v6, a2);
  sub_20C21E51C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_20C21E51C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C21E684(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t sub_20C21E690(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  v14 = v10;
  v15 = &v10[16 * v4];
  v17 = &v10[16 * v9];
  v11 = v15;
  *(_QWORD *)v15 = *(_QWORD *)a2;
  sub_20BFD38A4((_DWORD *)v11 + 2, (_DWORD *)(a2 + 8));
  sub_20BFD38DC((_DWORD *)v11 + 3, (_DWORD *)(a2 + 12));
  v16 = v11 + 16;
  sub_20C21E788(a1, &v14);
  v12 = a1[1];
  sub_20C21E93C(&v14);
  return v12;
}

void sub_20C21E774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C21E93C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21E788(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C21E7FC((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C21E7FC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3 - 2;
    do
    {
      v10 = v9 - 2;
      *(_QWORD *)(v7 - 16) = *((_QWORD *)v9 - 1);
      sub_20BFD38A4((_DWORD *)(v7 - 8), v9);
      sub_20BFD38DC((_DWORD *)(v7 - 4), v9 + 1);
      v7 = *((_QWORD *)&v16 + 1) - 16;
      *((_QWORD *)&v16 + 1) -= 16;
      v9 -= 4;
    }
    while (v10 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C21E8B8((uint64_t)v13);
  return v11;
}

uint64_t sub_20C21E8B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C21E8EC((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C21E8EC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C21E424(v3, v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C21E93C(void **a1)
{
  sub_20C21E96C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C21E96C(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 16;
      result = sub_20C21E424(v4, v1 - 16);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_20C21E9B0(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    sub_20C220B00(a2);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    if (v4 != *(_QWORD *)a2)
    {
      do
      {
        v4 -= 16;
        sub_20C21E424((uint64_t)a2 + 16, v4);
      }
      while (v4 != v5);
    }
    *((_QWORD *)a2 + 1) = v5;
  }
}

void sub_20C21EA1C(uint64_t a1)
{
  sub_20C21EA28(*(uint64_t **)(a1 + 8));
}

void sub_20C21EA28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 i;
  _BYTE v12[16];

  v1 = *a1;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *)v12, *(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)(*(_QWORD *)*a1 + 288));
  for (i = *(_OWORD *)(v1 + 544); (_QWORD)i != *((_QWORD *)&i + 1); sub_20C21F454(&i))
  {
    *(_QWORD *)&v10 = sub_20C21EBF4;
    *((_QWORD *)&v10 + 1) = 0;
    v9 = v1;
    v4 = (uint64_t *)*sub_20C21F3DC(&i, v2, v3);
    v7 = (_DWORD *)(*sub_20C21F3DC(&i, v5, v6) + 8);
    v8 = 1;
    sub_20C21EB14(v1 + 48, &v10, &v9, v4, v7, &v8);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 48));
  sub_20C21F4D0((unint64_t *)v1);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::~ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *)v12);
}

void sub_20C21EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::~ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C21EB14(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t *a4, _DWORD *a5, char *a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  _QWORD v20[2];

  v14 = *a2;
  v9 = *a4;
  v15 = *a3;
  v16 = v9;
  sub_20BFD6E54(&v17, a5);
  sub_20BFD6EA4(&v18, a5 + 1);
  v19 = *a6;
  v10 = *(_QWORD *)(a1 + 256);
  v20[0] = 0;
  v20[1] = v10;
  v11 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v20, 0x40uLL);
  v12 = sub_20C21F574(v11, (uint64_t)&v14, a1 + 264);
  (***(void (****)(_QWORD, unint64_t, uint64_t))(v12 - 40))(*(_QWORD *)(v12 - 40), v11, v11 - 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_20BFD265C(&v17);
}

void sub_20C21EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C21F540((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C21EBF4(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  _QWORD *v8;
  uint64_t *v9;
  __int128 v10;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  void **v13;
  int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  void **v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  _BOOL4 v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  void **v44;
  _QWORD v45[3];
  char v46;
  void **v47;
  void *__p;
  void *v49;
  uint64_t v50;
  void **v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  int v60;
  _QWORD v61[2];
  __int128 v62;
  __int128 v63;
  _BYTE v64[24];
  _BYTE *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int16 v69;
  _BYTE v70[16];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C223568((uint64_t)&v59, (char **)(a1 + 528), (char *)(a1 + 536));
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v70, *(const pxrInternal__aapl__pxrReserved__::ArResolverScopedCache **)(a1 + 520));
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3))
    goto LABEL_68;
  if (!a4)
  {
    v40 = 0;
    goto LABEL_8;
  }
  LOBYTE(v45[0]) = 0;
  v44 = (void **)(a1 + 32);
  tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)(a1 + 32));
  v8 = sub_20C215C80((_QWORD *)(*(_QWORD *)a1 + 208), a3);
  v40 = v8 != 0;
  if (!v8 || (v9 = v8 + 1, !v8[1]))
  {
    sub_20BEBF29C(&v44);
LABEL_8:
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v47);
    v56 = 0;
    v53 = 0;
    v54 = 0;
    v52 = 0;
    v55 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v57);
    memset(v58, 0, sizeof(v58));
    v41 = 0;
    v10 = *(_OWORD *)(a1 + 416);
    v62 = *(_OWORD *)(a1 + 400);
    v63 = v10;
    v11 = v64;
    sub_20BE9E6E8((uint64_t)v64, a1 + 432);
    v66 = *(_QWORD *)(a1 + 464);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67;
    if (*(char *)(a1 + 495) < 0)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(&v67, *(void **)(a1 + 472), *(_QWORD *)(a1 + 480));
    }
    else
    {
      v67 = *(_OWORD *)(a1 + 472);
      v68 = *(_QWORD *)(a1 + 488);
    }
    v69 = *(_WORD *)(a1 + 496);
    v66 = a2;
    if (!a2 && *(_QWORD *)a3 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12))
    {
      v44 = (void **)"pcp/cache.cpp";
      v45[0] = "_ComputeIndex";
      v45[1] = 1467;
      v45[2] = "void pxrInternal__aapl__pxrReserved__::PcpCache::_ParallelIndexer::_ComputeIndex(const PcpPrimIndex *, SdfPath, BOOL)";
      v46 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "parentIndex || path == SdfPath::AbsoluteRootPath()", 0);
    }
    pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (uint64_t *)(a1 + 8), (uint64_t)&v62, (uint64_t)&v47, *(uint64_t **)(a1 + 24));
    if (v52 != v53)
    {
      sub_20BEB3FEC((uint64_t)&v44, a1 + 512);
      sub_20C20DB9C(*(uint64_t **)(a1 + 504), *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8), v52, v53, ((char *)v53 - (char *)v52) >> 4);
      v13 = v44;
      if (v44)
      {
        __dmb(0xBu);
        *(_BYTE *)v13 = 0;
      }
    }
    v14 = v55;
    if ((v55 - 3) <= 1)
    {
      LOBYTE(v45[0]) = 1;
      v44 = (void **)(a1 + 40);
      tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(a1 + 40));
      v15 = (_QWORD *)(*(_QWORD *)a1 + 136);
      if (v14 == 3)
        sub_20C2215D8((uint64_t)v15, a3, a3);
      else
        sub_20C2218F0(v15, a3);
      sub_20BEBF29C(&v44);
    }
    sub_20C21F7D4(a3, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v47, &v44);
    v16 = (uint64_t *)v44;
    v44 = 0;
    v17 = v41;
    v41 = v16;
    if (v17)
    {
      sub_20C21DF58((uint64_t)&v41, (uint64_t)v17);
      v18 = v44;
      v44 = 0;
      if (v18)
        sub_20C21DF58((uint64_t)&v44, (uint64_t)v18);
    }
    if (v40)
    {
      sub_20C22026C(&v44, (uint64_t *)&v41, (uint64_t)&v47);
      v9 = (uint64_t *)sub_20C21F86C((unint64_t *)a1, (uint64_t)&v44, 1);
      sub_20C21E300((uint64_t)&v44);
    }
    else
    {
      v19 = v41;
      sub_20C22026C(&v44, (uint64_t *)&v41, (uint64_t)&v47);
      v9 = v19 + 1;
      v20 = *(_QWORD *)(a1 + 576);
      v21 = (unint64_t *)(v20 + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      sub_20C2203CC((_QWORD *)(v20 + 40 * ((3 * (_BYTE)v22) & 7) + 384), (uint64_t)&v44, v22, (uint64_t *)(a1 + 568), (uint64_t (*)(_QWORD *, uint64_t))sub_20C2203C8);
      sub_20C21E300((uint64_t)&v44);
      if ((*(_BYTE *)(a1 + 592) & 1) == 0)
      {
        v23 = (unsigned __int8 *)(a1 + 592);
        while (!__ldaxr(v23))
        {
          if (!__stlxr(1u, v23))
          {
            sub_20C21F4D0((unint64_t *)a1);
            atomic_store(0, v23);
            goto LABEL_35;
          }
        }
        __clrex();
      }
    }
LABEL_35:
    if (SHIBYTE(v68) < 0)
      operator delete((void *)v67);
    if (v65 == v64)
    {
      v25 = 4;
    }
    else
    {
      if (!v65)
      {
LABEL_42:
        v26 = v41;
        v41 = 0;
        if (v26)
          sub_20C21DF58((uint64_t)&v41, (uint64_t)v26);
        v44 = (void **)v58;
        sub_20C2034B0(&v44);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v57);
        v27 = v56;
        v56 = 0;
        if (v27)
          sub_20C201118((uint64_t)&v56, v27);
        v44 = (void **)&v52;
        sub_20BDE9EB0(&v44);
        sub_20BF1C150(&v51, 0);
        if (__p)
        {
          v49 = __p;
          operator delete(__p);
        }
        sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v47);
        goto LABEL_49;
      }
      v25 = 5;
      v11 = v65;
    }
    (*(void (**)(_QWORD *))(*v11 + 8 * v25))(v11);
    goto LABEL_42;
  }
  sub_20BEBF29C(&v44);
  LOBYTE(v40) = 1;
LABEL_49:
  v62 = 0uLL;
  *(_QWORD *)&v63 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *, __int128 *))(a1 + 392))(*(_QWORD *)(a1 + 384), v9, &v62))
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    sub_20C2205D4((uint64_t)&v44, 0, 0.0, 0.5);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimChildNames(v9, &v41, (uint64_t *)&v44);
    v29 = v41;
    for (i = v42; v29 != i; ++v29)
    {
      v30 = (_QWORD *)v62;
      if ((_QWORD)v62 != *((_QWORD *)&v62 + 1))
      {
        while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (*v29 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v30 == *((_QWORD **)&v62 + 1))
          {
            v30 = (_QWORD *)*((_QWORD *)&v62 + 1);
            break;
          }
        }
        if (v30 == *((_QWORD **)&v62 + 1))
          continue;
      }
      v47 = (void **)a1;
      __p = v9;
      sub_20BFD6E54(&v49, a3);
      sub_20BFD6EA4((_DWORD *)&v49 + 1, a3 + 1);
      v31 = *v29;
      v50 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 2, v32));
        if ((v33 & 1) == 0)
          v50 &= 0xFFFFFFFFFFFFFFF8;
      }
      LOBYTE(v51) = v40;
      v34 = *(_QWORD *)(a1 + 304);
      v61[0] = 0;
      v61[1] = v34;
      v35 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v61, 0x38uLL);
      v36 = sub_20C2208B0(v35, (uint64_t)&v47, a1 + 312);
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v36 - 40))(*(_QWORD *)(v36 - 40), v35, v35 - 8);
      if ((v50 & 7) != 0)
      {
        v37 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
      sub_20BFD265C(&v49);
    }
    v47 = (void **)v45;
    sub_20C2207E4(&v47);
    v44 = (void **)&v41;
    sub_20BEEB2B8(&v44);
  }
  v44 = (void **)&v62;
  sub_20BEEB2B8(&v44);
LABEL_68:
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v70);
  while (v60--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v59);
}

void sub_20C21F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v44;

  sub_20C218AA8(v42 - 224);
  v44 = a10;
  a10 = 0;
  if (v44)
    sub_20C21DF58((uint64_t)&a10, v44);
  sub_20C21D0F4((uint64_t)&a28);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v42 - 120));
  sub_20BEB24F4((uint64_t)&a42);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C21F3DC(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<const pxrInternal__aapl__pxrRes"
            "erved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator->() [T = std::vector<std::pa"
            "ir<const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C21F454(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<const pxrInternal"
            "__aapl__pxrReserved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator++() [T = std::"
            "vector<std::pair<const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::S"
            "dfPath>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_20C21F4D0(unint64_t *a1)
{
  _BYTE v3[120];

  sub_20C21DE94((uint64_t)v3);
  while (sub_20C21DFC0((uint64_t)(a1 + 71), (uint64_t)v3))
    sub_20C21F86C(a1, (uint64_t)v3, 0);
  return sub_20C21E300((uint64_t)v3);
}

void sub_20C21F52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C21E300((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C21F540(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_20C21F574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = &unk_24C52BAE0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  sub_20BFD38A4((_DWORD *)(a1 + 40), (_DWORD *)(a2 + 32));
  sub_20BFD38DC((_DWORD *)(a1 + 44), (_DWORD *)(a2 + 36));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = a3;
  return a1;
}

uint64_t sub_20C21F5F8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52BAE0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  return a1;
}

void sub_20C21F638(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52BAE0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 11);
  sub_20BFD265C(a1 + 10);
  operator delete(a1);
}

uint64_t sub_20C21F678(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C21F720(a1 + 8, (uint64_t *)(a1 + 24));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C21F70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C21F720(uint64_t a1, uint64_t *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t, int *, _QWORD);
  _QWORD *v7;
  uint64_t v8;
  int v10;
  int v11;

  v4 = *a2;
  v3 = a2 + 2;
  v6 = *(void (**)(_QWORD *, uint64_t, int *, _QWORD))a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(v4 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(_QWORD *, uint64_t, int *, _QWORD))(*v7 + v6);
  v8 = a2[1];
  sub_20BFD6E54(&v10, v3);
  sub_20BFD6EA4(&v11, (_DWORD *)a2 + 5);
  v6(v7, v8, &v10, *((unsigned __int8 *)a2 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  return sub_20BFD265C(&v10);
}

void sub_20C21F7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _DWORD *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C21F7D4@<X0>(_DWORD *a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  void *__p;
  void *v9;
  void **v10;

  sub_20C21FB34(&v5, a1, a2);
  sub_20C21FA84((uint64_t)&v5, a3);
  sub_20BF1C150(&v10, 0);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  sub_20C21DABC(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C21F858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C21D958((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex *sub_20C21F86C(unint64_t *a1, uint64_t a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v15;
  const char *v17;
  char *v18;
  void **v19;
  char *v20;
  void *__p[2];
  char v22;
  _QWORD v23[4];
  char v24;
  unint64_t *v25;
  char v26;

  v26 = 1;
  v25 = a1 + 4;
  tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(a1 + 4));
  v6 = sub_20C21FB94(*a1 + 208, (unsigned int **)a2);
  v7 = v6;
  if (!v8)
  {
    if (!a3 || *((_QWORD *)v6 + 1))
    {
      v23[0] = "pcp/cache.cpp";
      v23[1] = "_PublishOneOutput";
      v23[2] = 1569;
      v23[3] = "const PcpPrimIndex *pxrInternal__aapl__pxrReserved__::PcpCache::_ParallelIndexer::_PublishOneOutput(std::"
               "pair<_PrimIndexCache::NodeHandle, PcpPrimIndexOutputs> &&, BOOL)";
      v24 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v6, (uint64_t)__p);
      if (v22 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      v20 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"PrimIndex <%s> already exists in cache", v17, v18, v19);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "allowInvalid && !iresult.first->second.IsValid()", v20);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    sub_20C21E2A8((uint64_t)v7 + 8, *(_QWORD *)a2 + 8);
  }
  v9 = v25;
  v25 = 0;
  if (v26)
  {
    while (1)
    {
      v10 = *v9;
      v11 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        while (1)
        {
          v12 = __ldaxr(v9);
          if (v12 != v10)
            break;
          if (!__stlxr(v11, v9))
            goto LABEL_15;
        }
        __clrex();
        do
          v13 = __ldxr(v9);
        while (__stxr(v13, v9));
      }
      while (v13 == v10);
      sched_yield();
    }
  }
  do
    v14 = __ldaxr(v9);
  while (__stlxr(v14 - 4, v9));
LABEL_15:
  v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Add(*(_QWORD **)(*a1 + 288), v15, (uint64_t *)(a2 + 96), (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)(a2 + 80), (uint64_t *)(a2 + 88));
  sub_20BEBF29C(&v25);
  return v15;
}

void sub_20C21F9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_20BEBF29C((_QWORD *)(v16 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_20C21FA30(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

_QWORD *sub_20C21FA84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  _QWORD *result;

  *a2 = 0;
  v4 = operator new(0x48uLL);
  result = (_QWORD *)sub_20C21FACC((uint64_t)v4, a1);
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  *a2 = result;
  return result;
}

void sub_20C21FAC4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C21FACC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = sub_20BFD38A4((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD38DC(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

_DWORD *sub_20C21FB34(_DWORD *a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 2), a3);
  return a1;
}

void sub_20C21FB80(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C21FB94(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6[2];
  unsigned int **v7;

  v3 = *a2;
  v7 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C21FD58(a1, v3, (uint64_t)&v7);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
  {
    sub_20C21FBE8(a1, v6);
    return v6[0];
  }
  return result;
}

_DWORD *sub_20C21FBE8(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  __int128 v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10[2];
  __int128 v11;
  void **v12;
  int v13;
  int v14;
  void *__p[2];
  __int128 v16;
  void **v17;
  int v18;
  int v19;

  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v18);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18))
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v10);
    sub_20BFD6E54(&v13, &v18);
    sub_20BFD6EA4(&v14, &v19);
    v4 = *(_OWORD *)v10;
    v10[0] = 0;
    v10[1] = 0;
    *(_OWORD *)__p = v4;
    v16 = v11;
    v11 = 0uLL;
    v5 = v12;
    v12 = 0;
    v17 = v5;
    v6 = sub_20C22008C(a1, &v13);
    sub_20BF1C150(&v17, 0);
    if (__p[1])
    {
      *(void **)&v16 = __p[1];
      operator delete(__p[1]);
    }
    sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_20BFD265C(&v13);
    sub_20BF1C150(&v12, 0);
    if (v10[1])
    {
      *(void **)&v11 = v10[1];
      operator delete(v10[1]);
    }
    sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v10);
    v7 = *(_QWORD *)(v6 + 56);
    if (v7)
      v8 = v7 | 1;
    else
      v8 = v6;
    *((_QWORD *)v3 + 8) = v8;
    *(_QWORD *)(v6 + 56) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  return sub_20BFD265C(&v18);
}

void sub_20C21FD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  sub_20C21D958((uint64_t)&a14);
  sub_20C21C1E0((uint64_t)&a9);
  sub_20BFD1A18((_DWORD *)(v14 - 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C21FD58(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  _QWORD **v11;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_20C21FE64((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    result = (_QWORD *)*v7;
    while (*result != *(_QWORD *)a2)
    {
      result = (_QWORD *)result[6];
      if (!result)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v10 = *(_QWORD *)(a1 + 24);
    if (v10 > (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3)
    {
      sub_20C21FE64((void **)a1);
      v10 = *(_QWORD *)(a1 + 24);
      v7 = (_QWORD *)(*(_QWORD *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = (_QWORD *)*v7;
    }
    v11 = *(_QWORD ***)a3;
    *(_QWORD *)(**(_QWORD **)a3 + 48) = v8;
    result = *v11;
    *v11 = 0;
    *v7 = result;
    *(_QWORD *)(a1 + 24) = v10 + 1;
  }
  return result;
}

void sub_20C21FE64(void **a1)
{
  char *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  _BOOL4 v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;

  sub_20BEB59B0((uint64_t)&v21, (uint64_t)"Sdf", (uint64_t)"SdfPathTable::_Grow");
  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::PcpPrimIndex]", 0, v2);
    v5 = v4 != 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19 = v4;
  v20 = v5;
  v6 = (2 * (_QWORD)a1[4]) | 1;
  if (v6 <= 7)
    v6 = 7;
  a1[4] = (void *)v6;
  sub_20C220018(&v17, v6 + 1);
  v7 = a1[1];
  if (v7 != *a1)
  {
    v8 = 0;
    v9 = (v7 - (_BYTE *)*a1) >> 3;
    do
    {
      v10 = (unsigned int *)*((_QWORD *)*a1 + v8);
      if (v10)
      {
        v11 = (unint64_t)a1[4];
        do
        {
          v12 = (unsigned int *)*((_QWORD *)v10 + 6);
          v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          v14 = v17;
          *((_QWORD *)v10 + 6) = *(_QWORD *)(v17 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v10;
          v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  v15 = a1[2];
  a1[2] = v18;
  *(_QWORD *)&v17 = v7;
  v18 = v15;
  if (v7)
  {
    *((_QWORD *)&v17 + 1) = v7;
    operator delete(v7);
  }
  v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_20C21FFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C220018(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C220070(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C22008C(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5[2];
  _DWORD *v6;

  v6 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2200D8(a1, a2, &v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_20C21FBE8(a1, v5);
    return v5[0];
  }
  return result;
}

_QWORD *sub_20C2200D8(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_20C21FE64((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = (_QWORD *)*v7;
    while (*v9 != *(_QWORD *)a2)
    {
      v9 = (_QWORD *)v9[6];
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      sub_20C21FE64((void **)a1);
      v7 = (_QWORD *)(*(_QWORD *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = (_QWORD *)*v7;
    }
    v9 = operator new(0x48uLL);
    sub_20C220218(v9, *a3);
    v9[7] = 0;
    v9[8] = 0;
    v9[6] = v8;
    *v7 = v9;
    ++*(_QWORD *)(a1 + 24);
  }
  return v9;
}

void sub_20C220204(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C220218(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a2 + 2));
  return a1;
}

void sub_20C220258(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C22026C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  sub_20C2202C0((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_20C2202A0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_20C21DF58((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2202C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 8) = 0u;
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 64) = v4;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData((_QWORD *)(a1 + 80), (uint64_t *)(a2 + 80));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return a1;
}

void sub_20C220394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  *v3 = 0;
  if (v5)
    sub_20C201118((uint64_t)v3, v5);
  sub_20BDE9EB0((void ***)va);
  sub_20C21C1E0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2203CC(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD *, uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t result;
  unint64_t v17;
  _BYTE *v18;

  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  v10 = (*(_QWORD *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    *v11 = 0;
    v11[1] = 0;
  }
  v13 = a1 + 3;
  v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9)
    sub_20BF3A228((uint64_t)a1, a1 + 3, v9, a4[1]);
  if (v11)
  {
    sub_20BEB3FEC((uint64_t)&v18, (uint64_t)(a1 + 4));
    v14 = (_QWORD *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v14 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      *v14 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    v15 = v18;
    if (v18)
    {
      __dmb(0xBu);
      *v15 = 0;
    }
  }
  else
  {
    v11 = (_QWORD *)a1[2];
    __dmb(0xBu);
  }
  result = a5(&v11[15 * v10 + 2], a2);
  v11[1] |= 1 << v10;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 + 8, v13));
  return result;
}

void sub_20C220500(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  __cxa_begin_catch(a1);
  v4 = (unint64_t *)(*(_QWORD *)(v1 + 8) + 272);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  sub_20BF3A1B0(v2, v3);
}

void sub_20C220528()
{
  __cxa_end_catch();
  __break(1u);
}

void sub_20C220530(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C220584(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  sub_20C2202C0((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_20C2205B4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_20C21DF58((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2205D4(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 60)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C220760((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20C2206E8();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 10) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C2206D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20C2206E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C788);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C788))
  {
    dword_25473C778 = 0;
    word_25473C77C = -1;
    byte_25473C77E = 1;
    __cxa_atexit((void (*)(void *))sub_20C220878, &dword_25473C778, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473C788);
  }
  return &dword_25473C778;
}

_QWORD *sub_20C220760(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2207D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C2207E4(&a9);
  _Unwind_Resume(a1);
}

void sub_20C2207E4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C220824((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t *sub_20C220824(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    do
    {
      if (*(__int16 *)(v2 - 12) != -1)
      {
        v3 = *(_QWORD *)(v2 - 8);
        if ((v3 & 7) != 0)
        {
          v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
          do
            v5 = __ldxr(v4);
          while (__stlxr(v5 - 2, v4));
        }
        *(_WORD *)(v2 - 12) = -1;
      }
      v2 -= 16;
    }
    while (v2 != v1);
  }
  result[1] = v1;
  return result;
}

uint64_t sub_20C220878(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if (*(__int16 *)(result + 4) != -1)
  {
    v1 = *(_QWORD *)(result + 8);
    if ((v1 & 7) != 0)
    {
      v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t sub_20C2208B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = off_24C52BB28;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  sub_20BFD38A4((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_20C220950(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a1 = off_24C52BB28;
  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  return a1;
}

void sub_20C2209B0(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *a1 = off_24C52BB28;
  v2 = a1[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_20BFD265C((_DWORD *)a1 + 6);
  operator delete(a1);
}

uint64_t sub_20C220A10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *Instance;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unsigned int v9;
  int v10;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 32), &v9);
  sub_20C21EBF4(v2, v3, &v9, *(unsigned __int8 *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = v8;
  v6 = atomic_load(Instance + 18);
  if (v5 < v6
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v8, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  return 0;
}

void sub_20C220ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  sub_20BFD1A18(&a10);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C220B00(pxrInternal__aapl__pxrReserved__ *a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
    sub_20C220B74((pxrInternal__aapl__pxrReserved__ *)&v1);
  v3 = (void **)&v1;
  sub_20C21E3A0(&v3);
}

void sub_20C220B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C21E3A0(&a12);
  _Unwind_Resume(a1);
}

void sub_20C220B74(pxrInternal__aapl__pxrReserved__ *a1)
{
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  __int128 v7;
  uint64_t v8;
  void **v9[2];

  v7 = *(_OWORD *)a1;
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0] = 0;
    v9[1] = v3;
    v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(_BYTE *)(v4 - 11) = 1;
    *(_QWORD *)v4 = &unk_24C52BB70;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 8) = v7;
    v5 = v8;
    v7 = 0uLL;
    v8 = 0;
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = DetachedDispatcher + 264;
    v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v4 - 40))(*(_QWORD *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_20C220C5C();
  }
  v9[0] = (void **)&v7;
  sub_20C21E3A0(v9);
}

void sub_20C220C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C21E3A0(&a12);
  _Unwind_Resume(a1);
}

void sub_20C220C5C()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C220CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C220CF8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C52BB70;
  v3 = (void **)(a1 + 8);
  sub_20C21E3A0(&v3);
  return a1;
}

void sub_20C220D40(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C52BB70;
  v2 = (void **)(a1 + 8);
  sub_20C21E3A0(&v2);
  operator delete(a1);
}

uint64_t sub_20C220D8C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C220C5C();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C220E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C220E2C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C220E58(uint64_t a1)
{
  void *v2;

  sub_20C220E90(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C220E90(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20BFD7654(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C220ECC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C220ECC(a1, *a2);
    sub_20C220ECC(a1, a2[1]);
    sub_20BEC1AF4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C220F14(uint64_t *a1)
{
  void *v2;

  sub_20C21B218(a1);
  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_20C220F48(uint64_t *a1)
{
  void *v2;

  sub_20C21B2C4(a1);
  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_20C220F7C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C220FD0(a1, *a2, a2 + 1);
  return a1;
}

void sub_20C220FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C220ECC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C220FD0(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20C221054(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20C221054(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_20BDEC0F8(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20C2210E8((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C2211E0((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C2210E8@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C221150(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C221138(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C2211E0(v1, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C221150(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  sub_20BE78B98(__dst + 24, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return __dst;
}

void sub_20C2211C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C2211E0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEC1AF4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C221224(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t result;
  char v18;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v14 = a2 + 24;
  v12 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  v13 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  v16 = a3 + 24;
  v15 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  if (v13 - v12 != *((_QWORD *)v16 + 1) - (_QWORD)v15)
    return 0;
  if (v12 == v13)
    return 1;
  do
  {
    result = sub_20BEB4EF8((uint64_t)&v18, v12, v15);
    if (!(_DWORD)result)
      break;
    v12 += 24;
    v15 += 24;
  }
  while (v12 != v13);
  return result;
}

uint64_t **sub_20C221320(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_20C2214AC((uint64_t)v18, (uint64_t)(v9 + 2));
          v10 = (uint64_t **)sub_20BDFC638((uint64_t)v5, v18, v17 + 4);
          sub_20BDDE1B4(v5, v18[0], v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_20BDFC6B0((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_20C221504((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20C221558(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_20C221498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C221504((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2214AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2 + 24)
    sub_20BE75818(v4, *(std::string **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

uint64_t sub_20C221504(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20C220ECC(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20C220ECC(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20C221558(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  sub_20C2210E8((uint64_t)a1, a2, (uint64_t)v7);
  v3 = (uint64_t **)sub_20BDFC638((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_20BDDE1B4(a1, v6, v3, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_20C2211E0((uint64_t)v7, 0);
  return v4;
}

void sub_20C2215C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2211E0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2215D8(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  sub_20C221844(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_20BDEC6E0(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C2218AC((uint64_t)v20, 0);
  return v9;
}

void sub_20C22182C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2218AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C221844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x18uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  sub_20BFD6E54((_DWORD *)v8 + 4, a3);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, a3 + 1);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C2218AC(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFD7654(v2 + 4);
    operator delete(v2);
  }
}

uint64_t sub_20C2218F0(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20C0AD934(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C2218AC((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t *sub_20C22193C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20BFF2AB0((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    sub_20BDDE1B4(a1, v9, v7, v6);
  }
  return v6;
}

void sub_20C2219C0(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 18;
        sub_20C221A44((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C221A44(uint64_t a1, _DWORD *a2)
{
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  sub_20BFD265C(a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

uint64_t sub_20C221A8C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    sub_20BDDF694();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE7BBA0((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[72 * v3];
  v13 = &v7[72 * v6];
  sub_20C221BB0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 72;
  sub_20C221C14(a1, &v10);
  v8 = a1[1];
  sub_20C221DC4(&v10);
  return v8;
}

void sub_20C221B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C221DC4((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C221BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  sub_20BFD38A4((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD38DC((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  sub_20BFD38A4((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_20BFD38DC((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  sub_20C201ECC((_DWORD *)(a2 + 16), a3 + 16);
  result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_20C221C14(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C221C88((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C221C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 72;
      sub_20C21A06C(v7 - 72, v9);
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C221D40((uint64_t)v12);
  return v10;
}

void sub_20C221D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C221D40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C221D40(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C221D74((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C221D74(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C221A44(v3, v1);
      v1 += 18;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C221DC4(void **a1)
{
  sub_20C221DF4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C221DF4(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 72;
      result = sub_20C221A44(v4, (_DWORD *)(v1 - 72));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C221E38(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  int v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  _DWORD *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char v20;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v21;
  char *v22;
  void *v23;
  void *v24;
  char v25;
  uint64_t *CulledDependencies;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  pxrInternal__aapl__pxrReserved__::PcpCache *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int *v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *v41;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v42;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v43;
  uint64_t *p_ParentNode;
  pxrInternal__aapl__pxrReserved__::PcpCache *v45;
  _QWORD *v46;
  int *v47;
  _DWORD *v48;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v57;
  uint64_t *Identifier;
  void *v59;
  const char *v60;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v61;
  uint64_t *v62;
  const char *v63;
  char *v64;
  void **v65;
  char *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  int *v71;
  pxrInternal__aapl__pxrReserved__::SdfPath *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *__p[2];
  char v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  char v91;
  char *ParentNode;
  const char *v93;
  uint64_t v94;
  const char *v95;
  char v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 48);
  v7 = **(const pxrInternal__aapl__pxrReserved__::SdfPath ***)a1;
  if (*(_QWORD *)a3 != *(_QWORD *)v7 && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, v7))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8));
    if (!(_DWORD)result)
      return result;
  }
  v9 = **(pxrInternal__aapl__pxrReserved__::SdfPath ***)a1;
  if (*(_QWORD *)a3 == *(_QWORD *)v9 || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v9, a3))
    v10 = **(_DWORD **)(a1 + 16);
  else
    v10 = **(_DWORD **)(a1 + 16) | 6;
  v11 = **(const pxrInternal__aapl__pxrReserved__::SdfPath ***)a1;
  if (*(_QWORD *)a3 == *(_QWORD *)v11 || (v12 = a3, !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, v11)))
    v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8);
  sub_20BFD6E54(&v77, v12);
  sub_20BFD6EA4(&v78, (_DWORD *)v12 + 1);
  v13 = *(uint64_t **)(a1 + 32);
  v75 = *(_QWORD *)(a1 + 24);
  v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 40);
  v15 = v14[1];
  if (v15)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)v14 + 1) + 14))
      v15 = *v14;
    else
      v15 = 0;
  }
  v76 = v15;
  sub_20BF1DD04((uint64_t *)&v76);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v87);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v87 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(a2, &ParentNode);
  sub_20BFD3EBC((int *)&v87, (int *)&ParentNode);
  sub_20BFD3F10((int *)&v87 + 1, (int *)&ParentNode + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
  v74 = v13;
  sub_20BFD265C(&ParentNode);
  v72 = a2;
  v73 = v6;
  while (1)
  {
    ParentNode = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&ParentNode);
    v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&ParentNode + 1);
    v17 = v87;
    v18 = ParentNode;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
    sub_20BFD265C(&ParentNode);
    if (v17 == v18)
    {
      v20 = 0;
      goto LABEL_25;
    }
    v19 = sub_20C215C80((_QWORD *)(v6 + 208), (unsigned int *)&v87);
    if (v19)
    {
      if (v19[1])
        break;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87, &ParentNode);
    sub_20BFD3EBC((int *)&v87, (int *)&ParentNode);
    sub_20BFD3F10((int *)&v87 + 1, (int *)&ParentNode + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
    sub_20BFD265C(&ParentNode);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v19 + 1, 6u, (uint64_t *)&v83);
  v23 = v83;
  v22 = v84;
  v24 = v85;
  if (v83 != v85 || v84 != v86)
  {
    v25 = 0;
    v35 = (int *)&v79 + 1;
    v36 = (_DWORD *)&ParentNode + 1;
    v37 = v86 - 1;
    while (1)
    {
      v38 = v22;
      __p[0] = v23;
      __p[1] = v22;
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)__p, v21))goto LABEL_79;
      LayerStack = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      if (*LayerStack != v76)
        goto LABEL_79;
      Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, Path))
        goto LABEL_79;
      if (v10 == 63
        || (pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)__p, v21) & ~v10) == 0)
      {
        break;
      }
LABEL_78:
      v25 = 1;
LABEL_79:
      v22 = v38 + 1;
      if (v23 == v24 && v37 == v38)
        goto LABEL_24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v79);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v35);
    v91 = 0;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p) == 3)
    {
      ParentNode = (char *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      v93 = v41;
      v42 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      v43 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v88, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v77, v42, v43, 1);
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot((pxrInternal__aapl__pxrReserved__ *)&ParentNode, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91, &v89);
      sub_20BFD3EBC((int *)&v79, &v89);
      sub_20BFD3F10(v35, &v90);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v90);
      sub_20BFD265C(&v89);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v88 + 1);
      p_ParentNode = &v88;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot((pxrInternal__aapl__pxrReserved__ *)__p, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91, &ParentNode);
      sub_20BFD3EBC((int *)&v79, (int *)&ParentNode);
      sub_20BFD3F10(v35, (int *)&ParentNode + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
      p_ParentNode = (uint64_t *)&ParentNode;
    }
    sub_20BFD265C(p_ParentNode);
    if (!v91
      || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v79)
      && (ParentNode = "pcp/cache.cpp",
          v93 = "_ProcessDependentNode",
          v94 = 573,
          v95 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ProcessDependentNode(const PcpNodeRef &, "
                "const SdfPath &, const CacheFilterFn &, PcpDependencyVector *) [CacheFilterFn = (lambda at /Library/Cach"
                "es/com.apple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:659:26)]",
          v96 = 0,
          !pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&ParentNode, "!depIndexPath.IsEmpty()", 0)))
    {
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v35);
      sub_20BFD265C(&v79);
      goto LABEL_78;
    }
    if (*(_BYTE *)(v75 + 8))
    {
      v45 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)v75;
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79))
      {
        v46 = sub_20C215C80((_QWORD *)v45 + 26, (unsigned int *)&v79);
        if (!v46 || !v46[1])
          goto LABEL_77;
      }
      else if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79)
             || !pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79))
      {
        goto LABEL_77;
      }
    }
    sub_20BFD6E54(&ParentNode, &v79);
    v47 = v35;
    v48 = v36;
    v71 = v47;
    sub_20BFD6EA4(v36, v47);
    sub_20BFD6E54(&v93, &v77);
    sub_20BFD6EA4((_DWORD *)&v93 + 1, &v78);
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
    v52 = (char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v50, v51);
    sub_20C20123C(&v94, (uint64_t)v52);
    v97 = *(_OWORD *)(v52 + 40);
    v53 = v74[1];
    if (v53 >= v74[2])
    {
      v54 = sub_20C221A8C(v74, (uint64_t)&ParentNode);
      v55 = v74;
    }
    else
    {
      sub_20C221BB0((uint64_t)(v74 + 2), v74[1], (uint64_t)&ParentNode);
      v54 = v53 + 72;
      v55 = v74;
      v74[1] = v53 + 72;
    }
    v36 = v48;
    v55[1] = v54;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    v35 = v71;
    sub_20BFD265C(&v93);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v36);
    sub_20BFD265C(&ParentNode);
    goto LABEL_77;
  }
  v25 = 0;
LABEL_24:
  v20 = v25;
  a2 = v72;
  v6 = v73;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v87 + 1);
  sub_20BFD265C(&v87);
  CulledDependencies = pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetCulledDependencies(v6, (unsigned int *)a2);
  v27 = *CulledDependencies;
  v28 = CulledDependencies[1];
  if (*CulledDependencies != v28)
  {
    while (1)
    {
      if (v76 != *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v27 + 8)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 16)))
      {
        goto LABEL_48;
      }
      if (v10 == 63 || (*(_DWORD *)v27 & ~v10) == 0)
        break;
LABEL_47:
      v20 = 1;
LABEL_48:
      v27 += 88;
      if (v27 == v28)
        goto LABEL_52;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v83);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v83 + 1);
    LOBYTE(v79) = 0;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v27 + 24)))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 24), 1);
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRootUsingFunction((pxrInternal__aapl__pxrReserved__ *)(v27 + 32), (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, &ParentNode);
      sub_20BFD3EBC((int *)&v83, (int *)&ParentNode);
      sub_20BFD3F10((int *)&v83 + 1, (int *)&ParentNode + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
      sub_20BFD265C(&ParentNode);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      v29 = __p;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRootUsingFunction((pxrInternal__aapl__pxrReserved__ *)(v27 + 32), (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)&v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, &ParentNode);
      sub_20BFD3EBC((int *)&v83, (int *)&ParentNode);
      sub_20BFD3F10((int *)&v83 + 1, (int *)&ParentNode + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
      v29 = (void **)&ParentNode;
    }
    sub_20BFD265C(v29);
    if (!(_BYTE)v79
      || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v83)
      && (ParentNode = "pcp/cache.cpp",
          v93 = "_ProcessCulledDependency",
          v94 = 604,
          v95 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ProcessCulledDependency(const PcpCulledDe"
                "pendency &, const SdfPath &, const CacheFilterFn &, PcpDependencyVector *) [CacheFilterFn = (lambda at /"
                "Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:659:26)]",
          v96 = 0,
          !pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&ParentNode, "!depIndexPath.IsEmpty()", 0)))
    {
LABEL_46:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
      sub_20BFD265C(&v83);
      goto LABEL_47;
    }
    if (*(_BYTE *)(v75 + 8))
    {
      v30 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)v75;
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83))
      {
        v31 = sub_20C215C80((_QWORD *)v30 + 26, (unsigned int *)&v83);
        if (!v31 || !v31[1])
          goto LABEL_46;
      }
      else if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83)
             || !pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v83))
      {
        goto LABEL_46;
      }
    }
    sub_20BFD6E54(&ParentNode, &v83);
    sub_20BFD6EA4((_DWORD *)&ParentNode + 1, (_DWORD *)&v83 + 1);
    sub_20BFD6E54(&v93, &v77);
    sub_20BFD6EA4((_DWORD *)&v93 + 1, &v78);
    sub_20C20123C(&v94, v27 + 32);
    v97 = *(_OWORD *)(v27 + 72);
    v32 = v74[1];
    if (v32 >= v74[2])
    {
      v33 = sub_20C221A8C(v74, (uint64_t)&ParentNode);
      v34 = v74;
    }
    else
    {
      sub_20C221BB0((uint64_t)(v74 + 2), v74[1], (uint64_t)&ParentNode);
      v33 = v32 + 72;
      v34 = v74;
      v74[1] = v32 + 72;
    }
    v34[1] = v33;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    sub_20BFD265C(&v93);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
    sub_20BFD265C(&ParentNode);
    goto LABEL_46;
  }
LABEL_52:
  if ((v20 & 1) == 0)
  {
    ParentNode = "pcp/dependencies.h";
    v93 = "Pcp_ForEachDependentNode";
    v94 = 424;
    v95 = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(const SdfPath &, const PcpLayerStackRefPtr &, "
          "const SdfPath &, const PcpCache &, const NodeFn &, const CulledDepFn &) [NodeFn = (lambda at /Library/Caches/c"
          "om.apple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:724:28), CulledDepFn = (lambda at /Library/Caches/com.ap"
          "ple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:739:33)]";
    v96 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    v57 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500((uint64_t *)&v76);
    Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v57);
    v59 = &v83;
    sub_20C1FE438(Identifier);
    if (SHIBYTE(v85) < 0)
      v59 = v83;
    v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v72);
    sub_20C2033F4(&v79, (uint64_t *)(v73 + 128));
    v61 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(&v79);
    v62 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v61);
    sub_20C1FE438(v62);
    if (v82 >= 0)
      v65 = __p;
    else
      v65 = (void **)__p[0];
    v66 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v63, v64, Text, v59, v60, v65);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&ParentNode, "foundDep", v66);
    if (v82 < 0)
      operator delete(__p[0]);
    v67 = v80;
    if (v80)
    {
      v68 = (unsigned int *)(v80 + 8);
      do
      {
        v69 = __ldxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
    }
    if (SHIBYTE(v85) < 0)
      operator delete(v83);
  }
  sub_20C2012CC(&v76);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
  return (uint64_t)sub_20BFD265C(&v77);
}

void sub_20C22286C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a27,int a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
    operator delete(__p);
  sub_20C2012CC(&a27);
  sub_20BFD1A18(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C222AE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE7BBA0(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[72 * v4];
  v16 = &v10[72 * v9];
  sub_20C21A06C((uint64_t)v14, a2);
  v15 = v14 + 72;
  sub_20C221C14(a1, &v13);
  v11 = a1[1];
  sub_20C221DC4(&v13);
  return v11;
}

void sub_20C222BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C221DC4((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C222C00(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20C222C84(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20C222C84(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = sub_20BE7552C((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C222CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

void sub_20C222D08(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C222D08(a1, *a2);
    sub_20C222D08(a1, a2[1]);
    sub_20C222D50((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_20C222D50(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  sub_20BDE5038(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t **sub_20C222D98(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _QWORD v15[2];
  char v16;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x40uLL);
    v15[1] = v7;
    v13 = *a4;
    sub_20BFD6E54(v12 + 8, v13);
    sub_20BFD6EA4(v12 + 9, v13 + 1);
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 7) = 0;
    v16 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0] = 0;
    sub_20C222E90((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_20C222E90(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C222D50((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20C222ED4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((sub_20BFD758C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 28)) & 1) == 0)
      {
        if (!sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 28), a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_DWORD *sub_20C222F3C(uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 8);
  sub_20BF1C150((void ***)(a1 + 32), 0);
  v4 = v2;
  sub_20C21DAE8(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C222F90(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_20C222FD4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_20C22304C(a1, v3);
  return 1;
}

_QWORD *sub_20C222FD4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_20BFF2B40((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_20BFF2B40(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t *sub_20C22304C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = sub_20BE10B80(a1, a2);
  v4 = (unsigned int *)a2[5];
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_20C2230A8(_QWORD *a1, uint64_t a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a2 + 56);
  if (v2)
  {
    sub_20C223248(a1, *(_QWORD *)(a2 + 56));
    sub_20C223180(a1, v2);
  }
}

_QWORD *sub_20C2230E8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *result;
  _QWORD *v5;
  unsigned int v6;
  int v7;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(_QWORD *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    v5 = sub_20C215C80(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_20BFD265C(&v6);
    return (_QWORD *)sub_20C2232BC((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_20C22316C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C223180(_QWORD *a1, unsigned int *a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  void *v7;
  _DWORD *v8;

  v3 = a2 + 1;
  v4 = (_QWORD *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    v5 = v4;
    v6 = (unsigned int *)*v4;
    v4 = (_QWORD *)(*v4 + 48);
  }
  while (v6 != a2);
  --a1[3];
  *v5 = *((_QWORD *)a2 + 6);
  sub_20BF1C150((void ***)a2 + 5, 0);
  v7 = (void *)*((_QWORD *)a2 + 2);
  if (v7)
  {
    *((_QWORD *)a2 + 3) = v7;
    operator delete(v7);
  }
  sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  v8 = sub_20BFD265C(a2);
  operator delete(v8);
}

void sub_20C223248(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  ((void (*)(void))sub_20C2230A8)();
  v4 = *(_QWORD *)(a2 + 64);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      v7 = *(_QWORD *)(v5 + 64);
      if ((v7 & 7) != 0)
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      else
        v8 = 0;
      sub_20C2230A8(a1, v5);
      sub_20C223180(a1, (unsigned int *)v5);
      v5 = v8;
    }
    while (v8);
  }
}

uint64_t sub_20C2232BC(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 56);
  if (v2 == a2)
  {
    v5 = *(_QWORD *)(a2 + 64);
    if ((v5 & 7) != 0)
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    else
      v6 = 0;
    *(_QWORD *)(result + 56) = v6;
  }
  else
  {
    do
    {
      v3 = v2;
      v4 = *(_QWORD *)(v2 + 64);
      if ((v4 & 7) != 0)
        v2 = v4 & 0xFFFFFFFFFFFFFFF8;
      else
        v2 = 0;
    }
    while (v2 != a2);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
  }
  return result;
}

void sub_20C223308(_QWORD *a1, uint64_t a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a2 + 48);
  if (v2)
  {
    sub_20C2234A8(a1, *(_QWORD *)(a2 + 48));
    sub_20C2233E0(a1, v2);
  }
}

_QWORD *sub_20C223348(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *result;
  _QWORD *v5;
  unsigned int v6;
  int v7;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(_QWORD *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    v5 = sub_20C2161D0(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_20BFD265C(&v6);
    return (_QWORD *)sub_20C22351C((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_20C2233CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C2233E0(_QWORD *a1, unsigned int *a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _DWORD *v7;
  void **v8;

  v3 = a2 + 1;
  v4 = (_QWORD *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    v5 = v4;
    v6 = (unsigned int *)*v4;
    v4 = (_QWORD *)(*v4 + 40);
  }
  while (v6 != a2);
  --a1[3];
  *v5 = *((_QWORD *)a2 + 5);
  sub_20BF1C150((void ***)a2 + 4, 0);
  v8 = (void **)(a2 + 2);
  sub_20C21DAE8(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  v7 = sub_20BFD265C(a2);
  operator delete(v7);
}

void sub_20C2234A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  ((void (*)(void))sub_20C223308)();
  v4 = *(_QWORD *)(a2 + 56);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      v7 = *(_QWORD *)(v5 + 56);
      if ((v7 & 7) != 0)
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      else
        v8 = 0;
      sub_20C223308(a1, v5);
      sub_20C2233E0(a1, (unsigned int *)v5);
      v5 = v8;
    }
    while (v8);
  }
}

uint64_t sub_20C22351C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 48);
  if (v2 == a2)
  {
    v5 = *(_QWORD *)(a2 + 56);
    if ((v5 & 7) != 0)
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    else
      v6 = 0;
    *(_QWORD *)(result + 48) = v6;
  }
  else
  {
    do
    {
      v3 = v2;
      v4 = *(_QWORD *)(v2 + 56);
      if ((v4 & 7) != 0)
        v2 = v4 & 0xFFFFFFFFFFFFFFF8;
      else
        v2 = 0;
    }
    while (v2 != a2);
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(a2 + 56);
  }
  return result;
}

uint64_t sub_20C223568(uint64_t a1, char **a2, char *a3)
{
  unsigned __int8 v4;
  int v5;
  _QWORD *v7;
  char *v8;

  v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v4 & 1) != 0)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(*a2, 0, a3);
    *(_QWORD *)a1 = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(*(char **)a3, v7, v8);
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_20C2235D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void **v9;

  if (!a2)
    return;
  sub_20C21DD44((_QWORD *)(a2 + 568));
  v9 = (void **)(a2 + 544);
  sub_20C21E3A0(&v9);
  if (*(char *)(a2 + 495) < 0)
    operator delete(*(void **)(a2 + 472));
  v3 = *(_QWORD **)(a2 + 456);
  if (v3 == (_QWORD *)(a2 + 432))
  {
    v4 = 4;
    v3 = (_QWORD *)(a2 + 432);
    goto LABEL_8;
  }
  if (v3)
  {
    v4 = 5;
LABEL_8:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a2 + 48));
  v5 = *(unsigned int **)(a2 + 16);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  operator delete((void *)a2);
}

__n128 sub_20C22369C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52BBB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2236D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52BBB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C2236FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20C223704(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52BC18))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C223740()
{
  return &unk_24C52BC18;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C22374C(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5[2];
  _DWORD *v6;

  v6 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2238C0(a1, a2, &v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_20C223798(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_20C223798(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  void **v9;
  int v10;
  int v11;
  uint64_t v12;
  void **v13;
  int v14;
  int v15;
  void **v16;

  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v14);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v14))
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v8);
    sub_20C223C7C(&v10, &v14, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v8);
    v4 = sub_20C22374C(a1, &v10);
    sub_20BF1C150(&v13, 0);
    v16 = (void **)&v12;
    sub_20C21DAE8(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    sub_20BF1C150(&v9, 0);
    v16 = (void **)v8;
    sub_20C21DAE8(&v16);
    v5 = *(_QWORD *)(v4 + 48);
    if (v5)
      v6 = v5 | 1;
    else
      v6 = v4;
    *((_QWORD *)v3 + 7) = v6;
    *(_QWORD *)(v4 + 48) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_20BFD265C(&v14);
}

void sub_20C223884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C222F3C((uint64_t)va1);
  sub_20C21C2CC((uint64_t)va);
  sub_20BFD1A18((_DWORD *)(v2 - 48));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2238C0(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_20C223A00((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = (_QWORD *)*v7;
    while (*v9 != *(_QWORD *)a2)
    {
      v9 = (_QWORD *)v9[5];
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      sub_20C223A00((void **)a1);
      v7 = (_QWORD *)(*(_QWORD *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = (_QWORD *)*v7;
    }
    v9 = operator new(0x40uLL);
    sub_20C223C28(v9, *a3);
    v9[6] = 0;
    v9[7] = 0;
    v9[5] = v8;
    *v7 = v9;
    ++*(_QWORD *)(a1 + 24);
  }
  return v9;
}

void sub_20C2239EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C223A00(void **a1)
{
  char *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  _BOOL4 v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;

  sub_20BEB59B0((uint64_t)&v21, (uint64_t)"Sdf", (uint64_t)"SdfPathTable::_Grow");
  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::PcpPropertyIndex]", 0, v2);
    v5 = v4 != 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19 = v4;
  v20 = v5;
  v6 = (2 * (_QWORD)a1[4]) | 1;
  if (v6 <= 7)
    v6 = 7;
  a1[4] = (void *)v6;
  sub_20C223BB4(&v17, v6 + 1);
  v7 = a1[1];
  if (v7 != *a1)
  {
    v8 = 0;
    v9 = (v7 - (_BYTE *)*a1) >> 3;
    do
    {
      v10 = (unsigned int *)*((_QWORD *)*a1 + v8);
      if (v10)
      {
        v11 = (unint64_t)a1[4];
        do
        {
          v12 = (unsigned int *)*((_QWORD *)v10 + 5);
          v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          v14 = v17;
          *((_QWORD *)v10 + 5) = *(_QWORD *)(v17 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v10;
          v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  v15 = a1[2];
  a1[2] = v18;
  *(_QWORD *)&v17 = v7;
  v18 = v15;
  if (v7)
  {
    *((_QWORD *)&v17 + 1) = v7;
    operator delete(v7);
  }
  v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_20C223B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C223BB4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C223C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C223C28(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(a2 + 2));
  return a1;
}

void sub_20C223C68(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C223C7C(_DWORD *a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(a1 + 2), a3);
  return a1;
}

void sub_20C223CC8(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

void sub_20C223CDC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = a1;
  sub_20BDE9EB0(&a10);
}

void sub_20C223CE8(void ***a1)
{
  sub_20BF1C150(a1, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C223CF0()
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v0;

  return sub_20C21DABC(v0);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = (uint64_t *)(a1 + 8);
    do
    {
      v7 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), a2);
      v8 = v4 + 1;
      if (!v7)
      {
        v8 = v4;
        v6 = v4;
      }
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v6 != v3)
    {
      v9 = v6;
      while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28), a2))
      {
        v10 = (uint64_t *)v9[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v9[2];
            v12 = *v11 == (_QWORD)v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
        if (v11 == v3)
          return sub_20C137C48((uint64_t **)a1, v6, v3);
      }
      v3 = v9;
    }
  }
  else
  {
    v6 = (uint64_t *)(a1 + 8);
  }
  return sub_20C137C48((uint64_t **)a1, v6, v3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpLifeboat::PcpLifeboat(_QWORD *this)
{
  this[1] = 0;
  *this = this + 1;
  this[5] = 0;
  this[4] = 0;
  this[2] = 0;
  this[3] = this + 4;
  return this;
}

{
  this[1] = 0;
  *this = this + 1;
  this[5] = 0;
  this[4] = 0;
  this[2] = 0;
  this[3] = this + 4;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpLifeboat::~PcpLifeboat(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***this)
{
  sub_20C22CB2C((uint64_t)(this + 3), this[4]);
  sub_20C22CAE4((uint64_t)this, this[1]);
}

{
  sub_20C22CB2C((uint64_t)(this + 3), this[4]);
  sub_20C22CAE4((uint64_t)this, this[1]);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain(uint64_t a1, unint64_t *a2)
{
  return sub_20C22CB74(a1, a2, a2);
}

{
  return sub_20C22CCE0(a1 + 24, a2, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLifeboat::GetLayerStacks(pxrInternal__aapl__pxrReserved__::PcpLifeboat *this)
{
  return (uint64_t)this + 24;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpLifeboat::Swap(pxrInternal__aapl__pxrReserved__::PcpLifeboat *this, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a2)
{
  sub_20BF07C64((uint64_t *)this, (uint64_t)a2);
  return sub_20BF07C64((uint64_t *)this + 3, (uint64_t)a2 + 24);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(_QWORD *this)
{
  this[1] = 0;
  *this = this + 1;
  this[4] = 0;
  this[2] = 0;
  this[3] = this + 4;
  this[7] = 0;
  this[5] = 0;
  this[6] = this + 7;
  this[10] = 0;
  this[8] = 0;
  this[9] = this + 10;
  this[14] = 0;
  this[13] = 0;
  this[11] = 0;
  this[12] = this + 13;
  return this;
}

{
  this[1] = 0;
  *this = this + 1;
  this[4] = 0;
  this[2] = 0;
  this[3] = this + 4;
  this[7] = 0;
  this[5] = 0;
  this[6] = this + 7;
  this[10] = 0;
  this[8] = 0;
  this[9] = this + 10;
  this[14] = 0;
  this[13] = 0;
  this[11] = 0;
  this[12] = this + 13;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***this)
{
  char *v2;

  v2 = (char *)(this + 9);
  sub_20C22CB2C((uint64_t)(this + 12), this[13]);
  sub_20C22CAE4((uint64_t)v2, this[10]);
  sub_20C22D0C8((uint64_t)(this + 6), this[7]);
  sub_20C22CF48((uint64_t)(this + 3), this[4]);
  sub_20C22CE4C((uint64_t)this, this[1]);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidChange(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3)
{
  _BOOL4 v5;
  _BOOL4 v6;
  std::string *v7;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v8;
  uint64_t *Identifier;
  const char *v10;
  char *v11;
  uint64_t ***v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::SdfPath *v26;
  __int16 v27;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  _BOOL4 IsPossibleDynamicFileFormatArgumentAttribute;
  int v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v36;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  uint64_t v39;
  uint64_t v40;
  const char *Text;
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **v50;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v51;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t *v56;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v64;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v65;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t *v70;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  uint64_t v75;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t *v80;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v81;
  uint64_t v82;
  const char *v83;
  char *v84;
  uint64_t v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t *v92;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  uint64_t v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  unsigned int v100;
  pxrInternal__aapl__pxrReserved__::SdfPath *v101;
  unsigned int v102;
  pxrInternal__aapl__pxrReserved__::SdfPath *v103;
  uint64_t v104;
  pxrInternal__aapl__pxrReserved__::SdfPath *v105;
  _QWORD **AllLayerStacksUsingLayer;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  const char *v111;
  char *v112;
  uint64_t v113;
  uint64_t ***v114;
  const std::string::value_type *v115;
  std::string::size_type v116;
  _DWORD *v117;
  _DWORD *j;
  _DWORD *v119;
  _DWORD *k;
  _DWORD *v121;
  _DWORD *m;
  uint64_t IsPropertyPath;
  pxrInternal__aapl__pxrReserved__::SdfPath *v124;
  unsigned int v125;
  int v126;
  int v127;
  pxrInternal__aapl__pxrReserved__::SdfPath *v128;
  uint64_t v129;
  char *v130;
  _QWORD **v131;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  pxrInternal__aapl__pxrReserved__::TfToken *v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t *EmptyString;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  _DWORD *v146;
  pxrInternal__aapl__pxrReserved__::SdfPath *IsValidIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfPath *v148;
  _DWORD *v149;
  pxrInternal__aapl__pxrReserved__::TfToken *v150;
  unsigned int *v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t *v157;
  pxrInternal__aapl__pxrReserved__::SdfPath *v158;
  pxrInternal__aapl__pxrReserved__::SdfPath *v159;
  _DWORD *v160;
  unsigned int *v161;
  unsigned int v162;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v163;
  uint64_t v164;
  const char *v165;
  char *v166;
  uint64_t v167;
  const std::string::value_type *v168;
  std::string::size_type v169;
  int v170;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v171;
  uint64_t v172;
  pxrInternal__aapl__pxrReserved__::SdfPath *v173;
  uint64_t v174;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v175;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v176;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v177;
  uint64_t *v178;
  uint64_t v179;
  char *v180;
  uint64_t n;
  _DWORD *v182;
  _DWORD *v183;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  const char *v188;
  const char *v189;
  char *v190;
  const std::string::value_type *v191;
  std::string::size_type v192;
  int v193;
  uint64_t **v194;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v199;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v200;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v201;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v202;
  __int16 v203;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  const pxrInternal__aapl__pxrReserved__::TfToken *v210;
  uint64_t v211;
  const char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  _DWORD *v221;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  const char *v226;
  const char *v227;
  char *v228;
  const std::string::value_type *v229;
  std::string::size_type v230;
  int v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v235;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v237;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  char *v239;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v240;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v241;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v242;
  pxrInternal__aapl__pxrReserved__::VtValue *v243;
  char *v244;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v245;
  uint64_t v246;
  const char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  const char *v251;
  const std::string::value_type *v252;
  std::string::size_type v253;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t *v258;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v259;
  uint64_t v260;
  const char *v261;
  char *v262;
  uint64_t v263;
  const std::string::value_type *v264;
  std::string::size_type v265;
  _DWORD *v266;
  _DWORD *v267;
  uint64_t (*v268)(uint64_t *);
  char v269;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v270;
  uint64_t v271;
  const char *v272;
  char *v273;
  uint64_t v274;
  const std::string::value_type *v275;
  std::string::size_type v276;
  uint64_t *v277;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v278;
  std::string::size_type v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t *v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t *v286;
  _BOOL4 ii;
  unsigned int v288;
  int v289;
  uint64_t **v290;
  int v291;
  uint64_t **v292;
  int v293;
  uint64_t **v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  pxrInternal__aapl__pxrReserved__::SdfPath *v298;
  int v299;
  const char *v300;
  char *v301;
  uint64_t *v302;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v303;
  uint64_t v304;
  uint64_t v305;
  const char *v306;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  const char *v311;
  const char *v312;
  char *v313;
  uint64_t v314;
  const char *v315;
  const std::string::value_type *v316;
  std::string::size_type v317;
  uint64_t *v318;
  uint64_t *v319;
  const char *v320;
  const char *v321;
  const char *v322;
  char *v323;
  const std::string::value_type *v324;
  std::string::size_type v325;
  const std::string::value_type *v326;
  std::string::size_type v327;
  uint64_t *v328;
  uint64_t *v329;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v330;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v331;
  uint64_t v332;
  unsigned int *Entry;
  int v334;
  const char *v335;
  char *v336;
  uint64_t *v337;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v338;
  uint64_t v339;
  uint64_t v340;
  const char *v341;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  const char *v346;
  const char *v347;
  char *v348;
  uint64_t v349;
  const char *v350;
  const std::string::value_type *v351;
  std::string::size_type v352;
  uint64_t *v353;
  const char *v354;
  const char *v355;
  const char *v356;
  char *v357;
  const std::string::value_type *v358;
  std::string::size_type v359;
  uint64_t *v360;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  const char *v365;
  const char *v366;
  char *v367;
  uint64_t v368;
  const std::string::value_type *v369;
  std::string::size_type v370;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *DynamicFileFormatArgumentDependencyData;
  const std::string::value_type *v372;
  std::string::size_type v373;
  uint64_t v374;
  unsigned int *v375;
  uint64_t v376;
  int v377;
  unint64_t v378;
  const char *v379;
  uint64_t ***v380;
  int v381;
  unint64_t v382;
  const char *v383;
  const char *v384;
  char *v385;
  unint64_t *v386;
  const char *v387;
  const std::string::value_type *v388;
  std::string::size_type v389;
  const std::string::value_type *v390;
  std::string::size_type v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t v394;
  pxrInternal__aapl__pxrReserved__::SdfPath *PrimPath;
  pxrInternal__aapl__pxrReserved__::PcpCache **v396;
  int v397;
  const char *v398;
  char *v399;
  uint64_t *v400;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v401;
  uint64_t v402;
  uint64_t v403;
  const char *v404;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  const char *v409;
  const char *v410;
  char *v411;
  uint64_t v412;
  const char *v413;
  const std::string::value_type *v414;
  std::string::size_type v415;
  uint64_t *v416;
  uint64_t *v417;
  const char *v418;
  const char *v419;
  const char *v420;
  char *v421;
  const std::string::value_type *v422;
  std::string::size_type v423;
  uint64_t *v424;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  const char *v429;
  const char *v430;
  char *v431;
  uint64_t v432;
  const std::string::value_type *v433;
  std::string::size_type v434;
  const char *v435;
  char *v436;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *v437;
  const std::string::value_type *v438;
  std::string::size_type v439;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v440;
  uint64_t v441;
  int v442;
  int v443;
  unint64_t v444;
  const char *v445;
  _QWORD *v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t ***v449;
  int v450;
  unint64_t v451;
  const char *v452;
  const char *v453;
  char *v454;
  unint64_t *v455;
  const char *v456;
  const std::string::value_type *v457;
  std::string::size_type v458;
  const std::string::value_type *v459;
  std::string::size_type v460;
  uint64_t *v461;
  uint64_t *v462;
  uint64_t *v463;
  uint64_t *v464;
  uint64_t *v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t *v468;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v469;
  pxrInternal__aapl__pxrReserved__::SdfPath **PathsToPrimsWithRelocates;
  uint64_t *v471;
  BOOL v472;
  pxrInternal__aapl__pxrReserved__::SdfPath *v473;
  pxrInternal__aapl__pxrReserved__::SdfPath *v474;
  uint64_t *v475;
  uint64_t *v476;
  uint64_t *v477;
  uint64_t *v478;
  int v479;
  const char *v480;
  char *v481;
  uint64_t *v482;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v483;
  uint64_t v484;
  uint64_t v485;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  const char *v490;
  const char *v491;
  char *v492;
  uint64_t v493;
  const std::string::value_type *v494;
  std::string::size_type v495;
  uint64_t *v496;
  uint64_t *v497;
  unsigned int v498;
  const char *v499;
  const char *v500;
  const char *v501;
  char *v502;
  const std::string::value_type *v503;
  std::string::size_type v504;
  const std::string::value_type *v505;
  std::string::size_type v506;
  uint64_t *v507;
  uint64_t *v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t v512;
  _DWORD *v513;
  int *v514;
  uint64_t *v515;
  uint64_t *v516;
  uint64_t *v517;
  uint64_t *v518;
  uint64_t *v519;
  uint64_t *v520;
  const char *v521;
  const char *v522;
  const char *v523;
  char *v524;
  const std::string::value_type *v525;
  std::string::size_type v526;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v527;
  uint64_t v528;
  const char *v529;
  char *v530;
  uint64_t v531;
  const std::string::value_type *v532;
  std::string::size_type v533;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v534;
  uint64_t v535;
  const char *v536;
  char *v537;
  uint64_t v538;
  const std::string::value_type *v539;
  std::string::size_type v540;
  uint64_t *v541;
  unsigned int v542;
  int v543;
  uint64_t *v544;
  uint64_t *v545;
  std::string *v546;
  uint64_t v547;
  _BOOL4 HasAnyDynamicFileFormatArgumentAttributeDependencies;
  int IsUsd;
  std::string *v550;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v551;
  pxrInternal__aapl__pxrReserved__::SdfPath *v552;
  pxrInternal__aapl__pxrReserved__::SdfPath *v553;
  uint64_t *v554;
  uint64_t v555;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **v556;
  _BOOL4 v558;
  uint64_t *v559;
  uint64_t *v560;
  uint64_t v561;
  std::string v562;
  uint64_t *v563;
  _QWORD *v564[2];
  uint64_t *v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t *v568;
  _QWORD *v569;
  uint64_t v570;
  _DWORD *v571;
  _DWORD *v572;
  unint64_t v573;
  _DWORD *v574;
  _DWORD *v575;
  unint64_t v576;
  _DWORD *v577;
  _DWORD *v578;
  unint64_t v579;
  uint64_t *v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t *v583;
  _QWORD *v584;
  uint64_t v585;
  uint64_t *v586;
  _QWORD *v587;
  uint64_t v588;
  pxrInternal__aapl__pxrReserved__::PcpCache *v589;
  pxrInternal__aapl__pxrReserved__::PcpCache *v590;
  unint64_t v591;
  uint64_t v592;
  unsigned __int8 v593;
  unint64_t v594;
  std::string::size_type v595;
  unsigned __int8 v596;
  unint64_t v597;
  uint64_t *v598;
  uint64_t **v599;
  pxrInternal__aapl__pxrReserved__::PcpCache *v600;

  v587 = 0;
  v588 = 0;
  v585 = 0;
  v586 = (uint64_t *)&v587;
  v583 = (uint64_t *)&v584;
  v584 = 0;
  v581 = 0;
  v582 = 0;
  v579 = 0;
  v580 = (uint64_t *)&v581;
  v577 = 0;
  v578 = 0;
  v574 = 0;
  v575 = 0;
  v576 = 0;
  v571 = 0;
  v572 = 0;
  v573 = 0;
  v569 = 0;
  v570 = 0;
  v567 = 0;
  v568 = (uint64_t *)&v569;
  v565 = 0;
  v566 = 0;
  v564[0] = 0;
  v564[1] = 0;
  v563 = (uint64_t *)v564;
  memset(&v562, 0, sizeof(v562));
  v5 = sub_20C1FE3D8(0);
  v6 = v5;
  v7 = &v562;
  if (!v5)
    v7 = 0;
  v550 = v7;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(a2, (uint64_t *)&v591);
    v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)&v591);
    Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v8);
    sub_20C1FE438(Identifier);
    if ((v596 & 0x80u) == 0)
      v12 = (uint64_t ***)&v594;
    else
      v12 = (uint64_t ***)v594;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Cache: %s\n", v10, v11, v12);
    if (SHIBYTE(v599) >= 0)
      v13 = (const std::string::value_type *)&v597;
    else
      v13 = (const std::string::value_type *)v597;
    if (SHIBYTE(v599) >= 0)
      v14 = HIBYTE(v599);
    else
      v14 = (std::string::size_type)v598;
    std::string::append(&v562, v13, v14);
    if (SHIBYTE(v599) < 0)
      operator delete((void *)v597);
    if ((char)v596 < 0)
      operator delete((void *)v594);
    v15 = v592;
    if (v592)
    {
      v16 = (unsigned int *)(v592 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  IsUsd = pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a2);
  v558 = v6;
  HasAnyDynamicFileFormatArgumentAttributeDependencies = pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentAttributeDependencies((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)a2);
  v21 = *a3;
  v547 = a3[1];
  if (*a3 == v547)
    goto LABEL_862;
  v556 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)a2;
  do
  {
    v555 = v21;
    v552 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16);
    if (HasAnyDynamicFileFormatArgumentAttributeDependencies)
    {
      v22 = v565;
      for (i = v566; i != v22; sub_20C22C998(i))
        i -= 2;
      v566 = v22;
      v24 = v552;
      if (*(_DWORD *)(v555 + 220) >= 2u)
        v24 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v552;
      v25 = *(_DWORD *)(v555 + 216);
      if (v25)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 200 * v25);
        do
        {
          v589 = a2;
          v559 = (uint64_t *)&v565;
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v24))
          {
            v597 = (unint64_t)&v589;
            v598 = (uint64_t *)v555;
            v599 = &v559;
            v27 = *((_WORD *)v24 + 96);
            NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v24);
            IsPossibleDynamicFileFormatArgumentAttribute = pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentAttribute((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)a2, NameToken);
            if ((v27 & 0x40) != 0)
            {
              if (IsPossibleDynamicFileFormatArgumentAttribute)
              {
                v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v37)
                  v37 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v36, v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v37 + 88), 0))
                {
                  sub_20C22C768((uint64_t)&v597, v24, 0);
                  if (v558)
                  {
                    v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                    v39 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v38);
                    v40 = *(char *)(v39 + 23) >= 0 ? v39 : *(_QWORD *)v39;
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
                    LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v589);
                    v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
                    v44 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v43);
                    v47 = *(char *)(v44 + 23) >= 0 ? v44 : *(_QWORD *)v44;
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Property renamed to @%s@<%s> may affect file format arguments in cache %s\n", v45, v46, v40, Text, v47);
                    v48 = (v596 & 0x80u) == 0
                        ? (const std::string::value_type *)&v594
                        : (const std::string::value_type *)v594;
                    v49 = (v596 & 0x80u) == 0 ? v596 : v595;
                    std::string::append(&v562, v48, v49);
                    if ((char)v596 < 0)
                      operator delete((void *)v594);
                  }
                }
              }
              v50 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)v589;
              v51 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 160));
              if (!pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentAttribute(v50, v51))
                goto LABEL_131;
              sub_20C22C768((uint64_t)&v597, (_DWORD *)v24 + 40, 0);
              if (!v558)
                goto LABEL_131;
              v52 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
              v53 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v52);
              if (*(char *)(v53 + 23) >= 0)
                v54 = v53;
              else
                v54 = *(_QWORD *)v53;
              v55 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 160));
              v56 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v589);
              v57 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v56);
              v58 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v57);
              if (*(char *)(v58 + 23) >= 0)
                v61 = v58;
              else
                v61 = *(_QWORD *)v58;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Property renamed from @%s@<%s> may affect file format arguments in cache %s\n", v59, v60, v54, v55, v61);
              if ((v596 & 0x80u) == 0)
                v62 = (const std::string::value_type *)&v594;
              else
                v62 = (const std::string::value_type *)v594;
              if ((v596 & 0x80u) == 0)
                v63 = v596;
              else
                v63 = v595;
              goto LABEL_95;
            }
            if (IsPossibleDynamicFileFormatArgumentAttribute)
            {
              v30 = *((unsigned __int16 *)v24 + 96) | (*((unsigned __int8 *)v24 + 194) << 16);
              if ((v30 & 0x200000) == 0)
              {
                if ((v30 & 0x800000) != 0)
                {
                  if (v558)
                  {
                    v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                    v77 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v76);
                    v78 = *(char *)(v77 + 23) >= 0 ? v77 : *(_QWORD *)v77;
                    v79 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
                    v80 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v589);
                    v81 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v80);
                    v82 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v81);
                    v85 = *(char *)(v82 + 23) >= 0 ? v82 : *(_QWORD *)v82;
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Removed property @%s@<%s> may affect file format arguments in cache %s\n", v83, v84, v78, v79, v85);
                    v86 = (v596 & 0x80u) == 0
                        ? (const std::string::value_type *)&v594
                        : (const std::string::value_type *)v594;
                    v87 = (v596 & 0x80u) == 0 ? v596 : v595;
                    std::string::append(&v562, v86, v87);
                    if ((char)v596 < 0)
                      operator delete((void *)v594);
                  }
                  sub_20C22C768((uint64_t)&v597, v24, 0);
                }
                else
                {
                  v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  if (!v31)
                    v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  v32 = (_QWORD *)((char *)v24 + 8);
                  v33 = *((unsigned int *)v24 + 32);
                  if (*((_DWORD *)v24 + 33) >= 4u)
                    v32 = (_QWORD *)*((_QWORD *)v24 + 1);
                  if ((_DWORD)v33)
                  {
                    v34 = 40 * v33;
                    v35 = v32;
                    while ((*v35 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v31 + 11) & 0xFFFFFFFFFFFFFFF8))
                    {
                      v35 += 5;
                      v34 -= 40;
                      if (!v34)
                        goto LABEL_131;
                    }
                  }
                  else
                  {
                    v35 = v32;
                  }
                  if (v35 != &v32[5 * v33])
                  {
                    if (v558)
                    {
                      v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                      v89 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v88);
                      v90 = *(char *)(v89 + 23) >= 0 ? v89 : *(_QWORD *)v89;
                      v91 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
                      v92 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v589);
                      v93 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v92);
                      v94 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v93);
                      v97 = *(char *)(v94 + 23) >= 0 ? v94 : *(_QWORD *)v94;
                      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Default value change for property @%s@<%s> may affect file format arguments in cache %s\n", v95, v96, v90, v91, v97);
                      v98 = (v596 & 0x80u) == 0
                          ? (const std::string::value_type *)&v594
                          : (const std::string::value_type *)v594;
                      v99 = (v596 & 0x80u) == 0 ? v596 : v595;
                      std::string::append(&v562, v98, v99);
                      if ((char)v596 < 0)
                        operator delete((void *)v594);
                    }
                    sub_20C22C768((uint64_t)&v597, v24, (uint64_t)(v35 + 1));
                  }
                }
                goto LABEL_131;
              }
              v64 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
              v65 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v65)
                v65 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v64, v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v65 + 88), 0))
              {
                sub_20C22C768((uint64_t)&v597, v24, 0);
                if (v558)
                {
                  v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                  v67 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v66);
                  if (*(char *)(v67 + 23) >= 0)
                    v68 = v67;
                  else
                    v68 = *(_QWORD *)v67;
                  v69 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
                  v70 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v589);
                  v71 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v70);
                  v72 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v71);
                  if (*(char *)(v72 + 23) >= 0)
                    v75 = v72;
                  else
                    v75 = *(_QWORD *)v72;
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Added property @%s@<%s> may affect file format arguments in cache %s\n", v73, v74, v68, v69, v75);
                  if ((v596 & 0x80u) == 0)
                    v62 = (const std::string::value_type *)&v594;
                  else
                    v62 = (const std::string::value_type *)v594;
                  if ((v596 & 0x80u) == 0)
                    v63 = v596;
                  else
                    v63 = v595;
LABEL_95:
                  std::string::append(&v562, v62, v63);
                  if ((char)v596 < 0)
                    operator delete((void *)v594);
                }
              }
            }
          }
LABEL_131:
          v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 200);
        }
        while (v24 != v26);
      }
    }
    if (IsUsd && v565 == v566)
    {
      v100 = *(_DWORD *)(v555 + 220);
      v101 = v552;
      if (v100 >= 2)
        v101 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v552;
      v102 = *(_DWORD *)(v555 + 216);
      if (v102)
      {
        v103 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v101 + 200 * v102);
        v104 = 200 * v102;
        while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v101 + 1))
        {
          v101 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v101 + 200);
          v104 -= 200;
          if (!v104)
          {
            v101 = v103;
            break;
          }
        }
        v100 = *(_DWORD *)(v555 + 220);
      }
      v105 = v552;
      if (v100 >= 2)
        v105 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v552;
      if (v101 == (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v105 + 200 * *(unsigned int *)(v555 + 216)))
      {
        if (v558)
        {
          v534 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
          v535 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v534);
          v538 = *(char *)(v535 + 23) >= 0 ? v535 : *(_QWORD *)v535;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  skipping non-prim changes\n", v536, v537, v538);
          v539 = SHIBYTE(v599) >= 0 ? (const std::string::value_type *)&v597 : (const std::string::value_type *)v597;
          v540 = SHIBYTE(v599) >= 0 ? HIBYTE(v599) : (std::string::size_type)v598;
          std::string::append(&v562, v539, v540);
          if (SHIBYTE(v599) < 0)
            operator delete((void *)v597);
        }
        goto LABEL_848;
      }
    }
    AllLayerStacksUsingLayer = (_QWORD **)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)a2, v555);
    v559 = 0;
    v560 = 0;
    v561 = 0;
    sub_20C22D188(&v559, *AllLayerStacksUsingLayer, AllLayerStacksUsingLayer[1], ((char *)AllLayerStacksUsingLayer[1] - (char *)*AllLayerStacksUsingLayer) >> 4);
    if (v559 == v560)
    {
      if (v558)
      {
        v527 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
        v528 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v527);
        v531 = *(char *)(v528 + 23) >= 0 ? v528 : *(_QWORD *)v528;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  unused\n", v529, v530, v531);
        v532 = SHIBYTE(v599) >= 0 ? (const std::string::value_type *)&v597 : (const std::string::value_type *)v597;
        v533 = SHIBYTE(v599) >= 0 ? HIBYTE(v599) : (std::string::size_type)v598;
        std::string::append(&v562, v532, v533);
        if (SHIBYTE(v599) < 0)
          operator delete((void *)v597);
      }
      goto LABEL_847;
    }
    if (v558)
    {
      v107 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
      v108 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v107);
      v109 = *(char *)(v108 + 23);
      v110 = *(_QWORD *)v108;
      sub_20BFD0940((uint64_t)v552);
      if (v109 >= 0)
        v113 = v108;
      else
        v113 = v110;
      v114 = (uint64_t ***)&v594;
      if ((v596 & 0x80u) != 0)
        v114 = (uint64_t ***)v594;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Changes to layer %s:\n%s", v111, v112, v113, v114);
      if (SHIBYTE(v599) >= 0)
        v115 = (const std::string::value_type *)&v597;
      else
        v115 = (const std::string::value_type *)v597;
      if (SHIBYTE(v599) >= 0)
        v116 = HIBYTE(v599);
      else
        v116 = (std::string::size_type)v598;
      std::string::append(&v562, v115, v116);
      if (SHIBYTE(v599) < 0)
        operator delete((void *)v597);
      if ((char)v596 < 0)
        operator delete((void *)v594);
    }
    sub_20BFD7C28((uint64_t)&v586, v587);
    v587 = 0;
    v588 = 0;
    v586 = (uint64_t *)&v587;
    sub_20C22D114((uint64_t)&v583, v584);
    v584 = 0;
    v585 = 0;
    v583 = (uint64_t *)&v584;
    sub_20C22D114((uint64_t)&v580, v581);
    v581 = 0;
    v582 = 0;
    v580 = (uint64_t *)&v581;
    v117 = v577;
    for (j = v578; j != v117; sub_20BFD6F64((uint64_t)&v579, j))
      j -= 2;
    v578 = v117;
    v119 = v574;
    for (k = v575; k != v119; sub_20BFD6F64((uint64_t)&v576, k))
      k -= 2;
    v575 = v119;
    v121 = v571;
    for (m = v572; m != v121; sub_20BFD6F64((uint64_t)&v573, m))
      m -= 2;
    v572 = v121;
    sub_20BFD7C28((uint64_t)&v568, v569);
    v569 = 0;
    v570 = 0;
    v568 = (uint64_t *)&v569;
    v124 = v552;
    if (*(_DWORD *)(v555 + 220) >= 2u)
      v124 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v552;
    v125 = *(_DWORD *)(v555 + 216);
    if (v125)
    {
      v126 = 0;
      v127 = 0;
      v128 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v124 + 200 * v125);
      while (1)
      {
        if ((*((unsigned __int16 *)v124 + 96) | (*((unsigned __int8 *)v124 + 194) << 16)) >= 0x10000u)
          IsPropertyPath = (uint64_t)sub_20C0A7BE0(&v568, v124, v124);
        v131 = (_QWORD **)((char *)v124 + 8);
        if (*(_QWORD *)v124 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsPropertyPath))
        {
          IsPropertyPath = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(v124);
          if (!(_DWORD)IsPropertyPath)
          {
            if ((IsUsd & 1) == 0)
            {
              IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(v124);
              if ((_DWORD)IsPropertyPath)
              {
                if ((*((_WORD *)v124 + 96) & 0x40) != 0)
                {
                  v145 = v575;
                  if ((unint64_t)v575 >= v576)
                  {
                    v146 = (_DWORD *)sub_20BFD7890((uint64_t *)&v574, (_DWORD *)v124 + 40);
                  }
                  else
                  {
                    sub_20BFD6E54(v575, (_DWORD *)v124 + 40);
                    sub_20BFD6EA4(v145 + 1, (_DWORD *)v124 + 41);
                    v146 = v145 + 2;
                  }
                  v575 = v146;
                  v221 = v572;
                  if ((unint64_t)v572 >= v573)
                  {
                    IsPropertyPath = sub_20BFD7890((uint64_t *)&v571, v124);
                  }
                  else
                  {
                    sub_20BFD6E54(v572, v124);
                    sub_20BFD6EA4(v221 + 1, (_DWORD *)v124 + 1);
                    IsPropertyPath = (uint64_t)(v221 + 2);
                  }
                  v572 = (_DWORD *)IsPropertyPath;
                  if (v558)
                  {
                    v222 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                    v223 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v222);
                    v224 = *(char *)(v223 + 23) >= 0 ? v223 : *(_QWORD *)v223;
                    v225 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v124 + 160));
                    v226 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v124);
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Renamed @%s@<%s> to <%s>\n", v227, v228, v224, v225, v226);
                    v229 = SHIBYTE(v599) >= 0
                         ? (const std::string::value_type *)&v597
                         : (const std::string::value_type *)v597;
                    v230 = SHIBYTE(v599) >= 0 ? HIBYTE(v599) : (std::string::size_type)v598;
                    IsPropertyPath = (uint64_t)std::string::append(&v562, v229, v230);
                    if (SHIBYTE(v599) < 0)
                      operator delete((void *)v597);
                  }
                }
                v231 = (*((unsigned __int8 *)v124 + 194) >> 5) & 2 | (*((unsigned __int8 *)v124 + 194) >> 4) & 1 | (*((unsigned __int8 *)v124 + 194) >> 3) & 4 | (*((unsigned __int8 *)v124 + 194) >> 4) & 8 | (*((unsigned __int16 *)v124 + 96) >> 9) & 0x10 | (*((unsigned __int16 *)v124 + 96) >> 7) & 0x20;
                if (v231)
                {
                  v597 = (unint64_t)v124;
                  IsPropertyPath = (uint64_t)sub_20C22D374(&v580, (unint64_t *)v124, (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
                  *(_DWORD *)(IsPropertyPath + 36) |= v231;
                }
                v232 = *((unsigned int *)v124 + 32);
                if (*((_DWORD *)v124 + 33) >= 4u)
                  v233 = (_QWORD *)*((_QWORD *)v124 + 1);
                else
                  v233 = (_QWORD *)((char *)v124 + 8);
                if ((_DWORD)v232)
                {
                  v234 = 40 * v232;
                  while (1)
                  {
                    IsPropertyPath = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    if (!IsPropertyPath)
                      IsPropertyPath = (uint64_t)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    if ((*v233 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(IsPropertyPath + 248) & 0xFFFFFFFFFFFFFFF8))
                      break;
                    v233 += 5;
                    v234 -= 40;
                    if (!v234)
                      goto LABEL_289;
                  }
                  IsPropertyPath = (uint64_t)sub_20C0A7BE0(&v586, v124, v124);
                }
              }
              else
              {
                IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(v124);
                if ((_DWORD)IsPropertyPath)
                {
                  v203 = *((_WORD *)v124 + 96);
                  if ((v203 & 0x4000) != 0)
                  {
                    v597 = (unint64_t)v124;
                    IsPropertyPath = (uint64_t)sub_20C22D374(&v580, (unint64_t *)v124, (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
                    *(_DWORD *)(IsPropertyPath + 36) |= 1u;
                    v203 = *((_WORD *)v124 + 96);
                  }
                  if (v203 < 0)
                  {
                    v597 = (unint64_t)v124;
                    IsPropertyPath = (uint64_t)sub_20C22D374(&v580, (unint64_t *)v124, (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
                    *(_DWORD *)(IsPropertyPath + 36) |= 2u;
                  }
                }
              }
            }
            goto LABEL_289;
          }
          if ((*((_WORD *)v124 + 96) & 0x40) != 0)
          {
            v143 = v575;
            if ((unint64_t)v575 >= v576)
            {
              v144 = (_DWORD *)sub_20BFD7890((uint64_t *)&v574, (_DWORD *)v124 + 40);
            }
            else
            {
              sub_20BFD6E54(v575, (_DWORD *)v124 + 40);
              sub_20BFD6EA4(v143 + 1, (_DWORD *)v124 + 41);
              v144 = v143 + 2;
            }
            v575 = v144;
            v182 = v572;
            if ((unint64_t)v572 >= v573)
            {
              v183 = (_DWORD *)sub_20BFD7890((uint64_t *)&v571, v124);
            }
            else
            {
              sub_20BFD6E54(v572, v124);
              sub_20BFD6EA4(v182 + 1, (_DWORD *)v124 + 1);
              v183 = v182 + 2;
            }
            v572 = v183;
            if (v558)
            {
              v184 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
              v185 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v184);
              v186 = *(char *)(v185 + 23) >= 0 ? v185 : *(_QWORD *)v185;
              v187 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v124 + 160));
              v188 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v124);
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Renamed @%s@<%s> to <%s>\n", v189, v190, v186, v187, v188);
              v191 = SHIBYTE(v599) >= 0 ? (const std::string::value_type *)&v597 : (const std::string::value_type *)v597;
              v192 = SHIBYTE(v599) >= 0 ? HIBYTE(v599) : (std::string::size_type)v598;
              std::string::append(&v562, v191, v192);
              if (SHIBYTE(v599) < 0)
                operator delete((void *)v597);
            }
          }
          v193 = (*((unsigned __int8 *)v124 + 194) >> 1) & 2 | *((_BYTE *)v124 + 194) & 1 | (4
                                                                                           * ((*((unsigned __int8 *)v124
                                                                                               + 194) >> 1) & 1)) | *((_BYTE *)v124 + 194) & 8;
          if (v193)
          {
            v597 = (unint64_t)v124;
            v194 = sub_20C22D374(&v580, (unint64_t *)v124, (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
            *((_DWORD *)v194 + 9) |= v193;
          }
          if ((*((_WORD *)v124 + 96) & 0x780) != 0)
          {
LABEL_284:
            sub_20C0A7BE0(&v586, v124, v124);
          }
          else
          {
            v196 = *((unsigned int *)v124 + 32);
            if (*((_DWORD *)v124 + 33) >= 4u)
              v197 = (_QWORD *)*((_QWORD *)v124 + 1);
            else
              v197 = (_QWORD *)((char *)v124 + 8);
            if ((_DWORD)v196)
            {
              v198 = 40 * v196;
              do
              {
                v199 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v199)
                  v199 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*v197 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v199 + 30) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_284;
                v200 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v200)
                  v200 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*v197 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v200 + 31) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_284;
                v201 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v201)
                  v201 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*v197 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v201 + 57) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_284;
                v202 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v202)
                  v202 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*v197 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v202 + 25) & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_284;
                v197 += 5;
                v198 -= 40;
              }
              while (v198);
            }
            if (pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentFieldDependencies(v556))
            {
              v209 = *((unsigned int *)v124 + 32);
              v210 = *((_DWORD *)v124 + 33) >= 4u
                   ? (const pxrInternal__aapl__pxrReserved__::TfToken *)*((_QWORD *)v124 + 1)
                   : (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v124 + 8);
              if ((_DWORD)v209)
              {
                v211 = 40 * v209;
                while (!pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentField(v556, v210))
                {
                  v210 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v210 + 40);
                  v211 -= 40;
                  if (!v211)
                    goto LABEL_285;
                }
                if (v558)
                {
                  v250 = *(_QWORD *)v210 & 0xFFFFFFFFFFFFFFF8;
                  if (v250)
                  {
                    v251 = (const char *)(v250 + 16);
                    if (*(char *)(v250 + 39) < 0)
                      v251 = *(const char **)v251;
                  }
                  else
                  {
                    v251 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Info change for field '%s' may affect dynamic file format arguments\n", v212, v213, v251);
                  if (SHIBYTE(v599) >= 0)
                    v252 = (const std::string::value_type *)&v597;
                  else
                    v252 = (const std::string::value_type *)v597;
                  if (SHIBYTE(v599) >= 0)
                    v253 = HIBYTE(v599);
                  else
                    v253 = (std::string::size_type)v598;
                  std::string::append(&v562, v252, v253);
                  if (SHIBYTE(v599) < 0)
                    operator delete((void *)v597);
                  v254 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                  v255 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v254);
                  if (*(char *)(v255 + 23) >= 0)
                    v256 = v255;
                  else
                    v256 = *(_QWORD *)v255;
                  v257 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v124);
                  v258 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpCache *)v556);
                  v259 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v258);
                  v260 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v259);
                  if (*(char *)(v260 + 23) >= 0)
                    v263 = v260;
                  else
                    v263 = *(_QWORD *)v260;
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Info change on @%s@<%s> may affect file format arguments in cache '%s'\n", v261, v262, v256, v257, v263);
                  if (SHIBYTE(v599) >= 0)
                    v264 = (const std::string::value_type *)&v597;
                  else
                    v264 = (const std::string::value_type *)v597;
                  if (SHIBYTE(v599) >= 0)
                    v265 = HIBYTE(v599);
                  else
                    v265 = (std::string::size_type)v598;
                  std::string::append(&v562, v264, v265);
                  if (SHIBYTE(v599) < 0)
                    operator delete((void *)v597);
                }
                v266 = v578;
                if ((unint64_t)v578 >= v579)
                {
                  v267 = (_DWORD *)sub_20BFD7890((uint64_t *)&v577, v124);
                }
                else
                {
                  sub_20BFD6E54(v578, v124);
                  sub_20BFD6EA4(v266 + 1, (_DWORD *)v124 + 1);
                  v267 = v266 + 2;
                }
                v578 = v267;
              }
            }
          }
LABEL_285:
          v195 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v195)
            v195 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          IsPropertyPath = sub_20C228060((uint64_t *)v124 + 1, (_QWORD *)v195 + 36);
          if ((_DWORD)IsPropertyPath)
            v126 |= 4u;
          goto LABEL_289;
        }
        if ((*((_WORD *)v124 + 96) & 4) != 0)
          sub_20C0A7BE0(&v586, v124, v124);
        v132 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v132)
          v132 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v133 = *((_DWORD *)v124 + 33);
        v134 = (_QWORD *)((char *)v124 + 8);
        if (v133 >= 4)
          v134 = *v131;
        v135 = *((unsigned int *)v124 + 32);
        if ((_DWORD)v135)
        {
          v136 = &v134[5 * v135];
          v137 = 40 * v135;
          while ((*v134 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v132 + 12) & 0xFFFFFFFFFFFFFFF8))
          {
            v134 += 5;
            v137 -= 40;
            if (!v137)
            {
              v134 = v136;
              break;
            }
          }
        }
        v138 = (_QWORD *)((char *)v124 + 8);
        if (v133 >= 4)
          v138 = *v131;
        if (v134 != &v138[5 * v135])
        {
          v594 = 0;
          v139 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C227544((pxrInternal__aapl__pxrReserved__::VtValue *)(v134 + 1), (unsigned int **)&v594, (unsigned int **)&v597);
          if ((v594 & 7) != 0)
          {
            v140 = (unsigned int *)(v594 & 0xFFFFFFFFFFFFFFF8);
            do
              v141 = __ldxr(v140);
            while (__stlxr(v141 - 2, v140));
          }
          if ((v597 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (uint64_t *)((v597 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v139);
          IsValidIdentifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString);
          if ((_DWORD)IsValidIdentifier)
          {
            v148 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v148, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v597, &v594);
          }
          else
          {
            v149 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
            sub_20BFD6E54(&v594, v149);
            sub_20BFD6EA4((_DWORD *)&v594 + 1, v149 + 1);
          }
          sub_20C0A7BE0(&v586, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v594, &v594);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v594 + 1);
          sub_20BFD265C(&v594);
          v591 = 0;
          v150 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C227544((pxrInternal__aapl__pxrReserved__::VtValue *)(v134 + 3), (unsigned int **)&v591, (unsigned int **)&v594);
          if ((v597 & 7) != 0)
          {
            v151 = (unsigned int *)(v597 & 0xFFFFFFFFFFFFFFF8);
            do
              v152 = __ldxr(v151);
            while (__stlxr(v152 - 2, v151));
          }
          v153 = v594;
          v597 = v594;
          v594 = 0;
          if ((v591 & 7) != 0)
          {
            v154 = (unsigned int *)(v591 & 0xFFFFFFFFFFFFFFF8);
            do
              v155 = __ldxr(v154);
            while (__stlxr(v155 - 2, v154));
            v153 = v597;
          }
          v156 = v153 & 0xFFFFFFFFFFFFFFF8;
          if (v156)
            v157 = (uint64_t *)(v156 + 16);
          else
            v157 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v150);
          v158 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)v157);
          if ((_DWORD)v158)
          {
            v159 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v158);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v159, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v597, &v594);
          }
          else
          {
            v160 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v158);
            sub_20BFD6E54(&v594, v160);
            sub_20BFD6EA4((_DWORD *)&v594 + 1, v160 + 1);
          }
          sub_20C0A7BE0(&v586, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v594, &v594);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v594 + 1);
          sub_20BFD265C(&v594);
          if ((v597 & 7) != 0)
          {
            v161 = (unsigned int *)(v597 & 0xFFFFFFFFFFFFFFF8);
            do
              v162 = __ldxr(v161);
            while (__stlxr(v162 - 2, v161));
          }
        }
        if ((*((_WORD *)v124 + 96) & 5) != 0)
          goto LABEL_225;
        v172 = *((unsigned int *)v124 + 32);
        v173 = *((_DWORD *)v124 + 33) >= 4u
             ? (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)v124 + 1)
             : (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v124 + 8);
        if ((_DWORD)v172)
          break;
LABEL_257:
        v178 = (uint64_t *)*((_QWORD *)v124 + 18);
        v597 = *((_QWORD *)v124 + 17);
        v598 = v178;
        if ((uint64_t *)v597 != v178)
        {
          do
          {
            if (!*(_DWORD *)(*sub_20C0AB5C8(&v597, v129, v130) + 24)
              || *(_DWORD *)(*sub_20C0AB5C8(&v597, v179, v180) + 24) == 1)
            {
              v126 |= 1u;
              v215 = *((_QWORD *)v124 + 17);
              v214 = *((_QWORD *)v124 + 18);
              while (v215 != v214)
              {
                v216 = *(_DWORD *)(v215 + 24);
                if (v216 <= 1)
                {
                  v597 = 0;
                  v598 = 0;
                  v599 = 0;
                  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidAddOrRemoveSublayer(a1, (pxrInternal__aapl__pxrReserved__::PcpCache *)v556, (uint64_t *)&v559, (uint64_t *)v555, (uint64_t *)v215, v216 != 0, v550, (uint64_t)&v597);
                  if (v560 != v559)
                  {
                    v217 = 0;
                    v218 = 0;
                    v219 = ((char *)v560 - (char *)v559) >> 4;
                    do
                    {
                      if (((*(_QWORD *)(v597 + ((v218 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v218) & 1) != 0)
                      {
                        v594 = (unint64_t)&v559[v217];
                        v220 = sub_20C22D2D4(&v563, (uint64_t)&v559[v217], (uint64_t)&unk_20CAC184C, (uint64_t **)&v594);
                        *((_DWORD *)v220 + 12) |= 8u;
                      }
                      ++v218;
                      v217 += 2;
                    }
                    while (v219 != v218);
                  }
                  if (v597)
                    operator delete((void *)v597);
                }
                v215 += 32;
              }
              goto LABEL_237;
            }
            sub_20C0AB640(&v597);
          }
          while ((uint64_t *)v597 != v598);
          for (n = *((_QWORD *)v124 + 17); n != *((_QWORD *)v124 + 18); n += 32)
          {
            if (*(_DWORD *)(n + 24) == 2)
              goto LABEL_385;
          }
        }
        v204 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v204)
          v204 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v205 = (char *)*((_QWORD *)v124 + 1);
        v206 = *((unsigned int *)v124 + 32);
        if (*((_DWORD *)v124 + 33) < 4u)
          v205 = (char *)v124 + 8;
        if ((_DWORD)v206)
        {
          v207 = 40 * v206;
          v208 = v205;
          while ((*(_QWORD *)v208 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v204 + 55) & 0xFFFFFFFFFFFFFFF8))
          {
            v208 += 40;
            v207 -= 40;
            if (!v207)
              goto LABEL_237;
          }
        }
        else
        {
          v208 = v205;
        }
        if (v208 == &v205[40 * v206])
          goto LABEL_237;
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v208 + 8), (std::type_info *)(v208 + 24), v130) & 1) != 0)
        {
          v127 = 1;
        }
        else
        {
          if (!*((_QWORD *)v208 + 2))
          {
            v235 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
            Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v235);
            v237 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v237)
              v237 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v237 + 440));
            if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(Fallback, (std::type_info *)(v208 + 24), v239) & 1) != 0)goto LABEL_237;
          }
          if (!*((_QWORD *)v208 + 4))
          {
            v240 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
            v241 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v240);
            v242 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v242)
              v242 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v243 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v241, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v242 + 440));
            if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v243, (std::type_info *)(v208 + 8), v244) & 1) != 0)goto LABEL_237;
          }
LABEL_385:
          sub_20C0A7BE0(&v586, v124, v124);
          v126 |= 2u;
          if (v558)
          {
            v245 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
            v246 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v245);
            if (*(char *)(v246 + 23) >= 0)
              v249 = v246;
            else
              v249 = *(_QWORD *)v246;
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  layer offsets (significant)\n", v247, v248, v249);
            if (SHIBYTE(v599) >= 0)
              v168 = (const std::string::value_type *)&v597;
            else
              v168 = (const std::string::value_type *)v597;
            if (SHIBYTE(v599) >= 0)
              v169 = HIBYTE(v599);
            else
              v169 = (std::string::size_type)v598;
LABEL_235:
            std::string::append(&v562, v168, v169);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
          }
        }
LABEL_237:
        v170 = *((unsigned __int16 *)v124 + 96);
        v171 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v171)
          v171 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        IsPropertyPath = sub_20C228060((uint64_t *)v124 + 1, (_QWORD *)v171 + 19);
        if ((_DWORD)IsPropertyPath)
          v126 |= (8 * v170) & 0x10 | 0x20;
        else
          v126 |= (8 * v170) & 0x10;
LABEL_289:
        v124 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v124 + 200);
        if (v124 == v128)
        {
          a2 = (pxrInternal__aapl__pxrReserved__::PcpCache *)v556;
          if (v127)
          {
            pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpCache *)v556, (uint64_t *)&v594);
            v268 = sub_20C20BDB4(&v594);
            if (v269 & 1 | (unint64_t)v268
              && pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeLayerStackTimeCodesPerSecond((uint64_t *)&v594, v555))
            {
              if (v558)
              {
                v270 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
                v271 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v270);
                v274 = *(char *)(v271 + 23) >= 0 ? v271 : *(_QWORD *)v271;
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  root layer stack TCPS (significant)\n", v272, v273, v274);
                v275 = SHIBYTE(v599) >= 0
                     ? (const std::string::value_type *)&v597
                     : (const std::string::value_type *)v597;
                v276 = SHIBYTE(v599) >= 0 ? HIBYTE(v599) : (std::string::size_type)v598;
                std::string::append(&v562, v275, v276);
                if (SHIBYTE(v599) < 0)
                  operator delete((void *)v597);
              }
              v597 = (unint64_t)&v594;
              v277 = sub_20C22D2D4(&v563, (uint64_t)&v594, (uint64_t)&unk_20CAC184C, (uint64_t **)&v597);
              *((_DWORD *)v277 + 12) |= 2u;
              v278 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v277);
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, (const pxrInternal__aapl__pxrReserved__::PcpCache *)v556, v278);
            }
            v279 = v595;
            if (v595)
            {
              v280 = (unsigned int *)(v595 + 8);
              do
              {
                v281 = __ldxr(v280);
                v282 = v281 - 1;
              }
              while (__stlxr(v282, v280));
              if (!v282)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v279 + 8))(v279);
            }
          }
          if (v126)
          {
            v284 = v559;
            v283 = v560;
            while (v284 != v283)
            {
              v597 = (unint64_t)v284;
              v285 = sub_20C22D2D4(&v563, (uint64_t)v284, (uint64_t)&unk_20CAC184C, (uint64_t **)&v597);
              *((_DWORD *)v285 + 12) |= v126;
              v284 += 2;
            }
          }
          goto LABEL_451;
        }
      }
      v174 = 40 * v172;
      while (1)
      {
        v175 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v175)
          v175 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v173 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v175 + 29) & 0xFFFFFFFFFFFFFFF8))
          break;
        v176 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v176)
          v176 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v173 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v176 + 37) & 0xFFFFFFFFFFFFFFF8))
          break;
        v177 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v177)
          v177 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*(_QWORD *)v173 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v177 + 23) & 0xFFFFFFFFFFFFFFF8))
          break;
        v173 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v173 + 40);
        v174 -= 40;
        if (!v174)
          goto LABEL_257;
      }
LABEL_225:
      sub_20C0A7BE0(&v586, v124, v124);
      v126 |= 9u;
      if (v558)
      {
        v163 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
        v164 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v163);
        if (*(char *)(v164 + 23) >= 0)
          v167 = v164;
        else
          v167 = *(_QWORD *)v164;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  significant\n", v165, v166, v167);
        if (SHIBYTE(v599) >= 0)
          v168 = (const std::string::value_type *)&v597;
        else
          v168 = (const std::string::value_type *)v597;
        if (SHIBYTE(v599) >= 0)
          v169 = HIBYTE(v599);
        else
          v169 = (std::string::size_type)v598;
        goto LABEL_235;
      }
      goto LABEL_237;
    }
LABEL_451:
    v286 = v580;
    ii = v558;
    if (v580 != (uint64_t *)&v581)
    {
      while (1)
      {
        v288 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v286 + 28));
        v289 = *((_DWORD *)v286 + 9);
        if (!v288)
          break;
        if ((v289 & 0xC) != 0)
        {
          sub_20C0A7BE0(&v586, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v286 + 28), (_DWORD *)v286 + 7);
        }
        else if ((v289 & 3) != 0)
        {
          v597 = (unint64_t)v286 + 28;
          v290 = sub_20C22D374(&v583, (unint64_t *)((char *)v286 + 28), (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
          v291 = 1;
LABEL_465:
          *((_DWORD *)v290 + 9) |= v291;
        }
LABEL_466:
        v295 = (uint64_t *)v286[1];
        if (v295)
        {
          do
          {
            v296 = v295;
            v295 = (uint64_t *)*v295;
          }
          while (v295);
        }
        else
        {
          do
          {
            v296 = (uint64_t *)v286[2];
            v472 = *v296 == (_QWORD)v286;
            v286 = v296;
          }
          while (!v472);
        }
        v286 = v296;
        if (v296 == (uint64_t *)&v581)
          goto LABEL_472;
      }
      if ((v289 & 0xC) != 0)
      {
        sub_20C0A7BE0(&v586, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v286 + 28), (_DWORD *)v286 + 7);
      }
      else if ((v289 & 3) != 0)
      {
        v597 = (unint64_t)v286 + 28;
        v292 = sub_20C22D374(&v583, (unint64_t *)((char *)v286 + 28), (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
        *((_DWORD *)v292 + 9) |= 1u;
      }
      v293 = *((_DWORD *)v286 + 9);
      if ((v293 & 0x10) != 0)
      {
        v597 = (unint64_t)v286 + 28;
        v294 = sub_20C22D374(&v583, (unint64_t *)((char *)v286 + 28), (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
        *((_DWORD *)v294 + 9) |= 2u;
        v293 = *((_DWORD *)v286 + 9);
      }
      if ((v293 & 0x20) == 0)
        goto LABEL_466;
      v597 = (unint64_t)v286 + 28;
      v290 = sub_20C22D374(&v583, (unint64_t *)((char *)v286 + 28), (uint64_t)&unk_20CAC184C, (_DWORD **)&v597);
      v291 = 4;
      goto LABEL_465;
    }
LABEL_472:
    v297 = v586;
    if (v586 != (uint64_t *)&v587)
    {
      do
      {
        v298 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C222ED4((uint64_t)&v568, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v297 + 28));
        if (*(uint64_t *)((char *)v297 + 28) == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v298))
          v299 = 1;
        else
          v299 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v297 + 28));
        pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (_QWORD *)v555, (int *)v297 + 7, 63, v299, 0, v298 == 0, (uint64_t *)&v597);
        if (v558)
        {
          v302 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
          v303 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v302);
          v304 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v303);
          if (*(char *)(v304 + 23) >= 0)
            v305 = v304;
          else
            v305 = *(_QWORD *)v304;
          if (v299)
            v306 = "recurse on prim descendants";
          else
            v306 = "do not recurse on prim descendants";
          v307 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
          v308 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v307);
          v309 = *(char *)(v308 + 23);
          v310 = *(_QWORD *)v308;
          v311 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v297 + 28));
          if (v309 >= 0)
            v314 = v308;
          else
            v314 = v310;
          v315 = " (not restricted to existing caches)";
          if (!v298)
            v315 = " (restricted to existing caches)";
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v312, v313, v305, v306, v314, v311, v315);
          if ((v596 & 0x80u) == 0)
            v316 = (const std::string::value_type *)&v594;
          else
            v316 = (const std::string::value_type *)v594;
          if ((v596 & 0x80u) == 0)
            v317 = v596;
          else
            v317 = v595;
          std::string::append(&v562, v316, v317);
          if ((char)v596 < 0)
            operator delete((void *)v594);
        }
        v319 = (uint64_t *)v597;
        v318 = v598;
        for (ii = v558; v319 != v318; v319 += 9)
        {
          if (v558)
          {
            v320 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v319);
            v321 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v319 + 1));
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v322, v323, v320, v321);
            v324 = (v596 & 0x80u) == 0 ? (const std::string::value_type *)&v594 : (const std::string::value_type *)v594;
            v325 = (v596 & 0x80u) == 0 ? v596 : v595;
            std::string::append(&v562, v324, v325);
            if ((char)v596 < 0)
              operator delete((void *)v594);
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v319);
        }
        if (v558)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v300, v301);
          v326 = (v596 & 0x80u) == 0 ? (const std::string::value_type *)&v594 : (const std::string::value_type *)v594;
          v327 = (v596 & 0x80u) == 0 ? v596 : v595;
          std::string::append(&v562, v326, v327);
          if ((char)v596 < 0)
            operator delete((void *)v594);
        }
        v594 = (unint64_t)&v597;
        sub_20C2219C0((void ***)&v594);
        v328 = (uint64_t *)v297[1];
        if (v328)
        {
          do
          {
            v329 = v328;
            v328 = (uint64_t *)*v328;
          }
          while (v328);
        }
        else
        {
          do
          {
            v329 = (uint64_t *)v297[2];
            v472 = *v329 == (_QWORD)v297;
            v297 = v329;
          }
          while (!v472);
        }
        v297 = v329;
      }
      while (v329 != (uint64_t *)&v587);
    }
    v331 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v577;
    v330 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v578;
    v551 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v578;
    while (v331 != v330)
    {
      v332 = sub_20C222ED4((uint64_t)&v568, v331);
      v553 = v331;
      Entry = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfChangeList::GetEntry(v552, v331);
      if (*(_QWORD *)v331 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Entry))
        v334 = 1;
      else
        v334 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(v331);
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (_QWORD *)v555, (int *)v331, 63, v334, 0, v332 == 0, (uint64_t *)&v589);
      if (ii)
      {
        v337 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        v338 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v337);
        v339 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v338);
        if (*(char *)(v339 + 23) >= 0)
          v340 = v339;
        else
          v340 = *(_QWORD *)v339;
        if (v334)
          v341 = "recurse on prim descendants";
        else
          v341 = "do not recurse on prim descendants";
        v342 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
        v343 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v342);
        v344 = *(char *)(v343 + 23);
        v345 = *(_QWORD *)v343;
        v346 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v553);
        if (v344 >= 0)
          v349 = v343;
        else
          v349 = v345;
        v350 = " (not restricted to existing caches)";
        if (!v332)
          v350 = " (restricted to existing caches)";
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v347, v348, v340, v341, v349, v346, v350);
        if (SHIBYTE(v599) >= 0)
          v351 = (const std::string::value_type *)&v597;
        else
          v351 = (const std::string::value_type *)v597;
        if (SHIBYTE(v599) >= 0)
          v352 = HIBYTE(v599);
        else
          v352 = (std::string::size_type)v598;
        std::string::append(&v562, v351, v352);
        ii = v558;
        if (SHIBYTE(v599) < 0)
          operator delete((void *)v597);
      }
      v353 = (uint64_t *)v589;
      v554 = (uint64_t *)v590;
      if (v589 != v590)
      {
        do
        {
          if (ii)
          {
            v354 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v353);
            v355 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v353 + 1));
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v356, v357, v354, v355);
            if (SHIBYTE(v599) >= 0)
              v358 = (const std::string::value_type *)&v597;
            else
              v358 = (const std::string::value_type *)v597;
            if (SHIBYTE(v599) >= 0)
              v359 = HIBYTE(v599);
            else
              v359 = (std::string::size_type)v598;
            std::string::append(&v562, v358, v359);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
            v360 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
            v361 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v360);
            v362 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v361);
            v363 = *(char *)(v362 + 23);
            v364 = *(_QWORD *)v362;
            v365 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v353);
            if (v363 >= 0)
              v368 = v362;
            else
              v368 = v364;
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Pcp_DoesInfoChangeAffectFileFormatArguments %s:%s?\n", v366, v367, v368, v365);
            if (SHIBYTE(v599) >= 0)
              v369 = (const std::string::value_type *)&v597;
            else
              v369 = (const std::string::value_type *)v597;
            if (SHIBYTE(v599) >= 0)
              v370 = HIBYTE(v599);
            else
              v370 = (std::string::size_type)v598;
            std::string::append(&v562, v369, v370);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
            DynamicFileFormatArgumentDependencyData = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)v556, (unsigned int *)v353);
            if (*(_QWORD *)DynamicFileFormatArgumentDependencyData)
            {
LABEL_578:
              v374 = Entry[30];
              if (Entry[31] >= 4)
                v375 = *(unsigned int **)Entry;
              else
                v375 = Entry;
              if ((_DWORD)v374)
              {
                v376 = 40 * v374;
                while (1)
                {
                  v377 = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanFieldChangeAffectFileFormatArguments(DynamicFileFormatArgumentDependencyData, (const pxrInternal__aapl__pxrReserved__::TfToken *)v375, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v375 + 2), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v375 + 6));
                  if (ii)
                  {
                    v378 = *(_QWORD *)v375 & 0xFFFFFFFFFFFFFFF8;
                    if (v378)
                    {
                      v379 = (const char *)(v378 + 16);
                      if (*(char *)(v378 + 39) < 0)
                        v379 = *(const char **)v379;
                    }
                    else
                    {
                      v379 = "";
                    }
                    sub_20BF834B0((uint64_t)(v375 + 2));
                    if ((v596 & 0x80u) == 0)
                      v380 = (uint64_t ***)&v594;
                    else
                      v380 = (uint64_t ***)v594;
                    sub_20BF834B0((uint64_t)(v375 + 6));
                    v381 = (char)v593;
                    v382 = v591;
                    v383 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v353);
                    v386 = &v591;
                    if (v381 < 0)
                      v386 = (unint64_t *)v382;
                    v387 = "is NOT";
                    if (v377)
                      v387 = "IS";
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Field '%s' change: %s -> %s %s relevant for prim index path '%s'\n", v384, v385, v379, v380, v386, v387, v383);
                    if (SHIBYTE(v599) >= 0)
                      v388 = (const std::string::value_type *)&v597;
                    else
                      v388 = (const std::string::value_type *)v597;
                    if (SHIBYTE(v599) >= 0)
                      v389 = HIBYTE(v599);
                    else
                      v389 = (std::string::size_type)v598;
                    std::string::append(&v562, v388, v389);
                    if (SHIBYTE(v599) < 0)
                      operator delete((void *)v597);
                    ii = v558;
                    if ((char)v593 < 0)
                      operator delete((void *)v591);
                    if ((char)v596 < 0)
                      operator delete((void *)v594);
                  }
                  if (v377)
                    break;
                  v375 += 10;
                  v376 -= 40;
                  if (!v376)
                    goto LABEL_611;
                }
                pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, (const pxrInternal__aapl__pxrReserved__::PcpCache *)v556, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v353);
              }
              goto LABEL_611;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Prim index has no dynamic file format dependencies\n", v335, v336);
            if (SHIBYTE(v599) >= 0)
              v372 = (const std::string::value_type *)&v597;
            else
              v372 = (const std::string::value_type *)v597;
            if (SHIBYTE(v599) >= 0)
              v373 = HIBYTE(v599);
            else
              v373 = (std::string::size_type)v598;
            std::string::append(&v562, v372, v373);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
          }
          else
          {
            DynamicFileFormatArgumentDependencyData = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)a2, (unsigned int *)v353);
            if (*(_QWORD *)DynamicFileFormatArgumentDependencyData)
              goto LABEL_578;
          }
LABEL_611:
          v353 += 9;
          a2 = (pxrInternal__aapl__pxrReserved__::PcpCache *)v556;
        }
        while (v353 != v554);
      }
      if (ii)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v335, v336);
        if (SHIBYTE(v599) >= 0)
          v390 = (const std::string::value_type *)&v597;
        else
          v390 = (const std::string::value_type *)v597;
        if (SHIBYTE(v599) >= 0)
          v391 = HIBYTE(v599);
        else
          v391 = (std::string::size_type)v598;
        std::string::append(&v562, v390, v391);
        if (SHIBYTE(v599) < 0)
          operator delete((void *)v597);
      }
      v597 = (unint64_t)&v589;
      sub_20C2219C0((void ***)&v597);
      v331 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v553 + 8);
      v330 = v551;
    }
    v392 = v565;
    v393 = v566;
LABEL_623:
    if (v392 != v393)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v392, &v597);
      v394 = sub_20C222ED4((uint64_t)&v568, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v597);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v597 + 1);
      sub_20BFD265C(&v597);
      PrimPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v392, &v600);
      v396 = (pxrInternal__aapl__pxrReserved__::PcpCache **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimPath);
      if (v600 == *v396)
        v397 = 1;
      else
        v397 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v600);
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (_QWORD *)v555, (int *)&v600, 63, v397, 0, v394 == 0, (uint64_t *)&v589);
      if (v558)
      {
        v400 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        v401 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v400);
        v402 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v401);
        if (*(char *)(v402 + 23) >= 0)
          v403 = v402;
        else
          v403 = *(_QWORD *)v402;
        if (v397)
          v404 = "recurse on prim descendants";
        else
          v404 = "do not recurse on prim descendants";
        v405 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
        v406 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v405);
        v407 = *(char *)(v406 + 23);
        v408 = *(_QWORD *)v406;
        v409 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v600);
        if (v407 >= 0)
          v412 = v406;
        else
          v412 = v408;
        v413 = " (not restricted to existing caches)";
        if (!v394)
          v413 = " (restricted to existing caches)";
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v410, v411, v403, v404, v412, v409, v413);
        if (SHIBYTE(v599) >= 0)
          v414 = (const std::string::value_type *)&v597;
        else
          v414 = (const std::string::value_type *)v597;
        if (SHIBYTE(v599) >= 0)
          v415 = HIBYTE(v599);
        else
          v415 = (std::string::size_type)v598;
        std::string::append(&v562, v414, v415);
        if (SHIBYTE(v599) < 0)
          operator delete((void *)v597);
      }
      v417 = (uint64_t *)v589;
      v416 = (uint64_t *)v590;
      while (1)
      {
        if (v417 == v416)
        {
          if (v558)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v398, v399);
            v459 = SHIBYTE(v599) >= 0 ? (const std::string::value_type *)&v597 : (const std::string::value_type *)v597;
            v460 = SHIBYTE(v599) >= 0 ? HIBYTE(v599) : (std::string::size_type)v598;
            std::string::append(&v562, v459, v460);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
          }
          v597 = (unint64_t)&v589;
          sub_20C2219C0((void ***)&v597);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v600 + 1);
          sub_20BFD265C(&v600);
          v392 += 2;
          goto LABEL_623;
        }
        if (v558)
        {
          v418 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v417);
          v419 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v417 + 1));
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v420, v421, v418, v419);
          if (SHIBYTE(v599) >= 0)
            v422 = (const std::string::value_type *)&v597;
          else
            v422 = (const std::string::value_type *)v597;
          if (SHIBYTE(v599) >= 0)
            v423 = HIBYTE(v599);
          else
            v423 = (std::string::size_type)v598;
          std::string::append(&v562, v422, v423);
          if (SHIBYTE(v599) < 0)
            operator delete((void *)v597);
          v424 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
          v425 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v424);
          v426 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v425);
          v427 = *(char *)(v426 + 23);
          v428 = *(_QWORD *)v426;
          v429 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v417);
          if (v427 >= 0)
            v432 = v426;
          else
            v432 = v428;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Pcp_DoesAttributeChangeAffectFileFormatArguments %s:%s?\n", v430, v431, v432, v429);
          if (SHIBYTE(v599) >= 0)
            v433 = (const std::string::value_type *)&v597;
          else
            v433 = (const std::string::value_type *)v597;
          if (SHIBYTE(v599) >= 0)
            v434 = HIBYTE(v599);
          else
            v434 = (std::string::size_type)v598;
          std::string::append(&v562, v433, v434);
          if (SHIBYTE(v599) < 0)
            operator delete((void *)v597);
          v437 = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)a2, (unsigned int *)v417);
          if (!*(_QWORD *)v437)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Prim index has no dynamic file format dependencies\n", v435, v436);
            if (SHIBYTE(v599) >= 0)
              v438 = (const std::string::value_type *)&v597;
            else
              v438 = (const std::string::value_type *)v597;
            if (SHIBYTE(v599) >= 0)
              v439 = HIBYTE(v599);
            else
              v439 = (std::string::size_type)v598;
            std::string::append(&v562, v438, v439);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
            goto LABEL_716;
          }
        }
        else
        {
          v437 = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)a2, (unsigned int *)v417);
          if (!*(_QWORD *)v437)
            goto LABEL_716;
        }
        v440 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v392);
        v441 = v392[1];
        if (v441)
        {
          v442 = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanAttributeDefaultValueChangeAffectFileFormatArguments(v437, v440, (const pxrInternal__aapl__pxrReserved__::VtValue *)v441, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v441 + 16));
          v443 = v442;
          if (v558)
          {
            v444 = *(_QWORD *)v440 & 0xFFFFFFFFFFFFFFF8;
            if (v444)
            {
              v445 = (const char *)(v444 + 16);
              if (*(char *)(v444 + 39) < 0)
                v445 = *(const char **)v445;
            }
            else
            {
              v445 = "";
            }
            sub_20BF834B0(v392[1]);
            if ((v596 & 0x80u) == 0)
              v449 = (uint64_t ***)&v594;
            else
              v449 = (uint64_t ***)v594;
            sub_20BF834B0(v392[1] + 16);
            v450 = (char)v593;
            v451 = v591;
            v452 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v417);
            v455 = &v591;
            if (v450 < 0)
              v455 = (unint64_t *)v451;
            v456 = "is NOT";
            if (v443)
              v456 = "IS";
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Field '%s' change: %s -> %s %s relevant for prim index path '%s'\n", v453, v454, v445, v449, v455, v456, v452);
            if (SHIBYTE(v599) >= 0)
              v457 = (const std::string::value_type *)&v597;
            else
              v457 = (const std::string::value_type *)v597;
            if (SHIBYTE(v599) >= 0)
              v458 = HIBYTE(v599);
            else
              v458 = (std::string::size_type)v598;
            std::string::append(&v562, v457, v458);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)v597);
            if ((char)v593 < 0)
              operator delete((void *)v591);
            if ((char)v596 < 0)
            {
              operator delete((void *)v594);
              if ((v443 & 1) == 0)
                goto LABEL_716;
            }
            else if ((v443 & 1) == 0)
            {
              goto LABEL_716;
            }
LABEL_715:
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v417);
            goto LABEL_716;
          }
          if (v442)
            goto LABEL_715;
        }
        else
        {
          v446 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(v437)[1];
          if (v446)
          {
            v447 = *(_QWORD *)v440 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v448 = v446[4] & 0xFFFFFFFFFFFFFFF8;
              if (v447 >= v448)
              {
                if (v448 >= v447)
                  goto LABEL_715;
                ++v446;
              }
              v446 = (_QWORD *)*v446;
            }
            while (v446);
          }
        }
LABEL_716:
        v417 += 9;
      }
    }
    if ((IsUsd & 1) == 0)
    {
      v461 = v580;
      if (v580 != (uint64_t *)&v581)
      {
        do
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v461 + 28))
            && (*((_BYTE *)v461 + 36) & 4) != 0
            && sub_20C228130((uint64_t *)v555, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v461 + 28)))
          {
            v462 = v559;
            v463 = v560;
            while (v462 != v463)
            {
              v597 = (unint64_t)v462;
              v464 = sub_20C22D2D4(&v563, (uint64_t)v462, (uint64_t)&unk_20CAC184C, (uint64_t **)&v597);
              *((_DWORD *)v464 + 12) |= 4u;
              v462 += 2;
            }
          }
          v465 = (uint64_t *)v461[1];
          if (v465)
          {
            do
            {
              v466 = v465;
              v465 = (uint64_t *)*v465;
            }
            while (v465);
          }
          else
          {
            do
            {
              v466 = (uint64_t *)v461[2];
              v472 = *v466 == (_QWORD)v461;
              v461 = v466;
            }
            while (!v472);
          }
          v461 = v466;
        }
        while (v466 != (uint64_t *)&v581);
      }
      if (v588)
      {
        v468 = v559;
        v467 = v560;
        while (v468 != v467)
        {
          v469 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v468);
          PathsToPrimsWithRelocates = (pxrInternal__aapl__pxrReserved__::SdfPath **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(v469);
          v471 = v586;
          v472 = *PathsToPrimsWithRelocates == PathsToPrimsWithRelocates[1] || v586 == (uint64_t *)&v587;
          if (!v472)
          {
            while (1)
            {
              v473 = *PathsToPrimsWithRelocates;
              v474 = PathsToPrimsWithRelocates[1];
              if (*PathsToPrimsWithRelocates != v474)
                break;
LABEL_751:
              v475 = (uint64_t *)v471[1];
              if (v475)
              {
                do
                {
                  v476 = v475;
                  v475 = (uint64_t *)*v475;
                }
                while (v475);
              }
              else
              {
                do
                {
                  v476 = (uint64_t *)v471[2];
                  v472 = *v476 == (_QWORD)v471;
                  v471 = v476;
                }
                while (!v472);
              }
              v471 = v476;
              if (v476 == (uint64_t *)&v587)
                goto LABEL_759;
            }
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v473, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v471 + 28)))
            {
              v473 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v473 + 8);
              if (v473 == v474)
                goto LABEL_751;
            }
            v597 = (unint64_t)v468;
            v477 = sub_20C22D2D4(&v563, (uint64_t)v468, (uint64_t)&unk_20CAC184C, (uint64_t **)&v597);
            *((_DWORD *)v477 + 12) |= 4u;
          }
LABEL_759:
          v468 += 2;
        }
      }
    }
    v478 = v583;
    if (v583 != (uint64_t *)&v584)
    {
      while (1)
      {
        v479 = *((_DWORD *)v478 + 9);
        pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (_QWORD *)v555, (int *)v478 + 7, 63, 0, 0, 0, (uint64_t *)&v597);
        if (v558)
        {
          v482 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
          v483 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v482);
          v484 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v483);
          v485 = *(char *)(v484 + 23) >= 0 ? v484 : *(_QWORD *)v484;
          v486 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v555);
          v487 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v486);
          v488 = *(char *)(v487 + 23);
          v489 = *(_QWORD *)v487;
          v490 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v478 + 28));
          v493 = v488 >= 0 ? v487 : v489;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v491, v492, v485, "do not recurse on prim descendants", v493, v490, " (not restricted to existing caches)");
          v494 = (v596 & 0x80u) == 0 ? (const std::string::value_type *)&v594 : (const std::string::value_type *)v594;
          v495 = (v596 & 0x80u) == 0 ? v596 : v595;
          std::string::append(&v562, v494, v495);
          if ((char)v596 < 0)
            operator delete((void *)v594);
        }
        v497 = (uint64_t *)v597;
        v496 = v598;
        if ((uint64_t *)v597 != v598)
          break;
LABEL_796:
        if (v558)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v480, v481);
          v505 = (v596 & 0x80u) == 0 ? (const std::string::value_type *)&v594 : (const std::string::value_type *)v594;
          v506 = (v596 & 0x80u) == 0 ? v596 : v595;
          std::string::append(&v562, v505, v506);
          if ((char)v596 < 0)
            operator delete((void *)v594);
        }
        v594 = (unint64_t)&v597;
        sub_20C2219C0((void ***)&v594);
        v507 = (uint64_t *)v478[1];
        if (v507)
        {
          do
          {
            v508 = v507;
            v507 = (uint64_t *)*v507;
          }
          while (v507);
        }
        else
        {
          do
          {
            v508 = (uint64_t *)v478[2];
            v472 = *v508 == (_QWORD)v478;
            v478 = v508;
          }
          while (!v472);
        }
        v478 = v508;
        if (v508 == (uint64_t *)&v584)
          goto LABEL_811;
      }
      v498 = v479 & 0xFFFFFFF9;
      while (2)
      {
        if (v558
          && ((v499 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v497),
               v500 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v497 + 1)),
               pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v501, v502, v499, v500), (v596 & 0x80u) == 0)? (v503 = (const std::string::value_type *)&v594): (v503 = (const std::string::value_type *)v594), (v596 & 0x80u) == 0 ? (v504 = v596) : (v504 = v595), std::string::append(&v562, v503, v504), (char)v596 < 0))
        {
          operator delete((void *)v594);
          if (v498)
LABEL_787:
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecs(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v497, (uint64_t *)v555, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v497 + 1));
        }
        else if (v498)
        {
          goto LABEL_787;
        }
        if ((v479 & 2) != 0)
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeTargets((uint64_t)a1, (unint64_t)a2, v497, 2);
        if ((v479 & 4) != 0)
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeTargets((uint64_t)a1, (unint64_t)a2, v497, 1);
        v497 += 9;
        if (v497 == v496)
          goto LABEL_796;
        continue;
      }
    }
LABEL_811:
    if (v574 != v575)
    {
      v597 = 0;
      v598 = 0;
      v599 = 0;
      v600 = a2;
      v589 = (pxrInternal__aapl__pxrReserved__::PcpCache *)&v600;
      v509 = sub_20C22DCD8(a1 + 6, (unint64_t *)&v600, (uint64_t)&unk_20CAC184C, (uint64_t **)&v589);
      if (v575 != v574)
      {
        v510 = 0;
        v511 = (uint64_t **)(v509 + 5);
        v512 = ((char *)v575 - (char *)v574) >> 3;
        do
        {
          v513 = v574;
          v514 = &v571[2 * v510];
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v514))
          {
            pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (_QWORD *)v555, v514, 47, 0, 0, 1, (uint64_t *)&v594);
            v515 = (uint64_t *)v594;
            v516 = (uint64_t *)v595;
            while (v515 != v516)
            {
              v591 = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v591);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v591 + 1);
              v589 = (pxrInternal__aapl__pxrReserved__::PcpCache *)v515;
              v517 = sub_20C0E4490(v511, (pxrInternal__aapl__pxrReserved__::SdfPath *)v515, (uint64_t)&unk_20CAC184C, (_DWORD **)&v589);
              sub_20BFD3EBC((int *)v517 + 9, (int *)&v591);
              sub_20BFD3F10((int *)v517 + 10, (int *)&v591 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v591 + 1);
              sub_20BFD265C(&v591);
              v515 += 9;
            }
            v591 = (unint64_t)&v594;
            sub_20C2219C0((void ***)&v591);
            a2 = (pxrInternal__aapl__pxrReserved__::PcpCache *)v556;
          }
          pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (_QWORD *)v555, &v513[2 * v510], 47, 0, 0, 1, (uint64_t *)&v594);
          v518 = (uint64_t *)v594;
          v519 = (uint64_t *)v595;
          while (v518 != v519)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v600);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v600 + 1);
            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v514))
            {
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v518 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v514, &v591);
              sub_20BFD3EBC((int *)&v600, (int *)&v591);
              sub_20BFD3F10((int *)&v600 + 1, (int *)&v591 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v591 + 1);
              sub_20BFD265C(&v591);
            }
            v589 = (pxrInternal__aapl__pxrReserved__::PcpCache *)v518;
            v520 = sub_20C0E4490(v511, (pxrInternal__aapl__pxrReserved__::SdfPath *)v518, (uint64_t)&unk_20CAC184C, (_DWORD **)&v589);
            sub_20C01A074((int *)v520 + 9, &v600);
            sub_20C01A0C8((int *)v520 + 10, (_DWORD *)&v600 + 1);
            if (v558)
            {
              v521 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v518);
              v522 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v600);
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  renameChanges <%s> to <%s>\n", v523, v524, v521, v522);
              v525 = (v593 & 0x80u) == 0
                   ? (const std::string::value_type *)&v591
                   : (const std::string::value_type *)v591;
              v526 = (v593 & 0x80u) == 0 ? v593 : v592;
              std::string::append(&v562, v525, v526);
              if ((char)v593 < 0)
                operator delete((void *)v591);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v600 + 1);
            sub_20BFD265C(&v600);
            v518 += 9;
          }
          v591 = (unint64_t)&v594;
          sub_20C2219C0((void ***)&v591);
          ++v510;
          a2 = (pxrInternal__aapl__pxrReserved__::PcpCache *)v556;
        }
        while (v510 != v512);
      }
      v594 = (unint64_t)&v597;
      sub_20BFD6F90((void ***)&v594);
    }
LABEL_847:
    v597 = (unint64_t)&v559;
    sub_20BEB4844((void ***)&v597);
LABEL_848:
    v21 = v555 + 232;
  }
  while (v555 + 232 != v547);
LABEL_862:
  v541 = v563;
  if (v563 != (uint64_t *)v564)
  {
    do
    {
      v542 = *((_DWORD *)v541 + 12);
      if ((v542 & 0x10) != 0)
      {
        v543 = pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(v541 + 4);
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(a1, a2, v541 + 4, v543, v550);
        if (v543)
          v542 |= 9u;
      }
      if ((v542 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackRelocations(a1, a2, v541 + 4, v550);
      if ((v542 & 0x20) != 0)
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackExpressionVariables(a1, a2, (__int128 *)v541 + 2, v550);
      pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(a1, (uint64_t)a2, v541 + 4, v542 & 1, (v542 & 2) != 0, (v542 >> 3) & 1);
      v544 = (uint64_t *)v541[1];
      if (v544)
      {
        do
        {
          v545 = v544;
          v544 = (uint64_t *)*v544;
        }
        while (v544);
      }
      else
      {
        do
        {
          v545 = (uint64_t *)v541[2];
          v472 = *v545 == (_QWORD)v541;
          v541 = v545;
        }
        while (!v472);
      }
      v541 = v545;
    }
    while (v545 != (uint64_t *)v564);
  }
  if (v558)
  {
    if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v562.__r_.__value_.__l.__size_)
      {
        v546 = (std::string *)v562.__r_.__value_.__r.__words[0];
LABEL_882:
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidChange\n%s\n", v19, v20, v546);
      }
    }
    else if (*((_BYTE *)&v562.__r_.__value_.__s + 23))
    {
      v546 = &v562;
      goto LABEL_882;
    }
  }
  if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v562.__r_.__value_.__l.__data_);
  sub_20BFF29AC((uint64_t)&v563, v564[0]);
  sub_20C2295E4(&v565);
  sub_20BFD7C28((uint64_t)&v568, v569);
  v597 = (unint64_t)&v571;
  sub_20BFD6F90((void ***)&v597);
  v597 = (unint64_t)&v574;
  sub_20BFD6F90((void ***)&v597);
  v597 = (unint64_t)&v577;
  sub_20BFD6F90((void ***)&v597);
  sub_20C22D114((uint64_t)&v580, v581);
  sub_20C22D114((uint64_t)&v583, v584);
  sub_20BFD7C28((uint64_t)&v586, v587);
}

void sub_20C226FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a65;
  char a68;
  uint64_t a69;
  uint64_t v69;

  *(_QWORD *)(v69 - 176) = &a41;
  sub_20BEB4844((void ***)(v69 - 176));
  if (a49 < 0)
    operator delete(__p);
  sub_20BFF29AC((uint64_t)&a50, (_QWORD *)a51);
  sub_20C2295E4(&a53);
  sub_20BFD7C28((uint64_t)&a56, (_QWORD *)a57);
  *(_QWORD *)(v69 - 176) = &a59;
  sub_20BFD6F90((void ***)(v69 - 176));
  *(_QWORD *)(v69 - 176) = &a62;
  sub_20BFD6F90((void ***)(v69 - 176));
  *(_QWORD *)(v69 - 176) = &a65;
  sub_20BFD6F90((void ***)(v69 - 176));
  sub_20C22D114((uint64_t)&a68, (_QWORD *)a69);
  sub_20C22D114(v69 - 248, *(_QWORD **)(v69 - 240));
  sub_20BFD7C28(v69 - 224, *(_QWORD **)(v69 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_20C227544@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;

  result = sub_20BFB5E50(a1);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)a1 + 1);
    if ((v7 & 4) != 0)
    {
      result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      a2 = (unsigned int **)result;
    }
    else
    {
      a2 = (unsigned int **)a1;
    }
  }
  v8 = *a2;
  *a3 = *a2;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *a3 = v9;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::PcpChanges::_DidAddOrRemoveSublayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, std::string *a7, uint64_t a8)
{
  std::string *v9;
  uint64_t (*v16)(uint64_t *);
  const char *v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t Identifier;
  const char *v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *LayerStackIdentifier;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char **v28;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v29;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v30;
  char v31;
  char *v32;
  std::string *p_str;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  void ***v38;
  void **v39;
  unint64_t v40;
  char *v41;
  _BYTE *v42;
  float v43;
  _BOOL4 v44;
  unint64_t v45;
  unint64_t v46;
  int8x8_t prime;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD **v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *i;
  unint64_t v58;
  void **v59;
  unint64_t v60;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v79;
  _QWORD *j;
  __int128 *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t *v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  std::string *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v101;
  const std::string *v102;
  __int128 *v103;
  std::string __str;
  void *__p;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  float v114[4];
  void **v115;
  __int128 *v116;
  char v117;

  v9 = a7;
  if (a7)
  {
    v16 = sub_20BFD2F78(a4);
    if (v17 & 1 | (unint64_t)v16)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a4);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v19);
      v21 = *(char *)(Identifier + 23) >= 0 ? (const char *)Identifier : *(const char **)Identifier;
    }
    else
    {
      v21 = "invalid";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed sublayers\n", v17, v18, v21);
    v22 = (v107 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v23 = (v107 & 0x80u) == 0 ? v107 : v106;
    std::string::append(v9, v22, v23);
    if ((char)v107 < 0)
      operator delete(__p);
  }
  if ((pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(a5) & 1) != 0)
  {
    v98 = (uint64_t *)a8;
    v112 = 0u;
    v113 = 0u;
    v114[0] = 1.0;
    LayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::PcpExpressionVariableCachingComposer((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)&__p, LayerStackIdentifier);
    v25 = a3[1];
    if (v25 != *a3)
    {
      v102 = (const std::string *)a5;
      v97 = v9;
      v26 = 0;
      v101 = (v25 - *a3) >> 4;
      v99 = a3;
      while (1)
      {
        v27 = *a3 + 16 * v26;
        if (a6)
        {
          v28 = *(const char ***)(sub_20C1FF3C0((uint64_t *)(*a3 + 16 * v26)) + 392);
        }
        else
        {
          v29 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(*a3 + 16 * v26));
          v30 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v29);
          v28 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::ComputeExpressionVariables((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)&__p, v30);
        }
        pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(v102, (uint64_t)v28, (uint64_t)&__str);
        v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v32 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (char *)HIBYTE(__str.__r_.__value_.__r.__words[2])
            : (char *)__str.__r_.__value_.__l.__size_;
        if (v32)
          break;
LABEL_125:
        if (v31 < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (++v26 == v101)
        {
          v25 = *a3;
          v79 = a3[1];
          v9 = v97;
          goto LABEL_145;
        }
      }
      v103 = (__int128 *)v27;
      v115 = 0;
      LOBYTE(v116) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v115, (pxrInternal__aapl__pxrReserved__ *)p_str, v32);
      v34 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v115);
      v35 = *((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v112 + 8));
        v36.i16[0] = vaddlv_u8(v36);
        v37 = v36.u32[0];
        if (v36.u32[0] > 1uLL)
        {
          v27 = v34;
          if (v34 >= *((_QWORD *)&v112 + 1))
            v27 = v34 % *((_QWORD *)&v112 + 1);
        }
        else
        {
          v27 = (*((_QWORD *)&v112 + 1) - 1) & v34;
        }
        v38 = *(void ****)(v112 + 8 * v27);
        if (v38)
        {
          v39 = *v38;
          if (*v38)
          {
            while (1)
            {
              v40 = (unint64_t)v39[1];
              if (v40 == v34)
              {
                if ((sub_20BEB4EF8((uint64_t)v114, (unsigned __int8 *)v39 + 16, (unsigned __int8 *)&__str) & 1) != 0)
                {
                  a3 = v99;
                  goto LABEL_103;
                }
              }
              else
              {
                if (v37 > 1)
                {
                  if (v40 >= v35)
                    v40 %= v35;
                }
                else
                {
                  v40 &= v35 - 1;
                }
                if (v40 != v27)
                {
LABEL_44:
                  a3 = v99;
                  break;
                }
              }
              v39 = (void **)*v39;
              if (!v39)
                goto LABEL_44;
            }
          }
        }
      }
      v41 = (char *)operator new(0x78uLL);
      v115 = (void **)v41;
      v116 = &v113;
      v117 = 0;
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = v34;
      v42 = v41 + 16;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20BDDBFAC(v42, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v42 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *((_QWORD *)v41 + 4) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v41 + 104) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      v117 = 1;
      v43 = (float)(unint64_t)(*((_QWORD *)&v113 + 1) + 1);
      if (v35 && (float)(v114[0] * (float)v35) >= v43)
      {
LABEL_94:
        v59 = *(void ***)(v112 + 8 * v27);
        if (v59)
        {
          *v115 = *v59;
          *v59 = v115;
        }
        else
        {
          *v115 = (void *)v113;
          *(_QWORD *)&v113 = v115;
          *(_QWORD *)(v112 + 8 * v27) = &v113;
          if (*v115)
          {
            v60 = *((_QWORD *)*v115 + 1);
            if ((v35 & (v35 - 1)) != 0)
            {
              if (v60 >= v35)
                v60 %= v35;
            }
            else
            {
              v60 &= v35 - 1;
            }
            *(_QWORD *)(v112 + 8 * v60) = v115;
          }
        }
        v39 = v115;
        v115 = 0;
        ++*((_QWORD *)&v113 + 1);
        sub_20C22DE0C((uint64_t)&v115);
LABEL_103:
        if (*((char *)v39 + 63) < 0)
        {
          if (!v39[6])
          {
LABEL_107:
            pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a4, (uint64_t)&__str, a6, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v115);
            v61 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v39[8];
            v39[8] = v115;
            v115 = 0;
            sub_20BF1D8F4((_DWORD)v39 + 64, v61);
            sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v115);
            std::string::operator=((std::string *)(v39 + 5), &__str);
          }
        }
        else if (!*((_BYTE *)v39 + 63))
        {
          goto LABEL_107;
        }
        sub_20C20C7BC((uint64_t *)v39 + 9, v103);
        v62 = (char *)v39[14];
        v63 = (char *)v39[13];
        if (v63 >= v62)
        {
          v65 = (char *)v39[12];
          v66 = (v63 - v65) >> 3;
          if ((unint64_t)(v66 + 1) >> 61)
            sub_20BDDF694();
          v67 = v62 - v65;
          v68 = (v62 - v65) >> 2;
          if (v68 <= v66 + 1)
            v68 = v66 + 1;
          if (v67 >= 0x7FFFFFFFFFFFFFF8)
            v69 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v69 = v68;
          if (v69)
          {
            v70 = (char *)sub_20BDDF6A8((uint64_t)(v39 + 14), v69);
            v65 = (char *)v39[12];
            v63 = (char *)v39[13];
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[8 * v66];
          *(_QWORD *)v71 = v26;
          v64 = v71 + 8;
          while (v63 != v65)
          {
            v72 = *((_QWORD *)v63 - 1);
            v63 -= 8;
            *((_QWORD *)v71 - 1) = v72;
            v71 -= 8;
          }
          v39[12] = v71;
          v39[13] = v64;
          v39[14] = &v70[8 * v69];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(_QWORD *)v63 = v26;
          v64 = v63 + 8;
        }
        v39[13] = v64;
        v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        goto LABEL_125;
      }
      v44 = (v35 & (v35 - 1)) == 0;
      if (v35 < 3)
        v44 = 0;
      v45 = (2 * v35) | !v44;
      v46 = vcvtps_u32_f32(v43 / v114[0]);
      if (v45 <= v46)
        prime = (int8x8_t)v46;
      else
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v35 = *((_QWORD *)&v112 + 1);
      if (*(_QWORD *)&prime > *((_QWORD *)&v112 + 1))
        goto LABEL_60;
      if (*(_QWORD *)&prime < *((_QWORD *)&v112 + 1))
      {
        v54 = vcvtps_u32_f32((float)*((unint64_t *)&v113 + 1) / v114[0]);
        if (*((_QWORD *)&v112 + 1) < 3uLL
          || (v55 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v112 + 8)), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
        {
          v54 = std::__next_prime(v54);
        }
        else
        {
          v56 = 1 << -(char)__clz(v54 - 1);
          if (v54 >= 2)
            v54 = v56;
        }
        if (*(_QWORD *)&prime <= v54)
          prime = (int8x8_t)v54;
        if (*(_QWORD *)&prime >= v35)
        {
          v35 = *((_QWORD *)&v112 + 1);
        }
        else
        {
          if (prime)
          {
LABEL_60:
            if (*(_QWORD *)&prime >> 61)
              sub_20BDDF5B4();
            v48 = operator new(8 * *(_QWORD *)&prime);
            v49 = (void *)v112;
            *(_QWORD *)&v112 = v48;
            if (v49)
              operator delete(v49);
            v50 = 0;
            *((int8x8_t *)&v112 + 1) = prime;
            do
              *(_QWORD *)(v112 + 8 * v50++) = 0;
            while (*(_QWORD *)&prime != v50);
            v51 = (_QWORD **)v113;
            if ((_QWORD)v113)
            {
              v52 = *(_QWORD *)(v113 + 8);
              v53 = (uint8x8_t)vcnt_s8(prime);
              v53.i16[0] = vaddlv_u8(v53);
              if (v53.u32[0] > 1uLL)
              {
                if (v52 >= *(_QWORD *)&prime)
                  v52 %= *(_QWORD *)&prime;
              }
              else
              {
                v52 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(v112 + 8 * v52) = &v113;
              for (i = *v51; i; v52 = v58)
              {
                v58 = i[1];
                if (v53.u32[0] > 1uLL)
                {
                  if (v58 >= *(_QWORD *)&prime)
                    v58 %= *(_QWORD *)&prime;
                }
                else
                {
                  v58 &= *(_QWORD *)&prime - 1;
                }
                if (v58 != v52)
                {
                  if (!*(_QWORD *)(v112 + 8 * v58))
                  {
                    *(_QWORD *)(v112 + 8 * v58) = v51;
                    goto LABEL_85;
                  }
                  *v51 = (_QWORD *)*i;
                  *i = **(_QWORD **)(v112 + 8 * v58);
                  **(_QWORD **)(v112 + 8 * v58) = i;
                  i = v51;
                }
                v58 = v52;
LABEL_85:
                v51 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v35 = (unint64_t)prime;
            goto LABEL_89;
          }
          v73 = (void *)v112;
          *(_QWORD *)&v112 = 0;
          if (v73)
            operator delete(v73);
          v35 = 0;
          *((_QWORD *)&v112 + 1) = 0;
        }
      }
LABEL_89:
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v34 >= v35)
          v27 = v34 % v35;
        else
          v27 = v34;
      }
      else
      {
        v27 = (v35 - 1) & v34;
      }
      goto LABEL_94;
    }
    v79 = a3[1];
LABEL_145:
    LOBYTE(v115) = 0;
    sub_20C22BF94((uint64_t)v98, (v79 - v25) >> 4, &v115);
    for (j = (_QWORD *)v113; j; j = (_QWORD *)*j)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      sub_20C1034E8((uint64_t *)&v115, j + 8);
      pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(a1, a2, j + 9, j + 5, (uint64_t *)&v115, a6, v9, &__str);
      v81 = v116;
      if (v116)
      {
        v82 = (unsigned int *)v116 + 2;
        do
        {
          v83 = __ldxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
          (*(void (**)(__int128 *))(*(_QWORD *)v81 + 8))(v81);
      }
      if (__str.__r_.__value_.__s.__data_[0])
      {
        v85 = (unint64_t *)j[12];
        v86 = (unint64_t *)j[13];
        if (v85 != v86)
        {
          v87 = *v98;
          do
          {
            v88 = *v85++;
            *(_QWORD *)(v87 + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v88;
          }
          while (v85 != v86);
        }
      }
    }
    sub_20C22C9C4((uint64_t)&v111);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v110);
    v115 = (void **)&v109;
    sub_20BDE9EB0(&v115);
    v89 = v108;
    if (v108)
    {
      v90 = (unsigned int *)(v108 + 8);
      do
      {
        v91 = __ldxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    }
    v93 = v106;
    if (v106)
    {
      v94 = (unsigned int *)(v106 + 8);
      do
      {
        v95 = __ldxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
    }
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_20C22C144((uint64_t)&v112);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a4, (uint64_t)a5, a6, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v112);
    LOBYTE(v115) = 0;
    sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v112);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(a1, a2, a3, a5, (uint64_t *)&__p, a6, v9, &v115);
    v74 = v106;
    if (v106)
    {
      v75 = (unsigned int *)(v106 + 8);
      do
      {
        v76 = __ldxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    }
    sub_20C22BF94(a8, (a3[1] - *a3) >> 4, &v115);
    return sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v112);
  }
}

void sub_20C227F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  sub_20C22C0A4((uint64_t)&__p);
  sub_20C22C144(v30 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_20C228060(uint64_t *a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((_DWORD *)a1 + 31);
  v3 = a1;
  if (v2 >= 4)
    v3 = (uint64_t *)*a1;
  v4 = *((unsigned int *)a1 + 30);
  if ((_DWORD)v4)
  {
    v5 = &v3[5 * v4];
    v6 = 40 * v4;
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v3 += 5;
      v6 -= 40;
      if (!v6)
      {
        v3 = v5;
        break;
      }
    }
  }
  if (v2 >= 4)
    a1 = (uint64_t *)*a1;
  return v3 != &a1[5 * v4];
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t **v4;
  const pxrInternal__aapl__pxrReserved__::PcpCache *v6;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v7;

  v6 = a2;
  v7 = &v6;
  v4 = sub_20C22DB54(this + 3, (unint64_t *)&v6, (uint64_t)&unk_20CAC184C, (uint64_t **)&v7);
  return sub_20C0A7BE0(v4 + 5, a3, a3);
}

uint64_t sub_20C228130(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v8;
  int HasField;
  int v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  char v13;
  const pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t v17;
  void **v18[3];
  __int16 v19;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 288), 0) & 1) != 0)return 1;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v7 = (_QWORD *)sub_20BFCF650(a1);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v8)
    v8 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v18[2] = (void **)&stru_24C51BCF0;
  v19 = 0;
  v18[0] = (void **)&unk_24C528DB0;
  v18[1] = (void **)&v15;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v8 + 32), (uint64_t (***)(_QWORD, uint64_t))v18);
  if ((_BYTE)v19)
    v10 = 0;
  else
    v10 = HasField;
  if (v10 != 1 || (v11 = v15, v12 = v16, v15 == v16))
  {
    v6 = 0;
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v11, v18);
      v6 = sub_20C228130(a1, v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v18 + 1);
      sub_20BFD265C(v18);
      v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v11 + 8);
      if (v11 == v12)
        v13 = 1;
      else
        v13 = v6;
    }
    while ((v13 & 1) == 0);
  }
  v18[0] = (void **)&v15;
  sub_20BEEB2B8(v18);
  return v6;
}

void sub_20C2282A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_20BEEB2B8(&a16);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::_GetRenameChanges(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  const pxrInternal__aapl__pxrReserved__::PcpCache *v3;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v4;

  v3 = a2;
  v4 = &v3;
  return sub_20C22DCD8(this + 6, (unint64_t *)&v3, (uint64_t)&unk_20CAC184C, (uint64_t **)&v4) + 5;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, int a4, std::string *a5)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  uint64_t Identifier;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  int *v13;
  int *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v18;
  pxrInternal__aapl__pxrReserved__ *PrimIndex;
  unsigned int *v20;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v21;
  pxrInternal__aapl__pxrReserved__ *v22;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v23;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  pxrInternal__aapl__pxrReserved__::SdfPath *v25;
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  std::string::size_type v33;
  const char *Text;
  const char *v35;
  char *v36;
  void **v37;
  std::string::size_type v38;
  __int128 v39;
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  const char *v43;
  char v44;
  void **v45;
  _BYTE v46[48];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a3);
  Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v10);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v46, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
  v39 = 0uLL;
  v40 = 0;
  if (a4)
  {
    v13 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, a3, v13, 63, 1, 0, 1, (uint64_t *)__p);
    sub_20C22DE50(&v39);
    v39 = *(_OWORD *)__p;
    v40 = v42;
    __p[1] = 0;
    v42 = 0;
    __p[0] = 0;
    v45 = __p;
    sub_20C2219C0(&v45);
    goto LABEL_27;
  }
  v14 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, a3, v14, 63, 1, 1, 1, (uint64_t *)__p);
  sub_20C22DE50(&v39);
  v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  v45 = __p;
  sub_20C2219C0(&v45);
  v16 = (unsigned int *)*((_QWORD *)&v39 + 1);
  v15 = (unsigned int *)v39;
  if ((_QWORD)v39 == *((_QWORD *)&v39 + 1))
    goto LABEL_25;
  v17 = *((_QWORD *)&v39 + 1);
  while (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v15))
  {
    PrimIndex = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a2, v15);
    if (PrimIndex
      || (__p[0] = "pcp/changes.cpp",
          __p[1] = "operator()",
          v42 = 2346,
          v43 = "auto pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(const PcpCache *, co"
                "nst PcpLayerStackPtr &, BOOL, std::string *)::(anonymous class)::operator()(const PcpDependency &) const",
          v44 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "primIndex", 0) & 1) != 0))
    {
      if (!pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(PrimIndex, v18))
        break;
    }
    v15 += 18;
    if (v15 == v16)
      goto LABEL_26;
  }
  if (v15 == v16)
    goto LABEL_26;
  v20 = v15 + 18;
  if (v15 + 18 == v16)
  {
LABEL_25:
    v17 = (uint64_t)v15;
  }
  else
  {
    v17 = (uint64_t)v15;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v20))
      {
        if ((v22 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a2, v20)) == 0&& (__p[0] = "pcp/changes.cpp", __p[1] = "operator()", v42 = 2346, v43 = "auto pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(const PcpCache *, const PcpLayerStackPtr &, BOOL, std::string *)::(anonymous class)::operator()(const PcpDependency &) const", v44 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "primIndex", 0) & 1) == 0)|| pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(v22, v21))
        {
          sub_20BFD3EBC((int *)v17, (int *)v20);
          sub_20BFD3F10((int *)(v17 + 4), (int *)v20 + 1);
          sub_20BFD3EBC((int *)(v17 + 8), (int *)v20 + 2);
          sub_20BFD3F10((int *)(v17 + 12), (int *)v20 + 3);
          if (v20 != (unsigned int *)v17)
          {
            v23 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 + 16));
            sub_20C201ECC(v23, (uint64_t)(v20 + 4));
          }
          *(_OWORD *)(v17 + 56) = *(_OWORD *)(v20 + 14);
          v17 += 72;
        }
      }
      v20 += 18;
    }
    while (v20 != v16);
  }
LABEL_26:
  sub_20C22C3BC((uint64_t)&v39, v17, *((uint64_t *)&v39 + 1));
LABEL_27:
  v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v39 + 1);
  v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v39;
  if ((_QWORD)v39 != *((_QWORD *)&v39 + 1))
  {
    if (a5)
    {
      LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
      v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
      v28 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v27);
      if (*(char *)(v28 + 23) >= 0)
        v31 = v28;
      else
        v31 = *(_QWORD *)v28;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ significant due to layer resolved path change:\n", v29, v30, v31);
      if (v42 >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (v42 >= 0)
        v33 = HIBYTE(v42);
      else
        v33 = (std::string::size_type)__p[1];
      std::string::append(a5, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(v42) < 0)
        operator delete(__p[0]);
      v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v39 + 1);
      v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v39;
    }
    for (; v24 != v25; v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 72))
    {
      if (a5)
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v35, v36, Text);
        if (v42 >= 0)
          v37 = __p;
        else
          v37 = (void **)__p[0];
        if (v42 >= 0)
          v38 = HIBYTE(v42);
        else
          v38 = (std::string::size_type)__p[1];
        std::string::append(a5, (const std::string::value_type *)v37, v38);
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, v24);
    }
  }
  __p[0] = &v39;
  sub_20C2219C0((void ***)__p);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v46);
}

void sub_20C228714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24)
{
  if (a20 < 0)
    operator delete(__p);
  a23 = &a11;
  sub_20C2219C0((void ***)&a23);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&a24);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackRelocations(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, void *a3, std::string *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  unsigned int ****Layers;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v12;
  uint64_t v13;
  char *v14;
  uint64_t RelocatesSourceToTarget;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t **v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  pxrInternal__aapl__pxrReserved__::SdfPath *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  pxrInternal__aapl__pxrReserved__::SdfPath *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t **v52;
  pxrInternal__aapl__pxrReserved__::SdfPath *v53;
  pxrInternal__aapl__pxrReserved__::SdfPath *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  char *v59;
  void *v60;
  const std::string::value_type *p_p;
  std::string::size_type v62;
  int *v63;
  const char *Text;
  const char *v65;
  char *v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  pxrInternal__aapl__pxrReserved__::SdfPath *v69;
  pxrInternal__aapl__pxrReserved__::SdfPath *v70;
  int *v71;
  int *v72;
  BOOL v73;
  const char *v74;
  char *v75;
  void **v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  _QWORD *v79;
  const char *v80;
  const char *v81;
  char *v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  _QWORD *v85;
  _QWORD **v86;
  uint64_t **v87;
  void *v88[2];
  char v89;
  void *v90;
  std::string::size_type v91;
  unsigned __int8 v92;
  void *__p;
  _QWORD *v94;
  uint64_t v95;

  __p = a3;
  v8 = sub_20C22D860(a1, (uint64_t)a3, (uint64_t)&unk_20CAC184C, (_QWORD **)&__p);
  if (*((_BYTE *)v8 + 50))
    return;
  v9 = v8;
  v87 = a1;
  *((_BYTE *)v8 + 50) = 1;
  v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)a3);
  Layers = (unsigned int ****)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v10);
  pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(Layers, (uint64_t **)v9 + 10, (char *)v9 + 56, (uint64_t **)v9 + 13, (uint64_t **)v9 + 16, v9 + 19);
  v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)a3);
  RelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesSourceToTarget(v12);
  __p = *(void **)RelocatesSourceToTarget;
  v94 = (_QWORD *)(RelocatesSourceToTarget + 8);
  if (__p != (void *)(RelocatesSourceToTarget + 8))
  {
    while (1)
    {
      v16 = sub_20BFEB714(&__p, v13, v14);
      v17 = sub_20BFE4AF0((uint64_t)(v9 + 10), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v16 + 28));
      if (v9 + 11 == v17)
        break;
      v20 = v17;
      v21 = sub_20BFEB714(&__p, v18, v19);
      v25 = *(uint64_t *)((char *)v20 + 36);
      v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 36);
      if (v25 != *(_QWORD *)(*v21 + 36))
      {
        v26 = sub_20BFEB714(&__p, v22, v23);
        sub_20C0A7BE0((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v26 + 28), (_DWORD *)(*v26 + 28));
        v29 = sub_20BFEB714(&__p, v27, v28);
        sub_20C0A7BE0((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v29 + 36), (_DWORD *)(*v29 + 36));
        v30 = (uint64_t **)(v9 + 22);
        v31 = v24;
        v32 = v24;
LABEL_7:
        sub_20C0A7BE0(v30, v31, v32);
      }
      sub_20BFEB78C(&__p);
      if (__p == v94)
        goto LABEL_9;
    }
    v33 = sub_20BFEB714(&__p, v18, v19);
    sub_20C0A7BE0((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v33 + 28), (_DWORD *)(*v33 + 28));
    v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_20BFEB714(&__p, v34, v35) + 36);
    v30 = (uint64_t **)(v9 + 22);
    v32 = v31;
    goto LABEL_7;
  }
LABEL_9:
  v36 = (_QWORD *)v9[10];
  v37 = v9 + 11;
  __p = v36;
  v94 = v9 + 11;
  while (v36 != v37)
  {
    v38 = sub_20BFEB714(&__p, v13, v14);
    v39 = sub_20BFE4AF0(RelocatesSourceToTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v38 + 28));
    if ((_QWORD *)(RelocatesSourceToTarget + 8) == v39)
    {
      v55 = sub_20BFEB714(&__p, v40, v41);
      sub_20C0A7BE0((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v55 + 28), (_DWORD *)(*v55 + 28));
      v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_20BFEB714(&__p, v56, v57) + 36);
      v52 = (uint64_t **)(v9 + 22);
      v54 = v53;
    }
    else
    {
      v42 = v39;
      v43 = sub_20BFEB714(&__p, v40, v41);
      v47 = *(_QWORD *)((char *)v42 + 36);
      v46 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 36);
      if (v47 == *(_QWORD *)(*v43 + 36))
        goto LABEL_16;
      v48 = sub_20BFEB714(&__p, v44, v45);
      sub_20C0A7BE0((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v48 + 28), (_DWORD *)(*v48 + 28));
      v51 = sub_20BFEB714(&__p, v49, v50);
      sub_20C0A7BE0((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v51 + 36), (_DWORD *)(*v51 + 36));
      v52 = (uint64_t **)(v9 + 22);
      v53 = v46;
      v54 = v46;
    }
    sub_20C0A7BE0(v52, v53, v54);
LABEL_16:
    sub_20BFEB78C(&__p);
    v36 = __p;
    v37 = v94;
  }
  if (a4 && v9[24])
  {
    sub_20C22C2F4((uint64_t *)a3);
    if ((v92 & 0x80u) == 0)
      v60 = &v90;
    else
      v60 = v90;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Relocation change in %s affects:\n", v58, v59, v60);
    if (v95 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v95 >= 0)
      v62 = HIBYTE(v95);
    else
      v62 = (std::string::size_type)v94;
    std::string::append(a4, p_p, v62);
    if (SHIBYTE(v95) < 0)
      operator delete(__p);
    if ((char)v92 < 0)
      operator delete(v90);
  }
  v94 = 0;
  v95 = 0;
  __p = &v94;
  v63 = (int *)v9[22];
  if (v63 != (int *)(v9 + 23))
  {
    do
    {
      if (a4)
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v63 + 7));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v65, v66, Text);
        v67 = (v92 & 0x80u) == 0 ? (const std::string::value_type *)&v90 : (const std::string::value_type *)v90;
        v68 = (v92 & 0x80u) == 0 ? v92 : v91;
        std::string::append(a4, v67, v68);
        if ((char)v92 < 0)
          operator delete(v90);
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)a3, v63 + 7, 63, 1, 1, 0, (uint64_t *)&v90);
      v70 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v90;
      v69 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v91;
      while (v70 != v69)
      {
        sub_20C0A7BE0((uint64_t **)&__p, v70, v70);
        v70 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v70 + 72);
      }
      v88[0] = &v90;
      sub_20C2219C0((void ***)v88);
      v71 = (int *)*((_QWORD *)v63 + 1);
      if (v71)
      {
        do
        {
          v72 = v71;
          v71 = *(int **)v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          v72 = (int *)*((_QWORD *)v63 + 2);
          v73 = *(_QWORD *)v72 == (_QWORD)v63;
          v63 = v72;
        }
        while (!v73);
      }
      v63 = v72;
    }
    while (v72 != (int *)(v9 + 23));
    if (a4 && v95)
    {
      sub_20C22C2F4((uint64_t *)a3);
      if (v89 >= 0)
        v76 = v88;
      else
        v76 = (void **)v88[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  and dependent paths in %s\n", v74, v75, v76);
      if ((v92 & 0x80u) == 0)
        v77 = (const std::string::value_type *)&v90;
      else
        v77 = (const std::string::value_type *)v90;
      if ((v92 & 0x80u) == 0)
        v78 = v92;
      else
        v78 = v91;
      std::string::append(a4, v77, v78);
      if ((char)v92 < 0)
        operator delete(v90);
      if (v89 < 0)
        operator delete(v88[0]);
    }
  }
  v79 = __p;
  if (__p != &v94)
  {
    do
    {
      if (a4)
      {
        v80 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v79 + 28));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"      <%s>\n", v81, v82, v80);
        v83 = (v92 & 0x80u) == 0 ? (const std::string::value_type *)&v90 : (const std::string::value_type *)v90;
        v84 = (v92 & 0x80u) == 0 ? v92 : v91;
        std::string::append(a4, v83, v84);
        if ((char)v92 < 0)
          operator delete(v90);
      }
      pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v87, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v79 + 28));
      v85 = (_QWORD *)v79[1];
      if (v85)
      {
        do
        {
          v86 = (_QWORD **)v85;
          v85 = (_QWORD *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (_QWORD **)v79[2];
          v73 = *v86 == v79;
          v79 = v86;
        }
        while (!v73);
      }
      v79 = v86;
    }
    while (v86 != &v94);
  }
  sub_20BFD7C28((uint64_t)&__p, v94);
}

void sub_20C228CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  sub_20BFD7C28((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackExpressionVariables(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, __int128 *a3, std::string *a4)
{
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *LayerStackIdentifier;
  uint64_t *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v8;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *Identifier;
  uint64_t *v10;
  uint64_t *v11;
  const void ****v12;
  char *v13;
  int v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v16;
  uint64_t *v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  uint64_t *v25;
  int v26;
  void **v27;
  const char *v28;
  char *v29;
  void **v30;
  void *v31;
  const std::string::value_type *p_p;
  std::string::size_type v33;
  uint64_t *v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  const char *v46;
  char *v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v50;
  uint64_t *v51;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  const void **v59;
  pxrInternal__aapl__pxrReserved__::VtValue *v60;
  std::type_info *v61;
  char *v62;
  uint64_t *PrimsUsingExpressionVariablesFromLayerStack;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t *v66;
  _QWORD *v67;
  pxrInternal__aapl__pxrReserved__::VtValue *v68;
  std::type_info *v69;
  char *v70;
  const char *Text;
  const char *v72;
  char *v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  const char *v76;
  char *v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *__p;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v91;
  std::string **v92;
  int64x2_t *v93;
  void *v94;
  char v95;
  void *v96[2];
  char v97;
  _BYTE v98[8];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64x2_t v104[2];
  __int128 v105;
  _QWORD v106[3];
  std::string *v107;
  const pxrInternal__aapl__pxrReserved__::PcpCache *v108;

  v107 = a4;
  v108 = a2;
  v106[0] = a1;
  v106[1] = a2;
  v106[2] = a4;
  v105 = 0u;
  memset(v104, 0, sizeof(v104));
  sub_20C22C448(v104, a3);
  LayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::PcpExpressionVariableCachingComposer((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)v98, LayerStackIdentifier);
  while (*((_QWORD *)&v105 + 1))
  {
    v6 = (uint64_t *)(*(_QWORD *)(v104[0].i64[1] + (((unint64_t)v105 >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * v105);
    v7 = *(uint64_t **)(sub_20C1FF3C0(v6) + 392);
    v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v6);
    Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v8);
    v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::ComputeExpressionVariables((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)v98, Identifier);
    v11 = v7 + 2;
    v12 = (const void ****)(v10 + 2);
    v14 = pxrInternal__aapl__pxrReserved__::operator!=((_QWORD **)v7 + 2, v10 + 2, v13);
    v15 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator!=(v7, v10);
    if (((v14 | v15) & 1) != 0)
    {
      if (v107)
      {
        v16 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v6);
        v17 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v16);
        v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v17);
        v19 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
        v22 = *(char *)(v19 + 23) >= 0 ? v19 : *(_QWORD *)v19;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Expression variables changed for layer stack @%s@\n", v20, v21, v22);
        v23 = SHIBYTE(v92) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
        v24 = SHIBYTE(v92) >= 0 ? HIBYTE(v92) : (std::string::size_type)v91;
        std::string::append(v107, v23, v24);
        if (SHIBYTE(v92) < 0)
          operator delete(__p);
      }
      __p = v6;
      v25 = sub_20C22D860(a1, (uint64_t)v6, (uint64_t)&unk_20CAC184C, (_QWORD **)&__p);
      if (v14)
      {
        if (v107)
        {
          sub_20C22C4EC((_QWORD **)v7 + 2);
          v26 = v97;
          v27 = (void **)v96[0];
          sub_20C22C4EC(v12);
          v30 = v96;
          if (v26 < 0)
            v30 = v27;
          v31 = &v94;
          if (v95 < 0)
            v31 = v94;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    old: %s\n    new: %s\n", v28, v29, v30, v31);
          if (SHIBYTE(v92) >= 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if (SHIBYTE(v92) >= 0)
            v33 = HIBYTE(v92);
          else
            v33 = (std::string::size_type)v91;
          std::string::append(v107, p_p, v33);
          if (SHIBYTE(v92) < 0)
            operator delete(__p);
          if (v95 < 0)
            operator delete(v94);
          if (v97 < 0)
            operator delete(v96[0]);
        }
        *((_BYTE *)v25 + 51) = 1;
        pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)v25 + 25, v12);
      }
      if (v15)
      {
        if (v107)
        {
          v34 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v7, v108);
          v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v34);
          v36 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v35);
          v37 = *(char *)(v36 + 23) >= 0 ? v36 : *(_QWORD *)v36;
          v38 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v10, v108);
          v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v38);
          v40 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v39);
          v43 = *(char *)(v40 + 23) >= 0 ? v40 : *(_QWORD *)v40;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    old source: @%s@\n    new source: @%s@\n", v41, v42, v37, v43);
          v44 = SHIBYTE(v92) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
          v45 = SHIBYTE(v92) >= 0 ? HIBYTE(v92) : (std::string::size_type)v91;
          std::string::append(v107, v44, v45);
          if (SHIBYTE(v92) < 0)
            operator delete(__p);
        }
        *((_BYTE *)v25 + 208) = 1;
        sub_20BDE881C(v25 + 27, v10);
        if (v107)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Resync all prims using layer stack because expression variable source has changed.\n", v46, v47);
          if (SHIBYTE(v92) >= 0)
            v48 = (const std::string::value_type *)&__p;
          else
            v48 = (const std::string::value_type *)__p;
          if (SHIBYTE(v92) >= 0)
            v49 = HIBYTE(v92);
          else
            v49 = (std::string::size_type)v91;
          std::string::append(v107, v48, v49);
          if (SHIBYTE(v92) < 0)
            operator delete(__p);
        }
LABEL_111:
        sub_20C22C5B4((uint64_t)v106, v6);
        goto LABEL_112;
      }
      v59 = *(const void ***)(sub_20C1FF3C0(v6) + 424);
      if (v59)
      {
        while (1)
        {
          v60 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4(v11, v59 + 2);
          v61 = (std::type_info *)sub_20C044FD4((uint64_t *)v12, v59 + 2);
          if ((v60 != 0) != (v61 != 0)
            || v60
            && v61
            && !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v60, v61, v62))
          {
            break;
          }
          v59 = (const void **)*v59;
          if (!v59)
            goto LABEL_79;
        }
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(a1, (uint64_t)v108, v6, 1, 0, 1);
        if (v107)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Resync all prims using layer stack because an expression variable used for sublayers changed.\n", v76, v77);
          v78 = SHIBYTE(v92) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
          v79 = SHIBYTE(v92) >= 0 ? HIBYTE(v92) : (std::string::size_type)v91;
          std::string::append(v107, v78, v79);
          if (SHIBYTE(v92) < 0)
            operator delete(__p);
        }
        goto LABEL_111;
      }
LABEL_79:
      PrimsUsingExpressionVariablesFromLayerStack = pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimsUsingExpressionVariablesFromLayerStack((uint64_t)v108, (uint64_t)v6);
      v64 = (unsigned int *)*PrimsUsingExpressionVariablesFromLayerStack;
      v65 = (unsigned int *)PrimsUsingExpressionVariablesFromLayerStack[1];
      while (v64 != v65)
      {
        v66 = (uint64_t *)*((_QWORD *)pxrInternal__aapl__pxrReserved__::PcpCache::GetExpressionVariablesFromLayerStackUsedByPrim((uint64_t)v108, v64, (uint64_t)v6)+ 2);
        if (v66)
        {
          while (1)
          {
            v67 = v66 + 2;
            v68 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C044FD4(v11, (const void **)v66 + 2);
            v69 = (std::type_info *)sub_20C044FD4((uint64_t *)v12, (const void **)v66 + 2);
            if ((v68 != 0) != (v69 != 0)
              || v68
              && v69
              && (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v68, v69, v70) & 1) == 0)
            {
              break;
            }
            v66 = (uint64_t *)*v66;
            if (!v66)
              goto LABEL_100;
          }
          if (v107)
          {
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v64);
            if (*((char *)v66 + 39) < 0)
              v67 = (_QWORD *)*v67;
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Resync <%s> because expression variable '%s' has changed\n", v72, v73, Text, v67);
            if (SHIBYTE(v92) >= 0)
              v74 = (const std::string::value_type *)&__p;
            else
              v74 = (const std::string::value_type *)__p;
            if (SHIBYTE(v92) >= 0)
              v75 = HIBYTE(v92);
            else
              v75 = (std::string::size_type)v91;
            std::string::append(v107, v74, v75);
            if (SHIBYTE(v92) < 0)
              operator delete(__p);
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, v108, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64);
        }
LABEL_100:
        v64 += 2;
      }
      __p = v6;
      v91 = &v108;
      v92 = &v107;
      v93 = v104;
      v96[0] = &__p;
      v96[1] = sub_20C22E2D4;
      pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachLayerStack((uint64_t)v108, (uint64_t)v96);
    }
    else if (v107)
    {
      v50 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v6);
      v51 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v50);
      v52 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v51);
      v53 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v52);
      v56 = *(char *)(v53 + 23) >= 0 ? v53 : *(_QWORD *)v53;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Expression variables unchanged for layer stack @%s@\n", v54, v55, v56);
      v57 = SHIBYTE(v92) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
      v58 = SHIBYTE(v92) >= 0 ? HIBYTE(v92) : (std::string::size_type)v91;
      std::string::append(v107, v57, v58);
      if (SHIBYTE(v92) < 0)
        operator delete(__p);
    }
LABEL_112:
    sub_20C22C6EC(v104);
  }
  sub_20C22C9C4((uint64_t)&v103);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v102);
  __p = &v101;
  sub_20BDE9EB0((void ***)&__p);
  v80 = v100;
  if (v100)
  {
    v81 = (unsigned int *)(v100 + 8);
    do
    {
      v82 = __ldxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  }
  v84 = v99;
  if (v99)
  {
    v85 = (unsigned int *)(v99 + 8);
    do
    {
      v86 = __ldxr(v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v85));
    if (!v87)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  }
  return sub_20BF1D9A0(v104);
}

void sub_20C229420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  sub_20BF1D9A0((_QWORD *)(v31 - 192));
  _Unwind_Resume(a1);
}

_BYTE *pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(uint64_t **a1, uint64_t a2, uint64_t *a3, char a4, char a5, int a6)
{
  _BYTE *result;
  char v13;
  unint64_t v14;
  unint64_t *v15;

  v15 = (unint64_t *)a3;
  result = sub_20C22D860(a1, (uint64_t)a3, (uint64_t)&unk_20CAC184C, &v15);
  v13 = result[48] | a4;
  result[48] = v13;
  result[49] |= a5;
  result[52] |= a6;
  if (v13)
    result[49] = 0;
  if ((a4 & 1) != 0 || a6)
  {
    result = (_BYTE *)pxrInternal__aapl__pxrReserved__::PcpCache::UsesLayerStack(a2, a3);
    if ((_DWORD)result)
    {
      v14 = a2;
      v15 = &v14;
      result = sub_20C22DB54(a1 + 3, &v14, (uint64_t)&unk_20CAC184C, (uint64_t **)&v15);
      result[160] = 1;
    }
  }
  return result;
}

_QWORD *sub_20C2295E4(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = (_DWORD *)*a1;
  if (*a1)
  {
    v3 = (_DWORD *)a1[1];
    v4 = (_DWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 4;
        sub_20C22C998(v3);
      }
      while (v3 != v2);
      v4 = (_DWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidMuteLayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t a3)
{
  _BOOL4 v6;
  std::string *v7;
  const char *v8;
  char *v9;
  uint64_t *AllLayerStacksUsingLayer;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  std::string::size_type size;
  std::string *v23;
  void *__p;
  uint64_t v25;
  unsigned __int8 v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  std::string v28;

  memset(&v28, 0, sizeof(v28));
  v6 = sub_20C1FE3D8(0);
  if (v6)
    v7 = &v28;
  else
    v7 = 0;
  pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a3, 1, &v27);
  sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v27);
  AllLayerStacksUsingLayer = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)a2, (uint64_t)&__p);
  v11 = v25;
  if (v25)
  {
    v12 = (unsigned int *)(v25 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v6)
  {
    v15 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Did mute layer @%s@\n", v8, v9, v15);
    v16 = (v26 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v17 = (v26 & 0x80u) == 0 ? v26 : v25;
    std::string::append(&v28, v16, v17);
    if ((char)v26 < 0)
      operator delete(__p);
  }
  if (*AllLayerStacksUsingLayer != AllLayerStacksUsingLayer[1])
  {
    sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(a1, a2, AllLayerStacksUsingLayer, (uint64_t *)a3, (uint64_t *)&__p, 1, v7);
    v18 = v25;
    if (v25)
    {
      v19 = (unsigned int *)(v25 + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  if (v6)
  {
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v28.__r_.__value_.__l.__size_;
    if (size)
    {
      v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v28;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidMuteLayer\n%s", v8, v9, v23);
    }
  }
  sub_20C103234(&v27);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_20C22981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20C103234(&a16);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C2298BC()
{
  JUMPOUT(0x20C2298A4);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X1>, uint64_t a2@<X2>, int a3@<W3>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4@<X8>)
{
  uint64_t LayerStackIdentifier;
  uint64_t FileFormatTarget;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  unsigned int *v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  _QWORD v20[3];
  _BYTE v21[48];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  LayerStackIdentifier = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(this);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v21, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(LayerStackIdentifier + 32));
  *a4 = 0;
  FileFormatTarget = pxrInternal__aapl__pxrReserved__::PcpCache::GetFileFormatTarget(this);
  pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a2, FileFormatTarget, (uint64_t)v20);
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find(a2, (uint64_t)v20, (uint64_t *)&v17);
    v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v18;
    if (v18)
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v18) + 14))
        v10 = v17;
      else
        v10 = 0;
    }
    v19 = v10;
    sub_20BF1DD04((uint64_t *)&v19);
    v11 = *a4;
    *a4 = v19;
    v19 = 0;
    sub_20BF1D8F4((int)a4, v11);
    sub_20C103234(&v19);
    v12 = (uint64_t)v18;
    if (v18)
    {
      v13 = v18 + 2;
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a2, v20, &v17);
    v16 = *a4;
    *a4 = v17;
    v17 = 0;
    sub_20BF1D8F4((int)a4, v16);
    sub_20C103234(&v17);
  }
  sub_20BDE9D48((uint64_t)v20, (_QWORD *)v20[1]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v21);
}

void sub_20C229A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  _QWORD *v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD *);
  v11 = va_arg(va2, _QWORD);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20BDE9D48((uint64_t)va1, v10);
  sub_20C103234(v2);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va2);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, std::string *a7)
{
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  unsigned __int8 v16;

  v16 = 0;
  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(a1, a2, a3, a4, a5, a6, a7, &v16);
  result = (unint64_t)sub_20BFD2F78(a5);
  if (v12 & 1 | result)
  {
    v13 = (uint64_t *)*a3;
    v14 = (uint64_t *)a3[1];
    if (v13 != v14)
    {
      v15 = v16;
      do
      {
        result = (unint64_t)pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(a1, (uint64_t)a2, v13, 1, 0, v15 != 0);
        v13 += 2;
      }
      while (v13 != v14);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidUnmuteLayer(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  _BOOL4 v6;
  std::string *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t *AllUsingMutedLayer;
  uint64_t v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  std::string::size_type size;
  std::string *v20;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  v6 = sub_20C1FE3D8(0);
  if (v6)
    v7 = &v25;
  else
    v7 = 0;
  pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange((pxrInternal__aapl__pxrReserved__::PcpCache *)a2, a3, 0, &v24);
  v8 = sub_20C215BB8(a2 + 25);
  AllUsingMutedLayer = (uint64_t *)pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingMutedLayer(v8, (unsigned __int8 *)a3);
  if (v6)
  {
    v12 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Did unmute layer @%s@\n", v9, v10, v12);
    v13 = (v23 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v14 = (v23 & 0x80u) == 0 ? v23 : v22;
    std::string::append(&v25, v13, v14);
    if ((char)v23 < 0)
      operator delete(__p);
  }
  if (*AllUsingMutedLayer != AllUsingMutedLayer[1])
  {
    sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v24);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(a1, (pxrInternal__aapl__pxrReserved__::PcpCache *)a2, AllUsingMutedLayer, (uint64_t *)a3, (uint64_t *)&__p, 0, v7);
    v15 = v22;
    if (v22)
    {
      v16 = (unsigned int *)(v22 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  if (v6)
  {
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v25.__r_.__value_.__l.__size_;
    if (size)
    {
      v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v25;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidUnmuteLayer\n%s", v9, v10, v20);
    }
  }
  sub_20C103234(&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_20C229CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20C103234(&a16);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixSublayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t a4)
{
  _BOOL4 v8;
  std::string *v9;
  uint64_t *AllLayerStacksUsingLayer;
  uint64_t (*v11)(uint64_t *);
  const char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  uint64_t Identifier;
  const char *v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  std::string::size_type size;
  std::string *v27;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v31;
  std::string v32;

  memset(&v32, 0, sizeof(v32));
  v8 = sub_20C1FE3D8(0);
  if (v8)
    v9 = &v32;
  else
    v9 = 0;
  pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a3, a4, 0, &v31);
  AllLayerStacksUsingLayer = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)a2, (uint64_t)a3);
  if (v8)
  {
    v11 = sub_20BFD2F78(a3);
    if (v12 & 1 | (unint64_t)v11)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v14);
      v16 = *(char *)(Identifier + 23) >= 0 ? (const char *)Identifier : *(const char **)Identifier;
    }
    else
    {
      v16 = "invalid";
    }
    v17 = *(char *)(a4 + 23) >= 0 ? a4 : *(_QWORD *)a4;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed sublayer @%s@\n", v12, v13, v16, v17);
    v18 = (v30 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v19 = (v30 & 0x80u) == 0 ? v30 : v29;
    std::string::append(&v32, v18, v19);
    if ((char)v30 < 0)
      operator delete(__p);
  }
  sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v31);
  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(a1, a2, AllLayerStacksUsingLayer, (uint64_t *)a4, (uint64_t *)&__p, 0, v9);
  v22 = v29;
  if (v29)
  {
    v23 = (unsigned int *)(v29 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (v8)
  {
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v32.__r_.__value_.__l.__size_;
    if (size)
    {
      v27 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v32;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidMaybeFixSublayer\n%s", v20, v21, v27);
    }
  }
  sub_20C103234(&v31);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_20C229F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20C103234(&a18);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(pxrInternal__aapl__pxrReserved__::PcpCache *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a5@<X8>)
{
  uint64_t (*v10)(uint64_t *);
  char v11;
  uint64_t LayerStackIdentifier;
  uint64_t FileFormatTarget;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  unint64_t *Instance;
  _QWORD *v26;
  _QWORD *v27;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  unsigned int *v29;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v30;
  _QWORD v31[3];
  _BYTE v32[48];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = sub_20BFD2F78(a2);
  if (!(v11 & 1 | (unint64_t)v10))
  {
    *a5 = 0;
    return;
  }
  LayerStackIdentifier = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a1);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v32, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(LayerStackIdentifier + 32));
  *a5 = 0;
  FileFormatTarget = pxrInternal__aapl__pxrReserved__::PcpCache::GetFileFormatTarget(a1);
  pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a3, FileFormatTarget, (uint64_t)v31);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find(a3, (uint64_t)v31, (uint64_t *)&v28);
    v14 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v29;
    if (v29)
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v29) + 14))
        v14 = v28;
      else
        v14 = 0;
    }
    v30 = v14;
    sub_20BF1DD04((uint64_t *)&v30);
    v15 = *a5;
    *a5 = v30;
    v30 = 0;
    sub_20BF1D8F4((int)a5, v15);
    sub_20C103234(&v30);
    v16 = (uint64_t)v29;
    if (!v29)
      goto LABEL_28;
    v17 = v29 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = --v18 == 0;
    }
    while (__stlxr(v18, v17));
    goto LABEL_20;
  }
  if (!a4)
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28);
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(a2, a3, v31, &v30);
    v24 = *a5;
    *a5 = v30;
    v30 = 0;
    sub_20BF1D8F4((int)a5, v24);
    sub_20C103234(&v30);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v26 = sub_20BEC5244((unint64_t *)&v28, 0);
    LOBYTE(v30) = 0;
    v27 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v30);
    if (v27 != v26)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v26, v27);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28);
    goto LABEL_28;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer(a2, a3, (uint64_t)v31, (uint64_t *)&v28);
  v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v29;
  if (v29)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v29) + 14))
      v20 = v28;
    else
      v20 = 0;
  }
  v30 = v20;
  sub_20BF1DD04((uint64_t *)&v30);
  v21 = *a5;
  *a5 = v30;
  v30 = 0;
  sub_20BF1D8F4((int)a5, v21);
  sub_20C103234(&v30);
  v16 = (uint64_t)v29;
  if (v29)
  {
    v22 = v29 + 2;
    do
    {
      v23 = __ldxr(v22);
      v19 = --v23 == 0;
    }
    while (__stlxr(v23, v22));
LABEL_20:
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
LABEL_28:
  sub_20BDE9D48((uint64_t)v31, (_QWORD *)v31[1]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v32);
}

void sub_20C22A268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  va_list va1;
  uint64_t v9;
  va_list va2;
  _QWORD *v11;
  uint64_t v12;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD *);
  v12 = va_arg(va3, _QWORD);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_20BDE9D48((uint64_t)va2, v11);
  sub_20C103234(v2);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, std::string *a7, _BYTE *a8)
{
  uint64_t (*v16)(uint64_t *);
  char v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t (*v20)(uint64_t *);
  const char *v21;
  char *v22;
  const char *v23;
  uint64_t *v24;
  const char *v25;
  const std::string::value_type *p_p;
  std::string::size_type v27;
  uint64_t result;
  char v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  int *v36;
  pxrInternal__aapl__pxrReserved__::SdfPath *v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  const char *v39;
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  uint64_t Identifier;
  uint64_t v43;
  const char *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  const char *Text;
  const char *v53;
  char *v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  uint64_t *v57;
  void *v58;
  std::string::size_type v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  std::string::size_type v64;
  unsigned __int8 v65;

  v16 = sub_20BFD2F78(a5);
  v18 = v17 & 1 | (unint64_t)v16;
  if (v18)
  {
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
    LOBYTE(v18) = !pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(v19);
  }
  *a8 = v18;
  if (a7)
  {
    v20 = sub_20BFD2F78(a5);
    if (v21 & 1 | (unint64_t)v20)
    {
      if (*a8)
        v23 = "significant";
      else
        v23 = "insignificant";
    }
    else
    {
      v23 = "invalid";
    }
    if (*((char *)a4 + 23) >= 0)
      v24 = a4;
    else
      v24 = (uint64_t *)*a4;
    v25 = "removed";
    if (!a6)
      v25 = "added";
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s sublayer @%s@ %s\n", v21, v22, v23, v24, v25);
    if ((v65 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v65 & 0x80u) == 0)
      v27 = v65;
    else
      v27 = v64;
    std::string::append(a7, p_p, v27);
    if ((char)v65 < 0)
      operator delete(__p);
  }
  result = (uint64_t)sub_20BFD2F78(a5);
  if (v29 & 1 | (unint64_t)result)
  {
    if (*a8 || (result = pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a2), (result & 1) == 0))
    {
      v30 = (void *)a5[1];
      if (v30)
      {
        if (*(_BYTE *)(sub_20BEB47BC(a5 + 1) + 14))
          v30 = (void *)*a5;
        else
          v30 = 0;
      }
      v57 = a5;
      __p = v30;
      sub_20BF1DD04((uint64_t *)&__p);
      sub_20C22CB74((uint64_t)(a1 + 9), (unint64_t *)&__p, &__p);
      result = (uint64_t)sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
      v33 = a3[1];
      v61 = *a3;
      v62 = v33;
      if (v61 != v33)
      {
        v34 = 0;
        do
        {
          v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C22C1A0(&v61, v31, v32);
          v36 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v35);
          pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v35, v36, 63, 1, 1, 1, (uint64_t *)&__p);
          v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p;
          v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
          while (v37 != v38)
          {
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v37))
              goto LABEL_69;
            if (!((a7 == 0) | v34 & 1))
            {
              if (*a8)
                v39 = "Resync";
              else
                v39 = "Spec changes";
              LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
              v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
              Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v41);
              if (*(char *)(Identifier + 23) >= 0)
                v43 = Identifier;
              else
                v43 = *(_QWORD *)Identifier;
              if (*a8)
                v44 = "significant";
              else
                v44 = "insignificant";
              v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v57);
              v46 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v45);
              if (*(char *)(v46 + 23) >= 0)
                v49 = v46;
              else
                v49 = *(_QWORD *)v46;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s following in @%s@ due to %s reload in sublayer @%s@:\n", v47, v48, v39, v43, v44, v49);
              if ((v60 & 0x80u) == 0)
                v50 = (const std::string::value_type *)&v58;
              else
                v50 = (const std::string::value_type *)v58;
              if ((v60 & 0x80u) == 0)
                v51 = v60;
              else
                v51 = v59;
              std::string::append(a7, v50, v51);
              if ((char)v60 < 0)
                operator delete(v58);
LABEL_57:
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v37);
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v53, v54, Text);
              if ((v60 & 0x80u) == 0)
                v55 = (const std::string::value_type *)&v58;
              else
                v55 = (const std::string::value_type *)v58;
              if ((v60 & 0x80u) == 0)
                v56 = v60;
              else
                v56 = v59;
              std::string::append(a7, v55, v56);
              if ((char)v60 < 0)
                operator delete(v58);
              goto LABEL_65;
            }
            if (a7)
              goto LABEL_57;
LABEL_65:
            if (*a8)
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, v37);
            else
              pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSpecStackInternal(a1, a2, v37);
            v34 = 1;
LABEL_69:
            v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v37 + 72);
          }
          v58 = &__p;
          sub_20C2219C0((void ***)&v58);
          result = (uint64_t)sub_20C22C278(&v61);
        }
        while (v61 != v62);
      }
    }
  }
  return result;
}

void sub_20C22A6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *this, pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t *);
  char v11;
  _BOOL4 v12;
  unint64_t *Instance;
  char *v14;
  const char *v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  _BOOL4 IsEmpty;
  const char *v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  uint64_t Identifier;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v26;
  uint64_t *v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  const char *Text;
  const char *v33;
  char *v34;
  uint64_t v35;
  const std::string::value_type *v36;
  _QWORD *v37;
  _BOOL4 v38;
  _QWORD *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  const char *v44;
  char *v45;
  const std::string::value_type *v46;
  _QWORD *v47;
  pxrInternal__aapl__pxrReserved__::SdfPath *v48;
  pxrInternal__aapl__pxrReserved__::SdfPath *v49;
  const char *v50;
  const char *v51;
  char *v52;
  const std::string::value_type *v53;
  void *v54;
  std::string::size_type size;
  std::string *v56;
  uint64_t result;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  void *v61[2];
  unsigned __int8 v62;
  void *__p;
  _QWORD *v64;
  uint64_t v65;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v66;
  unint64_t v67;
  std::string v68;
  uint64_t v69;
  uint64_t v70;

  pxrInternal__aapl__pxrReserved__::PcpCache::FindLayerStack(this, a3, &v69);
  v10 = sub_20C20BDB4(&v69);
  if (v11 & 1 | (unint64_t)v10)
  {
    memset(&v68, 0, sizeof(v68));
    v12 = sub_20C1FE3D8(0);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v67);
    v64 = 0;
    v65 = 0;
    __p = &v64;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(a4, a5, &__p, &v66);
    sub_20BDE9D48((uint64_t)&__p, v64);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v14 = (char *)sub_20BEC5244(&v67, 0);
    LOBYTE(__p) = 0;
    v16 = (char *)sub_20BEB5B80(Instance + 19, &__p);
    if (v16 != v14)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v14, v16);
    if (v12)
    {
      if (*(char *)(a5 + 23) < 0)
        a5 = *(_QWORD *)a5;
      if (v66)
      {
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v66);
        IsEmpty = pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(v17);
        v19 = "significant";
        if (IsEmpty)
          v19 = "insignificant";
      }
      else
      {
        v19 = "invalid";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Asset @%s@ %s\n", v15, v16, a5, v19);
      if (v65 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v65 >= 0)
        v21 = HIBYTE(v65);
      else
        v21 = (std::string::size_type)v64;
      std::string::append(&v68, p_p, v21);
      if (SHIBYTE(v65) < 0)
        operator delete(__p);
    }
    if (v66)
    {
      sub_20C22CB74((uint64_t)(a1 + 9), (unint64_t *)&v66, &v66);
      if (v12)
      {
        LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(this);
        v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
        Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v23);
        v25 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(_QWORD *)Identifier;
        v26 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(&v69);
        v27 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v26);
        v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v27);
        v29 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v28);
        v30 = *(char *)(v29 + 23);
        v31 = *(_QWORD *)v29;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)a3 + 80));
        v35 = v30 >= 0 ? v29 : v31;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Resync following in @%s@ significantly due to loading asset used by @%s@<%s>:\n", v33, v34, v25, v35, Text);
        v36 = v65 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
        v37 = v65 >= 0 ? (_QWORD *)HIBYTE(v65) : v64;
        std::string::append(&v68, v36, (std::string::size_type)v37);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this, (uint64_t *)&__p);
      v38 = sub_20BEB560C((uint64_t)&v69, (uint64_t)&__p);
      v39 = v64;
      if (v64)
      {
        v40 = (unsigned int *)(v64 + 1);
        do
        {
          v41 = __ldxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
          (*(void (**)(_QWORD *))(*v39 + 8))(v39);
      }
      if (v38)
      {
        if (v12)
        {
          v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)a3 + 80));
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v44, v45, v43);
          v46 = v65 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
          v47 = v65 >= 0 ? (_QWORD *)HIBYTE(v65) : v64;
          std::string::append(&v68, v46, (std::string::size_type)v47);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
        }
        pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, this, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)a3 + 80));
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(this, &v69, (int *)a3 + 20, 63, 1, 1, 1, (uint64_t *)&__p);
      v48 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p;
      v49 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
      if (__p != v64)
      {
        do
        {
          if (v12)
          {
            v50 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v48);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v51, v52, v50);
            v53 = (v62 & 0x80u) == 0 ? (const std::string::value_type *)v61 : (const std::string::value_type *)v61[0];
            v54 = (v62 & 0x80u) == 0 ? (void *)v62 : v61[1];
            std::string::append(&v68, v53, (std::string::size_type)v54);
            if ((char)v62 < 0)
              operator delete(v61[0]);
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, this, v48);
          v48 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v48 + 72);
        }
        while (v48 != v49);
      }
      v61[0] = &__p;
      sub_20C2219C0((void ***)v61);
    }
    if (v12)
    {
      size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v68.__r_.__value_.__l.__size_;
      if (size)
      {
        v56 = (std::string *)v68.__r_.__value_.__r.__words[0];
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v68;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidMaybeFixAsset\n%s", v15, v16, v56);
      }
    }
    sub_20C103234(&v66);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v67);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
  }
  result = v70;
  if (v70)
  {
    v58 = (unsigned int *)(v70 + 8);
    do
    {
      v59 = __ldxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C22AB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  if (a23 < 0)
    operator delete(__p);
  sub_20C103234(&a24);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a25);
  if (a33 < 0)
    operator delete(a28);
  v35 = *(unsigned int **)(v33 - 72);
  if (v35)
  {
    v36 = v35 + 2;
    do
    {
      v37 = __ldxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpChanges::_GetCacheChanges(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  const pxrInternal__aapl__pxrReserved__::PcpCache *v3;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v4;

  v3 = a2;
  v4 = &v3;
  return sub_20C22DB54(this + 3, (unint64_t *)&v3, (uint64_t)&unk_20CAC184C, (uint64_t **)&v4) + 5;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecs(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  int HasSpec;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  const char *v21;
  uint64_t **v22;
  int v23;
  const char *v24;
  char *NodeProvidingSpec;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  uint64_t *v30[2];
  const pxrInternal__aapl__pxrReserved__::PcpCache *v31;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
    return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(a1, a2, this);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(a5) & 1) == 0)
  {
    NodeProvidingSpec = "pcp/changes.cpp";
    v26 = "DidChangeSpecs";
    v27 = 1590;
    v28 = "void pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecs(const PcpCache *, const SdfPath &, const Sdf"
          "LayerHandle &, const SdfPath &)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&NodeProvidingSpec, "changedPath.IsPrimOrPrimVariantSelectionPath()", 0);
  }
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a4);
  HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v10, a5);
  PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a2, (unsigned int *)this);
  if (PrimIndex
    && (v13 = (uint64_t *)PrimIndex, pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasSpecs(PrimIndex)))
  {
    if ((HasSpec & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v13, 6u, (uint64_t *)&NodeProvidingSpec);
      v15 = (uint64_t *)NodeProvidingSpec;
      v14 = (uint64_t *)v26;
      v16 = (uint64_t *)v27;
      if (NodeProvidingSpec == (char *)v27 && v26 == v28)
        return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
      v23 = HasSpec;
      v24 = v28 - 1;
      while (1)
      {
        v17 = v14;
        v30[0] = v15;
        v30[1] = v14;
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v30);
        Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v30);
        if (pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path))
          break;
        v14 = (uint64_t *)((char *)v17 + 1);
        if (v15 == v16 && v24 == (const char *)v17)
          return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
      }
      HasSpec = v23;
    }
    NodeProvidingSpec = (char *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(v13, a4, a5);
    v26 = v21;
    if (NodeProvidingSpec && v21 != (const char *)-1)
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v13)
        || !sub_20C22AEF0((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&NodeProvidingSpec))
      {
        return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(a1, a2, this);
      }
      return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
    }
    if (HasSpec)
    {
      v31 = a2;
      v30[0] = (uint64_t *)&v31;
      v22 = sub_20C22DB54(a1 + 3, (unint64_t *)&v31, (uint64_t)&unk_20CAC184C, v30);
      return sub_20C0A7BE0(v22 + 11, this, this);
    }
  }
  else if (HasSpec)
  {
    return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
  }
  return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(a1, a2, this);
}

uint64_t sub_20C22AEF0(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *LayerStack;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t ParentNode;
  uint64_t v8;

  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(a1)
    && pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1))
  {
    ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
    v8 = v2;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode))
      return 0;
    while ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode) & 1) != 0)
    {
      ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      v8 = v3;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode))
        return 0;
    }
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  LODWORD(LayerStack) = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
  return LayerStack ^ pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t **v4;
  const pxrInternal__aapl__pxrReserved__::PcpCache *v6;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v7;

  v6 = a2;
  v7 = &v6;
  v4 = sub_20C22DB54(this + 3, (unint64_t *)&v6, (uint64_t)&unk_20CAC184C, (uint64_t **)&v7);
  return sub_20C0A7BE0(v4 + 8, a3, a3);
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeTargets(uint64_t a1, unint64_t a2, uint64_t *a3, int a4)
{
  uint64_t **v6;
  uint64_t **result;
  unint64_t v8;
  unint64_t *v9;

  v8 = a2;
  v9 = &v8;
  v6 = sub_20C22DB54((uint64_t **)(a1 + 24), &v8, (uint64_t)&unk_20CAC184C, (uint64_t **)&v9);
  v9 = (unint64_t *)a3;
  result = sub_20C22D374(v6 + 14, (unint64_t *)a3, (uint64_t)&unk_20CAC184C, (_DWORD **)&v9);
  *((_DWORD *)result + 9) |= a4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangePaths(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t Identifier;
  uint64_t v11;
  const char *Text;
  const char *v13;
  const char *v14;
  char *v15;
  uint64_t **v16;
  const pxrInternal__aapl__pxrReserved__::PcpCache *v18;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v19;

  if (sub_20C1FE3D8(0))
  {
    LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
    if (*(char *)(Identifier + 23) >= 0)
      v11 = Identifier;
    else
      v11 = *(_QWORD *)Identifier;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a4);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidChangePaths: @%s@<%s> to <%s>\n", v14, v15, v11, Text, v13);
  }
  v18 = a2;
  v19 = &v18;
  v16 = sub_20C22DB54(this + 3, (unint64_t *)&v18, (uint64_t)&unk_20CAC184C, (uint64_t **)&v19);
  return sub_20C22B148((uint64_t *)v16 + 17, a3, a4);
}

uint64_t sub_20C22B148(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_20BDDF694();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)sub_20BDEA2F0(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = &v15[16 * v11];
    v20 = &v15[16 * v14];
    sub_20C028354(v18, a2, a3);
    v19 = v18 + 16;
    sub_20C22D4AC(a1, &v17);
    v10 = a1[1];
    sub_20C22D648(&v17);
  }
  else
  {
    sub_20C028354(*(_DWORD **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_20C22B244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C22D648((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::DidDestroyCache(pxrInternal__aapl__pxrReserved__::PcpChanges *this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  const pxrInternal__aapl__pxrReserved__::PcpCache *v5;

  v5 = a2;
  sub_20C22D6BC((uint64_t)this + 24, (unint64_t *)&v5);
  v5 = a2;
  return sub_20C22D740((uint64_t)this + 48, (unint64_t *)&v5);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeAssetResolver(pxrInternal__aapl__pxrReserved__::PcpChanges *this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  const char *v4;
  char *v5;
  _BOOL4 v6;
  void **p_p;
  uint64_t v8;
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t Identifier;
  const char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[3];
  void *__p;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::PcpCache *v20;
  _QWORD v21[2];

  v20 = a2;
  if (sub_20C1FE3D8(0))
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidChangeAssetResolver\n", v4, v5);
  __p = 0;
  v18 = 0;
  v19 = 0;
  v6 = sub_20C1FE3D8(0);
  p_p = &__p;
  if (!v6)
    p_p = 0;
  v16[0] = this;
  v16[1] = &v20;
  v16[2] = p_p;
  v21[0] = v16;
  v21[1] = sub_20C22D7E0;
  pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachLayerStack((uint64_t)a2, (uint64_t)v21);
  if (v6)
  {
    v8 = HIBYTE(v19);
    if (v19 < 0)
      v8 = v18;
    if (v8)
    {
      LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v20);
      v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v10);
      if (*(char *)(Identifier + 23) >= 0)
        v14 = Identifier;
      else
        v14 = *(_QWORD *)Identifier;
      v15 = &__p;
      if (v19 < 0)
        v15 = __p;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"   Resync following in @%s@ significant due to layer resolved path change:\n%s", v12, v13, v14, v15);
    }
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
}

void sub_20C22B3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::Swap(pxrInternal__aapl__pxrReserved__::PcpChanges *this, pxrInternal__aapl__pxrReserved__::PcpChanges *a2)
{
  sub_20BF07C64((uint64_t *)this, (uint64_t)a2);
  sub_20BF07C64((uint64_t *)this + 3, (uint64_t)a2 + 24);
  sub_20BF07C64((uint64_t *)this + 6, (uint64_t)a2 + 48);
  sub_20BF07C64((uint64_t *)this + 9, (uint64_t)a2 + 72);
  return sub_20BF07C64((uint64_t *)this + 12, (uint64_t)a2 + 96);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpChanges::IsEmpty(pxrInternal__aapl__pxrReserved__::PcpChanges *this)
{
  return !*((_QWORD *)this + 2) && !*((_QWORD *)this + 5) && *((_QWORD *)this + 8) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::GetCacheChanges(pxrInternal__aapl__pxrReserved__::PcpChanges *this, uint64_t a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(this, a2, a3);
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::GetLifeboat(pxrInternal__aapl__pxrReserved__::PcpChanges *this)
{
  return (uint64_t)this + 72;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpChanges::Apply(pxrInternal__aapl__pxrReserved__::PcpChanges *this, uint64_t a2, char *a3)
{
  _QWORD *result;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  pxrInternal__aapl__pxrReserved__::PcpLifeboat *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  pxrInternal__aapl__pxrReserved__::PcpChanges *v21;
  pxrInternal__aapl__pxrReserved__::PcpChanges *i;

  result = pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(this, a2, a3);
  v21 = *(pxrInternal__aapl__pxrReserved__::PcpChanges **)this;
  for (i = (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 8); v21 != i; result = sub_20C22B5F4(&v21))
  {
    v7 = sub_20C22B57C(&v21, v5, v6);
    v8 = sub_20C20BDB4((_QWORD *)(*v7 + 32));
    if (v9 & 1 | (unint64_t)v8)
    {
      v11 = sub_20C22B57C(&v21, v9, v10);
      v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0((uint64_t *)(*v11 + 32));
      v15 = sub_20C22B57C(&v21, v13, v14);
      pxrInternal__aapl__pxrReserved__::PcpLayerStack::Apply(v12, (unsigned __int8 *)(*v15 + 48), (char *)this + 72);
    }
  }
  v21 = (pxrInternal__aapl__pxrReserved__::PcpChanges *)*((_QWORD *)this + 3);
  i = (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 32);
  if (v21 != (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 32))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 72);
    do
    {
      v17 = *(_QWORD *)(*sub_20C22B698(&v21, v5, v6) + 32);
      v20 = sub_20C22B698(&v21, v18, v19);
      pxrInternal__aapl__pxrReserved__::PcpCache::Apply(v17, *v20 + 40, v16);
      result = sub_20C22B710(&v21);
    }
    while (v21 != i);
  }
  return result;
}

_QWORD *sub_20C22B57C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::TfWe"
            "akPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpLayerStackChang"
            "es>>::operator->() [T = const std::map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrRes"
            "erved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpLayerStackChanges>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C22B5F4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpL"
            "ayerStackChanges>>::operator++() [T = const std::map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal"
            "__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpLayerStackChanges>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

_QWORD *sub_20C22B698(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::PcpC"
            "ache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator->() [T = const std::map<pxrInternal__a"
            "apl__pxrReserved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C22B710(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator++() [T = const std::map<"
            "pxrInternal__aapl__pxrReserved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::_GetLayerStackChanges(uint64_t **a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = a2;
  return sub_20C22D860(a1, (uint64_t)a2, (uint64_t)&unk_20CAC184C, &v3) + 6;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(_QWORD *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::PcpCache *v4;
  uint64_t v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *i;
  unint64_t *v17;

  v3 = (uint64_t)this;
  v15 = (_QWORD *)this[6];
  for (i = this + 7; v15 != i; this = sub_20C22BBDC(&v15))
  {
    v4 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*sub_20C22BB64(&v15, a2, a3) + 32);
    v17 = (unint64_t *)(*sub_20C22BB64(&v15, v5, v6) + 32);
    v7 = sub_20C22DB54((uint64_t **)(v3 + 24), v17, (uint64_t)&unk_20CAC184C, (uint64_t **)&v17) + 5;
    v10 = sub_20C22BB64(&v15, v8, v9);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_OptimizePathChanges((uint64_t)v10, v4, (uint64_t)v7, *v10 + 40);
  }
  v11 = *(_QWORD **)(v3 + 24);
  v12 = v3 + 32;
  v15 = v11;
  i = (_QWORD *)(v3 + 32);
  while (v11 != (_QWORD *)v12)
  {
    v13 = sub_20C22BE78(&v15, a2, a3);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize((uint64_t)v13, *v13 + 40, v14);
    this = sub_20C22BEF0(&v15);
    v11 = v15;
    v12 = (uint64_t)i;
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_OptimizePathChanges(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t a3, uint64_t a4)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t *v8;
  uint64_t *v9;
  const char *v10;
  char *v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *LayerStackIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  uint64_t Identifier;
  uint64_t v17;
  const char *Text;
  const char *v19;
  const char *v20;
  char *v21;
  const std::string::value_type *v22;
  void *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  std::string::size_type size;
  std::string *v28;
  void *__p[2];
  unsigned __int8 v30;
  std::string v31;
  uint64_t *v32;
  _QWORD *v33[2];

  sub_20C0E4308((uint64_t *)&v32, a4);
  v6 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 96);
  for (i = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 104);
        v6 != i;
        v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 16))
  {
    v8 = sub_20BFE4AF0((uint64_t)&v32, v6);
    v9 = v8;
    if (v33 != (_QWORD **)v8 && *(uint64_t *)((char *)v8 + 36) == *((_QWORD *)v6 + 1))
    {
      sub_20BE10B80(&v32, v8);
      sub_20BFE4CA8((_DWORD *)v9 + 7);
      operator delete(v9);
    }
  }
  memset(&v31, 0, sizeof(v31));
  v12 = sub_20C1FE3D8(0);
  v13 = v32;
  if (v32 != (uint64_t *)v33)
  {
    do
    {
      if (v12)
      {
        LayerStackIdentifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(LayerStackIdentifier);
        Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
        v17 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(_QWORD *)Identifier;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28));
        v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Sd only path change @%s@<%s> to <%s>\n", v20, v21, v17, Text, v19);
        v22 = (v30 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        v23 = (v30 & 0x80u) == 0 ? (void *)v30 : __p[1];
        std::string::append(&v31, v22, (std::string::size_type)v23);
        if ((char)v30 < 0)
          operator delete(__p[0]);
      }
      sub_20C0A7BE0((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (_DWORD *)v13 + 7);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v13 + 9))
        sub_20C0A7BE0((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36), (_DWORD *)v13 + 9);
      v24 = (uint64_t *)v13[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v13[2];
          v26 = *v25 == (_QWORD)v13;
          v13 = v25;
        }
        while (!v26);
      }
      v13 = v25;
    }
    while (v25 != (uint64_t *)v33);
  }
  if (v12)
  {
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__r_.__value_.__l.__size_;
    if (size)
    {
      v28 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v31;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::_Optimize:\n%s", v10, v11, v28);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  sub_20BFE4CE8((uint64_t)&v32, v33[0]);
}

void sub_20C22BB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,_QWORD *a25)
{
  if (a23 < 0)
    operator delete(__p);
  sub_20BFE4CE8((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C22BB64(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::PcpCache *"
            ", std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator"
            "->() [T = std::map<pxrInternal__aapl__pxrReserved__::PcpCache *, std::map<pxrInternal__aapl__pxrReserved__::"
            "SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C22BBDC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::PcpCache *, std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPat"
            "h>>>::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::PcpCache *, std::map<pxrInternal__aapl__p"
            "xrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t *v11;
  uint64_t *v12;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  char *v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  uint64_t v17;
  char *v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  uint64_t v21;
  char *v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  uint64_t **v24;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v25;
  uint64_t *v26;
  uint64_t *v27;

  v4 = (uint64_t *)(a2 + 8);
  for (i = *(uint64_t **)a2; i != v4; sub_20C137C48((uint64_t **)a2, v8, i))
  {
    v6 = (uint64_t *)i[1];
    v7 = i;
    if (v6)
    {
      do
      {
        v8 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v8 = (uint64_t *)v7[2];
        v9 = *v8 == (_QWORD)v7;
        v7 = v8;
      }
      while (!v9);
    }
    if (v8 == v4)
    {
LABEL_19:
      sub_20C137C48((uint64_t **)a2, v8, v4);
      break;
    }
    v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 28);
    i = v8;
    while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 28), v10))
    {
      v11 = (uint64_t *)i[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)i[2];
          v9 = *v12 == (_QWORD)i;
          i = v12;
        }
        while (!v9);
      }
      i = v12;
      if (v12 == v4)
        goto LABEL_19;
    }
  }
  v26 = *(uint64_t **)a2;
  v27 = v4;
  while (v26 != v27)
  {
    v13 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&v26, a2, a3);
    pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(a2 + 48, v13);
    v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&v26, v14, v15);
    pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(a2 + 24, v16);
    v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&v26, v17, v18);
    pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(a2 + 128, v19);
    sub_20C0FE970(&v26);
  }
  v26 = *(uint64_t **)(a2 + 48);
  v27 = (uint64_t *)(a2 + 56);
  while (v26 != v27)
  {
    v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&v26, a2, a3);
    sub_20C137B08((uint64_t **)(a2 + 24), v20);
    v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&v26, v21, v22);
    sub_20C137B08((uint64_t **)(a2 + 128), v23);
    sub_20C0FE970(&v26);
  }
  v26 = *(uint64_t **)(a2 + 24);
  v27 = (uint64_t *)(a2 + 32);
  if (v26 != (uint64_t *)(a2 + 32))
  {
    v24 = (uint64_t **)(a2 + 128);
    do
    {
      v25 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&v26, a2, a3);
      sub_20C137B08(v24, v25);
      sub_20C0FE970(&v26);
    }
    while (v26 != v27);
  }
}

_QWORD *sub_20C22BE78(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::PcpCache *"
            ", pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator->() [T = std::map<pxrInternal__aapl__pxrRese"
            "rved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C22BEF0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator++() [T = std::map<pxrInternal_"
            "_aapl__pxrReserved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void sub_20C22BF94(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 << 6;
    if (v6 << 6 >= a2)
    {
      *(_QWORD *)(a1 + 8) = a2;
    }
    else
    {
      v14 = 0;
      v15 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        sub_20BDDF694();
      v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v7 <= 0x3FFFFFFFFFFFFFFELL)
        v9 = v8;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      sub_20BE6B5DC(&v14, v9);
      v11 = v14;
      v12 = *((_QWORD *)&v15 + 1);
      v14 = *(char **)a1;
      v10 = v14;
      v13 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = v12;
      v15 = v13;
      if (v10)
        operator delete(v10);
    }
    if (*a3)
    {
      v14 = *(char **)a1;
      LODWORD(v15) = 0;
      sub_20BE6BA08(&v14, a2);
    }
    else
    {
      v14 = *(char **)a1;
      LODWORD(v15) = 0;
      sub_20BE6BAB8((uint64_t)&v14, a2);
    }
  }
}

void sub_20C22C08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C22C0A4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v11;

  sub_20C22C9C4(a1 + 80);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  v11 = (void **)(a1 + 32);
  sub_20BDE9EB0(&v11);
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_20C22C144(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C22DDA0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20C22C1A0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator*() [T = const std::vector<pxrInternal_"
            "_aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C22C214()
{
  JUMPOUT(0x20C22C1C4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSpecStackInternal(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t **v4;
  const pxrInternal__aapl__pxrReserved__::PcpCache *v6;
  const pxrInternal__aapl__pxrReserved__::PcpCache **v7;

  v6 = a2;
  v7 = &v6;
  v4 = sub_20C22DB54(this + 3, (unint64_t *)&v6, (uint64_t)&unk_20CAC184C, (uint64_t **)&v7);
  return sub_20C0A7BE0(v4 + 21, a3, a3);
}

_QWORD *sub_20C22C278(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator++() [T = const std::vect"
            "or<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_20C22C2F4(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C22C3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C22C3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  char v9;

  if (a2 != a3)
  {
    sub_20C22DEBC((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_DWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 18;
        sub_20C221A44(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_20C22C448(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_20C22DF64(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unsigned int *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

uint64_t sub_20C22C4EC(_QWORD **a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C22C5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C22C5B4(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  int *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  const char *Text;
  const char *v10;
  char *v11;
  void **v12;
  std::string::size_type v13;
  void *__p[2];
  unsigned __int8 v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;

  v4 = *(uint64_t ***)a1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v5, a2, v6, 39, 1, 0, 1, (uint64_t *)&v16);
  v7 = v16;
  for (i = v17; v7 != i; v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 72))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v7);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v10, v11, Text);
      if ((v15 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v13 = v15;
      else
        v13 = (std::string::size_type)__p[1];
      std::string::append(*(std::string **)(a1 + 16), (const std::string::value_type *)v12, v13);
      if ((char)v15 < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v4, *(const pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 8), v7);
  }
  __p[0] = &v16;
  sub_20C2219C0((void ***)__p);
}

void sub_20C22C6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  __p = &a17;
  sub_20C2219C0((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C22C6EC(int64x2_t *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * a1[2].i64[0]
                        + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_20CAB4590);
  return sub_20C22E278((uint64_t)a1, 1);
}

_QWORD *sub_20C22C768(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *result;
  void **v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer(**(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  if (*result != result[1])
  {
    v7 = **(void ****)(a1 + 16);
    sub_20BFD6E54(&v22, a2);
    sub_20BFD6EA4(&v23, a2 + 1);
    v24 = a3;
    v9 = (char *)v7[1];
    v8 = (char *)v7[2];
    if (v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v7) >> 4;
      if ((unint64_t)(v11 + 1) >> 60)
        sub_20BDDF694();
      v12 = v8 - (_BYTE *)*v7;
      v13 = v12 >> 3;
      if (v12 >> 3 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        if (v14 >> 60)
          sub_20BDDF5B4();
        v15 = (char *)operator new(16 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[16 * v11];
      v17 = &v15[16 * v14];
      sub_20BFD38A4(v16, &v22);
      sub_20BFD38DC((_DWORD *)v16 + 1, &v23);
      *((_QWORD *)v16 + 1) = v24;
      v10 = v16 + 16;
      v19 = (char *)*v7;
      v18 = (char *)v7[1];
      if (v18 == *v7)
      {
        *v7 = v16;
        v7[1] = v10;
        v7[2] = v17;
      }
      else
      {
        v20 = 0;
        do
        {
          sub_20BFD38A4(&v16[v20 - 16], &v18[v20 - 16]);
          sub_20BFD38DC(&v16[v20 - 12], &v18[v20 - 12]);
          *(_QWORD *)&v16[v20 - 8] = *(_QWORD *)&v18[v20 - 8];
          v20 -= 16;
        }
        while (&v18[v20] != v19);
        v18 = (char *)*v7;
        v21 = (char *)v7[1];
        *v7 = &v16[v20];
        v7[1] = v10;
        v7[2] = v17;
        while (v21 != v18)
        {
          v21 -= 16;
          sub_20C22C998(v21);
        }
      }
      if (v18)
        operator delete(v18);
    }
    else
    {
      sub_20BFD38A4(v7[1], &v22);
      sub_20BFD38DC((_DWORD *)v9 + 1, &v23);
      *((_QWORD *)v9 + 1) = v24;
      v10 = v9 + 16;
    }
    v7[1] = v10;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    return sub_20BFD265C(&v22);
  }
  return result;
}

void sub_20C22C958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C22C96C(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C22C96C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_DWORD *sub_20C22C998(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C22C9C4(uint64_t a1)
{
  void *v2;

  sub_20C22C9FC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C22C9FC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C22CA38((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C22CA38(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11;

  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 80);
  sub_20BF49F14((_QWORD ***)(a1 + 96), 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  v11 = (void **)(a1 + 32);
  sub_20BDE9EB0(&v11);
  v3 = *(unsigned int **)(a1 + 24);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v8 = (unsigned int *)(result + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C22CAE4(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    sub_20C22CAE4(a1, *a2);
    sub_20C22CAE4(a1, a2[1]);
    sub_20C103234(a2 + 4);
    operator delete(a2);
  }
}

void sub_20C22CB2C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    sub_20C22CB2C(a1, *a2);
    sub_20C22CB2C(a1, a2[1]);
    sub_20C2012CC(a2 + 4);
    operator delete(a2);
  }
}

uint64_t *sub_20C22CB74(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = v4[4];
        if (v6 >= v8)
          break;
        v4 = (uint64_t *)*v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = (uint64_t *)v7[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_20C22CC34(a1, a3, (uint64_t)v10);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C22CC9C((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C22CC34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = *a2;
  result = sub_20BF1DD04(v6 + 4);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C22CC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C22CC9C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C22CC9C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;

  v2 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C103234(v2 + 4);
    operator delete(v2);
  }
}

uint64_t *sub_20C22CCE0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = v4[4];
        if (v6 >= v8)
          break;
        v4 = (uint64_t *)*v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = (uint64_t *)v7[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_20C22CDA0(a1, a3, (uint64_t)v10);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C22CE08((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C22CDA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = *a2;
  result = sub_20BF1DD04(v6 + 4);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C22CDF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C22CE08(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C22CE08(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v2;

  v2 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2012CC(v2 + 4);
    operator delete(v2);
  }
}

void sub_20C22CE4C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C22CE4C(a1, *a2);
    sub_20C22CE4C(a1, a2[1]);
    sub_20C22CE94((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20C22CE94(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 184));
  sub_20BF49F14((_QWORD ***)(a1 + 168), 0);
  sub_20BFD7C28(a1 + 144, *(_QWORD **)(a1 + 152));
  v7 = (void **)(a1 + 120);
  sub_20BFD6F90(&v7);
  sub_20BFE4CE8(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_20BFE4CE8(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_20BFE4CE8(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_20BFE4CE8(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20C22CF48(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C22CF48(a1, *a2);
    sub_20C22CF48(a1, a2[1]);
    sub_20C22CF90((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C22CF90(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  v2 = a1 + 8;
  sub_20BFD7C28(a1 + 136, *(_QWORD **)(a1 + 144));
  v3 = (void **)(a1 + 104);
  sub_20C22D004(&v3);
  sub_20C22D114(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_20BFD7C28(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_20BFD7C28(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_20BFD7C28(v2, *(_QWORD **)(a1 + 16));
}

void sub_20C22D004(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        sub_20C22D088((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C22D088(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  sub_20BFD265C(a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

void sub_20C22D0C8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C22D0C8(a1, *a2);
    sub_20C22D0C8(a1, a2[1]);
    sub_20BFE4CE8((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_20C22D114(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C22D114(a1, *a2);
    sub_20C22D114(a1, a2[1]);
    sub_20C22D15C((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

_DWORD *sub_20C22D15C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_QWORD *sub_20C22D188(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = sub_20C22D20C((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C22D1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BEB4844(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C22D20C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *v4 = *a2;
      v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      a2 += 2;
      v4 += 2;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  sub_20C22D2A0((uint64_t)v9);
  return v4;
}

uint64_t sub_20C22D2A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF43244((_QWORD **)a1);
  return a1;
}

uint64_t *sub_20C22D2D4(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;

  v6 = (uint64_t **)sub_20BFF2AB0((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x38uLL);
    v7 = v9;
    v10 = (*a4)[1];
    v9[4] = **a4;
    v9[5] = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_DWORD *)v9 + 12) = 0;
    sub_20BDDE1B4(a1, v14, v8, v9);
  }
  return v7;
}

uint64_t **sub_20C22D374(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _DWORD *v13;
  _QWORD v15[2];
  char v16;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *(uint64_t *)((char *)v6 + 28);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x28uLL);
    v15[1] = v7;
    v13 = *a4;
    sub_20BFD6E54((_DWORD *)v12 + 7, v13);
    sub_20BFD6EA4((_DWORD *)v12 + 8, v13 + 1);
    *((_DWORD *)v12 + 9) = 0;
    v16 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v9, v8, v12);
    v15[0] = 0;
    sub_20C22D468((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_20C22D468(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C22D15C(v2 + 7);
    operator delete(v2);
  }
}

uint64_t sub_20C22D4AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C22D520((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C22D520(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 4;
      sub_20C0308C4((_DWORD *)(v7 - 16), v9);
      v7 = *((_QWORD *)&v15 + 1) - 16;
      *((_QWORD *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C22D5C4((uint64_t)v12);
  return v10;
}

uint64_t sub_20C22D5C4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C22D5F8((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C22D5F8(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C22D088(v3, v1);
      v1 += 4;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C22D648(void **a1)
{
  sub_20C22D678(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C22D678(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 16;
      result = sub_20C22D088(v4, (_DWORD *)(v1 - 16));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C22D6BC(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_20BE10B80((uint64_t **)a1, v4);
  sub_20C22CF90((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_20C22D740(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = (uint64_t)v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_QWORD *)(v4 + 32))
    return 0;
  sub_20C22D7A4((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_20C22D7A4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_20BE10B80(a1, (uint64_t *)a2);
  sub_20BFE4CE8(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

void sub_20C22D7E0(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  int v5;

  v4 = *(uint64_t ***)a1;
  v5 = pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(a2);
  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(v4, **(pxrInternal__aapl__pxrReserved__::PcpCache ***)(a1 + 8), a2, v5, *(std::string **)(a1 + 16));
  if (v5)
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(v4, **(_QWORD **)(a1 + 8), a2, 1, 0, 1);
}

uint64_t *sub_20C22D860(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BFF2AB0((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C22D908((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C22DB10((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C22D908@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0xE8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C22D970(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C22D958(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C22DB10(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C22D970(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C22D9D0((uint64_t)(a1 + 2));
  return a1;
}

void sub_20C22D9B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B36C(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C22D9D0(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((_QWORD *)(a1 + 168));
  return a1;
}

void sub_20C22DAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD ***v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD **v11;
  va_list va;

  va_start(va, a4);
  sub_20BF49F14(v4, 0);
  sub_20BFD7C28(a2, *v8);
  sub_20BFD6F90((void ***)va);
  sub_20BFE4CE8(v6, *v7);
  sub_20BFE4CE8(v5, *v11);
  sub_20BFE4CE8(a3, *v10);
  sub_20BFE4CE8(a4, *v9);
  _Unwind_Resume(a1);
}

void sub_20C22DB10(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C22CE94((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **sub_20C22DB54(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0xC0uLL);
    v15[1] = v7;
    v13 = **a4;
    v12[4] = 0u;
    v12[5] = 0u;
    v12[7] = 0u;
    v12[8] = 0u;
    *((_QWORD *)v12 + 22) = 0;
    *((_QWORD *)v12 + 20) = 0;
    v12[6] = 0u;
    v12[3] = 0u;
    v12[9] = 0u;
    *((_QWORD *)v12 + 4) = v13;
    *((_QWORD *)v12 + 5) = v12 + 3;
    *((_QWORD *)v12 + 9) = 0;
    *((_QWORD *)v12 + 8) = (char *)v12 + 72;
    *((_QWORD *)v12 + 12) = 0;
    *((_QWORD *)v12 + 10) = 0;
    *((_QWORD *)v12 + 11) = v12 + 6;
    *((_QWORD *)v12 + 15) = 0;
    *((_QWORD *)v12 + 13) = 0;
    *((_QWORD *)v12 + 14) = (char *)v12 + 120;
    *((_QWORD *)v12 + 23) = 0;
    *((_QWORD *)v12 + 16) = 0;
    *((_QWORD *)v12 + 17) = 0;
    *((_BYTE *)v12 + 160) = 0;
    *((_QWORD *)v12 + 18) = 0;
    *((_QWORD *)v12 + 19) = 0;
    *((_QWORD *)v12 + 21) = v12 + 11;
    v16 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0] = 0;
    sub_20C22DC94((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_20C22DC94(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C22CF90((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_20C22DCD8(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_20C22DDA0(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 56);
  sub_20BEB4844(&v3);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C22DE0C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C22DDA0((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void sub_20C22DE50(_QWORD *a1)
{
  _DWORD *v1;
  _DWORD *v3;
  _DWORD *v4;

  v1 = (_DWORD *)*a1;
  if (*a1)
  {
    v3 = (_DWORD *)a1[1];
    v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 18;
        sub_20C221A44((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C22DEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20BFD3EBC((int *)a4, (int *)v5);
    sub_20BFD3F10((int *)(a4 + 4), (int *)(v5 + 4));
    sub_20BFD3EBC((int *)(a4 + 8), (int *)(v5 + 8));
    sub_20BFD3F10((int *)(a4 + 12), (int *)(v5 + 12));
    if (a4 != v5)
    {
      v7 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a4 + 16));
      sub_20C201ECC(v7, v5 + 16);
    }
    *(_OWORD *)(a4 + 56) = *(_OWORD *)(v5 + 56);
    a4 += 72;
    v5 += 72;
  }
  while (v5 != v6);
  return v6;
}

void sub_20C22DF64(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20C22E22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C22E278(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

void sub_20C22E2D4(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v4;
  uint64_t Identifier;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  void **v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v19;

  if (!sub_20BEB560C((uint64_t)a2, *(_QWORD *)a1))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
    Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
    v6 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(Identifier + 56), **(const pxrInternal__aapl__pxrReserved__::PcpCache ***)(a1 + 8));
    v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(*(uint64_t **)a1);
    v8 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v7);
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(v6, v8))
    {
      if (**(_QWORD **)(a1 + 16))
      {
        v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(a2);
        v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v9);
        v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v10);
        v12 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
        if (*(char *)(v12 + 23) >= 0)
          v15 = v12;
        else
          v15 = *(_QWORD *)v12;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Checking dependent layer stack @%s@\n", v13, v14, v15);
        if ((v19 & 0x80u) == 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if ((v19 & 0x80u) == 0)
          v17 = v19;
        else
          v17 = (std::string::size_type)__p[1];
        std::string::append(**(std::string ***)(a1 + 16), (const std::string::value_type *)v16, v17);
        if ((char)v19 < 0)
          operator delete(__p[0]);
      }
      sub_20C22C448(*(_QWORD **)(a1 + 24), (__int128 *)a2);
    }
  }
}

void sub_20C22E3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  _QWORD *Layers;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  const pxrInternal__aapl__pxrReserved__::TfToken *v18;
  unint64_t v19;
  _QWORD *v20;
  char HasField;
  char v22;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v23;
  __int128 **v24;
  __int128 **v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48[2];
  uint64_t v49;
  uint64_t v50;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *LayerOffsetForLayer;
  __int128 *v52[3];
  __int128 **v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12)
    v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v49 = a6;
  v50 = a5;
  v48[0] = 0;
  v48[1] = 0;
  v47 = (uint64_t *)v48;
  v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v40);
  v16 = *(__int128 **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  if (v15 != *(_QWORD *)a3)
  {
    do
    {
      v15 -= 56;
      sub_20C0217C4(a3 + 16, v15);
    }
    while ((__int128 *)v15 != v16);
  }
  *(_QWORD *)(a3 + 8) = v16;
  v17 = Layers[1] - *Layers;
  if (v17)
  {
    v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v12 + 280);
    v19 = v17 >> 3;
    do
    {
      --v19;
      sub_20C1034E8(&v38, (uint64_t *)(*Layers + 8 * v19));
      v20 = (_QWORD *)sub_20BFCF650(&v38);
      v52[1] = (__int128 *)v40;
      v52[2] = (__int128 *)&stru_24C524CE0;
      LOWORD(v53) = 0;
      v52[0] = (__int128 *)&unk_24C527E50;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v20, a2, v18, (uint64_t (***)(_QWORD, uint64_t))v52);
      if ((_BYTE)v53)
        v22 = 0;
      else
        v22 = HasField;
      if ((v22 & 1) == 0)
        goto LABEL_16;
      LayerOffsetForLayer = 0;
      v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
      LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v23, v19);
      v24 = (__int128 **)operator new(0x40uLL);
      *v24 = (__int128 *)&off_24C52BC38;
      v24[1] = (__int128 *)a1;
      v24[2] = (__int128 *)&v38;
      v24[3] = (__int128 *)a2;
      v24[4] = (__int128 *)&v50;
      v24[5] = (__int128 *)&v49;
      v24[6] = (__int128 *)&v47;
      v24[7] = (__int128 *)&LayerOffsetForLayer;
      v53 = v24;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations((uint64_t)v40, (__int128 **)a3, (uint64_t)v52);
      v25 = v53;
      if (v53 == v52)
      {
        v25 = v52;
        v26 = 4;
      }
      else
      {
        if (!v53)
          goto LABEL_16;
        v26 = 5;
      }
      (*((void (**)(void))*v25 + v26))();
LABEL_16:
      v27 = v39;
      if (v39)
      {
        v28 = (unsigned int *)(v39 + 8);
        do
        {
          v29 = __ldxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    while (v19);
  }
  v32 = *a4;
  v31 = a4[1];
  if (v31 != *a4)
  {
    do
    {
      v31 -= 56;
      sub_20C232030((uint64_t)(a4 + 2), v31);
    }
    while (v31 != v32);
  }
  a4[1] = v32;
  sub_20C231A50(a4, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v33 = *(__int128 **)a3;
  v34 = *(__int128 **)(a3 + 8);
  if (*(__int128 **)a3 != v34)
  {
    do
    {
      v52[0] = v33;
      v35 = sub_20C232454(&v47, (unsigned __int8 *)v33, (uint64_t)&unk_20CAC184C, v52) + 11;
      v36 = a4[1];
      if (v36 >= a4[2])
      {
        v37 = sub_20C2322A8(a4, (uint64_t)v35);
      }
      else
      {
        sub_20C2323CC((uint64_t)(a4 + 2), a4[1], (uint64_t)v35);
        v37 = v36 + 56;
        a4[1] = v36 + 56;
      }
      a4[1] = v37;
      v33 = (__int128 *)((char *)v33 + 56);
    }
    while (v33 != v34);
  }
  v52[0] = (__int128 *)&v46;
  sub_20C021740((void ***)v52);
  v52[0] = (__int128 *)&v45;
  sub_20C021740((void ***)v52);
  v52[0] = (__int128 *)&v44;
  sub_20C021740((void ***)v52);
  v52[0] = (__int128 *)&v43;
  sub_20C021740((void ***)v52);
  v52[0] = (__int128 *)&v42;
  sub_20C021740((void ***)v52);
  v52[0] = (__int128 *)&v41;
  sub_20C021740((void ***)v52);
  sub_20C2326BC((uint64_t)&v47, v48[0]);
}

void sub_20C22E770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,_QWORD *a32)
{
  uint64_t v32;

  *(_QWORD *)(v32 - 136) = &a28;
  sub_20C021740((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a25;
  sub_20C021740((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a22;
  sub_20C021740((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a19;
  sub_20C021740((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a16;
  sub_20C021740((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a13;
  sub_20C021740((void ***)(v32 - 136));
  sub_20C2326BC((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  _QWORD *Layers;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const pxrInternal__aapl__pxrReserved__::TfToken *v18;
  unint64_t v19;
  _QWORD *v20;
  char HasField;
  char v22;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v23;
  __int128 **v24;
  __int128 **v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48[2];
  uint64_t v49;
  uint64_t v50;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *LayerOffsetForLayer;
  __int128 *v52[3];
  __int128 **v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12)
    v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v49 = a6;
  v50 = a5;
  v48[0] = 0;
  v48[1] = 0;
  v47 = (uint64_t *)v48;
  v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v40);
  v16 = *a3;
  v15 = a3[1];
  if (v15 != *a3)
  {
    do
    {
      v15 -= 48;
      sub_20C02189C((uint64_t)(a3 + 2), v15);
    }
    while (v15 != v16);
  }
  a3[1] = v16;
  v17 = Layers[1] - *Layers;
  if (v17)
  {
    v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v12 + 240);
    v19 = v17 >> 3;
    do
    {
      --v19;
      sub_20C1034E8(&v38, (uint64_t *)(*Layers + 8 * v19));
      v20 = (_QWORD *)sub_20BFCF650(&v38);
      v52[1] = (__int128 *)v40;
      v52[2] = (__int128 *)&stru_24C524CD0;
      LOWORD(v53) = 0;
      v52[0] = (__int128 *)&unk_24C527F30;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v20, a2, v18, (uint64_t (***)(_QWORD, uint64_t))v52);
      if ((_BYTE)v53)
        v22 = 0;
      else
        v22 = HasField;
      if ((v22 & 1) == 0)
        goto LABEL_16;
      LayerOffsetForLayer = 0;
      v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
      LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v23, v19);
      v24 = (__int128 **)operator new(0x40uLL);
      *v24 = (__int128 *)&off_24C52BCC8;
      v24[1] = (__int128 *)a1;
      v24[2] = (__int128 *)&v38;
      v24[3] = (__int128 *)a2;
      v24[4] = (__int128 *)&v50;
      v24[5] = (__int128 *)&v49;
      v24[6] = (__int128 *)&v47;
      v24[7] = (__int128 *)&LayerOffsetForLayer;
      v53 = v24;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations((uint64_t)v40, a3, (uint64_t)v52);
      v25 = v53;
      if (v53 == v52)
      {
        v25 = v52;
        v26 = 4;
      }
      else
      {
        if (!v53)
          goto LABEL_16;
        v26 = 5;
      }
      (*((void (**)(void))*v25 + v26))();
LABEL_16:
      v27 = v39;
      if (v39)
      {
        v28 = (unsigned int *)(v39 + 8);
        do
        {
          v29 = __ldxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    while (v19);
  }
  v32 = *a4;
  v31 = a4[1];
  if (v31 != *a4)
  {
    do
    {
      v31 -= 56;
      sub_20C232030((uint64_t)(a4 + 2), v31);
    }
    while (v31 != v32);
  }
  a4[1] = v32;
  sub_20C231A50(a4, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  v33 = (__int128 *)*a3;
  v34 = (__int128 *)a3[1];
  if ((__int128 *)*a3 != v34)
  {
    do
    {
      v52[0] = v33;
      v35 = sub_20C232BF8(&v47, (const void **)v33, (uint64_t)&unk_20CAC184C, v52) + 10;
      v36 = a4[1];
      if (v36 >= a4[2])
      {
        v37 = sub_20C2322A8(a4, (uint64_t)v35);
      }
      else
      {
        sub_20C2323CC((uint64_t)(a4 + 2), a4[1], (uint64_t)v35);
        v37 = v36 + 56;
        a4[1] = v36 + 56;
      }
      a4[1] = v37;
      v33 += 3;
    }
    while (v33 != v34);
  }
  v52[0] = (__int128 *)&v46;
  sub_20C021818((void ***)v52);
  v52[0] = (__int128 *)&v45;
  sub_20C021818((void ***)v52);
  v52[0] = (__int128 *)&v44;
  sub_20C021818((void ***)v52);
  v52[0] = (__int128 *)&v43;
  sub_20C021818((void ***)v52);
  v52[0] = (__int128 *)&v42;
  sub_20C021818((void ***)v52);
  v52[0] = (__int128 *)&v41;
  sub_20C021818((void ***)v52);
  sub_20C232EB8((uint64_t)&v47, v48[0]);
}

void sub_20C22EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,_QWORD *a32)
{
  uint64_t v32;

  *(_QWORD *)(v32 - 136) = &a28;
  sub_20C021818((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a25;
  sub_20C021818((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a22;
  sub_20C021818((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a19;
  sub_20C021818((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a16;
  sub_20C021818((void ***)(v32 - 136));
  *(_QWORD *)(v32 - 136) = &a13;
  sub_20C021818((void ***)(v32 - 136));
  sub_20C232EB8((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSitePermission(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v3;
  uint64_t Layers;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  char HasField;
  char v10;
  unsigned int v12;
  uint64_t (**v13[3])(_QWORD, uint64_t);
  __int16 v14;

  v12 = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  v5 = *(uint64_t **)Layers;
  v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6)
    return 0;
  do
  {
    v7 = (_QWORD *)sub_20C0EEAF8(v5);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8)
      v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v13[1] = (uint64_t (**)(_QWORD, uint64_t))&v12;
    v13[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C5298C8;
    v14 = 0;
    v13[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52BD58;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 248), v13);
    if ((_BYTE)v14)
      v10 = 0;
    else
      v10 = HasField;
    if ((v10 & 1) != 0)
      break;
    ++v5;
  }
  while (v5 != v6);
  return v12;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v3;
  uint64_t Layers;
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t result;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  v5 = *(uint64_t **)Layers;
  v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6)
    return 0;
  do
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v5);
    result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v7, a2);
    if ((result & 1) != 0)
      break;
    ++v5;
  }
  while (v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasSymmetry(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v3;
  uint64_t Layers;
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  v5 = *(uint64_t **)Layers;
  v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6)
    return 0;
  while (1)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v5);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8)
      v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 416), 0) & 1) != 0)break;
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v5);
    v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v10)
      v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v9, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 408), 0))break;
    if (++v5 == v6)
      return 0;
  }
  return 1;
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpComposeSitePrimSites(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v5;
  uint64_t **result;
  uint64_t *v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  int v23;
  int v24;

  v5 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  result = (uint64_t **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v5);
  v7 = *result;
  v8 = result[1];
  if (*result != v8)
  {
    do
    {
      v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v7);
      result = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v9, a2);
      if ((_DWORD)result)
      {
        sub_20C1034E8(&v19, v7);
        sub_20C2314A8((uint64_t)v21, &v19, a2);
        v10 = a3[1];
        if (v10 >= a3[2])
        {
          v11 = sub_20C23311C(a3, (uint64_t)v21);
        }
        else
        {
          sub_20C2330C4((uint64_t)a3, (uint64_t)v21);
          v11 = v10 + 24;
        }
        a3[1] = v11;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_20BFD265C(&v23);
        v12 = v22;
        if (v22)
        {
          v13 = (unsigned int *)(v22 + 8);
          do
          {
            v14 = __ldxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        result = (uint64_t **)v20;
        if (v20)
        {
          v16 = (unsigned int *)(v20 + 8);
          do
          {
            v17 = __ldxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_20C22F054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unsigned int *a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  va_list va;

  va_start(va, a4);
  sub_20C204ED4((uint64_t)va);
  if (a4)
  {
    v5 = a4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)a4 + 8))(a4);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteRelocates(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t **a3)
{
  unsigned __int8 v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t *Layers;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  int HasField;
  uint64_t v14;
  char *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(_QWORD, uint64_t);
  _QWORD *v35[2];
  uint64_t (**v36)(_QWORD, uint64_t);
  _QWORD *v37;
  std::type_info *v38;
  __int16 v39;
  int *v40;

  v6 = atomic_load((unsigned __int8 *)&qword_254988100);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254988100))
  {
    v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22)
      v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v23 = *((_QWORD *)v22 + 36);
    qword_2549880F8 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        qword_2549880F8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_2549880F8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988100);
  }
  v35[0] = 0;
  v35[1] = 0;
  v34 = (uint64_t (**)(_QWORD, uint64_t))v35;
  v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
  v30 = Layers[1];
  v31 = v30;
  v32 = *Layers;
  v33 = v32;
  while (v31 != v33)
  {
    v11 = (uint64_t *)sub_20C22F36C((uint64_t)&v30, v9, v10);
    v12 = (_QWORD *)sub_20C0EEAF8(v11);
    v37 = &v34;
    v38 = &stru_24C528000;
    v39 = 0;
    v36 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C528020;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_2549880F8, &v36);
    if ((_BYTE)v39)
      v16 = 0;
    else
      v16 = HasField;
    if (v16 == 1)
    {
      v36 = v34;
      v37 = v35;
      while (v36 != v37)
      {
        v17 = sub_20C22F3EC(&v36, v14, v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v17 + 28), a2, &v28);
        v20 = sub_20C22F3EC(&v36, v18, v19);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v20 + 36), a2, &v26);
        v40 = &v28;
        v21 = sub_20C0E4490(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, (uint64_t)&unk_20CAC184C, &v40);
        sub_20C01A074((int *)v21 + 9, &v26);
        sub_20C01A0C8((int *)v21 + 10, &v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
        sub_20BFD265C(&v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        sub_20BFD265C(&v28);
        sub_20C22F464(&v36);
      }
    }
    sub_20C22F508((uint64_t)&v30);
  }
  sub_20BFE4CE8((uint64_t)&v34, v35[0]);
}

void sub_20C22F30C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988100);
  _Unwind_Resume(a1);
}

uint64_t sub_20C22F36C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v5[4];
  char v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, true>::operator*() [T = const std::vector<pxrInternal_"
            "_aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = true]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 8;
}

void sub_20C22F3E4()
{
  JUMPOUT(0x20C22F38CLL);
}

_QWORD *sub_20C22F3EC(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, p"
            "xrInternal__aapl__pxrReserved__::SdfPath>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::Sdf"
            "Path, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C22F464(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator++() [T = std::map<pxrInternal__aapl__pxrR"
            "eserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_20C22F508(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, true>::operator++() [T = const std::vect"
            "or<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 - 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  int v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  uint64_t *v16;

  v5 = a3;
  v6 = atomic_load((unsigned __int8 *)&qword_254988110);
  if ((v6 & 1) == 0)
  {
    v16 = a1;
    v7 = a4;
    v14 = a2;
    v8 = __cxa_guard_acquire(&qword_254988110);
    a2 = v14;
    v5 = a3;
    a4 = v7;
    v9 = v8;
    a1 = v16;
    if (v9)
    {
      v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10)
        v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v11 = *((_QWORD *)v10 + 24);
      qword_254988108 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          qword_254988108 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988108, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988110);
      a4 = v7;
      a2 = v14;
      v5 = a3;
      a1 = v16;
    }
  }
  sub_20C22F6A0(a1, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988108, v5, a4);
}

void sub_20C22F688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988110);
  _Unwind_Resume(a1);
}

void sub_20C22F6A0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, uint64_t *a5)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  uint64_t *Layers;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD *v15;
  int HasField;
  int v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t (**v21)();
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37[2];
  uint64_t (**v38)();
  uint64_t *v39;
  uint64_t **v40;
  uint64_t (***v41)();
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v37[0] = 0;
  v37[1] = 0;
  v36 = (uint64_t *)v37;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v29);
  v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v10);
  v25 = Layers[1];
  v26 = v25;
  v27 = *Layers;
  v28 = v27;
  while (v26 != v28)
  {
    v14 = (uint64_t *)sub_20C22F36C((uint64_t)&v25, v12, v13);
    v15 = (_QWORD *)sub_20C0EEAF8(v14);
    v39 = (uint64_t *)v29;
    v40 = (uint64_t **)&stru_24C5249B8;
    LOWORD(v41) = 0;
    v38 = (uint64_t (**)())&unk_24C527D98;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v15, a2, a3, (uint64_t (***)(_QWORD, uint64_t))&v38);
    if ((_BYTE)v41)
      v17 = 0;
    else
      v17 = HasField;
    if (v17 == 1)
    {
      v38 = &off_24C52BD90;
      v39 = &v25;
      v40 = &v36;
      v41 = &v38;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations((uint64_t)v29, a4, (uint64_t)&v38);
      v18 = v41;
      if (v41 == &v38)
      {
        v18 = &v38;
        v19 = 4;
      }
      else
      {
        if (!v41)
          goto LABEL_12;
        v19 = 5;
      }
      (*v18)[v19]();
    }
LABEL_12:
    sub_20C22F508((uint64_t)&v25);
  }
  sub_20C231A50(a5, (a4[1] - *a4) >> 3);
  v20 = (uint64_t (**)())*a4;
  v21 = (uint64_t (**)())a4[1];
  if ((uint64_t (**)())*a4 != v21)
  {
    do
    {
      v38 = v20;
      v22 = sub_20C2336B8(&v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20, (uint64_t)&unk_20CAC184C, (_DWORD **)&v38)+ 5;
      v23 = a5[1];
      if (v23 >= a5[2])
      {
        v24 = sub_20C2322A8(a5, (uint64_t)v22);
      }
      else
      {
        sub_20C2323CC((uint64_t)(a5 + 2), a5[1], (uint64_t)v22);
        v24 = v23 + 56;
        a5[1] = v23 + 56;
      }
      a5[1] = v24;
      ++v20;
    }
    while (v20 != v21);
  }
  v38 = (uint64_t (**)())&v35;
  sub_20BFD6F90((void ***)&v38);
  v38 = (uint64_t (**)())&v34;
  sub_20BFD6F90((void ***)&v38);
  v38 = (uint64_t (**)())&v33;
  sub_20BFD6F90((void ***)&v38);
  v38 = (uint64_t (**)())&v32;
  sub_20BFD6F90((void ***)&v38);
  v38 = (uint64_t (**)())&v31;
  sub_20BFD6F90((void ***)&v38);
  v38 = (uint64_t (**)())&v30;
  sub_20BFD6F90((void ***)&v38);
  sub_20C23390C((uint64_t)&v36, v37[0]);
}

void sub_20C22F91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20BFD6A50((void **)va);
  sub_20C23390C(v5 - 152, *(_QWORD **)(v5 - 144));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  unsigned __int8 v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t *Layers;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  int HasField;
  int v14;
  void ***v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32[3];
  void ***v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254988120);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254988120))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v18 = *((_QWORD *)v17 + 24);
    qword_254988118 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        qword_254988118 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988118, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988120);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v25);
  v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
  v21 = Layers[1];
  v22 = v21;
  v23 = *Layers;
  v24 = v23;
  while (v22 != v24)
  {
    v11 = (uint64_t *)sub_20C22F36C((uint64_t)&v21, v9, v10);
    v12 = (_QWORD *)sub_20C0EEAF8(v11);
    v32[1] = (void **)v25;
    v32[2] = (void **)&stru_24C5249B8;
    LOWORD(v33) = 0;
    v32[0] = (void **)&unk_24C527D98;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988118, (uint64_t (***)(_QWORD, uint64_t))v32);
    if ((_BYTE)v33)
      v14 = 0;
    else
      v14 = HasField;
    if (v14 == 1)
    {
      v33 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations((uint64_t)v25, a3, (uint64_t)v32);
      v15 = v33;
      if (v33 == v32)
      {
        v15 = v32;
        v16 = 4;
      }
      else
      {
        if (!v33)
          goto LABEL_13;
        v16 = 5;
      }
      ((void (*)(void))(*v15)[v16])();
    }
LABEL_13:
    sub_20C22F508((uint64_t)&v21);
  }
  v32[0] = (void **)&v31;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v30;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v29;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v28;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v27;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v26;
  sub_20BFD6F90(v32);
}

void sub_20C22FBEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988120);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  int v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  uint64_t *v16;

  v5 = a3;
  v6 = atomic_load((unsigned __int8 *)&qword_254988130);
  if ((v6 & 1) == 0)
  {
    v16 = a1;
    v7 = a4;
    v14 = a2;
    v8 = __cxa_guard_acquire(&qword_254988130);
    a2 = v14;
    v5 = a3;
    a4 = v7;
    v9 = v8;
    a1 = v16;
    if (v9)
    {
      v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10)
        v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v11 = *((_QWORD *)v10 + 38);
      qword_254988128 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          qword_254988128 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988128, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988130);
      a4 = v7;
      a2 = v14;
      v5 = a3;
      a1 = v16;
    }
  }
  sub_20C22F6A0(a1, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988128, v5, a4);
}

void sub_20C22FD58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988130);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  unsigned __int8 v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t *Layers;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  int HasField;
  int v14;
  void ***v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32[3];
  void ***v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254988140);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254988140))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v18 = *((_QWORD *)v17 + 38);
    qword_254988138 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        qword_254988138 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988138, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988140);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v25);
  v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
  v21 = Layers[1];
  v22 = v21;
  v23 = *Layers;
  v24 = v23;
  while (v22 != v24)
  {
    v11 = (uint64_t *)sub_20C22F36C((uint64_t)&v21, v9, v10);
    v12 = (_QWORD *)sub_20C0EEAF8(v11);
    v32[1] = (void **)v25;
    v32[2] = (void **)&stru_24C5249B8;
    LOWORD(v33) = 0;
    v32[0] = (void **)&unk_24C527D98;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988138, (uint64_t (***)(_QWORD, uint64_t))v32);
    if ((_BYTE)v33)
      v14 = 0;
    else
      v14 = HasField;
    if (v14 == 1)
    {
      v33 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations((uint64_t)v25, a3, (uint64_t)v32);
      v15 = v33;
      if (v33 == v32)
      {
        v15 = v32;
        v16 = 4;
      }
      else
      {
        if (!v33)
          goto LABEL_13;
        v16 = 5;
      }
      ((void (*)(void))(*v15)[v16])();
    }
LABEL_13:
    sub_20C22F508((uint64_t)&v21);
  }
  v32[0] = (void **)&v31;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v30;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v29;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v28;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v27;
  sub_20BFD6F90(v32);
  v32[0] = (void **)&v26;
  sub_20BFD6F90(v32);
}

void sub_20C22FFC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988140);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSets(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t *Layers;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  int HasField;
  int v16;
  uint64_t (***v17)();
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40[2];
  uint64_t (**v41)();
  uint64_t *v42;
  uint64_t **v43;
  __int128 **v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254988150);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988150))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24)
      v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v25 = *((_QWORD *)v24 + 59);
    qword_254988148 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 2, v26));
      if ((v27 & 1) == 0)
        qword_254988148 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988148, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988150);
  }
  v40[0] = 0;
  v40[1] = 0;
  v39 = (uint64_t *)v40;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v32);
  v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
  v28 = Layers[1];
  v29 = v28;
  v30 = *Layers;
  v31 = v30;
  while (v29 != v31)
  {
    v13 = (uint64_t *)sub_20C22F36C((uint64_t)&v28, v11, v12);
    v14 = (_QWORD *)sub_20C0EEAF8(v13);
    v42 = (uint64_t *)v32;
    v43 = (uint64_t **)&stru_24C524D30;
    LOWORD(v44) = 0;
    v41 = (uint64_t (**)())&unk_24C52BEB0;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v14, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988148, (uint64_t (***)(_QWORD, uint64_t))&v41);
    if ((_BYTE)v44)
      v16 = 0;
    else
      v16 = HasField;
    if (v16 == 1)
    {
      v41 = &off_24C52BE20;
      v42 = &v28;
      v43 = &v39;
      v44 = (__int128 **)&v41;
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations((uint64_t)v32, a3, (uint64_t)&v41);
      v17 = (uint64_t (***)())v44;
      if (v44 == (__int128 **)&v41)
      {
        v17 = &v41;
        v18 = 4;
      }
      else
      {
        if (!v44)
          goto LABEL_13;
        v18 = 5;
      }
      (*v17)[v18]();
    }
LABEL_13:
    sub_20C22F508((uint64_t)&v28);
  }
  sub_20C231A50(a4, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v19 = (__int128 *)*a3;
  v20 = (__int128 *)a3[1];
  if ((__int128 *)*a3 != v20)
  {
    do
    {
      v41 = (uint64_t (**)())v19;
      v21 = sub_20C233B2C(&v39, (const void **)v19, (uint64_t)&unk_20CAC184C, (__int128 **)&v41) + 7;
      v22 = a4[1];
      if (v22 >= a4[2])
      {
        v23 = sub_20C2322A8(a4, (uint64_t)v21);
      }
      else
      {
        sub_20C2323CC((uint64_t)(a4 + 2), a4[1], (uint64_t)v21);
        v23 = v22 + 56;
        a4[1] = v22 + 56;
      }
      a4[1] = v23;
      v19 = (__int128 *)((char *)v19 + 24);
    }
    while (v19 != v20);
  }
  v41 = (uint64_t (**)())&v38;
  sub_20BDE5038((void ***)&v41);
  v41 = (uint64_t (**)())&v37;
  sub_20BDE5038((void ***)&v41);
  v41 = (uint64_t (**)())&v36;
  sub_20BDE5038((void ***)&v41);
  v41 = (uint64_t (**)())&v35;
  sub_20BDE5038((void ***)&v41);
  v41 = (uint64_t (**)())&v34;
  sub_20BDE5038((void ***)&v41);
  v41 = (uint64_t (**)())&v33;
  sub_20BDE5038((void ***)&v41);
  sub_20C233D88((uint64_t)&v39, v40[0]);
}

void sub_20C230364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988150);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSets(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  unsigned __int8 v6;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  uint64_t *Layers;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  int HasField;
  int v14;
  void ***v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32[3];
  void ***v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254988160);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254988160))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v18 = *((_QWORD *)v17 + 59);
    qword_254988158 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        qword_254988158 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988158, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988160);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v25);
  v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
  v21 = Layers[1];
  v22 = v21;
  v23 = *Layers;
  v24 = v23;
  while (v22 != v24)
  {
    v11 = (uint64_t *)sub_20C22F36C((uint64_t)&v21, v9, v10);
    v12 = (_QWORD *)sub_20C0EEAF8(v11);
    v32[1] = (void **)v25;
    v32[2] = (void **)&stru_24C524D30;
    LOWORD(v33) = 0;
    v32[0] = (void **)&unk_24C52BEB0;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988158, (uint64_t (***)(_QWORD, uint64_t))v32);
    if ((_BYTE)v33)
      v14 = 0;
    else
      v14 = HasField;
    if (v14 == 1)
    {
      v33 = 0;
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations((uint64_t)v25, a3, (uint64_t)v32);
      v15 = v33;
      if (v33 == v32)
      {
        v15 = v32;
        v16 = 4;
      }
      else
      {
        if (!v33)
          goto LABEL_13;
        v16 = 5;
      }
      ((void (*)(void))(*v15)[v16])();
    }
LABEL_13:
    sub_20C22F508((uint64_t)&v21);
  }
  v32[0] = (void **)&v31;
  sub_20BDE5038(v32);
  v32[0] = (void **)&v30;
  sub_20BDE5038(v32);
  v32[0] = (void **)&v29;
  sub_20BDE5038(v32);
  v32[0] = (void **)&v28;
  sub_20BDE5038(v32);
  v32[0] = (void **)&v27;
  sub_20BDE5038(v32);
  v32[0] = (void **)&v26;
  sub_20BDE5038(v32);
}

void sub_20C230648(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988160);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSetOptions(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t **a4)
{
  unsigned __int8 v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t Layers;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  int HasField;
  uint64_t v15;
  char *v16;
  int v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  int v28;
  void *__p[2];
  std::type_info *v30;
  __int16 v31;

  v8 = atomic_load((unsigned __int8 *)&qword_254988170);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988170))
  {
    v21 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v21)
      v21 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v22 = *((_QWORD *)v21 + 7);
    qword_254988168 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        qword_254988168 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988168, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988170);
  }
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a2, a3, (uint64_t)__p, &v27);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  v25 = 0uLL;
  v26 = 0;
  v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
  v11 = *(uint64_t **)Layers;
  v12 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers != v12)
  {
    do
    {
      v13 = (_QWORD *)sub_20C0EEAF8(v11);
      __p[1] = &v25;
      v30 = &stru_24C51BCF0;
      v31 = 0;
      __p[0] = &unk_24C528DB0;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988168, (uint64_t (***)(_QWORD, uint64_t))__p);
      if ((_BYTE)v31)
        v17 = 0;
      else
        v17 = HasField;
      if (v17 == 1)
      {
        *(_OWORD *)__p = v25;
        while (__p[0] != __p[1])
        {
          v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B90(__p, v15, v16);
          if ((**(_QWORD **)v18 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (uint64_t *)((**(_QWORD **)v18 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
          sub_20BE74FC0(a4, (const void **)EmptyString, (uint64_t)EmptyString);
          sub_20C023C08(__p);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  __p[0] = &v25;
  sub_20BEEB2B8((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  return sub_20BFD265C(&v27);
}

void sub_20C2308D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  __cxa_guard_abort(&qword_254988170);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelection(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned __int8 v9;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  uint64_t Layers;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  char HasField;
  char v16;
  _QWORD **v17;
  _QWORD **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v36;
  uint64_t v37;
  std::string __p;
  __int128 v39;
  _QWORD *v40;
  _QWORD **v41;
  _QWORD *v42[2];
  char *v43;
  char *v44;
  std::type_info *v45;
  __int16 v46;

  v9 = atomic_load((unsigned __int8 *)&qword_254988180);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254988180))
  {
    v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v28)
      v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v29 = *((_QWORD *)v28 + 57);
    qword_254988178 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        qword_254988178 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988178, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988180);
  }
  v42[0] = 0;
  v42[1] = 0;
  v41 = v42;
  v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v10);
  v13 = *(uint64_t **)Layers;
  v12 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v12)
  {
LABEL_24:
    v25 = 0;
    goto LABEL_29;
  }
  v32 = a4;
  while (1)
  {
    v14 = (_QWORD *)sub_20C0EEAF8(v13);
    v46 = 0;
    v44 = (char *)&v41;
    v45 = &stru_24C526848;
    v43 = (char *)&unk_24C52BEE8;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v14, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988178, (uint64_t (***)(_QWORD, uint64_t))&v43);
    v16 = (_BYTE)v46 ? 0 : HasField;
    if ((v16 & 1) != 0)
    {
      v17 = (_QWORD **)sub_20BDEEBA4((uint64_t)&v41, a3);
      v18 = v17;
      if (v42 != v17)
        break;
    }
LABEL_23:
    if (++v13 == v12)
      goto LABEL_24;
  }
  v19 = (void **)(v17 + 7);
  if (!pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v17 + 7))
    goto LABEL_26;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v20 = *(_QWORD *)(sub_20C1FE500(a1) + 392);
  sub_20BDDC0E4(&__p, "variant");
  sub_20C1034E8(&v36, v13);
  pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v18 + 7), v20, &__p, (uint64_t)&v36, a2, a5, &v43, (uint64_t)&v39);
  if (*((char *)v18 + 79) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v39;
  v18[9] = v40;
  HIBYTE(v40) = 0;
  LOBYTE(v39) = 0;
  v21 = v37;
  if (v37)
  {
    v22 = (unsigned int *)(v37 + 8);
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v43 != v44)
  {
    if (a6)
      sub_20C2343AC(a6, a6[1], (uint64_t)v43, (uint64_t)v44, (v44 - v43) >> 4);
    *(_QWORD *)&v39 = &v43;
    sub_20BDE9EB0((void ***)&v39);
    goto LABEL_23;
  }
  *(_QWORD *)&v39 = &v43;
  sub_20BDE9EB0((void ***)&v39);
LABEL_26:
  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  v26 = *(_OWORD *)v19;
  *(_QWORD *)(v32 + 16) = v18[9];
  *(_OWORD *)v32 = v26;
  *((_BYTE *)v18 + 79) = 0;
  *((_BYTE *)v18 + 56) = 0;
  v25 = 1;
LABEL_29:
  sub_20BDE9D48((uint64_t)&v41, v42[0]);
  return v25;
}

void sub_20C230C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  __cxa_guard_abort(&qword_254988180);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelections(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unsigned __int8 v9;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  uint64_t Layers;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  char HasField;
  char v16;
  uint64_t *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  const void ***v24;
  const void **v25;
  BOOL v26;
  const void ***v27;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v35;
  std::string __p;
  __int128 v37;
  uint64_t v38;
  const void ***v39;
  const void **v40[2];
  char *v41;
  char *v42;
  std::type_info *v43;
  __int16 v44;

  v9 = atomic_load((unsigned __int8 *)&qword_254988190);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254988190))
  {
    v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v28)
      v28 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v29 = *((_QWORD *)v28 + 57);
    qword_254988188 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        qword_254988188 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_254988188, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988190);
  }
  v40[0] = 0;
  v40[1] = 0;
  v39 = v40;
  v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v10);
  v13 = *(uint64_t **)Layers;
  v12 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers != v12)
  {
    v32 = *(uint64_t **)(Layers + 8);
    do
    {
      v14 = (_QWORD *)sub_20C0EEAF8(v13);
      v42 = (char *)&v39;
      v43 = &stru_24C526848;
      v44 = 0;
      v41 = (char *)&unk_24C52BEE8;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v14, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_254988188, (uint64_t (***)(_QWORD, uint64_t))&v41);
      if ((_BYTE)v44)
        v16 = 0;
      else
        v16 = HasField;
      if ((v16 & 1) != 0)
      {
        v17 = (uint64_t *)v39;
        if (v39 != v40)
        {
          while (1)
          {
            v18 = (void **)(v17 + 7);
            if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v17 + 7))
            {
              v41 = 0;
              v42 = 0;
              v43 = 0;
              v19 = *(_QWORD *)(sub_20C1FE500(a1) + 392);
              sub_20BDDC0E4(&__p, "variant");
              sub_20C1034E8(&v34, v13);
              pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v17 + 7), v19, &__p, (uint64_t)&v34, a2, a4, &v41, (uint64_t)&v37);
              if (*((char *)v17 + 79) < 0)
                operator delete(*v18);
              *(_OWORD *)v18 = v37;
              v17[9] = v38;
              HIBYTE(v38) = 0;
              LOBYTE(v37) = 0;
              v20 = v35;
              if (v35)
              {
                v21 = (unsigned int *)(v35 + 8);
                do
                {
                  v22 = __ldxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v41 != v42)
              {
                if (a5)
                  sub_20C2343AC(a5, a5[1], (uint64_t)v41, (uint64_t)v42, (v42 - v41) >> 4);
                v24 = (const void ***)sub_20BE10B80((uint64_t **)&v39, v17);
                sub_20BDDE3E4((uint64_t)(v17 + 4));
                operator delete(v17);
                *(_QWORD *)&v37 = &v41;
                sub_20BDE9EB0((void ***)&v37);
                goto LABEL_29;
              }
              *(_QWORD *)&v37 = &v41;
              sub_20BDE9EB0((void ***)&v37);
            }
            v25 = (const void **)v17[1];
            if (v25)
            {
              do
              {
                v24 = (const void ***)v25;
                v25 = (const void **)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v24 = (const void ***)v17[2];
                v26 = *v24 == (const void **)v17;
                v17 = (uint64_t *)v24;
              }
              while (!v26);
            }
LABEL_29:
            v17 = (uint64_t *)v24;
            if (v24 == v40)
            {
              v27 = v39;
              goto LABEL_32;
            }
          }
        }
        v27 = v40;
LABEL_32:
        sub_20BDEBFE0(a3, (const void **)v27, v40);
        v12 = v32;
      }
      ++v13;
    }
    while (v13 != v12);
  }
  sub_20BDE9D48((uint64_t)&v39, v40[0]);
}

void sub_20C230FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  __cxa_guard_abort(&qword_254988190);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasVariantSelections(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v3;
  uint64_t Layers;
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  uint64_t result;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  v5 = *(uint64_t **)Layers;
  v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6)
    return 0;
  do
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v5);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8)
      v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 456), 0);
    if ((result & 1) != 0)
      break;
    ++v5;
  }
  while (v5 != v6);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(uint64_t *result, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3, void **a4, int *a5, const pxrInternal__aapl__pxrReserved__::TfToken *a6)
{
  uint64_t v6;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t v12;
  char *v13;
  void **v14;
  uint64_t *v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  void **v17;
  uint64_t v18;
  void **v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  void **v25;
  __int128 v26;
  void *v27;
  _BYTE v28[16];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v24 = a5;
  v25 = a4;
  v6 = *result;
  v20 = result[1];
  v21 = v20;
  v22 = v6;
  v23 = v6;
  if (v20 != v6)
  {
    while (1)
    {
      v10 = (uint64_t *)sub_20C22F36C((uint64_t)&v20, (uint64_t)a2, a3);
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v10);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v11, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v28);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v28))
        break;
LABEL_9:
      if (a6)
      {
        v15 = (uint64_t *)sub_20C22F36C((uint64_t)&v20, v12, v13);
        v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v15);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v16, a2, a6, (pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v26))
        {
          v17 = v25;
          if ((BYTE8(v26) & 4) != 0)
            v18 = (*(uint64_t (**)(__int128 *))((*((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v26);
          else
            v18 = v26;
          pxrInternal__aapl__pxrReserved__::SdfApplyListOrdering<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v17, v18);
        }
        sub_20BF4C2D8((uint64_t)&v26);
      }
      sub_20BF4C2D8((uint64_t)v28);
      result = (uint64_t *)sub_20C22F508((uint64_t)&v20);
      if (v21 == v23)
        return result;
    }
    sub_20C1065C0((uint64_t)v28, (uint64_t **)&v26);
    v19[0] = (void **)&v26;
    v19[1] = (void **)&v24;
    v19[2] = (void **)&v25;
    if (!*((_QWORD *)v24 + 6))
    {
      sub_20C234554((uint64_t)v24, (uint64_t *)v26, *((uint64_t **)&v26 + 1));
      if (*((_QWORD *)v24 + 6) == (uint64_t)(*((_QWORD *)&v26 + 1) - v26) >> 3)
      {
        v14 = v25;
        sub_20C0B4038(v25);
        *(_OWORD *)v14 = v26;
        v14[2] = v27;
        v26 = 0uLL;
        v27 = 0;
LABEL_8:
        v19[0] = (void **)&v26;
        sub_20BEEB2B8(v19);
        goto LABEL_9;
      }
      sub_20C234818(v24);
    }
    sub_20C231340((uint64_t ***)v19);
    goto LABEL_8;
  }
  return result;
}

void sub_20C2312F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t ***sub_20C231340(uint64_t ***result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t ***v3;
  char v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  _QWORD v21[2];
  uint64_t *v22;
  char *v23;
  _QWORD *v24;

  v1 = **result;
  v2 = (*result)[1];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      result = (uint64_t ***)sub_20C231504(*v3[1], v1, v1);
      if ((v4 & 1) != 0)
      {
        v5 = (uint64_t **)*v3[2];
        v6 = v5[1];
        result = (uint64_t ***)(v5 + 2);
        v7 = (unint64_t)v5[2];
        if ((unint64_t)v6 >= v7)
        {
          v9 = v6 - *v5;
          if ((unint64_t)(v9 + 1) >> 61)
            sub_20BDDF694();
          v10 = v7 - (_QWORD)*v5;
          v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1))
            v11 = v9 + 1;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          v24 = v5 + 2;
          if (v12)
            v13 = (char *)sub_20BDDF6A8((uint64_t)result, v12);
          else
            v13 = 0;
          v14 = (uint64_t *)&v13[8 * v9];
          v15 = &v13[8 * v12];
          v23 = v15;
          *v14 = *v1;
          v8 = v14 + 1;
          *v1 = 0;
          v22 = v14 + 1;
          v17 = *v5;
          v16 = v5[1];
          if (v16 == *v5)
          {
            v19 = v5[1];
          }
          else
          {
            do
            {
              v18 = *--v16;
              *--v14 = v18;
              *v16 = 0;
            }
            while (v16 != v17);
            v19 = *v5;
            v16 = v5[1];
            v8 = v22;
            v15 = v23;
          }
          *v5 = v14;
          v21[0] = v19;
          v21[1] = v19;
          v5[1] = v8;
          v22 = v16;
          v20 = (char *)v5[2];
          v5[2] = (uint64_t *)v15;
          v23 = v20;
          result = (uint64_t ***)sub_20BF1EE98((uint64_t)v21);
        }
        else
        {
          *v6 = *v1;
          v8 = v6 + 1;
          *v1 = 0;
        }
        v5[1] = v8;
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C2314A8(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  return a1;
}

uint64_t sub_20C231504(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *a1;
  v8 = a1[4];
  v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 16 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    v12 = sub_20C23169C((uint64_t)a1);
    v13 = a1[4];
    if ((v12 & 1) != 0)
    {
      v9 = v6 & *a1;
      v14 = *(__int16 *)(v13 + 16 * v9 + 4);
      if (v14 < 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          v10 = (__int16)(v10 + 1);
          v9 = (v9 + 1) & *a1;
          v14 = *(__int16 *)(v13 + 16 * v9 + 4);
        }
        while (v10 <= v14);
      }
      v15 = (unsigned __int16)v14;
    }
    else
    {
      v15 = *(unsigned __int16 *)(v13 + 16 * v9 + 4);
    }
    if (v15 == 0xFFFF)
    {
      v16 = v13 + 16 * v9;
      v17 = *a3;
      *(_QWORD *)(v16 + 8) = *a3;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          *(_QWORD *)(v16 + 8) &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_DWORD *)v16 = v6;
      *(_WORD *)(v16 + 4) = v10;
    }
    else
    {
      sub_20C231760(a1, v9, v10, v6, a3);
    }
    ++a1[6];
    return a1[4] + 16 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      result = v8 + 16 * v9;
      if ((*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8) == v5)
        break;
      v10 = (__int16)(v10 + 1);
      v9 = (v9 + 1) & v7;
      if (v10 > *(__int16 *)(v8 + 16 * v9 + 4))
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_20C23169C(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C2317F0(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C2317F0(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t *sub_20C231760(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *result;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *a5;
  v11 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v11 = (uint64_t)v6;
  }
  result = sub_20C231974(a1, a2, a3, a4, &v11);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return result;
}

void sub_20C2317F0(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[9];
  void **v10;

  sub_20C2205D4((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 1;
    v6 = (unint64_t)(v9[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
          v7 = bswap64(0x9E3779B97F4A7C55 * (*v5 & 0xFFFFFFFFFFFFFFF8));
        else
          v7 = *((unsigned int *)v5 - 2);
        sub_20C231900(&v8, v8 & v7, 0, v7, v5);
      }
      v5 += 2;
    }
    while (v5 - 1 != v4);
  }
  v9[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v8, (uint64_t *)a1);
  v10 = (void **)v9;
  sub_20C2207E4(&v10);
}

void sub_20C2318E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20C2207E4((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C231900(_QWORD *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  while (1)
  {
    v5 = result[4] + 16 * a2;
    v6 = (_WORD *)(v5 + 4);
    v7 = *(__int16 *)(v5 + 4);
    if (v7 >= a3)
      goto LABEL_4;
    v8 = (uint64_t *)(v5 + 8);
    if (v7 == -1)
      break;
    v9 = *a5;
    *a5 = *v8;
    *v8 = v9;
    *v6 = a3;
    v10 = *(_DWORD *)v5;
    *(_DWORD *)v5 = a4;
    a3 = v7;
    a4 = v10;
LABEL_4:
    ++a3;
    a2 = *result & (a2 + 1);
  }
  *v8 = *a5;
  *a5 = 0;
  *(_DWORD *)v5 = a4;
  *v6 = a3;
  return result;
}

uint64_t *sub_20C231974(uint64_t *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  _WORD *v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v5 = result[4] + 16 * a2;
  v6 = *a5;
  *a5 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  v7 = *(unsigned __int16 *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  v8 = *(_DWORD *)v5;
  *(_DWORD *)v5 = a4;
  v9 = *result;
  v10 = (a2 + 1) & *result;
  v11 = v7 + 1;
  v12 = result[4];
  v13 = (int *)(v12 + 16 * v10);
  v14 = v13 + 1;
  for (i = *((unsigned __int16 *)v13 + 2); i != 0xFFFF; i = *((unsigned __int16 *)v13 + 2))
  {
    if ((__int16)v11 <= (__int16)i)
    {
      i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096)
        *((_BYTE *)result + 72) = 1;
      v16 = v12 + 16 * v10;
      v17 = *a5;
      *a5 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v17;
      *v14 = v11;
      v18 = *v13;
      *v13 = v8;
      v12 = result[4];
      v8 = v18;
    }
    v10 = (v10 + 1) & v9;
    v11 = i + 1;
    v13 = (int *)(v12 + 16 * v10);
    v14 = v13 + 1;
  }
  *(_QWORD *)(v12 + 16 * v10 + 8) = *a5;
  *a5 = 0;
  *v13 = v8;
  *v14 = v11;
  return result;
}

void **sub_20C231A50(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE16B34((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 56 * v6;
    sub_20C232090(a1, v7);
    return sub_20C232234(v7);
  }
  return result;
}

void sub_20C231AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C232234((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C231B14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24C52BC38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_20C231B64(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C52BC38;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C231B9C(uint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  std::string::size_type size;
  std::string::size_type v8;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void **v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *__p[2];
  __int128 v27;
  std::string v28;
  std::string v29;
  int v30;
  _DWORD v31[5];
  _QWORD **v32;
  std::string v33;
  std::string __dst;
  std::string *v35;

  if (*(char *)(a2 + 23) < 0)
    sub_20BDDBFAC(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  memset(&v33, 0, sizeof(v33));
  if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(&__dst))
  {
    v6 = *(_QWORD *)(sub_20C1FE500(*(uint64_t **)(a1 + 8)) + 392);
    sub_20BDDC0E4(__p, "reference");
    pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(&__dst, v6, (const std::string *)__p, *(_QWORD *)(a1 + 16), *(_DWORD **)(a1 + 24), **(_QWORD **)(a1 + 32), **(char ****)(a1 + 40), (uint64_t)&v29);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = v29;
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = 0;
    v29.__r_.__value_.__s.__data_[0] = 0;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (!size)
    {
      *a3 = 0;
      a3[56] = 0;
      goto LABEL_41;
    }
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), (uint64_t)&__dst, (uint64_t)&v29);
  }
  else
  {
    v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = __dst.__r_.__value_.__l.__size_;
    if (!v8)
      goto LABEL_20;
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), (uint64_t)&__dst, (uint64_t)&v29);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v33 = v29;
LABEL_20:
  __p[0] = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(&v29, &v33, a2 + 24, a2 + 32, __p);
  sub_20BF49F14((_QWORD ***)__p, 0);
  pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)&v32, (const void ****)(a2 + 48));
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(void **)v9;
  v10 = *(unsigned int **)(v9 + 8);
  __p[0] = v11;
  __p[1] = v10;
  if (v10)
  {
    v12 = v10 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = **(__int128 ***)(a1 + 56);
  if (v14)
    v27 = *v14;
  else
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v27, 0.0, 1.0);
  v28 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  v15 = *(uint64_t ***)(a1 + 48);
  v35 = &v29;
  v16 = sub_20C232454(v15, (unsigned __int8 *)&v29, (uint64_t)&unk_20CAC184C, (__int128 **)&v35);
  v17 = (unsigned int *)v16[12];
  *(_OWORD *)(v16 + 11) = *(_OWORD *)__p;
  __p[1] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
  }
  __p[0] = 0;
  *(_OWORD *)(v16 + 13) = v27;
  v21 = (void **)(v16 + 15);
  if (*((char *)v16 + 143) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  v16[17] = v28.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v28.__r_.__value_.__s + 23) = 0;
  v28.__r_.__value_.__s.__data_[0] = 0;
  v22 = __p[1];
  if (__p[1])
  {
    v23 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  }
  sub_20C0E33FC((uint64_t)a3, (__int128 *)&v29);
  sub_20BF49F14(&v32, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v31);
  sub_20BFD265C(&v30);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_41:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20C231EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _QWORD ***v37;
  uint64_t v38;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;

  if (a10)
  {
    v40 = a10 + 2;
    do
    {
      v41 = __ldxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  sub_20BF49F14(v37, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&a28 + 1);
  sub_20BFD265C(&a28);
  if (a27 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (*(char *)(v38 - 73) < 0)
    operator delete(*(void **)(v38 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_20C231FE8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52BCA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C232024()
{
  return &unk_24C52BCA8;
}

uint64_t sub_20C232030(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20C232090(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C232104((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C232104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 16);
      v9 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 56;
      *((_QWORD *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C2321B0((uint64_t)v12);
  return v10;
}

uint64_t sub_20C2321B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2321E4((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C2321E4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C232030(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C232234(void **a1)
{
  sub_20C232264((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C232264(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 56;
      result = sub_20C232030(v4, v1 - 56);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C2322A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_20BDDF694();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE16B34((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  sub_20C2323CC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 56;
  sub_20C232090(a1, &v10);
  v8 = a1[1];
  sub_20C232234(&v10);
  return v8;
}

void sub_20C2323B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C232234((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C2323CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE *result;
  __int128 v7;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  result = (_BYTE *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
    return sub_20BDDBFAC(result, *(void **)(a3 + 32), *(_QWORD *)(a3 + 40));
  v7 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)result = v7;
  return result;
}

void sub_20C23243C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B4E8(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C232454(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C12CBD4((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C2324FC((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C2325E8((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C2324FC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C232564((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C23254C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C2325E8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C232564(uint64_t a1, __int128 *a2)
{
  char *v3;

  v3 = sub_20C029E64((char *)a1, a2);
  *(_OWORD *)(v3 + 72) = 0u;
  v3 += 72;
  *((_QWORD *)v3 + 4) = 0;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 - 1) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v3, 0.0, 1.0);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_20C2325B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 64);
  if (v3)
    sub_20C96B4E8(v3);
  sub_20BF49F14((_QWORD ***)(v1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v1 + 28));
  sub_20C96B8D8(v1);
  _Unwind_Resume(a1);
}

void sub_20C2325E8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C23262C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C23262C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v2 = *(unsigned int **)(a1 + 64);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_20BF49F14((_QWORD ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C2326BC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C2326BC(a1, *a2);
    sub_20C2326BC(a1, a2[1]);
    sub_20C23262C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

__n128 sub_20C23270C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24C52BCC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_20C23275C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C52BCC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C232794(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string::size_type size;
  std::string::size_type v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void **v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  std::string v28;
  std::string __p;
  int v30;
  int v31;
  __int128 v32;
  void *v33[2];
  uint64_t v34;
  std::string __dst;
  std::string *p_p;

  if (*(char *)(a2 + 23) < 0)
    sub_20BDDBFAC(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(&__dst))
  {
    v6 = *(_QWORD *)(sub_20C1FE500(*(uint64_t **)(a1 + 8)) + 392);
    sub_20BDDC0E4(&__p, "payload");
    pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(&__dst, v6, &__p, *(_QWORD *)(a1 + 16), *(_DWORD **)(a1 + 24), **(_QWORD **)(a1 + 32), **(char ****)(a1 + 40), (uint64_t)&v26);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v26;
    __dst.__r_.__value_.__r.__words[2] = v27;
    BYTE7(v27) = 0;
    LOBYTE(v26) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (!size)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 48) = 0;
      goto LABEL_40;
    }
  }
  else
  {
    v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = __dst.__r_.__value_.__l.__size_;
    if (!v8)
      goto LABEL_19;
  }
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), (uint64_t)&__dst, (uint64_t)&v26);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  *(_OWORD *)v33 = v26;
  v34 = v27;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&__p, v33, a2 + 24, a2 + 32);
  v9 = *(uint64_t **)(a1 + 16);
  v11 = *v9;
  v10 = v9[1];
  *(_QWORD *)&v26 = v11;
  *((_QWORD *)&v26 + 1) = v10;
  if (v10)
  {
    v12 = (unsigned int *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = **(__int128 ***)(a1 + 56);
  if (v14)
    v27 = *v14;
  else
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v27, 0.0, 1.0);
  v28 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  v15 = *(uint64_t ***)(a1 + 48);
  p_p = &__p;
  v16 = sub_20C232BF8(v15, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p);
  v17 = (unsigned int *)v16[11];
  *((_OWORD *)v16 + 5) = v26;
  *((_QWORD *)&v26 + 1) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
  }
  *(_QWORD *)&v26 = 0;
  *((_OWORD *)v16 + 6) = v27;
  v21 = (void **)(v16 + 14);
  if (*((char *)v16 + 135) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  v16[16] = v28.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v28.__r_.__value_.__s + 23) = 0;
  v28.__r_.__value_.__s.__data_[0] = 0;
  v22 = *((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  *(std::string *)a3 = __p;
  memset(&__p, 0, sizeof(__p));
  sub_20BFD38A4((_DWORD *)(a3 + 24), &v30);
  sub_20BFD38DC((_DWORD *)(a3 + 28), &v31);
  *(_OWORD *)(a3 + 32) = v32;
  *(_BYTE *)(a3 + 48) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_20BFD265C(&v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_40:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20C232AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  if (a10)
  {
    v36 = a10 + 2;
    do
    {
      v37 = __ldxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&a26 + 1);
  sub_20BFD265C(&a26);
  if (a25 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_20C232BB0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52BD38))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C232BEC()
{
  return &unk_24C52BD38;
}

uint64_t *sub_20C232BF8(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C12F130((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C232CA0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C232DF0((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C232CA0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_20C232D1C(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C232D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C232DF0(v1, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C232D1C(_BYTE *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  __int128 v5;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BFD6E54((_DWORD *)__dst + 6, (_DWORD *)v3 + 6);
  sub_20BFD6EA4((_DWORD *)__dst + 7, (_DWORD *)v3 + 7);
  v5 = v3[2];
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 2) = v5;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  *((_QWORD *)__dst + 12) = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst + 8, 0.0, 1.0);
  *((_QWORD *)__dst + 10) = 0;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0;
  return __dst;
}

void sub_20C232DC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 56);
  if (v5)
    sub_20C96B4E8(v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20C96B90C(v2, v1);
  _Unwind_Resume(a1);
}

void sub_20C232DF0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C232E34((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C232E34(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C232EB8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C232EB8(a1, *a2);
    sub_20C232EB8(a1, a2[1]);
    sub_20C232E34((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20C232F00(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20C188D88(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C232F80(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;

  if (sub_20C188D88(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_20C232FE4(a2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C232FE4(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C233038(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

_QWORD *sub_20C233038(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

_DWORD *sub_20C2330C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(v4 + 16), (_DWORD *)(a2 + 16));
  result = sub_20BFD38DC((_DWORD *)(v4 + 20), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 8) = v4 + 24;
  return result;
}

uint64_t sub_20C23311C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v14 = v10;
  v15 = &v10[24 * v4];
  v17 = &v10[24 * v9];
  v11 = v15;
  *(_OWORD *)v15 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)v11 + 4, (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)v11 + 5, (_DWORD *)(a2 + 20));
  v16 = (char *)v11 + 24;
  sub_20C233238(a1, &v14);
  v12 = a1[1];
  sub_20C233458(&v14);
  return v12;
}

void sub_20C233224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C233458((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C233238(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2332AC((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2332AC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3 - 2;
    do
    {
      v10 = v9 - 4;
      *(_OWORD *)(v7 - 24) = *((_OWORD *)v9 - 1);
      *((_QWORD *)v9 - 1) = 0;
      *((_QWORD *)v9 - 2) = 0;
      sub_20BFD38A4((_DWORD *)(v7 - 8), v9);
      sub_20BFD38DC((_DWORD *)(v7 - 4), v9 + 1);
      v7 = *((_QWORD *)&v16 + 1) - 24;
      *((_QWORD *)&v16 + 1) -= 24;
      v9 -= 6;
    }
    while (v10 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C233370((uint64_t)v13);
  return v11;
}

uint64_t sub_20C233370(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2333A4((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C2333A4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2333F4(v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C2333F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void **sub_20C233458(void **a1)
{
  sub_20C233488((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C233488(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 24;
      result = sub_20C2333F4(v4, v1 - 24);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

__n128 sub_20C2334D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C52BD90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C23350C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C52BD90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *sub_20C23352C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v19;
  _DWORD *v20;

  v7 = (uint64_t *)sub_20C22F36C(*(_QWORD *)(a1 + 8), a2, (char *)a3);
  sub_20C1034E8((uint64_t *)&v19, v7);
  v8 = *(uint64_t ***)(a1 + 16);
  v20 = (_DWORD *)a3;
  v9 = sub_20C2336B8(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (uint64_t)&unk_20CAC184C, &v20);
  v10 = (unsigned int *)v9[6];
  *(_OWORD *)(v9 + 5) = v19;
  *((_QWORD *)&v19 + 1) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    v14 = *((_QWORD *)&v19 + 1);
    *(_QWORD *)&v19 = 0;
    if (*((_QWORD *)&v19 + 1))
    {
      v15 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  sub_20BFD6E54(&v19, (_DWORD *)a3);
  sub_20BFD6EA4((_DWORD *)&v19 + 1, (_DWORD *)(a3 + 4));
  sub_20BFD38A4((_DWORD *)a4, &v19);
  sub_20BFD38DC((_DWORD *)(a4 + 4), (_DWORD *)&v19 + 1);
  *(_BYTE *)(a4 + 8) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  return sub_20BFD265C(&v19);
}

void sub_20C233658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C233670(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52BE00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2336AC()
{
  return &unk_24C52BE00;
}

uint64_t *sub_20C2336B8(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20C137858((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C233760((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C233860((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C233760@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C2337C8((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C2337B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C233860(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2337C8(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)(a1 + 24), 0.0, 1.0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_20C233834(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
    sub_20C96B4E8(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C((_DWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_20C233860(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2338A4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_DWORD *sub_20C2338A4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void sub_20C23390C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C23390C(a1, *a2);
    sub_20C23390C(a1, a2[1]);
    sub_20C2338A4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

__n128 sub_20C23395C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C52BE20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C233994(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C52BE20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2339B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  double result;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;

  v7 = (uint64_t *)sub_20C22F36C(*(_QWORD *)(a1 + 8), a2, (char *)a3);
  sub_20C1034E8((uint64_t *)&v19, v7);
  v8 = *(uint64_t ***)(a1 + 16);
  v21 = a3;
  v9 = sub_20C233B2C(v8, (const void **)a3, (uint64_t)&unk_20CAC184C, &v21);
  v10 = (unsigned int *)v9[8];
  *(_OWORD *)(v9 + 7) = v19;
  *((_QWORD *)&v19 + 1) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    v14 = *((_QWORD *)&v19 + 1);
    *(_QWORD *)&v19 = 0;
    if (*((_QWORD *)&v19 + 1))
    {
      v15 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(&v19, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 2);
  }
  result = *(double *)&v19;
  *(_OWORD *)a4 = v19;
  *(_QWORD *)(a4 + 16) = v20;
  *(_BYTE *)(a4 + 24) = 1;
  return result;
}

void sub_20C233ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C233AE4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52BE90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C233B20()
{
  return &unk_24C52BE90;
}

uint64_t *sub_20C233B2C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C233BD4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C233CD4((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20C233BD4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C233C3C(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C233C24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C233CD4(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20C233C3C(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  *((_QWORD *)__dst + 9) = 0;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst + 5, 0.0, 1.0);
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  *((_QWORD *)__dst + 9) = 0;
  return __dst;
}

void sub_20C233CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  if (v3)
    sub_20C96B4E8(v3);
  sub_20C96B518(v1);
  _Unwind_Resume(a1);
}

void sub_20C233CD4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C233D18((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C233D18(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C233D88(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C233D88(a1, *a2);
    sub_20C233D88(a1, a2[1]);
    sub_20C233D18((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20C233DD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C234000(*(_BYTE **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C233E50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6[8];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C2340D8(a2, v6);
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)v4 = v6[0];
    sub_20BE7598C((uint64_t *)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v7 = 0uLL;
    v8 = 0;
    sub_20BE7598C((uint64_t *)(v4 + 32));
    *(_OWORD *)(v4 + 32) = v9;
    *(_QWORD *)(v4 + 48) = v10;
    v9 = 0uLL;
    v10 = 0;
    sub_20BE7598C((uint64_t *)(v4 + 56));
    *(_OWORD *)(v4 + 56) = v11;
    *(_QWORD *)(v4 + 72) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20BE7598C((uint64_t *)(v4 + 80));
    *(_OWORD *)(v4 + 80) = v13;
    *(_QWORD *)(v4 + 96) = v14;
    v13 = 0uLL;
    v14 = 0;
    sub_20BE7598C((uint64_t *)(v4 + 104));
    *(_OWORD *)(v4 + 104) = v15;
    *(_QWORD *)(v4 + 120) = v16;
    v15 = 0uLL;
    v16 = 0;
    sub_20BE7598C((uint64_t *)(v4 + 128));
    *(_OWORD *)(v4 + 128) = v17;
    *(_QWORD *)(v4 + 144) = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = (void **)&v17;
    sub_20BDE5038(&v19);
    v19 = (void **)&v15;
    sub_20BDE5038(&v19);
    v19 = (void **)&v13;
    sub_20BDE5038(&v19);
    v19 = (void **)&v11;
    sub_20BDE5038(&v19);
    v19 = (void **)&v9;
    sub_20BDE5038(&v19);
    v19 = (void **)&v7;
    sub_20BDE5038(&v19);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_BYTE *sub_20C234000(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2)
  {
    sub_20BE75818((uint64_t)(a1 + 8), *(std::string **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    sub_20BE75818((uint64_t)(a1 + 32), *(std::string **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    sub_20BE75818((uint64_t)(a1 + 56), *(std::string **)(a2 + 56), *(__int128 **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
    sub_20BE75818((uint64_t)(a1 + 80), *(std::string **)(a2 + 80), *(__int128 **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
    sub_20BE75818((uint64_t)(a1 + 104), *(std::string **)(a2 + 104), *(__int128 **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    sub_20BE75818((uint64_t)(a1 + 128), *(std::string **)(a2 + 128), *(__int128 **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  }
  return a1;
}

char *sub_20C2340D8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  char *result;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)a2);
  v4 = (char *)sub_20C02FE90(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Swap(v4, a2);
  v6 = a1[1];
  if (v6 && (a1[1] & 3) != 3)
    result = (char *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C234138(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C020EAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23414C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t result;

  if (sub_20C0302AC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(uint64_t ***)(a1 + 8);
    if (v6 != (uint64_t **)v5)
      sub_20BDFC4AC(v6, *(__int128 **)v5, (__int128 *)(v5 + 8));
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C2341D8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (sub_20C0302AC(a2))
  {
    sub_20C2342A4((uint64_t)a2, &v10);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = v4 + 8;
    sub_20BDE9D48(v4, *(_QWORD **)(v4 + 8));
    *(_QWORD *)v4 = v10;
    v6 = v11;
    *(_QWORD *)(v4 + 8) = v11;
    v7 = v12;
    *(_QWORD *)(v4 + 16) = v12;
    if (v7)
    {
      v8 = 0;
      v6[2] = v5;
      v10 = &v11;
      v11 = 0;
      v12 = 0;
    }
    else
    {
      *(_QWORD *)v4 = v5;
      v8 = v11;
    }
    sub_20BDE9D48((uint64_t)&v10, v8);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_20C2342A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *result;
  uint64_t v6;
  BOOL v7;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4 = (uint64_t *)sub_20C23431C((const void ****)a1);
  result = sub_20BF07C64(v4, (uint64_t)a2);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    v7 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v7 = 1;
  if (!v7)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_20C234304(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDE9D48(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

const void ***sub_20C23431C(const void ****a1)
{
  const void ***v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, const void ****))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C03071C(a1);
}

_QWORD *sub_20C2343AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD v29[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      sub_20BDDF694();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v29[4] = v9;
    if (v17)
      v18 = (char *)sub_20BDEA2F0(v9, v17);
    else
      v18 = 0;
    v25 = &v18[16 * v15];
    v29[0] = v18;
    v29[1] = v25;
    v29[3] = &v18[16 * v17];
    v26 = 16 * a5;
    v27 = &v25[16 * a5];
    do
    {
      *(_OWORD *)v25 = *(_OWORD *)a3;
      v25 += 16;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      a3 += 16;
      v26 -= 16;
    }
    while (v26);
    v29[2] = v27;
    v5 = (_QWORD *)sub_20BFC7064(a1, v29, v5);
    sub_20BDEA324((uint64_t)v29);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = a3 + 16 * a5;
LABEL_18:
    sub_20BFC6E90((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v24 = (uint64_t)v5;
      do
      {
        sub_20BDE82DC(v24, (__int128 *)a3);
        a3 += 16;
        v24 += 16;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = a3 + 16 * v19;
  v21 = *(_QWORD *)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_OWORD **)(v9 - 8);
    do
    {
      *v23++ = *(_OWORD *)v22;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v22 += 16;
      v21 += 16;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_20C234540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDEA324((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C234554(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a2;
  if ((char *)a3 - (char *)a2 >= 1)
  {
    v6 = a3 - a2;
    v7 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 56) - v7 < v6)
    {
      v8 = *(float *)(a1 + 68);
      v9 = vcvtps_u32_f32((float)(v7 + v6) / v8);
      v10 = vcvtps_u32_f32((float)v7 / v8);
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v10;
      sub_20C2317F0(a1, v11);
    }
  }
  while (v4 != a3)
  {
    sub_20C2345F0((uint64_t *)a1, v4, v4);
    ++v4;
  }
}

uint64_t sub_20C2345F0(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *a1;
  v8 = a1[4];
  v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 16 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    v12 = sub_20C23169C((uint64_t)a1);
    v13 = a1[4];
    if ((v12 & 1) != 0)
    {
      v9 = v6 & *a1;
      v14 = *(__int16 *)(v13 + 16 * v9 + 4);
      if (v14 < 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          v10 = (__int16)(v10 + 1);
          v9 = (v9 + 1) & *a1;
          v14 = *(__int16 *)(v13 + 16 * v9 + 4);
        }
        while (v10 <= v14);
      }
      v15 = (unsigned __int16)v14;
    }
    else
    {
      v15 = *(unsigned __int16 *)(v13 + 16 * v9 + 4);
    }
    if (v15 == 0xFFFF)
    {
      v16 = v13 + 16 * v9;
      v17 = *a3;
      *(_QWORD *)(v16 + 8) = *a3;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          *(_QWORD *)(v16 + 8) &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_DWORD *)v16 = v6;
      *(_WORD *)(v16 + 4) = v10;
    }
    else
    {
      sub_20C234788(a1, v9, v10, v6, a3);
    }
    ++a1[6];
    return a1[4] + 16 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      result = v8 + 16 * v9;
      if ((*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8) == v5)
        break;
      v10 = (__int16)(v10 + 1);
      v9 = (v9 + 1) & v7;
      if (v10 > *(__int16 *)(v8 + 16 * v9 + 4))
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t *sub_20C234788(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t *result;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *a5;
  v11 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v11 = (uint64_t)v6;
  }
  result = sub_20C231974(a1, a2, a3, a4, &v11);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return result;
}

int *sub_20C234818(int *result)
{
  int *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = result;
  if (*((float *)result + 16) <= 0.0)
  {
    v2 = *((_QWORD *)result + 1);
    for (i = *((_QWORD *)result + 2); v2 != i; v2 += 16)
    {
      if (*(__int16 *)(v2 + 4) != -1)
      {
        v4 = *(_QWORD *)(v2 + 8);
        if ((v4 & 7) != 0)
        {
          v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v6 = __ldxr(v5);
          while (__stlxr(v6 - 2, v5));
        }
        *(_WORD *)(v2 + 4) = -1;
      }
    }
    *((_QWORD *)result + 6) = 0;
    *((_BYTE *)result + 72) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    sub_20C220824((uint64_t *)result + 1);
    result = sub_20C2206E8();
    *((_WORD *)v1 + 36) = 0;
    *((_QWORD *)v1 + 4) = result;
    *((_QWORD *)v1 + 5) = 0;
    *((_QWORD *)v1 + 6) = 0;
    *((_QWORD *)v1 + 7) = 0;
  }
  return result;
}

void sub_20C2348B8(void *__p)
{
  operator delete(__p);
}

void sub_20C2348C0()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "PcpDependencyTypeNone");
  sub_20BDDC0E4(__p, "non-dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeRoot");
  sub_20BDDC0E4(__p, "root dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypePurelyDirect");
  sub_20BDDC0E4(__p, "purely-direct dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypePartlyDirect");
  sub_20BDDC0E4(__p, "partly-direct dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeDirect");
  sub_20BDDC0E4(__p, "direct dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeAncestral");
  sub_20BDDC0E4(__p, "ancestral dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeVirtual");
  sub_20BDDC0E4(__p, "virtual dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 16, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeNonVirtual");
  sub_20BDDC0E4(__p, "non-virtual dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 32, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeAnyNonVirtual");
  sub_20BDDC0E4(__p, "any non-virtual dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 47, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "PcpDependencyTypeAnyIncludingVirtual");
  sub_20BDDC0E4(__p, "any dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52BF10, 63, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C234C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  int ArcType;
  uint64_t OriginNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t ParentNode;
  uint64_t result;
  uint64_t v9;

  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(this))
    return 1;
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType != 6 && ArcType != 1)
    return 1;
  OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
  v6 = v5;
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  result = 0;
  if (v6 == v9 && OriginNode == ParentNode)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char IsDueToAncestor;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this))
    return 1;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(this))
  {
    result = pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency(this, v3);
    if (!(_DWORD)result)
      return result;
    v5 = 16;
  }
  else
  {
    v5 = 0;
  }
  v12 = *(_OWORD *)this;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12)
    && v6 != -1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      IsDueToAncestor = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12);
      v8 |= IsDueToAncestor ^ 1;
      v7 |= IsDueToAncestor;
      if ((v7 & 1) != 0 && (v8 & 1) != 0)
        goto LABEL_16;
      *(_QWORD *)&v12 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12);
      *((_QWORD *)&v12 + 1) = v10;
    }
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12)
         && v11 != -1);
    if ((v8 & 1) != 0)
    {
      if ((v7 & 1) != 0)
      {
LABEL_16:
        v5 |= 4u;
        return ~(2 * v5) & 0x20 | v5;
      }
      v5 |= 2u;
    }
    else if ((v7 & 1) != 0)
    {
      v5 |= 8u;
    }
  }
  return ~(2 * v5) & 0x20 | v5;
}

void pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(pxrInternal__aapl__pxrReserved__ *this@<X0>, std::string *a2@<X8>)
{
  char v3;
  void *__p[2];
  char v5;
  char **v6;
  char *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  if ((_DWORD)this == 1)
  {
    sub_20BDDC0E4(__p, "root");
    sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
    goto LABEL_19;
  }
  v3 = (char)this;
  if (!(_DWORD)this)
  {
    sub_20BDDC0E4(__p, "none");
    sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
    goto LABEL_19;
  }
  if ((this & 2) != 0
    && (sub_20BDDC0E4(__p, "purely-direct"), sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p), v5 < 0))
  {
    operator delete(__p[0]);
    if ((v3 & 4) == 0)
      goto LABEL_11;
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_11;
  }
  sub_20BDDC0E4(__p, "partly-direct");
  sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
LABEL_11:
  if ((v3 & 8) != 0
    && (sub_20BDDC0E4(__p, "ancestral"), sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p), v5 < 0))
  {
    operator delete(__p[0]);
    if ((v3 & 0x10) != 0)
    {
LABEL_14:
      sub_20BDDC0E4(__p, "virtual");
      sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
      if (v5 < 0)
        operator delete(__p[0]);
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    goto LABEL_14;
  }
  if ((v3 & 0x20) == 0)
    goto LABEL_21;
  sub_20BDDC0E4(__p, "non-virtual");
  sub_20BEE68F0((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
LABEL_19:
  if (v5 < 0)
    operator delete(__p[0]);
LABEL_21:
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (uint64_t)&v6, a2);
  sub_20BDECAB8((uint64_t)&v6, v7[0]);
}

void sub_20C234FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_20BDECAB8((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::PcpDynamicFileFormatContext(__n128 *a1, __n128 *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  a1[2].n128_u64[0] = a5;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  a1[2].n128_u64[0] = a5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, BOOL *a3)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v6;
  uint64_t *Identifier;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v11;
  pxrInternal__aapl__pxrReserved__::VtValue *FallbackValue;
  unint64_t v14;
  const char *v15;
  _QWORD v16[4];
  char v17;

  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v6);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(Identifier);
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v8);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (FieldDefinition
    && (v11 = FieldDefinition,
        (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsPlugin(FieldDefinition) & 1) != 0))
  {
    if (a3)
    {
      FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v11);
      *a3 = sub_20BF4A73C(FallbackValue);
    }
    return 1;
  }
  else
  {
    v16[0] = "pcp/dynamicFileFormatContext.cpp";
    v16[1] = "_IsAllowedFieldForArguments";
    v16[2] = 224;
    v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(const TfTok"
             "en &, BOOL *) const";
    v17 = 0;
    v14 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Field %s is not a plugin field and is not supported for composing dynamic file format arguments", v15);
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeValue(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *Path;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::VtValue ***v16;
  pxrInternal__aapl__pxrReserved__::VtValue **v17;
  BOOL v18;
  pxrInternal__aapl__pxrReserved__::VtValue *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;

  v19 = a3;
  v18 = 0;
  v5 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(this, a2, &v18))
  {
    v6 = *((_QWORD *)this + 3);
    if (v6)
      sub_20C129930(v6, a2, (uint64_t *)a2);
    if (v18)
    {
      v16 = &v17;
      v17 = 0;
      v7 = *((_QWORD *)this + 2);
      v21 = *(_OWORD *)this;
      v22 = v7;
      v23 = 0;
      v20 = 0;
      Path = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v21);
      sub_20C2354D8((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)&v21, Path, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, a2, (pxrInternal__aapl__pxrReserved__ **)&v16);
      if ((v20 & 7) != 0)
      {
        v9 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      v5 = HIBYTE(v23) != 0;
      if (HIBYTE(v23))
        sub_20BF4AB1C(v19, (const void ****)&v17);
      sub_20BF49F14((_QWORD ***)&v17, 0);
    }
    else
    {
      v17 = &v19;
      v11 = *((_QWORD *)this + 2);
      v21 = *(_OWORD *)this;
      v22 = v11;
      v23 = 1;
      v20 = 0;
      v12 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v21);
      sub_20C235B2C((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)&v21, v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, a2, (_QWORD ***)&v17);
      if ((v20 & 7) != 0)
      {
        v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      return HIBYTE(v23) != 0;
    }
  }
  return v5;
}

void sub_20C2352D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeValueStack(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *Path;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;

  v12 = a3;
  result = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(a1, a2, 0);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      sub_20C129930(v6, a2, (uint64_t *)a2);
    v11 = &v12;
    v7 = *((_QWORD *)a1 + 2);
    v14 = *(_OWORD *)a1;
    v15 = v7;
    v16 = 0;
    v13 = 0;
    Path = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v14);
    sub_20C236050((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)&v14, Path, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, a2, (_QWORD ***)&v11);
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    return HIBYTE(v16) != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeAttributeDefaultValue(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  const pxrInternal__aapl__pxrReserved__::PcpNodeRef *Path;
  pxrInternal__aapl__pxrReserved__::VtValue **v11;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;

  v12 = a3;
  v5 = *((_QWORD *)this + 4);
  if (v5)
    sub_20C129930(v5, a2, (uint64_t *)a2);
  v11 = &v12;
  v6 = *((_QWORD *)this + 2);
  v13 = *(_OWORD *)this;
  v14 = v6;
  v15 = 1;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 88);
  Path = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
  sub_20C236678((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)&v13, Path, a2, v8, (_QWORD ***)&v11);
  return HIBYTE(v15);
}

__n128 pxrInternal__aapl__pxrReserved__::Pcp_CreateDynamicFileFormatContext@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __n128 result;

  result = *a1;
  *a5 = *a1;
  a5[1].n128_u64[0] = a2;
  a5[1].n128_u64[1] = a3;
  a5[2].n128_u64[0] = a4;
  return result;
}

uint64_t sub_20C2354D8(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, pxrInternal__aapl__pxrReserved__ **a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  _BYTE v26[16];

  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26))
    goto LABEL_8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_8;
  v23 = *(_OWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = -1;
  }
  v16 = sub_20C2354D8(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if ((v16 & 1) != 0)
    v17 = 1;
  else
LABEL_8:
    v17 = sub_20C235668(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  return v17;
}

void sub_20C23562C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C235A74((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C235668(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, pxrInternal__aapl__pxrReserved__ **a6)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  uint64_t Layers;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  const char **v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v25;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v27;
  char *v28;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v29;
  uint64_t v30;
  char *v31;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v52);
  }
  else
  {
    sub_20BFD6E54(&v52, a3);
    sub_20BFD6EA4(&v53, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  v17 = *(uint64_t **)Layers;
  v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_15:
    v22 = *((_QWORD *)a2 + 1);
    v50 = *(_QWORD *)a2;
    v51 = v22;
    v23 = **(_QWORD **)(v50 + 16);
    v24 = (const char *)*(unsigned __int16 *)(v23 + 48 * v22 + 28);
    v44 = (char *)v50;
    v45 = v24;
    v46 = v23;
    v47 = (const char *)v50;
    v48 = 0xFFFFLL;
    v49 = v23;
    while (v45 != (const char *)v48 || v44 != v47)
    {
      v25 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v44, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v42);
      v29 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v27, v28);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, &v54);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v54))
      {
        v32 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v44, v30, v31);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v32, &v42);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, &v39);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v41, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, 1);
          sub_20BFD3EBC((int *)&v54, (int *)&v41);
          sub_20BFD3F10((int *)&v54 + 1, (int *)&v41 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
          sub_20BFD265C(&v41);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
          sub_20BFD265C(&v39);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
        sub_20BFD265C(&v42);
        v35 = sub_20C20495C(&v44, v33, v34);
        v36 = sub_20C235668(a1, v35, &v54, a4, a5, a6);
      }
      else
      {
        v36 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
      sub_20BFD265C(&v54);
      if (v36 != 6 && v36)
        goto LABEL_28;
      sub_20C2049E8(&v44);
    }
    v37 = 0;
  }
  else
  {
    while (1)
    {
      v55 = 0;
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
      {
        if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
        {
          v20 = *a6;
          v21 = (v55 & 4) != 0
              ? (const char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54)
              : (const char **)v54;
          pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(v20, v21, 0);
        }
        else
        {
          v44 = "pcp/dynamicFileFormatContext.cpp";
          v45 = "operator()";
          v46 = 261;
          v47 = "auto pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeValue(const TfToken &, VtValu"
                "e *)::(anonymous class)::operator()(VtValue &&) const";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Expected value to contain VtDictionary");
        }
        *(_BYTE *)(a1 + 25) = 1;
        if (*(_BYTE *)(a1 + 24))
          break;
      }
      sub_20BF4C2D8((uint64_t)&v54);
      if (++v17 == v18)
        goto LABEL_15;
    }
    sub_20BF4C2D8((uint64_t)&v54);
LABEL_28:
    v37 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
  sub_20BFD265C(&v52);
  return v37;
}

void sub_20C2359D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C235A74(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_QWORD *sub_20C235AA0(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (result[1] == result[4] && *result == result[3])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateC"
            "hildrenConstRange>::operator->() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChildrenConstRange"
            ", Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C235B2C(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, _QWORD ***a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  _BYTE v26[16];

  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26))
    goto LABEL_8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_8;
  v23 = *(_OWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = -1;
  }
  v16 = sub_20C235B2C(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if ((v16 & 1) != 0)
    v17 = 1;
  else
LABEL_8:
    v17 = sub_20C235CBC(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  return v17;
}

void sub_20C235C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C235A74((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C235CBC(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, _QWORD ***a6)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  uint64_t Layers;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v23;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v25;
  char *v26;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v44);
  }
  else
  {
    sub_20BFD6E54(&v44, a3);
    sub_20BFD6EA4(&v45, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  v17 = *(uint64_t **)Layers;
  v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_8:
    v20 = *((_QWORD *)a2 + 1);
    v52 = *(_QWORD *)a2;
    v53 = v20;
    v21 = **(_QWORD **)(v52 + 16);
    v22 = *(unsigned __int16 *)(v21 + 48 * v20 + 28);
    v46 = v52;
    v47 = v22;
    v48 = v21;
    v49 = v52;
    v50 = 0xFFFFLL;
    v51 = v21;
    while (v47 != v50 || v46 != v49)
    {
      v23 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v46, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v40);
      v27 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v25, v26);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_20BFD265C(&v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        v30 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v46, v28, v29);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v30, &v40);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v37);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, 1);
          sub_20BFD3EBC(&v42, (int *)&v39);
          sub_20BFD3F10(&v43, (int *)&v39 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_20BFD265C(&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_20BFD265C(&v37);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_20BFD265C(&v40);
        v33 = sub_20C20495C(&v46, v31, v32);
        v34 = sub_20C235CBC(a1, v33, &v42, a4, a5, a6);
      }
      else
      {
        v34 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (v34 != 6 && v34)
        goto LABEL_21;
      sub_20C2049E8(&v46);
    }
    v35 = 0;
  }
  else
  {
    while (1)
    {
      v47 = 0;
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v46))
      {
        sub_20BF4B5D8(**a6, &v46);
        *(_BYTE *)(a1 + 25) = 1;
        if (*(_BYTE *)(a1 + 24))
          break;
      }
      sub_20BF4C2D8((uint64_t)&v46);
      if (++v17 == v18)
        goto LABEL_8;
    }
    sub_20BF4C2D8((uint64_t)&v46);
LABEL_21:
    v35 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_20BFD265C(&v44);
  return v35;
}

void sub_20C235FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C236050(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, _QWORD ***a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  _BYTE v26[16];

  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26))
    goto LABEL_8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_8;
  v23 = *(_OWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = -1;
  }
  v16 = sub_20C236050(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if ((v16 & 1) != 0)
    v17 = 1;
  else
LABEL_8:
    v17 = sub_20C2361E0(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  return v17;
}

void sub_20C2361A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C235A74((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2361E0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, _QWORD ***a6)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  uint64_t Layers;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v23;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v25;
  char *v26;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v44);
  }
  else
  {
    sub_20BFD6E54(&v44, a3);
    sub_20BFD6EA4(&v45, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  v17 = *(uint64_t **)Layers;
  v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_8:
    v20 = *((_QWORD *)a2 + 1);
    v52 = *(_QWORD *)a2;
    v53 = v20;
    v21 = **(_QWORD **)(v52 + 16);
    v22 = *(unsigned __int16 *)(v21 + 48 * v20 + 28);
    v46 = v52;
    v47 = v22;
    v48 = v21;
    v49 = v52;
    v50 = 0xFFFFLL;
    v51 = v21;
    while (v47 != v50 || v46 != v49)
    {
      v23 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v46, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v40);
      v27 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v25, v26);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_20BFD265C(&v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        v30 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v46, v28, v29);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v30, &v40);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v37);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, 1);
          sub_20BFD3EBC(&v42, (int *)&v39);
          sub_20BFD3F10(&v43, (int *)&v39 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_20BFD265C(&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_20BFD265C(&v37);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_20BFD265C(&v40);
        v33 = sub_20C20495C(&v46, v31, v32);
        v34 = sub_20C2361E0(a1, v33, &v42, a4, a5, a6);
      }
      else
      {
        v34 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (v34 != 6 && v34)
        goto LABEL_21;
      sub_20C2049E8(&v46);
    }
    v35 = 0;
  }
  else
  {
    while (1)
    {
      v47 = 0;
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v46))
      {
        sub_20C236574(**a6, &v46);
        *(_BYTE *)(a1 + 25) = 1;
        if (*(_BYTE *)(a1 + 24))
          break;
      }
      sub_20BF4C2D8((uint64_t)&v46);
      if (++v17 == v18)
        goto LABEL_8;
    }
    sub_20BF4C2D8((uint64_t)&v46);
LABEL_21:
    v35 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_20BFD265C(&v44);
  return v35;
}

void sub_20C2364D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C236574(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20BDDF694();
    v10 = v5 - *a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[16 * v9];
    v18 = &v13[16 * v12];
    sub_20BF4C200(v16, a2);
    v17 = v16 + 16;
    sub_20BFC397C(a1, &v15);
    v8 = a1[1];
    sub_20BFC3A00((uint64_t)&v15);
  }
  else
  {
    sub_20BF4C200(*(_QWORD **)(v4 - 8), a2);
    v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_20C236664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFC3A00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C236678(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, _QWORD ***a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  _BYTE v26[16];

  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26))
    goto LABEL_8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_8;
  v23 = *(_OWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = -1;
  }
  v16 = sub_20C236678(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if ((v16 & 1) != 0)
    v17 = 1;
  else
LABEL_8:
    v17 = sub_20C236808(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  return v17;
}

void sub_20C2367CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20C235A74((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C236808(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, _QWORD ***a6)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v13;
  uint64_t Layers;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v23;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToParent;
  const char *v25;
  char *v26;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v44);
  }
  else
  {
    sub_20BFD6E54(&v44, a3);
    sub_20BFD6EA4(&v45, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  v17 = *(uint64_t **)Layers;
  v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_8:
    v20 = *((_QWORD *)a2 + 1);
    v52 = *(_QWORD *)a2;
    v53 = v20;
    v21 = **(_QWORD **)(v52 + 16);
    v22 = *(unsigned __int16 *)(v21 + 48 * v20 + 28);
    v46 = v52;
    v47 = v22;
    v48 = v21;
    v49 = v52;
    v50 = 0xFFFFLL;
    v51 = v21;
    while (v47 != v50 || v46 != v49)
    {
      v23 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v46, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v40);
      v27 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v25, v26);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_20BFD265C(&v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        v30 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_20C235AA0(&v46, v28, v29);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v30, &v40);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v37);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, 1);
          sub_20BFD3EBC(&v42, (int *)&v39);
          sub_20BFD3F10(&v43, (int *)&v39 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_20BFD265C(&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_20BFD265C(&v37);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_20BFD265C(&v40);
        v33 = sub_20C20495C(&v46, v31, v32);
        v34 = sub_20C236808(a1, v33, &v42, a4, a5, a6);
      }
      else
      {
        v34 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if (v34 != 6 && v34)
        goto LABEL_21;
      sub_20C2049E8(&v46);
    }
    v35 = 0;
  }
  else
  {
    while (1)
    {
      v47 = 0;
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v46))
      {
        sub_20BF4B5D8(**a6, &v46);
        *(_BYTE *)(a1 + 25) = 1;
        if (*(_BYTE *)(a1 + 24))
          break;
      }
      sub_20BF4C2D8((uint64_t)&v46);
      if (++v17 == v18)
        goto LABEL_8;
    }
    sub_20BF4C2D8((uint64_t)&v46);
LABEL_21:
    v35 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_20BFD265C(&v44);
  return v35;
}

void sub_20C236AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::PcpDynamicFileFormatDependencyData(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this, uint64_t **a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = operator new(0x48uLL);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    sub_20C2372E8(v4, *v3, v3[1], 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 3));
    sub_20C2373F4(v4 + 3, (uint64_t)(v3 + 3));
    sub_20C2373F4(v4 + 6, (uint64_t)(v3 + 6));
    v5 = *(_QWORD *)this;
    *(_QWORD *)this = v4;
    if (v5)
      sub_20C201118((uint64_t)this, v5);
  }
  return this;
}

void sub_20C236C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v13 = v12;
  sub_20BF2B200(v13, *(_QWORD **)(v11 + 32));
  a10 = (void **)v11;
  sub_20BF8CB68(&a10);
  operator delete((void *)v11);
  v15 = *v10;
  *v10 = 0;
  if (v15)
    sub_20C201118((uint64_t)v10, v15);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AddDependencyContext(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a2;
  v10 = (_OWORD *)*a1;
  if (!*a1)
  {
    v10 = operator new(0x48uLL);
    *v10 = 0u;
    v10[1] = 0u;
    v10[2] = 0u;
    *((_QWORD *)v10 + 3) = v10 + 2;
    *((_QWORD *)v10 + 8) = 0;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 6) = (char *)v10 + 56;
    *a1 = (uint64_t)v10;
  }
  v11 = (_QWORD *)*((_QWORD *)v10 + 1);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 2))
  {
    v12 = sub_20C237448((uint64_t *)v10, &v14, a3);
  }
  else
  {
    *v11 = a2;
    v12 = (uint64_t)(v11 + 3);
    sub_20BF4C200(v11 + 1, a3);
  }
  *((_QWORD *)v10 + 1) = v12;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantFieldNames(*a1, a4);
  return pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantAttributeNames(*a1, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantFieldNames(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 24);
  if (*(_QWORD *)(a1 + 40))
    return sub_20C237264(v3, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  else
    return sub_20BF07C64(v3, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantAttributeNames(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 48);
  if (*(_QWORD *)(a1 + 64))
    return sub_20C237264(v3, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  else
    return sub_20BF07C64(v3, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AppendDependencyData(uint64_t *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *a2;
  if (*a2)
  {
    v4 = (uint64_t **)result;
    result = (uint64_t *)*result;
    if (result)
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[1];
      if ((_QWORD *)*v2 != v6)
      {
        do
        {
          v7 = *v4;
          v8 = (_QWORD *)(*v4)[1];
          if ((unint64_t)v8 >= (*v4)[2])
          {
            v9 = sub_20C2375E0(*v4, v5);
          }
          else
          {
            *v8 = *v5;
            v9 = (uint64_t)(v8 + 3);
            sub_20BF4C200(v8 + 1, v5 + 1);
          }
          v7[1] = v9;
          v5 += 3;
        }
        while (v5 != v6);
        result = *v4;
        v2 = *a2;
      }
      pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantFieldNames((uint64_t)result, (uint64_t)(v2 + 3));
      return pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantAttributeNames((uint64_t)*v4, (uint64_t)(*a2 + 6));
    }
    else
    {
      *v4 = v2;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanFieldChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[4];
  char v16;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(_QWORD **)(v4 + 32);
    if (v5)
    {
      v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v10 = v5[4] & 0xFFFFFFFFFFFFFFF8;
        if (v9 >= v10)
          break;
LABEL_7:
        v5 = (_QWORD *)*v5;
        if (!v5)
          return 0;
      }
      if (v10 < v9)
      {
        ++v5;
        goto LABEL_7;
      }
      v12 = *(uint64_t **)v4;
      v13 = *(uint64_t **)(v4 + 8);
      if (*(uint64_t **)v4 != v13)
      {
        do
        {
          v14 = *v12;
          if (!*v12)
          {
            v15[0] = "pcp/dynamicFileFormatDependencyData.cpp";
            v15[1] = "CanFieldChangeAffectFileFormatArguments";
            v15[2] = 106;
            v15[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanFieldChangeAffectFile"
                     "FormatArguments(const TfToken &, const VtValue &, const VtValue &) const";
            v16 = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "contextData.first", 0))goto LABEL_13;
            v14 = *v12;
          }
          if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *, const pxrInternal__aapl__pxrReserved__::VtValue *, uint64_t *))(*(_QWORD *)v14 + 24))(v14, a2, a3, a4, v12 + 1) & 1) != 0)return 1;
LABEL_13:
          v12 += 3;
        }
        while (v12 != v13);
      }
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanAttributeDefaultValueChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[4];
  char v16;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(_QWORD **)(v4 + 56);
    if (v5)
    {
      v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v10 = v5[4] & 0xFFFFFFFFFFFFFFF8;
        if (v9 >= v10)
          break;
LABEL_7:
        v5 = (_QWORD *)*v5;
        if (!v5)
          return 0;
      }
      if (v10 < v9)
      {
        ++v5;
        goto LABEL_7;
      }
      v12 = *(uint64_t **)v4;
      v13 = *(uint64_t **)(v4 + 8);
      if (*(uint64_t **)v4 != v13)
      {
        do
        {
          v14 = *v12;
          if (!*v12)
          {
            v15[0] = "pcp/dynamicFileFormatDependencyData.cpp";
            v15[1] = "CanAttributeDefaultValueChangeAffectFileFormatArguments";
            v15[2] = 140;
            v15[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanAttributeDefaultValue"
                     "ChangeAffectFileFormatArguments(const TfToken &, const VtValue &, const VtValue &) const";
            v16 = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "contextData.first", 0))goto LABEL_13;
            v14 = *v12;
          }
          if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *, const pxrInternal__aapl__pxrReserved__::VtValue *, uint64_t *))(*(_QWORD *)v14 + 32))(v14, a2, a3, a4, v12 + 1) & 1) != 0)return 1;
LABEL_13:
          v12 += 3;
        }
        while (v12 != v13);
      }
    }
  }
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantFieldNames(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this)
{
  unsigned __int8 v1;
  int v3;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_2549881B0);
  if ((v1 & 1) == 0)
  {
    v4 = this;
    v3 = __cxa_guard_acquire(&qword_2549881B0);
    this = v4;
    if (v3)
    {
      qword_2549881A8 = 0;
      qword_2549881A0 = 0;
      qword_254988198 = (uint64_t)&qword_2549881A0;
      __cxa_atexit((void (*)(void *))sub_20C23718C, &qword_254988198, &dword_20BDBC000);
      __cxa_guard_release(&qword_2549881B0);
      this = v4;
    }
  }
  if (*(_QWORD *)this)
    return (uint64_t *)(*(_QWORD *)this + 24);
  else
    return &qword_254988198;
}

uint64_t sub_20C23718C(uint64_t a1)
{
  sub_20BF2B200(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this)
{
  unsigned __int8 v1;
  int v3;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_2549881D0);
  if ((v1 & 1) == 0)
  {
    v4 = this;
    v3 = __cxa_guard_acquire(&qword_2549881D0);
    this = v4;
    if (v3)
    {
      qword_2549881C8 = 0;
      qword_2549881C0 = 0;
      qword_2549881B8 = (uint64_t)&qword_2549881C0;
      __cxa_atexit((void (*)(void *))sub_20C23718C, &qword_2549881B8, &dword_20BDBC000);
      __cxa_guard_release(&qword_2549881D0);
      this = v4;
    }
  }
  if (*(_QWORD *)this)
    return (uint64_t *)(*(_QWORD *)this + 48);
  else
    return &qword_2549881B8;
}

uint64_t *sub_20C237264(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BFD23A4(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *sub_20C2372E8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = (_QWORD *)sub_20C23736C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C23734C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BF8CB68(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23736C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      sub_20BF4C6D0((_QWORD *)(a4 + v7 + 8), (_QWORD *)(a2 + v7 + 8));
      v7 += 24;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C2373D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 16;
    do
    {
      sub_20BF4C2D8(v4 + v2);
      v2 -= 24;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C2373F4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C237264(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20C237430(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2B200(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C237448(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[5];

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v16[4] = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BDE4FF4(v9, v11);
  else
    v12 = 0;
  v13 = &v12[24 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v16[3] = &v12[24 * v11];
  *(_QWORD *)v13 = *a2;
  sub_20BF4C200((_QWORD *)v13 + 1, a3);
  v16[2] = v13 + 24;
  sub_20C237550(a1, v16);
  v14 = a1[1];
  sub_20BF8CD70((uint64_t)v16);
  return v14;
}

void sub_20C23753C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF8CD70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C237550(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_QWORD *)(v4 - 24);
    v4 -= 24;
    *(_QWORD *)(v6 - 24) = v7;
    v6 -= 24;
    result = sub_20BF4C200((_QWORD *)(v6 + 8), (_QWORD *)(v4 + 8));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2375E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *a2;
  sub_20BF4C200((_QWORD *)v11 + 1, a2 + 1);
  v14[2] = v11 + 24;
  sub_20C237550(a1, v14);
  v12 = a1[1];
  sub_20BF8CD70((uint64_t)v14);
  return v12;
}

void sub_20C2376D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF8CD70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface::CanFieldChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface::CanAttributeDefaultValueChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  return 1;
}

void sub_20C237700()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "PcpErrorType_ArcCycle");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_ArcPermissionDenied");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_IndexCapacityExceeded");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_ArcCapacityExceeded");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_ArcNamespaceDepthCapacityExceeded");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InconsistentPropertyType");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InconsistentAttributeType");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InconsistentAttributeVariability");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InternalAssetPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidPrimPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidAssetPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidInstanceTargetPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidExternalTargetPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 12, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidTargetPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 13, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidReferenceOffset");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 14, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidSublayerOffset");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 15, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidSublayerOwnership");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 16, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidSublayerPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 17, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_InvalidVariantSelection");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 18, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_OpinionAtRelocationSource");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 20, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_PrimPermissionDenied");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 21, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_PropertyPermissionDenied");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 22, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_SublayerCycle");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 23, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_TargetPermissionDenied");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 24, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_UnresolvedPrimPath");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 25, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PcpErrorType_VariableExpressionError");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C52C620, 26, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C237F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorBase::PcpErrorBase(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_24C52BF78;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(pxrInternal__aapl__pxrReserved__::PcpErrorBase *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void **v10;

  *(_QWORD *)this = off_24C52BF78;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 25);
  sub_20BFD265C((_DWORD *)this + 24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)((char *)this + 72));
  v10 = (void **)((char *)this + 48);
  sub_20BDE9EB0(&v10);
  v2 = (unsigned int *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::New@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v3;

  v3 = operator new(0x80uLL);
  *(_QWORD *)v3 = off_24C52BF78;
  v3[2] = 0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 4));
  *(_QWORD *)v3 = off_24C52BFA0;
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 13) = 0;
  return sub_20C23C760(a1, (uint64_t)v3);
}

void sub_20C238120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::PcpErrorArcCycle(pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *)((char *)this + 16));
  *(_QWORD *)this = off_24C52BFA0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  return this;
}

{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *)((char *)this + 16));
  *(_QWORD *)this = off_24C52BFA0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::~PcpErrorArcCycle(pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *this)
{
  void **v2;

  *(_QWORD *)this = off_24C52BFA0;
  v2 = (void **)((char *)this + 104);
  sub_20C23C838(&v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void **v2;

  *(_QWORD *)this = off_24C52BFA0;
  v2 = (void **)((char *)this + 104);
  sub_20C23C838(&v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24C52BFA0;
  v3 = (void **)((char *)this + 104);
  sub_20C23C838(&v3);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  const std::string::value_type *v9;
  char **v10;
  const char *v11;
  char *v12;
  void *v13;
  void **v14;
  std::string::size_type v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *__p[2];
  unsigned __int8 v20;

  if (*((_QWORD *)this + 13) == *((_QWORD *)this + 14))
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    sub_20BDDC0E4(a2, "Cycle detected:\n");
    v4 = *((_QWORD *)this + 13);
    v5 = *((_QWORD *)this + 14) - v4;
    if (v5)
    {
      v6 = 0;
      v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 5);
      while (!v6)
      {
LABEL_12:
        sub_20C2384D4((uint64_t *)(v4 + 96 * v6));
        if (v18 >= 0)
          v13 = &v17;
        else
          v13 = v17;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\n", v11, v12, v13);
        if ((v20 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        if ((v20 & 0x80u) == 0)
          v15 = v20;
        else
          v15 = (std::string::size_type)__p[1];
        std::string::append(a2, (const std::string::value_type *)v14, v15);
        if ((char)v20 < 0)
          operator delete(__p[0]);
        if (v18 < 0)
          operator delete(v17);
        v4 = *((_QWORD *)this + 13);
        v16 = *((_QWORD *)this + 14);
        if (v6)
        {
          if (++v6 < 0xAAAAAAAAAAAAAAABLL * ((v16 - v4) >> 5))
          {
            std::string::append(a2, "which ");
            v4 = *((_QWORD *)this + 13);
            v16 = *((_QWORD *)this + 14);
          }
        }
        else
        {
          v6 = 1;
        }
        v7 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v4) >> 5);
        if (v6 >= v7)
          return;
      }
      if (v6 + 1 >= v7)
      {
        std::string::append(a2, "CANNOT ");
        v8 = *(_DWORD *)(v4 + 96 * v6 + 88) - 1;
        v9 = "refer to:\n";
        if (v8 <= 4)
        {
          v10 = off_24C52D120;
          goto LABEL_10;
        }
      }
      else
      {
        v8 = *(_DWORD *)(v4 + 96 * v6 + 88) - 1;
        v9 = "refers to:\n";
        if (v8 < 5)
        {
          v10 = off_24C52D0F8;
LABEL_10:
          v9 = v10[v8];
        }
      }
      std::string::append(a2, v9);
      goto LABEL_12;
    }
  }
}

void sub_20C238484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2384D4(uint64_t *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C238588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)operator new(0x120uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::PcpErrorArcPermissionDenied(v3);
  return sub_20C23C964(a1, (uint64_t)v3);
}

void sub_20C2385D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::PcpErrorArcPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 1;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 16));
  *(_QWORD *)this = off_24C52BFC8;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 192));
  return this;
}

void sub_20C23864C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase *v1;
  uint64_t v2;

  sub_20C218F6C(v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::~PcpErrorArcPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void **v18;

  *(_QWORD *)this = off_24C52BFC8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 69);
  sub_20BFD265C((_DWORD *)this + 68);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 248));
  v18 = (void **)((char *)this + 224);
  sub_20BDE9EB0(&v18);
  v2 = (unsigned int *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 25);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_20BFD265C((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 160));
  v18 = (void **)((char *)this + 136);
  sub_20BDE9EB0(&v18);
  v10 = (unsigned int *)*((_QWORD *)this + 16);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 14);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::~PcpErrorArcPermissionDenied(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *this@<X0>, std::string *a2@<X8>)
{
  const char *v4;
  char *v5;
  void **v6;
  unsigned int v7;
  const std::string::value_type *v8;
  const char *v9;
  char *v10;
  void *v11;
  void **v12;
  std::string::size_type v13;
  void *v14;
  char v15;
  void *__p[2];
  unsigned __int8 v17;

  sub_20C2384D4((uint64_t *)this + 13);
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\nCANNOT ", v4, v5, v6);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  v7 = *((_DWORD *)this + 70) - 1;
  if (v7 >= 5)
    v8 = "refer to:\n";
  else
    v8 = off_24C52D120[v7];
  std::string::append(a2, v8);
  sub_20C2384D4((uint64_t *)this + 24);
  if (v15 >= 0)
    v11 = &v14;
  else
    v11 = v14;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\nwhich is private.", v9, v10, v11);
  if ((v17 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v13 = v17;
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(a2, (const std::string::value_type *)v12, v13);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14);
}

void sub_20C2388E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;

  v4 = operator new(0x68uLL);
  *(_QWORD *)v4 = off_24C52BF78;
  v4[2] = a1;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v4 + 4));
  *(_QWORD *)v4 = off_24C52BFF0;
  return sub_20C23CA3C(a2, (uint64_t)v4);
}

void sub_20C2389A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::PcpErrorCapacityExceeded(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_24C52BF78;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(_QWORD *)a1 = off_24C52BFF0;
  return a1;
}

{
  *(_QWORD *)a1 = off_24C52BF78;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(_QWORD *)a1 = off_24C52BFF0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::~PcpErrorCapacityExceeded(pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *__p[2];
  unsigned __int8 v8;
  std::string v9;

  sub_20BDDC0E4(&v9, "Composition graph capacity exceeded: ");
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52C620, *((unsigned int *)this + 2), (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_20C238B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_24C52BF78;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(_QWORD *)a1 = off_24C52C018;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 128));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 132));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 160));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 164));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase *this)
{
  *(_QWORD *)this = off_24C52C018;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 41);
  sub_20BFD265C((_DWORD *)this + 40);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 33);
  sub_20BFD265C((_DWORD *)this + 32);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0xB0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)v3, 5);
  *v3 = off_24C52C040;
  return sub_20C23CB14(a1, (uint64_t)v3);
}

void sub_20C238C7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::PcpErrorInconsistentPropertyType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 5);
  *result = off_24C52C040;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 5);
  *result = off_24C52C040;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::~PcpErrorInconsistentPropertyType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *this)
{
  uint64_t *String;
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  const char *v15;

  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *)((char *)this + 96));
  v3 = String;
  v4 = (_QWORD *)((char *)this + 104);
  if (*((char *)this + 127) < 0)
    v4 = (_QWORD *)*v4;
  v5 = *((char *)String + 23);
  v6 = *String;
  v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *)((char *)this + 128));
  v8 = (_QWORD *)((char *)this + 136);
  if (*((char *)this + 159) < 0)
    v8 = (_QWORD *)*v8;
  if (*((_DWORD *)this + 42) == 1)
    v9 = "an attribute";
  else
    v9 = "a relationship";
  if (*((char *)v7 + 23) >= 0)
    v10 = (uint64_t)v7;
  else
    v10 = *v7;
  if (v5 < 0)
    v3 = (uint64_t *)v6;
  v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *)((char *)this + 160));
  if (*((char *)v11 + 23) >= 0)
    v14 = (uint64_t)v11;
  else
    v14 = *v11;
  if (*((_DWORD *)this + 43) == 1)
    v15 = "an attribute";
  else
    v15 = "a relationship";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The property <%s> has inconsistent spec types.  The defining spec is @%s@<%s> and is %s spec.  The conflicting spec is @%s@<%s> and is %s spec.  The conflicting spec will be ignored.", v12, v13, v3, v4, v10, v9, v8, v14, v15);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)v3, 6);
  *v3 = off_24C52C068;
  v3[21] = 0;
  v3[22] = 0;
  return sub_20C23CBEC(a1, (uint64_t)v3);
}

void sub_20C238E38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::PcpErrorInconsistentAttributeType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 6);
  *result = off_24C52C068;
  result[21] = 0;
  result[22] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 6);
  *result = off_24C52C068;
  result[21] = 0;
  result[22] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::~PcpErrorInconsistentAttributeType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  *(_QWORD *)this = off_24C52C068;
  v1 = *((_QWORD *)this + 22);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  v4 = *((_QWORD *)this + 21);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::~PcpErrorInconsistentAttributeType(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *this)
{
  uint64_t *String;
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  const char *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  char *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *)((char *)this + 96));
  v3 = String;
  v4 = (_QWORD *)((char *)this + 104);
  if (*((char *)this + 127) < 0)
    v4 = (_QWORD *)*v4;
  v5 = *((char *)String + 23);
  v6 = *String;
  v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *)((char *)this + 128));
  v8 = v7;
  v9 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
  {
    v10 = (const char *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0)
      v10 = *(const char **)v10;
  }
  else
  {
    v10 = "";
  }
  v11 = (_QWORD *)((char *)this + 136);
  if (*((char *)this + 159) < 0)
    v11 = (_QWORD *)*v11;
  v12 = *((char *)v7 + 23);
  v13 = *v7;
  v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *)((char *)this + 160));
  v17 = *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFF8;
  if (v17)
  {
    v18 = (const char *)(v17 + 16);
    if (*(char *)(v17 + 39) < 0)
      v18 = *(const char **)v18;
  }
  else
  {
    v18 = "";
  }
  if (*((char *)v14 + 23) >= 0)
    v19 = (uint64_t)v14;
  else
    v19 = *v14;
  if (v12 >= 0)
    v20 = (uint64_t)v8;
  else
    v20 = v13;
  if (v5 >= 0)
    v21 = (uint64_t)v3;
  else
    v21 = v6;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The attribute <%s> has specs with inconsistent value types.  The defining spec is @%s@<%s> with value type '%s'.  The conflicting spec is @%s@<%s> with value type '%s'.  The conflicting spec will be ignored.", v15, v16, v21, v4, v20, v10, v11, v19, v18);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0xB0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)v3, 7);
  *v3 = off_24C52C090;
  return sub_20C23CCC4(a1, (uint64_t)v3);
}

void sub_20C239070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::PcpErrorInconsistentAttributeVariability(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 7);
  *result = off_24C52C090;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 7);
  *result = off_24C52C090;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::~PcpErrorInconsistentAttributeVariability(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *this)
{
  uint64_t *String;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t *v14;
  void **v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *)((char *)this + 96));
  if (*((char *)String + 23) >= 0)
    v3 = (uint64_t)String;
  else
    v3 = *String;
  v4 = (_QWORD *)((char *)this + 104);
  if (*((char *)this + 127) < 0)
    v4 = (_QWORD *)*v4;
  v5 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *)((char *)this + 128));
  if (*((char *)v5 + 23) >= 0)
    v6 = (uint64_t)v5;
  else
    v6 = *v5;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C5269D8, *((unsigned int *)this + 42), (uint64_t)v18);
  if (v19 >= 0)
    v7 = v18;
  else
    v7 = (void **)v18[0];
  v8 = (_QWORD *)((char *)this + 136);
  if (*((char *)this + 159) < 0)
    v8 = (_QWORD *)*v8;
  v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *)((char *)this + 160));
  v10 = *((char *)v9 + 23);
  v11 = *v9;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C5269D8, *((unsigned int *)this + 43), (uint64_t)__p);
  if (v10 >= 0)
    v14 = v9;
  else
    v14 = (uint64_t *)v11;
  if (v17 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The attribute <%s> has specs with inconsistent variability.  The defining spec is @%s@<%s> with variability '%s'.  The conflicting spec is @%s@<%s> with variability '%s'.  The conflicting variability will be ignored.", v12, v13, v3, v4, v6, v7, v8, v14, v15);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
}

void sub_20C23922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)operator new(0xE0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::PcpErrorInvalidPrimPath(v3);
  return sub_20C23CD9C(a1, (uint64_t)v3);
}

void sub_20C239298(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::PcpErrorInvalidPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 9;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C0B8;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 49);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  return this;
}

void sub_20C23931C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::~PcpErrorInvalidPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void **v14;

  *(_QWORD *)this = off_24C52C0B8;
  v2 = (unsigned int *)*((_QWORD *)this + 26);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 49);
  sub_20BFD265C((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_20BFD265C((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 160));
  v14 = (void **)((char *)this + 136);
  sub_20BDE9EB0(&v14);
  v6 = (unsigned int *)*((_QWORD *)this + 16);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 14);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::~PcpErrorInvalidPrimPath(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *this)
{
  void **v2;
  const char *Text;
  const char *v4;
  char *v5;
  void **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  void **v22;
  char v23;
  void *v24[2];
  char v25;
  void **v26;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)this + 54), (uint64_t)v24);
  if (v25 >= 0)
    v2 = v24;
  else
    v2 = (void **)v24[0];
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 192));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v15, (char *)this + 200, (char *)this + 184);
  sub_20C2384D4(&v15);
  if (v23 >= 0)
    v6 = (void **)&v22;
  else
    v6 = v22;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid %s path <%s> introduced by %s-- must be an absolute prim path with no variant selections.", v4, v5, v2, Text, v6);
  if (v23 < 0)
    operator delete(v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v19);
  v26 = (void **)&v18;
  sub_20BDE9EB0(&v26);
  v7 = v17;
  if (v17)
  {
    v8 = (unsigned int *)(v17 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_20C239598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 - 65) < 0)
    operator delete(*(void **)(v5 - 88));
  sub_20C218F6C((uint64_t)va);
  if (*(char *)(v5 - 41) < 0)
    operator delete(*(void **)(v5 - 64));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_24C52BF78;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(_QWORD *)a1 = off_24C52C0E0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 192));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 196));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return a1;
}

void sub_20C239660(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::~PcpErrorInvalidAssetPathBase(void **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void **v14;

  *this = off_24C52C0E0;
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  v2 = (unsigned int *)this[32];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 49);
  sub_20BFD265C((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_20BFD265C((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(this + 20));
  v14 = this + 17;
  sub_20BDE9EB0(&v14);
  v6 = (unsigned int *)this[16];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)this[14];
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)this);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)v3, 10);
  *v3 = off_24C52C108;
  return sub_20C23CE74(a1, (uint64_t)v3);
}

void sub_20C2397EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::PcpErrorInvalidAssetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 10);
  *result = off_24C52C108;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 10);
  *result = off_24C52C108;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::~PcpErrorInvalidAssetPath(void **this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::~PcpErrorInvalidAssetPathBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath *this)
{
  _QWORD *v2;
  void **v3;
  const char *v4;
  char *v5;
  void **v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  void **v24;
  char v25;
  void *v26[2];
  char v27;
  void **v28;

  v2 = (_QWORD *)((char *)this + 224);
  if (*((char *)this + 247) < 0)
    v2 = (_QWORD *)*v2;
  v3 = v26;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)this + 66), (uint64_t)v26);
  if (v27 < 0)
    v3 = (void **)v26[0];
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v17, (char *)this + 248, (char *)this + 184);
  sub_20C2384D4(&v17);
  if (v25 >= 0)
    v6 = (void **)&v24;
  else
    v6 = v24;
  if (*((char *)this + 295) < 0)
  {
    v8 = " -- ";
    v7 = (char *)*((_QWORD *)this + 34);
    if (!*((_QWORD *)this + 35))
      v8 = "";
  }
  else
  {
    v7 = (char *)this + 272;
    if (*((_BYTE *)this + 295))
      v8 = " -- ";
    else
      v8 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Could not open asset @%s@ for %s introduced by %s%s%s.", v4, v5, v2, v3, v6, v8, v7);
  if (v25 < 0)
    operator delete(v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v21);
  v28 = (void **)&v20;
  sub_20BDE9EB0(&v28);
  v9 = v19;
  if (v19)
  {
    v10 = (unsigned int *)(v19 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (v27 < 0)
    operator delete(v26[0]);
}

void sub_20C239A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(char *)(v7 - 81) < 0)
    operator delete(*(void **)(v7 - 104));
  sub_20C218F6C((uint64_t)va);
  if (*(char *)(v7 - 57) < 0)
    operator delete(*(void **)(v7 - 80));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)v3, 19);
  *v3 = off_24C52C130;
  return sub_20C23CF4C(a1, (uint64_t)v3);
}

void sub_20C239A94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::PcpErrorMutedAssetPath(pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 19);
  *result = off_24C52C130;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 19);
  *result = off_24C52C130;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::~PcpErrorMutedAssetPath(void **this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::~PcpErrorInvalidAssetPathBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath *this)
{
  _QWORD *v2;
  void **v3;
  const char *v4;
  char *v5;
  void **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  void **v22;
  char v23;
  void *v24[2];
  char v25;
  void **v26;

  v2 = (_QWORD *)((char *)this + 224);
  if (*((char *)this + 247) < 0)
    v2 = (_QWORD *)*v2;
  v3 = v24;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)this + 66), (uint64_t)v24);
  if (v25 < 0)
    v3 = (void **)v24[0];
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v15, (char *)this + 248, (char *)this + 184);
  sub_20C2384D4(&v15);
  if (v23 >= 0)
    v6 = (void **)&v22;
  else
    v6 = v22;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Asset @%s@ was muted for %s introduced by %s.", v4, v5, v2, v3, v6);
  if (v23 < 0)
    operator delete(v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v19);
  v26 = (void **)&v18;
  sub_20BDE9EB0(&v26);
  v7 = v17;
  if (v17)
  {
    v8 = (unsigned int *)(v17 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_20C239C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 - 65) < 0)
    operator delete(*(void **)(v5 - 88));
  sub_20C218F6C((uint64_t)va);
  if (*(char *)(v5 - 41) < 0)
    operator delete(*(void **)(v5 - 64));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_24C52BF78;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(_QWORD *)a1 = off_24C52C158;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 108));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 116));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 144));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 148));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_24C52C158;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 37);
  sub_20BFD265C((_DWORD *)this + 36);
  v2 = (unsigned int *)*((_QWORD *)this + 17);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 29);
  sub_20BFD265C((_DWORD *)this + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 27);
  sub_20BFD265C((_DWORD *)this + 26);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)v3, 11);
  *v3 = off_24C52C180;
  return sub_20C23D024(a1, (uint64_t)v3);
}

void sub_20C239E14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::PcpErrorInvalidInstanceTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 11);
  *result = off_24C52C180;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 11);
  *result = off_24C52C180;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::~PcpErrorInvalidInstanceTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *this)
{
  int v2;
  const char *v4;
  const char *Text;
  const char *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t Identifier;
  const char *v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;

  v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    v12[0] = "pcp/errors.cpp";
    v12[1] = "ToString";
    v12[2] = 488;
    v12[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::ToString() const";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    v2 = *((_DWORD *)this + 30);
  }
  if (v2 == 1)
    v4 = "attribute connection";
  else
    v4 = "relationship target";
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *)((char *)this + 104));
  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *)((char *)this + 112));
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 16);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if (*(char *)(Identifier + 23) >= 0)
    v11 = Identifier;
  else
    v11 = *(_QWORD *)Identifier;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ is authored in a class but refers to an instance of that class.  Ignoring.", v9, v10, v4, Text, v6, v11);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)operator new(0xA8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::PcpErrorInvalidExternalTargetPath(v3);
  return sub_20C23D0FC(a1, (uint64_t)v3);
}

void sub_20C239FB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::PcpErrorInvalidExternalTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *this)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 12);
  *(_QWORD *)v2 = off_24C52C1A8;
  v3 = (_DWORD *)(v2 + 160);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v2 + 156));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3);
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::~PcpErrorInvalidExternalTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *this)
{
  *(_QWORD *)this = off_24C52C1A8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 40);
  sub_20BFD265C((_DWORD *)this + 39);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::~PcpErrorInvalidExternalTargetPath(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *this)
{
  int v2;
  const char *Text;
  const char *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t Identifier;
  int v8;
  uint64_t v9;
  int v10;
  void **v11;
  const char *v12;
  const char *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  const char *v17;
  void *__p[2];
  uint64_t v19;
  const char *v20;
  char v21;

  v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    __p[0] = "pcp/errors.cpp";
    __p[1] = "ToString";
    v19 = 523;
    v20 = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::ToString() const";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    v2 = *((_DWORD *)this + 30);
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)((char *)this + 104));
  v5 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)((char *)this + 112));
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 16);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
  v8 = *(char *)(Identifier + 23);
  v9 = *(_QWORD *)Identifier;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)this + 38), (uint64_t)__p);
  v10 = SHIBYTE(v19);
  v11 = (void **)__p[0];
  v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)((char *)this + 156));
  if (v10 >= 0)
    v15 = __p;
  else
    v15 = v11;
  if (v8 >= 0)
    v16 = Identifier;
  else
    v16 = v9;
  v17 = "relationship target";
  if (v2 == 1)
    v17 = "attribute connection";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ refers to a path outside the scope of the %s from <%s>.  Ignoring.", v13, v14, v17, Text, v5, v16, v15, v12);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_20C23A1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)v3, 13);
  *v3 = off_24C52C1D0;
  return sub_20C23D1D4(a1, (uint64_t)v3);
}

void sub_20C23A214(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::PcpErrorInvalidTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 13);
  *result = off_24C52C1D0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 13);
  *result = off_24C52C1D0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::~PcpErrorInvalidTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *this)
{
  int v2;
  const char *v4;
  const char *Text;
  const char *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t Identifier;
  const char *v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;

  v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    v12[0] = "pcp/errors.cpp";
    v12[1] = "ToString";
    v12[2] = 560;
    v12[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::ToString() const";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    v2 = *((_DWORD *)this + 30);
  }
  if (v2 == 1)
    v4 = "attribute connection";
  else
    v4 = "relationship target";
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *)((char *)this + 104));
  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *)((char *)this + 112));
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 16);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if (*(char *)(Identifier + 23) >= 0)
    v11 = Identifier;
  else
    v11 = *(_QWORD *)Identifier;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ is invalid.  This may be because the path is the pre-relocated source path of a relocated prim.  Ignoring.", v9, v10, v4, Text, v6, v11);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *)operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::PcpErrorInvalidSublayerOffset(v3);
  return sub_20C23D2AC(a1, (uint64_t)v3);
}

void sub_20C23A3B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::PcpErrorInvalidSublayerOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 15;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C1F8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)this + 17, 0.0, 1.0);
  return this;
}

void sub_20C23A42C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 16);
  if (v3)
    sub_20C96B4E8(v3);
  sub_20C96B93C((uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::~PcpErrorInvalidSublayerOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_24C52C1F8;
  v2 = (unsigned int *)*((_QWORD *)this + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 14);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::~PcpErrorInvalidSublayerOffset(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *this)
{
  void *p_p;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t Identifier;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  void *__p;
  char v12;

  p_p = &__p;
  sub_20C23A5BC();
  if (v12 < 0)
    p_p = __p;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 15);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v3);
  if (*(char *)(Identifier + 23) >= 0)
    v5 = Identifier;
  else
    v5 = *(_QWORD *)Identifier;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 13);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
  if (*(char *)(v7 + 23) >= 0)
    v10 = v7;
  else
    v10 = *(_QWORD *)v7;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer offset %s in sublayer @%s@ of layer @%s@. Using no offset instead.", v8, v9, p_p, v5, v10);
  if (v12 < 0)
    operator delete(__p);
}

void sub_20C23A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C23A5BC()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::operator<<(v1);
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20C23A670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::PcpErrorInvalidReferenceOffset(v3);
  return sub_20C23D384(a1, (uint64_t)v3);
}

void sub_20C23A6B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::PcpErrorInvalidReferenceOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 14;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C220;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 31);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 39);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)this + 20, 0.0, 1.0);
  return this;
}

void sub_20C23A780(_Unwind_Exception *a1)
{
  char *v1;
  _DWORD *v2;
  _DWORD *v3;
  void **v4;

  sub_20BFD1A18(v3);
  if (v1[151] < 0)
    operator delete(*v4);
  sub_20C96B964(v2, (uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::~PcpErrorInvalidReferenceOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_24C52C220;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 39);
  sub_20BFD265C((_DWORD *)this + 38);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 31);
  sub_20BFD265C((_DWORD *)this + 30);
  v2 = (unsigned int *)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::~PcpErrorInvalidReferenceOffset(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *this)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  const char *Text;
  const char *v6;
  char *v7;
  void *p_p;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  void *__p;
  char v25;
  void **v26;
  char v27;
  void *v28[2];
  char v29;
  void **v30;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)this + 44), (uint64_t)v28);
  if (v29 >= 0)
    v2 = v28;
  else
    v2 = (void **)v28[0];
  sub_20C23A5BC();
  if (v27 >= 0)
    v3 = (void **)&v26;
  else
    v3 = v26;
  v4 = (_QWORD *)((char *)this + 128);
  if (*((char *)this + 151) < 0)
    v4 = (_QWORD *)*v4;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *)((char *)this + 152));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v17, (char *)this + 104, (char *)this + 120);
  sub_20C2384D4(&v17);
  if (v25 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid %s offset %s for @%s@<%s> introduced by %s. Using no offset instead.", v6, v7, v2, v3, v4, Text, p_p);
  if (v25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v21);
  v30 = (void **)&v20;
  sub_20BDE9EB0(&v30);
  v9 = v19;
  if (v19)
  {
    v10 = (unsigned int *)(v19 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (v27 < 0)
    operator delete(v26);
  if (v29 < 0)
    operator delete(v28[0]);
}

void sub_20C23AA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  sub_20C218F6C((uint64_t)&a14);
  if (*(char *)(v30 - 97) < 0)
    operator delete(*(void **)(v30 - 120));
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::New@<X0>(_QWORD *a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v3 = off_24C52BF78;
  *((_DWORD *)v3 + 2) = 16;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 16));
  *(_QWORD *)v3 = off_24C52C248;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  return sub_20C23D45C(a1, (uint64_t)v3);
}

void sub_20C23AAD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::PcpErrorInvalidSublayerOwnership(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 16;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C248;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 16;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C248;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::~PcpErrorInvalidSublayerOwnership(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;

  *(_QWORD *)this = off_24C52C248;
  v6 = (void **)((char *)this + 144);
  sub_20BEB4844(&v6);
  v2 = (unsigned int *)*((_QWORD *)this + 17);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::~PcpErrorInvalidSublayerOwnership(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *this, uint64_t a2, char *a3)
{
  uint64_t *v4;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string::size_type v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t Identifier;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  char *v23;
  std::string *p_p;
  std::string v25;
  __int128 i;
  std::string *v27;
  char *v28;
  unint64_t v29;
  std::string __p;
  char *v31;
  unint64_t *v32;
  _QWORD v33[4];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v28 = 0;
  v29 = 0;
  for (i = *((_OWORD *)this + 9); (_QWORD)i != *((_QWORD *)&i + 1); sub_20C23AFAC(&i))
  {
    v4 = (uint64_t *)sub_20C23AF30((uint64_t *)&i, a2, a3);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v4);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
    std::operator+<char>();
    v6 = std::string::append(&v25, "@");
    v7 = v6->__r_.__value_.__r.__words[0];
    v33[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v9 = v28;
    if ((unint64_t)v28 >= v29)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (char *)v27) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v29 - (_QWORD)v27) >> 3) > v13)
        v13 = 0x5555555555555556 * ((uint64_t)(v29 - (_QWORD)v27) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v27) >> 3) >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v13;
      v32 = &v29;
      if (v14)
        v15 = (char *)sub_20BDE4FF4((uint64_t)&v29, v14);
      else
        v15 = 0;
      v16 = (std::string::size_type)&v15[24 * v12];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      __p.__r_.__value_.__l.__size_ = v16;
      v31 = &v15[24 * v14];
      v17 = v33[0];
      *(_QWORD *)v16 = v7;
      *(_QWORD *)(v16 + 8) = v17;
      *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)v33 + 7);
      *(_BYTE *)(v16 + 23) = v8;
      __p.__r_.__value_.__r.__words[2] = v16 + 24;
      sub_20BDF34C0((uint64_t *)&v27, &__p);
      v11 = v28;
      sub_20BDF3648((uint64_t)&__p);
    }
    else
    {
      v10 = v33[0];
      *(_QWORD *)v28 = v7;
      *((_QWORD *)v9 + 1) = v10;
      *(_QWORD *)(v9 + 15) = *(_QWORD *)((char *)v33 + 7);
      v9[23] = v8;
      v11 = v9 + 24;
    }
    v28 = v11;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 16);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
  if (*(char *)(Identifier + 23) >= 0)
    v20 = Identifier;
  else
    v20 = *(_QWORD *)Identifier;
  v21 = (_QWORD *)((char *)this + 104);
  if (*((char *)this + 127) < 0)
    v21 = (_QWORD *)*v21;
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", &v27, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The following sublayers for layer @%s@ have the same owner '%s': %s", v22, v23, v20, v21, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_20BDE5038((void ***)&__p);
}

void sub_20C23AEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  a14 = &a22;
  sub_20BDE5038((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23AF30(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = const std::vector<pxrInternal__aapl"
            "__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C23AFA4()
{
  JUMPOUT(0x20C23AF54);
}

_QWORD *sub_20C23AFAC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = const std::vector<px"
            "rInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::New@<X0>(_QWORD *a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v3 = off_24C52BF78;
  *((_DWORD *)v3 + 2) = 17;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 16));
  *(_QWORD *)v3 = off_24C52C270;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  return sub_20C23D534(a1, (uint64_t)v3);
}

void sub_20C23B094(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::PcpErrorInvalidSublayerPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 17;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C270;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 17;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C270;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::~PcpErrorInvalidSublayerPath(void **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *this = off_24C52C270;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v2 = (unsigned int *)this[14];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::~PcpErrorInvalidSublayerPath(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *this)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t *);
  const char *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t Identifier;
  const char *v8;
  char *v9;
  const char *v10;

  v2 = (_QWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
    v2 = (_QWORD *)*v2;
  v3 = sub_20BFD2F78((_QWORD *)this + 13);
  if (v4 & 1 | (unint64_t)v3)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 13);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
    if (*(char *)(Identifier + 23) >= 0)
      v8 = (const char *)Identifier;
    else
      v8 = *(const char **)Identifier;
  }
  else
  {
    v8 = "<NULL>";
  }
  if (*((char *)this + 167) < 0)
  {
    v10 = " -- ";
    v9 = (char *)*((_QWORD *)this + 18);
    if (!*((_QWORD *)this + 19))
      v10 = "";
  }
  else
  {
    v9 = (char *)this + 144;
    if (*((_BYTE *)this + 167))
      v10 = " -- ";
    else
      v10 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Could not load sublayer @%s@ of layer @%s@%s%s; skipping.",
    v4,
    v5,
    v2,
    v8,
    v10,
    v9);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *)operator new(0x80uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::PcpErrorOpinionAtRelocationSource(v3);
  return sub_20C23D60C(a1, (uint64_t)v3);
}

void sub_20C23B300(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::PcpErrorOpinionAtRelocationSource(pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 20;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C298;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 31);
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::~PcpErrorOpinionAtRelocationSource(pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_24C52C298;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 31);
  sub_20BFD265C((_DWORD *)this + 30);
  v2 = (unsigned int *)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::~PcpErrorOpinionAtRelocationSource(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  uint64_t Identifier;
  uint64_t v4;
  const char *Text;
  const char *v6;
  char *v7;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 13);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
  if (*(char *)(Identifier + 23) >= 0)
    v4 = Identifier;
  else
    v4 = *(_QWORD *)Identifier;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *)((char *)this + 120));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The layer @%s@ has an invalid opinion at the relocation source path <%s>, which will be ignored.", v6, v7, v4, Text);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)operator new(0x118uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::PcpErrorPrimPermissionDenied(v3);
  return sub_20C23D6E4(a1, (uint64_t)v3);
}

void sub_20C23B498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::PcpErrorPrimPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 21;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C2C0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 192));
  return this;
}

void sub_20C23B514(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase *v1;
  uint64_t v2;

  sub_20C218F6C(v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::~PcpErrorPrimPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void **v18;

  *(_QWORD *)this = off_24C52C2C0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 69);
  sub_20BFD265C((_DWORD *)this + 68);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 248));
  v18 = (void **)((char *)this + 224);
  sub_20BDE9EB0(&v18);
  v2 = (unsigned int *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 25);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_20BFD265C((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 160));
  v18 = (void **)((char *)this + 136);
  sub_20BDE9EB0(&v18);
  v10 = (unsigned int *)*((_QWORD *)this + 16);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 14);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::~PcpErrorPrimPermissionDenied(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *this)
{
  const char *v2;
  char *v3;
  void *v4;
  void *p_p;
  void *__p;
  char v7;
  void *v8;
  char v9;

  sub_20C2384D4((uint64_t *)this + 13);
  sub_20C2384D4((uint64_t *)this + 24);
  if (v9 >= 0)
    v4 = &v8;
  else
    v4 = v8;
  if (v7 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\nwill be ignored because:\n%s\nis private and overrides its opinions.", v2, v3, v4, p_p);
  if (v7 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
}

void sub_20C23B73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *)operator new(0x90uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::PcpErrorPropertyPermissionDenied(v3);
  return sub_20C23D7BC(a1, (uint64_t)v3);
}

void sub_20C23B7A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::PcpErrorPropertyPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 22;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C2E8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 27);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::~PcpErrorPropertyPermissionDenied(void **this)
{
  *this = off_24C52C2E8;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 27);
  sub_20BFD265C((_DWORD *)this + 26);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::~PcpErrorPropertyPermissionDenied(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *this)
{
  _QWORD *v1;
  const char *v2;
  const char *Text;
  const char *v4;
  char *v5;

  v1 = (_QWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
    v1 = (_QWORD *)*v1;
  if (*((_DWORD *)this + 28) == 1)
    v2 = "an attribute";
  else
    v2 = "a relationship";
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The layer at @%s@ has an illegal opinion about %s <%s> which is private across a reference, inherit, or variant.  Ignoring.", v4, v5, v1, v2, Text);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::New@<X0>(_QWORD *a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x88uLL);
  *(_QWORD *)v3 = off_24C52BF78;
  *((_DWORD *)v3 + 2) = 23;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 16));
  *(_QWORD *)v3 = off_24C52C310;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  return sub_20C23D894(a1, (uint64_t)v3);
}

void sub_20C23B968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::PcpErrorSublayerCycle(pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 23;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C310;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return this;
}

{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 23;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C310;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::~PcpErrorSublayerCycle(pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_24C52C310;
  v2 = (unsigned int *)*((_QWORD *)this + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 14);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::~PcpErrorSublayerCycle(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  uint64_t Identifier;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 13);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
  if (*(char *)(Identifier + 23) >= 0)
    v4 = Identifier;
  else
    v4 = *(_QWORD *)Identifier;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 15);
  v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
  if (*(char *)(v6 + 23) >= 0)
    v9 = v6;
  else
    v9 = *(_QWORD *)v6;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Sublayer hierarchy with root layer @%s@ has cycles. Detected when layer @%s@ was seen in the layer stack for the second time.", v7, v8, v4, v9);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::New@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;

  v3 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)v3, 24);
  *v3 = off_24C52C338;
  return sub_20C23D96C(a1, (uint64_t)v3);
}

void sub_20C23BB80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::PcpErrorTargetPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *this)
{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 24);
  *result = off_24C52C338;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 24);
  *result = off_24C52C338;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::~PcpErrorTargetPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *this)
{
  int v2;
  const char *v4;
  const char *Text;
  const char *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t Identifier;
  const char *v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  _QWORD v13[4];
  char v14;

  v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    v13[0] = "pcp/errors.cpp";
    v13[1] = "ToString";
    v13[2] = 835;
    v13[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::ToString() const";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    v2 = *((_DWORD *)this + 30);
  }
  if (v2 == 1)
    v4 = "attribute connection";
  else
    v4 = "relationship target";
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *)((char *)this + 104));
  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *)((char *)this + 112));
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 16);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if (*(char *)(Identifier + 23) >= 0)
    v11 = Identifier;
  else
    v11 = *(_QWORD *)Identifier;
  if (*((_DWORD *)this + 30) == 1)
    v12 = "connection";
  else
    v12 = "target";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ targets an object that is private on the far side of a reference or inherit.  This %s will be ignored.", v9, v10, v4, Text, v6, v11, v12);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)operator new(0xF0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::PcpErrorUnresolvedPrimPath(v3);
  return sub_20C23DA44(a1, (uint64_t)v3);
}

void sub_20C23BD3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::PcpErrorUnresolvedPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 25;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C360;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)((char *)this + 104));
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 57);
  return this;
}

void sub_20C23BDC4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::~PcpErrorUnresolvedPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void **v18;

  *(_QWORD *)this = off_24C52C360;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 57);
  sub_20BFD265C((_DWORD *)this + 56);
  v2 = (unsigned int *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 25);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_20BFD265C((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)((char *)this + 160));
  v18 = (void **)((char *)this + 136);
  sub_20BDE9EB0(&v18);
  v10 = (unsigned int *)*((_QWORD *)this + 16);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 14);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::~PcpErrorUnresolvedPrimPath(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *this)
{
  void **v2;
  void **v3;
  const char *v4;
  char *v5;
  void *p_p;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  void *__p;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  void **v39;
  char v40;
  void *v41[2];
  char v42;
  void **v43;

  v2 = v41;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C52B6C8, *((unsigned int *)this + 58), (uint64_t)v41);
  if (v42 < 0)
    v2 = (void **)v41[0];
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v32, (char *)this + 208, (char *)this + 224);
  v3 = (void **)&v39;
  sub_20C2384D4(&v32);
  if (v40 < 0)
    v3 = v39;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v23, (char *)this + 192, (char *)this + 184);
  sub_20C2384D4((uint64_t *)&v23);
  if (v31 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unresolved %s prim path %s introduced by %s", v4, v5, v2, v3, p_p);
  if (v31 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v27);
  v43 = (void **)&v26;
  sub_20BDE9EB0(&v43);
  v7 = v25;
  if (v25)
  {
    v8 = (unsigned int *)(v25 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = v24;
  if (v24)
  {
    v12 = (unsigned int *)(v24 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v40 < 0)
    operator delete(v39);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_20BFD265C(&v37);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v36);
  v23 = (void **)&v35;
  sub_20BDE9EB0(&v23);
  v15 = v34;
  if (v34)
  {
    v16 = (unsigned int *)(v34 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = v33;
  if (v33)
  {
    v20 = (unsigned int *)(v33 + 8);
    do
    {
      v21 = __ldxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (v42 < 0)
    operator delete(v41[0]);
}

void sub_20C23C12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a29 < 0)
    operator delete(__p);
  sub_20C218F6C((uint64_t)&a13);
  if (*(char *)(v30 - 81) < 0)
    operator delete(*(void **)(v30 - 104));
  sub_20C218F6C((uint64_t)&a30);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::New@<X0>(_QWORD *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)operator new(0xC8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::PcpErrorVariableExpressionError(v3);
  return sub_20C23DB1C(a1, (uint64_t)v3);
}

void sub_20C23C1CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::PcpErrorVariableExpressionError(pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *this)
{
  *(_QWORD *)this = off_24C52BF78;
  *((_DWORD *)this + 2) = 26;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)((char *)this + 16));
  *(_QWORD *)this = off_24C52C388;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 49);
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::~PcpErrorVariableExpressionError(pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_24C52C388;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 49);
  sub_20BFD265C((_DWORD *)this + 48);
  v2 = (unsigned int *)*((_QWORD *)this + 23);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::~PcpErrorVariableExpressionError(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *this)
{
  std::string *v2;
  _QWORD *v3;
  const char *v4;
  char *v5;
  void **v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  uint64_t (*v9)(uint64_t *);
  const char *v10;
  char *v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t Identifier;
  const char *v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  const char *v17;
  char *v18;
  std::string *v19;
  _QWORD *v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  char v24;
  std::string::value_type *v25;
  std::string::size_type v26;
  unsigned __int8 v27;

  std::string::basic_string(&v22, (const std::string *)((char *)this + 104), 0, 0x20uLL, (std::allocator<char> *)&v25);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v22;
  else
    v2 = (std::string *)v22.__r_.__value_.__r.__words[0];
  v3 = (_QWORD *)((char *)this + 152);
  if (*((char *)this + 175) < 0)
    v3 = (_QWORD *)*v3;
  memset(&v21, 0, sizeof(v21));
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)((char *)this + 192)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)((char *)this + 192), (uint64_t)__p);
    if (v24 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"at %s ", v4, v5, v6);
    if ((v27 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v25;
    else
      v7 = v25;
    if ((v27 & 0x80u) == 0)
      v8 = v27;
    else
      v8 = v26;
    std::string::append(&v21, v7, v8);
    if ((char)v27 < 0)
      operator delete(v25);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  v9 = sub_20BFD2F78((_QWORD *)this + 22);
  if (v10 & 1 | (unint64_t)v9)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this + 22);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
    if (*(char *)(Identifier + 23) >= 0)
      v14 = (const char *)Identifier;
    else
      v14 = *(const char **)Identifier;
  }
  else
  {
    v14 = "<expired>";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"in @%s@", v10, v11, v14);
  if ((v27 & 0x80u) == 0)
    v15 = (const std::string::value_type *)&v25;
  else
    v15 = v25;
  if ((v27 & 0x80u) == 0)
    v16 = v27;
  else
    v16 = v26;
  std::string::append(&v21, v15, v16);
  if ((char)v27 < 0)
    operator delete(v25);
  v19 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v20 = (_QWORD *)((char *)this + 128);
  if (*((char *)this + 151) < 0)
    v20 = (_QWORD *)*v20;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error evaluating expression %s for %s %s: %s", v17, v18, v2, v3, v19, v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_20C23C4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 49) < 0)
    operator delete(*(void **)(v30 - 72));
  if (a30 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpRaiseErrors(uint64_t *result, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *__p[2];
  char v7;
  _QWORD v8[4];
  char v9;
  uint64_t v10;
  uint64_t i;

  v3 = result[1];
  v10 = *result;
  for (i = v3; v10 != i; result = sub_20C23C6E4(&v10))
  {
    v8[0] = "pcp/errors.cpp";
    v8[1] = "PcpRaiseErrors";
    v8[2] = 930;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::PcpRaiseErrors(const PcpErrorVector &)";
    v9 = 0;
    v4 = sub_20C23C668(&v10, a2, a3);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v4 + 16))(__p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return result;
}

void sub_20C23C64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C23C668(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::PcpErrorBase>>>::operator*() [T = const std::vector<std::shared_ptr<pxrInternal__aapl__pxrRes"
            "erved__::PcpErrorBase>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C23C6DC()
{
  JUMPOUT(0x20C23C68CLL);
}

_QWORD *sub_20C23C6E4(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::PcpErrorBase>>>::operator++() [T = const std::vector<std::shared_ptr<pxrInterna"
            "l__aapl__pxrReserved__::PcpErrorBase>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_QWORD *sub_20C23C760(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C640;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23C7A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23C7CC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23C7E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23C7F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C690))
    return a1 + 24;
  else
    return 0;
}

void sub_20C23C838(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_20C23C8BC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C23C8BC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 84));
  sub_20BFD265C((_DWORD *)(a2 + 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 56));
  v11 = (void **)(a2 + 32);
  sub_20BDE9EB0(&v11);
  v3 = *(unsigned int **)(a2 + 24);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v8 = (unsigned int *)(result + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_20C23C964(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C6B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23C9AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23C9D0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23C9E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23C9FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C708))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CA3C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C730;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CA84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CAA8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CABC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CAD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C780))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CB14(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C7A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CB5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CB80(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CB94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CBAC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C7F8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CBEC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C820;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CC34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CC58(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CC6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CC84(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C870))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CCC4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C898;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CD30(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CD44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CD5C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C8E8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CD9C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C910;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CDE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CE08(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CE1C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CE34(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C960))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CE74(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52C988;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CEBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CEE0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CEF4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CF0C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52C9D8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23CF4C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CA00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23CF94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23CFB8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23CFCC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23CFE4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CA50))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D024(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CA78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D06C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D090(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D0A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D0BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CAC8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D0FC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CAF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D144(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D168(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D17C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D194(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CB40))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D1D4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CB68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D21C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D240(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D254(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D26C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CBB8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D2AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CBE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D2F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D318(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D32C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D344(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CC30))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D384(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CC58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D3CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D3F0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D404(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D41C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CCA8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D45C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CCD0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D4A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D4C8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D4DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D4F4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CD20))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D534(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CD48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D57C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D5A0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D5B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D5CC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CD98))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D60C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CDC0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D654(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D678(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D68C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D6A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CE10))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D6E4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CE38;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D72C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D750(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D764(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D77C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CE88))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D7BC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CEB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D804(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D828(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D83C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D854(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CF00))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D894(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CF28;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D8DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D900(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D914(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23D92C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CF78))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23D96C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52CFA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23D9B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23D9D8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23D9EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23DA04(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52CFF0))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23DA44(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52D018;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23DA8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23DAB0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23DAC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23DADC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52D068))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C23DB1C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C52D090;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C23DB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C23DB88(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C23DB9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C23DBB4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52D0E0))
    return a1 + 24;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, const char **a3@<X2>, const char **a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v5;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v8;
  char *v9;
  const char *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  const char **v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  const char **v23;
  const char *v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[2];
  _QWORD **v32;
  void **v33;
  const char *v34;
  _QWORD **v35[2];
  char v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43[2];
  _QWORD **v44;

  v5 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)a1;
  if (a3)
  {
    v8 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 2);
    sub_20C23DFC0(a1, a3 + 2, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)v43);
    if (pxrInternal__aapl__pxrReserved__::operator==(v43, (uint64_t *)v8, v9))
    {
      v10 = a3[1];
      *a4 = *a3;
      a4[1] = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a4 + 2), v8);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v33, v5, a2);
      v24 = v34;
      *a4 = (const char *)v33;
      a4[1] = v24;
      if (v24)
      {
        v25 = (unint64_t *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = (const char *)v43[0];
      v43[0] = 0;
      a4[2] = v27;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v33);
    }
    sub_20BF49F14((_QWORD ***)v43, 0);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v31);
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v43);
    v44 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    while (1)
    {
      v13 = v40;
      if (v40 != v41)
      {
        v14 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, v41 - 80);
        v13 = v41;
        if ((v14 & 1) != 0)
          break;
      }
      if (v13 >= v42)
      {
        v15 = sub_20C23E6AC((uint64_t *)&v40, (uint64_t)v5);
      }
      else
      {
        sub_20C23E7B8((uint64_t)&v42, v13, (uint64_t)v5);
        v15 = v13 + 80;
      }
      v41 = v15;
      v5 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)v5 + 56, (uint64_t)a2);
    }
    if (v41 == v40)
    {
      v33 = (void **)"pcp/expressionVariables.cpp";
      v34 = "Pcp_ComposeExpressionVariables";
      v35[0] = (_QWORD **)171;
      v35[1] = (_QWORD **)"const PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::Pcp_ComposeExpressionVariables"
                          "(const PcpLayerStackIdentifier &, const PcpLayerStackIdentifier &, CachePolicy *) [CachePolicy"
                          " = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::NoCache]";
      v36 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v33, "expressionVars != &localExpressionVars", 0);
      v23 = (const char **)v43;
    }
    else
    {
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - v40) >> 4);
      v17 = (const char **)&v44;
      do
      {
        --v16;
        sub_20C23DFC0((uint64_t *)(v40 + 80 * v16), v17, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v39);
        if ((pxrInternal__aapl__pxrReserved__::operator==(&v39, (uint64_t *)v17, v18) & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v37, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v40 + 80 * v16), a2);
          v33 = v37;
          v34 = (const char *)v38;
          if (v38)
          {
            v19 = (unint64_t *)(v38 + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = (_QWORD **)v39;
          v39 = 0;
          v35[0] = v21;
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v37);
          sub_20BDE881C(v31, (uint64_t *)&v33);
          v22 = v35[0];
          v35[0] = 0;
          sub_20BF49F14(&v32, v22);
          sub_20BF49F14(v35, 0);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v33);
        }
        sub_20BF49F14((_QWORD ***)&v39, 0);
        v17 = (const char **)&v32;
      }
      while (v16);
      v23 = (const char **)v31;
    }
    v33 = (void **)&v40;
    sub_20C23EB54(&v33);
    sub_20BF49F14(&v44, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v43);
    v28 = v23[1];
    *a4 = *v23;
    a4[1] = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a4 + 2), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(v23 + 2));
    sub_20BF49F14(&v32, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v31);
  }
}

void sub_20C23DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _QWORD ***v21;
  _QWORD ***v22;
  uint64_t v23;

  a13 = (void **)&a21;
  sub_20C23EB54(&a13);
  sub_20BF49F14(v22, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 - 88));
  sub_20BF49F14(v21, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C23DFC0(uint64_t *a1@<X0>, const char **a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  uint64_t v9;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t *);
  char v13;
  uint64_t *v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  uint64_t v17;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v18;
  _QWORD **v19;
  _QWORD **v20;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  v6 = (uint64_t *)sub_20BFCF650(a1);
  v7 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v19 = 0;
  v9 = sub_20C0A683C(v6 + 14);
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(&v21, v9, v7, (uint64_t)v8 + 152);
  if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0)
      v10 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    else
      v10 = v21;
  }
  else
  {
    v10 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v19;
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v20, v10);
  sub_20BF4C2D8((uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::VtDictionaryOver((const char **)&v20, a3, 0);
  sub_20BF49F14(&v20, 0);
  sub_20BF49F14(&v19, 0);
  v11 = a1 + 2;
  v12 = sub_20BFD2F78(v11);
  if (v13 & 1 | (unint64_t)v12)
  {
    v14 = (uint64_t *)sub_20BFCF650(v11);
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v14);
    v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16)
      v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v19 = 0;
    v17 = sub_20C0A683C(v14 + 14);
    (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 136))(&v21, v17, v15, (uint64_t)v16 + 152);
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
    {
      if ((v22 & 4) != 0)
        v18 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
      else
        v18 = v21;
    }
    else
    {
      v18 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v19;
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v20, v18);
    sub_20BF4C2D8((uint64_t)&v21);
    pxrInternal__aapl__pxrReserved__::VtDictionaryOver((const char **)&v20, a3, 0);
    sub_20BF49F14(&v20, 0);
    sub_20BF49F14(&v19, 0);
  }
  if (a2)
    pxrInternal__aapl__pxrReserved__::VtDictionaryOver(a2, a3, 0);
}

void sub_20C23E1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD ***v2;
  _QWORD **v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD **);
  sub_20BF49F14((_QWORD ***)va1, 0);
  sub_20BF49F14((_QWORD ***)va, 0);
  sub_20BF49F14(v2, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::PcpExpressionVariableCachingComposer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  return a1;
}

void sub_20C23E318(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

const char **pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::ComputeExpressionVariables(pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  const char **v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t v17[2];
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  _QWORD **v24;
  void **v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  v4 = (_QWORD *)((char *)this + 80);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v23);
  v24 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  while (v20 == v21
       || (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)this, v21 - 80) & 1) == 0)
  {
    v5 = sub_20C20DD88(v4, (uint64_t)a2);
    if (v5)
    {
      v8 = (const char **)(v5 + 12);
      goto LABEL_11;
    }
    v6 = v21;
    if (v21 >= v22)
    {
      v7 = sub_20C23E6AC(&v20, (uint64_t)a2);
    }
    else
    {
      sub_20C23E7B8((uint64_t)&v22, v21, (uint64_t)a2);
      v7 = v6 + 80;
    }
    v21 = v7;
    a2 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)a2 + 56, (uint64_t)this);
  }
  v8 = (const char **)v23;
LABEL_11:
  if (v21 != v20)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v20) >> 4);
    do
    {
      --v9;
      sub_20C23DFC0((uint64_t *)(v20 + 80 * v9), v8 + 2, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v19);
      if (pxrInternal__aapl__pxrReserved__::operator==(&v19, (uint64_t *)v8 + 2, v10))
      {
        v11 = sub_20C23EBD8((uint64_t)v4, v20 + 80 * v9, v20 + 80 * v9, v8);
        if (!v12)
        {
          v25 = (void **)"pcp/expressionVariables.cpp";
          v26 = "CacheEntry";
          v27 = 107;
          v28 = "PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Cache::CacheEntry(const"
                " PcpLayerStackIdentifier &, ExpressionVarsAndSource &&) [ExpressionVarsAndSource = const pxrInternal__aa"
                "pl__pxrReserved__::PcpExpressionVariables &]";
          v29 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "mapResult.second", 0);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v25, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v20 + 80 * v9), this);
        v17[0] = (uint64_t)v25;
        v17[1] = (uint64_t)v26;
        if (v26)
        {
          v13 = (unint64_t *)(v26 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v18 = (_QWORD **)v19;
        v19 = 0;
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v25);
        v11 = sub_20C23F068((uint64_t)v4, v20 + 80 * v9, v20 + 80 * v9, v17);
        if (!v15)
        {
          v25 = (void **)"pcp/expressionVariables.cpp";
          v26 = "CacheEntry";
          v27 = 107;
          v28 = "PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Cache::CacheEntry(const"
                " PcpLayerStackIdentifier &, ExpressionVarsAndSource &&) [ExpressionVarsAndSource = pxrInternal__aapl__px"
                "rReserved__::PcpExpressionVariables]";
          v29 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "mapResult.second", 0);
        }
        sub_20BF49F14(&v18, 0);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v17);
      }
      v8 = (const char **)(v11 + 12);
      sub_20BF49F14((_QWORD ***)&v19, 0);
    }
    while (v9);
  }
  if (v8 == v23)
  {
    v25 = (void **)"pcp/expressionVariables.cpp";
    v26 = "Pcp_ComposeExpressionVariables";
    v27 = 171;
    v28 = "const PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::Pcp_ComposeExpressionVariables(const PcpLayerS"
          "tackIdentifier &, const PcpLayerStackIdentifier &, CachePolicy *) [CachePolicy = pxrInternal__aapl__pxrReserve"
          "d__::(anonymous namespace)::Cache]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "expressionVars != &localExpressionVars", 0);
  }
  v25 = (void **)&v20;
  sub_20C23EB54(&v25);
  sub_20BF49F14(&v24, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v23);
  return v8;
}

void sub_20C23E630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD ***v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy((va_list)v4, va1);
  sub_20C23EB54((void ***)va);
  sub_20BF49F14(v2, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23E6AC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_20BDDF694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20BE7AB58((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  sub_20C23E7B8((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  sub_20C23E88C(a1, &v10);
  v8 = a1[1];
  sub_20C23EAE0(&v10);
  return v8;
}

void sub_20C23E7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C23EAE0((void **)va);
  _Unwind_Resume(a1);
}

char *sub_20C23E7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 24) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = sub_20BFB73DC((char *)(a2 + 32), *(_QWORD **)(a3 + 32), *(_QWORD **)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 4);
  v12 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  return result;
}

void sub_20C23E86C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23E88C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C23E900((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C23E900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      sub_20C23E7B8(a1, v7 - 80, v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C23E9C8((uint64_t)v13);
  return v11;
}

void sub_20C23E9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C23E9C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23E9C8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C23E9FC((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C23E9FC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C23EA4C(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C23EA4C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 56));
  v11 = (void **)(a2 + 32);
  sub_20BDE9EB0(&v11);
  v3 = *(unsigned int **)(a2 + 24);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v8 = (unsigned int *)(result + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void **sub_20C23EAE0(void **a1)
{
  sub_20C23EB10((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_20C23EB10(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 80;
      result = sub_20C23EA4C(v4, v1 - 80);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_20C23EB54(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_20C23EA4C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20C23EBD8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v8 = bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)(a2 + 72));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v8)
          {
            if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v14 + 2), a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v9)
                v15 %= v9;
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C23EE5C(a1, v8, a3, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C23F024((uint64_t)v25, 0);
  return v14;
}

void sub_20C23EE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C23F024((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23EE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x78uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C23EEE0((uint64_t)(v10 + 2), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C23EEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C23F024(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23EEE0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a2 + 72);
  v16 = a3[1];
  *(_QWORD *)(a1 + 80) = *a3;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 96), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 2));
  return a1;
}

void sub_20C23EFC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  sub_20C20D09C(v1);
  _Unwind_Resume(a1);
}

void sub_20C23F024(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C22CA38((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C23F068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v8 = bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)(a2 + 72));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v8)
          {
            if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v14 + 2), a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v9)
                v15 %= v9;
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C23F2EC(a1, v8, a3, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C23F024((uint64_t)v25, 0);
  return v14;
}

void sub_20C23F2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C23F024((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23F2EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x78uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C23F370((uint64_t)(v10 + 2), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C23F358(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C23F024(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C23F370(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_20BFB73DC((char *)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v16 = *a3;
  v15 = a3[1];
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a1 + 96) = v19;
  return a1;
}

void sub_20C23F458(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
    sub_20C96B4E8(v4);
  sub_20C96B82C(v2);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  sub_20C23F6D4((uint64_t *)this, 0);
}

{
  sub_20C23F6D4((uint64_t *)this, 0);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  sub_20C23F6D4(a1, v3);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::IsEmpty(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  return *(_QWORD *)this == 0;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AppendDependencyData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  _QWORD *i;

  if (*(_QWORD *)this)
  {
    for (i = *(_QWORD **)(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetWritableData(this)
                         + 16); i; i = (_QWORD *)*i)
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies(a1, i + 2, i + 4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetWritableData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  uint64_t result;
  _QWORD *v3;

  result = *(_QWORD *)this;
  if (!result)
  {
    v3 = operator new(0x28uLL);
    v3[4] = 0;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_20C23F6D4((uint64_t *)this, (uint64_t)v3);
    return *(_QWORD *)this;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t WritableData;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;

  if (a3[3])
  {
    WritableData = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetWritableData(a1);
    v9 = a2;
    v6 = sub_20C23F7CC(WritableData, (uint64_t)a2, (uint64_t)&unk_20CAC184C, &v9);
    v7 = (uint64_t)(v6 + 4);
    if (v6[7])
    {
      for (i = a3[2]; i; i = *(_QWORD *)i)
        sub_20C086844(v7, (unsigned __int8 *)(i + 16), i + 16);
    }
    else
    {
      sub_20C23FAE0((uint64_t)(v6 + 4), a3);
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::GetDependenciesForLayerStack(_QWORD **a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = *a1;
  if (result)
  {
    v3 = sub_20C203534(result, a2);
    if (v3)
      return v3 + 4;
    else
      return 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  return *(_QWORD *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_ForEachDependency(uint64_t result, uint64_t a2)
{
  _QWORD *i;

  if (*(_QWORD *)result)
  {
    for (i = *(_QWORD **)(*(_QWORD *)result + 16); i; i = (_QWORD *)*i)
      result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(a2 + 8))(*(_QWORD *)a2, i + 2, i + 4);
  }
  return result;
}

void sub_20C23F6D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C23F700(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C23F700(uint64_t a1)
{
  void *v2;

  sub_20C23F738(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C23F738(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C23F774((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C23F774(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  sub_20BEB3F28(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_20C23F7CC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v8 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v10 = bswap64(v8);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_20BEB560C((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = operator new(0x48uLL);
  v31[0] = v17;
  v31[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v17[2] = **a4;
  v19 = v18[1];
  v17[3] = v19;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_DWORD *)v17 + 16) = 1065353216;
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    sub_20BDEC6E0(a1, v27);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v31[0] = *v28;
    *v28 = v31[0];
  }
  else
  {
    *(_QWORD *)v31[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v31[0])
    {
      v29 = *(_QWORD *)(*(_QWORD *)v31[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11)
          v29 %= v11;
      }
      else
      {
        v29 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v31[0];
    }
  }
  v15 = (_QWORD *)v31[0];
  v31[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C23FA9C((uint64_t)v31, 0);
  return v15;
}

void sub_20C23FA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C23FA9C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C23FA9C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C23F774((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C23FAE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_20C23FB80(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_20C23FB80(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20BEB3F60(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a3)
{
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, (uint64_t)a3) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new(0x50uLL);
    v5 = v6;
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v6 = *(_QWORD *)a2;
    *((_QWORD *)v6 + 1) = v7;
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *((_QWORD *)a2 + 3);
    *((_QWORD *)v6 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)v6 + 3) = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_QWORD *)v6 + 4) = 0;
    *((_QWORD *)v6 + 5) = 0;
    *((_QWORD *)v6 + 6) = 0;
    sub_20BFB73DC((char *)v6 + 32, *((_QWORD **)a2 + 4), *((_QWORD **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
    v13 = *((_QWORD *)a2 + 8);
    v5[7] = *((_QWORD *)a2 + 7);
    v5[8] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v5[9] = *((_QWORD *)a2 + 9);
  }
  return sub_20C23FDEC(this, (uint64_t)v5);
}

