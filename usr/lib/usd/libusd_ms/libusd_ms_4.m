void sub_20BF49804(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    sub_20BEB4884((unsigned int *)a1);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase *this, std::type_info *a2)
{
  char *v4;
  unsigned __int8 v5;
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Root;
  uint64_t (*v11)(uint64_t *);
  char v12;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t TypeName;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)atomic_load(&qword_254985408);
  if (!v4)
    v4 = sub_20BF4742C(&qword_254985408);
  std::mutex::lock((std::mutex *)v4);
  v5 = atomic_load((unsigned __int8 *)this);
  if ((v5 & 1) == 0)
  {
    v37[3] = v37;
    v37[0] = &off_24C51D830;
    v37[1] = this;
    pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a2, (uint64_t)&__p);
    v8 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)&__p, v6, v7);
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
    v9 = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
    if (*(void **)v8 == __p)
    {
      __p = "plug/staticInterface.cpp";
      v33 = "_LoadAndInstantiate";
      v34 = 64;
      v35 = "void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::type_info &) const";
      v36 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Can't find type %s", (const char *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL));
    }
    else
    {
      Root = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot(v9);
      if (*(_QWORD *)v8 == *(_QWORD *)Root)
      {
        __p = "plug/staticInterface.cpp";
        v33 = "_LoadAndInstantiate";
        v34 = 70;
        v35 = "void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::type_info &) const";
        v36 = 0;
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
        if (*(char *)(TypeName + 23) >= 0)
          v21 = (const char *)TypeName;
        else
          v21 = *(const char **)TypeName;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Can't manufacture type %s", v21);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(Root);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(_QWORD *)v8, &v30);
        v11 = sub_20BF46110(&v30);
        if (v12 & 1 | (unint64_t)v11)
        {
          v13 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v30);
          if (pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v13))
          {
            v16 = sub_20BF49C04(v8, v14, v15);
            if (v16)
            {
              v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
              *((_QWORD *)this + 1) = v17;
              if (!v17)
              {
                __p = "plug/staticInterface.cpp";
                v33 = "_LoadAndInstantiate";
                v34 = 104;
                v35 = "void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::ty"
                      "pe_info &) const";
                v36 = 0;
                v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                if (*(char *)(v18 + 23) >= 0)
                  v19 = (const char *)v18;
                else
                  v19 = *(const char **)v18;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Plugin didn't manufacture an instance of %s", v19);
              }
            }
            else
            {
              __p = "plug/staticInterface.cpp";
              v33 = "_LoadAndInstantiate";
              v34 = 95;
              v35 = "void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::type_info &) const";
              v36 = 0;
              v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
              if (*(char *)(v24 + 23) >= 0)
                v25 = (const char *)v24;
              else
                v25 = *(const char **)v24;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: No default constructor for type %s", v25);
            }
          }
        }
        else
        {
          __p = "plug/staticInterface.cpp";
          v33 = "_LoadAndInstantiate";
          v34 = 79;
          v35 = "void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::type_info &) const";
          v36 = 0;
          v22 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
          if (*(char *)(v22 + 23) >= 0)
            v23 = (const char *)v22;
          else
            v23 = *(const char **)v22;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Can't find plugin that defines type %s", v23);
        }
        v26 = v31;
        if (v31)
        {
          v27 = (unsigned int *)(v31 + 8);
          do
          {
            v28 = __ldxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        }
      }
    }
    sub_20BF49CE8(v37);
  }
  std::mutex::unlock((std::mutex *)v4);
}

void sub_20BF49B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex *v21;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  if (a12)
  {
    v23 = a12 + 2;
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  sub_20BF49CE8(&a21);
  std::mutex::unlock(v21);
  _Unwind_Resume(a1);
}

void *sub_20BF49C04(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  void *result;

  result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  return result;
}

_QWORD *sub_20BF49C40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C51D830;
  result[1] = v3;
  return result;
}

uint64_t sub_20BF49C74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C51D830;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BF49C90(uint64_t result)
{
  atomic_store(1u, *(unsigned __int8 **)(result + 8));
  return result;
}

uint64_t sub_20BF49CA0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51D890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BF49CDC()
{
  return &unk_24C51D890;
}

_QWORD *sub_20BF49CE8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_20BE9E974();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20BF49D54()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY);
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2, char *a3)
{
  unsigned __int8 v3;
  int v4;
  char *v5;
  const char *v6;
  void *__p;
  char v8;

  v3 = atomic_load((unsigned __int8 *)&qword_254985418);
  if ((v3 & 1) == 0)
  {
    v6 = a2;
    v4 = __cxa_guard_acquire(&qword_254985418);
    a2 = v6;
    if (v4)
    {
      v5 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY);
      if (!v5)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY);
        v5 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY);
      }
      byte_254985410 = *v5;
      __cxa_guard_release(&qword_254985418);
      a2 = v6;
    }
  }
  if (byte_254985410)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Detach/copy VtArray (%s)", a2, a3, a2);
    pxrInternal__aapl__pxrReserved__::TfLogStackTrace((char *)&__p, 0);
    if (v8 < 0)
      operator delete(__p);
  }
}

void sub_20BF49E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_254985418);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtDictionary *pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const void ****a2)
{
  const void ***v3;
  uint64_t *v4;

  *(_QWORD *)this = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = (uint64_t *)operator new(0x18uLL);
    sub_20BF4C488(v4, v3);
    sub_20BF49F14((_QWORD ***)this, (_QWORD **)v4);
  }
  return this;
}

void sub_20BF49EEC(_Unwind_Exception *a1)
{
  _QWORD ***v1;
  void *v2;

  operator delete(v2);
  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BF49F14(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20BF4C404((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(_QWORD *a1, const void **a2, uint64_t a3)
{
  void *v6;

  v6 = operator new(0x18uLL);
  sub_20BF4C80C((uint64_t)v6, a2, &a2[5 * a3]);
  *a1 = v6;
  return a1;
}

void sub_20BF49FB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const void ****pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(const void ****a1, const void ****a2)
{
  const void ***v3;
  uint64_t *v4;

  if (a1 != a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = (uint64_t *)operator new(0x18uLL);
      sub_20BF4C488(v4, v3);
    }
    else
    {
      v4 = 0;
    }
    sub_20BF49F14(a1, (_QWORD **)v4);
  }
  return a1;
}

void sub_20BF4A02C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](pxrInternal__aapl__pxrReserved__::VtDictionary *a1, __int128 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v8;
  int v9;
  __int128 *v10;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Vt", (uint64_t)"VtDictionary::operator[]");
  pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(a1);
  v4 = *(uint64_t ***)a1;
  v10 = a2;
  v5 = sub_20BF4C88C(v4, (const void **)a2, (uint64_t)&unk_20CAC184C, &v10);
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v5 + 7;
}

void sub_20BF4A0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  _QWORD *v2;
  uint64_t v4;
  int v5;

  if (!*(_QWORD *)this)
  {
    sub_20BEB59B0((uint64_t)&v4, (uint64_t)"Vt", (uint64_t)"VtDictionary::_CreateDictIfNeeded");
    v2 = operator new(0x18uLL);
    v2[2] = 0;
    v2[1] = 0;
    *v2 = v2 + 1;
    sub_20BF49F14((_QWORD ***)this, (_QWORD **)v2);
    while (v5--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v4);
  }
}

void sub_20BF4A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::count(uint64_t *a1, const void **a2)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_20BDDDEF8(result, a2);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::count(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const char *a2)
{
  uint64_t result;
  const std::string::value_type *v3;

  v3 = a2;
  result = *(_QWORD *)this;
  if (result)
    return sub_20BF4C9C4(result, &v3);
  return result;
}

uint64_t **pxrInternal__aapl__pxrReserved__::VtDictionary::erase(uint64_t ***a1, const void **a2)
{
  uint64_t **result;

  result = *a1;
  if (result)
    return (uint64_t **)sub_20BF4CAE8(result, a2);
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::erase(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = (uint64_t **)*a1;
  v4 = (uint64_t *)sub_20BF4A220(v5, *a1, a3);
  sub_20BE10B80(v3, v4);
  sub_20BF4C44C((uint64_t)(v4 + 4));
  operator delete(v4);
}

uint64_t sub_20BF4A220(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  BOOL v4;
  _QWORD v6[4];
  char v7;
  int v8;

  v3 = a1[1];
  if (v3)
    v4 = v3 == a2;
  else
    v4 = 1;
  if (!v4)
  {
    v6[0] = "vt/dictionary.h";
    v6[1] = "GetUnderlyingIterator";
    v6[2] = 147;
    v6[3] = "UnderlyingIterator pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string, pxrInterna"
            "l__aapl__pxrReserved__::VtValue, std::less<void>> *, std::__map_iterator<std::__tree_iterator<std::__value_t"
            "ype<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string,"
            " pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>>::GetUnderlyingIterator(UnderlyingMapPtr) con"
            "st [UnderlyingMapPtr = std::map<std::string, pxrInternal__aapl__pxrReserved__::VtValue, std::less<void>> *, "
            "UnderlyingIterator = std::__map_iterator<std::__tree_iterator<std::__value_type<std::string, pxrInternal__aa"
            "pl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__aapl__pxrReserved_"
            "_::VtValue>, void *> *, long>>]";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_underlyingMap || _underlyingMap == map");
  }
  if (v3)
    return *a1;
  else
    return a2 + 8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtDictionary::erase(uint64_t *result, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a4;
  v10[1] = a5;
  v5 = (uint64_t **)*result;
  if (*result)
  {
    v6 = result;
    v7 = (uint64_t *)sub_20BF4A220(v11, (uint64_t)v5, a3);
    v9 = (uint64_t *)sub_20BF4A220(v10, *v6, v8);
    return sub_20BF4CB40(v5, v7, v9);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::clear(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    sub_20BF4C404(*(_QWORD *)this, *(_QWORD **)(v1 + 8));
    *(_QWORD *)v1 = v1 + 8;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::find(uint64_t *a1, const void **a2)
{
  if (*a1)
    return sub_20BDEEBA4(*a1, a2);
  else
    return 0;
}

{
  if (*a1)
    return sub_20BDEEBA4(*a1, a2);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::find(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const char *a2)
{
  const std::string::value_type *v3;

  v3 = a2;
  if (*(_QWORD *)this)
    return sub_20BF4CBA4(*(_QWORD *)this, &v3);
  else
    return 0;
}

{
  const std::string::value_type *v3;

  v3 = a2;
  if (*(_QWORD *)this)
    return sub_20BF4CBA4(*(_QWORD *)this, &v3);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::begin(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  if (*(_QWORD *)this)
    return **(_QWORD **)this;
  else
    return 0;
}

{
  if (*(_QWORD *)this)
    return **(_QWORD **)this;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::end(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return 0;
}

{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::size(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 16);
  else
    return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtDictionary::empty(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return !*(_QWORD *)this || *(_QWORD *)(*(_QWORD *)this + 16) == 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtDictionary::swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v2;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::insert@<X0>(pxrInternal__aapl__pxrReserved__::VtDictionary *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t **v8;
  uint64_t v11;
  int v12;

  sub_20BEB59B0((uint64_t)&v11, (uint64_t)"Vt", (uint64_t)"VtDictionary::insert");
  pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(a1);
  result = (uint64_t)sub_20BF4CC20(*(uint64_t ***)a1, a2, (__int128 *)a2);
  v8 = *(uint64_t ***)a1;
  if (*(_QWORD *)a1 + 8 == result && v8 != 0)
    v8 = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v7;
  while (v12--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return result;
}

void sub_20BF4A5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(uint64_t *a1, std::string *a2, char *__s)
{
  uint64_t ValueAtPath;
  void *__p[2];
  char v8;
  uint64_t v9[3];
  void **v10;

  sub_20BDDC0E4(__p, __s);
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, v9);
  ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(a1, (uint64_t)v9);
  v10 = (void **)v9;
  sub_20BDE5038(&v10);
  if (v8 < 0)
    operator delete(__p[0]);
  return ValueAtPath;
}

void sub_20BF4A64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 24) = v15;
  sub_20BDE5038((void ***)(v16 - 24));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  const void **v3;
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const void ***)a2;
  v2 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v2)
    return 0;
  v4 = (const void **)(v2 - 24);
  while (v3 != v4)
  {
    v5 = *a1;
    if (!*a1)
      return 0;
    v6 = sub_20BDEEBA4(*a1, v3);
    if (v5 + 8 == v6)
      return 0;
    v7 = v6;
    v8 = (uint64_t **)(v6 + 56);
    if (!sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 56)))
      return 0;
    v9 = *(_QWORD *)(v7 + 64);
    if ((v9 & 4) != 0)
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
    else
      a1 = *v8;
    v3 += 3;
  }
  v10 = *a1;
  if (!*a1)
    return 0;
  v11 = sub_20BDEEBA4(*a1, v4);
  if (v10 + 8 == v11)
    return 0;
  else
    return v11 + 56;
}

uint64_t sub_20BF4A73C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC17A0 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51D8B8);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  char *v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  uint64_t *v11;
  _QWORD **v12;
  _QWORD v13[3];
  unsigned int *v14[2];
  void *__dst[2];
  uint64_t v16;
  void *v17[2];
  void *__p[2];
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v7 = (char *)a2 + 24;
  if ((__int128 *)((char *)a2 + 24) == a3)
  {
    v11 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a1, a2);
    sub_20BF4A9BC(v11, a4);
  }
  else
  {
    v12 = 0;
    v14[1] = (unsigned int *)&off_24C51D8C8;
    sub_20BF4D058(v14, (const void ****)&v12);
    sub_20BF4C1A4(__dst, a2, v14);
    *(_OWORD *)__p = *(_OWORD *)__dst;
    v19 = v16;
    __dst[1] = 0;
    v16 = 0;
    __dst[0] = 0;
    sub_20BF4C200(v20, v17);
    pxrInternal__aapl__pxrReserved__::VtDictionary::insert(a1, (const void **)__p, (uint64_t)v13);
    v9 = v13[0];
    sub_20BF4C2D8((uint64_t)v20);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    sub_20BF4C2D8((uint64_t)v17);
    if (SHIBYTE(v16) < 0)
      operator delete(__dst[0]);
    sub_20BF4C2D8((uint64_t)v14);
    sub_20BF49F14(&v12, 0);
    __p[0] = 0;
    v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 56);
    sub_20BF4AB1C(v10, (const void ****)__p);
    pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(__p, v7, a3, a4);
    sub_20BF4AB1C(v10, (const void ****)__p);
    sub_20BF49F14((_QWORD ***)__p, 0);
  }
}

void sub_20BF4A970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_20BF4AAE4((uint64_t)va3);
  sub_20BF4AAE4((uint64_t)va2);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF4A9BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    if (a2[1])
    {
      sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      else
        *a1 = *a2;
      if (v9)
        (*(void (**)(_BYTE *))(v9 + 32))(v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_20BF4AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF4AAE4(uint64_t a1)
{
  sub_20BF4C2D8(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

const void ****sub_20BF4AB1C(pxrInternal__aapl__pxrReserved__::VtValue *a1, const void ****a2)
{
  const void ****result;
  const void ***v5;
  _QWORD **v6;

  if ((sub_20BF4A73C(a1) & 1) == 0)
  {
    v6 = 0;
    sub_20BF4D0C4((uint64_t)a1, (const void ****)&v6);
    sub_20BF49F14(&v6, 0);
  }
  result = sub_20BF4D190((const void *****)a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  return result;
}

void sub_20BF4AB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, std::string *a2, _QWORD *a3, char *__s)
{
  void *__p[2];
  char v8;
  __int128 *v9;
  __int128 *v10;

  sub_20BDDC0E4(__p, __s);
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, (uint64_t *)&v9);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v9 != v10)
    pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(a1, v9, v10, a3);
  __p[0] = &v9;
  sub_20BDE5038((void ***)__p);
}

void sub_20BF4AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, __int128 **a2, _QWORD *a3)
{
  __int128 *v5;
  __int128 *v6;

  v5 = *a2;
  v6 = a2[1];
  if (v5 != v6)
    pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(a1, v5, v6, a3);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(uint64_t ***a1, const void **a2, const void **a3)
{
  const void **v3;
  uint64_t **v4;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::VtValue *v9;
  _QWORD **v10;

  v3 = a2 + 3;
  v4 = *a1;
  if (a2 + 3 == a3)
  {
    if (v4)
      sub_20BF4CAE8(*a1, a2);
  }
  else if (v4)
  {
    v7 = sub_20BDEEBA4((uint64_t)*a1, a2);
    if (v4 + 1 != (uint64_t **)v7)
    {
      v8 = v7;
      v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 56);
      if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 56)))
      {
        v10 = 0;
        sub_20BF4AB1C(v9, (const void ****)&v10);
        pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(&v10, v3, a3);
        if (v10 && v10[2])
          sub_20BF4AB1C(v9, (const void ****)&v10);
        else
          pxrInternal__aapl__pxrReserved__::VtDictionary::erase((uint64_t *)a1, v8, (char *)v4);
        sub_20BF49F14(&v10, 0);
      }
    }
  }
}

void sub_20BF4AD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(uint64_t ***a1, std::string *a2, char *__s)
{
  void *__p[2];
  char v6;
  const void **v7;
  const void **v8;

  sub_20BDDC0E4(__p, __s);
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, (uint64_t *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v7 != v8)
    pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(a1, v7, v8);
  __p[0] = &v7;
  sub_20BDE5038((void ***)__p);
}

void sub_20BF4ADF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(uint64_t ***a1, const void ***a2)
{
  const void **v3;
  const void **v4;

  v3 = *a2;
  v4 = a2[1];
  if (v3 != v4)
    pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(a1, v3, v4);
}

unint64_t pxrInternal__aapl__pxrReserved__::VtGetEmptyDictionary(pxrInternal__aapl__pxrReserved__ *this)
{
  _QWORD ***v1;
  _QWORD **v5;
  int v6;

  v1 = (_QWORD ***)atomic_load(&qword_254985420);
  if (!v1)
  {
    sub_20BEB59B0((uint64_t)&v5, (uint64_t)"Vt", (uint64_t)"VtDictionary");
    v1 = (_QWORD ***)malloc(8uLL);
    while (v6--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v5);
    *v1 = 0;
    v5 = 0;
    sub_20BF49F14(v1, 0);
    sub_20BF49F14(&v5, 0);
    while (!__ldaxr(&qword_254985420))
    {
      if (!__stlxr((unint64_t)v1, &qword_254985420))
        return (unint64_t)v1;
    }
    __clrex();
    sub_20BF49F14(v1, 0);
    free(v1);
    return atomic_load(&qword_254985420);
  }
  return (unint64_t)v1;
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(const void ****this@<X0>, uint64_t **a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtDictionary *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a4, this);
  pxrInternal__aapl__pxrReserved__::VtDictionaryOver(a4, a2, a3);
}

void sub_20BF4AF5C(_Unwind_Exception *a1)
{
  _QWORD ***v1;

  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(pxrInternal__aapl__pxrReserved__ *this, uint64_t **a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  int v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;

  if (this)
  {
    v3 = (int)a3;
    v6 = *a2;
    if (*a2)
    {
      v7 = *v6;
      if (v6 + 1 == (uint64_t *)*v6)
        v8 = 0;
      else
        v8 = (uint64_t)v6;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    sub_20BF4B0D4(this, v7, v8, 0, 0);
    if (v3)
    {
      v11 = *(const char **)this;
      if (*(_QWORD *)this)
      {
        v12 = *(char **)v11;
        if (v11 + 8 == *(const char **)v11)
          v11 = 0;
      }
      else
      {
        v12 = 0;
      }
      v13 = 0;
      v22 = v12;
      v23 = v11;
      v24 = 0;
      v25 = 0;
      while (v11 != v13 || v13 && v22 != (char *)v24)
      {
        v14 = sub_20BF4B198(&v22, v9, v10);
        v17 = *a2;
        if (*a2)
        {
          v18 = sub_20BDEEBA4((uint64_t)*a2, (const void **)(*v14 + 32));
          if (v17 + 1 != (uint64_t *)v18)
          {
            v19 = v18;
            v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*sub_20BF4B198(&v22, v15, v16) + 56);
            Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 56));
            sub_20BF4C324(v20, Typeid);
          }
        }
        sub_20BF4B224(&v22, v15, v16);
        v11 = v23;
        v13 = v25;
      }
    }
  }
  else
  {
    v22 = "vt/dictionary.cpp";
    v23 = "VtDictionaryOver";
    v24 = 326;
    v25 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(VtDictionary *, const VtDictionary &, BOOL)";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOver: NULL dictionary pointer.");
  }
}

uint64_t sub_20BF4B0D4(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v12;
  int v13;

  result = sub_20BEB59B0((uint64_t)&v12, (uint64_t)"Vt", (uint64_t)"VtDictionary::insert (range)");
  if (a3 != a5 || a3 && a2 != a4)
  {
    pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(a1);
    result = (uint64_t)sub_20BF4D220(*(_QWORD **)a1, a2, a3, a4, a5);
  }
  while (v13--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return result;
}

void sub_20BF4B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF4B198(_QWORD *result, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  v3 = result[1];
  if (v3 == result[3] && (!v3 || *result == result[2]))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtDictionary>::oper"
            "ator->() [T = pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BF4B224(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v4 = a1[1];
  if (v4 == a1[3] && (!v4 || *a1 == a1[2]))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtDic"
            "tionary>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    sub_20BF4D354(a1, a2, a3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(const char **this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  const char *v4;
  char *v5;
  const char *v6;
  char *v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const pxrInternal__aapl__pxrReserved__::VtValue *v15;
  uint64_t v16;
  char *v17;
  const void **v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if ((_DWORD)a3)
    {
      v4 = *this;
      if (*this)
      {
        v5 = *(char **)v4;
        if (v4 + 8 == *(const char **)v4)
          v4 = 0;
      }
      else
      {
        v5 = 0;
      }
      v8 = 0;
      v27 = v5;
      v28 = v4;
      v29 = 0;
      v30 = 0;
      while (v4 != v8 || v8 && v27 != (char *)v29)
      {
        v9 = sub_20BF4B4BC(&v27, (uint64_t)a2, (char *)a3);
        v12 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2 || (v13 = sub_20BDEEBA4(*(_QWORD *)a2, (const void **)(*v9 + 32)), v12 + 8 == v13))
        {
          v18 = (const void **)sub_20BF4B548(&v27, v10, v11);
          pxrInternal__aapl__pxrReserved__::VtDictionary::insert(a2, v18, (uint64_t)v32);
        }
        else
        {
          v14 = sub_20BF4B4BC(&v27, v10, v11);
          v15 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v13 + 56);
          pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf((pxrInternal__aapl__pxrReserved__::VtValue *)(*v14 + 56), v15, v32);
          sub_20BF4B5D8(v15, v32);
          sub_20BF4C2D8((uint64_t)v32);
        }
        sub_20BF4B6E0(&v27, v16, v17);
        v4 = v28;
        v8 = v30;
      }
    }
    else
    {
      v6 = *this;
      if (*this)
      {
        v7 = *(char **)v6;
        if (v6 + 8 == *(const char **)v6)
          v6 = 0;
      }
      else
      {
        v7 = 0;
      }
      v19 = 0;
      v27 = v7;
      v28 = v6;
      v29 = 0;
      v30 = 0;
      while (v6 != v19 || v19 && v27 != (char *)v29)
      {
        v20 = *sub_20BF4B4BC(&v27, (uint64_t)a2, (char *)a3);
        v23 = sub_20BF4B4BC(&v27, v21, v22);
        v24 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)(*v23 + 32));
        sub_20BF4A9BC(v24, (_QWORD *)(v20 + 56));
        sub_20BF4B6E0(&v27, v25, v26);
        v6 = v28;
        v19 = v30;
      }
    }
  }
  else
  {
    v27 = "vt/dictionary.cpp";
    v28 = "VtDictionaryOver";
    v29 = 346;
    v30 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(const VtDictionary &, VtDictionary *, BOOL)";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOver: NULL dictionary pointer");
  }
}

_QWORD *sub_20BF4B4BC(_QWORD *result, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  v3 = result[1];
  if (v3 == result[3] && (!v3 || *result == result[2]))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtDictionary>"
            "::operator->() [T = const pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BF4B548(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v5[4];
  char v6;
  int v7;

  v3 = a1[1];
  if (v3 == a1[3] && (!v3 || *a1 == a1[2]))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtDictionary>"
            "::operator*() [T = const pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 32;
}

_QWORD *sub_20BF4B5D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    if (a2[1])
    {
      sub_20BF4C144((uint64_t)v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      else
        *a1 = *a2;
      a2[1] = 0;
      if (v9)
        (*(void (**)(_BYTE *))(v9 + 32))(v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_20BF4B6C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF4B6E0(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v4 = a1[1];
  if (v4 == a1[3] && (!v4 || *a1 == a1[2]))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":VtDictionary>::operator++() [T = const pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    sub_20BF4D2AC(a1, a2, a3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(const void ****this@<X0>, const char **a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtDictionary *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a4, this);
  pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(a4, a2, a3);
}

void sub_20BF4B7BC(_Unwind_Exception *a1)
{
  _QWORD ***v1;

  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(pxrInternal__aapl__pxrReserved__ *this, const char **a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  int v3;
  const char *v6;
  char *v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::VtValue *v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  const void **v23;
  pxrInternal__aapl__pxrReserved__::VtValue *v24;
  _QWORD *v25;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  _QWORD **v27[2];
  char v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char v33;

  if (this)
  {
    v3 = (int)a3;
    v6 = *a2;
    if (*a2)
    {
      v7 = *(char **)v6;
      if (v6 + 8 == *(const char **)v6)
        v6 = 0;
    }
    else
    {
      v7 = 0;
    }
    v8 = 0;
    v29 = v7;
    v30 = v6;
    v31 = 0;
    v32 = 0;
    while (v6 != v8 || v8 && v29 != (char *)v31)
    {
      v9 = sub_20BF4B4BC(&v29, (uint64_t)a2, (char *)a3);
      if (sub_20BF4B9C4((uint64_t *)this, (const void **)(*v9 + 32))
        && (v12 = sub_20BF4B4BC(&v29, v10, v11), sub_20BF4B9C4((uint64_t *)a2, (const void **)(*v12 + 32))))
      {
        v13 = sub_20BF4B4BC(&v29, v10, v11);
        v14 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4BA0C((uint64_t *)a2, (const void **)(*v13 + 32));
        v17 = sub_20BF4B4BC(&v29, v15, v16);
        v18 = *(_QWORD *)this;
        if (*(_QWORD *)this)
          v18 = sub_20BDEEBA4(v18, (const void **)(*v17 + 32));
        v27[0] = 0;
        v19 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56);
        sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56), (const void ****)v27);
        pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)v27, v14, 0, v20);
        sub_20BF4AB1C(v19, (const void ****)v27);
        sub_20BF49F14(v27, 0);
      }
      else
      {
        v23 = (const void **)sub_20BF4B548(&v29, v10, v11);
        pxrInternal__aapl__pxrReserved__::VtDictionary::insert(this, v23, (uint64_t)v27);
        if (!v28 && v3)
        {
          v24 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v27[0] + 7);
          v25 = sub_20BF4B4BC(&v29, v21, v22);
          Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(*v25 + 56));
          sub_20BF4C324(v24, Typeid);
        }
      }
      sub_20BF4B6E0(&v29, v21, v22);
      v6 = v30;
      v8 = v32;
    }
  }
  else
  {
    v29 = "vt/dictionary.cpp";
    v30 = "VtDictionaryOverRecursive";
    v31 = 383;
    v32 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(VtDictionary *, const VtDictionary &, BOOL)";
    v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOverRecursive: NULL dictionary pointer.");
  }
}

void sub_20BF4B9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9)
{
  sub_20BF49F14(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF4B9C4(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = sub_20BDEEBA4(*a1, a2);
  if (v2 + 8 == v3)
    return 0;
  else
    return sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
}

uint64_t sub_20BF4BA0C(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string v7;
  void *__p[2];
  std::string::size_type v9;
  _QWORD v10[4];
  char v11;
  int v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = sub_20BDEEBA4(*a1, a2);
    if (v2 + 8 != v3)
      return sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
  }
  else
  {
    v3 = 0;
  }
  v10[0] = "vt/dictionary.h";
  v10[1] = "VtDictionaryGet";
  v10[2] = 459;
  v10[3] = "const T &pxrInternal__aapl__pxrReserved__::VtDictionaryGet(const VtDictionary &, const std::string &) [T = px"
           "rInternal__aapl__pxrReserved__::VtDictionary]";
  v11 = 0;
  v12 = 4;
  std::operator+<char>();
  v4 = std::string::append(&v7, "', which is not in the dictionary.");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v10, (uint64_t)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return sub_20BF4D3FC((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
}

void sub_20BF4BB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(const char **this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  int v3;
  const char *v6;
  char *v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__ *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  const void **v31;
  pxrInternal__aapl__pxrReserved__::VtValue *v32;
  BOOL v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  _QWORD **v39[4];

  v39[3] = *(_QWORD ***)MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (int)a3;
    v6 = *this;
    if (*this)
    {
      v7 = *(char **)v6;
      if (v6 + 8 == *(const char **)v6)
        v6 = 0;
    }
    else
    {
      v7 = 0;
    }
    v8 = 0;
    v34 = v7;
    v35 = v6;
    v36 = 0;
    v37 = 0;
    while (v6 != v8 || v8 && v34 != (char *)v36)
    {
      v9 = sub_20BF4B4BC(&v34, (uint64_t)a2, (char *)a3);
      if (sub_20BF4B9C4((uint64_t *)this, (const void **)(*v9 + 32))
        && (v12 = sub_20BF4B4BC(&v34, v10, v11), sub_20BF4B9C4((uint64_t *)a2, (const void **)(*v12 + 32))))
      {
        v13 = sub_20BF4B4BC(&v34, v10, v11);
        v14 = (pxrInternal__aapl__pxrReserved__ *)sub_20BF4BA0C((uint64_t *)this, (const void **)(*v13 + 32));
        v17 = sub_20BF4B4BC(&v34, v15, v16);
        if (*(_QWORD *)a2)
          v18 = sub_20BDEEBA4(*(_QWORD *)a2, (const void **)(*v17 + 32));
        else
          v18 = 0;
        v39[0] = 0;
        v32 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56);
        sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56), (const void ****)v39);
        pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(v14, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)v39, 0, v33);
        sub_20BF4AB1C(v32, (const void ****)v39);
        sub_20BF49F14(v39, 0);
      }
      else
      {
        v19 = sub_20BF4B4BC(&v34, v10, v11);
        if (v3)
        {
          v22 = *(_QWORD *)a2;
          if (!*(_QWORD *)a2 || (v23 = sub_20BDEEBA4(*(_QWORD *)a2, (const void **)(*v19 + 32)), v22 + 8 == v23))
          {
            v31 = (const void **)sub_20BF4B548(&v34, v20, v21);
            pxrInternal__aapl__pxrReserved__::VtDictionary::insert(a2, v31, (uint64_t)v39);
          }
          else
          {
            v24 = sub_20BF4B4BC(&v34, v20, v21);
            v25 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v23 + 56);
            pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf((pxrInternal__aapl__pxrReserved__::VtValue *)(*v24 + 56), v25, v39);
            sub_20BF4B5D8(v25, v39);
            sub_20BF4C2D8((uint64_t)v39);
          }
        }
        else
        {
          v28 = *v19;
          v29 = sub_20BF4B4BC(&v34, v20, v21);
          v30 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)(*v29 + 32));
          sub_20BF4A9BC(v30, (_QWORD *)(v28 + 56));
        }
      }
      sub_20BF4B6E0(&v34, v26, v27);
      v6 = v35;
      v8 = v37;
    }
  }
  else
  {
    v34 = "vt/dictionary.cpp";
    v35 = "VtDictionaryOverRecursive";
    v36 = 423;
    v37 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(const VtDictionary &, VtDictionary *, BOOL)";
    v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOverRecursive: NULL dictionary pointer.");
  }
}

void sub_20BF4BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(_QWORD **a1, uint64_t *a2, char *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v4 = *a1;
  if (*a1)
    v5 = v4[2];
  else
    v5 = 0;
  v6 = *a2;
  if (*a2)
    v6 = *(_QWORD *)(v6 + 16);
  if (v5 != v6)
    return 0;
  if (v4)
  {
    v7 = (_QWORD *)*v4;
    if (v4 + 1 == (_QWORD *)*v4)
      v4 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v20 = v7;
  v21 = v4;
  v22 = 0;
  v23 = 0;
  while (v4 != v8 || v8 && v20 != v22)
  {
    v9 = sub_20BF4B4BC(&v20, (uint64_t)a2, a3);
    v10 = *a2;
    if (!*a2)
      return 0;
    v11 = sub_20BDEEBA4(*a2, (const void **)(*v9 + 32));
    if (v10 + 8 == v11)
      return 0;
    v14 = v11;
    v15 = sub_20BF4B4BC(&v20, v12, v13);
    result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(*v15 + 56), (std::type_info *)(v14 + 56), v16);
    if (!(_DWORD)result)
      return result;
    sub_20BF4B6E0(&v20, v18, v19);
    v4 = v21;
    v8 = v23;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(_QWORD **a1, uint64_t *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator==(a1, a2, a3) ^ 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;

  LOBYTE(v23) = 123;
  sub_20BDDC1C8(a1, (uint64_t)&v23, 1);
  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)*v4;
    if (v4 + 1 == (_QWORD *)*v4)
      v4 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  v23 = v5;
  v24 = v4;
  v7 = 1;
  v25 = 0;
  v26 = 0;
  while (v4 != v6 || v6 && v23 != v25)
  {
    if ((v7 & 1) == 0)
      sub_20BDDC1C8(a1, (uint64_t)", ", 2);
    v27 = 39;
    v8 = sub_20BDDC1C8(a1, (uint64_t)&v27, 1);
    v11 = sub_20BF4B4BC(&v23, v9, v10);
    v12 = *(char *)(*v11 + 55);
    if (v12 >= 0)
      v13 = *v11 + 32;
    else
      v13 = *(_QWORD *)(*v11 + 32);
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(*v11 + 55);
    else
      v14 = *(_QWORD *)(*v11 + 40);
    v15 = sub_20BDDC1C8(v8, v13, v14);
    v16 = sub_20BDDC1C8(v15, (uint64_t)"': ", 3);
    v19 = sub_20BF4B4BC(&v23, v17, v18);
    pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v16, *v19 + 56);
    sub_20BF4B6E0(&v23, v20, v21);
    v7 = 0;
    v4 = v24;
    v6 = v26;
  }
  LOBYTE(v23) = 125;
  sub_20BDDC1C8(a1, (uint64_t)&v23, 1);
  return a1;
}

uint64_t *sub_20BF4C044()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D8B8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D8B8, (char *)8, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4C100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF4C144(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v4 = (~(_BYTE)v3 & 3) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 8) = v5;
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  }
  return a1;
}

_QWORD *sub_20BF4C1A4(_QWORD *__dst, __int128 *a2, _QWORD *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20BF4C200(__dst + 3, a3);
  return __dst;
}

_QWORD *sub_20BF4C200(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  if (a2[1])
  {
    sub_20BF4C144((uint64_t)v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    else
      *a1 = *a2;
    a2[1] = 0;
    if (v7)
      (*(void (**)(_BYTE *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_20BF4C2C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF4C2D8(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v3 = 1;
  if (!v3)
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_20BF4C324(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t Typeid;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
  if (strcmp((const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*((_QWORD *)a2 + 1) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(a2, (std::type_info *)a1, v6);
    sub_20BF4B5D8(a1, v6);
    sub_20BF4C2D8((uint64_t)v6);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(pxrInternal__aapl__pxrReserved__::VtValue *a1, std::type_info *a2, char *a3)
{
  uint64_t v3;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  BOOL v5;

  v3 = *((_QWORD *)a1 + 1);
  type_name = a2->__type_name;
  if (v3)
    v5 = type_name == 0;
  else
    v5 = 1;
  if (v5)
    return (v3 == 0) == (type_name == 0);
  if (v3 == type_name)
    return (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 64))();
  return pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(a1, a2, a3);
}

void sub_20BF4C404(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BF4C404(a1, *a2);
    sub_20BF4C404(a1, a2[1]);
    sub_20BF4C44C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BF4C44C(uint64_t a1)
{
  sub_20BF4C2D8(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_20BF4C488(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20BF4C4DC(a1, *a2, a2 + 1);
  return a1;
}

void sub_20BF4C4C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C404(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4C4DC(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BF4C560(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20BF4C560(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_20BDEC0F8(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20BF4C5F4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BF4C7C8((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20BF4C5F4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20BF4C65C(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BF4C644(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C7C8(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF4C65C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BF4C6D0(__dst + 3, (_QWORD *)a2 + 3);
  return __dst;
}

void sub_20BF4C6B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF4C6D0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  if (a2[1])
  {
    sub_20BF4C144((uint64_t)v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
    else
      *a1 = *a2;
    if (v7)
      (*(void (**)(_BYTE *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_20BF4C78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

void sub_20BF4C7C8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF4C44C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20BF4C80C(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BF4C560((uint64_t **)a1, v4, v6, (__int128 *)v6);
      v6 += 5;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20BF4C874(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C404(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4C88C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BF4C934((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BF4C7C8((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20BF4C934@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BF4C9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C7C8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF4C9C4(uint64_t a1, const std::string::value_type **a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return 0;
  while (std::string::compare((const std::string *)(v3 + 4), *a2) > 0)
  {
    v2 = v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0;
  }
  if (std::string::compare((const std::string *)(v3 + 4), *a2) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = *v3;
  v7 = v3;
  if (*v3)
  {
    v7 = v3;
    do
    {
      v8 = std::string::compare((const std::string *)(v6 + 32), *a2);
      v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        v9 = (uint64_t *)v6;
        v7 = (_QWORD *)v6;
      }
      v6 = *v9;
    }
    while (*v9);
  }
  v10 = v3[1];
  if (v10)
  {
    do
    {
      v11 = std::string::compare((const std::string *)(v10 + 32), *a2);
      v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        v12 = (uint64_t *)v10;
        v2 = (_QWORD *)v10;
      }
      v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2)
    return 0;
  result = 0;
  do
  {
    v13 = (_QWORD *)v7[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v7[2];
        v15 = *v14 == (_QWORD)v7;
        v7 = v14;
      }
      while (!v15);
    }
    ++result;
    v7 = v14;
  }
  while (v14 != v2);
  return result;
}

uint64_t sub_20BF4CAE8(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_20BDEEBA4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_20BE10B80(a1, v3);
  sub_20BF4C44C((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_20BF4CB40(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = sub_20BE10B80(a1, v4);
      sub_20BF4C44C((uint64_t)(v4 + 4));
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t sub_20BF4CBA4(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1)
    return v2;
  return v5;
}

uint64_t *sub_20BF4CC20(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20BF4C5F4((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20BF4C7C8((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t *sub_20BF4CCB0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20BF4CCD8(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF4CE08(a1);
}

uint64_t sub_20BF4CCE8()
{
  return 1;
}

unint64_t sub_20BF4CCF0(uint64_t **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * sub_20BF4CE60(*a1));
}

uint64_t sub_20BF4CD20(_QWORD ***a1, uint64_t **a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator==(*a1, *a2, a3);
}

uint64_t sub_20BF4CD2C(_QWORD ***a1, uint64_t *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator==(*a1, a2, a3);
}

uint64_t sub_20BF4CD38()
{
  return 0;
}

_QWORD *sub_20BF4CD44(_QWORD ***a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF4CD54()
{
  return &unk_24C51D8B8;
}

uint64_t sub_20BF4CD60()
{
  return 0;
}

uint64_t sub_20BF4CD68()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF4CD74()
{
  return 0;
}

uint64_t sub_20BF4CD7C()
{
  return 0;
}

BOOL sub_20BF4CD84(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC17A0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF4CDBC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D8B8, a2, a3);
}

void *sub_20BF4CDDC()
{
  return &unk_24C51D8B8;
}

uint64_t sub_20BF4CDE8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

pxrInternal__aapl__pxrReserved__::VtDictionary *sub_20BF4CDF0@<X0>(const void *****a1@<X0>, uint64_t a2@<X8>)
{
  const void ****v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C51D8C8;
  return sub_20BF4D058((unsigned int **)a2, v2);
}

unsigned int **sub_20BF4CE08(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF49F14((_QWORD ***)v2, 0);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF4CE60(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v1 = *a1;
  if (!*a1 || !*(_QWORD *)(v1 + 16))
    return 0;
  v3 = 0;
  v4 = 0;
  sub_20BF4CEC0((uint64_t)&v3, *(_QWORD **)v1, (_QWORD *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_20BF4CEC0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a2 != a3)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      v5 = (_QWORD *)a2[1];
      v6 = a2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      result = sub_20BF4CF38(v4, (pxrInternal__aapl__pxrReserved__ *)(a2 + 4));
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t sub_20BF4CF38(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  pxrInternal__aapl__pxrReserved__ *v2;
  char *v4;
  char *v5;

  v2 = a2;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v5);
  return sub_20BF4CF7C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__ *)((char *)v2 + 24));
}

uint64_t sub_20BF4CF7C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  if (*(_BYTE *)(a1 + 8))
    result += (unint64_t)(*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

const void ****sub_20BF4CFC8(const void *****a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  const void ****v7;

  v2 = atomic_load((unsigned int *)*a1 + 2);
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x10uLL);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v3, *a1);
    v4 = v3 + 2;
    atomic_store(0, v3 + 2);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = (const void ****)v3;
    sub_20BF4CE08((unsigned int **)&v7);
  }
  return *a1;
}

void sub_20BF4D044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtDictionary *sub_20BF4D058(unsigned int **a1, const void ****a2)
{
  unsigned int *v4;
  pxrInternal__aapl__pxrReserved__::VtDictionary *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new(0x10uLL);
  result = pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v4, a2);
  v6 = v4 + 2;
  atomic_store(0, v4 + 2);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BF4D0B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF4D0C4(uint64_t a1, const void ****a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 8) = &off_24C51D8C8;
  sub_20BF4D058((unsigned int **)a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF4D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

const void ****sub_20BF4D190(const void *****a1)
{
  const void ****v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, const void *****))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF4CFC8(a1);
}

_QWORD *sub_20BF4D220(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v7 = result;
  v14 = a2;
  v15 = a3;
  if (a5)
    v8 = a2 == a4;
  else
    v8 = 1;
  v9 = v8;
  if (a3 != a5 || (v9 & 1) == 0)
  {
    do
    {
      sub_20BF4C560((uint64_t **)v7, v7 + 1, (const void **)(a2 + 32), (__int128 *)(a2 + 32));
      result = sub_20BF4D2AC(&v14, v10, v11);
      a2 = v14;
      if (a5)
        v12 = v14 == a4;
      else
        v12 = 1;
      v13 = v12;
    }
    while (v15 != a5 || (v13 & 1) == 0);
  }
  return result;
}

_QWORD *sub_20BF4D2AC(_QWORD *result, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD v8[4];
  char v9;
  int v10;

  v3 = result[1];
  if (!v3)
  {
    v8[0] = "vt/dictionary.h";
    v8[1] = "increment";
    v8[2] = 159;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<const std::map<std::string, pxrInternal__aapl_"
            "_pxrReserved__::VtValue, std::less<void>> *, std::__map_const_iterator<std::__tree_const_iterator<std::__val"
            "ue_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::str"
            "ing, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = const s"
            "td::map<std::string, pxrInternal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std"
            "::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReser"
            "ved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>,"
            " void *> *, long>>]";
    v9 = 0;
    v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Attempted invalid increment operation on a VtDictionary iterator", a3);
  }
  v4 = (_QWORD *)*result;
  v5 = *(_QWORD **)(*result + 8);
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (_QWORD *)v4[2];
      v7 = *v6 == (_QWORD)v4;
      v4 = v6;
    }
    while (!v7);
  }
  *result = v6;
  if (v6 == (_QWORD *)(v3 + 8))
    result[1] = 0;
  return result;
}

_QWORD *sub_20BF4D354(_QWORD *result, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD v8[4];
  char v9;
  int v10;

  v3 = result[1];
  if (!v3)
  {
    v8[0] = "vt/dictionary.h";
    v8[1] = "increment";
    v8[2] = 159;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string, pxrInternal__aapl__pxrRe"
            "served__::VtValue, std::less<void>> *, std::__map_iterator<std::__tree_iterator<std::__value_type<std::strin"
            "g, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__"
            "aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = std::map<std::string, pxr"
            "Internal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std::__map_iterator<std::__"
            "tree_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<st"
            "d::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>]";
    v9 = 0;
    v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Attempted invalid increment operation on a VtDictionary iterator", a3);
  }
  v4 = (_QWORD *)*result;
  v5 = *(_QWORD **)(*result + 8);
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (_QWORD *)v4[2];
      v7 = *v6 == (_QWORD)v4;
      v4 = v6;
    }
    while (!v7);
  }
  *result = v6;
  if (v6 == (_QWORD *)(v3 + 8))
    result[1] = 0;
  return result;
}

uint64_t sub_20BF4D3FC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF4A73C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF4D464, (uint64_t)&stru_24C51D8B8);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF4D468@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_20BF4D4B8(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_24C51D8B8;
  return v2(0);
}

uint64_t sub_20BF4D4B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v5;
  int v6;

  sub_20BEB59B0((uint64_t)&v5, (uint64_t)"Vt", (uint64_t)"VtDictionary");
  result = (uint64_t)malloc(8uLL);
  v3 = (_QWORD *)result;
  while (v6--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
  *v3 = 0;
  *a1 = v3;
  a1[1] = sub_20BF4D530;
  return result;
}

void sub_20BF4D530(_QWORD ***a1)
{
  if (a1)
  {
    sub_20BF49F14(a1, 0);
    free(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError(pxrInternal__aapl__pxrReserved__::Vt_HashDetail *this, const std::type_info *a2)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "vt/hash.cpp";
  v5[1] = "_IssueUnimplementedHashError";
  v5[2] = 42;
  v5[3] = "void pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError(const std::type_info &)";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invoked VtHashValue on an object of type <%s>, which is not hashable by TfHash().  Consider providing an overload of hash_value() or TfHashAppend().", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20BF4D5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v5;
  char *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  void *v12[2];
  char v13;
  void *__p[2];
  unsigned __int8 v15;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v12);
  if (v13 >= 0)
    v7 = v12;
  else
    v7 = (void **)v12[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"<'%s' @ %p>", v5, v6, v7, a2);
  if ((v15 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v9 = v15;
  else
    v9 = (uint64_t)__p[1];
  v10 = sub_20BDDC1C8(a3, (uint64_t)v8, v9);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return v10;
}

void sub_20BF4D6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOut()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtStreamOut(float *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtStreamOut(double *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtStreamOutArray(_QWORD *a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (*((_DWORD *)a2 + 2))
  {
    if (*((_DWORD *)a2 + 3))
    {
      if (*((_DWORD *)a2 + 4))
        v4 = 4;
      else
        v4 = 3;
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 1;
  }
  if (a2 + 1 == (uint64_t *)((char *)a2 + 4 * v4 + 4))
  {
    v7 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 4 * v4 - 4;
    LODWORD(v7) = 1;
    do
    {
      LODWORD(v7) = *(_DWORD *)((char *)a2 + v5 + 8) * v7;
      v5 += 4;
    }
    while (v6 != v5);
    if (!(_DWORD)v7)
    {
      v8 = 0;
      return sub_20BF4D80C(a1, a2, a3, a4, v8, 0);
    }
    v7 = (int)v7;
  }
  v8 = *a2 / v7;
  if (*a2 % v7)
  {
    v10 = *a2;
    a2 = &v10;
  }
  return sub_20BF4D80C(a1, a2, a3, a4, v8, 0);
}

_QWORD *sub_20BF4D80C(_QWORD *a1, _DWORD *a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *), uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  char v21;

  v20 = 91;
  sub_20BDDC1C8(a1, (uint64_t)&v20, 1);
  if (a2[2])
  {
    if (a2[3])
    {
      v12 = 2;
      if (a2[4])
        v12 = 3;
    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v12 == a6)
  {
    if (a5)
    {
      v13 = 0;
      do
      {
        if (v13)
          sub_20BDDC1C8(a1, (uint64_t)", ", 2);
        a4(a3, a1);
        ++v13;
      }
      while (a5 != v13);
    }
  }
  else
  {
    v14 = &a2[a6];
    v16 = v14[2];
    v15 = v14 + 2;
    if (v16)
    {
      v17 = 0;
      v18 = a6 + 1;
      do
      {
        if (v17)
          sub_20BDDC1C8(a1, (uint64_t)", ", 2);
        sub_20BF4D80C(a1, a2, a3, a4, a5, v18);
        ++v17;
      }
      while (v17 < *v15);
    }
  }
  v21 = 93;
  return sub_20BDDC1C8(a1, (uint64_t)&v21, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<BOOL>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<char>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned char>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<short>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned short>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<int>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned int>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<long long>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned long long>()
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<double>()
{
  return 0.0;
}

float pxrInternal__aapl__pxrReserved__::VtZero<float>()
{
  return 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::pxr_half::half>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4i>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3i>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2i>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4h>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3h>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2h>()
{
  return 0;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4f>()
{
  return 0.0;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3f>()
{
  return 0.0;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4d>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2d>()
{
  return 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuath>()
{
  return 0;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatf>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatd>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuaternion>()
{
  return 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuath>()
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatf>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatd>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4f>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(a1, 0.0);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3f>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(a1, 0.0);
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2f>()
{
  float v1;

  pxrInternal__aapl__pxrReserved__::GfMatrix2f::SetDiagonal((uint64_t)&v1, 0.0);
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4d>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1, 0.0);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3d>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(a1, 0.0);
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2d>()
{
  double v1;

  pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v1, 0.0);
  return v1;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange3f>@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_20CA9EF60;
  result = 2.84809454e-306;
  *(_QWORD *)(a1 + 16) = 0x80000000800000;
  return result;
}

int64x2_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange3d>@<Q0>(uint64_t a1@<X8>)
{
  int64x2_t result;

  *(int64x2_t *)a1 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(_OWORD *)(a1 + 16) = xmmword_20CA5AAF0;
  result = vdupq_n_s64(0xC7EFFFFFE0000000);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange2f>()
{
  return 3.4028e38;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange2d>()
{
  return 3.40282347e38;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange1f>()
{
  return 3.4028e38;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange1d>()
{
  return 3.40282347e38;
}

void pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfInterval>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRect2i>()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtZero<std::string>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfFrustum>@<D0>(pxrInternal__aapl__pxrReserved__::GfFrustum *a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(a1);
}

void pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMultiInterval>(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t *sub_20BF4DC44()
{
  sub_20BF4E4B4();
  sub_20BF4E5B4();
  sub_20BF4E6B4();
  sub_20BF4E7B4();
  sub_20BF4E8B4();
  sub_20BF4E9B4();
  sub_20BF4EAB4();
  sub_20BF4EBB4();
  sub_20BF4ECB4();
  sub_20BF4EDB4();
  sub_20BF4EEB4();
  sub_20BF4EFB4();
  sub_20BF4F0B4();
  sub_20BF4F1B4();
  sub_20BF4F2B4();
  sub_20BF4F3B4();
  sub_20BF4F4B4();
  sub_20BF4F5B4();
  sub_20BF4F6B4();
  sub_20BF4F7B4();
  sub_20BF4F8B4();
  sub_20BF4F9B4();
  sub_20BF4FAB4();
  sub_20BF4FBB4();
  sub_20BF4FCB4();
  sub_20BF4FDB4();
  sub_20BF4FEB4();
  sub_20BF4FFB4();
  sub_20BF500B4();
  sub_20BF501B4();
  sub_20BF502B4();
  sub_20BF503B4();
  sub_20BF504B4();
  sub_20BF505B4();
  sub_20BF506B4();
  sub_20BF507B4();
  sub_20BF508B4();
  sub_20BF509B4();
  sub_20BF50AB4();
  sub_20BF50BB4();
  sub_20BF50CB4();
  sub_20BF50DB4();
  sub_20BF50EB4();
  sub_20BF50FB4();
  sub_20BF510B4();
  sub_20BF511B4();
  return sub_20BF512B4();
}

void sub_20BF4DD0C()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C140, (uint64_t)&stru_24C51C130, (uint64_t)sub_20BF513B4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C140, (uint64_t)&stru_24C51C120, (uint64_t)sub_20BF5169C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C140, (uint64_t)&stru_24C51C110, (uint64_t)sub_20BF518C4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C130, (uint64_t)&stru_24C51C110, (uint64_t)sub_20BF51C38);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C110, (uint64_t)&stru_24C51C130, (uint64_t)sub_20BF51CCC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C130, (uint64_t)&stru_24C51C120, (uint64_t)sub_20BF51DC4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C120, (uint64_t)&stru_24C51C130, (uint64_t)sub_20BF51E24);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C120, (uint64_t)&stru_24C51C110, (uint64_t)sub_20BF51F18);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C110, (uint64_t)&stru_24C51C120, (uint64_t)sub_20BF51F9C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C180, (uint64_t)&stru_24C51C170, (uint64_t)sub_20BF51FF0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C180, (uint64_t)&stru_24C51C160, (uint64_t)sub_20BF5232C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C180, (uint64_t)&stru_24C51C150, (uint64_t)sub_20BF526F8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C170, (uint64_t)&stru_24C51C150, (uint64_t)sub_20BF52ACC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C150, (uint64_t)&stru_24C51C170, (uint64_t)sub_20BF52B78);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C170, (uint64_t)&stru_24C51C160, (uint64_t)sub_20BF52CC4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C160, (uint64_t)&stru_24C51C170, (uint64_t)sub_20BF52D64);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C160, (uint64_t)&stru_24C51C150, (uint64_t)sub_20BF52EA4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C150, (uint64_t)&stru_24C51C160, (uint64_t)sub_20BF52F40);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&unk_24C51C1C0, (uint64_t)&stru_24C51C1B0, (uint64_t)sub_20BF52FCC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&unk_24C51C1C0, (uint64_t)&stru_24C51C1A0, (uint64_t)sub_20BF53378);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&unk_24C51C1C0, (uint64_t)&stru_24C51C190, (uint64_t)sub_20BF53758);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C1B0, (uint64_t)&stru_24C51C190, (uint64_t)sub_20BF53B48);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C190, (uint64_t)&stru_24C51C1B0, (uint64_t)sub_20BF53C00);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C1B0, (uint64_t)&stru_24C51C1A0, (uint64_t)sub_20BF53DC4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C1A0, (uint64_t)&stru_24C51C1B0, (uint64_t)sub_20BF53E6C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C1A0, (uint64_t)&stru_24C51C190, (uint64_t)sub_20BF54020);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C190, (uint64_t)&stru_24C51C1A0, (uint64_t)sub_20BF540B0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51BFD0, (uint64_t)&stru_24C51BFE0, (uint64_t)sub_20BF5413C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51BFE0, (uint64_t)&stru_24C51BFD0, (uint64_t)sub_20BF549D4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C030, (uint64_t)&stru_24C51C020, (uint64_t)sub_20BF5526C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C020, (uint64_t)&stru_24C51C030, (uint64_t)sub_20BF55638);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C030, (uint64_t)&stru_24C51C010, (uint64_t)sub_20BF558F4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C010, (uint64_t)&stru_24C51C030, (uint64_t)sub_20BF55CBC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C020, (uint64_t)&stru_24C51C010, (uint64_t)sub_20BF55D1C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51C010, (uint64_t)&stru_24C51C020, (uint64_t)sub_20BF55DA0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DDB0, (uint64_t)&stru_24C51DD98, (uint64_t)sub_20BF55E24);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD98, (uint64_t)&stru_24C51DDB0, (uint64_t)sub_20BF55ECC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DDB0, (uint64_t)&stru_24C51DD80, (uint64_t)sub_20BF57644);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD80, (uint64_t)&stru_24C51DDB0, (uint64_t)sub_20BF576F0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD98, (uint64_t)&stru_24C51DD80, (uint64_t)sub_20BF58218);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD80, (uint64_t)&stru_24C51DD98, (uint64_t)sub_20BF582B8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA08, (uint64_t)&stru_24C51DA50, (uint64_t)sub_20BF58358);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA50, (uint64_t)&stru_24C51DA08, (uint64_t)sub_20BF5840C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA08, (uint64_t)&stru_24C51DA98, (uint64_t)sub_20BF59AB8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA98, (uint64_t)&stru_24C51DA08, (uint64_t)sub_20BF59B74);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA50, (uint64_t)&stru_24C51DA98, (uint64_t)sub_20BF5A798);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA98, (uint64_t)&stru_24C51DA50, (uint64_t)sub_20BF5A838);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51D9F0, (uint64_t)&stru_24C51DA38, (uint64_t)sub_20BF5A8D8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA38, (uint64_t)&stru_24C51D9F0, (uint64_t)sub_20BF5A9A0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51D9F0, (uint64_t)&stru_24C51DA80, (uint64_t)sub_20BF5C154);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA80, (uint64_t)&stru_24C51D9F0, (uint64_t)sub_20BF5C228);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA38, (uint64_t)&stru_24C51DA80, (uint64_t)sub_20BF5CEE0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA80, (uint64_t)&stru_24C51DA38, (uint64_t)sub_20BF5CF9C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51D9D8, (uint64_t)&stru_24C51DA20, (uint64_t)sub_20BF5D058);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA20, (uint64_t)&stru_24C51D9D8, (uint64_t)sub_20BF5D124);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51D9D8, (uint64_t)&stru_24C51DA68, (uint64_t)sub_20BF5E804);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA68, (uint64_t)&stru_24C51D9D8, (uint64_t)sub_20BF5E8E0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA20, (uint64_t)&stru_24C51DA68, (uint64_t)sub_20BF5F4CC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DA68, (uint64_t)&stru_24C51DA20, (uint64_t)sub_20BF5F570);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DAB0, (uint64_t)&stru_24C51DAF8, (uint64_t)sub_20BF5F614);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DAF8, (uint64_t)&stru_24C51DAB0, (uint64_t)sub_20BF5F6EC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DC00, (uint64_t)&stru_24C51DC18, (uint64_t)sub_20BF60F44);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DC18, (uint64_t)&stru_24C51DC00, (uint64_t)sub_20BF60FF4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DC00, (uint64_t)&stru_24C51DC30, (uint64_t)sub_20BF626F8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DC30, (uint64_t)&stru_24C51DC00, (uint64_t)sub_20BF627A8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DC18, (uint64_t)&stru_24C51DC30, (uint64_t)sub_20BF6339C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DC30, (uint64_t)&stru_24C51DC18, (uint64_t)sub_20BF6344C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD38, (uint64_t)&stru_24C51DD08, (uint64_t)sub_20BF634FC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD08, (uint64_t)&stru_24C51DD38, (uint64_t)sub_20BF63598);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD20, (uint64_t)&stru_24C51DD08, (uint64_t)sub_20BF64A6C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD08, (uint64_t)&stru_24C51DD20, (uint64_t)sub_20BF64B08);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DD20, (uint64_t)&stru_24C51DCD8, (uint64_t)sub_20BF6553C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DCD8, (uint64_t)&stru_24C51DD20, (uint64_t)sub_20BF655D8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DBA0, (uint64_t)&stru_24C51DBB8, (uint64_t)sub_20BF66044);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DBB8, (uint64_t)&stru_24C51DBA0, (uint64_t)sub_20BF660E4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DB70, (uint64_t)&stru_24C51DB88, (uint64_t)sub_20BF67458);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DB88, (uint64_t)&stru_24C51DB70, (uint64_t)sub_20BF674FC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DB40, (uint64_t)&stru_24C51DB58, (uint64_t)sub_20BF68B5C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C51DB58, (uint64_t)&stru_24C51DB40, (uint64_t)sub_20BF68C18);
}

uint64_t *sub_20BF4E4B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D990, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D990, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4E570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4E5B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9A8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D9A8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4E670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4E6B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9C0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D9C0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4E770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4E7B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9D8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D9D8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4E870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4E8B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9F0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51D9F0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4E970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4E9B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA08, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA08, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4EA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4EAB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA20, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA20, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4EBB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA38, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA38, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4EC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4ECB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA50, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA50, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4ED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4EDB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA68, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA68, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4EE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4EEB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA80, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA80, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4EF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4EFB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA98, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DA98, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F0B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DAB0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F1B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAC8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DAC8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F2B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DAE0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F3B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAF8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DAF8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F4B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB10, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DB10, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F5B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB28, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DB28, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F6B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB40, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DB40, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F7B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB58, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DB58, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F8B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB70, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DB70, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4F970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4F9B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB88, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DB88, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4FA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4FAB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DBA0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DBA0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4FBB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DBB8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DBB8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4FC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4FCB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DBD0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DBD0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4FD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4FDB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DBE8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DBE8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4FEB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC00, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC00, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF4FF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF4FFB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC18, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC18, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF500B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC30, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC30, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF501B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC48, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC48, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF502B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC60, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC60, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF503B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC78, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC78, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF504B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC90, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DC90, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF505B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DCA8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DCA8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF506B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DCC0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DCC0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF507B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DCD8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DCD8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF508B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DCF0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DCF0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF509B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD08, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD08, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF50AB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD20, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD20, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF50BB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD38, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD38, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF50CB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD50, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD50, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF50DB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD68, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD68, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF50EB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD80, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD80, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF50F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF50FB4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD98, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DD98, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF51070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF510B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DDB0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF51170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF511B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDC8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DDC8, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF51270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF512B4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDE0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C51DDE0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF51370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF513B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v8;
  uint64_t result;

  v2 = (int *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    v2 = (int *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*v2);
  if (*v2)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
      v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  else
  {
    v6 = v5 >> 16;
  }
  v7 = v2[1];
  v8 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v7);
  if (v7)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23])
      result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23]
             + (((v8 & 0x7FFFFF) + ((v8 >> 13) & 1) + 4095) >> 13);
    else
      result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v8);
  }
  else
  {
    result = v8 >> 16;
  }
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51DDF8 + 3;
  *(_DWORD *)a2 = (unsigned __int16)v6 | ((unsigned __int16)result << 16);
  return result;
}

_DWORD *sub_20BF514A0(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20BF514B0(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF514BC()
{
  return 1;
}

unint64_t sub_20BF514C4(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1]+ (unint64_t)*a1+ (a1[1] + *a1) * (unint64_t)(a1[1] + *a1)) >> 1))));
}

BOOL sub_20BF514FC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

BOOL sub_20BF51540(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

uint64_t sub_20BF51588()
{
  return 0;
}

_QWORD *sub_20BF51594(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20BF515A4()
{
  return &unk_24C51C130;
}

uint64_t sub_20BF515B0()
{
  return 0;
}

uint64_t sub_20BF515B8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF515C4()
{
  return 0;
}

uint64_t sub_20BF515CC()
{
  return 0;
}

BOOL sub_20BF515D4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA074 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5160C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, a2, a3);
}

void *sub_20BF5162C()
{
  return &unk_24C51C130;
}

_DWORD *sub_20BF5163C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51DDF8 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

uint64_t sub_20BF51658(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

float32x2_t sub_20BF5169C@<D0>(int32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  int32x2_t v3;
  float32x2_t result;

  v3 = a1[1];
  if ((v3.i8[0] & 4) != 0)
    a1 = (int32x2_t *)(*(uint64_t (**)(void))((*(_QWORD *)&v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  a2[1] = (float32x2_t)((char *)&off_24C51DEB0 + 3);
  result = vcvt_f32_s32(*a1);
  *a2 = result;
  return result;
}

_QWORD *sub_20BF516EC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF516FC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF51708()
{
  return 1;
}

unint64_t sub_20BF51710(int8x8_t *a1)
{
  int8x8_t v1;
  int64x2_t v2;
  uint64_t v3;

  v1 = vbic_s8(*a1, (int8x8_t)vceqz_f32((float32x2_t)*a1));
  v2.i64[0] = v1.u32[0];
  v2.i64[1] = v1.u32[1];
  v3 = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.u32[1]
                                                                      + ((unint64_t)(v3 + v3 * v3) >> 1))));
}

BOOL sub_20BF51758(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_20BF51774(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_20BF51794()
{
  return 0;
}

_QWORD *sub_20BF517A0(float *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, a1);
}

void *sub_20BF517B0()
{
  return &unk_24C51C120;
}

uint64_t sub_20BF517BC()
{
  return 0;
}

uint64_t sub_20BF517C4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF517D0()
{
  return 0;
}

uint64_t sub_20BF517D8()
{
  return 0;
}

BOOL sub_20BF517E0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF51818(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, a2, a3);
}

void *sub_20BF51838()
{
  return &unk_24C51C120;
}

_QWORD *sub_20BF51848@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C51DEB0 + 3;
  return result;
}

uint64_t sub_20BF51860(uint64_t result, float *a2, float *a3)
{
  float v3;
  unint64_t v4;
  float v5;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (*(_BYTE *)(result + 8))
    v4 = ((*(_QWORD *)result
         + LODWORD(v3)
         + (*(_QWORD *)result + LODWORD(v3)) * (*(_QWORD *)result + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v4;
  v5 = *a3;
  if (*a3 == 0.0)
    v5 = 0.0;
  *(_QWORD *)result = LODWORD(v5) + ((v4 + LODWORD(v5) + (v4 + LODWORD(v5)) * (v4 + LODWORD(v5))) >> 1);
  return result;
}

char *sub_20BF518C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  double v5;
  char *result;
  unsigned int *v7;
  unsigned int v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = (double)*(int *)a1;
  v5 = (double)*(int *)(a1 + 4);
  a2[1] = (char *)&off_24C51DF68 + 2;
  result = (char *)operator new(0x18uLL);
  *(double *)result = v4;
  *((double *)result + 1) = v5;
  v7 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a2 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

uint64_t *sub_20BF51944(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF51968(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 4;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF51994(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF519A4()
{
  return 1;
}

unint64_t sub_20BF519AC(int8x16_t **a1)
{
  int64x2_t v1;
  uint64_t v2;

  v1 = (int64x2_t)vbicq_s8(**a1, (int8x16_t)vceqzq_f64(*(float64x2_t *)*a1));
  v2 = vaddvq_s64(v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.i64[1]
                                                                      + ((unint64_t)(v2 + v2 * v2) >> 1))));
}

BOOL sub_20BF519F4(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(_QWORD *)a1 + 8) == *(double *)(*(_QWORD *)a2 + 8) && **(double **)a1 == **(double **)a2;
}

BOOL sub_20BF51A18(uint64_t a1, double *a2)
{
  return *(double *)(*(_QWORD *)a1 + 8) == a2[1] && **(double **)a1 == *a2;
}

uint64_t sub_20BF51A3C()
{
  return 0;
}

_QWORD *sub_20BF51A48(double **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF51A58()
{
  return &unk_24C51C110;
}

uint64_t sub_20BF51A64()
{
  return 0;
}

uint64_t sub_20BF51A6C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF51A78()
{
  return 0;
}

uint64_t sub_20BF51A80()
{
  return 0;
}

BOOL sub_20BF51A88(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF51AC0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, a2, a3);
}

void *sub_20BF51AE0()
{
  return &unk_24C51C110;
}

uint64_t sub_20BF51AEC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unsigned int *sub_20BF51AF4@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20BF51B50(uint64_t result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = v3;
  if (*(_BYTE *)(result + 8))
    *(_QWORD *)&v4 = *(_QWORD *)&v3
                   + ((*(_QWORD *)result
                     + *(_QWORD *)&v3
                     + (*(_QWORD *)result + *(_QWORD *)&v3) * (*(_QWORD *)result + *(_QWORD *)&v3)) >> 1);
  else
    *(_BYTE *)(result + 8) = 1;
  *(double *)result = v4;
  v5 = *a3;
  if (*a3 == 0.0)
    v5 = 0.0;
  *(_QWORD *)result = *(_QWORD *)&v5
                    + ((*(_QWORD *)&v4
                      + *(_QWORD *)&v5
                      + (*(_QWORD *)&v4 + *(_QWORD *)&v5) * (*(_QWORD *)&v4 + *(_QWORD *)&v5)) >> 1);
  return result;
}

unsigned int *sub_20BF51BB0(unsigned int **a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load(*a1 + 4);
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x18uLL);
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v5 = v3 + 4;
    atomic_store(0, v3 + 4);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    *a1 = v3;
    v7 = v4 + 4;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

char *sub_20BF51C38@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  double v5;
  char *result;
  unsigned int *v7;
  unsigned int v8;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  a2[1] = (char *)&off_24C51DF68 + 2;
  result = (char *)operator new(0x18uLL);
  *(double *)result = v4;
  *((double *)result + 1) = v5;
  v7 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a2 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

uint64_t sub_20BF51CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double *v4;
  float v5;
  unsigned int v6;
  float v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (double *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(double **)a1;
  v5 = *v4;
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  v7 = v4[1];
  if (v7 == 0.0)
  {
    result = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
           + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51DDF8 + 3;
  *(_DWORD *)a2 = (unsigned __int16)v6 | ((unsigned __int16)result << 16);
  return result;
}

unsigned __int16 *sub_20BF51DC4@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*result];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[result[1]];
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51DEB0 + 3;
  *(float *)a2 = v4;
  *(float *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_20BF51E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float *v2;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;
  float v7;
  uint64_t result;

  v2 = (float *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    v2 = (float *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v2;
  if (*v2 == 0.0)
  {
    v6 = v5 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
  {
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
       + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  v7 = v2[1];
  if (v7 == 0.0)
  {
    result = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
           + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51DDF8 + 3;
  *(_DWORD *)a2 = (unsigned __int16)v6 | ((unsigned __int16)result << 16);
  return result;
}

unsigned int *sub_20BF51F18@<X0>(float32x2_t *a1@<X0>, unsigned int **a2@<X8>)
{
  float32x2_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  float64x2_t v7;

  v3 = a1[1];
  if ((v3.i8[0] & 4) != 0)
    a1 = (float32x2_t *)(*(uint64_t (**)(void))((*(_QWORD *)&v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  a2[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  v7 = vcvtq_f64_f32(*a1);
  result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)result = v7;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

float32x2_t sub_20BF51F9C@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>)
{
  uint64_t v3;
  float64x2_t *v4;
  float32x2_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float64x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float64x2_t **)a1;
  a2[1] = (float32x2_t)((char *)&off_24C51DEB0 + 3);
  result = vcvt_f32_f64(*v4);
  *a2 = result;
  return result;
}

uint64_t sub_20BF51FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;
  int v7;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v8;
  unsigned int v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v11;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(int **)a1;
  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*v4);
  if (*v4)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
      v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  else
  {
    v6 = v5 >> 16;
  }
  v7 = v4[1];
  v8 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v7);
  if (v7)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23])
      v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23]
         + (((v8 & 0x7FFFFF) + ((v8 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v8);
  }
  else
  {
    v9 = v8 >> 16;
  }
  v10 = v4[2];
  v11 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v10);
  if (v10)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v11 >> 23])
      result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v11 >> 23]
             + (((v11 & 0x7FFFFF) + ((v11 >> 13) & 1) + 4095) >> 13);
    else
      result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v11);
  }
  else
  {
    result = v11 >> 16;
  }
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51E020 + 3;
  *(_WORD *)a2 = v6;
  *(_WORD *)(a2 + 2) = v9;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

int *sub_20BF52128(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

int *sub_20BF52140(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t sub_20BF52154()
{
  return 1;
}

unint64_t sub_20BF5215C(unsigned __int16 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20BF52298((uint64_t)&v2, a1, a1 + 1, a1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_20BF521C0()
{
  return 0;
}

_QWORD *sub_20BF521CC(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20BF521DC()
{
  return &unk_24C51C170;
}

uint64_t sub_20BF521E8()
{
  return 0;
}

uint64_t sub_20BF521F0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF521FC()
{
  return 0;
}

uint64_t sub_20BF52204()
{
  return 0;
}

BOOL sub_20BF5220C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA12CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF52244(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, a2, a3);
}

void *sub_20BF52264()
{
  return &unk_24C51C170;
}

uint64_t sub_20BF52274@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51E020 + 3;
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 4);
  return result;
}

uint64_t sub_20BF52298(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20BF51658(a1, a3, a4);
}

BOOL sub_20BF522D0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
}

char *sub_20BF5232C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int32x2_t *v4;
  float v5;
  float32x2_t v6;
  char *result;
  unsigned int *v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (int32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(int32x2_t **)a1;
  v5 = (float)v4[1].i32[0];
  a2[1] = (char *)&off_24C51E0D8 + 2;
  v6 = vcvt_f32_s32(*v4);
  result = (char *)operator new(0x10uLL);
  *(float32x2_t *)result = v6;
  *((float *)result + 2) = v5;
  v8 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)result + 3);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t *sub_20BF523B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF523DC(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF52408(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF52418()
{
  return 1;
}

unint64_t sub_20BF52420(float **a1)
{
  float *v1;
  float *v2;
  float *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5 = 0;
  v6 = 0;
  sub_20BF5261C((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_20BF52478(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20BF524BC(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20BF52500()
{
  return 0;
}

_QWORD *sub_20BF5250C(float **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF5251C()
{
  return &unk_24C51C160;
}

uint64_t sub_20BF52528()
{
  return 0;
}

uint64_t sub_20BF52530()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF5253C()
{
  return 0;
}

uint64_t sub_20BF52544()
{
  return 0;
}

BOOL sub_20BF5254C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF52584(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, a2, a3);
}

void *sub_20BF525A4()
{
  return &unk_24C51C160;
}

uint64_t sub_20BF525B0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_DWORD *sub_20BF525B8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  result[2] = v5;
  v6 = result + 3;
  atomic_store(0, result + 3);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BF5261C(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4;
  unint64_t v5;

  v4 = *a2;
  if (*a2 == 0.0)
    v4 = 0.0;
  v5 = LODWORD(v4);
  if (*(_BYTE *)(a1 + 8))
    v5 = ((*(_QWORD *)a1 + LODWORD(v4) + (*(_QWORD *)a1 + LODWORD(v4)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v4))) >> 1)
       + LODWORD(v4);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20BF51860(a1, a3, a4);
}

unsigned int *sub_20BF52668(unsigned int **a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load(*a1 + 3);
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x10uLL);
    v4 = *a1;
    v5 = (*a1)[2];
    *(_QWORD *)v3 = *(_QWORD *)*a1;
    v3[2] = v5;
    v6 = v3 + 3;
    atomic_store(0, v3 + 3);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = v4 + 3;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

char *sub_20BF526F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int *v4;
  double v5;
  double v6;
  double v7;
  char *result;
  unsigned int *v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(int **)a1;
  v5 = (double)*v4;
  v6 = (double)v4[1];
  v7 = (double)v4[2];
  a2[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(double *)result = v5;
  *((double *)result + 1) = v6;
  *((double *)result + 2) = v7;
  v9 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t *sub_20BF52790(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF527B4(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 6;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF527E0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF527F0()
{
  return 1;
}

unint64_t sub_20BF527F8(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5 = 0;
  v6 = 0;
  sub_20BF529F4((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_20BF52850(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20BF52894(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20BF528D8()
{
  return 0;
}

_QWORD *sub_20BF528E4(double **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF528F4()
{
  return &unk_24C51C150;
}

uint64_t sub_20BF52900()
{
  return 0;
}

uint64_t sub_20BF52908()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF52914()
{
  return 0;
}

uint64_t sub_20BF5291C()
{
  return 0;
}

BOOL sub_20BF52924(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5295C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, a2, a3);
}

void *sub_20BF5297C()
{
  return &unk_24C51C150;
}

uint64_t sub_20BF52988(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF52990@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  v5 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *((_QWORD *)result + 2) = v5;
  v6 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BF529F4(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;

  v4 = *a2;
  if (*a2 == 0.0)
    v4 = 0.0;
  v5 = v4;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v5 = *(_QWORD *)&v4
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v4
                     + (*(_QWORD *)a1 + *(_QWORD *)&v4) * (*(_QWORD *)a1 + *(_QWORD *)&v4)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v5;
  return sub_20BF51B50(a1, a3, a4);
}

unsigned int *sub_20BF52A3C(unsigned int **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load(*a1 + 6);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x20uLL);
    v4 = *a1;
    v5 = *((_QWORD *)*a1 + 2);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *((_QWORD *)v3 + 2) = v5;
    v6 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)v3 + 6);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = (unsigned int *)v3;
    v8 = v4 + 6;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

char *sub_20BF52ACC@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  char *result;
  unsigned int *v8;
  unsigned int v9;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  a2[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(double *)result = v4;
  *((double *)result + 1) = v5;
  *((double *)result + 2) = v6;
  v8 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t sub_20BF52B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double *v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (double *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(double **)a1;
  v5 = *v4;
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  v7 = v4[1];
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  v9 = v4[2];
  if (v9 == 0.0)
  {
    result = HIWORD(LODWORD(v9));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
           + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51E020 + 3;
  *(_WORD *)a2 = v6;
  *(_WORD *)(a2 + 2) = v8;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

_DWORD *sub_20BF52CC4@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  _DWORD *result;
  unsigned int *v8;
  unsigned int v9;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  a2[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  *(float *)result = v4;
  *((float *)result + 1) = v5;
  *((float *)result + 2) = v6;
  v8 = result + 3;
  atomic_store(0, result + 3);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t sub_20BF52D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float *v4;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float **)a1;
  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
  if (*v4 == 0.0)
  {
    v6 = v5 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
  {
    v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
       + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  v7 = v4[1];
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  v9 = v4[2];
  if (v9 == 0.0)
  {
    result = HIWORD(LODWORD(v9));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
           + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  *(_QWORD *)(a2 + 8) = (char *)&off_24C51E020 + 3;
  *(_WORD *)a2 = v6;
  *(_WORD *)(a2 + 2) = v8;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

char *sub_20BF52EA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float32x2_t *v4;
  double v5;
  char *result;
  unsigned int *v7;
  unsigned int v8;
  float64x2_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float32x2_t **)a1;
  v5 = v4[1].f32[0];
  a2[1] = (char *)&off_24C51E190 + 2;
  v9 = vcvtq_f64_f32(*v4);
  result = (char *)operator new(0x20uLL);
  *(float64x2_t *)result = v9;
  *((double *)result + 2) = v5;
  v7 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

char *sub_20BF52F40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float64x2_t *v4;
  float v5;
  float32x2_t v6;
  char *result;
  unsigned int *v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float64x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float64x2_t **)a1;
  v5 = v4[1].f64[0];
  a2[1] = (char *)&off_24C51E0D8 + 2;
  v6 = vcvt_f32_f64(*v4);
  result = (char *)operator new(0x10uLL);
  *(float32x2_t *)result = v6;
  *((float *)result + 2) = v5;
  v8 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)result + 3);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

_WORD *sub_20BF52FCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int *v4;
  _WORD *result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(int **)a1;
  result = sub_20BF5302C(&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_24C51E248 + 3;
  return result;
}

_WORD *sub_20BF5302C(_WORD *a1, int *a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  unsigned int v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v7;
  unsigned int v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v10;
  unsigned int v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v13;
  unsigned int v14;

  v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*a2);
  if (*a2)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
      v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
         + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  else
  {
    v5 = v4 >> 16;
  }
  *a1 = v5;
  v6 = a2[1];
  v7 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v6);
  if (v6)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23])
      v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]
         + (((v7 & 0x7FFFFF) + ((v7 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v7);
  }
  else
  {
    v8 = v7 >> 16;
  }
  a1[1] = v8;
  v9 = a2[2];
  v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v9);
  if (v9)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
          + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
  }
  else
  {
    v11 = v10 >> 16;
  }
  a1[2] = v11;
  v12 = a2[3];
  v13 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v12);
  if (v12)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v13 >> 23])
      v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v13 >> 23]
          + (((v13 & 0x7FFFFF) + ((v13 >> 13) & 1) + 4095) >> 13);
    else
      LOWORD(v14) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v13);
  }
  else
  {
    v14 = v13 >> 16;
  }
  a1[3] = v14;
  return a1;
}

_QWORD *sub_20BF53170(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF53180(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF5318C()
{
  return 1;
}

unint64_t sub_20BF53194(unsigned __int16 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20BF532C8((uint64_t)&v2, a1, a1 + 1, a1 + 2, a1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_20BF531FC()
{
  return 0;
}

_QWORD *sub_20BF53208(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20BF53218()
{
  return &unk_24C51C1B0;
}

uint64_t sub_20BF53224()
{
  return 0;
}

uint64_t sub_20BF5322C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF53238()
{
  return 0;
}

uint64_t sub_20BF53240()
{
  return 0;
}

BOOL sub_20BF53248(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA1E4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF53280(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, a2, a3);
}

void *sub_20BF532A0()
{
  return &unk_24C51C1B0;
}

_QWORD *sub_20BF532B0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C51E248 + 3;
  return result;
}

uint64_t sub_20BF532C8(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20BF52298(a1, a3, a4, a5);
}

BOOL sub_20BF53304(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
}

unsigned int *sub_20BF53378@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  int32x4_t *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  float32x4_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (int32x4_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(int32x4_t **)a1;
  a2[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  v8 = vcvtq_f32_s32(*v4);
  result = (unsigned int *)operator new(0x14uLL);
  *(float32x4_t *)result = v8;
  v6 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t *sub_20BF53400(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF53424(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 4;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF53450(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF53460()
{
  return 1;
}

unint64_t sub_20BF53468(float **a1)
{
  float *v1;
  float *v2;
  float *v3;
  float *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  sub_20BF53680((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_20BF534C4(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_20BF53518(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_20BF5356C()
{
  return 0;
}

_QWORD *sub_20BF53578(float **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF53588()
{
  return &unk_24C51C1A0;
}

uint64_t sub_20BF53594()
{
  return 0;
}

uint64_t sub_20BF5359C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF535A8()
{
  return 0;
}

uint64_t sub_20BF535B0()
{
  return 0;
}

BOOL sub_20BF535B8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF535F0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, a2, a3);
}

void *sub_20BF53610()
{
  return &unk_24C51C1A0;
}

uint64_t sub_20BF5361C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unsigned int *sub_20BF53624@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20BF53680(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  unint64_t v6;

  v5 = *a2;
  if (*a2 == 0.0)
    v5 = 0.0;
  v6 = LODWORD(v5);
  if (*(_BYTE *)(a1 + 8))
    v6 = ((*(_QWORD *)a1 + LODWORD(v5) + (*(_QWORD *)a1 + LODWORD(v5)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v5))) >> 1)
       + LODWORD(v5);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return sub_20BF5261C(a1, a3, a4, a5);
}

unsigned int *sub_20BF536D0(unsigned int **a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load(*a1 + 4);
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x14uLL);
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v5 = v3 + 4;
    atomic_store(0, v3 + 4);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    *a1 = v3;
    v7 = v4 + 4;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

char *sub_20BF53758@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  char *result;
  unsigned int *v10;
  unsigned int v11;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(int **)a1;
  v5 = (double)*v4;
  v6 = (double)v4[1];
  v7 = (double)v4[2];
  v8 = (double)v4[3];
  a2[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(double *)result = v5;
  *((double *)result + 1) = v6;
  *((double *)result + 2) = v7;
  *((double *)result + 3) = v8;
  v10 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  return result;
}

uint64_t *sub_20BF537F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF53818(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 8;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF53844(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF53854()
{
  return 1;
}

unint64_t sub_20BF5385C(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  double *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  sub_20BF53A74((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_20BF538B8(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_20BF5390C(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_20BF53960()
{
  return 0;
}

_QWORD *sub_20BF5396C(double **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF5397C()
{
  return &unk_24C51C190;
}

uint64_t sub_20BF53988()
{
  return 0;
}

uint64_t sub_20BF53990()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF5399C()
{
  return 0;
}

uint64_t sub_20BF539A4()
{
  return 0;
}

BOOL sub_20BF539AC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF539E4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, a2, a3);
}

void *sub_20BF53A04()
{
  return &unk_24C51C190;
}

uint64_t sub_20BF53A10(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF53A18@<X0>(_OWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BF53A74(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  double v6;

  v5 = *a2;
  if (*a2 == 0.0)
    v5 = 0.0;
  v6 = v5;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v6 = *(_QWORD *)&v5
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v5
                     + (*(_QWORD *)a1 + *(_QWORD *)&v5) * (*(_QWORD *)a1 + *(_QWORD *)&v5)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v6;
  return sub_20BF529F4(a1, a3, a4, a5);
}

unsigned int *sub_20BF53AC0(unsigned int **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load(*a1 + 8);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x28uLL);
    v4 = *a1;
    v5 = *((_OWORD *)*a1 + 1);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = (unsigned int *)(v3 + 32);
    atomic_store(0, (unsigned int *)v3 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = (unsigned int *)v3;
    v8 = v4 + 8;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

char *sub_20BF53B48@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char *result;
  unsigned int *v9;
  unsigned int v10;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
  a2[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(double *)result = v4;
  *((double *)result + 1) = v5;
  *((double *)result + 2) = v6;
  *((double *)result + 3) = v7;
  v9 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

_WORD *sub_20BF53C00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double *v4;
  _WORD *result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (double *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(double **)a1;
  result = sub_20BF53C60(&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_24C51E248 + 3;
  return result;
}

_WORD *sub_20BF53C60(_WORD *a1, double *a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;

  v4 = *a2;
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = a2[1];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = a2[2];
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  v10 = a2[3];
  if (v10 == 0.0)
  {
    v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

_DWORD *sub_20BF53DC4@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  _DWORD *result;
  unsigned int *v9;
  unsigned int v10;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
  a2[1] = (char *)&off_24C51E300 + 2;
  result = operator new(0x14uLL);
  *(float *)result = v4;
  *((float *)result + 1) = v5;
  *((float *)result + 2) = v6;
  *((float *)result + 3) = v7;
  v9 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

_WORD *sub_20BF53E6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float *v4;
  _WORD *result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float **)a1;
  result = sub_20BF53ECC(&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_24C51E248 + 3;
  return result;
}

_WORD *sub_20BF53ECC(_WORD *a1, float *a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;

  v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)a2;
  if (*a2 == 0.0)
  {
    v5 = v4 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  *a1 = v5;
  v6 = a2[1];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = a2[2];
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  v10 = a2[3];
  if (v10 == 0.0)
  {
    v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

char *sub_20BF54020@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float32x2_t *v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;
  float64x2_t v8;
  float64x2_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float32x2_t **)a1;
  a2[1] = (char *)&off_24C51E3B8 + 2;
  v8 = vcvtq_f64_f32(*v4);
  v9 = vcvtq_f64_f32(v4[1]);
  result = (char *)operator new(0x28uLL);
  *(float64x2_t *)result = v8;
  *((float64x2_t *)result + 1) = v9;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

unsigned int *sub_20BF540B0@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  float64x2_t *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  float32x4_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float64x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float64x2_t **)a1;
  a2[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v4), v4[1]);
  result = (unsigned int *)operator new(0x14uLL);
  *(float32x4_t *)result = v8;
  v6 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

char *sub_20BF5413C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::GfMatrix4f *v4;
  char *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD v12[8];

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(const pxrInternal__aapl__pxrReserved__::GfMatrix4f **)a1;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v12, v4);
  a2[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v6 = v12[5];
  *((_OWORD *)result + 4) = v12[4];
  *((_OWORD *)result + 5) = v6;
  v7 = v12[7];
  *((_OWORD *)result + 6) = v12[6];
  *((_OWORD *)result + 7) = v7;
  v8 = v12[1];
  *(_OWORD *)result = v12[0];
  *((_OWORD *)result + 1) = v8;
  v9 = v12[3];
  *((_OWORD *)result + 2) = v12[2];
  *((_OWORD *)result + 3) = v9;
  v10 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  return result;
}

uint64_t *sub_20BF541DC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 128);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF54200(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 32;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF5422C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF5423C()
{
  return 1;
}

unint64_t sub_20BF54244(double **a1)
{
  char v2;

  return sub_20BF543AC((uint64_t)&v2, *a1);
}

BOOL sub_20BF54268(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(*a1, *a2);
}

BOOL sub_20BF54274(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(*a1, a2);
}

uint64_t sub_20BF54280()
{
  return 0;
}

_QWORD *sub_20BF5428C(double **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF5429C()
{
  return &unk_24C51BFE0;
}

uint64_t sub_20BF542A8()
{
  return 0;
}

uint64_t sub_20BF542B0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF542BC()
{
  return 0;
}

uint64_t sub_20BF542C4()
{
  return 0;
}

BOOL sub_20BF542CC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF54304(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, a2, a3);
}

void *sub_20BF54324()
{
  return &unk_24C51BFE0;
}

uint64_t sub_20BF54330(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF54338@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = *a1;
  a2[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *((_OWORD *)result + 2) = v3[2];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)result = v7;
  *((_OWORD *)result + 1) = v6;
  v8 = v3[7];
  v10 = v3[4];
  v9 = v3[5];
  *((_OWORD *)result + 6) = v3[6];
  *((_OWORD *)result + 7) = v8;
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v9;
  v11 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

unint64_t sub_20BF543AC(uint64_t a1, double *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  sub_20BF54448((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t sub_20BF54448(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  double v17;
  double v18;

  v17 = *a2;
  if (*a2 == 0.0)
    v17 = 0.0;
  v18 = v17;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v18 = *(_QWORD *)&v17
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v17
                      + (*(_QWORD *)a1 + *(_QWORD *)&v17) * (*(_QWORD *)a1 + *(_QWORD *)&v17)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v18;
  return sub_20BF544C8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_20BF544C8(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16;
  double v17;

  v16 = *a2;
  if (*a2 == 0.0)
    v16 = 0.0;
  v17 = v16;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v17 = *(_QWORD *)&v16
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v16
                      + (*(_QWORD *)a1 + *(_QWORD *)&v16) * (*(_QWORD *)a1 + *(_QWORD *)&v16)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v17;
  return sub_20BF54544(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_20BF54544(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15;
  double v16;

  v15 = *a2;
  if (*a2 == 0.0)
    v15 = 0.0;
  v16 = v15;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v16 = *(_QWORD *)&v15
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v15
                      + (*(_QWORD *)a1 + *(_QWORD *)&v15) * (*(_QWORD *)a1 + *(_QWORD *)&v15)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v16;
  return sub_20BF545BC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_20BF545BC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14)
{
  double v14;
  double v15;

  v14 = *a2;
  if (*a2 == 0.0)
    v14 = 0.0;
  v15 = v14;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v15 = *(_QWORD *)&v14
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v14
                      + (*(_QWORD *)a1 + *(_QWORD *)&v14) * (*(_QWORD *)a1 + *(_QWORD *)&v14)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v15;
  return sub_20BF54630(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_20BF54630(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13;
  double v14;

  v13 = *a2;
  if (*a2 == 0.0)
    v13 = 0.0;
  v14 = v13;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v14 = *(_QWORD *)&v13
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v13
                      + (*(_QWORD *)a1 + *(_QWORD *)&v13) * (*(_QWORD *)a1 + *(_QWORD *)&v13)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v14;
  return sub_20BF546A0(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_20BF546A0(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12;
  double v13;

  v12 = *a2;
  if (*a2 == 0.0)
    v12 = 0.0;
  v13 = v12;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v13 = *(_QWORD *)&v12
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v12
                      + (*(_QWORD *)a1 + *(_QWORD *)&v12) * (*(_QWORD *)a1 + *(_QWORD *)&v12)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v13;
  return sub_20BF5470C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_20BF5470C(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v11;
  double v12;

  v11 = *a2;
  if (*a2 == 0.0)
    v11 = 0.0;
  v12 = v11;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v12 = *(_QWORD *)&v11
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v11
                      + (*(_QWORD *)a1 + *(_QWORD *)&v11) * (*(_QWORD *)a1 + *(_QWORD *)&v11)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v12;
  return sub_20BF54774(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_20BF54774(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10;
  double v11;

  v10 = *a2;
  if (*a2 == 0.0)
    v10 = 0.0;
  v11 = v10;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v11 = *(_QWORD *)&v10
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v10
                      + (*(_QWORD *)a1 + *(_QWORD *)&v10) * (*(_QWORD *)a1 + *(_QWORD *)&v10)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v11;
  return sub_20BF547D8(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_20BF547D8(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v9;
  double v10;

  v9 = *a2;
  if (*a2 == 0.0)
    v9 = 0.0;
  v10 = v9;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v10 = *(_QWORD *)&v9
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v9
                      + (*(_QWORD *)a1 + *(_QWORD *)&v9) * (*(_QWORD *)a1 + *(_QWORD *)&v9)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v10;
  return sub_20BF54838(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_20BF54838(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v8;
  double v9;

  v8 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  v9 = v8;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v9 = *(_QWORD *)&v8
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v8
                     + (*(_QWORD *)a1 + *(_QWORD *)&v8) * (*(_QWORD *)a1 + *(_QWORD *)&v8)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v9;
  return sub_20BF54890(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20BF54890(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7;
  double v8;

  v7 = *a2;
  if (*a2 == 0.0)
    v7 = 0.0;
  v8 = v7;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v8 = *(_QWORD *)&v7
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v7
                     + (*(_QWORD *)a1 + *(_QWORD *)&v7) * (*(_QWORD *)a1 + *(_QWORD *)&v7)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v8;
  return sub_20BF548E4(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_20BF548E4(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v7;

  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = v6;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v7 = *(_QWORD *)&v6
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v6
                     + (*(_QWORD *)a1 + *(_QWORD *)&v6) * (*(_QWORD *)a1 + *(_QWORD *)&v6)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v7;
  return sub_20BF53A74(a1, a3, a4, a5, a6);
}

unsigned int *sub_20BF54934(unsigned int **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = atomic_load(*a1 + 32);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x88uLL);
    v4 = *a1;
    v5 = *((_OWORD *)*a1 + 3);
    v7 = *(_OWORD *)*a1;
    v6 = *((_OWORD *)*a1 + 1);
    *((_OWORD *)v3 + 2) = *((_OWORD *)*a1 + 2);
    *((_OWORD *)v3 + 3) = v5;
    *(_OWORD *)v3 = v7;
    *((_OWORD *)v3 + 1) = v6;
    v8 = *((_OWORD *)v4 + 7);
    v10 = *((_OWORD *)v4 + 4);
    v9 = *((_OWORD *)v4 + 5);
    *((_OWORD *)v3 + 6) = *((_OWORD *)v4 + 6);
    *((_OWORD *)v3 + 7) = v8;
    *((_OWORD *)v3 + 4) = v10;
    *((_OWORD *)v3 + 5) = v9;
    v11 = (unsigned int *)(v3 + 128);
    atomic_store(0, (unsigned int *)v3 + 32);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *a1 = (unsigned int *)v3;
    v13 = v4 + 32;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

char *sub_20BF549D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::GfMatrix4d *v4;
  char *result;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  _OWORD v10[4];

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(const pxrInternal__aapl__pxrReserved__::GfMatrix4d **)a1;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v10, v4);
  a2[1] = (char *)&off_24C51E528 + 2;
  result = (char *)operator new(0x44uLL);
  v6 = v10[1];
  *(_OWORD *)result = v10[0];
  *((_OWORD *)result + 1) = v6;
  v7 = v10[3];
  *((_OWORD *)result + 2) = v10[2];
  *((_OWORD *)result + 3) = v7;
  v8 = (unsigned int *)(result + 64);
  atomic_store(0, (unsigned int *)result + 16);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t *sub_20BF54A64(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 64);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF54A88(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 16;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF54AB4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF54AC4()
{
  return 1;
}

unint64_t sub_20BF54ACC(float **a1)
{
  char v2;

  return sub_20BF54C24((uint64_t)&v2, *a1);
}

BOOL sub_20BF54AF0(float **a1, float **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(*a1, *a2);
}

BOOL sub_20BF54AFC(float **a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(*a1, a2);
}

uint64_t sub_20BF54B08()
{
  return 0;
}

_QWORD *sub_20BF54B14(float **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF54B24()
{
  return &unk_24C51BFD0;
}

uint64_t sub_20BF54B30()
{
  return 0;
}

uint64_t sub_20BF54B38()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF54B44()
{
  return 0;
}

uint64_t sub_20BF54B4C()
{
  return 0;
}

BOOL sub_20BF54B54(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1A88ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF54B8C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFD0, a2, a3);
}

void *sub_20BF54BAC()
{
  return &unk_24C51BFD0;
}

uint64_t sub_20BF54BB8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF54BC0@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a1;
  a2[1] = (char *)&off_24C51E528 + 2;
  result = (char *)operator new(0x44uLL);
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *((_OWORD *)result + 2) = v3[2];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)result = v7;
  *((_OWORD *)result + 1) = v6;
  v8 = (unsigned int *)(result + 64);
  atomic_store(0, (unsigned int *)result + 16);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

unint64_t sub_20BF54C24(uint64_t a1, float *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  sub_20BF54CC0((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t sub_20BF54CC0(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16, float *a17)
{
  float v17;
  unint64_t v18;

  v17 = *a2;
  if (*a2 == 0.0)
    v17 = 0.0;
  v18 = LODWORD(v17);
  if (*(_BYTE *)(a1 + 8))
    v18 = ((*(_QWORD *)a1
          + LODWORD(v17)
          + (*(_QWORD *)a1 + LODWORD(v17)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v17))) >> 1)
        + LODWORD(v17);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v18;
  return sub_20BF54D44(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_20BF54D44(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  float v16;
  unint64_t v17;

  v16 = *a2;
  if (*a2 == 0.0)
    v16 = 0.0;
  v17 = LODWORD(v16);
  if (*(_BYTE *)(a1 + 8))
    v17 = ((*(_QWORD *)a1
          + LODWORD(v16)
          + (*(_QWORD *)a1 + LODWORD(v16)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v16))) >> 1)
        + LODWORD(v16);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v17;
  return sub_20BF54DC4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_20BF54DC4(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15)
{
  float v15;
  unint64_t v16;

  v15 = *a2;
  if (*a2 == 0.0)
    v15 = 0.0;
  v16 = LODWORD(v15);
  if (*(_BYTE *)(a1 + 8))
    v16 = ((*(_QWORD *)a1
          + LODWORD(v15)
          + (*(_QWORD *)a1 + LODWORD(v15)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v15))) >> 1)
        + LODWORD(v15);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v16;
  return sub_20BF54E40(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_20BF54E40(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14)
{
  float v14;
  unint64_t v15;

  v14 = *a2;
  if (*a2 == 0.0)
    v14 = 0.0;
  v15 = LODWORD(v14);
  if (*(_BYTE *)(a1 + 8))
    v15 = ((*(_QWORD *)a1
          + LODWORD(v14)
          + (*(_QWORD *)a1 + LODWORD(v14)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v14))) >> 1)
        + LODWORD(v14);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v15;
  return sub_20BF54EB8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_20BF54EB8(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13)
{
  float v13;
  unint64_t v14;

  v13 = *a2;
  if (*a2 == 0.0)
    v13 = 0.0;
  v14 = LODWORD(v13);
  if (*(_BYTE *)(a1 + 8))
    v14 = ((*(_QWORD *)a1
          + LODWORD(v13)
          + (*(_QWORD *)a1 + LODWORD(v13)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v13))) >> 1)
        + LODWORD(v13);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v14;
  return sub_20BF54F2C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_20BF54F2C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12;
  unint64_t v13;

  v12 = *a2;
  if (*a2 == 0.0)
    v12 = 0.0;
  v13 = LODWORD(v12);
  if (*(_BYTE *)(a1 + 8))
    v13 = ((*(_QWORD *)a1
          + LODWORD(v12)
          + (*(_QWORD *)a1 + LODWORD(v12)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v12))) >> 1)
        + LODWORD(v12);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v13;
  return sub_20BF54F9C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_20BF54F9C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  float v11;
  unint64_t v12;

  v11 = *a2;
  if (*a2 == 0.0)
    v11 = 0.0;
  v12 = LODWORD(v11);
  if (*(_BYTE *)(a1 + 8))
    v12 = ((*(_QWORD *)a1
          + LODWORD(v11)
          + (*(_QWORD *)a1 + LODWORD(v11)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v11))) >> 1)
        + LODWORD(v11);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v12;
  return sub_20BF55008(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_20BF55008(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  float v10;
  unint64_t v11;

  v10 = *a2;
  if (*a2 == 0.0)
    v10 = 0.0;
  v11 = LODWORD(v10);
  if (*(_BYTE *)(a1 + 8))
    v11 = ((*(_QWORD *)a1
          + LODWORD(v10)
          + (*(_QWORD *)a1 + LODWORD(v10)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v10))) >> 1)
        + LODWORD(v10);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v11;
  return sub_20BF55070(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_20BF55070(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float v9;
  unint64_t v10;

  v9 = *a2;
  if (*a2 == 0.0)
    v9 = 0.0;
  v10 = LODWORD(v9);
  if (*(_BYTE *)(a1 + 8))
    v10 = ((*(_QWORD *)a1 + LODWORD(v9) + (*(_QWORD *)a1 + LODWORD(v9))
                                        * (*(_QWORD *)a1 + (unint64_t)LODWORD(v9))) >> 1)
        + LODWORD(v9);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v10;
  return sub_20BF550D4(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_20BF550D4(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8;
  unint64_t v9;

  v8 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  v9 = LODWORD(v8);
  if (*(_BYTE *)(a1 + 8))
    v9 = ((*(_QWORD *)a1 + LODWORD(v8) + (*(_QWORD *)a1 + LODWORD(v8)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v8))) >> 1)
       + LODWORD(v8);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v9;
  return sub_20BF55130(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20BF55130(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7;
  unint64_t v8;

  v7 = *a2;
  if (*a2 == 0.0)
    v7 = 0.0;
  v8 = LODWORD(v7);
  if (*(_BYTE *)(a1 + 8))
    v8 = ((*(_QWORD *)a1 + LODWORD(v7) + (*(_QWORD *)a1 + LODWORD(v7)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v7))) >> 1)
       + LODWORD(v7);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_20BF55188(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_20BF55188(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  unint64_t v7;

  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = LODWORD(v6);
  if (*(_BYTE *)(a1 + 8))
    v7 = ((*(_QWORD *)a1 + LODWORD(v6) + (*(_QWORD *)a1 + LODWORD(v6)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v6))) >> 1)
       + LODWORD(v6);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return sub_20BF53680(a1, a3, a4, a5, a6);
}

unsigned int *sub_20BF551DC(unsigned int **a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = atomic_load(*a1 + 16);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x44uLL);
    v4 = *a1;
    v5 = *((_OWORD *)*a1 + 3);
    v7 = *(_OWORD *)*a1;
    v6 = *((_OWORD *)*a1 + 1);
    *((_OWORD *)v3 + 2) = *((_OWORD *)*a1 + 2);
    *((_OWORD *)v3 + 3) = v5;
    *(_OWORD *)v3 = v7;
    *((_OWORD *)v3 + 1) = v6;
    v8 = (unsigned int *)(v3 + 64);
    atomic_store(0, (unsigned int *)v3 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *a1 = (unsigned int *)v3;
    v10 = v4 + 16;
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

unsigned int *sub_20BF5526C@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  unsigned __int16 *v2;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;

  v2 = (unsigned __int16 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    v2 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)&v8, v2);
  a2[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v8;
  v6 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t *sub_20BF552F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF55318(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 4;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF55344(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF55354()
{
  return 1;
}

unint64_t sub_20BF5535C(float **a1)
{
  float *v1;
  int v3;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v3 = *((_DWORD *)*a1 + 3);
  v4 = 0;
  v5 = 0;
  sub_20BF55570((uint64_t)&v4, (float *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL sub_20BF553B8(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20BF5540C(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20BF55460()
{
  return 0;
}

_QWORD *sub_20BF5546C(int8x16_t **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF5547C()
{
  return &unk_24C51C020;
}

uint64_t sub_20BF55488()
{
  return 0;
}

uint64_t sub_20BF55490()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF5549C()
{
  return 0;
}

uint64_t sub_20BF554A4()
{
  return 0;
}

BOOL sub_20BF554AC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF554E4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, a2, a3);
}

void *sub_20BF55504()
{
  return &unk_24C51C020;
}

uint64_t sub_20BF55510(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unsigned int *sub_20BF55518@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20BF55570(uint64_t a1, float *a2, float *a3)
{
  float v3;
  unint64_t v4;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (*(_BYTE *)(a1 + 8))
    v4 = ((*(_QWORD *)a1 + LODWORD(v3) + (*(_QWORD *)a1 + LODWORD(v3)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20BF555B8(a1, a3);
}

uint64_t sub_20BF555B8(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF5261C((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF55638@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(const pxrInternal__aapl__pxrReserved__::GfQuatf **)a1;
  result = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_24C51E698 + 1;
  return result;
}

_QWORD *sub_20BF55698(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF556A8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF556B4()
{
  return 1;
}

unint64_t sub_20BF556BC(unsigned __int16 *a1)
{
  unsigned __int16 v2;
  uint64_t v3;
  char v4;

  v2 = a1[3];
  v3 = 0;
  v4 = 0;
  sub_20BF55840((uint64_t)&v3, &v2, a1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

BOOL sub_20BF55718(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]
      && sub_20BF522D0(a1, a2);
}

BOOL sub_20BF55744(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]
      && sub_20BF522D0(a1, a2);
}

uint64_t sub_20BF55774()
{
  return 0;
}

_QWORD *sub_20BF55780(uint64_t a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_20BF55790()
{
  return &unk_24C51C030;
}

uint64_t sub_20BF5579C()
{
  return 0;
}

uint64_t sub_20BF557A4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF557B0()
{
  return 0;
}

uint64_t sub_20BF557B8()
{
  return 0;
}

BOOL sub_20BF557C0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA018 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF557F8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C030, a2, a3);
}

void *sub_20BF55818()
{
  return &unk_24C51C030;
}

_QWORD *sub_20BF55828@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24C51E698 + 1;
  return result;
}

uint64_t sub_20BF55840(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20BF55874(a1, a3);
}

uint64_t sub_20BF55874(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF52298((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

char *sub_20BF558F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 *v2;
  uint64_t v4;
  char *result;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  _OWORD v9[2];

  v2 = (unsigned __int16 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    v2 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)v9, v2);
  a2[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v6 = v9[1];
  *(_OWORD *)result = v9[0];
  *((_OWORD *)result + 1) = v6;
  v7 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

uint64_t *sub_20BF5597C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BF559A0(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 8;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BF559CC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF559DC()
{
  return 1;
}

unint64_t sub_20BF559E4(double **a1)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v3 = *((_QWORD *)*a1 + 3);
  v4 = 0;
  v5 = 0;
  sub_20BF55BF8((uint64_t)&v4, (double *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL sub_20BF55A40(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20BF55A94(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20BF55AE8()
{
  return 0;
}

_QWORD *sub_20BF55AF4(__int128 **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BF55B04()
{
  return &unk_24C51C010;
}

uint64_t sub_20BF55B10()
{
  return 0;
}

uint64_t sub_20BF55B18()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF55B24()
{
  return 0;
}

uint64_t sub_20BF55B2C()
{
  return 0;
}

BOOL sub_20BF55B34(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF55B6C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, a2, a3);
}

void *sub_20BF55B8C()
{
  return &unk_24C51C010;
}

uint64_t sub_20BF55B98(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF55BA0@<X0>(_OWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BF55BF8(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = v3;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v4 = *(_QWORD *)&v3
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v3
                     + (*(_QWORD *)a1 + *(_QWORD *)&v3) * (*(_QWORD *)a1 + *(_QWORD *)&v3)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v4;
  return sub_20BF55C3C(a1, a3);
}

uint64_t sub_20BF55C3C(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF529F4((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF55CBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(const pxrInternal__aapl__pxrReserved__::GfQuatd **)a1;
  result = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_24C51E698 + 1;
  return result;
}

char *sub_20BF55D1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float32x2_t *v4;
  char *result;
  float64x2_t v6;
  unsigned int *v7;
  unsigned int v8;
  float64x2_t v9[2];

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (float32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(float32x2_t **)a1;
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v9, v4);
  a2[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v6 = v9[1];
  *(float64x2_t *)result = v9[0];
  *((float64x2_t *)result + 1) = v6;
  v7 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

float32x4_t *sub_20BF55DA0@<X0>(uint64_t a1@<X0>, float32x4_t **a2@<X8>)
{
  uint64_t v3;
  __n128 *v4;
  float32x4_t *result;
  unsigned int *v6;
  unsigned int v7;
  float32x4_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (__n128 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(__n128 **)a1;
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v8, v4);
  a2[1] = (float32x4_t *)&off_24C51E5E0;
  result = (float32x4_t *)operator new(0x14uLL);
  *result = v8;
  v6 = (unsigned int *)&result[1];
  atomic_store(0, (unsigned int *)&result[1]);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BF55E24(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  float *v12;

  v3 = (unint64_t *)sub_20BF55FBC(a1);
  sub_20BF56024((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 2 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v10];
      v9 -= 2;
    }
    while (v9);
  }
  sub_20BF56094(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF55EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF55ECC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _WORD *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v10;
  unsigned int v11;
  __n128 v12[2];
  _WORD *v13;

  v3 = (unint64_t *)sub_20BF56C48(a1);
  sub_20BF56CB0((uint64_t)v12, *v3);
  v4 = (float *)v3[4];
  v5 = *v3;
  sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = 4 * v5;
    do
    {
      v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
      if (*v4 == 0.0)
      {
        v11 = v10 >> 16;
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
            + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
      }
      *v8++ = v11;
      ++v4;
      v9 -= 4;
    }
    while (v9);
  }
  sub_20BF56D20(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF55FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF55FBC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF560D4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5610C, (uint64_t)&stru_24C51DDB0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF56024(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF56258((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5607C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF56094@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5653C(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF560C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF560D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 58)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DDB0);
  else
    return 0;
}

double sub_20BF5610C@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF56154;
  a1[2] = &stru_24C51DDB0;
  return result;
}

void sub_20BF56154(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5618C(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(void);

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = (_QWORD *)(a1 + 24);
    v2 = *(unint64_t **)(a1 + 24);
    if (v2)
    {
      do
      {
        v7 = __ldxr(v2);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v2));
      if (!v8)
      {
        __dmb(9u);
        v9 = *(void (**)(void))(*v3 + 8);
        if (v9)
          v9();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

void sub_20BF56210(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
      sub_20BF5618C((uint64_t)a1);
    *a1 = 0;
  }
}

void sub_20BF56258(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5640C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF5640C((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF5640C((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5640C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew(size_t) [T = float]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF56490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF564A8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]", a3);
      v6 = (int *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5640C((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 4 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5653C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF565F0(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF56628(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF56BB8(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF565D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF565F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DD98);
  else
    return 0;
}

_QWORD *sub_20BF56628(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C51E808;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF566B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF566F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5671C(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF56860(a1);
}

uint64_t sub_20BF5672C()
{
  return 1;
}

unint64_t sub_20BF56734(unint64_t **a1)
{
  return sub_20BF568B8(*a1);
}

BOOL sub_20BF5673C(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5690C(*a1, *a2);
}

BOOL sub_20BF56748(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5690C(*a1, a2);
}

uint64_t sub_20BF56754()
{
  return 0;
}

_QWORD *sub_20BF56760(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF56B2C);
  return a2;
}

void *sub_20BF567A8()
{
  return &unk_24C51DD98;
}

uint64_t sub_20BF567B4()
{
  return 1;
}

uint64_t sub_20BF567BC()
{
  return MEMORY[0x24BEDB788];
}

uint64_t sub_20BF567C8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF567D0(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF567DC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF56814(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD98, a2, a3);
}

void *sub_20BF56834()
{
  return &unk_24C51DD98;
}

uint64_t sub_20BF56840(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF56848@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C51E808;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF56860(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF568B8(unint64_t *a1)
{
  unint64_t v1;
  float *v2;
  unint64_t v3;
  float v4;
  float v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (float *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = LODWORD(v5) + ((v1 + LODWORD(v5) + (v1 + LODWORD(v5)) * (v1 + LODWORD(v5))) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20BF5690C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = *(float **)(a2 + 32);
  v7 = 4 * *a1 - 4;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

BOOL sub_20BF569A8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  int v5;
  int v6;
  int v7;
  const void *v8;
  int v9;
  BOOL v10;
  uint64_t v11;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v6 = *(_DWORD *)(a1 + 8);
  v4 = (const void *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12))
      v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    else
      v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12))
      v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    else
      v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  if (v7 != v9)
    return 0;
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v10 = *(_DWORD *)(a1 + 16) == 0;
      v11 = 3;
      if (!v10)
        v11 = 4;
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t sub_20BF56A84(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF56860(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF56B2C(float **a1, _QWORD *a2)
{
  float *v2;

  v2 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut(v2, a2);
}

char *sub_20BF56B40(_QWORD *a1, uint64_t a2)
{
  char *result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = (char *)operator new(0x30uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *((_OWORD *)result + 1) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)result + 4) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)result + 3))
      v7 = (unint64_t *)*((_QWORD *)result + 3);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)result + 10);
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t sub_20BF56BB8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF56A84((_OWORD **)a1);
}

uint64_t sub_20BF56C48(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF565F0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF56D60, (uint64_t)&stru_24C51DD98);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF56CB0(uint64_t a1, unint64_t a2)
{
  __int16 v5;
  __int16 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF56DE0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF56D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF56D20@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF570C4(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF56D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF56D60@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF56DA8;
  a1[2] = &stru_24C51DD98;
  return result;
}

void sub_20BF56DA8(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF56DE0(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int16 v23;
  _WORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF56F94((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_WORD *)((char *)v7 + v13) = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF56F94((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 2 * v19;
      v22 = v20;
      do
      {
        v23 = *(_WORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 2);
        *(_WORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 2);
        v21 -= 2;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_WORD *)((char *)v20 + v25) = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 2 * a2;
  if (2 * a2 / a2 != 2)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF56F94((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_WORD *)((char *)v16 + v17) = *v18;
    v17 += 2;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF56F94(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]");
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    v3 = -1;
  else
    v3 = 2 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF57018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF57030(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int16 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _WORD *v11;
  __int16 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]", a3);
      v6 = (__int16 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF56F94((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 2 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 2;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF570C4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF560D4(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF57178(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF575B4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF57160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF57178(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51E8C0;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF57208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF57244(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5726C(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF573F0(a1);
}

uint64_t sub_20BF5727C()
{
  return 1;
}

unint64_t sub_20BF57284(unint64_t **a1)
{
  unint64_t v1;
  unsigned __int16 *v2;
  unint64_t v3;
  unsigned int v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (unsigned __int16 *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20BF572CC(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF57448(*a1, *a2);
}

BOOL sub_20BF572D8(_QWORD **a1, uint64_t a2)
{
  return sub_20BF57448(*a1, a2);
}

uint64_t sub_20BF572E4()
{
  return 0;
}

_QWORD *sub_20BF572F0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5759C);
  return a2;
}

void *sub_20BF57338()
{
  return &unk_24C51DDB0;
}

uint64_t sub_20BF57344()
{
  return 1;
}

void *sub_20BF5734C()
{
  return &unk_24C51BF30;
}

uint64_t sub_20BF57358(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF57360(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5736C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EB9CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF573A4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDB0, a2, a3);
}

void *sub_20BF573C4()
{
  return &unk_24C51DDB0;
}

uint64_t sub_20BF573D0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF573D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51E8C0;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF573F0(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

BOOL sub_20BF57448(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  float v9;
  int v10;
  float v11;
  BOOL v12;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (unsigned __int16 *)a1[4];
  v6 = *(unsigned __int16 **)(a2 + 32);
  v7 = 2 * *a1 - 2;
  do
  {
    v8 = *v5++;
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v8];
    v10 = *v6++;
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v10];
    result = v9 == v11;
    v12 = v9 != v11 || v7 == 0;
    v7 -= 2;
  }
  while (!v12);
  return result;
}

uint64_t sub_20BF574F4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF573F0(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20BF5759C(_QWORD *a1, uint64_t a2)
{
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<(a2);
}

uint64_t sub_20BF575B4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF574F4((_OWORD **)a1);
}

void sub_20BF57644(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  double *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  double *v12;

  v3 = (unint64_t *)sub_20BF55FBC(a1);
  sub_20BF577E4((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 2 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v10];
      v9 -= 2;
    }
    while (v9);
  }
  sub_20BF57854(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF576D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF576F0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _WORD *v8;
  uint64_t v9;
  float v10;
  unsigned int v11;
  __n128 v12[2];
  _WORD *v13;

  v3 = (unint64_t *)sub_20BF58130(a1);
  sub_20BF56CB0((uint64_t)v12, *v3);
  v4 = (double *)v3[4];
  v5 = *v3;
  sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = 8 * v5;
    do
    {
      v10 = *v4;
      if (v10 == 0.0)
      {
        v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      *v8++ = v11;
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  sub_20BF56D20(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF577C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF577E4(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF57894((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5783C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF57854@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF57B78(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF57880(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF57894(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF57A48((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF57A48((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF57A48((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF57A48(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew(size_t) [T = double]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF57ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF57AE4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF57A48((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF57B78(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF57C2C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF57C64(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF580A0(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF57C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF57C2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DD80);
  else
    return 0;
}

_QWORD *sub_20BF57C64(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C51E978;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF57CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF57D30(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF57D58(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF57E9C(a1);
}

uint64_t sub_20BF57D68()
{
  return 1;
}

unint64_t sub_20BF57D70(unint64_t **a1)
{
  return sub_20BF57EF4(*a1);
}

BOOL sub_20BF57D78(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF57F48(*a1, *a2);
}

BOOL sub_20BF57D84(_QWORD **a1, uint64_t a2)
{
  return sub_20BF57F48(*a1, a2);
}

uint64_t sub_20BF57D90()
{
  return 0;
}

_QWORD *sub_20BF57D9C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5808C);
  return a2;
}

void *sub_20BF57DE4()
{
  return &unk_24C51DD80;
}

uint64_t sub_20BF57DF0()
{
  return 1;
}

uint64_t sub_20BF57DF8()
{
  return MEMORY[0x24BEDB780];
}

uint64_t sub_20BF57E04(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF57E0C(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF57E18(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF57E50(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD80, a2, a3);
}

void *sub_20BF57E70()
{
  return &unk_24C51DD80;
}

uint64_t sub_20BF57E7C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF57E84@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C51E978;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF57E9C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF57EF4(unint64_t *a1)
{
  unint64_t v1;
  double *v2;
  unint64_t v3;
  double v4;
  double v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (double *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = *(_QWORD *)&v5 + ((v1 + *(_QWORD *)&v5 + (v1 + *(_QWORD *)&v5) * (v1 + *(_QWORD *)&v5)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20BF57F48(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = *(double **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_20BF57FE4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF57E9C(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5808C(double **a1, _QWORD *a2)
{
  double *v2;

  v2 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut(v2, a2);
}

uint64_t sub_20BF580A0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF57FE4((_OWORD **)a1);
}

uint64_t sub_20BF58130(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF57C2C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF58198, (uint64_t)&stru_24C51DD80);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double sub_20BF58198@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF581E0;
  a1[2] = &stru_24C51DD80;
  return result;
}

void sub_20BF581E0(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF58218(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  double *v8;
  uint64_t v9;
  float v10;
  __n128 v11[2];
  double *v12;

  v3 = (unint64_t *)sub_20BF56C48(a1);
  sub_20BF577E4((uint64_t)v11, *v3);
  v4 = (float *)v3[4];
  v5 = *v3;
  sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 4 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_20BF57854(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF582A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF582B8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float *v8;
  uint64_t v9;
  double v10;
  float v11;
  __n128 v12[2];
  float *v13;

  v3 = (unint64_t *)sub_20BF58130(a1);
  sub_20BF56024((uint64_t)v12, *v3);
  v4 = (double *)v3[4];
  v5 = *v3;
  sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = 8 * v5;
    do
    {
      v10 = *v4++;
      v11 = v10;
      *v8++ = v11;
      v9 -= 8;
    }
    while (v9);
  }
  sub_20BF56094(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF58340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF58358(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  float *v9;
  float v10;
  __n128 v11[2];
  float *v12;

  v3 = (unint64_t *)sub_20BF58544(a1);
  sub_20BF585AC((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = &v4[2 * v5];
    v9 = v12;
    do
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      *v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9 += 2;
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_20BF5861C(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF583F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5840C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float *v8;
  int *v9;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  __n128 v14[2];
  int *v15;

  v3 = (unint64_t *)sub_20BF59064(a1);
  sub_20BF590CC((uint64_t)v14, *v3);
  v4 = (float *)v3[4];
  v5 = *v3;
  sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v6, v7);
  if (v5)
  {
    v8 = &v4[2 * v5];
    v9 = v15;
    do
    {
      v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
      if (*v4 == 0.0)
      {
        v11 = v10 >> 16;
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
            + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
      }
      v12 = v4[1];
      if (v12 == 0.0)
      {
        v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      *v9++ = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_20BF5913C(v14, a2);
  sub_20BF5618C((uint64_t)v14);
}

void sub_20BF58528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF58544(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5865C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF58694, (uint64_t)&stru_24C51DA08);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF585AC(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF58714((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF58604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5861C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF589F8(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF58648(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5865C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 19)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA08);
  else
    return 0;
}

double sub_20BF58694@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF586DC;
  a1[2] = &stru_24C51DA08;
  return result;
}

void sub_20BF586DC(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF58714(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF588C8((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF588C8((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF588C8((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF588C8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF58964(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF588C8((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF589F8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF58AAC(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF58AE4(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF58FD4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF58A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF58AAC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA50);
  else
    return 0;
}

_QWORD *sub_20BF58AE4(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EA30;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF58B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF58BB0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF58BD8(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF58D38(a1);
}

uint64_t sub_20BF58BE8()
{
  return 1;
}

unint64_t sub_20BF58BF0(uint64_t **a1)
{
  char v2;

  return sub_20BF58D90((uint64_t)&v2, *a1);
}

BOOL sub_20BF58C14(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF58E74(*a1, *a2);
}

BOOL sub_20BF58C20(_QWORD **a1, uint64_t a2)
{
  return sub_20BF58E74(*a1, a2);
}

uint64_t sub_20BF58C2C()
{
  return 0;
}

_QWORD *sub_20BF58C38(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF58FBC);
  return a2;
}

void *sub_20BF58C80()
{
  return &unk_24C51DA50;
}

uint64_t sub_20BF58C8C()
{
  return 1;
}

void *sub_20BF58C94()
{
  return &unk_24C51C120;
}

uint64_t sub_20BF58CA0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF58CA8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF58CB4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1EE3ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF58CEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA50, a2, a3);
}

void *sub_20BF58D0C()
{
  return &unk_24C51DA50;
}

uint64_t sub_20BF58D18(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF58D20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EA30;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF58D38(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF58D90(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 2;
      sub_20BF58E04((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF58E04(uint64_t result, float *a2)
{
  float v2;
  uint64_t v3;
  float v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = LODWORD(v2);
  if (a2[1] == 0.0)
    v4 = 0.0;
  else
    v4 = a2[1];
  v5 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v4) + ((LODWORD(v4) + v3 + (LODWORD(v4) + v3) * ((unint64_t)LODWORD(v4) + v3)) >> 1)));
  if (*(_BYTE *)(result + 8))
    v5 += (*(_QWORD *)result + v5 + (*(_QWORD *)result + v5) * (*(_QWORD *)result + v5)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v5;
  return result;
}

BOOL sub_20BF58E74(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(float **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_20BF58F14(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF58D38(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF58FBC(float **a1, _QWORD *a2)
{
  float *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF58FD4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF58F14((_OWORD **)a1);
}

uint64_t sub_20BF59064(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF58AAC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5917C, (uint64_t)&stru_24C51DA50);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF590CC(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF591FC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF59124(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5913C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF594E0(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF59168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5917C@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF591C4;
  a1[2] = &stru_24C51DA50;
  return result;
}

void sub_20BF591C4(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF591FC(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF593B0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF593B0((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF593B0((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF593B0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2h]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF59434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5944C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2h]", a3);
      v6 = (int *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF593B0((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 4 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF594E0(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5865C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF59594(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF59A28(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF59594(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EAE8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF59624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF59660(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF59688(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF597E8(a1);
}

uint64_t sub_20BF59698()
{
  return 1;
}

unint64_t sub_20BF596A0(unint64_t **a1)
{
  char v2;

  return sub_20BF59840((uint64_t)&v2, *a1);
}

BOOL sub_20BF596C4(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF598A0(*a1, *a2);
}

BOOL sub_20BF596D0(_QWORD **a1, uint64_t a2)
{
  return sub_20BF598A0(*a1, a2);
}

uint64_t sub_20BF596DC()
{
  return 0;
}

_QWORD *sub_20BF596E8(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF59A10);
  return a2;
}

void *sub_20BF59730()
{
  return &unk_24C51DA08;
}

uint64_t sub_20BF5973C()
{
  return 1;
}

void *sub_20BF59744()
{
  return &unk_24C51C130;
}

uint64_t sub_20BF59750(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF59758(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF59764(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EA94 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5979C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA08, a2, a3);
}

void *sub_20BF597BC()
{
  return &unk_24C51DA08;
}

uint64_t sub_20BF597C8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF597D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EAE8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF597E8(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF59840(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = (unsigned __int16 *)a2[4];
    v4 = *a2;
    do
    {
      v5 = bswap64(0x9E3779B97F4A7C55* (v3[1]+ ((v3[1]+ (unint64_t)*v3+ (v3[1] + *v3) * (unint64_t)(v3[1] + *v3)) >> 1)));
      v2 = v5 + ((v5 + v2 + (v5 + v2) * (v5 + v2)) >> 1);
      v3 += 2;
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_20BF598A0(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (unsigned __int16 *)a1[4];
  v6 = &v5[2 * *a1];
  for (i = *(unsigned __int16 **)(a2 + 32);
        pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v5] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*i]
     && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[i[1]];
        i += 2)
  {
    v5 += 2;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF59968(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF597E8(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF59A10(_QWORD *a1, _QWORD *a2)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_20BF59A28(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF59968((_OWORD **)a1);
}

void sub_20BF59AB8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  double *v9;
  double v10;
  __n128 v11[2];
  double *v12;

  v3 = (unint64_t *)sub_20BF58544(a1);
  sub_20BF59CB4((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = &v4[2 * v5];
    v9 = v12;
    do
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      *v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9 += 2;
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_20BF59D24(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF59B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF59B74(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  double *v8;
  int *v9;
  float v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  __n128 v14[2];
  int *v15;

  v3 = (unint64_t *)sub_20BF5A6B0(a1);
  sub_20BF590CC((uint64_t)v14, *v3);
  v4 = (double *)v3[4];
  v5 = *v3;
  sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v6, v7);
  if (v5)
  {
    v8 = &v4[2 * v5];
    v9 = v15;
    do
    {
      v10 = *v4;
      if (v10 == 0.0)
      {
        v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      v12 = v4[1];
      if (v12 == 0.0)
      {
        v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      *v9++ = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_20BF5913C(v14, a2);
  sub_20BF5618C((uint64_t)v14);
}

void sub_20BF59C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF59CB4(uint64_t a1, unint64_t a2)
{
  _QWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF59D64((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF59D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF59D24@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5A044(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF59D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF59D64(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF59F18((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF59F18((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF59F18((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF59F18(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]");
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF59F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF59FB0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF59F18((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 16 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5A044(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5A0F8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5A130(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5A620(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5A0F8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 25)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA98);
  else
    return 0;
}

_QWORD *sub_20BF5A130(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EBA0;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5A1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5A1FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5A224(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5A384(a1);
}

uint64_t sub_20BF5A234()
{
  return 1;
}

unint64_t sub_20BF5A23C(uint64_t **a1)
{
  char v2;

  return sub_20BF5A3DC((uint64_t)&v2, *a1);
}

BOOL sub_20BF5A260(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5A4C0(*a1, *a2);
}

BOOL sub_20BF5A26C(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5A4C0(*a1, a2);
}

uint64_t sub_20BF5A278()
{
  return 0;
}

_QWORD *sub_20BF5A284(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5A608);
  return a2;
}

void *sub_20BF5A2CC()
{
  return &unk_24C51DA98;
}

uint64_t sub_20BF5A2D8()
{
  return 1;
}

void *sub_20BF5A2E0()
{
  return &unk_24C51C110;
}

uint64_t sub_20BF5A2EC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5A2F4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5A300(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EA1CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5A338(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA98, a2, a3);
}

void *sub_20BF5A358()
{
  return &unk_24C51DA98;
}

uint64_t sub_20BF5A364(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5A36C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EBA0;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5A384(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5A3DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 2;
      sub_20BF5A450((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF5A450(uint64_t result, double *a2)
{
  double v2;
  double v3;
  double v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = v2;
  if (a2[1] == 0.0)
    v4 = 0.0;
  else
    v4 = a2[1];
  v5 = bswap64(0x9E3779B97F4A7C55* (*(_QWORD *)&v4+ ((*(_QWORD *)&v4 + *(_QWORD *)&v3 + (*(_QWORD *)&v4 + *(_QWORD *)&v3) * (*(_QWORD *)&v4 + *(_QWORD *)&v3)) >> 1)));
  if (*(_BYTE *)(result + 8))
    v5 += (*(_QWORD *)result + v5 + (*(_QWORD *)result + v5) * (*(_QWORD *)result + v5)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v5;
  return result;
}

BOOL sub_20BF5A4C0(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(double **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_20BF5A560(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5A384(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5A608(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF5A620(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5A560((_OWORD **)a1);
}

uint64_t sub_20BF5A6B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5A0F8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5A718, (uint64_t)&stru_24C51DA98);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double sub_20BF5A718@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5A760;
  a1[2] = &stru_24C51DA98;
  return result;
}

void sub_20BF5A760(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5A798(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float64x2_t *v8;
  uint64_t v9;
  float32x2_t v10;
  __n128 v11[2];
  float64x2_t *v12;

  v3 = (unint64_t *)sub_20BF59064(a1);
  sub_20BF59CB4((uint64_t)v11, *v3);
  v4 = (float32x2_t *)v3[4];
  v5 = *v3;
  sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 8 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = vcvtq_f64_f32(v10);
      v9 -= 8;
    }
    while (v9);
  }
  sub_20BF59D24(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF5A820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5A838(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x2_t *v8;
  uint64_t v9;
  float64x2_t v10;
  __n128 v11[2];
  float32x2_t *v12;

  v3 = (unint64_t *)sub_20BF5A6B0(a1);
  sub_20BF585AC((uint64_t)v11, *v3);
  v4 = (float64x2_t *)v3[4];
  v5 = *v3;
  sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 16 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = vcvt_f32_f64(v10);
      v9 -= 16;
    }
    while (v9);
  }
  sub_20BF5861C(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF5A8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5A8D8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  float *v9;
  float v10;
  float v11;
  __n128 v12[2];
  float *v13;

  v3 = (unint64_t *)sub_20BF5AB30(a1);
  sub_20BF5AB98((uint64_t)v12, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = &v4[3 * v5];
    v9 = v13;
    do
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      *v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9[2] = v11;
      v4 += 3;
      v9 += 3;
    }
    while (v4 != v8);
  }
  sub_20BF5AC0C(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF5A988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5A9A0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  __n128 v16[2];
  uint64_t v17;

  v3 = (unint64_t *)sub_20BF5B684(a1);
  sub_20BF5B6EC((uint64_t)v16, *v3);
  v4 = (float *)v3[4];
  v5 = *v3;
  sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  if (v5)
  {
    v8 = &v4[3 * v5];
    v9 = v17;
    do
    {
      v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
      if (*v4 == 0.0)
      {
        v11 = v10 >> 16;
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
            + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
      }
      v12 = v4[1];
      if (v12 == 0.0)
      {
        v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      v14 = v4[2];
      if (v14 == 0.0)
      {
        v15 = HIWORD(LODWORD(v14));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
      {
        v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
            + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      }
      *(_DWORD *)v9 = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      *(_WORD *)(v9 + 4) = v15;
      v9 += 6;
      v4 += 3;
    }
    while (v4 != v8);
  }
  sub_20BF5B760(v16, a2);
  sub_20BF5618C((uint64_t)v16);
}

void sub_20BF5AB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5AB30(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5AC4C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5AC84, (uint64_t)&stru_24C51D9F0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF5AB98(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v7 = &v5;
  sub_20BF5AD04((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20BF5ABF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5AC0C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5B064(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5AC38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5AC4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 18)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51D9F0);
  else
    return 0;
}

double sub_20BF5AC84@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5ACCC;
  a1[2] = &stru_24C51D9F0;
  return result;
}

void sub_20BF5ACCC(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5AD04(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5AF1C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_QWORD *)(v9 + v11);
                *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                *(_QWORD *)v12 = v13;
                v11 += 12;
              }
              while (12 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 12 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
            *(_QWORD *)v16 = v17;
            v15 += 12;
          }
          while (12 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_20BF5AF1C((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 12 * v24;
      v27 = v25;
      do
      {
        v28 = *v7;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
        *v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 12);
        v7 = (_QWORD *)((char *)v7 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 12 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
        *(_QWORD *)v31 = v32;
        v30 += 12;
      }
      while (12 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x1555555555555556)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v19 = sub_20BF5AF1C((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
    *(_QWORD *)v22 = v23;
    v20 += 12;
  }
  while (12 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5AF1C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
  if (a2 > 0x1555555555555553)
    v3 = -1;
  else
    v3 = 12 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5AFC0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5AF1C((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 12 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v6 + 2);
          *v11 = v12;
          v11 = (_QWORD *)((char *)v11 + 12);
          v6 = (uint64_t *)((char *)v6 + 12);
          v10 -= 12;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5B064(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5B118(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5B150(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5B5F4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5B100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5B118(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA38);
  else
    return 0;
}

_QWORD *sub_20BF5B150(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EC58;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5B1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5B21C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5B244(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5B3A4(a1);
}

uint64_t sub_20BF5B254()
{
  return 1;
}

unint64_t sub_20BF5B25C(uint64_t **a1)
{
  char v2;

  return sub_20BF5B3FC((uint64_t)&v2, *a1);
}

BOOL sub_20BF5B280(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5B470(*a1, *a2);
}

BOOL sub_20BF5B28C(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5B470(*a1, a2);
}

uint64_t sub_20BF5B298()
{
  return 0;
}

_QWORD *sub_20BF5B2A4(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5B5DC);
  return a2;
}

void *sub_20BF5B2EC()
{
  return &unk_24C51DA38;
}

uint64_t sub_20BF5B2F8()
{
  return 1;
}

void *sub_20BF5B300()
{
  return &unk_24C51C160;
}

uint64_t sub_20BF5B30C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5B314(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5B320(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EAD0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5B358(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA38, a2, a3);
}

void *sub_20BF5B378()
{
  return &unk_24C51DA38;
}

uint64_t sub_20BF5B384(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5B38C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EC58;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5B3A4(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5B3FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_20BF555B8((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

BOOL sub_20BF5B470(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF5B534(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5B3A4(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5B5DC(float **a1, _QWORD *a2)
{
  float *v3;

  v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF5B5F4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5B534((_OWORD **)a1);
}

uint64_t sub_20BF5B684(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5B118(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5B7A0, (uint64_t)&stru_24C51DA38);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF5B6EC(uint64_t a1, unint64_t a2)
{
  int v5;
  __int16 v6;
  int *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v7 = &v5;
  sub_20BF5B820((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20BF5B748(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5B760@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5BB80(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5B78C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5B7A0@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5B7E8;
  a1[2] = &stru_24C51DA38;
  return result;
}

void sub_20BF5B7E8(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5B820(unint64_t *a1, unint64_t a2, int **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  int v13;
  int *v14;
  uint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  char *v22;
  int v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int *v29;
  uint64_t v30;
  char *v31;
  int v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5BA38((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_DWORD *)(v9 + v11);
                *((_WORD *)v12 + 2) = *(_WORD *)(v9 + v11 + 4);
                *(_DWORD *)v12 = v13;
                v11 += 6;
              }
              while (6 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 6 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_WORD *)v16 + 2) = *((_WORD *)v14 + 2);
            *(_DWORD *)v16 = v17;
            v15 += 6;
          }
          while (6 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_20BF5BA38((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 6 * v24;
      v27 = v25;
      do
      {
        v28 = *(_DWORD *)v7;
        *((_WORD *)v27 + 2) = *((_WORD *)v7 + 2);
        *(_DWORD *)v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 6);
        v7 = (_QWORD *)((char *)v7 + 6);
        v26 -= 6;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 6 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_WORD *)v31 + 2) = *((_WORD *)v29 + 2);
        *(_DWORD *)v31 = v32;
        v30 += 6;
      }
      while (6 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x2AAAAAAAAAAAAAABLL)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v19 = sub_20BF5BA38((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_WORD *)v22 + 2) = *((_WORD *)v21 + 2);
    *(_DWORD *)v22 = v23;
    v20 += 6;
  }
  while (6 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5BA38(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3h]");
  if (a2 > 0x2AAAAAAAAAAAAAA7)
    v3 = -1;
  else
    v3 = 6 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5BAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5BADC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3h]", a3);
      v6 = (int *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5BA38((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 6 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          *((_WORD *)v11 + 2) = *((_WORD *)v6 + 2);
          *(_DWORD *)v11 = v12;
          v11 = (_QWORD *)((char *)v11 + 6);
          v6 = (int *)((char *)v6 + 6);
          v10 -= 6;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5BB80(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5AC4C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5BC34(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5C0C4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5BC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF5BC34(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51ED10;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5BCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5BD00(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5BD28(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5BE88(a1);
}

uint64_t sub_20BF5BD38()
{
  return 1;
}

unint64_t sub_20BF5BD40(uint64_t **a1)
{
  char v2;

  return sub_20BF5BEE0((uint64_t)&v2, *a1);
}

BOOL sub_20BF5BD64(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF5BF54(*a1, *a2);
}

BOOL sub_20BF5BD70(uint64_t **a1, uint64_t a2)
{
  return sub_20BF5BF54(*a1, a2);
}

uint64_t sub_20BF5BD7C()
{
  return 0;
}

_QWORD *sub_20BF5BD88(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5C0AC);
  return a2;
}

void *sub_20BF5BDD0()
{
  return &unk_24C51D9F0;
}

uint64_t sub_20BF5BDDC()
{
  return 1;
}

void *sub_20BF5BDE4()
{
  return &unk_24C51C170;
}

uint64_t sub_20BF5BDF0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5BDF8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5BE04(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1E302 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5BE3C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9F0, a2, a3);
}

void *sub_20BF5BE5C()
{
  return &unk_24C51D9F0;
}

uint64_t sub_20BF5BE68(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5BE70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51ED10;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5BE88(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5BEE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_20BF55874((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

BOOL sub_20BF5BF54(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 6 * v5 - 6;
  do
  {
    result = sub_20BF522D0(v6, v7);
    if (!result)
      break;
    v6 += 3;
    v7 += 3;
    v9 = v8;
    v8 -= 6;
  }
  while (v9);
  return result;
}

uint64_t sub_20BF5C004(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5BE88(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5C0AC(_QWORD *a1, _QWORD *a2)
{
  *a1 += 6;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_20BF5C0C4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5C004((_OWORD **)a1);
}

void sub_20BF5C154(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  double *v9;
  double v10;
  double v11;
  __n128 v12[2];
  double *v13;

  v3 = (unint64_t *)sub_20BF5AB30(a1);
  sub_20BF5C3C4((uint64_t)v12, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = &v4[3 * v5];
    v9 = v13;
    do
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      *v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9[2] = v11;
      v4 += 3;
      v9 += 3;
    }
    while (v4 != v8);
  }
  sub_20BF5C438(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF5C210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5C228(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  double *v8;
  uint64_t v9;
  float v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  __n128 v16[2];
  uint64_t v17;

  v3 = (unint64_t *)sub_20BF5CDF8(a1);
  sub_20BF5B6EC((uint64_t)v16, *v3);
  v4 = (double *)v3[4];
  v5 = *v3;
  sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  if (v5)
  {
    v8 = &v4[3 * v5];
    v9 = v17;
    do
    {
      v10 = *v4;
      if (v10 == 0.0)
      {
        v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      v12 = v4[1];
      if (v12 == 0.0)
      {
        v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      v14 = v4[2];
      if (v14 == 0.0)
      {
        v15 = HIWORD(LODWORD(v14));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
      {
        v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
            + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      }
      *(_DWORD *)v9 = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      *(_WORD *)(v9 + 4) = v15;
      v9 += 6;
      v4 += 3;
    }
    while (v4 != v8);
  }
  sub_20BF5B760(v16, a2);
  sub_20BF5618C((uint64_t)v16);
}

void sub_20BF5C3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5C3C4(uint64_t a1, unint64_t a2)
{
  _QWORD v5[3];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v6 = (__int128 *)v5;
  sub_20BF5C478((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5C420(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5C438@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5C7D8(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5C464(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF5C478(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5C690((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8);
                v12[2] = *(_QWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = v13;
                v11 += 3;
              }
              while (3 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 3 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = *v14;
            v16[2] = *((_QWORD *)v14 + 2);
            *(_OWORD *)v16 = v17;
            v15 += 3;
          }
          while (3 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_20BF5C690((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 24 * v24;
      v27 = v25;
      do
      {
        v28 = *(_OWORD *)v7;
        v27[2] = v7[2];
        *(_OWORD *)v27 = v28;
        v27 += 3;
        v7 += 3;
        v26 -= 24;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 3 * v3;
      do
      {
        v31 = &v25[v30];
        v32 = *v29;
        v31[2] = *((_QWORD *)v29 + 2);
        *(_OWORD *)v31 = v32;
        v30 += 3;
      }
      while (3 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v19 = sub_20BF5C690((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = &v19[v20];
    v23 = *v21;
    v22[2] = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    v20 += 3;
  }
  while (3 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5C690(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5C71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5C734(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5C690((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 24 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v11[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)v11 = v12;
          v11 += 3;
          v6 = (__int128 *)((char *)v6 + 24);
          v10 -= 24;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5C7D8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5C88C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5C8C4(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5CD68(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5C88C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA80);
  else
    return 0;
}

_QWORD *sub_20BF5C8C4(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EDC8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5C954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5C990(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5C9B8(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5CB18(a1);
}

uint64_t sub_20BF5C9C8()
{
  return 1;
}

unint64_t sub_20BF5C9D0(uint64_t **a1)
{
  char v2;

  return sub_20BF5CB70((uint64_t)&v2, *a1);
}

BOOL sub_20BF5C9F4(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5CBE4(*a1, *a2);
}

BOOL sub_20BF5CA00(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5CBE4(*a1, a2);
}

uint64_t sub_20BF5CA0C()
{
  return 0;
}

_QWORD *sub_20BF5CA18(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5CD50);
  return a2;
}

void *sub_20BF5CA60()
{
  return &unk_24C51DA80;
}

uint64_t sub_20BF5CA6C()
{
  return 1;
}

void *sub_20BF5CA74()
{
  return &unk_24C51C150;
}

uint64_t sub_20BF5CA80(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5CA88(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5CA94(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1F240 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5CACC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA80, a2, a3);
}

void *sub_20BF5CAEC()
{
  return &unk_24C51DA80;
}

uint64_t sub_20BF5CAF8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5CB00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EDC8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5CB18(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5CB70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_20BF55C3C((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

BOOL sub_20BF5CBE4(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF5CCA8(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5CB18(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5CD50(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF5CD68(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5CCA8((_OWORD **)a1);
}

uint64_t sub_20BF5CDF8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5C88C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5CE60, (uint64_t)&stru_24C51DA80);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double sub_20BF5CE60@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5CEA8;
  a1[2] = &stru_24C51DA80;
  return result;
}

void sub_20BF5CEA8(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5CEE0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float64x2_t *v8;
  float *v9;
  uint64_t v10;
  float64_t v11;
  __n128 v12[2];
  float64x2_t *v13;

  v3 = (unint64_t *)sub_20BF5B684(a1);
  sub_20BF5C3C4((uint64_t)v12, *v3);
  v4 = v3[4];
  v5 = *v3;
  sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = (float *)(v4 + 8);
    v10 = 12 * v5;
    do
    {
      v11 = *v9;
      *v8 = vcvtq_f64_f32(*(float32x2_t *)(v9 - 2));
      v8[1].f64[0] = v11;
      v9 += 3;
      v8 = (float64x2_t *)((char *)v8 + 24);
      v10 -= 12;
    }
    while (v10);
  }
  sub_20BF5C438(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF5CF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5CF9C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x2_t *v8;
  double *v9;
  uint64_t v10;
  float32_t v11;
  __n128 v12[2];
  float32x2_t *v13;

  v3 = (unint64_t *)sub_20BF5CDF8(a1);
  sub_20BF5AB98((uint64_t)v12, *v3);
  v4 = v3[4];
  v5 = *v3;
  sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = (double *)(v4 + 16);
    v10 = 24 * v5;
    do
    {
      v11 = *v9;
      *v8 = vcvt_f32_f64(*(float64x2_t *)(v9 - 2));
      v8[1].f32[0] = v11;
      v9 += 3;
      v8 = (float32x2_t *)((char *)v8 + 12);
      v10 -= 24;
    }
    while (v10);
  }
  sub_20BF5AC0C(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF5D040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5D058(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  __n128 v13[2];
  float *v14;

  v3 = (unint64_t *)sub_20BF5D1D4(a1);
  sub_20BF5D23C((uint64_t)v13, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v6, v7);
  if (v5)
  {
    v8 = &v4[4 * v5];
    v9 = v14;
    do
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[3]];
      *v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9[2] = v11;
      v9[3] = v12;
      v4 += 4;
      v9 += 4;
    }
    while (v4 != v8);
  }
  sub_20BF5D2AC(v13, a2);
  sub_20BF5618C((uint64_t)v13);
}

void sub_20BF5D10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5D124(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10[2];
  _QWORD *v11;
  uint64_t v12;

  v3 = (unint64_t *)sub_20BF5DD34(a1);
  sub_20BF5DD9C((uint64_t)v10, *v3);
  v4 = (float *)v3[4];
  v5 = *v3;
  sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    v9 = 16 * v5;
    do
    {
      sub_20BF53ECC(&v12, v4);
      *v8++ = v12;
      v4 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  sub_20BF5DE0C(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF5D1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5D1D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5D2EC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5D324, (uint64_t)&stru_24C51D9D8);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF5D23C(uint64_t a1, unint64_t a2)
{
  _QWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF5D3A4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5D294(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5D2AC@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5D684(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5D2D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5D2EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 17)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51D9D8);
  else
    return 0;
}

double sub_20BF5D324@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5D36C;
  a1[2] = &stru_24C51D9D8;
  return result;
}

void sub_20BF5D36C(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5D3A4(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5D558((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF5D558((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF5D558((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5D558(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5D5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5D5F0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5D558((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 16 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5D684(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5D738(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5D770(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5DCA4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5D720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5D738(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA20);
  else
    return 0;
}

_QWORD *sub_20BF5D770(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EE80;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5D800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5D83C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5D864(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5D9C4(a1);
}

uint64_t sub_20BF5D874()
{
  return 1;
}

unint64_t sub_20BF5D87C(uint64_t **a1)
{
  char v2;

  return sub_20BF5DA1C((uint64_t)&v2, *a1);
}

BOOL sub_20BF5D8A0(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5DB14(*a1, *a2);
}

BOOL sub_20BF5D8AC(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5DB14(*a1, a2);
}

uint64_t sub_20BF5D8B8()
{
  return 0;
}

_QWORD *sub_20BF5D8C4(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5DC8C);
  return a2;
}

void *sub_20BF5D90C()
{
  return &unk_24C51DA20;
}

uint64_t sub_20BF5D918()
{
  return 1;
}

void *sub_20BF5D920()
{
  return &unk_24C51C1A0;
}

uint64_t sub_20BF5D92C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5D934(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5D940(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1E89ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5D978(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA20, a2, a3);
}

void *sub_20BF5D998()
{
  return &unk_24C51DA20;
}

uint64_t sub_20BF5D9A4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5D9AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EE80;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5D9C4(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5DA1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20BF5DA90((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF5DA90(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF53680((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF5DB14(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF5DBE4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5D9C4(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5DC8C(float **a1, _QWORD *a2)
{
  float *v3;

  v3 = *a1;
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF5DCA4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5DBE4((_OWORD **)a1);
}

uint64_t sub_20BF5DD34(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5D738(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5DE4C, (uint64_t)&stru_24C51DA20);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF5DD9C(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF5DECC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5DDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5DE0C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5E1B0(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5DE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5DE4C@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5DE94;
  a1[2] = &stru_24C51DA20;
  return result;
}

void sub_20BF5DE94(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5DECC(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5E080((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF5E080((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF5E080((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5E080(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4h]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5E104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5E11C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4h]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5E080((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5E1B0(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5D2EC(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5E264(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5E774(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5E24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF5E264(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EF38;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5E2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5E330(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5E358(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5E4B8(a1);
}

uint64_t sub_20BF5E368()
{
  return 1;
}

unint64_t sub_20BF5E370(uint64_t **a1)
{
  char v2;

  return sub_20BF5E510((uint64_t)&v2, *a1);
}

BOOL sub_20BF5E394(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF5E608(*a1, *a2);
}

BOOL sub_20BF5E3A0(uint64_t **a1, uint64_t a2)
{
  return sub_20BF5E608(*a1, a2);
}

uint64_t sub_20BF5E3AC()
{
  return 0;
}

_QWORD *sub_20BF5E3B8(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5E75C);
  return a2;
}

void *sub_20BF5E400()
{
  return &unk_24C51D9D8;
}

uint64_t sub_20BF5E40C()
{
  return 1;
}

void *sub_20BF5E414()
{
  return &unk_24C51C1B0;
}

uint64_t sub_20BF5E420(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5E428(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5E434(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1E016 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5E46C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9D8, a2, a3);
}

void *sub_20BF5E48C()
{
  return &unk_24C51D9D8;
}

uint64_t sub_20BF5E498(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5E4A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EF38;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5E4B8(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5E510(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20BF5E584((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF5E584(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF532C8((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF5E608(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 8 * v5 - 8;
  do
  {
    result = sub_20BF53304(v6, v7);
    if (!result)
      break;
    v6 += 4;
    v7 += 4;
    v9 = v8;
    v8 -= 8;
  }
  while (v9);
  return result;
}

uint64_t sub_20BF5E6B4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5E4B8(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5E75C(_QWORD *a1, _QWORD *a2)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_20BF5E774(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5E6B4((_OWORD **)a1);
}

void sub_20BF5E804(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int16 *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  __n128 v13[2];
  double *v14;

  v3 = (unint64_t *)sub_20BF5D1D4(a1);
  sub_20BF5E990((uint64_t)v13, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v6, v7);
  if (v5)
  {
    v8 = &v4[4 * v5];
    v9 = v14;
    do
    {
      v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[3]];
      *v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9[2] = v11;
      v9[3] = v12;
      v4 += 4;
      v9 += 4;
    }
    while (v4 != v8);
  }
  sub_20BF5EA00(v13, a2);
  sub_20BF5618C((uint64_t)v13);
}

void sub_20BF5E8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5E8E0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10[2];
  _QWORD *v11;
  uint64_t v12;

  v3 = (unint64_t *)sub_20BF5F3E4(a1);
  sub_20BF5DD9C((uint64_t)v10, *v3);
  v4 = (double *)v3[4];
  v5 = *v3;
  sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    v9 = 32 * v5;
    do
    {
      sub_20BF53C60(&v12, v4);
      *v8++ = v12;
      v4 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  sub_20BF5DE0C(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF5E974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5E990(uint64_t a1, unint64_t a2)
{
  _OWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF5EA40((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5E9E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5EA00@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5ED34(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5EA2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF5EA40(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  __int128 v34;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5EC08((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11 * 8);
                *((_OWORD *)v12 + 1) = v13;
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 4 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = v14[1];
            *(_OWORD *)v16 = *v14;
            *((_OWORD *)v16 + 1) = v17;
            v15 += 4;
          }
          while (4 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v25 = a2;
    else
      v25 = *a1;
    v26 = sub_20BF5EC08((uint64_t)a1, a2);
    v18 = v26;
    if (v25)
    {
      v27 = 32 * v25;
      v28 = v26;
      do
      {
        v29 = *(_OWORD *)v7;
        v30 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v28 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    if (v3 < a2)
    {
      v31 = *a3;
      v32 = 4 * v3;
      do
      {
        v33 = &v26[v32];
        v34 = v31[1];
        *(_OWORD *)v33 = *v31;
        *((_OWORD *)v33 + 1) = v34;
        v32 += 4;
      }
      while (4 * a2 != v32);
    }
    goto LABEL_29;
  }
  v19 = 32 * a2;
  if (32 * a2 / a2 != 32)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v20 = sub_20BF5EC08((uint64_t)a1, a2);
  v18 = v20;
  v21 = 0;
  v22 = *a3;
  do
  {
    v23 = &v20[v21 / 8];
    v24 = v22[1];
    *(_OWORD *)v23 = *v22;
    *((_OWORD *)v23 + 1) = v24;
    v21 += 32;
  }
  while (v19 != v21);
LABEL_29:
  if (v18 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5EC08(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]");
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5ECA0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5EC08((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 32 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          v6 += 2;
          *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5ED34(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5EDE8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5EE20(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF5F354(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5EDE8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 23)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DA68);
  else
    return 0;
}

_QWORD *sub_20BF5EE20(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51EFF0;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5EEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5EEEC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5EF14(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF5F074(a1);
}

uint64_t sub_20BF5EF24()
{
  return 1;
}

unint64_t sub_20BF5EF2C(uint64_t **a1)
{
  char v2;

  return sub_20BF5F0CC((uint64_t)&v2, *a1);
}

BOOL sub_20BF5EF50(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5F1C4(*a1, *a2);
}

BOOL sub_20BF5EF5C(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5F1C4(*a1, a2);
}

uint64_t sub_20BF5EF68()
{
  return 0;
}

_QWORD *sub_20BF5EF74(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF5F33C);
  return a2;
}

void *sub_20BF5EFBC()
{
  return &unk_24C51DA68;
}

uint64_t sub_20BF5EFC8()
{
  return 1;
}

void *sub_20BF5EFD0()
{
  return &unk_24C51C190;
}

uint64_t sub_20BF5EFDC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5EFE4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5EFF0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1F0CCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF5F028(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA68, a2, a3);
}

void *sub_20BF5F048()
{
  return &unk_24C51DA68;
}

uint64_t sub_20BF5F054(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF5F05C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51EFF0;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF5F074(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF5F0CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20BF5F140((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF5F140(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF53A74((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF5F1C4(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF5F294(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF5F074(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF5F33C(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF5F354(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF5F294((_OWORD **)a1);
}

uint64_t sub_20BF5F3E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5EDE8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5F44C, (uint64_t)&stru_24C51DA68);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double sub_20BF5F44C@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5F494;
  a1[2] = &stru_24C51DA68;
  return result;
}

void sub_20BF5F494(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5F4CC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x2_t *v8;
  float64x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  __n128 v12[2];
  float64x2_t *v13;

  v3 = (unint64_t *)sub_20BF5DD34(a1);
  sub_20BF5E990((uint64_t)v12, *v3);
  v4 = (float32x2_t *)v3[4];
  v5 = *v3;
  sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = &v4[2 * v5];
    v9 = v13;
    do
    {
      v10 = *v4;
      v11 = v4[1];
      v4 += 2;
      *v9 = vcvtq_f64_f32(v10);
      v9[1] = vcvtq_f64_f32(v11);
      v9 += 2;
    }
    while (v4 != v8);
  }
  sub_20BF5EA00(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF5F558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5F570(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x4_t *v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  __n128 v12[2];
  float32x4_t *v13;

  v3 = (unint64_t *)sub_20BF5F3E4(a1);
  sub_20BF5D23C((uint64_t)v12, *v3);
  v4 = (float64x2_t *)v3[4];
  v5 = *v3;
  sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = 32 * v5;
    do
    {
      v11 = *v4;
      v10 = v4[1];
      v4 += 2;
      *v8++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11), v10);
      v9 -= 32;
    }
    while (v9);
  }
  sub_20BF5D2AC(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF5F5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5F614(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  const pxrInternal__aapl__pxrReserved__::GfMatrix4f *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16[2];
  _OWORD *v17;
  _OWORD v18[8];

  v3 = (unint64_t *)sub_20BF5F7A4(a1);
  sub_20BF5F80C((uint64_t)v16, *v3);
  v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v3[4];
  v5 = *v3;
  sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  if (v5)
  {
    v8 = v17;
    v9 = v5 << 6;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18, v4);
      v10 = v18[0];
      v11 = v18[1];
      v12 = v18[3];
      v8[2] = v18[2];
      v8[3] = v12;
      *v8 = v10;
      v8[1] = v11;
      v13 = v18[4];
      v14 = v18[5];
      v15 = v18[7];
      v8[6] = v18[6];
      v8[7] = v15;
      v8[4] = v13;
      v8[5] = v14;
      v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)((char *)v4 + 64);
      v8 += 8;
      v9 -= 64;
    }
    while (v9);
  }
  sub_20BF5F888(v16, a2);
  sub_20BF5618C((uint64_t)v16);
}

void sub_20BF5F6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF5F6EC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  const pxrInternal__aapl__pxrReserved__::GfMatrix4d *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 v13[2];
  _OWORD *v14;
  _OWORD v15[4];

  v3 = (unint64_t *)sub_20BF603E4(a1);
  sub_20BF6044C((uint64_t)v13, *v3);
  v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v3[4];
  v5 = *v3;
  sub_20BF6080C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v6, v7);
  if (v5)
  {
    v8 = v14;
    v9 = v5 << 7;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v15, v4);
      v10 = v15[0];
      v11 = v15[1];
      v12 = v15[3];
      v8[2] = v15[2];
      v8[3] = v12;
      *v8 = v10;
      v8[1] = v11;
      v8 += 4;
      v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v4 + 128);
      v9 -= 128;
    }
    while (v9);
  }
  sub_20BF604C0(v13, a2);
  sub_20BF5618C((uint64_t)v13);
}

void sub_20BF5F788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5F7A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5F8C8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF5F900, (uint64_t)&stru_24C51DAB0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF5F80C(uint64_t a1, unint64_t a2)
{
  _OWORD v5[8];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF5F980((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF5F870(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF5F888@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF5FD14(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF5F8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5F8C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 26)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DAB0);
  else
    return 0;
}

double sub_20BF5F900@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF5F948;
  a1[2] = &stru_24C51DAB0;
  return result;
}

void sub_20BF5F948(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF5F980(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF5FBC8((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v16 = *(_OWORD *)(v9 + v11 + 64);
                v17 = *(_OWORD *)(v9 + v11 + 80);
                v18 = *(_OWORD *)(v9 + v11 + 112);
                *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                *((_OWORD *)v12 + 7) = v18;
                *((_OWORD *)v12 + 4) = v16;
                *((_OWORD *)v12 + 5) = v17;
                v11 += 128;
              }
              while (v3 << 7 != v11);
            }
          }
          v19 = *a3;
          v20 = v3 << 7;
          do
          {
            v21 = (_OWORD *)((char *)v7 + v20);
            v22 = *v19;
            v23 = v19[1];
            v24 = v19[3];
            v21[2] = v19[2];
            v21[3] = v24;
            *v21 = v22;
            v21[1] = v23;
            v25 = v19[4];
            v26 = v19[5];
            v27 = v19[7];
            v21[6] = v19[6];
            v21[7] = v27;
            v21[4] = v25;
            v21[5] = v26;
            v20 += 128;
          }
          while (a2 << 7 != v20);
        }
        v28 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v40 = a2;
    else
      v40 = *a1;
    v41 = sub_20BF5FBC8((uint64_t)a1, a2);
    v28 = v41;
    if (v40)
    {
      v42 = v40 << 7;
      v43 = v41;
      do
      {
        v44 = *(_OWORD *)v7;
        v45 = *((_OWORD *)v7 + 1);
        v46 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v43 + 3) = v46;
        *(_OWORD *)v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        v47 = *((_OWORD *)v7 + 4);
        v48 = *((_OWORD *)v7 + 5);
        v49 = *((_OWORD *)v7 + 7);
        *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)v43 + 7) = v49;
        *((_OWORD *)v43 + 4) = v47;
        *((_OWORD *)v43 + 5) = v48;
        v7 += 16;
        v43 += 16;
        v42 -= 128;
      }
      while (v42);
    }
    if (v3 < a2)
    {
      v50 = *a3;
      v51 = v3 << 7;
      do
      {
        v52 = (_OWORD *)((char *)v41 + v51);
        v53 = *v50;
        v54 = v50[1];
        v55 = v50[3];
        v52[2] = v50[2];
        v52[3] = v55;
        *v52 = v53;
        v52[1] = v54;
        v56 = v50[4];
        v57 = v50[5];
        v58 = v50[7];
        v52[6] = v50[6];
        v52[7] = v58;
        v52[4] = v56;
        v52[5] = v57;
        v51 += 128;
      }
      while (a2 << 7 != v51);
    }
    goto LABEL_29;
  }
  v29 = a2 << 7;
  if ((a2 << 7) / a2 != 128)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v30 = sub_20BF5FBC8((uint64_t)a1, a2);
  v28 = v30;
  v31 = 0;
  v32 = *a3;
  do
  {
    v33 = &v30[v31 / 8];
    v34 = *v32;
    v35 = v32[1];
    v36 = v32[3];
    *((_OWORD *)v33 + 2) = v32[2];
    *((_OWORD *)v33 + 3) = v36;
    *(_OWORD *)v33 = v34;
    *((_OWORD *)v33 + 1) = v35;
    v37 = v32[4];
    v38 = v32[5];
    v39 = v32[7];
    *((_OWORD *)v33 + 6) = v32[6];
    *((_OWORD *)v33 + 7) = v39;
    *((_OWORD *)v33 + 4) = v37;
    *((_OWORD *)v33 + 5) = v38;
    v31 += 128;
  }
  while (v29 != v31);
LABEL_29:
  if (v28 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v28;
  }
  *a1 = a2;
}

_QWORD *sub_20BF5FBC8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
  if (a2 >> 57)
    v3 = -1;
  else
    v3 = (a2 << 7) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF5FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF5FC60(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF5FBC8((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = v7 << 7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          v14 = v6[3];
          v11[2] = v6[2];
          v11[3] = v14;
          *v11 = v12;
          v11[1] = v13;
          v15 = v6[4];
          v16 = v6[5];
          v17 = v6[7];
          v11[6] = v6[6];
          v11[7] = v17;
          v11[4] = v15;
          v11[5] = v16;
          v6 += 8;
          v11 += 8;
          v10 -= 128;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF5FD14(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5FDC8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF5FE00(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF60354(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF5FDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF5FDC8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DAF8);
  else
    return 0;
}

_QWORD *sub_20BF5FE00(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F0A8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF5FE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF5FECC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF5FEF4(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF60054(a1);
}

uint64_t sub_20BF5FF04()
{
  return 1;
}

unint64_t sub_20BF5FF0C(uint64_t **a1)
{
  char v2;

  return sub_20BF600AC((uint64_t)&v2, *a1);
}

BOOL sub_20BF5FF30(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF601E8(*a1, *a2);
}

BOOL sub_20BF5FF3C(uint64_t **a1, uint64_t a2)
{
  return sub_20BF601E8(*a1, a2);
}

uint64_t sub_20BF5FF48()
{
  return 0;
}

_QWORD *sub_20BF5FF54(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF6033C);
  return a2;
}

void *sub_20BF5FF9C()
{
  return &unk_24C51DAF8;
}

uint64_t sub_20BF5FFA8()
{
  return 1;
}

void *sub_20BF5FFB0()
{
  return &unk_24C51BFE0;
}

uint64_t sub_20BF5FFBC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF5FFC4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF5FFD0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB20096 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF60008(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAF8, a2, a3);
}

void *sub_20BF60028()
{
  return &unk_24C51DAF8;
}

uint64_t sub_20BF60034(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF6003C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F0A8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF60054(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF600AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_20BF60120((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF60120(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF54448((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF601E8(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (double *)a1[4];
  v7 = *(double **)(a2 + 32);
  v8 = (v5 << 7) - 128;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(v6, v7);
    if (!result)
      break;
    v6 += 16;
    v7 += 16;
    v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t sub_20BF60294(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF60054(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF6033C(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF60354(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF60294((_OWORD **)a1);
}

uint64_t sub_20BF603E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF5FDC8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF60500, (uint64_t)&stru_24C51DAF8);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF6044C(uint64_t a1, unint64_t a2)
{
  _OWORD v5[4];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF60580((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF604A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF604C0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF608AC(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF604EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF60500@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF60548;
  a1[2] = &stru_24C51DAF8;
  return result;
}

void sub_20BF60548(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF60580(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  unint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF60774((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v11 += 64;
              }
              while (v3 << 6 != v11);
            }
          }
          v16 = *a3;
          v17 = v3 << 6;
          do
          {
            v18 = (_OWORD *)((char *)v7 + v17);
            v19 = *v16;
            v20 = v16[1];
            v21 = v16[3];
            v18[2] = v16[2];
            v18[3] = v21;
            *v18 = v19;
            v18[1] = v20;
            v17 += 64;
          }
          while (a2 << 6 != v17);
        }
        v22 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v31 = a2;
    else
      v31 = *a1;
    v32 = sub_20BF60774((uint64_t)a1, a2);
    v22 = v32;
    if (v31)
    {
      v33 = v31 << 6;
      v34 = v32;
      do
      {
        v35 = *(_OWORD *)v7;
        v36 = *((_OWORD *)v7 + 1);
        v37 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v34 + 3) = v37;
        *(_OWORD *)v34 = v35;
        *((_OWORD *)v34 + 1) = v36;
        v34 += 8;
        v7 += 8;
        v33 -= 64;
      }
      while (v33);
    }
    if (v3 < a2)
    {
      v38 = *a3;
      v39 = v3 << 6;
      do
      {
        v40 = (_OWORD *)((char *)v32 + v39);
        v41 = *v38;
        v42 = v38[1];
        v43 = v38[3];
        v40[2] = v38[2];
        v40[3] = v43;
        *v40 = v41;
        v40[1] = v42;
        v39 += 64;
      }
      while (a2 << 6 != v39);
    }
    goto LABEL_29;
  }
  v23 = a2 << 6;
  if ((a2 << 6) / a2 != 64)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v24 = sub_20BF60774((uint64_t)a1, a2);
  v22 = v24;
  v25 = 0;
  v26 = *a3;
  do
  {
    v27 = &v24[v25 / 8];
    v28 = *v26;
    v29 = v26[1];
    v30 = v26[3];
    *((_OWORD *)v27 + 2) = v26[2];
    *((_OWORD *)v27 + 3) = v30;
    *(_OWORD *)v27 = v28;
    *((_OWORD *)v27 + 1) = v29;
    v25 += 64;
  }
  while (v23 != v25);
LABEL_29:
  if (v22 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v22;
  }
  *a1 = a2;
}

_QWORD *sub_20BF60774(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]");
  if (a2 >> 58)
    v3 = -1;
  else
    v3 = (a2 << 6) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF607F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF6080C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF60774((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = v7 << 6;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          v14 = v6[3];
          v11[2] = v6[2];
          v11[3] = v14;
          *v11 = v12;
          v11[1] = v13;
          v11 += 4;
          v6 += 4;
          v10 -= 64;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF608AC(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF5F8C8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF60960(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF60EB4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF60948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF60960(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F160;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF609F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF60A2C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF60A54(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF60BB4(a1);
}

uint64_t sub_20BF60A64()
{
  return 1;
}

unint64_t sub_20BF60A6C(uint64_t **a1)
{
  char v2;

  return sub_20BF60C0C((uint64_t)&v2, *a1);
}

BOOL sub_20BF60A90(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF60D48(*a1, *a2);
}

BOOL sub_20BF60A9C(uint64_t **a1, uint64_t a2)
{
  return sub_20BF60D48(*a1, a2);
}

uint64_t sub_20BF60AA8()
{
  return 0;
}

_QWORD *sub_20BF60AB4(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF60E9C);
  return a2;
}

void *sub_20BF60AFC()
{
  return &unk_24C51DAB0;
}

uint64_t sub_20BF60B08()
{
  return 1;
}

void *sub_20BF60B10()
{
  return &unk_24C51BFD0;
}

uint64_t sub_20BF60B1C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF60B24(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF60B30(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB1F78ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF60B68(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAB0, a2, a3);
}

void *sub_20BF60B88()
{
  return &unk_24C51DAB0;
}

uint64_t sub_20BF60B94(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF60B9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F160;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF60BB4(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF60C0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_20BF60C80((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF60C80(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF54CC0((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF60D48(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (float *)a1[4];
  v7 = *(float **)(a2 + 32);
  v8 = (v5 << 6) - 64;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(v6, v7);
    if (!result)
      break;
    v6 += 16;
    v7 += 16;
    v9 = v8;
    v8 -= 64;
  }
  while (v9);
  return result;
}

uint64_t sub_20BF60DF4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF60BB4(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF60E9C(float **a1, _QWORD *a2)
{
  float *v3;

  v3 = *a1;
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF60EB4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF60DF4((_OWORD **)a1);
}

void sub_20BF60F44(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  __n128 v10[2];
  _OWORD *v11;
  __int128 v12;

  v3 = (unint64_t *)sub_20BF610A4(a1);
  sub_20BF6110C((uint64_t)v10, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    v9 = 8 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)&v12, v4);
      *v8++ = v12;
      v4 += 4;
      v9 -= 8;
    }
    while (v9);
  }
  sub_20BF61178(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF60FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF60FF4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10[2];
  _QWORD *v11;
  uint64_t v12;

  v3 = (unint64_t *)sub_20BF61C0C(a1);
  sub_20BF61C74((uint64_t)v10, *v3);
  v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)v3[4];
  v5 = *v3;
  sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    v9 = 16 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v12, v4);
      *v8++ = v12;
      v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v4 + 16);
      v9 -= 16;
    }
    while (v9);
  }
  sub_20BF61CE0(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF61088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF610A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF611B8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF611F0, (uint64_t)&stru_24C51DC00);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF6110C(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF61270((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_20BF61160(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF61178@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF61550(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF611A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF611B8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 40)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DC00);
  else
    return 0;
}

double sub_20BF611F0@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF61238;
  a1[2] = &stru_24C51DC00;
  return result;
}

void sub_20BF61238(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF61270(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF61424((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF61424((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF61424((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF61424(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF614A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF614BC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF61424((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 16 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF61550(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF61604(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF6163C(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF61B7C(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF615EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF61604(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DC18);
  else
    return 0;
}

_QWORD *sub_20BF6163C(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F218;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF616CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF61708(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF61730(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF61890(a1);
}

uint64_t sub_20BF61740()
{
  return 1;
}

unint64_t sub_20BF61748(uint64_t **a1)
{
  char v2;

  return sub_20BF618E8((uint64_t)&v2, *a1);
}

BOOL sub_20BF6176C(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF619E4(*a1, *a2);
}

BOOL sub_20BF61778(_QWORD **a1, uint64_t a2)
{
  return sub_20BF619E4(*a1, a2);
}

uint64_t sub_20BF61784()
{
  return 0;
}

_QWORD *sub_20BF61790(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF61B64);
  return a2;
}

void *sub_20BF617D8()
{
  return &unk_24C51DC18;
}

uint64_t sub_20BF617E4()
{
  return 1;
}

void *sub_20BF617EC()
{
  return &unk_24C51C020;
}

uint64_t sub_20BF617F8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF61800(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF6180C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CA9EFC3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF61844(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC18, a2, a3);
}

void *sub_20BF61864()
{
  return &unk_24C51DC18;
}

uint64_t sub_20BF61870(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF61878@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F218;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF61890(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF618E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_20BF6195C((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF6195C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  int v5;
  uint64_t v6;
  char v7;

  v5 = *(_DWORD *)(a2 + 12);
  v6 = 0;
  v7 = 0;
  result = sub_20BF55570((uint64_t)&v6, (float *)&v5, (float *)a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF619E4(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  uint64_t v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)(a1[4] + 8);
  v6 = 16 * *a1;
  for (i = (float *)(*(_QWORD *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF61ABC(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF61890(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF61B64(int8x16_t **a1, _QWORD *a2)
{
  int8x16_t *v3;

  v3 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF61B7C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF61ABC((_OWORD **)a1);
}

uint64_t sub_20BF61C0C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF61604(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF61D20, (uint64_t)&stru_24C51DC18);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF61C74(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF61DA0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF61CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF61CE0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF62084(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF61D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF61D20@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF61D68;
  a1[2] = &stru_24C51DC18;
  return result;
}

void sub_20BF61D68(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF61DA0(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF61F54((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF61F54((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF61F54((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF61F54(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfQuath]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF61FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF61FF0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuath]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF61F54((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF62084(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF611B8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF62138(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF62668(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF62120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF62138(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F2D0;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF621C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF62204(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF6222C(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF6238C(a1);
}

uint64_t sub_20BF6223C()
{
  return 1;
}

unint64_t sub_20BF62244(uint64_t **a1)
{
  char v2;

  return sub_20BF623E4((uint64_t)&v2, *a1);
}

BOOL sub_20BF62268(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF624E0(*a1, *a2);
}

BOOL sub_20BF62274(uint64_t **a1, uint64_t a2)
{
  return sub_20BF624E0(*a1, a2);
}

uint64_t sub_20BF62280()
{
  return 0;
}

_QWORD *sub_20BF6228C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF62650);
  return a2;
}

void *sub_20BF622D4()
{
  return &unk_24C51DC00;
}

uint64_t sub_20BF622E0()
{
  return 1;
}

void *sub_20BF622E8()
{
  return &unk_24C51C030;
}

uint64_t sub_20BF622F4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF622FC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF62308(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CA9EF88 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF62340(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC00, a2, a3);
}

void *sub_20BF62360()
{
  return &unk_24C51DC00;
}

uint64_t sub_20BF6236C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF62374@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F2D0;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF6238C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF623E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20BF62458((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF62458(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  char v7;

  v5 = a2[3];
  v6 = 0;
  v7 = 0;
  result = sub_20BF55840((uint64_t)&v6, &v5, a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF624E0(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 8 * v5;
  while (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v7[3]])
  {
    result = sub_20BF522D0(v6, v7);
    if (!result)
      return result;
    v6 += 4;
    v7 += 4;
    v8 -= 8;
    if (!v8)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF625A8(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF6238C(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF62650(_QWORD *a1, _QWORD *a2)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_20BF62668(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF625A8((_OWORD **)a1);
}

void sub_20BF626F8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __n128 v11[2];
  _OWORD *v12;
  _OWORD v13[2];

  v3 = (unint64_t *)sub_20BF610A4(a1);
  sub_20BF62858((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 8 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)v13, v4);
      v10 = v13[1];
      *v8 = v13[0];
      v8[1] = v10;
      v8 += 2;
      v4 += 4;
      v9 -= 8;
    }
    while (v9);
  }
  sub_20BF628C4(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF6278C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF627A8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10[2];
  _QWORD *v11;
  uint64_t v12;

  v3 = (unint64_t *)sub_20BF632B4(a1);
  sub_20BF61C74((uint64_t)v10, *v3);
  v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v3[4];
  v5 = *v3;
  sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    v9 = 32 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v12, v4);
      *v8++ = v12;
      v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)((char *)v4 + 32);
      v9 -= 32;
    }
    while (v9);
  }
  sub_20BF61CE0(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF6283C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF62858(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF62904((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_20BF628AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF628C4@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF62BF8(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF628F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF62904(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  __int128 v34;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF62ACC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11 * 8);
                *((_OWORD *)v12 + 1) = v13;
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 4 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = v14[1];
            *(_OWORD *)v16 = *v14;
            *((_OWORD *)v16 + 1) = v17;
            v15 += 4;
          }
          while (4 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v25 = a2;
    else
      v25 = *a1;
    v26 = sub_20BF62ACC((uint64_t)a1, a2);
    v18 = v26;
    if (v25)
    {
      v27 = 32 * v25;
      v28 = v26;
      do
      {
        v29 = *(_OWORD *)v7;
        v30 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v28 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    if (v3 < a2)
    {
      v31 = *a3;
      v32 = 4 * v3;
      do
      {
        v33 = &v26[v32];
        v34 = v31[1];
        *(_OWORD *)v33 = *v31;
        *((_OWORD *)v33 + 1) = v34;
        v32 += 4;
      }
      while (4 * a2 != v32);
    }
    goto LABEL_29;
  }
  v19 = 32 * a2;
  if (32 * a2 / a2 != 32)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v20 = sub_20BF62ACC((uint64_t)a1, a2);
  v18 = v20;
  v21 = 0;
  v22 = *a3;
  do
  {
    v23 = &v20[v21 / 8];
    v24 = v22[1];
    *(_OWORD *)v23 = *v22;
    *((_OWORD *)v23 + 1) = v24;
    v21 += 32;
  }
  while (v19 != v21);
LABEL_29:
  if (v18 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF62ACC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]");
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF62B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF62B64(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatd]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF62ACC((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 32 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          v6 += 2;
          *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF62BF8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF62CAC(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF62CE4(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF63224(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF62C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF62CAC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 42)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DC30);
  else
    return 0;
}

_QWORD *sub_20BF62CE4(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F388;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF62D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF62DB0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF62DD8(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF62F38(a1);
}

uint64_t sub_20BF62DE8()
{
  return 1;
}

unint64_t sub_20BF62DF0(uint64_t **a1)
{
  char v2;

  return sub_20BF62F90((uint64_t)&v2, *a1);
}

BOOL sub_20BF62E14(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF6308C(*a1, *a2);
}

BOOL sub_20BF62E20(_QWORD **a1, uint64_t a2)
{
  return sub_20BF6308C(*a1, a2);
}

uint64_t sub_20BF62E2C()
{
  return 0;
}

_QWORD *sub_20BF62E38(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF6320C);
  return a2;
}

void *sub_20BF62E80()
{
  return &unk_24C51DC30;
}

uint64_t sub_20BF62E8C()
{
  return 1;
}

void *sub_20BF62E94()
{
  return &unk_24C51C010;
}

uint64_t sub_20BF62EA0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF62EA8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF62EB4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CA9EFFELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF62EEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC30, a2, a3);
}

void *sub_20BF62F0C()
{
  return &unk_24C51DC30;
}

uint64_t sub_20BF62F18(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF62F20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F388;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF62F38(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF62F90(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = a2[4];
    do
    {
      --v2;
      v4 = v3 + 32;
      sub_20BF63004((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF63004(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = 0;
  v7 = 0;
  result = sub_20BF55BF8((uint64_t)&v6, (double *)&v5, (double *)a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_20BF6308C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  uint64_t v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)(a1[4] + 16);
  v6 = 32 * *a1;
  for (i = (double *)(*(_QWORD *)(a2 + 32) + 16);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 32;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t sub_20BF63164(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF62F38(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF6320C(__int128 **a1, _QWORD *a2)
{
  __int128 *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF63224(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF63164((_OWORD **)a1);
}

uint64_t sub_20BF632B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF62CAC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF6331C, (uint64_t)&stru_24C51DC30);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double sub_20BF6331C@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF63364;
  a1[2] = &stru_24C51DC30;
  return result;
}

void sub_20BF63364(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF6339C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float64x2_t *v8;
  uint64_t v9;
  float64x2_t v10;
  __n128 v11[2];
  float64x2_t *v12;
  float64x2_t v13[2];

  v3 = (unint64_t *)sub_20BF61C0C(a1);
  sub_20BF62858((uint64_t)v11, *v3);
  v4 = (float32x2_t *)v3[4];
  v5 = *v3;
  sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 16 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v13, v4);
      v10 = v13[1];
      *v8 = v13[0];
      v8[1] = v10;
      v8 += 2;
      v4 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  sub_20BF628C4(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF63430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF6344C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  __n128 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x4_t *v8;
  uint64_t v9;
  __n128 v10[2];
  float32x4_t *v11;
  float32x4_t v12;

  v3 = (unint64_t *)sub_20BF632B4(a1);
  sub_20BF6110C((uint64_t)v10, *v3);
  v4 = (__n128 *)v3[4];
  v5 = *v3;
  sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    v9 = 32 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v12, v4);
      *v8++ = v12;
      v4 += 2;
      v9 -= 32;
    }
    while (v9);
  }
  sub_20BF61178(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF634E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF634FC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _WORD *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  _WORD *v12;

  v3 = (unint64_t *)sub_20BF63634(a1);
  sub_20BF6369C((uint64_t)v11, *v3);
  v4 = (int *)v3[4];
  v5 = *v3;
  sub_20BF63A54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 4 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_20BF6370C(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF63580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF63598(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  _DWORD *v12;

  v3 = (unint64_t *)sub_20BF64088(a1);
  sub_20BF640F0((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 2 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = v10;
      v9 -= 2;
    }
    while (v9);
  }
  sub_20BF64160(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF6361C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF63634(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF6374C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF63784, (uint64_t)&stru_24C51DD38);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF6369C(uint64_t a1, unint64_t a2)
{
  __int16 v5;
  __int16 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF63804((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF636F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF6370C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF63AE8(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF63738(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF6374C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DD38);
  else
    return 0;
}

double sub_20BF63784@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF637CC;
  a1[2] = &stru_24C51DD38;
  return result;
}

void sub_20BF637CC(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF63804(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int16 v23;
  _WORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF639B8((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_WORD *)((char *)v7 + v13) = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF639B8((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 2 * v19;
      v22 = v20;
      do
      {
        v23 = *(_WORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 2);
        *(_WORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 2);
        v21 -= 2;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_WORD *)((char *)v20 + v25) = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 2 * a2;
  if (2 * a2 / a2 != 2)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF639B8((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_WORD *)((char *)v16 + v17) = *v18;
    v17 += 2;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF639B8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned short>::_AllocateNew(size_t) [T = unsigned short]");
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    v3 = -1;
  else
    v3 = 2 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF63A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF63A54(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int16 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _WORD *v11;
  __int16 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned short>::_DetachIfNotUnique() [T = unsigned short]", a3);
      v6 = (__int16 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF639B8((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 2 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 2;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF63AE8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF63B9C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF63BD4(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF63FF8(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF63B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF63B9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 51)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DD08);
  else
    return 0;
}

_QWORD *sub_20BF63BD4(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C51F440;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF63C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF63CA0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF63CC8(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF63E5C(a1);
}

uint64_t sub_20BF63CD8()
{
  return 1;
}

unint64_t sub_20BF63CE0(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(2 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20BF63D38(uint64_t *a1, uint64_t *a2)
{
  return sub_20BF63EB4(*a1, *a2);
}

uint64_t sub_20BF63D44(uint64_t *a1, uint64_t a2)
{
  return sub_20BF63EB4(*a1, a2);
}

uint64_t sub_20BF63D50()
{
  return 0;
}

_QWORD *sub_20BF63D5C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF63FE0);
  return a2;
}

void *sub_20BF63DA4()
{
  return &unk_24C51DD08;
}

uint64_t sub_20BF63DB0()
{
  return 1;
}

uint64_t sub_20BF63DB8()
{
  return MEMORY[0x24BEDB7C0];
}

uint64_t sub_20BF63DC4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF63DCC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF63DD8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB23F5ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF63E10(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD08, a2, a3);
}

void *sub_20BF63E30()
{
  return &unk_24C51DD08;
}

uint64_t sub_20BF63E3C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF63E44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C51F440;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF63E5C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20BF63EB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_20BF569A8(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_20BF569A8(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 2 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_20BF63F38(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF63E5C(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20BF63FE0(_QWORD *a1)
{
  *a1 += 2;
  return std::ostream::operator<<();
}

uint64_t sub_20BF63FF8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF63F38((_OWORD **)a1);
}

uint64_t sub_20BF64088(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF63B9C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF641A0, (uint64_t)&stru_24C51DD08);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF640F0(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF64220((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF64148(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF64160@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF64504(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF6418C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF641A0@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF641E8;
  a1[2] = &stru_24C51DD08;
  return result;
}

void sub_20BF641E8(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF64220(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF643D4((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF643D4((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF643D4((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF643D4(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew(size_t) [T = unsigned int]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF64458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF64470(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]", a3);
      v6 = (int *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF643D4((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 4 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF64504(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF6374C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF645B8(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF649DC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF645A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF645B8(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C51F4F8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF64648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF64684(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF646AC(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF64840(a1);
}

uint64_t sub_20BF646BC()
{
  return 1;
}

unint64_t sub_20BF646C4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(4 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20BF6471C(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, *a2);
}

uint64_t sub_20BF64728(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, a2);
}

uint64_t sub_20BF64734()
{
  return 0;
}

_QWORD *sub_20BF64740(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF649C4);
  return a2;
}

void *sub_20BF64788()
{
  return &unk_24C51DD38;
}

uint64_t sub_20BF64794()
{
  return 1;
}

uint64_t sub_20BF6479C()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_20BF647A8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF647B0(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF647BC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB1294 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF647F4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD38, a2, a3);
}

void *sub_20BF64814()
{
  return &unk_24C51DD38;
}

uint64_t sub_20BF64820(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF64828@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C51F4F8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF64840(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_20BF569A8(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_20BF569A8(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_20BF6491C(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF64840(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20BF649C4(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t sub_20BF649DC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF6491C((_OWORD **)a1);
}

void sub_20BF64A6C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _WORD *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  _WORD *v12;

  v3 = (unint64_t *)sub_20BF64BA4(a1);
  sub_20BF6369C((uint64_t)v11, *v3);
  v4 = (int *)v3[4];
  v5 = *v3;
  sub_20BF63A54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 4 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_20BF6370C(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF64AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF64B08(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  _DWORD *v12;

  v3 = (unint64_t *)sub_20BF64088(a1);
  sub_20BF64CC4((uint64_t)v11, *v3);
  v4 = (unsigned __int16 *)v3[4];
  v5 = *v3;
  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 2 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = v10;
      v9 -= 2;
    }
    while (v9);
  }
  sub_20BF64D34(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF64B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF64BA4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF64C0C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF64C44, (uint64_t)&stru_24C51DD20);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF64C0C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DD20);
  else
    return 0;
}

double sub_20BF64C44@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF64C8C;
  a1[2] = &stru_24C51DD20;
  return result;
}

void sub_20BF64C8C(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

uint64_t sub_20BF64CC4(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF64D74((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF64D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF64D34@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF65058(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF64D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF64D74(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF64F28((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF64F28((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF64F28((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF64F28(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(size_t) [T = int]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF64FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF64FC4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]", a3);
      v6 = (int *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF64F28((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 4 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF65058(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF64C0C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF6510C(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF654AC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF650F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF6510C(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C51F5B0;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF6519C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF651D8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF65200(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF65394(a1);
}

uint64_t sub_20BF65210()
{
  return 1;
}

unint64_t sub_20BF65218(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(4 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_20BF65270(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, *a2);
}

uint64_t sub_20BF6527C(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, a2);
}

uint64_t sub_20BF65288()
{
  return 0;
}

_QWORD *sub_20BF65294(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  return a2;
}

void *sub_20BF652DC()
{
  return &unk_24C51DD20;
}

uint64_t sub_20BF652E8()
{
  return 1;
}

uint64_t sub_20BF652F0()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_20BF652FC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF65304(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF65310(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2EB3CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF65348(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD20, a2, a3);
}

void *sub_20BF65368()
{
  return &unk_24C51DD20;
}

uint64_t sub_20BF65374(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF6537C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C51F5B0;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF65394(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20BF653EC(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF65394(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20BF65494(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t sub_20BF654AC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF653EC((_OWORD **)a1);
}

void sub_20BF6553C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  __n128 v11[2];
  _BYTE *v12;

  v3 = (unint64_t *)sub_20BF64BA4(a1);
  sub_20BF65670((uint64_t)v11, *v3);
  v4 = (int *)v3[4];
  v5 = *v3;
  sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 4 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_20BF656E0(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF655C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF655D8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  int v9;
  __n128 v10[2];
  _DWORD *v11;

  v3 = (unint64_t *)sub_20BF65F5C(a1);
  sub_20BF64CC4((uint64_t)v10, *v3);
  v4 = (unsigned __int8 *)v3[4];
  v5 = *v3;
  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    v8 = v11;
    do
    {
      v9 = *v4++;
      *v8++ = v9;
      --v5;
    }
    while (v5);
  }
  sub_20BF64D34(v10, a2);
  sub_20BF5618C((uint64_t)v10);
}

void sub_20BF65658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF65670(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF65720((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF656C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF656E0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF659C8(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF6570C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void sub_20BF65720(unint64_t *a1, unint64_t a2, _BYTE **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t i;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  char v20;
  _BYTE *v21;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
  {
    sub_20BF56210(a1);
    return;
  }
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF658AC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                *((_BYTE *)v10 + i) = *(_BYTE *)(v9 + i);
            }
          }
          v12 = *a3;
          do
            *((_BYTE *)v7 + v3++) = *v12;
          while (a2 != v3);
        }
        v13 = v7;
        goto LABEL_28;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v17 = a2;
    else
      v17 = *a1;
    v18 = sub_20BF658AC((uint64_t)a1, a2);
    v13 = v18;
    if (v17)
    {
      v19 = v18;
      do
      {
        v20 = *(_BYTE *)v7;
        v7 = (unint64_t *)((char *)v7 + 1);
        *(_BYTE *)v19 = v20;
        v19 = (unint64_t *)((char *)v19 + 1);
        --v17;
      }
      while (v17);
    }
    if (v3 < a2)
    {
      v21 = *a3;
      do
        *((_BYTE *)v18 + v3++) = *v21;
      while (a2 != v3);
    }
    goto LABEL_28;
  }
  v14 = sub_20BF658AC((uint64_t)a1, a2);
  v13 = v14;
  v15 = 0;
  v16 = *a3;
  do
    *((_BYTE *)v14 + v15++) = *v16;
  while (a2 != v15);
LABEL_28:
  if (v13 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v13;
  }
  *a1 = a2;
}

_QWORD *sub_20BF658AC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew(size_t) [T = unsigned char]");
  if (a2 >= 0xFFFFFFFFFFFFFFF0)
    v3 = -1;
  else
    v3 = a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF65920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF65938(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  char v11;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique() [T = unsigned char]", a3);
      v6 = (char *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF658AC((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = v8;
        do
        {
          v11 = *v6++;
          *v10++ = v11;
          --v7;
        }
        while (v7);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF659C8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF65A7C(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF65AB4(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF65ECC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF65A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF65A7C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 49)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DCD8);
  else
    return 0;
}

_QWORD *sub_20BF65AB4(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C51F668;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF65B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF65B80(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF65BA8(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF65D38(a1);
}

uint64_t sub_20BF65BB8()
{
  return 1;
}

unint64_t sub_20BF65BC0(char ***a1)
{
  char **v1;
  char *v2;
  char *v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * (_QWORD)v4);
}

uint64_t sub_20BF65C14(uint64_t *a1, uint64_t *a2)
{
  return sub_20BF65D90(*a1, *a2);
}

uint64_t sub_20BF65C20(uint64_t *a1, uint64_t a2)
{
  return sub_20BF65D90(*a1, a2);
}

uint64_t sub_20BF65C2C()
{
  return 0;
}

_QWORD *sub_20BF65C38(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF65EB8);
  return a2;
}

void *sub_20BF65C80()
{
  return &unk_24C51DCD8;
}

uint64_t sub_20BF65C8C()
{
  return 1;
}

uint64_t sub_20BF65C94()
{
  return MEMORY[0x24BEDB790];
}

uint64_t sub_20BF65CA0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF65CA8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF65CB4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAE78CELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF65CEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DCD8, a2, a3);
}

void *sub_20BF65D0C()
{
  return &unk_24C51DCD8;
}

uint64_t sub_20BF65D18(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF65D20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C51F668;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF65D38(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20BF65D90(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_20BF569A8(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_20BF569A8(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_20BF65E10(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF65D38(&v13);
  }
  return (uint64_t)*a1;
}

uint64_t sub_20BF65EB8(_QWORD *a1)
{
  ++*a1;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t sub_20BF65ECC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF65E10((_OWORD **)a1);
}

uint64_t sub_20BF65F5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF65A7C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF65FC4, (uint64_t)&stru_24C51DCD8);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double sub_20BF65FC4@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF6600C;
  a1[2] = &stru_24C51DCD8;
  return result;
}

void sub_20BF6600C(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF66044(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float64x2_t *v8;
  uint64_t v9;
  float32x2_t v10;
  __n128 v11[2];
  float64x2_t *v12;

  v3 = (unint64_t *)sub_20BF66184(a1);
  sub_20BF661EC((uint64_t)v11, *v3);
  v4 = (float32x2_t *)v3[4];
  v5 = *v3;
  sub_20BF665A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 8 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = vcvtq_f64_f32(v10);
      v9 -= 8;
    }
    while (v9);
  }
  sub_20BF66264(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF660CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF660E4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x2_t *v8;
  uint64_t v9;
  float64x2_t v10;
  __n128 v11[2];
  float32x2_t *v12;

  v3 = (unint64_t *)sub_20BF66B24(a1);
  sub_20BF66B8C((uint64_t)v11, *v3);
  v4 = (float64x2_t *)v3[4];
  v5 = *v3;
  sub_20BF66F14((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = v12;
    v9 = 16 * v5;
    do
    {
      v10 = *v4++;
      *v8++ = vcvt_f32_f64(v10);
      v9 -= 16;
    }
    while (v9);
  }
  sub_20BF66C04(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF6616C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF66184(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF662A4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF662DC, (uint64_t)&stru_24C51DBA0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF661EC(uint64_t a1, unint64_t a2)
{
  __int128 v5;
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = xmmword_20CA5AAF0;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF6635C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF6624C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF66264@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF6663C(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF66290(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF662A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 36)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DBA0);
  else
    return 0;
}

double sub_20BF662DC@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF66324;
  a1[2] = &stru_24C51DBA0;
  return result;
}

void sub_20BF66324(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF6635C(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF66510((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF66510((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF66510((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF66510(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange1d]");
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF66590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF665A8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange1d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF66510((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 16 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF6663C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF666F0(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF66728(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF66A94(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF666D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF666F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 37)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DBB8);
  else
    return 0;
}

_QWORD *sub_20BF66728(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F720;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF667B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF667F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF6681C(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF6697C(a1);
}

uint64_t sub_20BF6682C()
{
  return 1;
}

unint64_t sub_20BF66834(uint64_t **a1)
{
  char v2;

  return sub_20BF5A3DC((uint64_t)&v2, *a1);
}

BOOL sub_20BF66858(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5A4C0(*a1, *a2);
}

BOOL sub_20BF66864(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5A4C0(*a1, a2);
}

uint64_t sub_20BF66870()
{
  return 0;
}

_QWORD *sub_20BF6687C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF66A7C);
  return a2;
}

void *sub_20BF668C4()
{
  return &unk_24C51DBB8;
}

uint64_t sub_20BF668D0()
{
  return 1;
}

void *sub_20BF668D8()
{
  return &unk_24C51C050;
}

uint64_t sub_20BF668E4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF668EC(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF668F8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB21876 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF66930(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DBB8, a2, a3);
}

void *sub_20BF66950()
{
  return &unk_24C51DBB8;
}

uint64_t sub_20BF6695C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF66964@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F720;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF6697C(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20BF669D4(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF6697C(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF66A7C(double **a1, _QWORD *a2)
{
  double *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF66A94(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF669D4((_OWORD **)a1);
}

uint64_t sub_20BF66B24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF666F0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF66C44, (uint64_t)&stru_24C51DBB8);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF66B8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0xFF7FFFFF7F7FFFFFLL;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF66CC4((unint64_t *)a1, a2, (uint64_t **)&v6);
  return a1;
}

void sub_20BF66BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF66C04@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF66FA8(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF66C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF66C44@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF66C8C;
  a1[2] = &stru_24C51DBB8;
  return result;
}

void sub_20BF66C8C(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF66CC4(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF66E78((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF66E78((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF66E78((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF66E78(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange1f]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF66EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF66F14(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange1f]", a3);
      v6 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF66E78((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 8 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF66FA8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF662A4(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF6705C(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF673C8(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF67044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF6705C(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F7D8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF670EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF67128(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF67150(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF672B0(a1);
}

uint64_t sub_20BF67160()
{
  return 1;
}

unint64_t sub_20BF67168(uint64_t **a1)
{
  char v2;

  return sub_20BF58D90((uint64_t)&v2, *a1);
}

BOOL sub_20BF6718C(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF58E74(*a1, *a2);
}

BOOL sub_20BF67198(_QWORD **a1, uint64_t a2)
{
  return sub_20BF58E74(*a1, a2);
}

uint64_t sub_20BF671A4()
{
  return 0;
}

_QWORD *sub_20BF671B0(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF673B0);
  return a2;
}

void *sub_20BF671F8()
{
  return &unk_24C51DBA0;
}

uint64_t sub_20BF67204()
{
  return 1;
}

void *sub_20BF6720C()
{
  return &unk_24C51C060;
}

uint64_t sub_20BF67218(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF67220(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF6722C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2157ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF67264(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DBA0, a2, a3);
}

void *sub_20BF67284()
{
  return &unk_24C51DBA0;
}

uint64_t sub_20BF67290(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF67298@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F7D8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF672B0(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_20BF67308(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF672B0(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF673B0(float **a1, _QWORD *a2)
{
  float *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF673C8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF67308((_OWORD **)a1);
}

void sub_20BF67458(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x2_t *v8;
  float64x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  __n128 v12[2];
  float64x2_t *v13;

  v3 = (unint64_t *)sub_20BF675A0(a1);
  sub_20BF67608((uint64_t)v12, *v3);
  v4 = (float32x2_t *)v3[4];
  v5 = *v3;
  sub_20BF679E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = &v4[2 * v5];
    v9 = v13;
    do
    {
      v10 = *v4;
      v11 = v4[1];
      v4 += 2;
      *v9 = vcvtq_f64_f32(v10);
      v9[1] = vcvtq_f64_f32(v11);
      v9 += 2;
    }
    while (v4 != v8);
  }
  sub_20BF67690(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF674E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF674FC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x4_t *v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  __n128 v12[2];
  float32x4_t *v13;

  v3 = (unint64_t *)sub_20BF680C8(a1);
  sub_20BF68130((uint64_t)v12, *v3);
  v4 = (float64x2_t *)v3[4];
  v5 = *v3;
  sub_20BF684B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = v13;
    v9 = 32 * v5;
    do
    {
      v11 = *v4;
      v10 = v4[1];
      v4 += 2;
      *v8++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11), v10);
      v9 -= 32;
    }
    while (v9);
  }
  sub_20BF681A8(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF67588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF675A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF676D0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF67708, (uint64_t)&stru_24C51DB70);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF67608(uint64_t a1, unint64_t a2)
{
  _OWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  v5[1] = vdupq_n_s64(0xC7EFFFFFE0000000);
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF67788((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF67678(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF67690@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF67A7C(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF676BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF676D0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 34)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DB70);
  else
    return 0;
}

double sub_20BF67708@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF67750;
  a1[2] = &stru_24C51DB70;
  return result;
}

void sub_20BF67750(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF67788(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  __int128 v34;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF67950((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11 * 8);
                *((_OWORD *)v12 + 1) = v13;
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 4 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = v14[1];
            *(_OWORD *)v16 = *v14;
            *((_OWORD *)v16 + 1) = v17;
            v15 += 4;
          }
          while (4 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v25 = a2;
    else
      v25 = *a1;
    v26 = sub_20BF67950((uint64_t)a1, a2);
    v18 = v26;
    if (v25)
    {
      v27 = 32 * v25;
      v28 = v26;
      do
      {
        v29 = *(_OWORD *)v7;
        v30 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v28 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    if (v3 < a2)
    {
      v31 = *a3;
      v32 = 4 * v3;
      do
      {
        v33 = &v26[v32];
        v34 = v31[1];
        *(_OWORD *)v33 = *v31;
        *((_OWORD *)v33 + 1) = v34;
        v32 += 4;
      }
      while (4 * a2 != v32);
    }
    goto LABEL_29;
  }
  v19 = 32 * a2;
  if (32 * a2 / a2 != 32)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v20 = sub_20BF67950((uint64_t)a1, a2);
  v18 = v20;
  v21 = 0;
  v22 = *a3;
  do
  {
    v23 = &v20[v21 / 8];
    v24 = v22[1];
    *(_OWORD *)v23 = *v22;
    *((_OWORD *)v23 + 1) = v24;
    v21 += 32;
  }
  while (v19 != v21);
LABEL_29:
  if (v18 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF67950(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange2d]");
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF679D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF679E8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange2d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF67950((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 32 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[1];
          v6 += 2;
          *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF67A7C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF67B30(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF67B68(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF68038(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF67B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF67B30(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 35)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DB88);
  else
    return 0;
}

_QWORD *sub_20BF67B68(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F890;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF67BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF67C34(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF67C5C(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF67DBC(a1);
}

uint64_t sub_20BF67C6C()
{
  return 1;
}

unint64_t sub_20BF67C74(uint64_t **a1)
{
  char v2;

  return sub_20BF67E14((uint64_t)&v2, *a1);
}

BOOL sub_20BF67C98(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5F1C4(*a1, *a2);
}

BOOL sub_20BF67CA4(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5F1C4(*a1, a2);
}

uint64_t sub_20BF67CB0()
{
  return 0;
}

_QWORD *sub_20BF67CBC(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF68020);
  return a2;
}

void *sub_20BF67D04()
{
  return &unk_24C51DB88;
}

uint64_t sub_20BF67D10()
{
  return 1;
}

void *sub_20BF67D18()
{
  return &unk_24C51C070;
}

uint64_t sub_20BF67D24(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF67D2C(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF67D38(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB21286 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF67D70(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB88, a2, a3);
}

void *sub_20BF67D90()
{
  return &unk_24C51DB88;
}

uint64_t sub_20BF67D9C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF67DA4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F890;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF67DBC(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF67E14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20BF67E88((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF67E88(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF67F04((uint64_t)&v5, a2, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF67F04(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  unint64_t v6;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = v3;
  if (a2[1] == 0.0)
    v5 = 0.0;
  else
    v5 = a2[1];
  v6 = bswap64(0x9E3779B97F4A7C55* (*(_QWORD *)&v5+ ((*(_QWORD *)&v5 + *(_QWORD *)&v4 + (*(_QWORD *)&v5 + *(_QWORD *)&v4) * (*(_QWORD *)&v5 + *(_QWORD *)&v4)) >> 1)));
  if (*(_BYTE *)(a1 + 8))
    v6 += (*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return sub_20BF5A450(a1, a3);
}

uint64_t sub_20BF67F78(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF67DBC(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF68020(_OWORD **a1, _QWORD *a2)
{
  _OWORD *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF68038(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF67F78((_OWORD **)a1);
}

uint64_t sub_20BF680C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF67B30(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF681E8, (uint64_t)&stru_24C51DB88);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF68130(uint64_t a1, unint64_t a2)
{
  __int128 v5;
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = xmmword_20CA9EF70;
  sub_20BF56210((_QWORD *)a1);
  v6 = &v5;
  sub_20BF68268((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF68190(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF681A8@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF68548(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF681D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF681E8@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF68230;
  a1[2] = &stru_24C51DB88;
  return result;
}

void sub_20BF68230(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF68268(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF6841C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_20BF6841C((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v16 = sub_20BF6841C((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_20BF6841C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange2f]");
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF6849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF684B4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange2f]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF6841C((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 16 * v7;
        v11 = v8;
        do
        {
          v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF68548(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF676D0(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF685FC(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF68ACC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF685E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF685FC(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51F948;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF6868C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF686C8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF686F0(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF68850(a1);
}

uint64_t sub_20BF68700()
{
  return 1;
}

unint64_t sub_20BF68708(uint64_t **a1)
{
  char v2;

  return sub_20BF688A8((uint64_t)&v2, *a1);
}

BOOL sub_20BF6872C(_QWORD **a1, uint64_t *a2)
{
  return sub_20BF5DB14(*a1, *a2);
}

BOOL sub_20BF68738(_QWORD **a1, uint64_t a2)
{
  return sub_20BF5DB14(*a1, a2);
}

uint64_t sub_20BF68744()
{
  return 0;
}

_QWORD *sub_20BF68750(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF68AB4);
  return a2;
}

void *sub_20BF68798()
{
  return &unk_24C51DB70;
}

uint64_t sub_20BF687A4()
{
  return 1;
}

void *sub_20BF687AC()
{
  return &unk_24C51C080;
}

uint64_t sub_20BF687B8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF687C0(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF687CC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB20F8ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF68804(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB70, a2, a3);
}

void *sub_20BF68824()
{
  return &unk_24C51DB70;
}

uint64_t sub_20BF68830(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF68838@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51F948;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF68850(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF688A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_20BF6891C((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF6891C(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF68998((uint64_t)&v5, a2, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF68998(uint64_t a1, float *a2, float *a3)
{
  float v3;
  uint64_t v4;
  float v5;
  unint64_t v6;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (a2[1] == 0.0)
    v5 = 0.0;
  else
    v5 = a2[1];
  v6 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v5) + ((LODWORD(v5) + v4 + (LODWORD(v5) + v4) * ((unint64_t)LODWORD(v5) + v4)) >> 1)));
  if (*(_BYTE *)(a1 + 8))
    v6 += (*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return sub_20BF58E04(a1, a3);
}

uint64_t sub_20BF68A0C(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF68850(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF68AB4(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF68ACC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF68A0C((_OWORD **)a1);
}

void sub_20BF68B5C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float32x2_t *v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  __n128 v12[2];
  float64x2_t *v13;

  v3 = (unint64_t *)sub_20BF68CD4(a1);
  sub_20BF68D3C((uint64_t)v12, *v3);
  v4 = (float32x2_t *)v3[4];
  v5 = *v3;
  sub_20BF69180((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    v8 = &v4[3 * v5];
    v9 = v13;
    do
    {
      v10 = vcvtq_f64_f32(v4[1]);
      v11 = vcvtq_f64_f32(v4[2]);
      *v9 = vcvtq_f64_f32(*v4);
      v9[1] = v10;
      v9[2] = v11;
      v4 += 3;
      v9 += 3;
    }
    while (v4 != v8);
  }
  sub_20BF68DD0(v12, a2);
  sub_20BF5618C((uint64_t)v12);
}

void sub_20BF68C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF68C18(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float64x2_t *v8;
  float32x4_t *v9;
  float32x2_t v10;
  __n128 v11[2];
  float32x4_t *v12;

  v3 = (unint64_t *)sub_20BF699A8(a1);
  sub_20BF69A10((uint64_t)v11, *v3);
  v4 = (float64x2_t *)v3[4];
  v5 = *v3;
  sub_20BF69E0C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    v8 = &v4[3 * v5];
    v9 = v12;
    do
    {
      v10 = vcvt_f32_f64(v4[2]);
      *v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v4), v4[1]);
      *(float32x2_t *)v9[1].f32 = v10;
      v4 += 3;
      v9 = (float32x4_t *)((char *)v9 + 24);
    }
    while (v4 != v8);
  }
  sub_20BF69A90(v11, a2);
  sub_20BF5618C((uint64_t)v11);
}

void sub_20BF68CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF68CD4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF68E10(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF68E48, (uint64_t)&stru_24C51DB40);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF68D3C(uint64_t a1, unint64_t a2)
{
  _OWORD v5[3];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  v5[1] = xmmword_20CA5AAF0;
  v5[2] = vdupq_n_s64(0xC7EFFFFFE0000000);
  sub_20BF56210((_QWORD *)a1);
  v6 = v5;
  sub_20BF68EC8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20BF68DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF68DD0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF69224(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF68DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF68E10(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 32)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DB40);
  else
    return 0;
}

double sub_20BF68E48@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF68E90;
  a1[2] = &stru_24C51DB40;
  return result;
}

void sub_20BF68E90(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF68EC8(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  __int128 *v23;
  unint64_t *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  unint64_t *v35;
  __int128 v36;
  __int128 v37;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF690E0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8);
                v14 = *(_OWORD *)(v9 + v11 * 8 + 32);
                *((_OWORD *)v12 + 1) = *(_OWORD *)(v9 + v11 * 8 + 16);
                *((_OWORD *)v12 + 2) = v14;
                *(_OWORD *)v12 = v13;
                v11 += 6;
              }
              while (6 * v3 != v11);
            }
          }
          v15 = *a3;
          v16 = 6 * v3;
          do
          {
            v17 = &v7[v16];
            v18 = *v15;
            v19 = v15[2];
            *((_OWORD *)v17 + 1) = v15[1];
            *((_OWORD *)v17 + 2) = v19;
            *(_OWORD *)v17 = v18;
            v16 += 6;
          }
          while (6 * a2 != v16);
        }
        v20 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v27 = a2;
    else
      v27 = *a1;
    v28 = sub_20BF690E0((uint64_t)a1, a2);
    v20 = v28;
    if (v27)
    {
      v29 = 48 * v27;
      v30 = v28;
      do
      {
        v31 = *(_OWORD *)v7;
        v32 = *((_OWORD *)v7 + 2);
        *((_OWORD *)v30 + 1) = *((_OWORD *)v7 + 1);
        *((_OWORD *)v30 + 2) = v32;
        *(_OWORD *)v30 = v31;
        v30 += 6;
        v7 += 6;
        v29 -= 48;
      }
      while (v29);
    }
    if (v3 < a2)
    {
      v33 = *a3;
      v34 = 6 * v3;
      do
      {
        v35 = &v28[v34];
        v36 = *v33;
        v37 = v33[2];
        *((_OWORD *)v35 + 1) = v33[1];
        *((_OWORD *)v35 + 2) = v37;
        *(_OWORD *)v35 = v36;
        v34 += 6;
      }
      while (6 * a2 != v34);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x555555555555556)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v21 = sub_20BF690E0((uint64_t)a1, a2);
  v20 = v21;
  v22 = 0;
  v23 = *a3;
  do
  {
    v24 = &v21[v22];
    v25 = *v23;
    v26 = v23[2];
    *((_OWORD *)v24 + 1) = v23[1];
    *((_OWORD *)v24 + 2) = v26;
    *(_OWORD *)v24 = v25;
    v22 += 6;
  }
  while (6 * a2 != v22);
LABEL_29:
  if (v20 != (unint64_t *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v20;
  }
  *a1 = a2;
}

_QWORD *sub_20BF690E0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange3d]");
  if (a2 > 0x555555555555554)
    v3 = -1;
  else
    v3 = 48 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF69168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF69180(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange3d]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF690E0((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 48 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v13 = v6[2];
          v11[1] = v6[1];
          v11[2] = v13;
          *v11 = v12;
          v11 += 3;
          v6 += 3;
          v10 -= 48;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF69224(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF692D8(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF69310(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF69918(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF692C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF692D8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 33)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51DB58);
  else
    return 0;
}

_QWORD *sub_20BF69310(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51FA00;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF693A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF693DC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF69404(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF69564(a1);
}

uint64_t sub_20BF69414()
{
  return 1;
}

unint64_t sub_20BF6941C(uint64_t **a1)
{
  char v2;

  return sub_20BF695BC((uint64_t)&v2, *a1);
}

BOOL sub_20BF69440(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF6973C(*a1, *a2);
}

BOOL sub_20BF6944C(uint64_t **a1, uint64_t a2)
{
  return sub_20BF6973C(*a1, a2);
}

uint64_t sub_20BF69458()
{
  return 0;
}

_QWORD *sub_20BF69464(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF69900);
  return a2;
}

void *sub_20BF694AC()
{
  return &unk_24C51DB58;
}

uint64_t sub_20BF694B8()
{
  return 1;
}

void *sub_20BF694C0()
{
  return &unk_24C51C090;
}

uint64_t sub_20BF694CC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF694D4(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF694E0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB20C96 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF69518(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB58, a2, a3);
}

void *sub_20BF69538()
{
  return &unk_24C51DB58;
}

uint64_t sub_20BF69544(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF6954C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51FA00;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF69564(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF695BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 6;
      sub_20BF69630((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF69630(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF696AC((uint64_t)&v5, a2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF696AC(uint64_t a1, double *a2, double *a3)
{
  unint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 0;
  sub_20BF529F4((uint64_t)&v7, a2, a2 + 1, a2 + 2);
  v5 = bswap64(0x9E3779B97F4A7C55 * v7);
  if (*(_BYTE *)(a1 + 8))
    v5 += (*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20BF55C3C(a1, a3);
}

BOOL sub_20BF6973C(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (double *)a1[4];
  v7 = *(double **)(a2 + 32);
  v8 = 48 * v5 - 48;
  do
  {
    result = sub_20BF697EC(v6, v7);
    if (!result)
      break;
    v6 += 6;
    v7 += 6;
    v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

BOOL sub_20BF697EC(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t sub_20BF69858(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF69564(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF69900(__int128 **a1, _QWORD *a2)
{
  __int128 *v3;

  v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF69918(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF69858((_OWORD **)a1);
}

uint64_t sub_20BF699A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF692D8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF69AD0, (uint64_t)&stru_24C51DB58);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20BF69A10(uint64_t a1, unint64_t a2)
{
  __int128 v5;
  uint64_t v6;
  __int128 *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = xmmword_20CA9EF60;
  v6 = 0x80000000800000;
  sub_20BF56210((_QWORD *)a1);
  v7 = &v5;
  sub_20BF69B50((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20BF69A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

double sub_20BF69A90@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double result;

  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)&result = sub_20BF69EB0(a2, a1).n128_u64[0];
  return result;
}

void sub_20BF69ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

double sub_20BF69AD0@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20BF69B18;
  a1[2] = &stru_24C51DB58;
  return result;
}

void sub_20BF69B18(void *a1)
{
  if (a1)
  {
    sub_20BF5618C((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_20BF69B50(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_20BF69D68((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8);
                v12[2] = *(_QWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = v13;
                v11 += 3;
              }
              while (3 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 3 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = *v14;
            v16[2] = *((_QWORD *)v14 + 2);
            *(_OWORD *)v16 = v17;
            v15 += 3;
          }
          while (3 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_20BF69D68((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 24 * v24;
      v27 = v25;
      do
      {
        v28 = *(_OWORD *)v7;
        v27[2] = v7[2];
        *(_OWORD *)v27 = v28;
        v27 += 3;
        v7 += 3;
        v26 -= 24;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 3 * v3;
      do
      {
        v31 = &v25[v30];
        v32 = *v29;
        v31[2] = *((_QWORD *)v29 + 2);
        *(_OWORD *)v31 = v32;
        v30 += 3;
      }
      while (3 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_18:
    sub_20BF56210(a1);
    return;
  }
  v19 = sub_20BF69D68((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = &v19[v20];
    v23 = *v21;
    v22[2] = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    v20 += 3;
  }
  while (3 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *sub_20BF69D68(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"VtArray::_AllocateNew", (uint64_t)"value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange3f]");
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_20BF69DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF69E0C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 3) || (v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange3f]", a3);
      v6 = (__int128 *)*((_QWORD *)this + 4);
      v7 = *(_QWORD *)this;
      v8 = sub_20BF69D68((uint64_t)this, *(_QWORD *)this);
      v9 = v8;
      if (v7)
      {
        v10 = 24 * v7;
        v11 = v8;
        do
        {
          v12 = *v6;
          v11[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)v11 = v12;
          v11 += 3;
          v6 = (__int128 *)((char *)v6 + 24);
          v10 -= 24;
        }
        while (v10);
      }
      sub_20BF5618C((uint64_t)this);
      *((_QWORD *)this + 4) = v9;
    }
  }
}

__n128 sub_20BF69EB0(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_20BF68E10(a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_20BF69F64(a1, (uint64_t)v10);
    sub_20BF5618C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_20BF6A56C(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20BF69F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF69F64(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_24C51FAB8;
  sub_20BF56B40(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20BF69FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BF6A030(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20BF6A058(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF6A1B8(a1);
}

uint64_t sub_20BF6A068()
{
  return 1;
}

unint64_t sub_20BF6A070(uint64_t **a1)
{
  char v2;

  return sub_20BF6A210((uint64_t)&v2, *a1);
}

BOOL sub_20BF6A094(uint64_t **a1, uint64_t *a2)
{
  return sub_20BF6A390(*a1, *a2);
}

BOOL sub_20BF6A0A0(uint64_t **a1, uint64_t a2)
{
  return sub_20BF6A390(*a1, a2);
}

uint64_t sub_20BF6A0AC()
{
  return 0;
}

_QWORD *sub_20BF6A0B8(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v3 = *a1;
  v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, _QWORD *))sub_20BF6A554);
  return a2;
}

void *sub_20BF6A100()
{
  return &unk_24C51DB40;
}

uint64_t sub_20BF6A10C()
{
  return 1;
}

void *sub_20BF6A114()
{
  return &unk_24C51C0A0;
}

uint64_t sub_20BF6A120(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_20BF6A128(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_20BF6A134(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB2099ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6A16C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB40, a2, a3);
}

void *sub_20BF6A18C()
{
  return &unk_24C51DB40;
}

uint64_t sub_20BF6A198(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BF6A1A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = off_24C51FAB8;
  return sub_20BF56B40(a2, v2);
}

void **sub_20BF6A1B8(void **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*a1;
  if (*a1)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BF5618C((uint64_t)v2);
      operator delete(v2);
    }
  }
  return a1;
}

unint64_t sub_20BF6A210(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 6;
      sub_20BF6A284((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20BF6A284(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = sub_20BF6A300((uint64_t)&v5, a2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_20BF6A300(uint64_t a1, float *a2, float *a3)
{
  unint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 0;
  sub_20BF5261C((uint64_t)&v7, a2, a2 + 1, a2 + 2);
  v5 = bswap64(0x9E3779B97F4A7C55 * v7);
  if (*(_BYTE *)(a1 + 8))
    v5 += (*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20BF555B8(a1, a3);
}

BOOL sub_20BF6A390(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_20BF569A8((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_20BF569A8((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (float *)a1[4];
  v7 = *(float **)(a2 + 32);
  v8 = 24 * v5 - 24;
  do
  {
    result = sub_20BF6A440(v6, v7);
    if (!result)
      break;
    v6 += 6;
    v7 += 6;
    v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

BOOL sub_20BF6A440(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t sub_20BF6A4AC(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v13;

  v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x30uLL);
    v4 = *a1;
    v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    v6 = v4[4];
    *((_QWORD *)v3 + 4) = v6;
    if (v6)
    {
      v7 = (unint64_t *)*((_QWORD *)v3 + 3);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = *a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)v3 + 10);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    sub_20BF6A1B8(&v13);
  }
  return (uint64_t)*a1;
}

_QWORD *sub_20BF6A554(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_20BF6A56C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF6A4AC((_OWORD **)a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9F11CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0x238uLL);
      sub_20BF6C3F4(v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (_QWORD *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_15Vt_CastRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BF6A7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::DeleteInstance()
{
  uint64_t result;
  unint64_t v1;

  for (result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
        result;
        result = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
    if (v1 == result)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance))return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::aapl_vt_castRegistry_init(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t result;

  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance))
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    return (*(uint64_t (**)(void))(v2 + 112))();
  else
    return *(unsigned __int8 *)(v2 + 21) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetShapeData(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 128))();
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 136))();
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 160))();
  else
    return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 120))();
  else
    return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, char *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void **v10;
  void *__p[2];
  char v13;
  _QWORD v14[4];
  char v15;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7C8], a2, a3);
  v5 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v6 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))(v5 + 152))(this);
  else
    v6 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)v5, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v6)
  {
    v14[0] = "vt/value.cpp";
    v14[1] = "GetType";
    v14[2] = 394;
    v14[3] = "TfType pxrInternal__aapl__pxrReserved__::VtValue::GetType() const";
    v15 = 0;
    v7 = *((_QWORD *)this + 1);
    if (v7)
      v8 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 160))(this);
    else
      v8 = MEMORY[0x24BEDB7C8];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"Returning unknown type for VtValue with unregistered C++ type %s", v9, v10);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v6;
}

void sub_20BF6AB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t TypeName;
  __int128 v8;
  uint64_t Type;

  v5 = *((_QWORD *)this + 1);
  if ((v5 & 4) != 0)
  {
    Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(this, a2, a3);
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
    if (*(char *)(TypeName + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a4, *(void **)TypeName, *(_QWORD *)(TypeName + 8));
    }
    else
    {
      v8 = *(_OWORD *)TypeName;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(TypeName + 16);
      *(_OWORD *)a4 = v8;
    }
  }
  else
  {
    if (v5)
      v6 = (*(uint64_t (**)(void))((v5 & 0xFFFFFFFFFFFFFFF8) + 160))();
    else
      v6 = MEMORY[0x24BEDB7C8];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), a4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CanHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 1;
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    return (*(uint64_t (**)(void))(v2 + 48))();
  else
    return *(unsigned __int8 *)(v2 + 22) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 56))();
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF4C6D0(v10, this);
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 160))(a2);
  else
    v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)MEMORY[0x24BEDB7C8];
  v8 = sub_20BF4C324((pxrInternal__aapl__pxrReserved__::VtValue *)v10, v7);
  sub_20BF4C6D0(a3, v8);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20BF6ACD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF4C6D0(v8, this);
  v6 = sub_20BF4C324((pxrInternal__aapl__pxrReserved__::VtValue *)v8, a2);
  sub_20BF4C6D0(a3, v6);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20BF6AD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(Instance, a1, a2, a3);
}

void sub_20BF6ADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;
  uint64_t v32;

  v31 = a3;
  v32 = a2;
  v7 = a1 + 8;
  sub_20BF78098(v16, (uint64_t)&v32, (uint64_t)&v31);
  v8 = *(_OWORD *)v16;
  v9 = v17;
  v16[0] = 0;
  v16[1] = 0;
  v22 = *(_OWORD *)v18;
  v10 = v19;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v24 = a4;
  *(_OWORD *)v25 = v8;
  v26 = v9;
  v20[1] = 0;
  v21 = 0;
  v20[0] = 0;
  *(_OWORD *)__p = v22;
  v22 = 0uLL;
  v23 = 0;
  v28 = v10;
  v29 = a4;
  sub_20BF77848(v7, (__int128 *)v25, 0, (uint64_t)v30);
  v11 = v30[16];
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v17) < 0)
  {
    operator delete(v16[0]);
    if (v11)
      return;
  }
  else if (v11)
  {
    return;
  }
  v25[0] = "vt/value.cpp";
  v25[1] = "Register";
  v26 = 141;
  __p[0] = "void pxrInternal__aapl__pxrReserved__::Vt_CastRegistry::Register(const type_info &, const type_info &, VtValu"
           "e (*)(const VtValue &))";
  LOBYTE(__p[1]) = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
  v12 = SHIBYTE(v21);
  v13 = (void **)v20[0];
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
  if (v12 >= 0)
    v14 = v20;
  else
    v14 = v13;
  if (v17 >= 0)
    v15 = v16;
  else
    v15 = (void **)v16[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"VtValue cast already registered from '%s' to '%s'.  New cast will be ignored.", (const char *)v14, (const char *)v15);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
}

void sub_20BF6AF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, std::type_info *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6B03C(Instance, (uint64_t)this, a2, a3);
}

void sub_20BF6B03C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  void (*v10)(_QWORD *);
  void *v11[2];
  char v12;
  void *__p;
  char v14;
  unint64_t v15[2];
  uint64_t v16;
  uint64_t v17;

  v6 = a3[1];
  if (v6)
  {
    v9 = (*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 160))(a3);
    v16 = a2;
    v17 = v9;
    sub_20BF78098(v11, (uint64_t)&v17, (uint64_t)&v16);
    sub_20BF780FC(a1 + 8, (__int128 *)v11, v15);
    if (v14 < 0)
      operator delete(__p);
    if (v12 < 0)
      operator delete(v11[0]);
    if ((v15[0] || v15[1] != a1 + 24) && (v10 = *(void (**)(_QWORD *))(v15[0] + 56)) != 0)
      v10(a3);
    else
      a4[1] = 0;
  }
  else
  {
    sub_20BF4C6D0(a4, a3);
  }
}

void sub_20BF6B124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const std::type_info *a3)
{
  unint64_t Instance;

  if (!strcmp((const char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  return sub_20BF6B1A4(Instance, (uint64_t)this, (uint64_t)a2);
}

BOOL sub_20BF6B1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  unint64_t v13[2];
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v15 = a2;
  v4 = a1 + 8;
  sub_20BF78098(v9, (uint64_t)&v15, (uint64_t)&v14);
  sub_20BF780FC(v4, (__int128 *)v9, v13);
  v6 = v13[0];
  v5 = v13[1];
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v6)
    v7 = 0;
  else
    v7 = v5 == a1 + 24;
  return !v7;
}

void sub_20BF6B22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, std::type_info *a2, char *a3)
{
  unint64_t v5;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(pxrInternal__aapl__pxrReserved__::VtValue *, std::type_info *);
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  std::type_info *v13;
  uint64_t Type;
  const std::type_info *v15;
  char *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  uint64_t v20;
  const std::type_info *v21;
  char *v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 1);
  type_name = a2->__type_name;
  if (((v5 >> 2) & 1) != ((type_name >> 2) & 1))
  {
    Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(this, a2, a3);
    if (Type != pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)a2, v15, v16))return 0;
    v17 = *((_QWORD *)this + 1);
    v18 = (v17 & 4) != 0 ? this : (pxrInternal__aapl__pxrReserved__::VtValue *)a2;
    v19 = (*(uint64_t (**)(void))((*((_QWORD *)v18 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))();
    if (!v19)
      return 0;
    v13 = (std::type_info *)v19;
    if ((v17 & 4) != 0)
      v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)a2;
    else
      v12 = this;
    v11 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *, std::type_info *))((*((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 72);
    return v11(v12, v13);
  }
  if ((v5 & 4 & type_name) != 0)
  {
    v20 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(this, a2, a3);
    if (v20 == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)a2, v21, v22))
    {
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::VtValue *))((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 176))(v24, this);
      (*(void (**)(_QWORD *__return_ptr, std::type_info *))((a2->__type_name & 0xFFFFFFFFFFFFFFF8) + 176))(v23, a2);
      v9 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v24, v23);
      sub_20BF4C2D8((uint64_t)v23);
      sub_20BF4C2D8((uint64_t)v24);
      return v9;
    }
    return 0;
  }
  if (!v5)
  {
    v7 = MEMORY[0x24BEDB7C8];
    if (type_name)
      goto LABEL_5;
LABEL_7:
    v8 = MEMORY[0x24BEDB7C8];
    goto LABEL_8;
  }
  v7 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 160))(this);
  type_name = a2->__type_name;
  if (!type_name)
    goto LABEL_7;
LABEL_5:
  v8 = (*(uint64_t (**)(std::type_info *))((type_name & 0xFFFFFFFFFFFFFFF8) + 160))(a2);
LABEL_8:
  if (strcmp((const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 0;
  }
  v11 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *, std::type_info *))((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 64);
  v12 = this;
  v13 = a2;
  return v11(v12, v13);
}

void sub_20BF6B448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 96))(a2, result);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetPythonObject(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 88))();
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(void))((v2 & 0xFFFFFFFFFFFFFFF8) + 144))();
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_FailGet(uint64_t a1, void (*a2)(void **__return_ptr), uint64_t a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  unsigned __int8 v11;
  char v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  void *__p[2];
  uint64_t v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  char v35;
  int v36;

  if (*(_QWORD *)(a1 + 8))
  {
    v31 = "vt/value.cpp";
    v32 = "_FailGet";
    v33 = 576;
    v34 = "const void *pxrInternal__aapl__pxrReserved__::VtValue::_FailGet(Vt_DefaultValueHolder (*)(), const std::type_info &) const";
    v35 = 0;
    v6 = v27;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v27);
    if (v28 < 0)
      v6 = (void **)v27[0];
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
      v8 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 160))(a1);
    else
      v8 = MEMORY[0x24BEDB7C8];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v26 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to get value of type '%s' from VtValue holding '%s'", (const char *)v6, (const char *)v10);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v31 = "vt/value.cpp";
    v32 = "_FailGet";
    v33 = 571;
    v34 = "const void *pxrInternal__aapl__pxrReserved__::VtValue::_FailGet(Vt_DefaultValueHolder (*)(), const std::type_info &) const";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v27);
    if (v28 >= 0)
      v9 = v27;
    else
      v9 = (void **)v27[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to get value of type '%s' from empty VtValue.", (const char *)v9);
  }
  if (v28 < 0)
    operator delete(v27[0]);
  sub_20BEB59B0((uint64_t)&v29, (uint64_t)"Vt", (uint64_t)"VtValue _FindOrCreateDefaultValue");
  v11 = atomic_load((unsigned __int8 *)&qword_254985440);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254985440))
  {
    qword_254985438 = 0;
    qword_254985430 = 0;
    qword_254985428 = (uint64_t)&qword_254985430;
    __cxa_atexit((void (*)(void *))sub_20BF781DC, &qword_254985428, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985440);
  }
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v27);
LABEL_20:
  v12 = 8 * (&dword_254985448 & 3);
  v13 = *(_DWORD *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL) & ~(255 << v12);
  v14 = v13 | (1 << v12);
  do
  {
    while (1)
    {
      v15 = __ldaxr((unsigned int *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL));
      if (v15 == v13)
        break;
      __clrex();
      if (*(_DWORD *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL) != v13)
      {
        sched_yield();
        goto LABEL_20;
      }
    }
  }
  while (__stlxr(v14, (unsigned int *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL)));
  v16 = (uint64_t *)sub_20BDEEBA4((uint64_t)&qword_254985428, (const void **)v27);
  if (v16 == &qword_254985430)
  {
    __dmb(0xBu);
    LOBYTE(dword_254985448) = 0;
    a2(__p);
    if (strcmp((const char *)(*(_QWORD *)(v26 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31 = "vt/value.cpp";
      v32 = "_FindOrCreateDefaultValue";
      v33 = 543;
      v34 = "const void *pxrInternal__aapl__pxrReserved__::_FindOrCreateDefaultValue(const std::type_info &, Vt_DefaultVa"
            "lueHolder (*)())";
      v35 = 0;
      v36 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v31, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v18, "TfSafeTypeCompare(newValue.GetType(), type)");
    }
LABEL_29:
    v19 = 8 * (&dword_254985448 & 3);
    v20 = *(_DWORD *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL) & ~(255 << v19);
    v21 = v20 | (1 << v19);
    do
    {
      while (1)
      {
        v22 = __ldaxr((unsigned int *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL));
        if (v22 == v20)
          break;
        __clrex();
        if (*(_DWORD *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL) != v20)
        {
          sched_yield();
          goto LABEL_29;
        }
      }
    }
    while (__stlxr(v21, (unsigned int *)((unint64_t)&dword_254985448 & 0xFFFFFFFFFFFFFFFCLL)));
    v17 = *((_QWORD *)sub_20BF7828C((uint64_t **)&qword_254985428, (const void **)v27, (uint64_t)v27, (uint64_t)__p) + 7);
    __dmb(0xBu);
    LOBYTE(dword_254985448) = 0;
    ((void (*)(void *))__p[1])(__p[0]);
  }
  else
  {
    v17 = v16[7];
    __dmb(0xBu);
    LOBYTE(dword_254985448) = 0;
  }
  if (v28 < 0)
    operator delete(v27[0]);
  while (v30--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v29);
  return v17;
}

void sub_20BF6B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void (*a12)(void *), int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  __dmb(0xBu);
  *(_BYTE *)(v23 + 1096) = 0;
  a12(a11);
  if (a22 < 0)
    operator delete(__p);
  sub_20BEB24F4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtStreamOut(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  LOBYTE(v9) = 91;
  sub_20BDDC1C8(a2, (uint64_t)&v9, 1);
  v6 = a1[1];
  v9 = *a1;
  v10 = v6;
  if (v9 != v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(sub_20BF6BA00(&v9, v4, v5) + 8);
      if (v7)
        (*(void (**)(void))((v7 & 0xFFFFFFFFFFFFFFF8) + 96))();
      sub_20BF6BA7C(&v9);
      if (v9 == v10)
        break;
      sub_20BDDC1C8(a2, (uint64_t)", ", 2);
    }
  }
  LOBYTE(v9) = 93;
  sub_20BDDC1C8(a2, (uint64_t)&v9, 1);
  return a2;
}

uint64_t sub_20BF6BA00(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::V"
            "tValue>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF6BA74()
{
  JUMPOUT(0x20BF6BA24);
}

_QWORD *sub_20BF6BA7C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::VtValue>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4i>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4i>();
  v4 = v3;
  result = operator new(0x10uLL);
  *result = v2;
  result[1] = v4;
  *a1 = result;
  a1[1] = sub_20BF783A0;
  a1[2] = &unk_24C51C1C0;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3i>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3i>();
  v4 = v3;
  result = operator new(0xCuLL);
  *(_QWORD *)result = v2;
  result[2] = v4;
  *a1 = result;
  a1[1] = sub_20BF783AC;
  a1[2] = &stru_24C51C180;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2i>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2i>();
  result = operator new(8uLL);
  *result = v2;
  *a1 = result;
  a1[1] = sub_20BF783B8;
  a1[2] = &stru_24C51C140;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4h>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4h>();
  result = operator new(8uLL);
  *result = v2;
  *a1 = result;
  a1[1] = sub_20BF783C4;
  a1[2] = &stru_24C51C1B0;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3h>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _WORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3h>();
  result = operator new(6uLL);
  result[2] = WORD2(v2);
  *(_DWORD *)result = v2;
  *a1 = result;
  a1[1] = sub_20BF783D0;
  a1[2] = &stru_24C51C170;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2h>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  int v2;
  _DWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2h>();
  result = operator new(4uLL);
  *result = v2;
  *a1 = result;
  a1[1] = sub_20BF783DC;
  a1[2] = &stru_24C51C130;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4f>::Invoke@<X0>(float **a1@<X8>)
{
  float v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4f>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (float *)operator new(0x10uLL);
  *result = v2;
  *((_DWORD *)result + 1) = v4;
  *((_DWORD *)result + 2) = v6;
  *((_DWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (float *)sub_20BF783E8;
  a1[2] = (float *)&stru_24C51C1A0;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3f>::Invoke@<X0>(float **a1@<X8>)
{
  float v2;
  int v3;
  int v4;
  int v5;
  int v6;
  float *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  v4 = v3;
  v6 = v5;
  result = (float *)operator new(0xCuLL);
  *result = v2;
  *((_DWORD *)result + 1) = v4;
  *((_DWORD *)result + 2) = v6;
  *a1 = result;
  a1[1] = (float *)sub_20BF783F4;
  a1[2] = (float *)&stru_24C51C160;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2f>::Invoke@<X0>(float **a1@<X8>)
{
  float v2;
  int v3;
  int v4;
  float *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  v4 = v3;
  result = (float *)operator new(8uLL);
  *result = v2;
  *((_DWORD *)result + 1) = v4;
  *a1 = result;
  a1[1] = (float *)sub_20BF78400;
  a1[2] = (float *)&stru_24C51C120;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4d>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (double *)operator new(0x20uLL);
  *result = v2;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v6;
  *((_QWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_20BF7840C;
  a1[2] = (double *)&stru_24C51C190;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3d>();
  v4 = v3;
  v6 = v5;
  result = (double *)operator new(0x18uLL);
  *result = v2;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v6;
  *a1 = result;
  a1[1] = (double *)sub_20BF78418;
  a1[2] = (double *)&stru_24C51C150;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  double *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2d>();
  v4 = v3;
  result = (double *)operator new(0x10uLL);
  *result = v2;
  *((_QWORD *)result + 1) = v4;
  *a1 = result;
  a1[1] = (double *)sub_20BF78424;
  a1[2] = (double *)&stru_24C51C110;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::Invoke@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((uint64_t)v6);
  v2 = operator new(0x40uLL);
  v3 = v6[1];
  *v2 = v6[0];
  v2[1] = v3;
  result = *(double *)&v7;
  v5 = v8;
  v2[2] = v7;
  v2[3] = v5;
  *a1 = v2;
  a1[1] = sub_20BF78430;
  a1[2] = &stru_24C51BFD0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::Invoke@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  int v6;

  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((uint64_t)v5);
  v2 = operator new(0x24uLL);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  *((_DWORD *)v2 + 8) = v6;
  *a1 = v2;
  a1[1] = sub_20BF7843C;
  a1[2] = &stru_24C51BFB0;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2f>::Invoke@<X0>(float **a1@<X8>)
{
  float v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2f>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (float *)operator new(0x10uLL);
  *result = v2;
  *((_DWORD *)result + 1) = v4;
  *((_DWORD *)result + 2) = v6;
  *((_DWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (float *)sub_20BF78448;
  a1[2] = (float *)&stru_24C51BFA0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Invoke@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t)v8);
  v2 = operator new(0x80uLL);
  v3 = v12;
  v2[4] = v11;
  v2[5] = v3;
  v4 = v14;
  v2[6] = v13;
  v2[7] = v4;
  v5 = v8[1];
  *v2 = v8[0];
  v2[1] = v5;
  result = *(double *)&v9;
  v7 = v10;
  v2[2] = v9;
  v2[3] = v7;
  *a1 = v2;
  a1[1] = sub_20BF78454;
  a1[2] = &stru_24C51BFE0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Invoke@<Q0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  __n128 result;
  _OWORD v5[4];
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((uint64_t)v5);
  v2 = operator new(0x48uLL);
  v3 = v5[3];
  v2[2] = v5[2];
  v2[3] = v3;
  *((_QWORD *)v2 + 8) = v6;
  result = (__n128)v5[1];
  *v2 = v5[0];
  v2[1] = result;
  *a1 = v2;
  a1[1] = sub_20BF78460;
  a1[2] = &stru_24C51BFC0;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2d>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (double *)operator new(0x20uLL);
  *result = v2;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v6;
  *((_QWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_20BF7846C;
  a1[2] = (double *)&stru_24C51BF90;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuath>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuath>();
  result = operator new(8uLL);
  *result = v2;
  *a1 = result;
  a1[1] = sub_20BF78478;
  a1[2] = &stru_24C51C030;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatf>::Invoke@<X0>(float **a1@<X8>)
{
  float v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatf>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (float *)operator new(0x10uLL);
  *result = v2;
  *((_DWORD *)result + 1) = v4;
  *((_DWORD *)result + 2) = v6;
  *((_DWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (float *)sub_20BF78484;
  a1[2] = (float *)&stru_24C51C020;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatd>::Invoke@<X0>(double **a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatd>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (double *)operator new(0x20uLL);
  *result = v2;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v6;
  *((_QWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_20BF78490;
  a1[2] = (double *)&stru_24C51C010;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuaternion>::Invoke@<X0>(double **a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuaternion>();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  result = (double *)operator new(0x20uLL);
  *result = v2;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v6;
  *((_QWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_20BF7849C;
  a1[2] = (double *)&stru_24C51C040;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfDualQuath>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;

  v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuath>();
  v4 = v3;
  result = operator new(0x10uLL);
  *result = v2;
  result[1] = v4;
  *a1 = result;
  a1[1] = sub_20BF784A8;
  a1[2] = &stru_24C51BF00;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfDualQuatf>::Invoke@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatf>(v5);
  v2 = operator new(0x20uLL);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  *a1 = v2;
  a1[1] = sub_20BF784B4;
  a1[2] = &stru_24C51BEF0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfDualQuatd>::Invoke@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatd>(v6);
  v2 = operator new(0x40uLL);
  v3 = v6[1];
  *v2 = v6[0];
  v2[1] = v3;
  result = *(double *)&v7;
  v5 = v8;
  v2[2] = v7;
  v2[3] = v5;
  *a1 = v2;
  a1[1] = sub_20BF784C0;
  a1[2] = &stru_24C51BEE0;
  return result;
}

_QWORD *sub_20BF6C3F4(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v4;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  _QWORD v7[4];
  char v8;
  int v9;

  *a1 = &unk_24C51FB80;
  sub_20BF6ED0C((uint64_t)(a1 + 1), 8uLL, v7);
  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  while (__stlxr((unint64_t)a1, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance));
  if (v3)
  {
    v7[0] = "tf/instantiateSingleton.h";
    v7[1] = "SetInstanceConstructed";
    v7[2] = 56;
    v7[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  sub_20BF6C4C8();
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v4);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C520870);
  return a1;
}

void sub_20BF6C4B4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  sub_20BF77694(v2, a2);
  _Unwind_Resume(a1);
}

void sub_20BF6C4C8()
{
  uint64_t Instance;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(Instance, MEMORY[0x24BEDB770], MEMORY[0x24BEDB778], (uint64_t)sub_20BF6F120);
  v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v1)
    v1 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v1, MEMORY[0x24BEDB778], MEMORY[0x24BEDB770], (uint64_t)sub_20BF6F16C);
  v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v2)
    v2 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v2, MEMORY[0x24BEDB770], MEMORY[0x24BEDB768], (uint64_t)sub_20BF6F558);
  v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v3)
    v3 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v3, MEMORY[0x24BEDB768], MEMORY[0x24BEDB770], (uint64_t)sub_20BF6F5A4);
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v4)
    v4 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v4, MEMORY[0x24BEDB770], MEMORY[0x24BEDB790], (uint64_t)sub_20BF6F768);
  v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v5)
    v5 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v5, MEMORY[0x24BEDB790], MEMORY[0x24BEDB770], (uint64_t)sub_20BF6F7B4);
  v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v6, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF6F970);
  v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v7, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB770], (uint64_t)sub_20BF6F9BC);
  v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v8, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF6FB8C);
  v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v9, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB770], (uint64_t)sub_20BF6FBD8);
  v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v10, MEMORY[0x24BEDB770], MEMORY[0x24BEDB798], (uint64_t)sub_20BF6FDA0);
  v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v11)
    v11 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v11, MEMORY[0x24BEDB798], MEMORY[0x24BEDB770], (uint64_t)sub_20BF6FDEC);
  v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v12, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF6FFBC);
  v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v13, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB770], (uint64_t)sub_20BF70008);
  v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v14, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF701D0);
  v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v15)
    v15 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v15, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB770], (uint64_t)sub_20BF70218);
  v16 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v16, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF703E4);
  v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v17)
    v17 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v17, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB770], (uint64_t)sub_20BF7042C);
  v18 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v18)
    v18 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v18, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF705F0);
  v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v19)
    v19 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v19, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB770], (uint64_t)sub_20BF70638);
  v20 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v20)
    v20 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v20, MEMORY[0x24BEDB770], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF70804);
  v21 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v21)
    v21 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v21, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB770], (uint64_t)sub_20BF7084C);
  v22 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v22)
    v22 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v22, MEMORY[0x24BEDB770], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF70A10);
  v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v23, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB770], (uint64_t)sub_20BF70B0C);
  v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v24)
    v24 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v24, MEMORY[0x24BEDB770], MEMORY[0x24BEDB788], (uint64_t)sub_20BF70E08);
  v25 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v25)
    v25 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v25, MEMORY[0x24BEDB788], MEMORY[0x24BEDB770], (uint64_t)sub_20BF70E64);
  v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v26)
    v26 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v26, MEMORY[0x24BEDB770], MEMORY[0x24BEDB780], (uint64_t)sub_20BF71058);
  v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v27)
    v27 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v27, MEMORY[0x24BEDB780], MEMORY[0x24BEDB770], (uint64_t)sub_20BF710B4);
  v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v28)
    v28 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v28, MEMORY[0x24BEDB778], MEMORY[0x24BEDB768], (uint64_t)sub_20BF712A8);
  v29 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v29)
    v29 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v29, MEMORY[0x24BEDB768], MEMORY[0x24BEDB778], (uint64_t)sub_20BF712F4);
  v30 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v30)
    v30 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v30, MEMORY[0x24BEDB778], MEMORY[0x24BEDB790], (uint64_t)sub_20BF71340);
  v31 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v31)
    v31 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v31, MEMORY[0x24BEDB790], MEMORY[0x24BEDB778], (uint64_t)sub_20BF713BC);
  v32 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v32)
    v32 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v32, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF7143C);
  v33 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v33)
    v33 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v33, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71488);
  v34 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v34)
    v34 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v34, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF71514);
  v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v35)
    v35 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v35, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71594);
  v36 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v36)
    v36 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v36, MEMORY[0x24BEDB778], MEMORY[0x24BEDB798], (uint64_t)sub_20BF71618);
  v37 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v37)
    v37 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v37, MEMORY[0x24BEDB798], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71664);
  v38 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v38)
    v38 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v38, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF716F0);
  v39 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v39)
    v39 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v39, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71770);
  v40 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v40)
    v40 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v40, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF717F4);
  v41 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v41)
    v41 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v41, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB778], (uint64_t)sub_20BF7183C);
  v42 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v42)
    v42 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v42, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF718C8);
  v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v43)
    v43 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v43, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71944);
  v44 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v44)
    v44 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v44, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF719C8);
  v45 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v45)
    v45 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v45, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71A10);
  v46 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v46)
    v46 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v46, MEMORY[0x24BEDB778], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF71A9C);
  v47 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v47)
    v47 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v47, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71B18);
  v48 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v48)
    v48 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v48, MEMORY[0x24BEDB778], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF71B9C);
  v49 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v49)
    v49 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v49, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB778], (uint64_t)sub_20BF71C98);
  v50 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v50)
    v50 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v50, MEMORY[0x24BEDB778], MEMORY[0x24BEDB788], (uint64_t)sub_20BF71D80);
  v51 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v51)
    v51 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v51, MEMORY[0x24BEDB788], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71DD0);
  v52 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v52)
    v52 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v52, MEMORY[0x24BEDB778], MEMORY[0x24BEDB780], (uint64_t)sub_20BF71EA0);
  v53 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v53)
    v53 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v53, MEMORY[0x24BEDB780], MEMORY[0x24BEDB778], (uint64_t)sub_20BF71EF0);
  v54 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v54)
    v54 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v54, MEMORY[0x24BEDB768], MEMORY[0x24BEDB790], (uint64_t)sub_20BF71FC4);
  v55 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v55)
    v55 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v55, MEMORY[0x24BEDB790], MEMORY[0x24BEDB768], (uint64_t)sub_20BF72040);
  v56 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v56)
    v56 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v56, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF720C0);
  v57 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v57)
    v57 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v57, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB768], (uint64_t)sub_20BF7210C);
  v58 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v58)
    v58 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v58, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF72198);
  v59 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v59)
    v59 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v59, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB768], (uint64_t)sub_20BF72218);
  v60 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v60)
    v60 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v60, MEMORY[0x24BEDB768], MEMORY[0x24BEDB798], (uint64_t)sub_20BF7229C);
  v61 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v61)
    v61 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v61, MEMORY[0x24BEDB798], MEMORY[0x24BEDB768], (uint64_t)sub_20BF722E8);
  v62 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v62)
    v62 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v62, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF72374);
  v63 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v63)
    v63 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v63, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB768], (uint64_t)sub_20BF723F4);
  v64 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v64)
    v64 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v64, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF72478);
  v65 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v65)
    v65 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v65, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB768], (uint64_t)sub_20BF724C0);
  v66 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v66)
    v66 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v66, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF7254C);
  v67 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v67)
    v67 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v67, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB768], (uint64_t)sub_20BF725C8);
  v68 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v68)
    v68 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v68, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF7264C);
  v69 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v69)
    v69 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v69, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB768], (uint64_t)sub_20BF72694);
  v70 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v70)
    v70 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v70, MEMORY[0x24BEDB768], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF72720);
  v71 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v71)
    v71 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v71, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB768], (uint64_t)sub_20BF7279C);
  v72 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v72)
    v72 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v72, MEMORY[0x24BEDB768], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF72820);
  v73 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v73)
    v73 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v73, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB768], (uint64_t)sub_20BF7291C);
  v74 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v74)
    v74 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v74, MEMORY[0x24BEDB768], MEMORY[0x24BEDB788], (uint64_t)sub_20BF729AC);
  v75 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v75)
    v75 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v75, MEMORY[0x24BEDB788], MEMORY[0x24BEDB768], (uint64_t)sub_20BF729FC);
  v76 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v76)
    v76 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v76, MEMORY[0x24BEDB768], MEMORY[0x24BEDB780], (uint64_t)sub_20BF72A6C);
  v77 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v77)
    v77 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v77, MEMORY[0x24BEDB780], MEMORY[0x24BEDB768], (uint64_t)sub_20BF72ABC);
  v78 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v78)
    v78 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v78, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF72B2C);
  v79 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v79)
    v79 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v79, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB790], (uint64_t)sub_20BF72B78);
  v80 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v80)
    v80 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v80, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF72C04);
  v81 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v81)
    v81 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v81, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB790], (uint64_t)sub_20BF72C50);
  v82 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v82)
    v82 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v82, MEMORY[0x24BEDB790], MEMORY[0x24BEDB798], (uint64_t)sub_20BF72CD4);
  v83 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v83)
    v83 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v83, MEMORY[0x24BEDB798], MEMORY[0x24BEDB790], (uint64_t)sub_20BF72D20);
  v84 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v84)
    v84 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v84, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF72DAC);
  v85 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v85)
    v85 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v85, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB790], (uint64_t)sub_20BF72DF8);
  v86 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v86)
    v86 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v86, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF72E7C);
  v87 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v87)
    v87 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v87, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB790], (uint64_t)sub_20BF72EC4);
  v88 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v88)
    v88 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v88, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF72F50);
  v89 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v89)
    v89 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v89, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB790], (uint64_t)sub_20BF72F98);
  v90 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v90)
    v90 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v90, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF7301C);
  v91 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v91)
    v91 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v91, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB790], (uint64_t)sub_20BF73064);
  v92 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v92)
    v92 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v92, MEMORY[0x24BEDB790], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF730F0);
  v93 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v93)
    v93 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v93, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB790], (uint64_t)sub_20BF73138);
  v94 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v94)
    v94 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v94, MEMORY[0x24BEDB790], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF731BC);
  v95 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v95)
    v95 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v95, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB790], (uint64_t)sub_20BF732B4);
  v96 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v96)
    v96 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v96, MEMORY[0x24BEDB790], MEMORY[0x24BEDB788], (uint64_t)sub_20BF7339C);
  v97 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v97)
    v97 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v97, MEMORY[0x24BEDB788], MEMORY[0x24BEDB790], (uint64_t)sub_20BF733EC);
  v98 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v98)
    v98 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v98, MEMORY[0x24BEDB790], MEMORY[0x24BEDB780], (uint64_t)sub_20BF734BC);
  v99 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v99)
    v99 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v99, MEMORY[0x24BEDB780], MEMORY[0x24BEDB790], (uint64_t)sub_20BF7350C);
  v100 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v100)
    v100 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v100, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF735DC);
  v101 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v101)
    v101 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v101, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73658);
  v102 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v102)
    v102 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v102, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB798], (uint64_t)sub_20BF736D8);
  v103 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v103)
    v103 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v103, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73724);
  v104 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v104)
    v104 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v104, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF737B4);
  v105 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v105)
    v105 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v105, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73834);
  v106 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v106)
    v106 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v106, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF738B8);
  v107 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v107)
    v107 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v107, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73900);
  v108 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v108)
    v108 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v108, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF73990);
  v109 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v109)
    v109 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v109, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73A0C);
  v110 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v110)
    v110 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v110, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF73A90);
  v111 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v111)
    v111 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v111, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73AD8);
  v112 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v112)
    v112 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v112, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF73B68);
  v113 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v113)
    v113 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v113, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73BE4);
  v114 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v114)
    v114 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v114, MEMORY[0x24BEDB7B8], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF73C68);
  v115 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v115)
    v115 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v115, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73D64);
  v116 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v116)
    v116 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v116, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB788], (uint64_t)sub_20BF73DF4);
  v117 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v117)
    v117 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v117, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73E44);
  v118 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v118)
    v118 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v118, MEMORY[0x24BEDB7B8], MEMORY[0x24BEDB780], (uint64_t)sub_20BF73F14);
  v119 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v119)
    v119 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v119, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7B8], (uint64_t)sub_20BF73F64);
  v120 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v120)
    v120 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v120, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74038);
  v121 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v121)
    v121 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v121, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF74084);
  v122 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v122)
    v122 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v122, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF74110);
  v123 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v123)
    v123 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v123, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF7415C);
  v124 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v124)
    v124 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v124, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF741E0);
  v125 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v125)
    v125 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v125, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF74228);
  v126 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v126)
    v126 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v126, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF742B4);
  v127 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v127)
    v127 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v127, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF742FC);
  v128 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v128)
    v128 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v128, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF74380);
  v129 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v129)
    v129 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v129, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF743C8);
  v130 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v130)
    v130 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v130, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF74454);
  v131 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v131)
    v131 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v131, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF7449C);
  v132 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v132)
    v132 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v132, MEMORY[0x24BEDB7C0], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF74520);
  v133 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v133)
    v133 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v133, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF74618);
  v134 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v134)
    v134 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v134, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB788], (uint64_t)sub_20BF746A8);
  v135 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v135)
    v135 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v135, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF746F8);
  v136 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v136)
    v136 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v136, MEMORY[0x24BEDB7C0], MEMORY[0x24BEDB780], (uint64_t)sub_20BF747C8);
  v137 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v137)
    v137 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v137, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7C0], (uint64_t)sub_20BF74818);
  v138 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v138)
    v138 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v138, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF748E8);
  v139 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v139)
    v139 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v139, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74964);
  v140 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v140)
    v140 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v140, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF749E4);
  v141 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v141)
    v141 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v141, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74A2C);
  v142 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v142)
    v142 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v142, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF74AC0);
  v143 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v143)
    v143 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v143, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74B38);
  v144 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v144)
    v144 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v144, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF74BBC);
  v145 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v145)
    v145 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v145, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74C04);
  v146 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v146)
    v146 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v146, MEMORY[0x24BEDB798], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF74C98);
  v147 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v147)
    v147 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v147, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74D10);
  v148 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v148)
    v148 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v148, MEMORY[0x24BEDB798], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF74D94);
  v149 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v149)
    v149 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v149, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB798], (uint64_t)sub_20BF74E8C);
  v150 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v150)
    v150 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v150, MEMORY[0x24BEDB798], MEMORY[0x24BEDB788], (uint64_t)sub_20BF74F1C);
  v151 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v151)
    v151 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v151, MEMORY[0x24BEDB788], MEMORY[0x24BEDB798], (uint64_t)sub_20BF74F6C);
  v152 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v152)
    v152 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v152, MEMORY[0x24BEDB798], MEMORY[0x24BEDB780], (uint64_t)sub_20BF7501C);
  v153 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v153)
    v153 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v153, MEMORY[0x24BEDB780], MEMORY[0x24BEDB798], (uint64_t)sub_20BF7506C);
  v154 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v154)
    v154 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v154, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF75124);
  v155 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v155)
    v155 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v155, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF7516C);
  v156 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v156)
    v156 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v156, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF751FC);
  v157 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v157)
    v157 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v157, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF75244);
  v158 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v158)
    v158 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v158, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF752CC);
  v159 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v159)
    v159 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v159, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF75314);
  v160 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v160)
    v160 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v160, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF753A4);
  v161 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v161)
    v161 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v161, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF753EC);
  v162 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v162)
    v162 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v162, MEMORY[0x24BEDB7A0], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF75474);
  v163 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v163)
    v163 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v163, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF7556C);
  v164 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v164)
    v164 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v164, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB788], (uint64_t)sub_20BF755FC);
  v165 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v165)
    v165 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v165, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF7564C);
  v166 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v166)
    v166 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v166, MEMORY[0x24BEDB7A0], MEMORY[0x24BEDB780], (uint64_t)sub_20BF75700);
  v167 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v167)
    v167 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v167, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7A0], (uint64_t)sub_20BF75750);
  v168 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v168)
    v168 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v168, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF75804);
  v169 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v169)
    v169 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v169, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF7587C);
  v170 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v170)
    v170 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v170, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF758F8);
  v171 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v171)
    v171 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v171, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF75940);
  v172 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v172)
    v172 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v172, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF75988);
  v173 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v173)
    v173 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v173, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF75A00);
  v174 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v174)
    v174 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v174, MEMORY[0x24BEDB7A8], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF75A7C);
  v175 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v175)
    v175 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v175, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF75B74);
  v176 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v176)
    v176 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v176, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB788], (uint64_t)sub_20BF75C58);
  v177 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v177)
    v177 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v177, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF75CA8);
  v178 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v178)
    v178 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v178, MEMORY[0x24BEDB7A8], MEMORY[0x24BEDB780], (uint64_t)sub_20BF75D54);
  v179 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v179)
    v179 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v179, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7A8], (uint64_t)sub_20BF75DA4);
  v180 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v180)
    v180 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v180, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF75E58);
  v181 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v181)
    v181 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v181, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF75ED4);
  v182 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v182)
    v182 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v182, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF75F4C);
  v183 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v183)
    v183 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v183, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF75F94);
  v184 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v184)
    v184 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v184, MEMORY[0x24BEDB7B0], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF75FDC);
  v185 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v185)
    v185 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v185, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF760D4);
  v186 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v186)
    v186 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v186, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB788], (uint64_t)sub_20BF761B8);
  v187 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v187)
    v187 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v187, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF76208);
  v188 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v188)
    v188 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v188, MEMORY[0x24BEDB7B0], MEMORY[0x24BEDB780], (uint64_t)sub_20BF762B8);
  v189 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v189)
    v189 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v189, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7B0], (uint64_t)sub_20BF76308);
  v190 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v190)
    v190 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v190, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF763B8);
  v191 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v191)
    v191 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v191, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF76430);
  v192 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v192)
    v192 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v192, MEMORY[0x24BEDB7D0], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF764AC);
  v193 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v193)
    v193 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v193, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF765A4);
  v194 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v194)
    v194 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v194, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB788], (uint64_t)sub_20BF76630);
  v195 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v195)
    v195 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v195, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF76680);
  v196 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v196)
    v196 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v196, MEMORY[0x24BEDB7D0], MEMORY[0x24BEDB780], (uint64_t)sub_20BF7672C);
  v197 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v197)
    v197 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v197, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7D0], (uint64_t)sub_20BF7677C);
  v198 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v198)
    v198 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v198, MEMORY[0x24BEDB7D8], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF76830);
  v199 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v199)
    v199 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v199, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF76928);
  v200 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v200)
    v200 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v200, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB788], (uint64_t)sub_20BF769B4);
  v201 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v201)
    v201 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v201, MEMORY[0x24BEDB788], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF76A04);
  v202 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v202)
    v202 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v202, MEMORY[0x24BEDB7D8], MEMORY[0x24BEDB780], (uint64_t)sub_20BF76AB4);
  v203 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v203)
    v203 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v203, MEMORY[0x24BEDB780], MEMORY[0x24BEDB7D8], (uint64_t)sub_20BF76B04);
  v204 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v204)
    v204 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v204, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB788], (uint64_t)sub_20BF76BB4);
  v205 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v205)
    v205 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v205, MEMORY[0x24BEDB788], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF76C44);
  v206 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v206)
    v206 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v206, (uint64_t)&stru_24C51BF30, MEMORY[0x24BEDB780], (uint64_t)sub_20BF76D88);
  v207 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v207)
    v207 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v207, MEMORY[0x24BEDB780], (uint64_t)&stru_24C51BF30, (uint64_t)sub_20BF76E1C);
  v208 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v208)
    v208 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v208, MEMORY[0x24BEDB788], MEMORY[0x24BEDB780], (uint64_t)sub_20BF76F6C);
  v209 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v209)
    v209 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v209, MEMORY[0x24BEDB780], MEMORY[0x24BEDB788], (uint64_t)sub_20BF76FF4);
  v210 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v210)
    v210 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v210, (uint64_t)&stru_24C51BCE0, (uint64_t)&stru_24C516910, (uint64_t)sub_20BF6F01C);
  v211 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v211)
    v211 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  sub_20BF6ADE4(v211, (uint64_t)&stru_24C516910, (uint64_t)&stru_24C51BCE0, (uint64_t)sub_20BF6F07C);
}

_QWORD *sub_20BF6ECA4(_QWORD *a1, void *a2)
{
  *a1 = &unk_24C51FB80;
  sub_20BF77694((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_20BF6ECD8(_QWORD *a1, void *a2)
{
  *a1 = &unk_24C51FB80;
  sub_20BF77694((uint64_t)(a1 + 1), a2);
  operator delete(a1);
}

uint64_t sub_20BF6ED0C(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  v5[8] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  sub_20BF6EE60(a1, 0, &v11);
  return a1;
}

void sub_20BF6EE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF6EF2C(v1 + 16);
  _Unwind_Resume(a1);
}

void sub_20BF6EE60(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  void *v13;
  unint64_t v15;
  unint64_t v16;

  v6 = sub_20BEB4B94(a2);
  v7 = v6;
  v8 = a1 + 8 * v6;
  v10 = *(_QWORD *)(v8 + 48);
  v9 = (unint64_t *)(v8 + 48);
  __dmb(0xBu);
  if (!v10)
  {
    if (v6)
      v11 = 8 << v6;
    else
      v11 = 16;
    v12 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)v11);
    bzero(v12, v11);
    do
    {
      while (!__ldaxr(v9))
      {
        if (!__stlxr((unint64_t)v12, v9))
          goto LABEL_12;
      }
      __clrex();
      do
        v15 = __ldxr(v9);
      while (__stxr(v15, v9));
    }
    while (!v15);
    tbb::internal::deallocate_via_handler_v3((uint64_t)v12, v13);
  }
LABEL_12:
  v16 = *v9;
  __dmb(0xBu);
  *(_QWORD *)(v16 + 8 * (a2 - ((1 << v7) & 0x1FFFFFFFFFFFFFFELL))) = *a3;
}

uint64_t sub_20BF6EF2C(uint64_t a1)
{
  tbb::internal *v2;

  sub_20BF6EF64(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  sub_20BF6EFA8(a1, v2);
  return a1;
}

uint64_t sub_20BF6EF64(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = sub_20BF6EFA8(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_20BF6EFA8(uint64_t a1, tbb::internal *this)
{
  if ((*((_BYTE *)this + 64) & 1) != 0)
    sub_20BF6EFD8(a1, (uint64_t)this);
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

void sub_20BF6EFD8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

unsigned int *sub_20BF6F01C@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *EmptyString;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  *(_QWORD *)(a2 + 8) = &off_24C520700;
  return sub_20BF77444((unsigned int **)a2, (uint64_t)EmptyString);
}

uint64_t sub_20BF6F07C@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    (*(void (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
  v5 = v10;
  *a2 = v10;
  a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *a2 = v6;
  }
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

uint64_t sub_20BF6F120@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
  return result;
}

void sub_20BF6F16C(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (v4 < 0)
    v5 = 1;
  else
    v5 = 2 * (v4 > 1);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

void sub_20BF6F200(uint64_t a1, int a2)
{
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  if (a2 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20BF6F290(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C51FBD0, (void (*)(void *))std::exception::~exception);
  }
  if (a2 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_20BF6F268(v4);
    __cxa_throw(v5, (struct type_info *)&unk_24C51FBB8, (void (*)(void *))std::exception::~exception);
  }
}

std::bad_cast *sub_20BF6F268(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&unk_24C51FBF8;
  return result;
}

std::bad_cast *sub_20BF6F290(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&unk_24C51FC20;
  return result;
}

void sub_20BF6F2B8(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

const char *sub_20BF6F2CC()
{
  return "bad numeric conversion: negative overflow";
}

void sub_20BF6F2D8(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

const char *sub_20BF6F2EC()
{
  return "bad numeric conversion: positive overflow";
}

_BYTE *sub_20BF6F2F8(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_20BF6F308(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6F314()
{
  return 1;
}

unint64_t sub_20BF6F31C(char *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6F33C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6F350(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6F368()
{
  return 0;
}

uint64_t sub_20BF6F378()
{
  return MEMORY[0x24BEDB778];
}

uint64_t sub_20BF6F384()
{
  return 0;
}

uint64_t sub_20BF6F38C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6F398()
{
  return 0;
}

uint64_t sub_20BF6F3A0()
{
  return 0;
}

BOOL sub_20BF6F3A8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB778] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6F3DC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB778], a2, a3);
}

uint64_t sub_20BF6F3FC()
{
  return MEMORY[0x24BEDB778];
}

_BYTE *sub_20BF6F40C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = *result;
  return result;
}

_BYTE *sub_20BF6F428(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_20BF6F438(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6F444()
{
  return 1;
}

unint64_t sub_20BF6F44C(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6F46C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6F480(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6F498()
{
  return 0;
}

uint64_t sub_20BF6F4A8()
{
  return MEMORY[0x24BEDB770];
}

uint64_t sub_20BF6F4B4()
{
  return 0;
}

uint64_t sub_20BF6F4BC()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6F4C8()
{
  return 0;
}

uint64_t sub_20BF6F4D0()
{
  return 0;
}

BOOL sub_20BF6F4D8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6F50C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], a2, a3);
}

uint64_t sub_20BF6F52C()
{
  return MEMORY[0x24BEDB770];
}

_BYTE *sub_20BF6F53C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = *result;
  return result;
}

uint64_t sub_20BF6F558@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
  return result;
}

void sub_20BF6F5A4(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (v4 < 0)
    v5 = 1;
  else
    v5 = 2 * (v4 > 1);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_BYTE *sub_20BF6F638(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_20BF6F648(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6F654()
{
  return 1;
}

unint64_t sub_20BF6F65C(char *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6F67C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6F690(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6F6A8()
{
  return 0;
}

uint64_t sub_20BF6F6B8()
{
  return MEMORY[0x24BEDB768];
}

uint64_t sub_20BF6F6C4()
{
  return 0;
}

uint64_t sub_20BF6F6CC()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6F6D8()
{
  return 0;
}

uint64_t sub_20BF6F6E0()
{
  return 0;
}

BOOL sub_20BF6F6E8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB768] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6F71C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB768], a2, a3);
}

uint64_t sub_20BF6F73C()
{
  return MEMORY[0x24BEDB768];
}

_BYTE *sub_20BF6F74C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = *result;
  return result;
}

uint64_t sub_20BF6F768@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
  return result;
}

void sub_20BF6F7B4(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (v4 > 1));
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_BYTE *sub_20BF6F840(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_20BF6F850(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6F85C()
{
  return 1;
}

unint64_t sub_20BF6F864(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6F884(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6F898(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6F8B0()
{
  return 0;
}

uint64_t sub_20BF6F8C0()
{
  return MEMORY[0x24BEDB790];
}

uint64_t sub_20BF6F8CC()
{
  return 0;
}

uint64_t sub_20BF6F8D4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6F8E0()
{
  return 0;
}

uint64_t sub_20BF6F8E8()
{
  return 0;
}

BOOL sub_20BF6F8F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB790] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6F924(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], a2, a3);
}

uint64_t sub_20BF6F944()
{
  return MEMORY[0x24BEDB790];
}

_BYTE *sub_20BF6F954@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = *result;
  return result;
}

unsigned __int8 *sub_20BF6F970@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_20BF6F9BC(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (v4 < 0)
    v5 = 1;
  else
    v5 = 2 * (v4 > 1);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_WORD *sub_20BF6FA50(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_20BF6FA60(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6FA6C()
{
  return 1;
}

unint64_t sub_20BF6FA74(__int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6FA94(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6FAA8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6FAC0()
{
  return 0;
}

uint64_t sub_20BF6FACC()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF6FADC()
{
  return MEMORY[0x24BEDB7B8];
}

uint64_t sub_20BF6FAE8()
{
  return 0;
}

uint64_t sub_20BF6FAF0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6FAFC()
{
  return 0;
}

uint64_t sub_20BF6FB04()
{
  return 0;
}

BOOL sub_20BF6FB0C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7B8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6FB40(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7B8], a2, a3);
}

uint64_t sub_20BF6FB60()
{
  return MEMORY[0x24BEDB7B8];
}

_WORD *sub_20BF6FB70@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_20BF6FB8C@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_20BF6FBD8(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (v4 > 1));
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_WORD *sub_20BF6FC64(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_20BF6FC74(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6FC80()
{
  return 1;
}

unint64_t sub_20BF6FC88(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6FCA8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6FCBC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6FCD4()
{
  return 0;
}

uint64_t sub_20BF6FCE0()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF6FCF0()
{
  return MEMORY[0x24BEDB7C0];
}

uint64_t sub_20BF6FCFC()
{
  return 0;
}

uint64_t sub_20BF6FD04()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6FD10()
{
  return 0;
}

uint64_t sub_20BF6FD18()
{
  return 0;
}

BOOL sub_20BF6FD20(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6FD54(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7C0], a2, a3);
}

uint64_t sub_20BF6FD74()
{
  return MEMORY[0x24BEDB7C0];
}

_WORD *sub_20BF6FD84@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_20BF6FDA0@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF6FDEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*(_DWORD *)a1 > 1);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_DWORD *sub_20BF6FE80(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20BF6FE90(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF6FE9C()
{
  return 1;
}

unint64_t sub_20BF6FEA4(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF6FEC4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF6FED8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF6FEF0()
{
  return 0;
}

uint64_t sub_20BF6FEFC()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF6FF0C()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_20BF6FF18()
{
  return 0;
}

uint64_t sub_20BF6FF20()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF6FF2C()
{
  return 0;
}

uint64_t sub_20BF6FF34()
{
  return 0;
}

BOOL sub_20BF6FF3C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF6FF70(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2, a3);
}

uint64_t sub_20BF6FF90()
{
  return MEMORY[0x24BEDB798];
}

_DWORD *sub_20BF6FFA0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_20BF6FFBC@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF70008(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 1u));
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_DWORD *sub_20BF70094(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20BF700A4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF700B0()
{
  return 1;
}

unint64_t sub_20BF700B8(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF700D8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF700EC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF70104()
{
  return 0;
}

uint64_t sub_20BF70110()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF70120()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_20BF7012C()
{
  return 0;
}

uint64_t sub_20BF70134()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70140()
{
  return 0;
}

uint64_t sub_20BF70148()
{
  return 0;
}

BOOL sub_20BF70150(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF70184(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], a2, a3);
}

uint64_t sub_20BF701A4()
{
  return MEMORY[0x24BEDB7A0];
}

_DWORD *sub_20BF701B4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_20BF701D0@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF70218(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 1);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_QWORD *sub_20BF702AC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF702BC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF702C8()
{
  return 1;
}

unint64_t sub_20BF702D0(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF702F0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF70304(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF7031C()
{
  return 0;
}

uint64_t sub_20BF70328()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF70338()
{
  return MEMORY[0x24BEDB7A8];
}

uint64_t sub_20BF70344()
{
  return 0;
}

uint64_t sub_20BF7034C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70358()
{
  return 0;
}

uint64_t sub_20BF70360()
{
  return 0;
}

BOOL sub_20BF70368(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF7039C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A8], a2, a3);
}

uint64_t sub_20BF703BC()
{
  return MEMORY[0x24BEDB7A8];
}

_QWORD *sub_20BF703CC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

unsigned __int8 *sub_20BF703E4@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5202B3;
  return result;
}

void sub_20BF7042C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 1));
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_QWORD *sub_20BF704B8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF704C8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF704D4()
{
  return 1;
}

unint64_t sub_20BF704DC(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF704FC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF70510(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF70528()
{
  return 0;
}

uint64_t sub_20BF70534()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF70544()
{
  return MEMORY[0x24BEDB7B0];
}

uint64_t sub_20BF70550()
{
  return 0;
}

uint64_t sub_20BF70558()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70564()
{
  return 0;
}

uint64_t sub_20BF7056C()
{
  return 0;
}

BOOL sub_20BF70574(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7B0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF705A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7B0], a2, a3);
}

uint64_t sub_20BF705C8()
{
  return MEMORY[0x24BEDB7B0];
}

_QWORD *sub_20BF705D8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24C5202B3;
  return result;
}

unsigned __int8 *sub_20BF705F0@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF70638(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 1);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_QWORD *sub_20BF706CC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF706DC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF706E8()
{
  return 1;
}

unint64_t sub_20BF706F0(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF70710(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF70724(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF7073C()
{
  return 0;
}

uint64_t sub_20BF70748()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF70758()
{
  return MEMORY[0x24BEDB7D0];
}

uint64_t sub_20BF70764()
{
  return 0;
}

uint64_t sub_20BF7076C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70778()
{
  return 0;
}

uint64_t sub_20BF70780()
{
  return 0;
}

BOOL sub_20BF70788(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF707BC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D0], a2, a3);
}

uint64_t sub_20BF707DC()
{
  return MEMORY[0x24BEDB7D0];
}

_QWORD *sub_20BF707EC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

unsigned __int8 *sub_20BF70804@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C520423;
  return result;
}

void sub_20BF7084C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 1));
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v4 != 0;
}

_QWORD *sub_20BF708D8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_20BF708E8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF708F4()
{
  return 1;
}

unint64_t sub_20BF708FC(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF7091C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF70930(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF70948()
{
  return 0;
}

uint64_t sub_20BF70954()
{
  return std::ostream::operator<<();
}

uint64_t sub_20BF70964()
{
  return MEMORY[0x24BEDB7D8];
}

uint64_t sub_20BF70970()
{
  return 0;
}

uint64_t sub_20BF70978()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70984()
{
  return 0;
}

uint64_t sub_20BF7098C()
{
  return 0;
}

BOOL sub_20BF70994(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF709C8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D8], a2, a3);
}

uint64_t sub_20BF709E8()
{
  return MEMORY[0x24BEDB7D8];
}

_QWORD *sub_20BF709F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24C520423;
  return result;
}

uint64_t sub_20BF70A10@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  __int16 v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF70D38(v4 != 0);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF70B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  unsigned __int16 v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v6 = *(_WORD *)a1;
  result = sub_20BF70D90(&v6);
  v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] != 0.0;
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v5;
  return result;
}

uint64_t sub_20BF70BA0()
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x477FE000);
}

_WORD *sub_20BF70BD8(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_20BF70BE8(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20BF70BF4()
{
  return 1;
}

unint64_t sub_20BF70BFC(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20BF70C1C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
}

BOOL sub_20BF70C40(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
}

uint64_t sub_20BF70C68()
{
  return 0;
}

uint64_t sub_20BF70C74(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<(a2);
}

void *sub_20BF70C84()
{
  return &unk_24C51BF30;
}

uint64_t sub_20BF70C90()
{
  return 0;
}

uint64_t sub_20BF70C98()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70CA4()
{
  return 0;
}

uint64_t sub_20BF70CAC()
{
  return 0;
}

BOOL sub_20BF70CB4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC9F88 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF70CEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, a2, a3);
}

void *sub_20BF70D0C()
{
  return &unk_24C51BF30;
}

_WORD *sub_20BF70D1C@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = *result;
  return result;
}

uint64_t sub_20BF70D38(unsigned int a1)
{
  char v1;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v2;

  v1 = a1;
  v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if ((v1 & 1) == 0)
    return v2 >> 16;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

uint64_t sub_20BF70D90(unsigned __int16 *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  v2 = ceilf(v1);
  v3 = floorf(v1);
  if (v1 >= 0.0)
    v4 = v3;
  else
    v4 = v2;
  if (v4 == 0.0)
    return HIWORD(LODWORD(v4));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
         + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
}

uint64_t sub_20BF70E08@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = 0.0;
  if (*(_BYTE *)result)
    v4 = 1.0;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = v4;
  return result;
}

void sub_20BF70E64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 2.0);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v6 != 0.0;
}

float sub_20BF70F18(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_20BF70F28(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_20BF70F34()
{
  return 1;
}

unint64_t sub_20BF70F3C(float *a1)
{
  float v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * LODWORD(v1));
}

BOOL sub_20BF70F6C(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF70F80(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF70F98()
{
  return 0;
}

uint64_t sub_20BF70FA8()
{
  return MEMORY[0x24BEDB788];
}

uint64_t sub_20BF70FB4()
{
  return 0;
}

uint64_t sub_20BF70FBC()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF70FC8()
{
  return 0;
}

uint64_t sub_20BF70FD0()
{
  return 0;
}

BOOL sub_20BF70FD8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF7100C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], a2, a3);
}

uint64_t sub_20BF7102C()
{
  return MEMORY[0x24BEDB788];
}

float sub_20BF7103C@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  result = *a1;
  *(float *)a2 = *a1;
  return result;
}

uint64_t sub_20BF71058@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = 0.0;
  if (*(_BYTE *)result)
    v4 = 1.0;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = v4;
  return result;
}

void sub_20BF710B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 2.0);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v6 != 0.0;
}

double sub_20BF71168(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_20BF71178(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_20BF71184()
{
  return 1;
}

unint64_t sub_20BF7118C(double *a1)
{
  double v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v1);
}

BOOL sub_20BF711BC(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_20BF711D0(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20BF711E8()
{
  return 0;
}

uint64_t sub_20BF711F8()
{
  return MEMORY[0x24BEDB780];
}

uint64_t sub_20BF71204()
{
  return 0;
}

uint64_t sub_20BF7120C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF71218()
{
  return 0;
}

uint64_t sub_20BF71220()
{
  return 0;
}

BOOL sub_20BF71228(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF7125C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], a2, a3);
}

uint64_t sub_20BF7127C()
{
  return MEMORY[0x24BEDB780];
}

double sub_20BF7128C@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  a2[1] = &unk_24C52064B;
  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_20BF712A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
  return result;
}

uint64_t sub_20BF712F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
  return result;
}

void sub_20BF71340(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

void sub_20BF713BC(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (v4 >> 6) & 2);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF7143C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_20BF71488(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (v4 <= -129)
    v5 = 1;
  else
    v5 = 2 * (v4 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

void sub_20BF71514(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = (char)v4;
}

void sub_20BF71594(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (v4 > 0x7F));
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF71618@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF71664(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= -129)
    v5 = 1;
  else
    v5 = 2 * (*(_DWORD *)a1 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

void sub_20BF716F0(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = (char)v4;
}

void sub_20BF71770(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 0x7Fu));
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF717F4@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF7183C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= -129)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

void sub_20BF718C8(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_24C5202B3;
}

void sub_20BF71944(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF719C8@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF71A10(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= -129)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

void sub_20BF71A9C(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_24C520423;
}

void sub_20BF71B18(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = v4;
}

uint64_t sub_20BF71B9C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  __int16 v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF71D28(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF71C98@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = (int)result;
  return result;
}

uint64_t sub_20BF71D28(int a1)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1)
    return v2 >> 16;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_20BF71D80@<S0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_20BF71DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF71E40(*(float *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = result;
  return result;
}

uint64_t sub_20BF71E40(float a1)
{
  int v2;
  float v3;
  float v4;
  char v6;

  if (a1 <= -129.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 128.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceilf(a1);
  v4 = floorf(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

double sub_20BF71EA0@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_20BF71EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF71F60(*(double *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FC3B;
  *(_BYTE *)a2 = result;
  return result;
}

uint64_t sub_20BF71F60(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -129.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 128.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

void sub_20BF71FC4(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

void sub_20BF72040(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (v4 >> 6) & 2);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF720C0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_20BF7210C(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (v4 <= -129)
    v5 = 1;
  else
    v5 = 2 * (v4 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

void sub_20BF72198(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = (char)v4;
}

void sub_20BF72218(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (v4 > 0x7F));
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF7229C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF722E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= -129)
    v5 = 1;
  else
    v5 = 2 * (*(_DWORD *)a1 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

void sub_20BF72374(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = (char)v4;
}

void sub_20BF723F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 0x7Fu));
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF72478@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF724C0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= -129)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

void sub_20BF7254C(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_24C5202B3;
}

void sub_20BF725C8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

char *sub_20BF7264C@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF72694(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= -129)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 127);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

void sub_20BF72720(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_24C520423;
}

void sub_20BF7279C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = v4;
}

uint64_t sub_20BF72820@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  __int16 v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF71D28(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF7291C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = (int)result;
  return result;
}

float sub_20BF729AC@<S0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_20BF729FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF71E40(*(float *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = result;
  return result;
}

double sub_20BF72A6C@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_20BF72ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF71F60(*(double *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FDAB;
  *(_BYTE *)a2 = result;
  return result;
}

unsigned __int8 *sub_20BF72B2C@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_20BF72B78(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (v4 < 0)
    v5 = 1;
  else
    v5 = 2 * (v4 > 255);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF72C04@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int16 v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_20BF72C50(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (v4 > 0xFF));
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF72CD4@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF72D20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*(_DWORD *)a1 > 255);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF72DAC@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF72DF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 0xFFu));
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF72E7C@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF72EC4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 255);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF72F50@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5202B3;
  return result;
}

void sub_20BF72F98(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0xFF));
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF7301C@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF73064(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 255);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

unsigned __int8 *sub_20BF730F0@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C520423;
  return result;
}

void sub_20BF73138(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0xFF));
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = v4;
}

uint64_t sub_20BF731BC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  __int16 v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF73344(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF732B4@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = (int)result;
  return result;
}

uint64_t sub_20BF73344(unsigned int a1)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1)
    return v2 >> 16;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_20BF7339C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  uint64_t v4;
  float result;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  LOBYTE(a3) = *(_BYTE *)a1;
  result = (float)a3;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_20BF733EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF7345C(*(float *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = result;
  return result;
}

uint64_t sub_20BF7345C(float a1)
{
  int v2;
  float v3;
  float v4;
  char v6;

  if (a1 <= -1.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 256.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceilf(a1);
  v4 = floorf(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

double sub_20BF734BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v4;
  double result;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  LOBYTE(a3) = *(_BYTE *)a1;
  result = (double)a3;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_20BF7350C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF7357C(*(double *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FE63;
  *(_BYTE *)a2 = result;
  return result;
}

uint64_t sub_20BF7357C(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -1.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 256.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

void sub_20BF735DC(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 15);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

void sub_20BF73658(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (v4 >> 14) & 2);
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

__int16 *sub_20BF736D8@<X0>(__int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF73724(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= -32769)
    v5 = 1;
  else
    v5 = 2 * (*(_DWORD *)a1 >= 0x8000);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

void sub_20BF737B4(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 15);
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = (__int16)v4;
}

void sub_20BF73834(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*(_DWORD *)a1 & 0xFFFF8000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

__int16 *sub_20BF738B8@<X0>(__int16 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF73900(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= -32769)
    v5 = 1;
  else
    v5 = 2 * (*a1 >= 0x8000);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

void sub_20BF73990(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 15);
  *a2 = (__int16)v4;
  a2[1] = &unk_24C5202B3;
}

void sub_20BF73A0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF8000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

__int16 *sub_20BF73A90@<X0>(__int16 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF73AD8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= -32769)
    v5 = 1;
  else
    v5 = 2 * (*a1 >= 0x8000);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

void sub_20BF73B68(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, v4 >> 15);
  *a2 = (__int16)v4;
  a2[1] = &unk_24C520423;
}

void sub_20BF73BE4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF8000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = v4;
}

uint64_t sub_20BF73C68@<X0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  __int16 v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF71D28(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF73D64@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = (int)result;
  return result;
}

float sub_20BF73DF4@<S0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_20BF73E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF73EB4(*(float *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF73EB4(float a1)
{
  int v2;
  float v3;
  float v4;
  char v6;

  if (a1 <= -32769.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 32768.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceilf(a1);
  v4 = floorf(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

double sub_20BF73F14@<D0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_20BF73F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF73FD4(*(double *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FF1B;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF73FD4(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -32769.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 32768.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

unsigned __int16 *sub_20BF74038@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF74084(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*(_DWORD *)a1 >= 0x10000);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_20BF74110@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *result;
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_20BF7415C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*(_DWORD *)a1 & 0xFFFF0000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_20BF741E0@<X0>(unsigned __int16 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF74228(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 >= 0x10000);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_20BF742B4@<X0>(unsigned __int16 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5202B3;
  return result;
}

void sub_20BF742FC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF0000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_20BF74380@<X0>(unsigned __int16 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF743C8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 >= 0x10000);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_20BF74454@<X0>(unsigned __int16 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C520423;
  return result;
}

void sub_20BF7449C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF0000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = v4;
}

uint64_t sub_20BF74520@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  __int16 v6;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF73344(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF74618@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = (int)result;
  return result;
}

float sub_20BF746A8@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  uint64_t v4;
  float result;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  LOWORD(a3) = *(_WORD *)a1;
  result = (float)a3;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_20BF746F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF74768(*(float *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF74768(float a1)
{
  int v2;
  float v3;
  float v4;
  char v6;

  if (a1 <= -1.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 65536.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceilf(a1);
  v4 = floorf(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

double sub_20BF747C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v4;
  double result;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  LOWORD(a3) = *(_WORD *)a1;
  result = (double)a3;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_20BF74818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = sub_20BF74888(*(double *)a1);
  *(_QWORD *)(a2 + 8) = &unk_24C51FFD3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF74888(double a1)
{
  int v2;
  double v3;
  double v4;
  char v6;

  if (a1 <= -1.0)
    v2 = 1;
  else
    v2 = 2 * (a1 >= 65536.0);
  sub_20BF6F200((uint64_t)&v6, v2);
  v3 = ceil(a1);
  v4 = floor(a1);
  if (a1 >= 0.0)
    v3 = v4;
  return (int)v3;
}

void sub_20BF748E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, *(_DWORD *)a1 >> 31);
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
}

void sub_20BF74964(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  sub_20BF6F200((uint64_t)&v5, (*(_DWORD *)a1 >> 30) & 2);
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
}

int *sub_20BF749E4@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF74A2C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 0x7FFFFFFF);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
}

void sub_20BF74AC0(int *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (v4 >> 31) & 1);
  *a2 = v4;
  a2[1] = (unint64_t)&unk_24C5202B3;
}

void sub_20BF74B38(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFF80000000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
}

int *sub_20BF74BBC@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF74C04(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 0x7FFFFFFF);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
}

void sub_20BF74C98(int *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 & 4) != 0)
    a1 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (v4 >> 31) & 1);
  *a2 = v4;
  a2[1] = (unint64_t)&unk_24C520423;
}

void sub_20BF74D10(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFF80000000) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v4;
}

uint64_t sub_20BF74D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  float v5;
  uint64_t result;
  __int16 v7;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  v5 = (float)*(int *)a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF71D28(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF74E8C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = (int)result;
  return result;
}

float sub_20BF74F1C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*(int *)a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

void sub_20BF74F6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -2147500000.0)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 2147500000.0);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = (int)v6;
}

double sub_20BF7501C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*(int *)a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void sub_20BF7506C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -2147483650.0)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 2147483650.0);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = (int)v6;
}

unsigned int *sub_20BF75124@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF7516C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 0xFFFFFFFFLL);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
}

unsigned int *sub_20BF751FC@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5202B3;
  return result;
}

void sub_20BF75244(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (HIDWORD(*a1) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
}

unsigned int *sub_20BF752CC@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

void sub_20BF75314(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  if (*a1 < 0)
    v5 = 1;
  else
    v5 = 2 * (*a1 > 0xFFFFFFFFLL);
  sub_20BF6F200((uint64_t)&v6, v5);
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
}

unsigned int *sub_20BF753A4@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C520423;
  return result;
}

void sub_20BF753EC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, 2 * (HIDWORD(*a1) != 0));
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v4;
}

uint64_t sub_20BF75474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  float v5;
  uint64_t result;
  __int16 v7;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(_DWORD *)a1;
  v5 = (float)*(unsigned int *)a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF73344(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF7556C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = result;
  return result;
}

float sub_20BF755FC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*(unsigned int *)a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

void sub_20BF7564C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 4295000000.0);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v6;
}

double sub_20BF75700@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v4;
  double result;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  LODWORD(a3) = *(_DWORD *)a1;
  result = (double)a3;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void sub_20BF75750(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 4294967300.0);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *(_QWORD *)(a2 + 8) = &unk_24C520143;
  *(_DWORD *)a2 = v6;
}

void sub_20BF75804(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_24C5202B3;
}

void sub_20BF7587C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_24C5201FB;
}

_QWORD *sub_20BF758F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = result[1];
  if ((v3 & 4) != 0)
    result = (_QWORD *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C52036B;
  return result;
}

_QWORD *sub_20BF75940@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = result[1];
  if ((v3 & 4) != 0)
    result = (_QWORD *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5201FB;
  return result;
}

void sub_20BF75988(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_24C520423;
}

void sub_20BF75A00(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_24C5201FB;
}

uint64_t sub_20BF75A7C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t result;
  __int16 v7;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  v5 = (float)*a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF75C00(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF75B74@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *a2 = (uint64_t)result;
  a2[1] = &unk_24C5201FB;
  return result;
}

uint64_t sub_20BF75C00(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1)
    return v2 >> 16;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_20BF75C58@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

void sub_20BF75CA8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -9.2234e18)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 9.2234e18);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (uint64_t)v6;
  a2[1] = &unk_24C5201FB;
}

double sub_20BF75D54@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void sub_20BF75DA4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -9.22337204e18)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 9.22337204e18);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (uint64_t)v6;
  a2[1] = &unk_24C5201FB;
}

void sub_20BF75E58(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_24C52036B;
}

void sub_20BF75ED4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_24C5202B3;
}

_QWORD *sub_20BF75F4C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = result[1];
  if ((v3 & 4) != 0)
    result = (_QWORD *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C520423;
  return result;
}

_QWORD *sub_20BF75F94@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = result[1];
  if ((v3 & 4) != 0)
    result = (_QWORD *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  *a2 = *result;
  a2[1] = &unk_24C5202B3;
  return result;
}

uint64_t sub_20BF75FDC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t result;
  __int16 v7;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  v5 = (float)*a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF76160(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF760D4@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *a2 = (unint64_t)result;
  a2[1] = &unk_24C5202B3;
  return result;
}

uint64_t sub_20BF76160(unint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1)
    return v2 >> 16;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_20BF761B8@<S0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  float result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

void sub_20BF76208(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 1.8447e19);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (unint64_t)v6;
  a2[1] = &unk_24C5202B3;
}

double sub_20BF762B8@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  double result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void sub_20BF76308(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 1.84467441e19);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (unint64_t)v6;
  a2[1] = &unk_24C5202B3;
}

void sub_20BF763B8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_24C520423;
}

void sub_20BF76430(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  sub_20BF6F200((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_24C52036B;
}

uint64_t sub_20BF764AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t result;
  __int16 v7;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  v5 = (float)*a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF75C00(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF765A4@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *a2 = (uint64_t)result;
  a2[1] = &unk_24C52036B;
  return result;
}

float sub_20BF76630@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

void sub_20BF76680(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -9.2234e18)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 9.2234e18);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (uint64_t)v6;
  a2[1] = &unk_24C52036B;
}

double sub_20BF7672C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void sub_20BF7677C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -9.22337204e18)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 9.22337204e18);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (uint64_t)v6;
  a2[1] = &unk_24C52036B;
}

uint64_t sub_20BF76830@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t result;
  __int16 v7;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *a1;
  v5 = (float)*a1;
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  result = sub_20BF70BA0();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v7 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF76160(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_20BF76928@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float result;
  unsigned __int16 v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v5 = *(_WORD *)a1;
  result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_20BF70D90(&v5)];
  *a2 = (unint64_t)result;
  a2[1] = &unk_24C520423;
  return result;
}

float sub_20BF769B4@<S0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  float result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (float)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = result;
  return result;
}

void sub_20BF76A04(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(float *)a1 >= 1.8447e19);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceilf(v4);
  v7 = floorf(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (unint64_t)v6;
  a2[1] = &unk_24C520423;
}

double sub_20BF76AB4@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  double result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  result = (double)*a1;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = result;
  return result;
}

void sub_20BF76B04(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  double v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0)
    v5 = 1;
  else
    v5 = 2 * (*(double *)a1 >= 1.84467441e19);
  sub_20BF6F200((uint64_t)&v8, v5);
  v6 = ceil(v4);
  v7 = floor(v4);
  if (v4 >= 0.0)
    v6 = v7;
  *a2 = (unint64_t)v6;
  a2[1] = &unk_24C520423;
}

unsigned __int16 *sub_20BF76BB4@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;
  int v5;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*result];
  if (v4 > 3.4028e38)
  {
    v5 = 2139095040;
LABEL_7:
    v4 = *(float *)&v5;
    goto LABEL_8;
  }
  if (v4 < -3.4028e38)
  {
    v5 = -8388608;
    goto LABEL_7;
  }
LABEL_8:
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = v4;
  return result;
}

uint64_t sub_20BF76C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float v4;
  uint64_t result;
  __int16 v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)a1;
  result = sub_20BF70BA0();
  if (v4 > pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result])
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (v4 < pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000])
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF76D34(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF76D34(float a1)
{
  if (a1 == 0.0)
    return HIWORD(LODWORD(a1));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a1) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a1) >> 23]
         + (((LODWORD(a1) & 0x7FFFFF) + ((LODWORD(a1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a1));
}

unsigned __int16 *sub_20BF76D88@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  unint64_t v5;

  v3 = *((_QWORD *)result + 1);
  if ((v3 & 4) != 0)
    result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*result];
  if (v4 > 1.79769313e308)
  {
    v5 = 0x7FF0000000000000;
LABEL_7:
    v4 = *(double *)&v5;
    goto LABEL_8;
  }
  if (v4 < -1.79769313e308)
  {
    v5 = 0xFFF0000000000000;
    goto LABEL_7;
  }
LABEL_8:
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = v4;
  return result;
}

uint64_t sub_20BF76E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t result;
  __int16 v6;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  result = sub_20BF70BA0();
  if (v4 > pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result])
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  result = sub_20BF70BA0();
  if (v4 < pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000])
  {
    *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
    v6 = -1024;
    goto LABEL_7;
  }
  result = sub_20BF76F14(v4);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5204D8 + 3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_20BF76F14(double a1)
{
  float v1;

  v1 = a1;
  if (v1 == 0.0)
    return HIWORD(LODWORD(v1));
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23])
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

uint64_t sub_20BF76F6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  if ((v3 & 4) != 0)
    result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(float *)result;
  if (v4 > 1.79769313e308)
  {
    v5 = 0x7FF0000000000000;
LABEL_7:
    v4 = *(double *)&v5;
    goto LABEL_8;
  }
  if (v4 < -1.79769313e308)
  {
    v5 = 0xFFF0000000000000;
    goto LABEL_7;
  }
LABEL_8:
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  *(double *)a2 = v4;
  return result;
}

void sub_20BF76FF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  int v5;
  float v6;
  char v7;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  v4 = *(double *)a1;
  if (*(double *)a1 > 3.40282347e38)
  {
    *(_QWORD *)(a2 + 8) = &unk_24C520593;
    v5 = 2139095040;
LABEL_7:
    *(_DWORD *)a2 = v5;
    return;
  }
  if (v4 < -3.40282347e38)
  {
    *(_QWORD *)(a2 + 8) = &unk_24C520593;
    v5 = -8388608;
    goto LABEL_7;
  }
  sub_20BF6F200((uint64_t)&v7, 2 * (v4 > 3.40282347e38));
  v6 = v4;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  *(float *)a2 = v6;
}

uint64_t *sub_20BF770F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_20BF7711C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BF77294(a1);
}

uint64_t sub_20BF7712C()
{
  return 1;
}

unint64_t sub_20BF77134(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  char *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v6 = 0;
  v7 = 0;
  v2 = *(char *)(v1 + 23);
  if (v2 >= 0)
    v3 = (pxrInternal__aapl__pxrReserved__ *)v1;
  else
    v3 = *(pxrInternal__aapl__pxrReserved__ **)v1;
  if (v2 >= 0)
    v4 = (char *)*(unsigned __int8 *)(v1 + 23);
  else
    v4 = *(char **)(v1 + 8);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * v6);
}

BOOL sub_20BF77194(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_20BF772F0(*a1, *a2);
}

BOOL sub_20BF771A0(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return sub_20BF772F0(*a1, a2);
}

uint64_t sub_20BF771AC()
{
  return 0;
}

_QWORD *sub_20BF771B8(uint64_t **a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((char *)*a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t)*a1;
  else
    v4 = **a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)*a1 + 23);
  else
    v5 = (*a1)[1];
  return sub_20BDDC1C8(a2, v4, v5);
}

void *sub_20BF771E0()
{
  return &unk_24C516910;
}

uint64_t sub_20BF771EC()
{
  return 0;
}

uint64_t sub_20BF771F4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF77200()
{
  return 0;
}

uint64_t sub_20BF77208()
{
  return 0;
}

BOOL sub_20BF77210(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF77248(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C516910, a2, a3);
}

void *sub_20BF77268()
{
  return &unk_24C516910;
}

uint64_t sub_20BF77274(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unsigned int *sub_20BF7727C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &off_24C520700;
  return sub_20BF77444((unsigned int **)a2, v2);
}

uint64_t *sub_20BF77294(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      operator delete((void *)v2);
    }
  }
  return a1;
}

BOOL sub_20BF772F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_20BF77390(uint64_t *a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = (unsigned int *)operator new(0x20uLL);
    v4 = v3;
    v5 = *a1;
    if (*(char *)(*a1 + 23) < 0)
    {
      sub_20BDDBFAC(v3, *(void **)v5, *(_QWORD *)(v5 + 8));
      v5 = *a1;
    }
    else
    {
      v6 = *(_OWORD *)v5;
      *((_QWORD *)v3 + 2) = *(_QWORD *)(v5 + 16);
      *(_OWORD *)v3 = v6;
    }
    v7 = v4 + 6;
    atomic_store(0, v4 + 6);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v10 = v5;
    *a1 = (uint64_t)v4;
    sub_20BF77294(&v10);
  }
  return *a1;
}

void sub_20BF77430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BF77444(unsigned int **a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  result = (unsigned int *)operator new(0x20uLL);
  v5 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    result = (unsigned int *)sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)result + 2) = *(_QWORD *)(a2 + 16);
  }
  v6 = v5 + 6;
  atomic_store(0, v5 + 6);
  *a1 = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BF774BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF774D0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_20BF77508(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if ((*result & 7) != 0)
  {
    v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  return result;
}

_QWORD *sub_20BF7752C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BF7753C()
{
  return 1;
}

unint64_t sub_20BF77544(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_20BF77568(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_20BF77584(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_20BF775A4()
{
  return 0;
}

_QWORD *sub_20BF775B0(_QWORD *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, a1);
}

void *sub_20BF775C0()
{
  return &unk_24C51BCE0;
}

uint64_t sub_20BF775CC()
{
  return 0;
}

uint64_t sub_20BF775D4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BF775E0()
{
  return 0;
}

uint64_t sub_20BF775E8()
{
  return 0;
}

BOOL sub_20BF775F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BF77628(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCE0, a2, a3);
}

void *sub_20BF77648()
{
  return &unk_24C51BCE0;
}

unsigned int **sub_20BF77658@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

uint64_t sub_20BF77694(uint64_t a1, void *a2)
{
  sub_20BF776C4(a1, a2);
  sub_20BF6EF2C(a1 + 16);
  return a1;
}

uint64_t sub_20BF776C4(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  for (i = 0; i != 64; ++i)
  {
    v4 = v2 + 8 * i;
    v6 = *(_QWORD *)(v4 + 48);
    v5 = (uint64_t *)(v4 + 48);
    __dmb(0xBu);
    if (v6)
    {
      v7 = 1 << i;
      if (!i)
        v7 = 2;
      do
      {
        __dmb(0xBu);
        --v7;
      }
      while (v7);
      v8 = *v5;
      __dmb(0xBu);
      result = tbb::internal::deallocate_via_handler_v3(v8, a2);
      __dmb(0xBu);
      *v5 = 0;
    }
  }
  return result;
}

uint64_t *sub_20BF77748()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C520870, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C520870, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF77804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BF77848(uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t **v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;

  v8 = sub_20BF77A54(a1, a2);
  v29 = 0;
  v30 = (unint64_t *)v8;
  v9 = &v30;
  for (i = 7; i != -1; --i)
  {
    v11 = *(unsigned __int8 *)v9;
    v9 = (unint64_t **)((char *)v9 + 1);
    *((_BYTE *)&v29 + i) = byte_20CA9F1BD[v11];
  }
  v12 = v29 | 1;
  sub_20BF77AC8(a1, v8, &v30);
  v13 = a1 + 16;
  if (a3)
  {
    *((_QWORD *)a3 + 8) = v12;
    *(_QWORD *)a3 = 0;
  }
  v14 = (unsigned __int8 *)a2;
  while (1)
  {
    v15 = v30;
    v16 = *v30;
    if (*v30)
    {
      v17 = *(_QWORD *)(v16 + 64);
      while (1)
      {
        v18 = (unint64_t *)v16;
        if (v17 > v12)
          break;
        if (v17 == v12 && sub_20BF77F70(a1 + 1, (unsigned __int8 *)(v16 + 8), v14))
        {
          if (a3)
            sub_20BF6EFA8(a1 + 16, (tbb::internal *)a3);
          *(_QWORD *)a4 = v16;
          *(_QWORD *)(a4 + 8) = v13;
          *(_BYTE *)(a4 + 16) = 0;
          return;
        }
        v30 = (unint64_t *)v16;
        v16 = *(_QWORD *)v16;
        if (!*v18)
        {
          v15 = v18;
          break;
        }
        v17 = *(_QWORD *)(v16 + 64);
        v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (unsigned __int8 *)sub_20BF77B5C(a1 + 16, v12, (uint64_t)a2);
      v14 = a3 + 8;
      v15 = v30;
    }
    *(_QWORD *)a3 = v16;
    do
    {
      while (1)
      {
        v19 = __ldaxr(v15);
        if (v19 == v16)
          break;
        __clrex();
        do
          v20 = __ldxr(v15);
        while (__stxr(v20, v15));
        if (v20 != v16)
          goto LABEL_23;
      }
    }
    while (__stlxr((unint64_t)a3, v15));
    v20 = v16;
LABEL_23:
    if (v16 == v20 || a3 == (unsigned __int8 *)v20)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v13;
    *(_BYTE *)(a4 + 16) = 0;
  }
  v22 = (unint64_t *)(a1 + 24);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = 1;
  v26 = *(_QWORD *)(a1 + 8);
  v25 = a1 + 8;
  v24 = v26;
  __dmb(0xBu);
  if ((float)((float)v23 / (float)v26) > *(float *)(v25 + 36))
  {
    do
    {
      while (1)
      {
        v27 = __ldaxr((unint64_t *)v25);
        if (v27 != v24)
          break;
        if (!__stlxr(2 * v24, (unint64_t *)v25))
          return;
      }
      __clrex();
      do
        v28 = __ldxr((unint64_t *)v25);
      while (__stxr(v28, (unint64_t *)v25));
    }
    while (v28 == v24);
  }
}

unint64_t sub_20BF77A54(uint64_t a1, __int128 *a2)
{
  unint64_t v3;
  void *v5[2];
  char v6;
  void *__p;
  char v8;

  sub_20BF77C2C((char *)v5, a2);
  v3 = sub_20BF77BD4(a1, (uint64_t)v5);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  return v3;
}

void sub_20BF77AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF77AC8(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  __dmb(0xBu);
  v6 = a2 % v5;
  v7 = sub_20BEB4B94(a2 % v5);
  v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  v9 = a1 + 8 * v7;
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (v12 = *v10, __dmb(0xBu), !*(_QWORD *)(v12 + 8 * v8)))
    sub_20BF77CC0(a1, (unint64_t *)v6);
  v13 = *v10;
  __dmb(0xBu);
  *a3 = *(_QWORD *)(v13 + 8 * v8);
}

uint64_t sub_20BF77B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  sub_20BF77C2C((char *)(v5 + 8), (__int128 *)a3);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(v5 + 64) = a2;
  *(_QWORD *)v5 = 0;
  return v5;
}

void sub_20BF77BAC(void *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_20BF77BC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t sub_20BF77BD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v5;
  char v6;

  v3 = sub_20BEF33B4((uint64_t)&v5, a2);
  return ((v3 << 6) + (v3 >> 2) + sub_20BEF33B4((uint64_t)&v6, a2 + 24) + 2654435769u) ^ v3;
}

char *sub_20BF77C2C(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20BDDBFAC(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20BF77CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF77CC0(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t i;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;

  v4 = sub_20BF77DA0(a1, (unint64_t)a2);
  if (!sub_20BF77E2C(a1, v4))
    sub_20BF77CC0(a1, v4);
  v5 = sub_20BEB4B94(v4);
  v6 = *(_QWORD *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  v11 = *(unint64_t **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  v12 = 0;
  v13 = a2;
  v7 = &v13;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t **)((char *)v7 + 1);
    *((_BYTE *)&v12 + i) = byte_20CA9F1BD[v9];
  }
  sub_20BF77E90(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  v10 = v13;
  sub_20BF6EE60(a1, (unint64_t)a2, &v10);
}

uint64_t sub_20BF77DA0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v2 = HIDWORD(a2);
    if (!HIDWORD(a2))
      v2 = a2;
    if (v2 < 0x10000)
    {
      v3 = 32 * (HIDWORD(a2) != 0);
    }
    else
    {
      v2 >>= 16;
      v3 = (32 * (HIDWORD(a2) != 0)) | 0x10;
    }
    if (v2 >= 0x100)
    {
      v2 >>= 8;
      v3 |= 8uLL;
    }
    if (v2 >= 0x10)
    {
      v2 >>= 4;
      v3 |= 4uLL;
    }
    if (v2 >= 4)
    {
      v2 >>= 2;
      v3 += 2;
    }
    v4 = ((v2 >> 1) & 1) + v3;
  }
  else
  {
    LOBYTE(v4) = -1;
  }
  return a2 & ~(1 << v4);
}

BOOL sub_20BF77E2C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_20BEB4B94(a2);
  v5 = a1 + 8 * v4;
  v7 = *(_QWORD *)(v5 + 48);
  v6 = (uint64_t *)(v5 + 48);
  __dmb(0xBu);
  if (!v7)
    return 0;
  v8 = *v6;
  __dmb(0xBu);
  return *(_QWORD *)(v8 + 8 * (a2 - ((1 << v4) & 0x1FFFFFFFFFFFFFFELL))) != 0;
}

tbb::internal *sub_20BF77E90@<X0>(uint64_t a1@<X0>, unint64_t **a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t *i;
  tbb::internal *result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  i = (unint64_t *)**a2;
  result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  *((_QWORD *)result + 8) = a3;
  *(_QWORD *)result = 0;
  if (i)
    goto LABEL_2;
LABEL_3:
  while (1)
  {
    v11 = *a2;
    *(_QWORD *)result = i;
    do
    {
      while (1)
      {
        v12 = __ldaxr(v11);
        if ((unint64_t *)v12 == i)
          break;
        __clrex();
        do
          v13 = __ldxr(v11);
        while (__stxr(v13, v11));
        if ((unint64_t *)v13 != i)
          goto LABEL_10;
      }
    }
    while (__stlxr((unint64_t)result, v11));
    v13 = (unint64_t)i;
LABEL_10:
    if (i == (unint64_t *)v13 || result == (tbb::internal *)v13)
      break;
    for (i = *a2; ; *a2 = i)
    {
      i = (unint64_t *)*i;
      if (!i)
        break;
LABEL_2:
      v10 = i[8];
      if (v10 > a3)
        goto LABEL_3;
      if (v10 == a3)
      {
        result = (tbb::internal *)sub_20BF6EFA8(a1, result);
        goto LABEL_21;
      }
    }
  }
  i = (unint64_t *)result;
LABEL_21:
  *a4 = i;
  return result;
}

uint64_t sub_20BF77F70(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  uint64_t result;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = a2[47];
  if ((v12 & 0x80u) == 0)
    v13 = a2[47];
  else
    v13 = *((_QWORD *)a2 + 4);
  v14 = a3[47];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a3 + 4);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a2 + 24);
  v19 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v18 = a3 + 24;
  v17 = v19;
  if (v15 >= 0)
    v20 = v18;
  else
    v20 = v17;
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v20, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v21 = v12 - 1;
  do
  {
    v23 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

_QWORD *sub_20BF78098(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = sub_20BDDC0E4(a1, (char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  sub_20BDDC0E4(v5 + 3, (char *)(*(_QWORD *)(*(_QWORD *)a3 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_20BF780E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF780FC(uint64_t a1@<X0>, __int128 *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t *v7;
  uint64_t i;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_20BF77A54(a1, a2);
  v17 = 0;
  v18 = v6;
  v7 = &v18;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t *)((char *)v7 + 1);
    *((_BYTE *)&v17 + i) = byte_20CA9F1BD[v9];
  }
  v10 = v17;
  v11 = a1 + 16;
  sub_20BF77AC8(a1, v6, &v18);
  v12 = v18;
  if (v18)
  {
    v13 = v10 | 1;
    v14 = a1 + 1;
    while (1)
    {
      v15 = *(_QWORD *)(v12 + 64);
      if (v15 > v13)
        break;
      if (v15 == v13)
      {
        v16 = sub_20BF77F70(v14, (unsigned __int8 *)(v12 + 8), (unsigned __int8 *)a2);
        v12 = v18;
        if ((v16 & 1) != 0)
          goto LABEL_11;
      }
      v12 = *(_QWORD *)v12;
      v18 = v12;
      if (!v12)
        goto LABEL_9;
    }
    v12 = 0;
LABEL_11:
    *a3 = v12;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v11;
}

uint64_t sub_20BF781DC(uint64_t a1)
{
  sub_20BF78204(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_20BF78204(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BF78204(a1, *a2);
    sub_20BF78204(a1, a2[1]);
    sub_20BF7824C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BF7824C(uint64_t a1)
{
  (*(void (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *sub_20BF7828C(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  _OWORD *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v7 = (void **)sub_20BDDE084((uint64_t)a1, &v13, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8[2] = *(_OWORD *)a3;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)a4;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)v8 + 9) = *(_QWORD *)(a4 + 16);
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v9, (uint64_t *)v8);
    v11[0] = 0;
    sub_20BF7835C((uint64_t)v11, 0);
  }
  return v8;
}

void sub_20BF7835C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BF7824C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20BF783A0(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783AC(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783B8(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783C4(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783D0(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783DC(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783E8(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF783F4(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78400(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF7840C(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78418(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78424(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78430(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF7843C(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78448(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78454(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78460(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF7846C(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78478(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78484(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF78490(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF7849C(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF784A8(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF784B4(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20BF784C0(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result;
  unsigned int *v9;

  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(a1);
  if ((_DWORD)result)
  {
    if (((pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a1) & 1) != 0
       || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(a1) & 1) == 0)
      && ((pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a1) & 1) != 0 || !a3))
    {
      v9 = a2 + 1;
      if (!a4)
        v9 = a2;
      return *v9;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, int a3)
{
  _QWORD *KeyFrames;
  uint64_t Extrapolation;

  Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(this);
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  return pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a1, (unsigned int *)&Extrapolation, KeyFrames[1] - *KeyFrames == 72, a3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Ts_Eval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t *result;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v11;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v14;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v17;
  uint64_t KeyFrames;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v24;
  uint64_t *v25;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v26;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **v27;
  int v28;
  double v29;
  double *v30;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **v31;
  int v32;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v33;
  uint64_t *v34;
  double v35;

  v35 = a5;
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  if (*result == result[1])
  {
    a4[1] = 0;
    return result;
  }
  v10 = pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(a1, &v35);
  if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) == v10)
    v11 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                           + 8);
  else
    v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v10 - 72);
  v33 = v11;
  v34 = a4;
  if (*(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8) == v10
    || *(double *)(v10 + 8) != v35)
  {
    v13 = 0;
    v14 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                           + 8);
    v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v10;
  }
  else
  {
    v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v10 + 72);
    v13 = 1;
    v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v10;
    v10 += 72;
  }
  v15 = *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  v16 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8);
  v17 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  if (!v13)
  {
    if (v15 == v12)
    {
      if (a3)
      {
        v25 = v34;
        v26 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v10;
LABEL_33:
        v27 = a1;
        v28 = 0;
        return (uint64_t *)sub_20BF78914(v26, v27, v28, v25);
      }
      v29 = v35;
      v30 = (double *)v10;
      v31 = a1;
      v32 = 0;
    }
    else
    {
      if (v33 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v16 - 72))
      {
        if (!a3)
          return (uint64_t *)pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalUncached(v33, v12, v19, v35);
        if (a3 != 1
          || !pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsExtrapolatable(v33)
          || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents(v33) & 1) != 0
          || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33) != 1)
        {
          return (uint64_t *)pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalDerivativeUncached(v33, v12, v19, v35);
        }
        v21 = (uint64_t)v33;
LABEL_26:
        v22 = 1;
        return (uint64_t *)sub_20BF78A40(v21, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
      }
      v25 = v34;
      if (a3)
      {
        v26 = v33;
LABEL_51:
        v27 = a1;
        v28 = 1;
        return (uint64_t *)sub_20BF78914(v26, v27, v28, v25);
      }
      v29 = v35;
      v30 = (double *)v33;
      v31 = a1;
      v32 = 1;
    }
    return (uint64_t *)sub_20BF78AA4(v30, v31, v32, v29);
  }
  if (!a3)
  {
    if (a2 || v14 == v17)
    {
      if (a2)
      {
        v23 = v34;
        v24 = v14;
        return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, v24);
      }
    }
    else if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33))
    {
      v23 = v34;
      v24 = v33;
      return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, v24);
    }
    return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v34, v14);
  }
  v20 = *(_QWORD *)(KeyFrames + 8);
  if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsExtrapolatable(v14) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v34, v14);
  if (a2)
  {
    if (v14 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v20 - 72))
    {
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14))
      {
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14) != 1)
          return (uint64_t *)pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValueDerivative(v14);
        v21 = (uint64_t)v14;
        goto LABEL_26;
      }
      return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v34, v14);
    }
    v25 = v34;
    v26 = v14;
    goto LABEL_51;
  }
  if (v14 == v17)
  {
    v25 = v34;
    v26 = v14;
    goto LABEL_33;
  }
  if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33)
    || !pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14)
    && pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33) == 2)
  {
    return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v34, v14);
  }
  if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14)
    && pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33) == 1
    || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14) == 1)
  {
    v21 = (uint64_t)v14;
    v22 = 0;
    return (uint64_t *)sub_20BF78A40(v21, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
  }
  return (uint64_t *)pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValueDerivative(v14);
}

uint64_t sub_20BF78914@<X0>(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1@<X0>, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v7;
  uint64_t v8;
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v10;
  uint64_t v11;
  uint64_t v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  a4[1] = 0;
  if (pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a1, a2, a3) == 1)
  {
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a1))
    {
      if (a3)
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v13, a1);
      else
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v13, a1);
    }
    else
    {
      if (a3)
        v8 = -1;
      else
        v8 = 0;
      KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a1 + 72 * v8), v7);
      v11 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a1 + 72 * (a3 == 0)), v10);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)KeyFrameData + 168))(v13, KeyFrameData, v11);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v13, a1);
  }
  sub_20BF4B5D8(a4, v13);
  return sub_20BF4C2D8((uint64_t)v13);
}

void sub_20BF78A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF78A40(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v5;
  uint64_t v6;

  if ((_DWORD)a2 == 1)
    v2 = 0;
  else
    v2 = -1;
  v3 = (pxrInternal__aapl__pxrReserved__ *)(a1 + 72 * ((_DWORD)a2 == 1));
  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__ *)(a1 + 72 * v2), a2);
  v6 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(v3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)KeyFrameData + 168))(KeyFrameData, v6);
}

uint64_t sub_20BF78AA4(double *a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a2, int a3, double a4)
{
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v7;
  double v8;
  uint64_t KeyFrameData;
  uint64_t v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF78914((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1, a2, a3, v12);
  if (a3)
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v11, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1);
  else
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v11, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1);
  v8 = a1[1];
  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__ *)a1, v7);
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, double))(*(_QWORD *)KeyFrameData + 176))(KeyFrameData, v11, v12, a4 - v8);
  sub_20BF4C2D8((uint64_t)v11);
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20BF78B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  uint64_t v20;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  const char *v27;
  char v28;
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31[2];
  uint64_t v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v32, a2);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v31, this);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v30, a2);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v29, this);
  if (*((double *)this + 1) >= *((double *)a2 + 1))
  {
    v24 = COERCE_DOUBLE("ts/evalUtils.cpp");
    v25 = COERCE_DOUBLE("Ts_IsSegmentValueMonotonic");
    v26 = 315;
    v27 = "BOOL pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(const TsKeyFrame &, const TsKeyFrame &)";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"The first key frame must come before the second.");
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(this) != 2
    || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(a2) != 2
    || !sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v31)
    || !sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v32)
    || !sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v29)
    || !sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v30))
  {
    goto LABEL_15;
  }
  v5 = *(double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v31);
  v6 = *(double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v31);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v24, this);
  v7 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(this);
  v9 = v8;
  sub_20BF4C2D8((uint64_t)&v24);
  v10 = *(double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v32);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v24, a2);
  v11 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(a2);
  v13 = v12;
  sub_20BF4C2D8((uint64_t)&v24);
  v14 = (double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v32);
  v15 = v6 + v7 * v9;
  v16 = v10 - v11 * v13;
  v17 = *v14;
  v24 = v15 - v5;
  v25 = v5 + v5 + v15 * -4.0 + v16 + v16;
  v18 = v15 * 3.0 - v5 - v16 * 3.0 + v17;
  *(double *)&v26 = v18;
  v22 = 0.0;
  v23 = 0.0;
  if (!pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v24, &v23, &v22, v19))
  {
LABEL_13:
    v20 = 1;
    goto LABEL_16;
  }
  if (fabs(v18) < 0.000001 && v23 > 0.000001 && 1.0 - v23 > 0.000001)
    goto LABEL_15;
  if (vabdd_f64(v23, v22) < 0.000001)
    goto LABEL_13;
  if (v23 > 0.000001 && 1.0 - v23 > 0.000001 || (v20 = 1, v22 > 0.000001) && 1.0 - v22 > 0.000001)
LABEL_15:
    v20 = 0;
LABEL_16:
  sub_20BF4C2D8((uint64_t)v29);
  sub_20BF4C2D8((uint64_t)v30);
  sub_20BF4C2D8((uint64_t)v31);
  sub_20BF4C2D8((uint64_t)v32);
  return v20;
}

void sub_20BF78E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va2);
  sub_20BF4C2D8((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_20BF78EE4()
{
  JUMPOUT(0x20BF78EDCLL);
}

uint64_t sub_20BF78EEC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB780]);
  else
    return 0;
}

uint64_t sub_20BF78F24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BF78EEC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF7B178, MEMORY[0x24BEDB780]);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

double sub_20BF78F8C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BF78EEC(a1) & 1) != 0)
    return sub_20BF7B1C4(a1);
  else
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF7B178, MEMORY[0x24BEDB780]);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetRange@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, double a3@<D1>, _QWORD *a4@<X8>)
{
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t KeyFrames;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double *v21;
  const double *v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  double *v27;
  float v28;
  double *v29;
  const double *v30;
  uint64_t v31;
  double *v32;
  float v33;
  float v34;
  double v35;
  double v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  float64x2_t v40;
  double v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a2 > a3)
  {
    v37 = "ts/evalUtils.cpp";
    v38 = "Ts_GetRange";
    v39 = 577;
    *(_QWORD *)&v40.f64[0] = "std::pair<VtValue, VtValue> pxrInternal__aapl__pxrReserved__::Ts_GetRange(const TsSpline &,"
                             " TsTime, TsTime)";
    LOBYTE(v40.f64[1]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"invalid interval (start > end)");
LABEL_4:
    v38 = 0;
    v42 = 0;
LABEL_5:
    sub_20BF4C200(a4, &v37);
    sub_20BF4C200(a4 + 2, &v41);
    sub_20BF4C2D8((uint64_t)&v41);
    return sub_20BF4C2D8((uint64_t)&v37);
  }
  if (pxrInternal__aapl__pxrReserved__::TsSpline::IsEmpty(this))
    goto LABEL_4;
  if (a2 != a3)
  {
    v11 = (const char *)(*(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(this) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (strcmp(v11, (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      if (strcmp(v11, (const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
        goto LABEL_4;
      v35 = a3;
      v36 = a2;
      v12 = pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v36);
      if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v12)
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v12);
        v13 = sub_20BF7B9A8((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
        sub_20BF4C2D8((uint64_t)&v37);
        v14 = fmaxf(v13, -INFINITY);
      }
      else
      {
        v12 -= 72;
        v13 = INFINITY;
        v14 = -INFINITY;
      }
      v27 = (double *)pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(this, &v35);
      if (*(double **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) == v27)
      {
        v27 -= 9;
      }
      else if (v27[1] != v35
             || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27) & 1) == 0
             && (*(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v27
              || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v27 - 9))))
      {
LABEL_52:
        if ((double *)v12 != v27)
        {
          do
          {
            v29 = (double *)(v12 + 72);
            if (v12 + 72 != *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
            {
              sub_20BF7BB64((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)v12, (pxrInternal__aapl__pxrReserved__ *)(v12 + 72));
              v33 = sub_20BF7C09C((uint64_t)&v39, v30, v31, v32, v36, v35);
              if (v13 >= v33)
                v13 = v33;
              if (v14 < v34)
                v14 = v34;
            }
            v12 += 72;
          }
          while (v29 != v27);
        }
        v38 = (const char *)&unk_24C520593;
        *(float *)&v37 = v13;
        v42 = &unk_24C520593;
        *(float *)&v41 = v14;
        goto LABEL_5;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
      v28 = sub_20BF7B9A8((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
      sub_20BF4C2D8((uint64_t)&v37);
      if (v13 >= v28)
        v13 = v28;
      if (v14 < v28)
        v14 = v28;
      goto LABEL_52;
    }
    v35 = a3;
    v36 = a2;
    v16 = pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v36);
    if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v16)
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16);
      v17 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
      sub_20BF4C2D8((uint64_t)&v37);
      v18 = fmax(v17, -INFINITY);
    }
    else
    {
      v16 -= 72;
      v17 = INFINITY;
      v18 = -INFINITY;
    }
    v19 = (double *)pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(this, &v35);
    if (*(double **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) == v19)
    {
      v19 -= 9;
    }
    else if (v19[1] != v35
           || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v19) & 1) == 0
           && (*(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v19
            || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v19 - 9))))
    {
LABEL_32:
      if ((double *)v16 != v19)
      {
        do
        {
          v21 = (double *)(v16 + 72);
          if (v16 + 72 != *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
          {
            sub_20BF7B2AC((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)v16, (pxrInternal__aapl__pxrReserved__ *)(v16 + 72));
            v25 = sub_20BF7B770(&v40, v22, v23, v24, v36, v35);
            if (v17 >= v25)
              v17 = v25;
            if (v18 < v26)
              v18 = v26;
          }
          v16 += 72;
        }
        while (v21 != v19);
      }
      v38 = (const char *)&unk_24C52064B;
      v37 = *(char **)&v17;
      v42 = &unk_24C52064B;
      v41 = v18;
      goto LABEL_5;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v19);
    v20 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
    sub_20BF4C2D8((uint64_t)&v37);
    if (v17 >= v20)
      v17 = v20;
    if (v18 < v20)
      v18 = v20;
    goto LABEL_32;
  }
  if (*(double *)(*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) <= a2)
  {
    if (*(double *)(*(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) - 64) <= a2)
    {
      KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 1, (uint64_t *)&v37, *(double *)(*(_QWORD *)(KeyFrames + 8) - 64));
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 1, (uint64_t *)&v37, a2);
    }
    sub_20BF7AA34(a4, &v37, &v37);
  }
  else
  {
    v10 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 0, (uint64_t *)&v37, *(double *)(*(_QWORD *)v10 + 8));
    sub_20BF7AA34(a4, &v37, &v37);
  }
  return sub_20BF4C2D8((uint64_t)&v37);
}

void sub_20BF794F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Ts_Sample(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, uint64_t *a7@<X8>)
{
  double v11;
  BOOL IsEmpty;
  char v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  double v110;
  double v111;
  unint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  double v129;
  double v130;
  __int128 v131;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  _BYTE v138[24];
  double v139;
  double v140;
  double v141;
  double v142;
  double v143[2];
  double v144;
  double v145;
  double v146;
  float64x2_t v147;
  double v148;
  uint64_t v149;
  float64x2_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  double v156;
  _QWORD v157[2];
  _QWORD v158[2];
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if (a2 > a3)
  {
    *(_QWORD *)&v131 = "ts/evalUtils.cpp";
    *((_QWORD *)&v131 + 1) = "Ts_Sample";
    v132 = 1048;
    v133 = COERCE_DOUBLE("TsSamples pxrInternal__aapl__pxrReserved__::Ts_Sample(const TsSpline &, TsTime, TsTime, double, double, double)");
    LOBYTE(v134) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v131, 1, (pxrInternal__aapl__pxrReserved__ *)"invalid interval (start > end)");
    return;
  }
  v11 = a2;
  IsEmpty = pxrInternal__aapl__pxrReserved__::TsSpline::IsEmpty(this);
  v14 = v11 == a3 || IsEmpty;
  if ((v14 & 1) != 0)
    return;
  v15 = (const char *)(*(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(this) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (!strcmp(v15, (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v28 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
    v123 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
    v29 = *(double *)(v28 + 8);
    if (v29 > v11)
    {
      sub_20BF7AA7C(this, a7, v29, v11 - v29 + -100.0);
      v11 = *(double *)(v28 + 8);
      if (v11 >= a3)
        return;
    }
    v30 = sub_20BF7ACBC(this, v11, a3);
    v32 = v31;
    v125 = a6;
    if (v30 == v31)
    {
LABEL_56:
      v73 = v123;
      goto LABEL_98;
    }
    while (1)
    {
      v33 = v30 + 72;
      if (v30 + 72 != *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
      {
        sub_20BF7B2AC((uint64_t)&v131, (pxrInternal__aapl__pxrReserved__ *)v30, (pxrInternal__aapl__pxrReserved__ *)(v30 + 72));
        v129 = 1.0;
        v130 = 0.0;
        v150 = vmulq_f64(*(float64x2_t *)&v138[8], (float64x2_t)xmmword_20CA9F2D0);
        v149 = *(_QWORD *)v138;
        if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v149, &v130, &v129, v34)&& v130 >= -1.0e-10&& v129 <= 1.0&& (v35 = v137 + v130 * (*(double *)v138 + v130 * (v130 * *(double *)&v138[16] + *(double *)&v138[8])), v36 = v137 + v129 * (*(double *)v138 + v129 * (v129 * *(double *)&v138[16] + *(double *)&v138[8])), v35 >= v36))
        {
          v37 = v136;
          if (v36 <= v136)
            v38 = v137 + v129 * (*(double *)v138 + v129 * (v129 * *(double *)&v138[16] + *(double *)&v138[8]));
          else
            v38 = v136;
          if (v36 >= v133)
            v39 = v38;
          else
            v39 = v133;
          if (v35 <= v136)
            v37 = v137 + v130 * (*(double *)v138 + v130 * (v130 * *(double *)&v138[16] + *(double *)&v138[8]));
          if (v35 >= v133)
            v40 = v37;
          else
            v40 = v133;
          v41 = (v40 + v39) * 0.5;
          *(_QWORD *)&v155 = 0;
          BYTE8(v155) = 1;
          v156 = v130;
          LOBYTE(v157[0]) = fabs(v130) != INFINITY;
          v130 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v137, (double *)&v149, (uint64_t)&v155, v41);
          *(double *)&v155 = v129;
          BYTE8(v155) = fabs(v129) != INFINITY;
          v156 = 1.0;
          LOBYTE(v157[0]) = 1;
          v42 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v137, (double *)&v149, (uint64_t)&v155, v41);
          v43 = v142;
          v44 = (1.0 - v130) * v140 + v130 * v141;
          v163 = v139;
          v164 = v130 * v140 + (1.0 - v130) * v139;
          v165 = v130 * v44 + (1.0 - v130) * v164;
          v166 = v130 * ((1.0 - v130) * v44 + v130 * ((1.0 - v130) * v141 + v130 * v142)) + (1.0 - v130) * v165;
          v45 = v136;
          v129 = v42;
          v146 = v133;
          v147.f64[0] = v130 * v134 + (1.0 - v130) * v133;
          v46 = (1.0 - v42) * v140 + v42 * v141;
          v47 = v42 * ((1.0 - v42) * v46 + v42 * ((1.0 - v42) * v141 + v42 * v142))
              + (1.0 - v42) * (v42 * v46 + (1.0 - v42) * (v42 * v140 + (1.0 - v42) * v139));
          v159 = v47;
          v160 = (1.0 - v42) * v46 + v42 * ((1.0 - v42) * v141 + v42 * v142);
          v161 = (1.0 - v42) * v141 + v42 * v142;
          v162 = v142;
          v144 = (1.0 - v42) * v135 + v42 * v136;
          v145 = v136;
          v147.f64[1] = v130 * ((1.0 - v130) * v134 + v130 * v135) + (1.0 - v130) * v147.f64[0];
          v148 = v41;
          v143[0] = v41;
          v143[1] = (1.0 - v42) * ((1.0 - v42) * v134 + v42 * v135) + v42 * v144;
          sub_20BF7C3BC(&v146, &v163, a7, v11, a3, a4, a5, v125);
          v48 = a7[1];
          v49 = v48 - *a7;
          if (v48 == *a7)
          {
            v53 = 0;
          }
          else
          {
            v154 = 0;
            v152 = 0;
            sub_20BF7B118((uint64_t)&v155, &v153, &v151, 0, 0.0, 0.0);
            v50 = a7[1];
            if (v50 >= a7[2])
            {
              v52 = sub_20BF7ADA8(a7, &v155);
            }
            else
            {
              v51 = v155;
              *(double *)(v50 + 16) = v156;
              *(_OWORD *)v50 = v51;
              sub_20BF4C200((_QWORD *)(v50 + 24), v157);
              sub_20BF4C200((_QWORD *)(v50 + 40), v158);
              v52 = v50 + 56;
            }
            a7[1] = v52;
            sub_20BF4C2D8((uint64_t)v158);
            sub_20BF4C2D8((uint64_t)v157);
            sub_20BF4C2D8((uint64_t)&v151);
            sub_20BF4C2D8((uint64_t)&v153);
            v53 = 0x6DB6DB6DB6DB6DB7 * (v49 >> 3) + 1;
          }
          sub_20BF7C3BC(v143, &v159, a7, v11, a3, a4, a5, v125);
          v54 = v53 - 2;
          if (v53 < 2)
            goto LABEL_26;
          v56 = *a7;
          v55 = a7[1];
          if (v53 == 0x6DB6DB6DB6DB6DB7 * ((v55 - *a7) >> 3))
          {
            v57 = v56 + 56 * v54;
            v59 = *(double *)(v57 + 16);
            v58 = (double *)(v57 + 16);
            v60 = v59;
            if (v59 >= a3)
            {
              sub_20BF7C364((uint64_t)a7, v55 - 56);
              goto LABEL_26;
            }
            v61 = v53 - 1;
            v62 = v56 + 56 * v54;
            v63 = (v60 - *(double *)(v62 + 8)) * 0.001;
            if (v63 > 0.001)
              v63 = 0.001;
            v64 = v60 - v63;
            *v58 = v64;
            *(double *)(v56 + 56 * v61 + 8) = v64;
            sub_20BF4C6D0(&v155, (_QWORD *)(v62 + 40));
            v65 = (_QWORD *)(v56 + 56 * v61);
            sub_20BF4B5D8(v65 + 3, &v155);
            sub_20BF4C2D8((uint64_t)&v155);
            *((double *)v65 + 2) = v45;
            *((_QWORD *)&v155 + 1) = &unk_24C52064B;
            v66 = v65 + 5;
            *(double *)&v155 = v43;
          }
          else
          {
            v67 = v53 - 1;
            v68 = v56 + 56 * v54;
            v69 = *(double *)(v68 + 16);
            v70 = (v69 - *(double *)(v68 + 8)) * 0.001;
            if (v70 > 0.001)
              v70 = 0.001;
            v71 = v69 - v70;
            *(double *)(v68 + 16) = v71;
            *(double *)(v56 + 56 * v67 + 8) = v71;
            sub_20BF4C6D0(&v155, (_QWORD *)(v68 + 40));
            v72 = v56 + 56 * v67;
            sub_20BF4B5D8((_QWORD *)(v72 + 24), &v155);
            sub_20BF4C2D8((uint64_t)&v155);
            *(double *)(v72 + 16) = v41;
            *((_QWORD *)&v155 + 1) = &unk_24C52064B;
            *(double *)&v155 = v47;
            v66 = (_QWORD *)(v72 + 40);
          }
          sub_20BF4B5D8(v66, &v155);
          sub_20BF4C2D8((uint64_t)&v155);
        }
        else
        {
          sub_20BF7C3BC(&v133, &v139, a7, v11, a3, a4, a5, v125);
        }
      }
LABEL_26:
      v30 = v33;
      if (v33 == v32)
        goto LABEL_56;
    }
  }
  if (!strcmp(v15, (const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v74 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
    v124 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
    v75 = *(double *)(v74 + 8);
    if (v75 > v11)
    {
      sub_20BF7AA7C(this, a7, v75, v11 - v75 + -100.0);
      v11 = *(double *)(v74 + 8);
      if (v11 >= a3)
        return;
    }
    v76 = sub_20BF7ACBC(this, v11, a3);
    v78 = v77;
    if (v76 != v77)
    {
      v79 = 1.0;
      v126 = a6;
      do
      {
        v80 = v76 + 72;
        if (v76 + 72 != *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
        {
          sub_20BF7BB64((uint64_t)&v131, (pxrInternal__aapl__pxrReserved__ *)v76, (pxrInternal__aapl__pxrReserved__ *)(v76 + 72));
          v129 = 1.0;
          v130 = 0.0;
          v147 = vmulq_f64(*(float64x2_t *)v138, (float64x2_t)xmmword_20CA9F2D0);
          v146 = v137;
          if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v146, &v130, &v129, v81)&& v130 >= -1.0e-10&& v129 <= v79&& (v82 = v136 + v130 * (v137 + v130 * (v130 * *(double *)&v138[8] + *(double *)v138)), v83 = v136 + v129 * (v137 + v129 * (v129 * *(double *)&v138[8] + *(double *)v138)), v82 >= v83))
          {
            v84 = v135;
            if (v83 <= v135)
              v85 = v136 + v129 * (v137 + v129 * (v129 * *(double *)&v138[8] + *(double *)v138));
            else
              v85 = v135;
            if (v83 >= *(double *)&v132)
              v86 = v85;
            else
              v86 = *(double *)&v132;
            if (v82 <= v135)
              v84 = v136 + v130 * (v137 + v130 * (v130 * *(double *)&v138[8] + *(double *)v138));
            if (v82 >= *(double *)&v132)
              v87 = v84;
            else
              v87 = *(double *)&v132;
            v88 = (v87 + v86) * 0.5;
            *(_QWORD *)&v155 = 0;
            BYTE8(v155) = 1;
            v156 = v130;
            LOBYTE(v157[0]) = fabs(v130) != INFINITY;
            v130 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v136, &v146, (uint64_t)&v155, v88);
            *(double *)&v155 = v129;
            BYTE8(v155) = fabs(v129) != INFINITY;
            v156 = 1.0;
            LOBYTE(v157[0]) = 1;
            v89 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v136, &v146, (uint64_t)&v155, v88);
            v129 = v89;
            v90 = v79;
            v91 = v130;
            sub_20BF7C898((uint64_t)&v138[16], (uint64_t)v143, 1, v130);
            v92 = v133;
            v93 = v134;
            v94 = v91 * v133 + (1.0 - v91) * *(double *)&v132;
            v95 = (1.0 - v91) * v94;
            v96 = v91 * ((1.0 - v91) * v133 + v91 * v134);
            v79 = v90;
            v97 = v88;
            v98 = v135;
            v163 = *(double *)&v132;
            v164 = v94;
            v165 = v96 + v95;
            sub_20BF7C898((uint64_t)&v138[16], (uint64_t)&v149, 0, v89);
            v161 = (1.0 - v89) * v93 + v89 * v98;
            v162 = v98;
            v166 = v97;
            v159 = v97;
            v160 = (1.0 - v89) * ((1.0 - v89) * v92 + v89 * v93) + v89 * v161;
            a6 = v126;
            sub_20BF7C9D4(&v163, (uint64_t)v143, a7, v11, a3, a4, a5, v126);
            v99 = a7[1];
            v100 = v99 - *a7;
            if (v99 == *a7)
            {
              v104 = 0;
            }
            else
            {
              v154 = 0;
              v152 = 0;
              sub_20BF7B118((uint64_t)&v155, &v153, &v151, 0, 0.0, 0.0);
              v101 = a7[1];
              if (v101 >= a7[2])
              {
                v103 = sub_20BF7ADA8(a7, &v155);
              }
              else
              {
                v102 = v155;
                *(double *)(v101 + 16) = v156;
                *(_OWORD *)v101 = v102;
                sub_20BF4C200((_QWORD *)(v101 + 24), v157);
                sub_20BF4C200((_QWORD *)(v101 + 40), v158);
                v103 = v101 + 56;
              }
              a7[1] = v103;
              sub_20BF4C2D8((uint64_t)v158);
              sub_20BF4C2D8((uint64_t)v157);
              sub_20BF4C2D8((uint64_t)&v151);
              sub_20BF4C2D8((uint64_t)&v153);
              v104 = 0x6DB6DB6DB6DB6DB7 * (v100 >> 3) + 1;
            }
            sub_20BF7C9D4(&v159, (uint64_t)&v149, a7, v11, a3, a4, a5, v126);
            v105 = v104 - 2;
            if (v104 < 2)
              goto LABEL_67;
            v107 = *a7;
            v106 = a7[1];
            if (v104 == 0x6DB6DB6DB6DB6DB7 * ((v106 - *a7) >> 3))
            {
              v108 = v107 + 56 * v105;
              v110 = *(double *)(v108 + 16);
              v109 = (double *)(v108 + 16);
              v111 = v110;
              if (v110 >= a3)
              {
                sub_20BF7C364((uint64_t)a7, v106 - 56);
                goto LABEL_67;
              }
              v112 = v104 - 1;
              v113 = v107 + 56 * v105;
              v114 = (v111 - *(double *)(v113 + 8)) * 0.001;
              if (v114 > 0.001)
                v114 = 0.001;
              v115 = v111 - v114;
              *v109 = v115;
              *(double *)(v107 + 56 * v112 + 8) = v115;
              sub_20BF4C6D0(&v155, (_QWORD *)(v113 + 40));
              v116 = v107 + 56 * v112;
              sub_20BF4B5D8((_QWORD *)(v116 + 24), &v155);
              sub_20BF4C2D8((uint64_t)&v155);
              *(double *)(v116 + 16) = v98;
              *((_QWORD *)&v155 + 1) = &unk_24C520593;
              v117 = HIDWORD(v150.f64[0]);
            }
            else
            {
              v118 = v104 - 1;
              v119 = v107 + 56 * v105;
              v120 = *(double *)(v119 + 16);
              v121 = (v120 - *(double *)(v119 + 8)) * 0.001;
              if (v121 > 0.001)
                v121 = 0.001;
              v122 = v120 - v121;
              *(double *)(v119 + 16) = v122;
              *(double *)(v107 + 56 * v118 + 8) = v122;
              sub_20BF4C6D0(&v155, (_QWORD *)(v119 + 40));
              v116 = v107 + 56 * v118;
              sub_20BF4B5D8((_QWORD *)(v116 + 24), &v155);
              sub_20BF4C2D8((uint64_t)&v155);
              *(double *)(v116 + 16) = v97;
              *((_QWORD *)&v155 + 1) = &unk_24C520593;
              v117 = v149;
            }
            LODWORD(v155) = v117;
            sub_20BF4B5D8((_QWORD *)(v116 + 40), &v155);
            sub_20BF4C2D8((uint64_t)&v155);
          }
          else
          {
            sub_20BF7C9D4((double *)&v132, (uint64_t)&v138[16], a7, v11, a3, a4, a5, a6);
          }
        }
LABEL_67:
        v76 = v80;
      }
      while (v80 != v78);
    }
    v73 = v124;
LABEL_98:
    v27 = *(double *)(v73 - 64);
LABEL_99:
    if (v27 < a3)
      sub_20BF7AA7C(this, a7, v27, a3 - v27 + 100.0);
    return;
  }
  v16 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  v17 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
  v18 = *(double *)(v16 + 8);
  if (v18 <= v11 || (sub_20BF7AA7C(this, a7, v18, v11 - v18 + -100.0), v11 = *(double *)(v16 + 8), v11 < a3))
  {
    v19 = sub_20BF7ACBC(this, v11, a3);
    v21 = v20;
    while (v19 != v21)
    {
      v22 = *(double *)(v19 + 8);
      v23 = *(double *)(v19 + 80);
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 1, (uint64_t *)&v155, v22);
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 0, (uint64_t *)&v163, v23);
      sub_20BF7B118((uint64_t)&v131, &v155, &v163, 0, v22, v23);
      v24 = a7[1];
      if (v24 >= a7[2])
      {
        v26 = sub_20BF7ADA8(a7, &v131);
      }
      else
      {
        v25 = v131;
        *(double *)(v24 + 16) = *(double *)&v132;
        *(_OWORD *)v24 = v25;
        sub_20BF4C200((_QWORD *)(v24 + 24), &v133);
        sub_20BF4C200((_QWORD *)(v24 + 40), &v135);
        v26 = v24 + 56;
      }
      v19 += 72;
      a7[1] = v26;
      sub_20BF4C2D8((uint64_t)&v135);
      sub_20BF4C2D8((uint64_t)&v133);
      sub_20BF4C2D8((uint64_t)&v163);
      sub_20BF4C2D8((uint64_t)&v155);
    }
    v27 = *(double *)(v17 - 64);
    goto LABEL_99;
  }
}

void sub_20BF7A384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,void **a56)
{
  sub_20BF4C2D8(a11);
  sub_20BF4C2D8(a12);
  sub_20BF4C2D8((uint64_t)&a54);
  sub_20BF4C2D8((uint64_t)&a56);
  sub_20BF7C324(&a56);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Ts_Breakdown(double **this, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2)
{
  double *v2;
  double v3;
  uint64_t Typeid;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t v8;
  const double *v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  uint64_t KeyFrames;
  const double *v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  unint64_t *p_shared_owners;
  double v52;
  double v53;
  double v54;
  double v55;
  char *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  double v60;
  double v61;
  float64x2_t v62[2];
  _QWORD v63[9];
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v64;
  std::__shared_weak_count *v65;
  uint64_t v66[2];
  double v67[2];
  double v68[2];
  double v69[2];
  double v70;
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if ((char *)this[1] - (char *)*this != 216)
  {
    v56 = "ts/evalUtils.cpp";
    v57 = "Ts_Breakdown";
    v58 = 1129;
    *(double *)&v59 = COERCE_DOUBLE("void pxrInternal__aapl__pxrReserved__::Ts_Breakdown(TsKeyFrameMap *)");
    LOBYTE(v60) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56, 1, (pxrInternal__aapl__pxrReserved__ *)"Wrong number of key frames in breakdown");
    return;
  }
  v3 = v2[10];
  if (v2[1] >= v3 || v3 >= v2[19])
  {
    v56 = "ts/evalUtils.cpp";
    v57 = "Ts_Breakdown";
    v58 = 1138;
    *(double *)&v59 = COERCE_DOUBLE("void pxrInternal__aapl__pxrReserved__::Ts_Breakdown(TsKeyFrameMap *)");
    LOBYTE(v60) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56, 1, (pxrInternal__aapl__pxrReserved__ *)"Bad key frame ordering in breakdown");
    return;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v66, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*this);
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
  if (!strcmp((const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v56);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v64, this, 0, 0, &v56);
    v28 = *(pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v64);
    KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v64);
    sub_20BF7B2AC((uint64_t)&v56, v28, (pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(KeyFrames + 8) - 72));
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)&v62[0].f64[1], v30, v2[10], v31, v32);
    v34 = v33;
    v36 = *(double *)&v63[3];
    v35 = *(double *)&v63[4];
    v38 = *(double *)&v63[1];
    v37 = *(double *)&v63[2];
    v39 = v61;
    v40 = v60;
    v54 = v62[0].f64[0];
    v55 = *(double *)&v59;
    v41 = pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9));
    v42 = 1.0 - v34;
    v43 = (1.0 - v34) * v40 + v34 * v39;
    v52 = (1.0 - v34) * v39 + v34 * v54;
    v44 = v34 * v40 + (1.0 - v34) * v55;
    v45 = v34 * v43 + (1.0 - v34) * v44;
    v53 = (1.0 - v34) * v43 + v34 * v52;
    v46 = v34 * v53 + (1.0 - v34) * v45;
    if (v41)
    {
      v47 = v42 * v37 + v34 * v36;
      v48 = v42 * v47 + v34 * (v42 * v36 + v34 * v35);
      v49 = v34 * v47 + v42 * (v34 * v37 + v42 * v38);
      v50 = v34 * v48 + v42 * v49;
      v71 = &unk_24C52064B;
      v70 = (v50 - v49) / (v46 - v45);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), &v70);
      sub_20BF4C2D8((uint64_t)&v70);
      *(_QWORD *)&v69[1] = &unk_24C52064B;
      v69[0] = (v48 - v50) / (v53 - v46);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v69);
      sub_20BF4C2D8((uint64_t)v69);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2, v44 - v55);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9)))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v46 - v45);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9)))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v53 - v46);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18)))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18), v54 - v52);
    v25 = v65;
    if (!v65)
      goto LABEL_37;
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
  }
  else
  {
    v6 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
    if (strcmp((const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      goto LABEL_37;
    }
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v56);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v64, this, 0, 0, &v56);
    v7 = *(pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v64);
    v8 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v64);
    sub_20BF7BB64((uint64_t)&v56, v7, (pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v8 + 8) - 72));
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v62, v9, v2[10], v10, v11);
    v13 = v12;
    sub_20BF7C898((uint64_t)v63, (uint64_t)&v70, 1, v12);
    v15 = v60;
    v14 = v61;
    v16 = *(double *)&v58;
    v17 = *(double *)&v59;
    sub_20BF7C898((uint64_t)v63, (uint64_t)v69, 0, v13);
    v18 = pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9));
    v19 = (1.0 - v13) * v17 + v13 * v15;
    v20 = (1.0 - v13) * v15 + v13 * v14;
    v21 = (1.0 - v13) * v19 + v13 * v20;
    v22 = v13 * v17 + (1.0 - v13) * v16;
    v23 = v13 * v19 + (1.0 - v13) * v22;
    v24 = v13 * v21 + (1.0 - v13) * v23;
    if (v18)
    {
      *(_QWORD *)&v68[1] = &unk_24C52064B;
      v68[0] = (float)(*((float *)&v71 + 1) - *(float *)&v71) / (v24 - v23);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v68);
      sub_20BF4C2D8((uint64_t)v68);
      *(_QWORD *)&v67[1] = &unk_24C52064B;
      v67[0] = (float)(*((float *)v69 + 1) - *(float *)v69) / (v21 - v24);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v67);
      sub_20BF4C2D8((uint64_t)v67);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2, v22 - v16);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9)))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v24 - v23);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9)))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v21 - v24);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18)))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18), v14 - v20);
    v25 = v65;
    if (!v65)
      goto LABEL_37;
    v26 = (unint64_t *)&v65->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
  }
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_37:
  sub_20BF4C2D8((uint64_t)v66);
}

void sub_20BF7A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_20BF4C2D8(v34 - 184);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a32);
  sub_20BF4C2D8((uint64_t)&a34);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF7AA34(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = sub_20BF4C6D0(a1, a2);
  sub_20BF4C6D0(v5 + 2, a3);
  return a1;
}

void sub_20BF7AA68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF7AA7C(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, double a3, double a4)
{
  double v8;
  unint64_t v9;
  double v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v19[1] = 0;
  v18[1] = 0;
  if (a4 >= 0.0)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 1, (uint64_t *)&v14, a3);
    sub_20BF4B5D8(v19, &v14);
    sub_20BF4C2D8((uint64_t)&v14);
    v10 = a3 + a4;
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 0, (uint64_t *)&v14, v10);
    sub_20BF4B5D8(v18, &v14);
    sub_20BF4C2D8((uint64_t)&v14);
    sub_20BF7B118((uint64_t)&v14, v19, v18, 0, a3, v10);
    v9 = a2[1];
    if (v9 >= a2[2])
    {
LABEL_6:
      v12 = sub_20BF7ADA8(a2, &v14);
      goto LABEL_7;
    }
  }
  else
  {
    v8 = a3 + a4;
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 1, (uint64_t *)&v14, a3 + a4);
    sub_20BF4B5D8(v19, &v14);
    sub_20BF4C2D8((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 0, (uint64_t *)&v14, a3);
    sub_20BF4B5D8(v18, &v14);
    sub_20BF4C2D8((uint64_t)&v14);
    sub_20BF7B118((uint64_t)&v14, v19, v18, 0, v8, a3);
    v9 = a2[1];
    if (v9 >= a2[2])
      goto LABEL_6;
  }
  v11 = v14;
  *(_QWORD *)(v9 + 16) = v15;
  *(_OWORD *)v9 = v11;
  sub_20BF4C200((_QWORD *)(v9 + 24), v16);
  sub_20BF4C200((_QWORD *)(v9 + 40), v17);
  v12 = v9 + 56;
LABEL_7:
  a2[1] = v12;
  sub_20BF4C2D8((uint64_t)v17);
  sub_20BF4C2D8((uint64_t)v16);
  sub_20BF4C2D8((uint64_t)v18);
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BF7AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF4C2D8(v8 + 40);
  sub_20BF4C2D8(v8 + 24);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF7ACBC(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  char v9;
  double v10;
  double v11;

  v11 = a2;
  v10 = a3;
  if (a2 <= a3)
  {
    v5 = pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v11);
    if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v5)
      v6 = 0;
    else
      v6 = -1;
    v4 = v5 + 72 * v6;
    pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v10);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  }
  else
  {
    v8[0] = "ts/evalUtils.cpp";
    v8[1] = "_GetBounds";
    v8[2] = 387;
    v8[3] = "std::pair<TsSpline::const_iterator, TsSpline::const_iterator> pxrInternal__aapl__pxrReserved__::_GetBounds(c"
            "onst TsSpline &, TsTime, TsTime)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"invalid interval (start > end)");
    v4 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  }
  return v4;
}

uint64_t sub_20BF7ADA8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE16B34(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[56 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  sub_20BF4C200((_QWORD *)v11 + 3, (_QWORD *)a2 + 3);
  sub_20BF4C200((_QWORD *)v11 + 5, (_QWORD *)a2 + 5);
  v15[2] = v11 + 56;
  sub_20BF7AEDC(a1, v15);
  v13 = a1[1];
  sub_20BF7B08C((uint64_t)v15);
  return v13;
}

void sub_20BF7AEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF7B08C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF7AEDC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF7AF50((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF7AF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_OWORD *)(v9 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(v9 - 40);
      *(_OWORD *)(v7 - 56) = v10;
      sub_20BF4C200((_QWORD *)(v7 - 32), (_QWORD *)(v9 - 32));
      sub_20BF4C200((_QWORD *)(v7 - 16), (_QWORD *)(v9 - 16));
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20BF7B014((uint64_t)v13);
  return v11;
}

uint64_t sub_20BF7B014(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF7B048(a1);
  return a1;
}

uint64_t sub_20BF7B048(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    sub_20BF4C2D8(v1 + 40);
    result = sub_20BF4C2D8(v1 + 24);
    v1 += 56;
  }
  return result;
}

uint64_t sub_20BF7B08C(uint64_t a1)
{
  sub_20BF7B0C0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BF7B0C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 56;
      sub_20BF4C2D8(v2 - 16);
      result = sub_20BF4C2D8(v2 - 32);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_20BF7B118(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4, double a5, double a6)
{
  *(_BYTE *)a1 = a4;
  *(double *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a6;
  sub_20BF4C6D0((_QWORD *)(a1 + 24), a2);
  sub_20BF4C6D0((_QWORD *)(a1 + 40), a3);
  return a1;
}

void sub_20BF7B164(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF7B178@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = operator new(8uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BF7B1B8;
  a1[2] = MEMORY[0x24BEDB780];
  return result;
}

void sub_20BF7B1B8(void *__p)
{
  if (__p)
    operator delete(__p);
}

double sub_20BF7B1C4(_QWORD *a1)
{
  double *v2;
  double v3;
  uint64_t v4;
  BOOL v5;

  v2 = (double *)sub_20BF7B220(a1);
  v3 = *v2;
  *v2 = 0.0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

_QWORD *sub_20BF7B220(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_20BF7B2AC(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__ *a3)
{
  _QWORD *KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD v11[4];
  char v12;

  *(_QWORD *)a1 = &unk_24C520890;
  KeyFrameData = (_QWORD *)pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, this);
  v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a3, v6);
  if (KeyFrameData && (v8 = v7) != 0)
  {
    sub_20BF7B4E4(a1 + 24, a1 + 88, (uint64_t)KeyFrameData, v7);
    v9 = sub_20BF7B5E4(a1 + 24);
    if ((*(unsigned int (**)(_QWORD *, double))(*KeyFrameData + 152))(KeyFrameData, v9)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 152))(v8))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = KeyFrameData[3];
    }
  }
  else
  {
    v11[0] = "ts/evalCache.h";
    v11[1] = "_Init";
    v11[2] = 499;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<double, true>::_Init(const Ts_TypedData<T> *, const Ts_"
             "TypedData<T> *) [T = double, INTERPOLATABLE = true]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_20BF7B3B0(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = *(double *)(a1 + 120)
        + v11 * (*(double *)(a1 + 128) + v11 * (*(double *)(a1 + 136) + *(double *)(a1 + 144) * v11));
  }
  else
  {
    v12 = *(double *)(a1 + 16);
  }
  *(_QWORD *)(a5 + 8) = &unk_24C52064B;
  *(double *)a5 = v12;
}

void sub_20BF7B434(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    if (v8 <= 1.0)
      v9 = v8;
    else
      v9 = 1.0;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = (*(double *)(a1 + 128)
         + v11 * (*(double *)(a1 + 136) + *(double *)(a1 + 136) + *(double *)(a1 + 144) * (v11 * 3.0)))
        * (1.0
         / (*(double *)(a1 + 64) + v11
                                 * (v11 * 3.0 * *(double *)(a1 + 80) + *(double *)(a1 + 72) + *(double *)(a1 + 72))));
  }
  else
  {
    v12 = *(double *)pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  }
  *(_QWORD *)(a5 + 8) = &unk_24C52064B;
  *(double *)a5 = v12;
}

double sub_20BF7B4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  double *v10;
  double result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = (double *)(a3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(a3 + 24);
  *(double *)(a2 + 8) = sub_20BF7B660(a3, a4);
  *(double *)(a2 + 16) = sub_20BF7B6C8(a3, a4);
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v10 = (double *)(a4 + 16);
    else
      v10 = (double *)(a4 + 24);
  }
  result = *v10;
  *(double *)(a2 + 24) = *v10;
  return result;
}

double sub_20BF7B5E4(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 - v2 * 6.0;
  v6 = *(double *)(a1 + 16) * 3.0;
  v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  v8 = *(double *)(a1 + 64);
  v9 = *(double *)(a1 + 72);
  *(double *)(a1 + 96) = v8;
  *(double *)(a1 + 104) = v9 * 3.0 - v8 * 3.0;
  v10 = *(double *)(a1 + 80);
  result = v9 * 3.0 - v8 - v10 * 3.0 + *(double *)(a1 + 88);
  *(double *)(a1 + 112) = v8 * 3.0 - v9 * 6.0 + v10 * 3.0;
  *(double *)(a1 + 120) = result;
  return result;
}

double sub_20BF7B660(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v4 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v4 = 24;
    return (*(double *)(a1 + 24) + *(double *)(a1 + 24) + *(double *)(a2 + v4)) * 0.333333333;
  }
  else if (v2 == 2)
  {
    return *(double *)(a1 + 24) + *(double *)(a1 + 56) * *(double *)(a1 + 40);
  }
  else
  {
    return *(double *)(a1 + 24);
  }
}

double sub_20BF7B6C8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
    return *(double *)(a1 + 24);
  v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1)
    goto LABEL_9;
  if (v3 == 2)
  {
    v4 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v4 = 24;
    return *(double *)(a2 + v4) - *(double *)(a2 + 48) * *(double *)(a2 + 32);
  }
  if (v2 == 1)
  {
LABEL_9:
    v6 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v6 = 24;
    return (*(double *)(a1 + 24) + *(double *)(a2 + v6) + *(double *)(a2 + v6)) * 0.333333333;
  }
  else
  {
    v7 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v7 = 24;
    return *(double *)(a2 + v7);
  }
}

double sub_20BF7B770(float64x2_t *a1, const double *a2, uint64_t a3, double *a4, double a5, double a6)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a1->f64[0] >= a5)
  {
    v11 = a1[1].f64[1];
    v12 = 1.0;
    v10 = 0.0;
    if (v11 <= a6)
    {
LABEL_18:
      v15 = a1[4].f64[0];
      goto LABEL_20;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(a1 + 2, a2, a5, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    if (v8 >= 0.0)
      v10 = v9;
    else
      v10 = 0.0;
    v11 = a1[1].f64[1];
  }
  v12 = 1.0;
  if (v11 > a6)
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(a1 + 2, a2, a6, a3, a4);
    v14 = 1.0;
    if (v13 <= 1.0)
      v14 = v13;
    if (v13 >= 0.0)
      v12 = v14;
    else
      v12 = 0.0;
  }
  if (v10 > v12)
    v10 = v12;
  if (v10 == 0.0)
    goto LABEL_18;
  v15 = a1[6].f64[0] + v10 * (a1[6].f64[1] + v10 * (v10 * a1[7].f64[1] + a1[7].f64[0]));
LABEL_20:
  v16 = a1[6].f64[1];
  if (v12 == 1.0)
  {
    v17 = a1[5].f64[1];
    if (v15 >= v17)
      v18 = a1[5].f64[1];
    else
      v18 = v15;
    v19 = a1[7];
  }
  else
  {
    v19 = a1[7];
    v20 = a1[6].f64[0] + v12 * (v16 + v12 * (vmuld_lane_f64(v12, v19, 1) + v19.f64[0]));
    if (v15 >= v20)
      v18 = v20;
    else
      v18 = v15;
  }
  v24 = 0.0;
  v25 = 0.0;
  v27 = vmulq_f64(v19, (float64x2_t)xmmword_20CA9F2D0);
  v26 = v16;
  if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v26, &v25, &v24, a4))
  {
    if (v25 > v10 && v25 < v12)
    {
      v21 = a1[6].f64[0] + v25 * (a1[6].f64[1] + v25 * (v25 * a1[7].f64[1] + a1[7].f64[0]));
      if (v18 >= v21)
        v18 = a1[6].f64[0] + v25 * (a1[6].f64[1] + v25 * (v25 * a1[7].f64[1] + a1[7].f64[0]));
    }
    if (v24 > v10 && v24 < v12)
    {
      v22 = a1[6].f64[0] + v24 * (a1[6].f64[1] + v24 * (v24 * a1[7].f64[1] + a1[7].f64[0]));
      if (v18 >= v22)
        return a1[6].f64[0] + v24 * (a1[6].f64[1] + v24 * (v24 * a1[7].f64[1] + a1[7].f64[0]));
    }
  }
  return v18;
}

float sub_20BF7B9A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BF7B9F8(a1) & 1) != 0)
    return sub_20BF7BA70(a1);
  else
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF7BA30, MEMORY[0x24BEDB788]);
}

uint64_t sub_20BF7B9F8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB788]);
  else
    return 0;
}

_DWORD *sub_20BF7BA30@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BF7BACC;
  a1[2] = MEMORY[0x24BEDB788];
  return result;
}

float sub_20BF7BA70(_QWORD *a1)
{
  float *v2;
  float v3;
  uint64_t v4;
  BOOL v5;

  v2 = (float *)sub_20BF7BAD8(a1);
  v3 = *v2;
  *v2 = 0.0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

void sub_20BF7BACC(void *__p)
{
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20BF7BAD8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_20BF7BB64(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__ *a3)
{
  _DWORD *KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD v11[4];
  char v12;

  *(_QWORD *)a1 = &unk_24C5208D8;
  KeyFrameData = (_DWORD *)pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, this);
  v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a3, v6);
  if (KeyFrameData && (v8 = v7) != 0)
  {
    sub_20BF7BDC8(a1 + 16, a1 + 80, (uint64_t)KeyFrameData, v7);
    *(float32x2_t *)&v9 = sub_20BF7BEC8(a1 + 16);
    if ((*(unsigned int (**)(_DWORD *, double))(*(_QWORD *)KeyFrameData + 152))(KeyFrameData, v9)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 152))(v8))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = KeyFrameData[5];
    }
  }
  else
  {
    v11[0] = "ts/evalCache.h";
    v11[1] = "_Init";
    v11[2] = 499;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<float, true>::_Init(const Ts_TypedData<T> *, const Ts_T"
             "ypedData<T> *) [T = float, INTERPOLATABLE = true]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_20BF7BC68(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  float v12;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 48), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = v11 * (v11 * (v11 * *(float *)(a1 + 108) + *(float *)(a1 + 104)) + *(float *)(a1 + 100)) + *(float *)(a1 + 96);
  }
  else
  {
    v12 = *(float *)(a1 + 12);
  }
  *(_QWORD *)(a5 + 8) = &unk_24C520593;
  *(float *)a5 = v12;
}

void sub_20BF7BD00(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  float v12;
  float v13;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 48), a2, a6, a3, a4);
    if (v8 <= 1.0)
      v9 = v8;
    else
      v9 = 1.0;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = v11 * (*(float *)(a1 + 104) + *(float *)(a1 + 104) + v11 * 3.0 * *(float *)(a1 + 108)) + *(float *)(a1 + 100);
    v13 = 1.0
        / (*(double *)(a1 + 56) + v11 * (v11 * 3.0 * *(double *)(a1 + 72) + *(double *)(a1 + 64) + *(double *)(a1 + 64)))
        * v12;
  }
  else
  {
    v13 = *(float *)pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  }
  *(_QWORD *)(a5 + 8) = &unk_24C520593;
  *(float *)a5 = v13;
}

float sub_20BF7BDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  float *v10;
  float result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = (float *)(a3 + 20);
  *(_DWORD *)a2 = *(_DWORD *)(a3 + 20);
  *(float *)(a2 + 4) = sub_20BF7BF64(a3, a4);
  *(float *)(a2 + 8) = sub_20BF7BFE0(a3, a4);
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v10 = (float *)(a4 + 16);
    else
      v10 = (float *)(a4 + 20);
  }
  result = *v10;
  *(float *)(a2 + 12) = *v10;
  return result;
}

float32x2_t sub_20BF7BEC8(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float64x2_t v9;
  float64_t v10;
  float64x2_t v11;
  float v12;
  float64x2_t v13;
  float64x2_t v14;
  float32x2_t result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 + v2 * -6.0;
  v6 = *(double *)(a1 + 16) * 3.0;
  v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 64);
  v8 = *(float *)&v7;
  v9.f64[0] = *(float *)&v7 * 3.0;
  v10 = *(float *)(a1 + 76);
  v11 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 68));
  v12 = 3.0 * v11.f64[0] - v9.f64[0];
  *(_DWORD *)(a1 + 80) = LODWORD(v7);
  *(float *)(a1 + 84) = v12;
  v13 = vmulq_f64(v11, (float64x2_t)xmmword_20CA9F2E0);
  v9.f64[1] = 3.0 * v11.f64[0] - v8;
  *(_QWORD *)&v14.f64[0] = vdupq_laneq_s64((int64x2_t)v13, 1).u64[0];
  v14.f64[1] = v10;
  result = vcvt_f32_f64(vaddq_f64(vsubq_f64(v9, v13), v14));
  *(float32x2_t *)(a1 + 88) = result;
  return result;
}

float sub_20BF7BF64(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v4 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v4 = 20;
    return (*(float *)(a1 + 20) + *(float *)(a1 + 20) + *(float *)(a2 + v4)) * 0.333333333;
  }
  if (v2 == 2)
    return *(double *)(a1 + 56) * *(float *)(a1 + 28) + *(float *)(a1 + 20);
  return *(float *)(a1 + 20);
}

float sub_20BF7BFE0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
    return *(float *)(a1 + 20);
  v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1)
    goto LABEL_9;
  if (v3 == 2)
  {
    v4 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v4 = 20;
    return *(float *)(a2 + v4) - *(double *)(a2 + 48) * *(float *)(a2 + 24);
  }
  if (v2 == 1)
  {
LABEL_9:
    v7 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v7 = 20;
    return (*(float *)(a2 + v7) + *(float *)(a2 + v7) + *(float *)(a1 + 20)) * 0.333333333;
  }
  v8 = 16;
  if (!*(_BYTE *)(a2 + 68))
    v8 = 20;
  return *(float *)(a2 + v8);
}

float sub_20BF7C09C(uint64_t a1, const double *a2, uint64_t a3, double *a4, double a5, double a6)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  float v17;
  float v18;
  float64x2_t v19;
  float v20;
  float v21;
  float v22;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(double *)a1 >= a5)
  {
    v11 = *(double *)(a1 + 24);
    v12 = 1.0;
    v10 = 0.0;
    if (v11 <= a6)
    {
LABEL_18:
      v15 = *(float *)(a1 + 64);
      goto LABEL_20;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 32), a2, a5, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    if (v8 >= 0.0)
      v10 = v9;
    else
      v10 = 0.0;
    v11 = *(double *)(a1 + 24);
  }
  v12 = 1.0;
  if (v11 > a6)
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 32), a2, a6, a3, a4);
    v14 = 1.0;
    if (v13 <= 1.0)
      v14 = v13;
    if (v13 >= 0.0)
      v12 = v14;
    else
      v12 = 0.0;
  }
  if (v10 > v12)
    v10 = v12;
  if (v10 == 0.0)
    goto LABEL_18;
  v15 = v10 * (v10 * (v10 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84)) + *(float *)(a1 + 80);
LABEL_20:
  v16 = *(float *)(a1 + 84);
  if (v12 == 1.0)
  {
    v17 = *(float *)(a1 + 76);
    if (v15 >= v17)
      v18 = *(float *)(a1 + 76);
    else
      v18 = v15;
    v19 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 88));
  }
  else
  {
    v19 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 88));
    v20 = v12 * (v12 * (vmuld_lane_f64(v12, v19, 1) + v19.f64[0]) + v16) + *(float *)(a1 + 80);
    if (v15 >= v20)
      v18 = v20;
    else
      v18 = v15;
  }
  v24 = 0.0;
  v25 = 0.0;
  v27 = vmulq_f64(v19, (float64x2_t)xmmword_20CA9F2D0);
  v26 = v16;
  if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v26, &v25, &v24, a4))
  {
    if (v25 > v10 && v25 < v12)
    {
      v21 = v25 * (v25 * (v25 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84)) + *(float *)(a1 + 80);
      if (v18 >= v21)
        v18 = v25 * (v25 * (v25 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84))
            + *(float *)(a1 + 80);
    }
    if (v24 > v10 && v24 < v12)
    {
      v22 = v24 * (v24 * (v24 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84)) + *(float *)(a1 + 80);
      if (v18 >= v22)
        return v24 * (v24 * (v24 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84))
             + *(float *)(a1 + 80);
    }
  }
  return v18;
}

void sub_20BF7C324(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BF7C364((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_20BF7C364(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 56)
  {
    sub_20BF4C2D8(i - 16);
    result = sub_20BF4C2D8(i - 32);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void sub_20BF7C3BC(double *a1, double *a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  const double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 *v41;
  double v44;
  double v45;
  double v46;
  double v47;
  double v50;
  double v51;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  __int128 v61;
  double v62;
  _QWORD v63[2];
  _QWORD v64[2];
  float64x2_t v65;
  double v66;
  double v67[2];
  double v68[12];

  v68[11] = *(double *)MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = a1[3];
  if (v9 > a4 && v8 < a5 && v8 < v9)
  {
    v14 = *a2;
    v51 = a2[3];
    v15 = (v51 - *a2) * a7;
    v16 = (v9 - v8) * a6;
    v46 = a2[2];
    v47 = a2[1];
    v44 = a1[1];
    v17 = (v44 - v8) * a6;
    v18 = (v46 - *a2) * a7;
    v45 = a1[2];
    v19 = (v45 - v8) * a6;
    v20 = v16 * v16 + v15 * v15;
    v21 = (v15 * v18 + v16 * v19) / v20;
    v50 = a1[3];
    v22 = hypot((v47 - *a2) * a7 - v15 * ((v15 * ((v47 - *a2) * a7) + v16 * v17) / v20), v17 - v16 * ((v15 * ((v47 - *a2) * a7) + v16 * v17) / v20));
    v26 = hypot(v18 - v15 * v21, v19 - v16 * v21);
    if (v22 >= v26)
      v26 = v22;
    if (v26 <= a8)
    {
      *((_QWORD *)&v61 + 1) = &unk_24C52064B;
      *(double *)&v61 = v14;
      v58 = COERCE_DOUBLE(&unk_24C52064B);
      v57 = v51;
      sub_20BF7B118((uint64_t)&v65, &v61, &v57, 0, v8, v50);
      v31 = a3[1];
      if (v31 >= a3[2])
      {
        v33 = sub_20BF7ADA8(a3, (__int128 *)&v65);
      }
      else
      {
        v32 = v65;
        *(double *)(v31 + 16) = v66;
        *(float64x2_t *)v31 = v32;
        sub_20BF4C200((_QWORD *)(v31 + 24), v67);
        sub_20BF4C200((_QWORD *)(v31 + 40), v68);
        v33 = v31 + 56;
      }
      a3[1] = v33;
      sub_20BF4C2D8((uint64_t)v68);
      sub_20BF4C2D8((uint64_t)v67);
      sub_20BF4C2D8((uint64_t)&v57);
      v41 = &v61;
    }
    else
    {
      if (v16 > a8)
      {
        v27 = (v47 * 0.5 + v46 * 0.5) * 0.5;
        v28 = v27 + (v51 * 0.5 + v46 * 0.5) * 0.5;
        v65.f64[0] = v14;
        v65.f64[1] = v14 * 0.5 + v47 * 0.5;
        v66 = v65.f64[1] * 0.5 + v27;
        v67[0] = v28 * 0.5 + v66 * 0.5;
        v29 = (v44 * 0.5 + v45 * 0.5) * 0.5;
        v30 = v29 + (v50 * 0.5 + v45 * 0.5) * 0.5;
        v57 = v8;
        v58 = v8 * 0.5 + v44 * 0.5;
        v59 = v58 * 0.5 + v29;
        v60 = v30 * 0.5 + v59 * 0.5;
        *(double *)&v61 = v67[0];
        *((double *)&v61 + 1) = v28;
        v62 = v51 * 0.5 + v46 * 0.5;
        *(double *)v63 = v51;
        v53 = v60;
        v54 = v30;
        v55 = v50 * 0.5 + v45 * 0.5;
        v56 = v50;
        sub_20BF7C3BC(&v57, &v65, a3, a4, a5, a6, a7, a8);
        sub_20BF7C3BC(&v53, &v61, a3, a4, a5, a6, a7, a8);
        return;
      }
      v65.f64[0] = v8;
      v65.f64[1] = v44;
      v66 = v45;
      v67[0] = v50;
      v68[3] = v14;
      v68[4] = v47;
      v68[5] = v46;
      v68[6] = v51;
      v67[1] = v8;
      v68[0] = v44 * 3.0 - v8 * 3.0;
      v68[1] = v8 * 3.0 - v44 * 6.0 + v45 * 3.0;
      v68[2] = v50 + v44 * 3.0 - v8 - v45 * 3.0;
      v68[7] = v14;
      v68[8] = v47 * 3.0 - v14 * 3.0;
      v68[9] = v14 * 3.0 - v47 * 6.0 + v46 * 3.0;
      v68[10] = v51 + v47 * 3.0 - v14 - v46 * 3.0;
      v34 = sub_20BF7B770(&v65, v23, v24, v25, a4, a5);
      v36 = *a1;
      if (*a1 < a4)
        v36 = a4;
      v58 = COERCE_DOUBLE(&unk_24C52064B);
      v57 = v34;
      if (a1[3] >= a5)
        v37 = a5;
      else
        v37 = a1[3];
      v54 = COERCE_DOUBLE(&unk_24C52064B);
      v53 = v35;
      sub_20BF7B118((uint64_t)&v61, &v57, &v53, 1, v36, v37);
      v38 = a3[1];
      if (v38 >= a3[2])
      {
        v40 = sub_20BF7ADA8(a3, &v61);
      }
      else
      {
        v39 = v61;
        *(double *)(v38 + 16) = v62;
        *(_OWORD *)v38 = v39;
        sub_20BF4C200((_QWORD *)(v38 + 24), v63);
        sub_20BF4C200((_QWORD *)(v38 + 40), v64);
        v40 = v38 + 56;
      }
      a3[1] = v40;
      sub_20BF4C2D8((uint64_t)v64);
      sub_20BF4C2D8((uint64_t)v63);
      sub_20BF4C2D8((uint64_t)&v53);
      v41 = (__int128 *)&v57;
    }
    sub_20BF4C2D8((uint64_t)v41);
  }
}

void sub_20BF7C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_20BF4C2D8(v13 + 40);
  sub_20BF4C2D8(v13 + 24);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF7C898(uint64_t result, uint64_t a2, int a3, double a4)
{
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;

  v4 = 1.0 - a4;
  v5 = *(float *)(result + 4);
  v6 = *(float *)(result + 8);
  v7 = (1.0 - a4) * v5 + v6 * a4;
  if (a3)
  {
    v8 = v4 * v6 + *(float *)(result + 12) * a4;
    v9 = v7;
    v10 = v4 * v9 + v8 * a4;
    *(_DWORD *)a2 = *(_DWORD *)result;
    v11 = v4 * *(float *)result + *(float *)(result + 4) * a4;
    v12 = v9 * a4 + v4 * v11;
    v13 = v10 * a4 + v4 * v12;
    *(float *)(a2 + 12) = v13;
  }
  else
  {
    v14 = v5 * a4 + v4 * *(float *)result;
    v15 = v7;
    v16 = v7 * a4 + v4 * v14;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
    v12 = v4 * *(float *)(result + 8) + *(float *)(result + 12) * a4;
    v11 = v4 * v15 + v12 * a4;
    v17 = v4 * v16 + v11 * a4;
    *(float *)a2 = v17;
  }
  *(float *)(a2 + 4) = v11;
  *(float *)(a2 + 8) = v12;
  return result;
}

void sub_20BF7C9D4(double *a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  float v15;
  float v16;
  double v17;
  float v18;
  double v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  const double *v35;
  uint64_t v36;
  double *v37;
  float v38;
  int v39;
  double v40;
  double v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 *v45;
  float v46;
  float v47;
  double v50;
  double v51;
  double v54;
  float v55;
  _QWORD v57[2];
  __int128 v58;
  double v59;
  _QWORD v60[2];
  _QWORD v61[2];
  __int128 v62;
  double v63;
  double v64[2];
  _QWORD v65[3];
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = a1[3];
  if (v9 > a4 && v8 < a5 && v8 < v9)
  {
    v15 = *(float *)a2;
    v55 = *(float *)(a2 + 12);
    v16 = (float)(v55 - *(float *)a2) * a7;
    v17 = (v9 - v8) * a6;
    v46 = *(float *)(a2 + 8);
    v47 = *(float *)(a2 + 4);
    v18 = (float)(v47 - *(float *)a2) * a7;
    v54 = a1[3];
    v50 = a1[2];
    v51 = a1[1];
    v19 = (v51 - v8) * a6;
    v20 = (float)(v46 - *(float *)a2) * a7;
    v21 = (v50 - v8) * a6;
    v22 = v17 * v17 + (float)(v16 * v16);
    v23 = (v17 * v19 + (float)(v16 * v18)) / v22;
    v24 = (v17 * v21 + (float)(v16 * v20)) / v22;
    v25 = v16;
    v26 = hypot(v18 - v23 * v16, v19 - v17 * v23);
    v27 = hypot(v20 - v24 * v25, v21 - v17 * v24);
    if (v26 >= v27)
      v27 = v26;
    if (v27 <= a8)
    {
      *((_QWORD *)&v58 + 1) = &unk_24C520593;
      *(float *)&v58 = v15;
      v71 = &unk_24C520593;
      *(float *)&v70 = v55;
      sub_20BF7B118((uint64_t)&v62, &v58, &v70, 0, v8, v54);
      v32 = a3[1];
      if (v32 >= a3[2])
      {
        v34 = sub_20BF7ADA8(a3, &v62);
      }
      else
      {
        v33 = v62;
        *(double *)(v32 + 16) = v63;
        *(_OWORD *)v32 = v33;
        sub_20BF4C200((_QWORD *)(v32 + 24), v64);
        sub_20BF4C200((_QWORD *)(v32 + 40), v65);
        v34 = v32 + 56;
      }
      a3[1] = v34;
      sub_20BF4C2D8((uint64_t)v65);
      sub_20BF4C2D8((uint64_t)v64);
      sub_20BF4C2D8((uint64_t)&v70);
      v45 = &v58;
    }
    else
    {
      if (v17 > a8)
      {
        sub_20BF7C898(a2, (uint64_t)&v70, 1, 0.5);
        v28 = (v51 * 0.5 + v50 * 0.5) * 0.5;
        v29 = v28 + (v54 * 0.5 + v50 * 0.5) * 0.5;
        v30 = (v8 * 0.5 + v51 * 0.5) * 0.5 + v28;
        *(double *)&v62 = v8;
        *((double *)&v62 + 1) = v8 * 0.5 + v51 * 0.5;
        v31 = v29 * 0.5 + v30 * 0.5;
        v63 = v30;
        v64[0] = v31;
        sub_20BF7C898(a2, (uint64_t)v57, 0, 0.5);
        *(double *)&v58 = v31;
        *((double *)&v58 + 1) = v29;
        v59 = v54 * 0.5 + v50 * 0.5;
        *(double *)v60 = v54;
        sub_20BF7C9D4(&v62, &v70, a3, a4, a5, a6, a7, a8);
        sub_20BF7C9D4(&v58, v57, a3, a4, a5, a6, a7, a8);
        return;
      }
      *(double *)&v62 = v8;
      *((double *)&v62 + 1) = v51;
      v63 = v50;
      v64[0] = v54;
      v66 = v15;
      v67 = v47;
      v68 = v46;
      v69 = v55;
      sub_20BF7BEC8((uint64_t)&v62);
      v38 = sub_20BF7C09C((uint64_t)&v62, v35, v36, v37, a4, a5);
      v40 = *a1;
      if (*a1 < a4)
        v40 = a4;
      v71 = &unk_24C520593;
      *(float *)&v70 = v38;
      if (a1[3] >= a5)
        v41 = a5;
      else
        v41 = a1[3];
      v57[1] = &unk_24C520593;
      LODWORD(v57[0]) = v39;
      sub_20BF7B118((uint64_t)&v58, &v70, v57, 1, v40, v41);
      v42 = a3[1];
      if (v42 >= a3[2])
      {
        v44 = sub_20BF7ADA8(a3, &v58);
      }
      else
      {
        v43 = v58;
        *(double *)(v42 + 16) = v59;
        *(_OWORD *)v42 = v43;
        sub_20BF4C200((_QWORD *)(v42 + 24), v60);
        sub_20BF4C200((_QWORD *)(v42 + 40), v61);
        v44 = v42 + 56;
      }
      a3[1] = v44;
      sub_20BF4C2D8((uint64_t)v61);
      sub_20BF4C2D8((uint64_t)v60);
      sub_20BF4C2D8((uint64_t)v57);
      v45 = (__int128 *)&v70;
    }
    sub_20BF4C2D8((uint64_t)v45);
  }
}

void sub_20BF7CDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  sub_20BF4C2D8(v11 + 40);
  sub_20BF4C2D8(v11 + 24);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8(v12 - 120);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Ts_TypedData(uint64_t a1, int *a2)
{
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = &unk_24C520910;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  v6 = *a2;
  v7 = *v4;
  v8 = *v5;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = &unk_24C520910;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  v6 = *a2;
  v7 = *v4;
  v8 = *v5;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_ValuesHolder(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Ts_TypedData(uint64_t a1, double *a2, char a3, _DWORD *a4, int *a5, int *a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  double result;

  *(_QWORD *)a1 = &unk_24C520910;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a5;
  v8 = *a6;
  v9 = *a7;
  *(_DWORD *)(a1 + 16) = *a4;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 28) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a3;
  *(_BYTE *)(a1 + 69) = 0;
  result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

{
  int v7;
  int v8;
  int v9;
  double result;

  *(_QWORD *)a1 = &unk_24C520910;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a5;
  v8 = *a6;
  v9 = *a7;
  *(_DWORD *)(a1 + 16) = *a4;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 28) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a3;
  *(_BYTE *)(a1 + 69) = 0;
  result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CloneInto(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C520910;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CreateEvalCache@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _DWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BF7FCC0(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::EvalUncached(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  float v13;
  _BYTE v14[12];
  float v15;
  float64x2_t v16[3];
  float v17;
  float v18;
  float v19;
  float v20;

  sub_20BF7FDB4((uint64_t)v14, a1, a2);
  if (v14[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v16, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = v12 * (v12 * (v12 * v20 + v19) + v18) + v17;
  }
  else
  {
    v13 = v15;
  }
  *(_QWORD *)(a3 + 8) = &unk_24C520593;
  *(float *)a3 = v13;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::EvalDerivativeUncached(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  float v13;
  float v14;
  _BYTE v15[48];
  float64x2_t v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;

  sub_20BF7FDB4((uint64_t)v15, a1, a2);
  if (v15[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(&v16, v6, a4, v7, v8);
    if (v9 <= 1.0)
      v10 = v9;
    else
      v10 = 1.0;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = v12 * (v20 + v20 + v12 * 3.0 * v21) + v19;
    v14 = 1.0 / (v16.f64[1] + v12 * (v12 * 3.0 * v18 + v17 + v17)) * v13;
  }
  else
  {
    v14 = *(float *)pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  }
  *(_QWORD *)(a3 + 8) = &unk_24C520593;
  *(float *)a3 = v14;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CreateTypedEvalCache@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  v6 = operator new(0x70uLL);
  sub_20BF7FDB4((uint64_t)v6, a1, a2);
  return sub_20BF7FEA4(a3, (uint64_t)v6);
}

void sub_20BF7D23C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::operator==(double *a1, double *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  char *v10;
  double v11;
  double v12;
  char *v13;
  char *v14;
  int v15;
  std::type_info v16;
  _QWORD v17[2];
  std::type_info v18;
  _QWORD v19[2];
  std::type_info v20;
  _QWORD v21[2];
  std::type_info v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if (a1[1] != a2[1])
    return 0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v23);
  (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 80))(&v22, a2);
  if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v23, &v22, v4))
  {
    v5 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 56))(a1);
    if (v5 == (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 56))(a2))
    {
      v6 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 104))(a1);
      if (v6 == (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 104))(a2))
      {
        v9 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 104))(a1);
        if (v9
          && ((*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 120))(v21, a1),
              (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 120))(&v20, a2),
              !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v10)))
        {
          v7 = 0;
        }
        else
        {
          v11 = (*(double (**)(double *))(*(_QWORD *)a1 + 216))(a1);
          if (v11 == (*(double (**)(double *))(*(_QWORD *)a2 + 216))(a2)
            && (v12 = (*(double (**)(double *))(*(_QWORD *)a1 + 224))(a1),
                v12 == (*(double (**)(double *))(*(_QWORD *)a2 + 224))(a2)))
          {
            (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 200))(v19, a1);
            (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 200))(&v18, a2);
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v19, &v18, v13))
            {
              (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 208))(v17, a1);
              (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 208))(&v16, a2);
              if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v17, &v16, v14))
              {
                v15 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 264))(a1);
                v7 = v15 ^ (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 264))(a2) ^ 1;
              }
              else
              {
                v7 = 0;
              }
              sub_20BF4C2D8((uint64_t)&v16);
              sub_20BF4C2D8((uint64_t)v17);
            }
            else
            {
              v7 = 0;
            }
            sub_20BF4C2D8((uint64_t)&v18);
            sub_20BF4C2D8((uint64_t)v19);
            if ((v9 & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            v7 = 0;
            if (!v9)
              goto LABEL_6;
          }
        }
        sub_20BF4C2D8((uint64_t)&v20);
        sub_20BF4C2D8((uint64_t)v21);
        goto LABEL_6;
      }
    }
  }
  v7 = 0;
LABEL_6:
  sub_20BF4C2D8((uint64_t)&v22);
  sub_20BF4C2D8((uint64_t)v23);
  return v7;
}

void sub_20BF7D510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  char v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  va_list va4;

  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va2);
  if ((v4 & 1) != 0)
  {
    sub_20BF4C2D8((uint64_t)va3);
    sub_20BF4C2D8((uint64_t)va4);
  }
  sub_20BF4C2D8(v5 - 88);
  sub_20BF4C2D8(v5 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetKnotType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetKnotType(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetKnotType(TsKnotType) [T = float]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF7D658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CanSetKnotType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2)
    v6 = v5;
  else
    v6 = 1;
  if (a3 && (v6 & 1) == 0)
    MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
  return v6;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetValue@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  result = *(float *)(a1 + 20);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetRightValue(uint64_t a1)
{
  return a1 + 20;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetValue(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF7D8A0(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    a1[5] = *(_DWORD *)sub_20BF7D934(v5);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetValue(VtValue) [T = float]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BF7D850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

std::type_info *sub_20BF7D8A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF7B9F8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB788], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetRightValue(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(a1 + 20) = *a2;
  return result;
}

uint64_t sub_20BF7D934(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BF7B9F8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF7BA30, MEMORY[0x24BEDB788]);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetIsDualValued(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

_BYTE *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetIsDualValued(_BYTE *result, int a2)
{
  _BYTE *v2;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  result[68] = a2;
  if (a2)
  {
    v2 = result;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 80))(v3);
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v2 + 136))(v2, v3);
    return (_BYTE *)sub_20BF4C2D8((uint64_t)v3);
  }
  return result;
}

void sub_20BF7DA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftValue@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  v2 = 16;
  if (!*(_BYTE *)(a1 + 68))
    v2 = 20;
  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  result = *(float *)(a1 + v2);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetLeftValue(uint64_t a1)
{
  return a1 + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftValue(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BF7D8A0(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v21, v4);
    if (v21[1])
    {
      a1[4] = *(_DWORD *)sub_20BF7D934(v5);
      if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
    }
    else
    {
      v16 = "ts/data.h";
      v17 = "SetLeftValue";
      v18 = 737;
      v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftValue(VtValue) [T = float]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      v8 = v15;
      v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v10 = v14;
      if (v8 < 0)
        v10 = v9;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    sub_20BF4C2D8((uint64_t)v21);
  }
  else
  {
    v16 = "ts/data.h";
    v17 = "SetLeftValue";
    v18 = 725;
    v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftValue(VtValue) [T = float]";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF7DC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetLeftValue(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(a1 + 16) = *a2;
  return result;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetZero@<S0>(uint64_t a1@<X8>)
{
  int *v2;
  float result;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  *(_QWORD *)(a1 + 8) = &unk_24C520593;
  result = *(float *)v2;
  *(_DWORD *)a1 = *v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ValueCanBeExtrapolated()
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::HasTangents(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ValueTypeSupportsTangents()
{
  return 1;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftTangentSlope@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  result = *(float *)(a1 + 24);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetLeftTangentSlope(uint64_t a1)
{
  return a1 + 24;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetRightTangentSlope@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_24C520593;
  result = *(float *)(a1 + 28);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetRightTangentSlope(uint64_t a1)
{
  return a1 + 28;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetRightTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  const std::type_info *v5;
  char *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[4];
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF7D8A0(a2);
  sub_20BF4C6D0(v18, v4);
  if (v18[1])
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)sub_20BF7D934(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetLeftTangentSlope";
    v16[2] = 846;
    v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentSlope(VtValue) [T = float]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    v7 = v15;
    v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  return sub_20BF4C2D8((uint64_t)v18);
}

void sub_20BF7DE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetLeftTangentSlope(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(a1 + 24) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  const std::type_info *v5;
  char *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[4];
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF7D8A0(a2);
  sub_20BF4C6D0(v18, v4);
  if (v18[1])
  {
    *(_DWORD *)(a1 + 28) = *(_DWORD *)sub_20BF7D934(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetRightTangentSlope";
    v16[2] = 866;
    v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentSlope(VtValue) [T = float]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    v7 = v15;
    v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  return sub_20BF4C2D8((uint64_t)v18);
}

void sub_20BF7E030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetRightTangentSlope(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(a1 + 28) = *a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentLength(uint64_t a1, double a2)
{
  BOOL v2;
  char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;

  if (fabs(a2) == INFINITY)
  {
    v3 = "ts/data.h";
    v4 = "SetLeftTangentLength";
    v5 = 886;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentLength(TsTime) [T = float]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    v3 = "ts/data.h";
    v4 = "SetLeftTangentLength";
    v5 = 894;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentLength(TsTime) [T = float]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 48) = a2;
  }
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentLength(uint64_t a1, double a2)
{
  BOOL v2;
  char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;

  if (fabs(a2) == INFINITY)
  {
    v3 = "ts/data.h";
    v4 = "SetRightTangentLength";
    v5 = 916;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentLength(TsTime) [T = float]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    v3 = "ts/data.h";
    v4 = "SetRightTangentLength";
    v5 = 924;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentLength(TsTime) [T = float]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 56) = a2;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetTangentSymmetryBroken(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 69);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetTangentSymmetryBroken(uint64_t a1, int a2)
{
  float result;

  if (*(unsigned __int8 *)(a1 + 69) != a2)
  {
    *(_BYTE *)(a1 + 69) = a2;
    if ((a2 & 1) == 0)
    {
      result = *(float *)(a1 + 28);
      *(float *)(a1 + 24) = result;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetSlope@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  float v7;
  float v8;
  uint64_t result;
  float v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v11);
  v7 = sub_20BF7B9A8((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v11, a2);
  v8 = sub_20BF7B9A8((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  result = sub_20BF4C2D8((uint64_t)v11);
  v10 = 1.0 / (v5 - v6) * (float)(v8 - v7);
  *(_QWORD *)(a3 + 8) = &unk_24C520593;
  *(float *)a3 = v10;
  return result;
}

void sub_20BF7E394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Extrapolate@<S0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  float v7;
  float result;

  v7 = *(float *)sub_20BF7D934(a1);
  result = *(float *)sub_20BF7D934(a2) * a4 + v7;
  *(_QWORD *)(a3 + 8) = &unk_24C520593;
  *(float *)a3 = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_LocalStorage::_LocalStorage(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::_HeapStorage(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v4;

  v4 = operator new(0x10uLL);
  *v4 = *a2;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;

  v4 = operator new(0x10uLL);
  *v4 = *a2;
  *a1 = v4;
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::_HeapStorage(_QWORD *a1, _OWORD **a2)
{
  _OWORD *v4;

  v4 = operator new(0x10uLL);
  *v4 = **a2;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;

  v4 = operator new(0x10uLL);
  *v4 = **a2;
  *a1 = v4;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::Get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::GetMutable(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Ts_TypedData(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &unk_24C520A40;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v6 = *a2;
  v7 = *v4;
  v8 = *v5;
  a1[2] = *a2;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  *(_QWORD *)((char *)a1 + 62) = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &unk_24C520A40;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v6 = *a2;
  v7 = *v4;
  v8 = *v5;
  a1[2] = *a2;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  *(_QWORD *)((char *)a1 + 62) = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_ValuesHolder(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Ts_TypedData(uint64_t a1, double *a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  *(_QWORD *)a1 = &unk_24C520A40;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a5;
  v8 = *a6;
  v9 = *a7;
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a3;
  *(_BYTE *)(a1 + 69) = 0;
  result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  *(_QWORD *)a1 = &unk_24C520A40;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a5;
  v8 = *a6;
  v9 = *a7;
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a3;
  *(_BYTE *)(a1 + 69) = 0;
  result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C520A40;
  v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v2;
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CreateEvalCache@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BF7FF6C(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::EvalUncached(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  _BYTE v14[16];
  double v15;
  float64x2_t v16[4];
  double v17;
  double v18;
  double v19;
  double v20;

  sub_20BF80060((uint64_t)v14, a1, a2);
  if (v14[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v16, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = v17 + v12 * (v18 + v12 * (v19 + v20 * v12));
  }
  else
  {
    v13 = v15;
  }
  *(_QWORD *)(a3 + 8) = &unk_24C52064B;
  *(double *)a3 = v13;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::EvalDerivativeUncached(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  _BYTE v14[56];
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  sub_20BF80060((uint64_t)v14, a1, a2);
  if (v14[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(&v15, v6, a4, v7, v8);
    if (v9 <= 1.0)
      v10 = v9;
    else
      v10 = 1.0;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = (v18 + v12 * (v19 + v19 + v20 * (v12 * 3.0))) * (1.0 / (v15.f64[1] + v12 * (v12 * 3.0 * v17 + v16 + v16)));
  }
  else
  {
    v13 = *(double *)pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  }
  *(_QWORD *)(a3 + 8) = &unk_24C52064B;
  *(double *)a3 = v13;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CreateTypedEvalCache@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  v6 = operator new(0x98uLL);
  sub_20BF80060((uint64_t)v6, a1, a2);
  return sub_20BF80150(a3, (uint64_t)v6);
}

void sub_20BF7E914(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::operator==(double *a1, double *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  char *v10;
  double v11;
  double v12;
  char *v13;
  char *v14;
  int v15;
  std::type_info v16;
  _QWORD v17[2];
  std::type_info v18;
  _QWORD v19[2];
  std::type_info v20;
  _QWORD v21[2];
  std::type_info v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if (a1[1] != a2[1])
    return 0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v23);
  (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 80))(&v22, a2);
  if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v23, &v22, v4))
  {
    v5 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 56))(a1);
    if (v5 == (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 56))(a2))
    {
      v6 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 104))(a1);
      if (v6 == (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 104))(a2))
      {
        v9 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 104))(a1);
        if (v9
          && ((*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 120))(v21, a1),
              (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 120))(&v20, a2),
              !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v10)))
        {
          v7 = 0;
        }
        else
        {
          v11 = (*(double (**)(double *))(*(_QWORD *)a1 + 216))(a1);
          if (v11 == (*(double (**)(double *))(*(_QWORD *)a2 + 216))(a2)
            && (v12 = (*(double (**)(double *))(*(_QWORD *)a1 + 224))(a1),
                v12 == (*(double (**)(double *))(*(_QWORD *)a2 + 224))(a2)))
          {
            (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 200))(v19, a1);
            (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 200))(&v18, a2);
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v19, &v18, v13))
            {
              (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 208))(v17, a1);
              (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 208))(&v16, a2);
              if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v17, &v16, v14))
              {
                v15 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 264))(a1);
                v7 = v15 ^ (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 264))(a2) ^ 1;
              }
              else
              {
                v7 = 0;
              }
              sub_20BF4C2D8((uint64_t)&v16);
              sub_20BF4C2D8((uint64_t)v17);
            }
            else
            {
              v7 = 0;
            }
            sub_20BF4C2D8((uint64_t)&v18);
            sub_20BF4C2D8((uint64_t)v19);
            if ((v9 & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            v7 = 0;
            if (!v9)
              goto LABEL_6;
          }
        }
        sub_20BF4C2D8((uint64_t)&v20);
        sub_20BF4C2D8((uint64_t)v21);
        goto LABEL_6;
      }
    }
  }
  v7 = 0;
LABEL_6:
  sub_20BF4C2D8((uint64_t)&v22);
  sub_20BF4C2D8((uint64_t)v23);
  return v7;
}

void sub_20BF7EBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  char v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  va_list va4;

  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va2);
  if ((v4 & 1) != 0)
  {
    sub_20BF4C2D8((uint64_t)va3);
    sub_20BF4C2D8((uint64_t)va4);
  }
  sub_20BF4C2D8(v5 - 88);
  sub_20BF4C2D8(v5 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetKnotType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetKnotType(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetKnotType(TsKnotType) [T = double]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF7ED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CanSetKnotType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2)
    v6 = v5;
  else
    v6 = 1;
  if (a3 && (v6 & 1) == 0)
    MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
  return v6;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetValue@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  result = *(double *)(a1 + 24);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetRightValue(uint64_t a1)
{
  return a1 + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetValue(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF7EF78(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    a1[3] = *(_QWORD *)sub_20BF78F24(v5);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetValue(VtValue) [T = double]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BF7EF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

std::type_info *sub_20BF7EF78(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF78EEC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB780], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetRightValue(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 24) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetIsDualValued(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

_BYTE *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetIsDualValued(_BYTE *result, int a2)
{
  _BYTE *v2;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  result[68] = a2;
  if (a2)
  {
    v2 = result;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 80))(v3);
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v2 + 136))(v2, v3);
    return (_BYTE *)sub_20BF4C2D8((uint64_t)v3);
  }
  return result;
}

void sub_20BF7F0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftValue@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = 16;
  if (!*(_BYTE *)(a1 + 68))
    v2 = 24;
  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  result = *(double *)(a1 + v2);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetLeftValue(uint64_t a1)
{
  return a1 + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftValue(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BF7EF78(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v21, v4);
    if (v21[1])
    {
      a1[2] = *(_QWORD *)sub_20BF78F24(v5);
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v16 = "ts/data.h";
      v17 = "SetLeftValue";
      v18 = 737;
      v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftValue(VtValue) [T = double]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      v8 = v15;
      v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v10 = v14;
      if (v8 < 0)
        v10 = v9;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    sub_20BF4C2D8((uint64_t)v21);
  }
  else
  {
    v16 = "ts/data.h";
    v17 = "SetLeftValue";
    v18 = 725;
    v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftValue(VtValue) [T = double]";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF7F2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetLeftValue(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 16) = *a2;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetZero@<D0>(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  double result;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  a1[1] = (uint64_t)&unk_24C52064B;
  result = *(double *)v2;
  *a1 = *v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ValueCanBeExtrapolated()
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::HasTangents(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ValueTypeSupportsTangents()
{
  return 1;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftTangentSlope@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  result = *(double *)(a1 + 32);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetLeftTangentSlope(uint64_t a1)
{
  return a1 + 32;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetRightTangentSlope@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 8) = &unk_24C52064B;
  result = *(double *)(a1 + 40);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetRightTangentSlope(uint64_t a1)
{
  return a1 + 40;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetRightTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  const std::type_info *v5;
  char *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[4];
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF7EF78(a2);
  sub_20BF4C6D0(v18, v4);
  if (v18[1])
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)sub_20BF78F24(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetLeftTangentSlope";
    v16[2] = 846;
    v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentSlope(VtValue) [T = double]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    v7 = v15;
    v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  return sub_20BF4C2D8((uint64_t)v18);
}

void sub_20BF7F504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetLeftTangentSlope(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 32) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  const std::type_info *v5;
  char *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[4];
  char v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF7EF78(a2);
  sub_20BF4C6D0(v18, v4);
  if (v18[1])
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)sub_20BF78F24(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetRightTangentSlope";
    v16[2] = 866;
    v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentSlope(VtValue) [T = double]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    v7 = v15;
    v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  return sub_20BF4C2D8((uint64_t)v18);
}

void sub_20BF7F6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetRightTangentSlope(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentLength(uint64_t a1, double a2)
{
  BOOL v2;
  char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;

  if (fabs(a2) == INFINITY)
  {
    v3 = "ts/data.h";
    v4 = "SetLeftTangentLength";
    v5 = 886;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentLength(TsTime) [T = double]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    v3 = "ts/data.h";
    v4 = "SetLeftTangentLength";
    v5 = 894;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentLength(TsTime) [T = double]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 48) = a2;
  }
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentLength(uint64_t a1, double a2)
{
  BOOL v2;
  char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;

  if (fabs(a2) == INFINITY)
  {
    v3 = "ts/data.h";
    v4 = "SetRightTangentLength";
    v5 = 916;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentLength(TsTime) [T = double]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    v3 = "ts/data.h";
    v4 = "SetRightTangentLength";
    v5 = 924;
    v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentLength(TsTime) [T = double]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 56) = a2;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetTangentSymmetryBroken(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 69);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetTangentSymmetryBroken(uint64_t a1, int a2)
{
  double result;

  if (*(unsigned __int8 *)(a1 + 69) != a2)
  {
    *(_BYTE *)(a1 + 69) = a2;
    if ((a2 & 1) == 0)
    {
      result = *(double *)(a1 + 40);
      *(double *)(a1 + 32) = result;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetSlope@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t result;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v10);
  v7 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  sub_20BF4C2D8((uint64_t)v10);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v10, a2);
  v8 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  result = sub_20BF4C2D8((uint64_t)v10);
  *(_QWORD *)(a3 + 8) = &unk_24C52064B;
  *(double *)a3 = 1.0 / (v5 - v6) * (v8 - v7);
  return result;
}

void sub_20BF7F9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Extrapolate@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v7;
  double result;

  v7 = *(double *)sub_20BF78F24(a1);
  result = v7 + *(double *)sub_20BF78F24(a2) * a4;
  *(_QWORD *)(a3 + 8) = &unk_24C52064B;
  *(double *)a3 = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_LocalStorage::_LocalStorage(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::_HeapStorage(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;

  v4 = operator new(0x20uLL);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;
  __int128 v5;

  v4 = operator new(0x20uLL);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::_HeapStorage(_QWORD *a1, _OWORD **a2)
{
  _OWORD *v4;
  __int128 v5;

  v4 = operator new(0x20uLL);
  v5 = (*a2)[1];
  *v4 = **a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;
  __int128 v5;

  v4 = operator new(0x20uLL);
  v5 = (*a2)[1];
  *v4 = **a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::Get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::GetMutable(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ResetTangentSymmetryBroken(uint64_t result)
{
  if (*(_DWORD *)(result + 64) == 2 && vabds_f32(*(float *)(result + 24), *(float *)(result + 28)) >= 0.0001)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 272))(result, 1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ResetTangentSymmetryBroken(uint64_t result)
{
  if (*(_DWORD *)(result + 64) == 2 && vabdd_f64(*(double *)(result + 32), *(double *)(result + 40)) >= 0.0001)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 272))(result, 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ValueCanBeInterpolated(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  if (*(_BYTE *)(a1 + 68))
    return (*(_DWORD *)(a1 + 16) & 0x7FFFFFFFu) < 0x7F800000;
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ValueCanBeInterpolated(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if (*(_BYTE *)(a1 + 68))
    return (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  return 1;
}

_QWORD *sub_20BF7FCC0@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x88uLL);
  result = sub_20BF7FD20(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BF7FD0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF7FD20(_QWORD *a1, _DWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C520BB0;
  a1[1] = 0;
  sub_20BF7FDB4((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BF7FD60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BF7FD74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C520BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BF7FD88(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C520BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BF7FDB4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double v6;
  _QWORD v8[4];
  char v9;

  *(_QWORD *)a1 = &unk_24C5208D8;
  if (a2 && a3)
  {
    sub_20BF7BDC8(a1 + 16, a1 + 80, (uint64_t)a2, a3);
    *(float32x2_t *)&v6 = sub_20BF7BEC8(a1 + 16);
    if ((*(unsigned int (**)(_DWORD *, double))(*(_QWORD *)a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = a2[5];
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    v8[2] = 499;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<float, true>::_Init(const Ts_TypedData<T> *, const Ts_Ty"
            "pedData<T> *) [T = float, INTERPOLATABLE = true]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

_QWORD *sub_20BF7FEA4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C520C00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BF7FEEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF7FF08(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF7FF1C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t sub_20BF7FF2C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C520C50))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20BF7FF6C@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xB0uLL);
  result = sub_20BF7FFCC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BF7FFB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF7FFCC(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C520C78;
  a1[1] = 0;
  sub_20BF80060((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BF8000C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BF80020(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C520C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BF80034(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C520C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BF80060(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v6;
  _QWORD v8[4];
  char v9;

  *(_QWORD *)a1 = &unk_24C520890;
  if (a2 && a3)
  {
    sub_20BF7B4E4(a1 + 24, a1 + 88, (uint64_t)a2, a3);
    v6 = sub_20BF7B5E4(a1 + 24);
    if ((*(unsigned int (**)(_QWORD *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = a2[3];
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    v8[2] = 499;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<double, true>::_Init(const Ts_TypedData<T> *, const Ts_T"
            "ypedData<T> *) [T = double, INTERPOLATABLE = true]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

_QWORD *sub_20BF80150(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C520CC8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BF80198(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF801B4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF801C8(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t sub_20BF801D8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C520D18))
    return a1 + 24;
  else
    return 0;
}

double pxrInternal__aapl__pxrReserved__::TsFindChangedInterval@<D0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::TsSpline *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *KeyFrames;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int EffectiveExtrapolationType;
  char *v14;
  char v15;
  char *v16;
  int v17;
  char *v18;
  char v19;
  char v20;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **v21;
  double *v22;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **v23;
  double *v24;
  int v25;
  char *v26;
  char v27;
  char *v28;
  int v29;
  char *v30;
  char v31;
  char v32;
  double result;
  __int128 v34;
  pxrInternal__aapl__pxrReserved__::TsSpline *v35;
  pxrInternal__aapl__pxrReserved__::TsSpline *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::type_info v42;
  uint64_t v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  v35 = this;
  v36 = a2;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  *(_QWORD *)&v40 = 0xFFF0000000000000;
  BYTE8(v40) = 0;
  *(_QWORD *)&v41 = 0x7FF0000000000000;
  BYTE8(v41) = 0;
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this);
  if (*KeyFrames == KeyFrames[1])
  {
    v8 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    if (*v8 == v8[1])
      goto LABEL_34;
  }
  v9 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this);
  if (*v9 != v9[1])
  {
    v10 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    if (*v10 != v10[1])
    {
      v11 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this)
                      + 8);
      *(_QWORD *)&v38 = v11;
      *((_QWORD *)&v38 + 1) = v11;
      v12 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2)
                      + 8);
      *(_QWORD *)&v39 = v12;
      *((_QWORD *)&v39 + 1) = v12;
      EffectiveExtrapolationType = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72), (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, 1);
      if (EffectiveExtrapolationType != pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72), (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2, 1))goto LABEL_17;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72));
      v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v14);
      sub_20BF4C2D8((uint64_t)&v42);
      sub_20BF4C2D8((uint64_t)v43);
      if ((v15 & 1) == 0)
        goto LABEL_17;
      if (EffectiveExtrapolationType)
      {
        if (*(double *)(v11 - 64) != *(double *)(v12 - 64))
          goto LABEL_17;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72));
        v17 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v16);
        sub_20BF4C2D8((uint64_t)&v42);
        sub_20BF4C2D8((uint64_t)v43);
        if (!v17)
          goto LABEL_17;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72));
        v19 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v18);
        sub_20BF4C2D8((uint64_t)&v42);
        sub_20BF4C2D8((uint64_t)v43);
        v20 = fabs(*(double *)(v11 - 64)) == INFINITY ? 0 : v19 ^ 1;
        *(_QWORD *)&v41 = *(_QWORD *)(v11 - 64);
        BYTE8(v41) = v20;
        if ((v19 & 1) == 0)
        {
LABEL_17:
          if (*(double *)&v40 <= *(double *)&v41 && (*(double *)&v40 != *(double *)&v41 || BYTE8(v40) && BYTE8(v41)))
          {
            v21 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v35;
            v22 = *(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v35);
            *(_QWORD *)&v37 = v22;
            v23 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v36;
            v24 = *(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v36);
            *((_QWORD *)&v37 + 1) = v24;
            v25 = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22, v21, 0);
            if (v25 == pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24, v23, 0))
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
              v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v26);
              sub_20BF4C2D8((uint64_t)&v42);
              sub_20BF4C2D8((uint64_t)v43);
              if ((v27 & 1) != 0)
              {
                if (v25)
                {
                  if (v22[1] != v24[1])
                    goto LABEL_33;
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
                  v29 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v28);
                  sub_20BF4C2D8((uint64_t)&v42);
                  sub_20BF4C2D8((uint64_t)v43);
                  if (!v29)
                    goto LABEL_33;
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
                  v31 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v30);
                  sub_20BF4C2D8((uint64_t)&v42);
                  sub_20BF4C2D8((uint64_t)v43);
                  v32 = fabs(v22[1]) == INFINITY ? 0 : v31 ^ 1;
                  *(double *)&v40 = v22[1];
                  BYTE8(v40) = v32;
                  if ((v31 & 1) == 0)
                    goto LABEL_33;
                }
                else if (!sub_20BF80F90((uint64_t)&v35, 1))
                {
                  goto LABEL_33;
                }
                while ((sub_20BF80F90((uint64_t)&v35, 0) & 1) != 0)
                  ;
              }
            }
          }
LABEL_33:
          if (*(double *)&v40 > *(double *)&v41 || *(double *)&v40 == *(double *)&v41 && (!BYTE8(v40) || !BYTE8(v41)))
          {
LABEL_34:
            *(_QWORD *)&v40 = 0;
            BYTE8(v40) = 0;
            *(_QWORD *)&v41 = 0;
            BYTE8(v41) = 0;
            goto LABEL_35;
          }
          goto LABEL_35;
        }
      }
      else if (!sub_20BF80684((uint64_t)&v35, 1))
      {
        goto LABEL_17;
      }
      while ((sub_20BF80684((uint64_t)&v35, 0) & 1) != 0)
        ;
      goto LABEL_17;
    }
  }
LABEL_35:
  result = *(double *)&v40;
  v34 = v41;
  *a3 = v40;
  a3[1] = v34;
  return result;
}

void sub_20BF80630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8(v14 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF80684(uint64_t a1, int a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **KeyFrames;
  char *v13;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  double v29;
  double v30;
  char *v31;
  char v32;
  char *v33;
  char v34;
  double v35;
  char v36;
  char *v38;
  std::type_info v39;
  std::type_info v40;
  std::type_info v41;
  std::type_info v42;
  uint64_t v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  if (!a2
    || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 40) - 72)), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 56) - 72)), v5 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v4), sub_20BF4C2D8((uint64_t)&v42), sub_20BF4C2D8((uint64_t)v43), (v5 & 1) != 0))
  {
    v6 = sub_20BF80C8C(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1, (uint64_t *)(a1 + 32));
    v8 = v7;
    v9 = sub_20BF80C8C(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8), (uint64_t *)(a1 + 48));
    v11 = v10;
    if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1) == v8)
    {
      KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v43, *KeyFrames);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
    }
    if (*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8)) == v11)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v42, *v14);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
    }
    v15 = *(_QWORD *)(a1 + 40);
    if (!a2)
    {
      if (v15 != v8 && *(_QWORD *)(a1 + 56) != v11)
      {
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v13) & 1) != 0)goto LABEL_40;
        v15 = *(_QWORD *)(a1 + 40);
      }
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)(v15 - 72), (double *)(*(_QWORD *)(a1 + 56) - 72), 0)|| (*(_QWORD *)(a1 + 40) -= 72, *(_QWORD *)(a1 + 56) -= 72, *(_QWORD *)(a1 + 40) == *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1))|| (v19 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8)), v20 = *(_QWORD *)(a1 + 56), v20 == *v19)|| !pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)(*(_QWORD *)(a1 + 40) - 72), (double *)(v20 - 72), 1))
      {
        v22 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 40) - 72));
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 56) - 72));
        v22 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v21);
        sub_20BF4C2D8((uint64_t)&v40);
        sub_20BF4C2D8((uint64_t)&v41);
        v23 = *(double *)(*(_QWORD *)(a1 + 40) - 64);
        if (fabs(v23) == INFINITY)
          v24 = 0;
        else
          v24 = v22 ^ 1;
        *(double *)(a1 + 80) = v23;
        *(_BYTE *)(a1 + 88) = v24;
      }
      goto LABEL_61;
    }
    if (v15 == v8)
      goto LABEL_32;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v15 - 72));
    if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v41, v16) & 1) != 0)
    {
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 40) - 72)))
      {
        sub_20BF4C2D8((uint64_t)&v41);
        goto LABEL_32;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 40) - 72));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v39, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 40) - 72));
      v18 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, &v39, v17);
      sub_20BF4C2D8((uint64_t)&v39);
      sub_20BF4C2D8((uint64_t)&v40);
      sub_20BF4C2D8((uint64_t)&v41);
      if ((v18 & 1) != 0)
      {
LABEL_32:
        v25 = *(_QWORD *)(a1 + 56);
        if (v25 == v11)
          goto LABEL_40;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v25 - 72));
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, &v41, v26) & 1) != 0)
        {
          if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 56) - 72)))
          {
            sub_20BF4C2D8((uint64_t)&v41);
            goto LABEL_40;
          }
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 56) - 72));
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v39, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(a1 + 56) - 72));
          v28 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, &v39, v27);
          sub_20BF4C2D8((uint64_t)&v39);
          sub_20BF4C2D8((uint64_t)&v40);
          sub_20BF4C2D8((uint64_t)&v41);
          if ((v28 & 1) != 0)
          {
LABEL_40:
            if (v8 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1))
              v29 = -INFINITY;
            else
              v29 = *(double *)(v8 - 64);
            if (v11 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8)))
              v30 = -INFINITY;
            else
              v30 = *(double *)(v11 - 64);
            if (v29 <= v30)
            {
              if (v30 <= v29)
              {
                if (v29 == -INFINITY)
                {
                  v22 = 0;
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_BYTE *)(a1 + 72) = 0;
                  *(_QWORD *)(a1 + 80) = 0;
                  *(_BYTE *)(a1 + 88) = 0;
LABEL_61:
                  sub_20BF4C2D8((uint64_t)&v42);
                  sub_20BF4C2D8((uint64_t)v43);
                  return v22;
                }
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
                v22 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v38);
                v34 = v22 ^ 1;
                sub_20BF4C2D8((uint64_t)&v40);
                sub_20BF4C2D8((uint64_t)&v41);
LABEL_54:
                if (v29 >= v30)
                  v35 = v29;
                else
                  v35 = v30;
                *(double *)(a1 + 80) = v35;
                if (fabs(v35) == INFINITY)
                  v36 = 0;
                else
                  v36 = v34;
                *(_BYTE *)(a1 + 88) = v36;
                *(_QWORD *)(a1 + 32) = v6;
                *(_QWORD *)(a1 + 40) = v8;
                *(_QWORD *)(a1 + 48) = v9;
                *(_QWORD *)(a1 + 56) = v11;
                goto LABEL_61;
              }
              if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72)))
              {
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
                v32 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v33);
                goto LABEL_52;
              }
            }
            else if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72)))
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
              v32 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v31);
LABEL_52:
              v34 = v32 ^ 1;
              sub_20BF4C2D8((uint64_t)&v40);
              sub_20BF4C2D8((uint64_t)&v41);
              v22 = 0;
              goto LABEL_54;
            }
            v22 = 0;
            v34 = 0;
            goto LABEL_54;
          }
        }
        else
        {
          sub_20BF4C2D8((uint64_t)&v41);
        }
        v9 = *(_QWORD *)(a1 + 48);
        v11 = *(_QWORD *)(a1 + 56);
        goto LABEL_40;
      }
    }
    else
    {
      sub_20BF4C2D8((uint64_t)&v41);
    }
    v6 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    goto LABEL_32;
  }
  return 0;
}

void sub_20BF80BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va2);
  sub_20BF4C2D8((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF80C8C(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2)
{
  uint64_t v4;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v5;
  char IsArrayValued;
  uint64_t v8;
  char *v9;
  char v10;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v13;
  char *v14;
  char v15;
  std::type_info v17;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2[1];
  if (v5 != *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v18, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a2[1] - 72));
    IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    sub_20BF4C2D8((uint64_t)v18);
    if ((IsArrayValued & 1) != 0)
    {
      if ((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72) == *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
        return sub_20BF80EDC(a1, *a2, a2[1]);
    }
    else if (v5 != *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
    {
      v8 = (uint64_t)v5;
      while (1)
      {
        if (v5 != (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2[1])
        {
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72)))
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v18, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72));
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v17, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72));
            v10 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v18, &v17, v9);
            sub_20BF4C2D8((uint64_t)&v17);
            sub_20BF4C2D8((uint64_t)v18);
            if ((v10 & 1) == 0)
              break;
          }
        }
        v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72);
        if ((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72) == *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
          return sub_20BF80EDC(a1, v4, v8);
        v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 144);
        if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 144))
          && (v5 == (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2[1]
           || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v18, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72)), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v17, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 144)), v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v18, &v17, v14), sub_20BF4C2D8((uint64_t)&v17), sub_20BF4C2D8((uint64_t)v18), (v15 & 1) != 0))|| (pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v12, v11, v13) & 1) != 0)
        {
          v8 -= 72;
          v5 = v11;
          if (v11 != *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
            continue;
        }
        return v4;
      }
    }
  }
  return v4;
}

void sub_20BF80EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF80EDC(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v5;
  _QWORD v7[4];
  char v8;

  v5 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a3 - 72);
  if (a3 - 72 != *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
  {
    v7[0] = "ts/diff.cpp";
    v7[1] = "_GetFirstKeyFrame";
    v7[2] = 437;
    v7[3] = "static Ts_SplineChangedIntervalHelper::KeyFrameReverseIterator pxrInternal__aapl__pxrReserved__::(anonymous "
            "namespace)::Ts_SplineChangedIntervalHelper::_GetFirstKeyFrame(const TsSpline &, KeyFrameReverseIterator)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "kf+1 == spline.rend()", 0);
  }
  if (!pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v5, a1, 0))
    return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  return a2;
}

uint64_t sub_20BF80F90(uint64_t a1, int a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v3;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v4;
  char *v5;
  char v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v7;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v8;
  char *v9;
  char v10;
  char *v11;
  char v12;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v13;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v14;
  char *v15;
  char v16;
  double v17;
  double v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t KeyFrames;
  double *v25;
  char *v26;
  uint64_t v27;
  double v28;
  char v29;
  char *v30;
  char *v31;
  char v32;
  std::type_info v34;
  uint64_t v35[2];
  std::type_info v36;
  uint64_t v37[3];

  v37[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v37, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16));
    v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v36, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24));
    v6 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v5);
    sub_20BF4C2D8((uint64_t)&v36);
    sub_20BF4C2D8((uint64_t)v37);
    if ((v6 & 1) != 0)
    {
      v7 = *v3;
      v8 = *v4;
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(*v3)
        || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, *v3),
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v36, *v3),
            v10 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v9), sub_20BF4C2D8((uint64_t)&v36), sub_20BF4C2D8((uint64_t)v37), (v10 & 1) != 0))
      {
        v7 = sub_20BF81544(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1, (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16));
      }
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(*v4)
        || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, *v4),
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v36, *v4),
            v12 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v11), sub_20BF4C2D8((uint64_t)&v36), sub_20BF4C2D8((uint64_t)v37), (v12 & 1) != 0))
      {
        v8 = sub_20BF81544(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8), (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24));
      }
      goto LABEL_12;
    }
    return 0;
  }
  v3 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16);
  v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24);
  v7 = sub_20BF81544(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1, (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16));
  v8 = sub_20BF81544(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8), (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24));
  v13 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16);
  v14 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24);
  if (v13 == v7)
  {
    v13 = v7;
LABEL_29:
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)v13, (double *)v14, 1))
    {
      *(int64x2_t *)(a1 + 16) = vaddq_s64(*(int64x2_t *)(a1 + 16), vdupq_n_s64(0x48uLL));
      if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1)
                                             + 8))
      {
        KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8));
        v25 = *(double **)(a1 + 24);
        if (v25 != *(double **)(KeyFrames + 8))
        {
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)*v3, v25, 0))
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, *v3);
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v4);
            v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v26);
            sub_20BF4C2D8((uint64_t)&v36);
            sub_20BF4C2D8((uint64_t)v37);
            v28 = *(double *)(*(_QWORD *)(a1 + 16) + 8);
            if (fabs(v28) == INFINITY)
              v29 = 0;
            else
              v29 = v27 ^ 1;
            *(double *)(a1 + 64) = v28;
            *(_BYTE *)(a1 + 72) = v29;
            return v27;
          }
        }
      }
    }
    return 0;
  }
  if (v14 == v8)
  {
    v14 = v8;
    goto LABEL_29;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v13);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v4);
  v16 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v15);
  sub_20BF4C2D8((uint64_t)&v36);
  sub_20BF4C2D8((uint64_t)v37);
  if ((v16 & 1) == 0)
  {
    v13 = *v3;
    v14 = *v4;
    goto LABEL_29;
  }
LABEL_12:
  if (v7 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1)
                                                              + 8))
    v17 = INFINITY;
  else
    v17 = *((double *)v7 + 1);
  if (v8 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8))
                                                              + 8))
    v18 = INFINITY;
  else
    v18 = *((double *)v8 + 1);
  if (v17 >= v18)
  {
    if (v18 >= v17)
    {
      if (v17 == INFINITY)
      {
        v27 = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_BYTE *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 88) = 0;
        return v27;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v7);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v30))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v35, v7);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v34, v8);
        v21 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v35, &v34, v31) ^ 1;
        sub_20BF4C2D8((uint64_t)&v34);
        sub_20BF4C2D8((uint64_t)v35);
      }
      else
      {
        v21 = 1;
      }
      sub_20BF4C2D8((uint64_t)&v36);
      sub_20BF4C2D8((uint64_t)v37);
      v27 = v21 ^ 1u;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v8);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v3);
      if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v22))
      {
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v8))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v35, v8);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v34, v8);
          v21 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v35, &v34, v23) ^ 1;
          sub_20BF4C2D8((uint64_t)&v34);
          sub_20BF4C2D8((uint64_t)v35);
        }
        else
        {
          LOBYTE(v21) = 0;
        }
      }
      else
      {
        LOBYTE(v21) = 1;
      }
      sub_20BF4C2D8((uint64_t)&v36);
      sub_20BF4C2D8((uint64_t)v37);
      v27 = 0;
    }
    v17 = v18;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v7);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v4);
    if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v19))
    {
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v7))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v35, v7);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v34, v7);
        v21 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v35, &v34, v20) ^ 1;
        sub_20BF4C2D8((uint64_t)&v34);
        sub_20BF4C2D8((uint64_t)v35);
      }
      else
      {
        LOBYTE(v21) = 0;
      }
    }
    else
    {
      LOBYTE(v21) = 1;
    }
    sub_20BF4C2D8((uint64_t)&v36);
    sub_20BF4C2D8((uint64_t)v37);
    v27 = 0;
  }
  *(double *)(a1 + 64) = v17;
  if (fabs(v17) == INFINITY)
    v32 = 0;
  else
    v32 = v21;
  *(_BYTE *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  return v27;
}

void sub_20BF814A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va2);
  sub_20BF4C2D8((uint64_t)va3);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF81544(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame **a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v4;
  char IsArrayValued;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v7;
  char *v8;
  char v9;
  char *v10;
  char v11;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v12;
  std::type_info v14;
  uint64_t v15[2];
  std::type_info v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v16.__type_name = 0;
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                        + 8) != v4)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v15, v4);
    IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    sub_20BF4C2D8((uint64_t)v15);
    if ((IsArrayValued & 1) != 0)
    {
      v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72);
      if (v4 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                                  + 8))
      {
        v6 = sub_20BF817A0(a1, *a2);
LABEL_18:
        v4 = v6;
      }
    }
    else
    {
      v7 = v4;
      while (1)
      {
        v4 = v7;
        if (v7 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                                    + 8))
          break;
        if (v7 != *a2)
        {
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v7))
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v15, v7);
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v14, v7);
            v9 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v15, &v14, v8);
            sub_20BF4C2D8((uint64_t)&v14);
            sub_20BF4C2D8((uint64_t)v15);
            if ((v9 & 1) == 0)
              break;
          }
          if (v16.__type_name)
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v15, v4);
            v11 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v15, &v16, v10);
            sub_20BF4C2D8((uint64_t)v15);
            if ((v11 & 1) == 0)
              break;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v4))
        {
          v15[1] = 0;
          sub_20BF4B5D8(&v16, v15);
          sub_20BF4C2D8((uint64_t)v15);
          v7 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72);
          if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72) == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8))
          {
            v6 = sub_20BF817A0(a1, v4);
            goto LABEL_18;
          }
          if ((pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v4, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72), v12) & 1) == 0)break;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v15, v4);
          sub_20BF4B5D8(&v16, v15);
          sub_20BF4C2D8((uint64_t)v15);
          v7 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72);
        }
      }
    }
  }
  sub_20BF4C2D8((uint64_t)&v16);
  return v4;
}

void sub_20BF81738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF817A0(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v2;
  _QWORD v5[4];
  char v6;

  v2 = a2;
  if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a2 + 72) != *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8))
  {
    v5[0] = "ts/diff.cpp";
    v5[1] = "_GetLastKeyFrame";
    v5[2] = 139;
    v5[3] = "static Ts_SplineChangedIntervalHelper::KeyFrameIterator pxrInternal__aapl__pxrReserved__::(anonymous namespa"
            "ce)::Ts_SplineChangedIntervalHelper::_GetLastKeyFrame(const TsSpline &, KeyFrameIterator)";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "kf+1 == spline.end()", 0);
  }
  if (!pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v2, a1, 1))
    return *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                            + 8);
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::New(pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v5;
  uint64_t v6;

  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, a2);
  v6 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)KeyFrameData + 24))(KeyFrameData, v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalUncached(pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3, double a4)
{
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v7;
  uint64_t v8;

  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, a2);
  v8 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)KeyFrameData + 32))(KeyFrameData, v8, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalDerivativeUncached(pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3, double a4)
{
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v7;
  uint64_t v8;

  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, a2);
  v8 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)KeyFrameData + 40))(KeyFrameData, v8, a4);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfQuatd,true>::New@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  uint64_t v7;

  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a1, a2);
  v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v6);
  return sub_20BF81990(KeyFrameData, v7, a3);
}

_QWORD *sub_20BF81990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  *v6 = &unk_24C520D90;
  sub_20BF81BC4((uint64_t)v6, a1, a2);
  *v6 = &unk_24C520D40;
  return sub_20BF81CB0(a3, (uint64_t)v6);
}

void sub_20BF819FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfQuatf,true>::New@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  uint64_t v7;

  KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a1, a2);
  v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v6);
  return sub_20BF81A54(KeyFrameData, v7, a3);
}

_QWORD *sub_20BF81A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x40uLL);
  *v6 = &unk_24C520E78;
  sub_20BF81E58((uint64_t)v6, a1, a2);
  *v6 = &unk_24C520E28;
  return sub_20BF81F3C(a3, (uint64_t)v6);
}

void sub_20BF81AC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20BF81AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::GfQuatd *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  unsigned int *v14;
  unsigned int v15;

  v6 = sub_20BF81C6C(a1, a5, a2, a3);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  a4[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  *(double *)result = v6;
  *((_QWORD *)result + 1) = v8;
  *((_QWORD *)result + 2) = v10;
  *((_QWORD *)result + 3) = v12;
  v14 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a4 = result;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  return result;
}

char *sub_20BF81B4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  v8 = *(_OWORD *)v2;
  v3 = v2[2];
  v4 = v2[3];
  a1[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  *(_OWORD *)result = v8;
  *((_QWORD *)result + 2) = v3;
  *((_QWORD *)result + 3) = v4;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BF81BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 *v5;
  __int128 v6;
  _QWORD v7[4];
  char v8;

  if (a2 && a3)
  {
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a1 + 24) = v4;
    if (*(_BYTE *)(a3 + 68))
      v5 = *(__int128 **)(a3 + 16);
    else
      v5 = (__int128 *)(*(_QWORD *)(a3 + 16) + 32);
    v6 = *v5;
    *(_OWORD *)(a1 + 72) = v5[1];
    *(_OWORD *)(a1 + 56) = v6;
  }
  else
  {
    v7[0] = "ts/evalCache.h";
    v7[1] = "_Init";
    v7[2] = 636;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalQuaternionCache<pxrInternal__aapl__pxrReserved__::GfQuatd>::_I"
            "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalQuaternionCache from invalid keyframes");
  }
}

double sub_20BF81C6C(uint64_t a1, double a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::GfQuatd *a4)
{
  double result;

  if (!*(_DWORD *)(a1 + 88))
    return *(double *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::GfQuatd *)(a1 + 56), a4, (a2 - *(double *)(a1 + 8)) / (*(double *)(a1 + 16) - *(double *)(a1 + 8)));
  return result;
}

_QWORD *sub_20BF81CB0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C520DB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BF81CF8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF81D14(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF81D28(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t sub_20BF81D38(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C520E00))
    return a1 + 24;
  else
    return 0;
}

_DWORD *sub_20BF81D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::GfQuatf *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *result;
  unsigned int *v14;
  unsigned int v15;

  v6 = sub_20BF81EF8(a1, a5, a2, a3);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  a4[1] = &off_24C51E5E0;
  result = operator new(0x14uLL);
  *(float *)result = v6;
  result[1] = v8;
  result[2] = v10;
  result[3] = v12;
  v14 = result + 4;
  atomic_store(0, result + 4);
  *a4 = result;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  return result;
}

unsigned int *sub_20BF81DF0@<X0>(unsigned int **a1@<X8>)
{
  int *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  a1[1] = (unsigned int *)&off_24C51E5E0;
  v6 = *(_OWORD *)v2;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v6;
  v4 = result + 4;
  atomic_store(0, result + 4);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

void sub_20BF81E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  _QWORD v4[4];
  char v5;

  if (a2 && a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + 16);
    if (*(_BYTE *)(a3 + 68))
      v3 = *(_OWORD **)(a3 + 16);
    else
      v3 = (_OWORD *)(*(_QWORD *)(a3 + 16) + 16);
    *(_OWORD *)(a1 + 40) = *v3;
  }
  else
  {
    v4[0] = "ts/evalCache.h";
    v4[1] = "_Init";
    v4[2] = 636;
    v4[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalQuaternionCache<pxrInternal__aapl__pxrReserved__::GfQuatf>::_I"
            "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalQuaternionCache from invalid keyframes");
  }
}

float sub_20BF81EF8(uint64_t a1, double a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::GfQuatf *a4)
{
  float result;

  if (!*(_DWORD *)(a1 + 56))
    return *(float *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::GfQuatf *)(a1 + 40), a4, (a2 - *(double *)(a1 + 8)) / (*(double *)(a1 + 16) - *(double *)(a1 + 8)));
  return result;
}

_QWORD *sub_20BF81F3C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C520E98;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BF81F84(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BF81FA0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF81FB4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t sub_20BF81FC4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C520EE8))
    return a1 + 24;
  else
    return 0;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, double a7, double a8)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(Instance, (uint64_t)a1, a3);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::_Initialize(a1, a2, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_Initialize(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, double a6, double a7)
{
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)a1 + 1) = *a2;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeKnotType((uint64_t)a1, a3);
  if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)a1 + 192))(a1))
  {
    if (a4[1])
    {
      sub_20BF4C6D0(v14, a4);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope(a1, v14);
      sub_20BF4C2D8((uint64_t)v14);
    }
    if (a5[1])
    {
      sub_20BF4C6D0(v13, a5);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope(a1, v13);
      sub_20BF4C2D8((uint64_t)v13);
    }
  }
  return pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeTangentLength(a1, a6, a7);
}

void sub_20BF82198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, _QWORD *a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, double a8, double a9)
{
  unint64_t Instance;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(Instance, (uint64_t)a1, a4);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, uint64_t))(*(_QWORD *)a1 + 112))(a1, 1);
  sub_20BF4C6D0(v20, a3);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue((uint64_t)a1, v20);
  sub_20BF4C2D8((uint64_t)v20);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::_Initialize(a1, a2, a5, a6, a7, a8, a9);
  return a1;
}

void sub_20BF822D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetIsDualValued(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 112))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue(uint64_t a1, _QWORD *a2)
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF4C6D0(v4, a2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v4);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20BF82370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeKnotType(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (!(_DWORD)a2 || v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1))
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
      if ((_DWORD)a2 == 2)
        v6 = v5;
      else
        v6 = 1;
      if (v6)
        a2 = a2;
      else
        a2 = 1;
    }
  }
  else
  {
    a2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 192))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(a1);
  if ((_DWORD)result)
  {
    sub_20BF4C6D0(v5, a2);
    (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, _QWORD *))(*(_QWORD *)a1 + 232))(a1, v5);
    return sub_20BF4C2D8((uint64_t)v5);
  }
  return result;
}

void sub_20BF824A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(a1);
  if ((_DWORD)result)
  {
    sub_20BF4C6D0(v5, a2);
    (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, _QWORD *))(*(_QWORD *)a1 + 240))(a1, v5);
    return sub_20BF4C2D8((uint64_t)v5);
  }
  return result;
}

void sub_20BF82540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, double a2, double a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 192))(this);
  if ((_DWORD)result)
  {
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this))
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, double))(*(_QWORD *)this + 248))(this, a2);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this))
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, double))(*(_QWORD *)this + 256))(this, a3);
    result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
    if ((_DWORD)result)
      return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 280))(this);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsInterpolatable(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 152))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetKnotType(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, double a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, double))(*(_QWORD *)this + 248))(this, a2);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, double a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, double))(*(_QWORD *)this + 256))(this, a2);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::ResetTangentSymmetryBroken(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 280))(this);
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  *(_QWORD *)this = &unk_24C520A40;
  *((_QWORD *)this + 1) = 0;
  v3 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v5 = *v2;
  v6 = *v3;
  v7 = *v4;
  *((_QWORD *)this + 2) = *v2;
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v7;
  *(_QWORD *)((char *)this + 62) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
  return this;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::TsKeyFrame *, pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)a2 + 16))(a2, this);
  return this;
}

{
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::TsKeyFrame *, pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)a2 + 16))(a2, this);
  return this;
}

void pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  (**(void (***)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))this)(this);
}

{
  (**(void (***)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))this)(this);
}

void (***pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(void (***a1)(_QWORD), void (***a2)(_QWORD)))(_QWORD)
{
  if (a1 != a2)
  {
    (**a1)(a1);
    ((void (*)(void (***)(_QWORD), void (***)(_QWORD)))(*a2)[2])(a2, a1);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator!=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 0;
  else
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) ^ 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide(double *a1, double *a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  double v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v15;
  double v16;
  char *v17;
  char v18;
  char *v19;
  std::type_info v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 56))(a1);
  if (v6 != (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 56))(a2))
    return 0;
  if (a1[1] != a2[1])
    return 0;
  v7 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 184))(a1);
  if (v7 != (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 184))(a2))
    return 0;
  v10 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 184))(a1);
  if (a3)
  {
    if (!v10
      || (v11 = (*(double (**)(double *))(*(_QWORD *)a1 + 224))(a1),
          v11 == (*(double (**)(double *))(*(_QWORD *)a2 + 224))(a2))
      && ((*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 208))(v21, a1),
          (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 208))(&v20, a2),
          v13 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v12), sub_20BF4C2D8((uint64_t)&v20), sub_20BF4C2D8((uint64_t)v21), (v13 & 1) != 0))
    {
      (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 80))(v21, a1);
      (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 80))(&v20, a2);
      v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v14);
LABEL_15:
      v8 = v15;
      sub_20BF4C2D8((uint64_t)&v20);
      sub_20BF4C2D8((uint64_t)v21);
      return v8;
    }
  }
  else if (!v10
         || (v16 = (*(double (**)(double *))(*(_QWORD *)a1 + 216))(a1),
             v16 == (*(double (**)(double *))(*(_QWORD *)a2 + 216))(a2))
         && ((*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 200))(v21, a1),
             (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 200))(&v20, a2),
             v18 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v17), sub_20BF4C2D8((uint64_t)&v20), sub_20BF4C2D8((uint64_t)v21), (v18 & 1) != 0))
  {
    (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 120))(v21, a1);
    (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 120))(&v20, a2);
    v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v19);
    goto LABEL_15;
  }
  return 0;
}

void sub_20BF82B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 56))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 184))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 216))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 200))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 120))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 224))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 208))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 80))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::CanSetKnotType(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue(uint64_t a1, _QWORD *a2)
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF4C6D0(v4, a2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, v4);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20BF82C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(_QWORD *a1, int a2)
{
  uint64_t v2;

  v2 = 80;
  if (!a2)
    v2 = 120;
  return (*(uint64_t (**)(void))(*a1 + v2))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    sub_20BF4C6D0(v6, a2);
    v4 = v6;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue(a1, v6);
  }
  else
  {
    sub_20BF4C6D0(v7, a2);
    v4 = v7;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue(a1, v7);
  }
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20BF82D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValueDerivative(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 96))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 144))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValueDerivative(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 128))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 104))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsExtrapolatable(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 160))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  uint64_t v2;
  const std::type_info *v3;
  char *v4;
  void **v5;
  void *__p[2];
  char v8;
  _QWORD v9[4];
  char v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 192))(this);
  if ((v2 & 1) == 0)
  {
    v9[0] = "ts/keyFrame.cpp";
    v9[1] = "_ValidateTangentSetting";
    v9[2] = 335;
    v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting() const";
    v10 = 0;
    (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 80))(v11, this);
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v11, v3, v4, (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"value type %s does not support tangents", (const char *)v5);
    if (v8 < 0)
      operator delete(__p[0]);
    sub_20BF4C2D8((uint64_t)v11);
  }
  return v2;
}

void sub_20BF82E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_20BF4C2D8(v15 - 40);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetTangentSymmetryBroken(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(_QWORD *)this + 264))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetTangentSymmetryBroken(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, uint64_t a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, uint64_t))(*(_QWORD *)this + 272))(this, a2);
  return result;
}

void sub_20BF83170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_20BF4C2D8((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF831C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  _QWORD v15[2];
  _QWORD v16[2];
  std::string v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 120))(v16, a1);
    sub_20BF834B0((uint64_t)v16);
    v4 = std::string::append(&v14, " - ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(v15, a1);
    sub_20BF834B0((uint64_t)v15);
    if ((v13 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v7 = v13;
    else
      v7 = (std::string::size_type)__p[1];
    v8 = std::string::append(&v17, (const std::string::value_type *)v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_20BF4C2D8((uint64_t)v15);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v10 = (std::string *)v16;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v17, a1);
    sub_20BF834B0((uint64_t)&v17);
    v10 = &v17;
  }
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20BF83330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  sub_20BF4C2D8(v23 - 48);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF833B0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C520F00, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, (std::type_info *)&unk_24C520F00, (char *)0x48, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF8346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF834B0(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20BF83564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF83578(_QWORD *result)
{
  *result = &unk_24C520A40;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *this, double a2)
{
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  v3 = *(_QWORD *)this;
  result = *((_QWORD *)this + 1);
  if (v3 == result)
    return v3;
  v4 = *(double *)(result - 64);
  if (v4 < a2)
    return result;
  v5 = *(double *)(v3 + 8);
  if (v5 >= a2)
    return v3;
  v6 = result - v3;
  v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
  v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
  if (v7 <= v8)
  {
    result = v3;
    do
    {
      v26 = v7 >> 1;
      v27 = result + 72 * (v7 >> 1);
      v28 = *(double *)(v27 + 8);
      v29 = v27 + 72;
      v7 += ~(v7 >> 1);
      if (v28 >= a2)
        v7 = v26;
      else
        result = v29;
    }
    while (v7);
  }
  else
  {
    v9 = v3 + 72 * v8;
    if (*(double *)(v9 + 8) >= a2)
    {
      if (v8)
      {
        v19 = 0;
        while (1)
        {
          result = v9 + v19;
          if (*(double *)(v9 + v19 - 64) < a2)
            break;
          v20 = v19 - 72;
          if ((_DWORD)v19 != -144)
          {
            v19 -= 72;
            if (v20 + 72 * v8)
              continue;
          }
          if (!(v20 + 72 * v8))
            return v3;
          v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 + 72 * v8) >> 3);
          result = v3;
          do
          {
            v22 = v21 >> 1;
            v23 = result + 72 * (v21 >> 1);
            v24 = *(double *)(v23 + 8);
            v25 = v23 + 72;
            v21 += ~(v21 >> 1);
            if (v24 >= a2)
              v21 = v22;
            else
              result = v25;
          }
          while (v21);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
    else if (v9 + 72 != result)
    {
      v10 = 0;
      do
      {
        v11 = v9 + v10;
        if (*(double *)(v9 + v10 + 80) >= a2)
          return v11 + 72;
        v12 = v10 + 72;
        if ((_DWORD)v10 == 144)
          break;
        v10 += 72;
      }
      while (v11 + 144 != result);
      v13 = v9 + v12 + 72;
      if (v13 != result)
      {
        v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v12 - 72) >> 3);
        result = v13;
        do
        {
          v15 = v14 >> 1;
          v16 = result + 72 * (v14 >> 1);
          v17 = *(double *)(v16 + 8);
          v18 = v16 + 72;
          v14 += ~(v14 >> 1);
          if (v17 >= a2)
            v14 = v15;
          else
            result = v18;
        }
        while (v14);
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  v3 = *(_QWORD *)this;
  result = *((_QWORD *)this + 1);
  if (v3 == result)
    return v3;
  v4 = *(double *)(result - 64);
  if (v4 < a2)
    return result;
  v5 = *(double *)(v3 + 8);
  if (v5 >= a2)
    return v3;
  v6 = result - v3;
  v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
  v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
  if (v7 <= v8)
  {
    result = v3;
    do
    {
      v26 = v7 >> 1;
      v27 = result + 72 * (v7 >> 1);
      v28 = *(double *)(v27 + 8);
      v29 = v27 + 72;
      v7 += ~(v7 >> 1);
      if (v28 >= a2)
        v7 = v26;
      else
        result = v29;
    }
    while (v7);
  }
  else
  {
    v9 = v3 + 72 * v8;
    if (*(double *)(v9 + 8) >= a2)
    {
      if (v8)
      {
        v19 = 0;
        while (1)
        {
          result = v9 + v19;
          if (*(double *)(v9 + v19 - 64) < a2)
            break;
          v20 = v19 - 72;
          if ((_DWORD)v19 != -144)
          {
            v19 -= 72;
            if (v20 + 72 * v8)
              continue;
          }
          if (!(v20 + 72 * v8))
            return v3;
          v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 + 72 * v8) >> 3);
          result = v3;
          do
          {
            v22 = v21 >> 1;
            v23 = result + 72 * (v21 >> 1);
            v24 = *(double *)(v23 + 8);
            v25 = v23 + 72;
            v21 += ~(v21 >> 1);
            if (v24 >= a2)
              v21 = v22;
            else
              result = v25;
          }
          while (v21);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
    else if (v9 + 72 != result)
    {
      v10 = 0;
      do
      {
        v11 = v9 + v10;
        if (*(double *)(v9 + v10 + 80) >= a2)
          return v11 + 72;
        v12 = v10 + 72;
        if ((_DWORD)v10 == 144)
          break;
        v10 += 72;
      }
      while (v11 + 144 != result);
      v13 = v9 + v12 + 72;
      if (v13 != result)
      {
        v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v12 - 72) >> 3);
        result = v13;
        do
        {
          v15 = v14 >> 1;
          v16 = result + 72 * (v14 >> 1);
          v17 = *(double *)(v16 + 8);
          v18 = v16 + 72;
          v14 += ~(v14 >> 1);
          if (v17 >= a2)
            v14 = v15;
          else
            result = v18;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *this, double a2)
{
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  v3 = *(_QWORD *)this;
  result = *((_QWORD *)this + 1);
  if (v3 == result)
    return v3;
  v4 = *(double *)(result - 64);
  if (v4 > a2)
  {
    v5 = *(double *)(v3 + 8);
    if (v5 > a2)
      return v3;
    v6 = result - v3;
    v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
    v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
    if (v7 <= v8)
    {
      result = v3;
      do
      {
        v26 = v7 >> 1;
        v27 = result + 72 * (v7 >> 1);
        v28 = *(double *)(v27 + 8);
        v29 = v27 + 72;
        v7 += ~(v7 >> 1);
        if (v28 > a2)
          v7 = v26;
        else
          result = v29;
      }
      while (v7);
    }
    else
    {
      v9 = v3 + 72 * v8;
      if (*(double *)(v9 + 8) <= a2)
      {
        if (v9 + 72 != result)
        {
          v17 = 0;
          do
          {
            v18 = v9 + v17;
            if (*(double *)(v9 + v17 + 80) > a2)
              return v18 + 72;
            v19 = v17 + 72;
            if ((_DWORD)v17 == 144)
              break;
            v17 += 72;
          }
          while (v18 + 144 != result);
          v20 = v9 + v19 + 72;
          if (v20 != result)
          {
            v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v19 - 72) >> 3);
            result = v20;
            do
            {
              v22 = v21 >> 1;
              v23 = result + 72 * (v21 >> 1);
              v24 = *(double *)(v23 + 8);
              v25 = v23 + 72;
              v21 += ~(v21 >> 1);
              if (v24 > a2)
                v21 = v22;
              else
                result = v25;
            }
            while (v21);
          }
        }
      }
      else if (v8)
      {
        v10 = 0;
        while (1)
        {
          result = v9 + v10;
          if (*(double *)(v9 + v10 - 64) <= a2)
            break;
          v11 = v10 - 72;
          if ((_DWORD)v10 != -144)
          {
            v10 -= 72;
            if (v11 + 72 * v8)
              continue;
          }
          if (!(v11 + 72 * v8))
            return v3;
          v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 + 72 * v8) >> 3);
          result = v3;
          do
          {
            v13 = v12 >> 1;
            v14 = result + 72 * (v12 >> 1);
            v15 = *(double *)(v14 + 8);
            v16 = v14 + 72;
            v12 += ~(v12 >> 1);
            if (v15 > a2)
              v12 = v13;
            else
              result = v16;
          }
          while (v12);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  v3 = *(_QWORD *)this;
  result = *((_QWORD *)this + 1);
  if (v3 == result)
    return v3;
  v4 = *(double *)(result - 64);
  if (v4 > a2)
  {
    v5 = *(double *)(v3 + 8);
    if (v5 > a2)
      return v3;
    v6 = result - v3;
    v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
    v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
    if (v7 <= v8)
    {
      result = v3;
      do
      {
        v26 = v7 >> 1;
        v27 = result + 72 * (v7 >> 1);
        v28 = *(double *)(v27 + 8);
        v29 = v27 + 72;
        v7 += ~(v7 >> 1);
        if (v28 > a2)
          v7 = v26;
        else
          result = v29;
      }
      while (v7);
    }
    else
    {
      v9 = v3 + 72 * v8;
      if (*(double *)(v9 + 8) <= a2)
      {
        if (v9 + 72 != result)
        {
          v17 = 0;
          do
          {
            v18 = v9 + v17;
            if (*(double *)(v9 + v17 + 80) > a2)
              return v18 + 72;
            v19 = v17 + 72;
            if ((_DWORD)v17 == 144)
              break;
            v17 += 72;
          }
          while (v18 + 144 != result);
          v20 = v9 + v19 + 72;
          if (v20 != result)
          {
            v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v19 - 72) >> 3);
            result = v20;
            do
            {
              v22 = v21 >> 1;
              v23 = result + 72 * (v21 >> 1);
              v24 = *(double *)(v23 + 8);
              v25 = v23 + 72;
              v21 += ~(v21 >> 1);
              if (v24 > a2)
                v21 = v22;
              else
                result = v25;
            }
            while (v21);
          }
        }
      }
      else if (v8)
      {
        v10 = 0;
        while (1)
        {
          result = v9 + v10;
          if (*(double *)(v9 + v10 - 64) <= a2)
            break;
          v11 = v10 - 72;
          if ((_DWORD)v10 != -144)
          {
            v10 -= 72;
            if (v11 + 72 * v8)
              continue;
          }
          if (!(v11 + 72 * v8))
            return v3;
          v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 + 72 * v8) >> 3);
          result = v3;
          do
          {
            v13 = v12 >> 1;
            v14 = result + 72 * (v12 >> 1);
            v15 = *(double *)(v14 + 8);
            v16 = v14 + 72;
            v12 += ~(v12 >> 1);
            if (v15 > a2)
              v12 = v13;
            else
              result = v16;
          }
          while (v12);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrame(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  uint64_t result;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  if (*((_QWORD *)this + 1) == result
    || *(_QWORD *)this != result && a3 - *(double *)(result - 64) < *(double *)(result + 8) - a3)
  {
    result -= 72;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameBefore(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  uint64_t v4;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  if (*((_QWORD *)this + 1) == v4)
    return v4 - 72;
  if (*(_QWORD *)this == v4)
    return 0;
  return v4 - 72;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameAfter(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  v6 = *((_QWORD *)this + 1);
  if (v6 != result && *(double *)(result + 8) == a3)
    result += 72;
  if (result == v6)
    return 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFramesSurrounding(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  v5 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v4)
    v6 = 0;
  else
    v6 = v4 - 72;
  if (v5 == v4)
    return v5 - 72;
  else
    return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3, std::type_info *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v9;
  const pxrInternal__aapl__pxrReserved__::VtValue *v10;
  char IsClose;
  double v12;
  double *ClosestKeyFrameBefore;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v14;
  double *ClosestKeyFrameAfter;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v16;
  uint64_t MasterInterval;
  double v18;
  double v19;
  double v20;
  BOOL v22;
  uint64_t v23;
  double v24;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v25;
  char *v26;
  char v27;
  const pxrInternal__aapl__pxrReserved__::VtValue *v29;
  std::type_info v31;
  uint64_t v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(a2))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v32, a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v31, a2);
    IsClose = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v32, &v31, v10);
    sub_20BF4C2D8((uint64_t)&v31);
    sub_20BF4C2D8((uint64_t)v32);
    if ((IsClose & 1) == 0)
      return 0;
  }
  v12 = *((double *)a2 + 1);
  ClosestKeyFrameBefore = (double *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameBefore(this, v9, v12);
  ClosestKeyFrameAfter = (double *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameAfter(this, v14, v12);
  if (!pxrInternal__aapl__pxrReserved__::TsLoopParams::IsValid(a3))
    goto LABEL_29;
  MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(a3);
  v18 = *(double *)MasterInterval;
  v19 = *(double *)(MasterInterval + 16);
  if (*(double *)MasterInterval >= v12 && (*(double *)MasterInterval != v12 || !*(_BYTE *)(MasterInterval + 8)))
    goto LABEL_29;
  if (v19 <= v12 && (v19 != v12 || !*(_BYTE *)(MasterInterval + 24)))
    goto LABEL_29;
  if (!ClosestKeyFrameBefore)
    return 0;
  v20 = ClosestKeyFrameBefore[1];
  if (v18 >= v20 && (v18 != v20 || *(_BYTE *)(MasterInterval + 8) == 0))
    return 0;
  if (v19 <= v20)
  {
    if (v19 != v20)
      return 0;
    v22 = *(_BYTE *)(MasterInterval + 24) == 0;
  }
  else
  {
    v22 = 0;
  }
  v23 = 0;
  if (!v22)
  {
    if (ClosestKeyFrameAfter)
    {
      v24 = ClosestKeyFrameAfter[1];
      if (v18 < v24 || (v23 = 0, v18 == v24) && *(_BYTE *)(MasterInterval + 8))
      {
        if (v19 > v24 || (v23 = 0, v19 == v24) && *(_BYTE *)(MasterInterval + 24))
        {
LABEL_29:
          if (ClosestKeyFrameBefore && ClosestKeyFrameAfter)
          {
            if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(a2)
              && !pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameBefore))
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v32, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameBefore);
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v31, a2);
              v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v32, &v31, v26);
              sub_20BF4C2D8((uint64_t)&v31);
              sub_20BF4C2D8((uint64_t)v32);
              if ((v27 & 1) != 0)
                return 1;
            }
            if (pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)ClosestKeyFrameBefore, a2, v25))return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameAfter, v16);
          }
          else
          {
            if (!ClosestKeyFrameBefore && ClosestKeyFrameAfter)
              return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameAfter, v16);
            if (ClosestKeyFrameBefore && !ClosestKeyFrameAfter)
              return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)ClosestKeyFrameBefore, a2, v16);
            if (a4->__type_name)
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v32, a2);
              v23 = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v32, a4, v29);
              sub_20BF4C2D8((uint64_t)v32);
              return v23;
            }
          }
          return 0;
        }
      }
    }
  }
  return v23;
}

void sub_20BF841D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsClose(pxrInternal__aapl__pxrReserved__ *this, std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v5;
  double *v6;
  double v7;
  char *v8;
  uint64_t v9;
  float *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  double v12;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v13;

  if (sub_20BF78EEC(this))
  {
    v5 = *((_QWORD *)this + 1);
    v6 = (double *)this;
    if ((v5 & 4) != 0)
      v6 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    v7 = *v6;
  }
  else
  {
    if (!sub_20BF7B9F8(this))
      return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(this, a2, v8);
    v9 = *((_QWORD *)this + 1);
    v10 = (float *)this;
    if ((v9 & 4) != 0)
      v10 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    v7 = *v10;
  }
  if (sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    type_name = a2->__type_name;
    if ((type_name & 4) != 0)
      a2 = (std::type_info *)(*(uint64_t (**)(std::type_info *))((type_name & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    v12 = *(double *)&a2->__vftable;
    return vabdd_f64(v7, v12) < 0.000001;
  }
  if (sub_20BF7B9F8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v13 = a2->__type_name;
    if ((v13 & 4) != 0)
      a2 = (std::type_info *)(*(uint64_t (**)(std::type_info *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    v12 = *(float *)&a2->__vftable;
    return vabdd_f64(v7, v12) < 0.000001;
  }
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(this, a2, v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  const pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t IsClose;
  const pxrInternal__aapl__pxrReserved__::VtValue *v7;
  char v8;
  const pxrInternal__aapl__pxrReserved__::VtValue *v9;
  std::type_info v11;
  uint64_t v12[2];
  std::type_info v13;
  uint64_t v14[4];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*((double *)this + 1) < *((double *)a2 + 1))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v14, this);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(a2))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v13, a2);
    else
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v13, a2);
    if ((pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v14, &v13, v5) & 1) != 0)
    {
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(this))
        goto LABEL_13;
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(this)
        || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValueDerivative(v12, this),
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero((uint64_t *)&v11, this),
            v8 = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v12, &v11, v7),
            sub_20BF4C2D8((uint64_t)&v11),
            sub_20BF4C2D8((uint64_t)v12),
            (v8 & 1) != 0))
      {
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a2))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValueDerivative(v12, a2);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero((uint64_t *)&v11, a2);
          IsClose = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v12, &v11, v9);
          sub_20BF4C2D8((uint64_t)&v11);
          sub_20BF4C2D8((uint64_t)v12);
LABEL_14:
          sub_20BF4C2D8((uint64_t)&v13);
          sub_20BF4C2D8((uint64_t)v14);
          return IsClose;
        }
LABEL_13:
        IsClose = 1;
        goto LABEL_14;
      }
    }
    IsClose = 0;
    goto LABEL_14;
  }
  v14[0] = (uint64_t)"ts/keyFrameUtils.cpp";
  v14[1] = (uint64_t)"Ts_IsSegmentFlat";
  v14[2] = 223;
  v14[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(const TsKeyFrame &, const TsKeyFrame &)";
  v15 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"The first key frame must come before the second.");
  return 0;
}

void sub_20BF844D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  sub_20BF4C2D8((uint64_t)&a9);
  sub_20BF4C2D8((uint64_t)&a11);
  sub_20BF4C2D8((uint64_t)&a13);
  sub_20BF4C2D8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams(uint64_t this, char a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;

  *(_BYTE *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 64) = 0;
  *(double *)(this + 72) = a7;
  if (a4 > 0.0 && a5 >= 0.0 && a6 >= 0.0)
  {
    v7 = a3 + a4;
    *(double *)(this + 8) = a3 - a5;
    *(_BYTE *)(this + 16) = vabdd_f64(a3, a5) != INFINITY;
    *(double *)(this + 24) = v7 + a6;
    *(double *)(this + 40) = a3;
    *(_BYTE *)(this + 48) = fabs(a3) != INFINITY;
    *(double *)(this + 56) = v7;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  return this;
}

{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  return this;
}

_BYTE *pxrInternal__aapl__pxrReserved__::TsLoopParams::SetLooping(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *(unsigned __int8 *)this;
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetStart(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 5);
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetPeriod(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 7) - *((double *)this + 5);
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetPreRepeatFrames(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 5) - *((double *)this + 1);
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetRepeatFrames(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 3) - *((double *)this + 7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return (uint64_t)this + 8;
}

BOOL pxrInternal__aapl__pxrReserved__::TsLoopParams::IsValid(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = *((double *)this + 1);
  v2 = *((double *)this + 3);
  if (v1 > v2 || v1 == v2 && (!*((_BYTE *)this + 16) || !*((_BYTE *)this + 32)))
    return 0;
  v3 = *((double *)this + 5);
  v4 = *((double *)this + 7);
  if (v3 > v4)
    return 0;
  if (v3 != v4)
    return 1;
  if (!*((_BYTE *)this + 48))
    return 0;
  return *((_BYTE *)this + 64) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::SetValueOffset(uint64_t this, double a2)
{
  *(double *)(this + 72) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 9);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic(pxrInternal__aapl__pxrReserved__ *this, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t result;
  double v9;
  double v10;
  double v11;
  float v12;
  double v13;

  v4 = *((double *)this + 1);
  v5 = *((double *)this + 2);
  v6 = *(double *)this;
  if (v5 == 0.0)
  {
    if (v4 != 0.0)
    {
      v7 = -v6 / v4;
      result = 1;
      v9 = v7;
LABEL_7:
      *a2 = v7;
      *a3 = v9;
      return result;
    }
LABEL_6:
    result = 0;
    v7 = 0.0;
    v9 = 0.0;
    goto LABEL_7;
  }
  v10 = v4 * v4 + v5 * -4.0 * v6;
  v11 = sqrt(fabs(v10));
  if (v10 < 0.0)
  {
    v12 = v11;
    if (v12 != 0.0)
      goto LABEL_6;
  }
  if (v4 < 0.0)
    v11 = -v11;
  v13 = (v4 + v11) * -0.5;
  *a2 = v13 / v5;
  v7 = v6 / v13;
  if (v13 == 0.0)
    v7 = 0.0;
  *a3 = v7;
  v9 = *a2;
  result = 1;
  if (*a2 > v7)
    goto LABEL_7;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(double *a1, double *a2, uint64_t a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int i;
  double v12;
  BOOL v13;
  BOOL v14;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  BOOL v23;

  v4 = *(double *)a3;
  v5 = *(double *)(a3 + 16);
  v6 = (*(double *)a3 + v5) * 0.5;
  v8 = a1[2];
  v7 = a1[3];
  v10 = *a1;
  v9 = a1[1];
  for (i = 19; ; --i)
  {
    v12 = (v10 + v6 * (v9 + v6 * (v6 * v7 + v8)) - a4) / (*a2 + v6 * (v6 * a2[2] + a2[1]));
    v6 = v6 - v12;
    v13 = v4 != v6;
    if (!*(_BYTE *)(a3 + 8))
      v13 = 1;
    if (v4 >= v6 && v13)
      break;
    v14 = v5 == v6;
    if (!*(_BYTE *)(a3 + 24))
      v14 = 0;
    if (v5 <= v6 && !v14)
      break;
    if (fabs(v12) < 0.00001 || i == 0)
      return v6;
  }
  v16 = v10 + v4 * (v9 + v4 * (v4 * v7 + v8));
  if (vabdd_f64(v16, a4) < 0.0001)
    return *(double *)a3;
  v17 = v10 + v5 * (v9 + v5 * (v5 * v7 + v8)) - a4;
  if (fabs(v17) < 0.0001)
    return *(double *)(a3 + 16);
  v18 = v16 - a4;
  v19 = (v16 - a4) * v17;
  v6 = -1.0;
  if (v19 <= 0.0)
  {
    v20 = 20;
    do
    {
      v6 = v4 - v18 * (v5 - v4) / (v17 - v18);
      v21 = v10 + v6 * (v9 + v6 * (v8 + v7 * v6));
      if (vabdd_f64(v21, a4) < 0.000001)
        break;
      v22 = v21 - a4;
      v23 = v18 * v22 > 0.0;
      if (v18 * v22 <= 0.0)
      {
        v5 = v4 - v18 * (v5 - v4) / (v17 - v18);
      }
      else
      {
        v4 = v4 - v18 * (v5 - v4) / (v17 - v18);
        v18 = v22;
      }
      if (!v23)
        v17 = v22;
      --v20;
    }
    while (v20);
  }
  return v6;
}

void pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(float64x2_t *this, const double *a2, double a3, uint64_t a4, double *a5)
{
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  char v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v24 = 1.0;
  v25 = 0.0;
  v20 = 0.0;
  v21 = 1;
  v22 = 0x3FF0000000000000;
  v23 = 1;
  v19 = this[1];
  v27 = vmulq_f64(v19, (float64x2_t)xmmword_20CA9F2D0);
  v7 = this->f64[1];
  v26 = v7;
  if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v26, &v25, &v24, a5))
  {
    v8 = v24;
    if (v25 >= 0.0 && v24 <= 1.0)
    {
      v10 = this->f64[0];
      v11 = v25 * (v7 + v25 * (v19.f64[0] + vmuld_lane_f64(v25, v19, 1))) + this->f64[0];
      v12 = v24 * (v7 + v24 * (v19.f64[0] + vmuld_lane_f64(v24, v19, 1))) + this->f64[0];
      if (v11 >= v12)
      {
        v15 = (v7 + (v19.f64[1] * 0.0 + v19.f64[0]) * 0.0) * 0.0 + v10;
        v16 = v19.f64[1] + v19.f64[0] + v7 + v10;
        if (v12 <= v16)
          v17 = v12;
        else
          v17 = v16;
        if (v12 >= v15)
          v18 = v17;
        else
          v18 = v15;
        if (v11 <= v16)
          v16 = v11;
        if (v11 < v15)
          v16 = v15;
        if ((v16 + v18) * 0.5 <= a3)
        {
          v13 = fabs(v24) != INFINITY;
          v20 = v24;
          v14 = 1;
          v8 = 1.0;
        }
        else
        {
          v14 = fabs(v25) != INFINITY;
          v20 = 0.0;
          v13 = 1;
          v8 = v25;
        }
      }
      else
      {
        v13 = fabs(v25) != INFINITY;
        v14 = fabs(v24) != INFINITY;
        v20 = v25;
      }
      v21 = v13;
      v22 = *(_QWORD *)&v8;
      v23 = v14;
    }
  }
  pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(this->f64, &v26, (uint64_t)&v20, a3);
}

double pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2, _QWORD *a3, double *a4, double a5)
{
  double v9;
  double v10;
  void (***v11)(_QWORD);
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  pxrInternal__aapl__pxrReserved__ *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v18;
  _QWORD *KeyFrameData;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  double v23;
  double v24;
  double v25;
  char v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  double v29;
  double v31;
  double *v32;
  std::__shared_weak_count *v33;
  double v34;
  std::__shared_weak_count *v35;
  _BYTE v36[72];
  _BYTE v37[72];
  _BYTE v38[72];
  void (**v39[9])(_QWORD);
  void (**v40[9])(_QWORD);
  double v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v31 = a5;
  v9 = a4[2] - *a4;
  if (v9 <= 0.0)
    v10 = 1.0;
  else
    v10 = v9 + 1.0;
  if (v10 != (double)(unint64_t)((uint64_t)(a3[1] - *a3) >> 3))
  {
    *(_QWORD *)&v41 = "ts/simplify.cpp";
    v42 = "_ComputeErrorIfKeyRemoved";
    v43 = 341;
    v44 = "double pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(TsSpline *, TsTime, const GfInterval &, con"
          "st std::vector<double> &, const GfInterval &)";
    v45 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "vals.size() == valsInterval.GetSize() + 1", 0) & 1) == 0)return 1.79769313e308;
  }
  v41 = *a2;
  v11 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v41);
  v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v31);
  v41 = a2[2];
  v13 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v41);
  if (*(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this)
                                                              + 8) == v12)
  {
    *(_QWORD *)&v41 = "ts/simplify.cpp";
    v42 = "_ComputeErrorIfKeyRemoved";
    v43 = 349;
    v44 = "double pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(TsSpline *, TsTime, const GfInterval &, con"
          "st std::vector<double> &, const GfInterval &)";
    v45 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "k != spline->end()", 0) & 1) == 0)
      return 1.79769313e308;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v41, v12);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v40);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v39);
  v14 = *(void (****)(_QWORD))(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
  if (v14 != v11)
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(v40, v11);
  v15 = *(void (****)(_QWORD))(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
  if (v15 != v13)
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(v39, v13);
  pxrInternal__aapl__pxrReserved__::TsSpline::RemoveKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, 0, *(double *)&v42);
  sub_20BF850B0(this, a2, a3, a4);
  v34 = *a2;
  v16 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v34);
  v34 = a2[2];
  v17 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v34);
  if (*(pxrInternal__aapl__pxrReserved__ **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) == v16
    || *(pxrInternal__aapl__pxrReserved__ **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) == v17)
  {
    goto LABEL_26;
  }
  v34 = 0.0;
  v35 = 0;
  KeyFrameData = (_QWORD *)pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(v16, v18);
  v21 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(v17, v20);
  pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CreateTypedEvalCache(KeyFrameData, &v32, v21);
  v22 = v33;
  *(_QWORD *)&v34 = v32;
  v35 = v33;
  v23 = v32[10];
  if (v23 == 0.0
    || v23 <= 0.0
    || (v24 = v32[9], v25 = v24 / (v23 * -3.0), v25 <= 0.05)
    || v25 >= 0.95
    || v25 * (v24 + v24 + v23 * (v25 * 3.0)) + v32[8] >= 0.001)
  {
    v26 = 0;
    if (!v33)
      goto LABEL_23;
  }
  else
  {
    v26 = 1;
    if (!v33)
      goto LABEL_23;
  }
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((v26 & 1) != 0)
      goto LABEL_24;
LABEL_26:
    v29 = sub_20BF854A4(this, a4, a3, a4, 1);
    goto LABEL_27;
  }
LABEL_23:
  if ((v26 & 1) == 0)
    goto LABEL_26;
LABEL_24:
  v29 = 1.79769313e308;
LABEL_27:
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v38, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v41);
  pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v38, 0);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v38);
  if (v14 != v11)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v37, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v40);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v37, 0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v37);
  }
  if (v15 != v13)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v36, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v39);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v36, 0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v36);
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v39);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v40);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v41);
  return v29;
}

void sub_20BF85030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a14);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a41);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v41 - 248));
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v41 - 176));
  _Unwind_Resume(a1);
}

void sub_20BF850B0(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2, _QWORD *a3, double *a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v24;
  uint64_t v25;
  _BYTE v26[72];
  _BYTE v27[72];
  uint64_t v28[2];
  _BYTE v29[72];
  void **v30[10];

  v30[9] = *(void ***)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(v30);
  pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFramesInMultiInterval(a1, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v30, (uint64_t *)&v24);
  sub_20BE6100C((uint64_t)v30, v30[1]);
  if (v25 - (_QWORD)v24 == 144 && sub_20BF854A4(a1, a2, a3, a4, 0) >= 1.0e-10)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30, v24);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v25 - 72));
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v28, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30);
    v8 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
    sub_20BF4C2D8((uint64_t)v28);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v28, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29);
    v9 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
    sub_20BF4C2D8((uint64_t)v28);
    if (v8 >= v9)
      v10 = v9;
    else
      v10 = v8;
    if (v8 <= v9)
      v11 = v9;
    else
      v11 = v8;
    v12 = fmax(a2[2] - *a2, 0.0);
    if (v12 != 0.0)
    {
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30))
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30, v12 * 0.33);
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29))
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29, v12 * 0.33);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27, 0);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26, 0);
      v21 = (v11 - v10) / 20000.0;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26);
      v13 = 0;
      v14 = 0x4202A05F20000000;
      v22 = 0.1 / v12;
      do
      {
        v23 = *(double *)&v14;
        if ((v13 & 1) != 0)
          v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29;
        else
          v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30;
        v17 = v22;
        v16 = 0.49998;
        do
        {
          v18 = (v17 + v16) * 0.5;
          v19 = sub_20BF87370((v13 & 1) == 0, v15, (pxrInternal__aapl__pxrReserved__::TsSpline *)a1, a2, a3, a4, v18 + -0.00001);
          if ((sub_20BF87370((v13 & 1) == 0, v15, (pxrInternal__aapl__pxrReserved__::TsSpline *)a1, a2, a3, a4, v18 + 0.00001)- v19)/ 0.00002 > 0.0)v16 = (v17 + v16) * 0.5;
          else
            v17 = (v17 + v16) * 0.5;
        }
        while (v16 - v17 >= 0.00005);
        v20 = sub_20BF87370((v13 & 1) == 0, v15, (pxrInternal__aapl__pxrReserved__::TsSpline *)a1, a2, a3, a4, v18);
        if (vabdd_f64(v23, v20) < v21)
          break;
        ++v13;
        v14 = *(_QWORD *)&v20;
      }
      while (v13 != 100);
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30);
  }
  v30[0] = (void **)&v24;
  sub_20BF87594(v30);
}

void sub_20BF85404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a16);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a36);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v36 - 224));
  *(_QWORD *)(v36 - 224) = &a13;
  sub_20BF87594((void ***)(v36 - 224));
  _Unwind_Resume(a1);
}

double sub_20BF854A4(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2, _QWORD *a3, double *a4, int a5)
{
  double v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v10 = *a4;
  if (*a2 < *a4)
  {
    v26 = "ts/simplify.cpp";
    v27 = "_ComputeError";
    v28 = 99;
    v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector"
          "<double> &, const GfInterval &, BOOL)";
    v30 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "spanInterval.GetMin() >= valsInterval.GetMin()", 0))return 1.79769313e308;
    v10 = *a4;
  }
  v11 = (uint64_t)(a3[1] - *a3) >> 3;
  v12 = a4[2] - v10;
  if (v12 <= 0.0)
    v13 = 1.0;
  else
    v13 = v12 + 1.0;
  if (v13 != (double)v11)
  {
    v26 = "ts/simplify.cpp";
    v27 = "_ComputeError";
    v28 = 101;
    v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector"
          "<double> &, const GfInterval &, BOOL)";
    v30 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "vals.size() == valsInterval.GetSize() + 1", 0))return 1.79769313e308;
    v10 = *a4;
    v11 = (uint64_t)(a3[1] - *a3) >> 3;
  }
  v14 = *a2;
  v15 = (unint64_t)(*a2 - v10);
  if (v11 > v15)
    goto LABEL_7;
  v26 = "ts/simplify.cpp";
  v27 = "_ComputeError";
  v28 = 105;
  v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector<d"
        "ouble> &, const GfInterval &, BOOL)";
  v30 = 0;
  if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "valsBase < vals.size()", 0))return 1.79769313e308;
  v14 = *a2;
  v11 = (uint64_t)(a3[1] - *a3) >> 3;
LABEL_7:
  v16 = a2[2] - v14;
  if (v16 <= 0.0)
    v17 = 1.0;
  else
    v17 = v16 + 1.0;
  v18 = (unint64_t)v17;
  if ((unint64_t)v17 + v15 > v11)
  {
    v26 = "ts/simplify.cpp";
    v27 = "_ComputeError";
    v28 = 109;
    v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector"
          "<double> &, const GfInterval &, BOOL)";
    v30 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "valsBase + numSamples <= vals.size()", 0) & 1) == 0)return 1.79769313e308;
  }
  if (!v18)
  {
    v21 = 0.0;
    if ((a5 & 1) != 0)
      return v21;
    return sqrt(v21 / (double)v18);
  }
  v19 = 0;
  v20 = 8 * v15;
  v21 = 0.0;
  do
  {
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 1, (uint64_t *)&v26, *a2 + (double)v19);
    v22 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
    sub_20BF4C2D8((uint64_t)&v26);
    v23 = v22 - *(double *)(*a3 + v20 + 8 * v19);
    if (a5)
    {
      v24 = fabs(v23);
      if (v24 > v21)
        v21 = v24;
    }
    else
    {
      v21 = v21 + v23 * v23;
    }
    ++v19;
  }
  while (v18 != v19);
  if ((a5 & 1) == 0)
    return sqrt(v21 / (double)v18);
  return v21;
}

void sub_20BF85774(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsSimplifySpline(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, pxrInternal__aapl__pxrReserved__::TsSpline *a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3, double a4, double a5)
{
  double v5;
  __n128 v8;
  double *v9;
  BOOL v11;
  BOOL v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  _BOOL4 v38;
  _BOOL4 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v44;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  char *v46;
  uint64_t v47;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v48;
  char v49;
  _BOOL4 v50;
  _BOOL4 v51;
  unint64_t v52;
  unint64_t v53;
  double *v54;
  double *v55;
  double *v56;
  __int128 v57;
  std::type_info_vtbl *v58;
  uint64_t v59;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::type_info_vtbl *v64;
  char v65;
  char v66;
  _BOOL4 v67;
  unint64_t v68;
  double *v69;
  unint64_t v70;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *i;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  double *v76;
  char v77;
  unint64_t v78;
  char v79;
  double *v80;
  double *v81;
  double v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  unint64_t Extrapolation;
  __int128 v88;
  void *__p;
  double *v90;
  double *v91;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v92;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v93;
  double v94[4];
  std::type_info_vtbl *type_name;
  BOOL v96;
  std::type_info_vtbl *v97;
  BOOL v98;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v99;
  std::__shared_weak_count *v100;
  uint64_t v101[3];
  _BYTE v102[72];
  _QWORD v103[2];
  _QWORD v104[2];
  std::type_info v105;
  __int128 v106;
  char v107;
  char v108;
  double *v109;
  __int128 v110;
  const char *v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (!this)
  {
    v105.__vftable = (std::type_info_vtbl *)"ts/simplify.cpp";
    v105.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"TsSimplifySpline";
    *(_QWORD *)&v106 = 563;
    *((_QWORD *)&v106 + 1) = "void pxrInternal__aapl__pxrReserved__::TsSimplifySpline(TsSpline *, const GfMultiInterval &"
                             ", double, double)";
    v107 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v105, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid spline.", a4, a5);
    return;
  }
  v5 = a4;
  if (a4 >= 0.000001)
  {
    sub_20BF874BC(v101, (uint64_t)a2);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(this, (uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect((pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v101, (uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v99, this);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds(v101, (uint64_t)&type_name);
    v8.n128_u64[0] = (unint64_t)type_name;
    if (*(double *)&type_name > *(double *)&v97 || *(double *)&type_name == *(double *)&v97 && (!v96 || !v98))
      goto LABEL_173;
    v105.__type_name = 0;
    LODWORD(v9) = pxrInternal__aapl__pxrReserved__::TsSpline::ClearRedundantKeyFrames(&v99, &v105, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v101);
    sub_20BF4C2D8((uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(&v99, (uint64_t)v94);
    if (v96 || (v105.__vftable = type_name, !sub_20BF86600(&v99, (double *)&v105)))
    {
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds(v101, (uint64_t)&v109);
      pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameBefore(&v99, *(double *)&v109, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105);
      if (v108)
      {
        v11 = fabs(*(double *)&v105.__type_name) != INFINITY && v96;
        type_name = (std::type_info_vtbl *)v105.__type_name;
        v96 = v11;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105);
      }
    }
    else
    {
      v96 = fabs(*(double *)&type_name) != INFINITY;
    }
    if (v98 || (v105.__vftable = v97, !sub_20BF86600(&v99, (double *)&v105)))
    {
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds(v101, (uint64_t)&v109);
      pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameAfter(&v99, *((double *)&v110 + 1), (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105);
      if (v108)
      {
        v13 = fabs(*(double *)&v105.__type_name) != INFINITY && v98;
        v97 = (std::type_info_vtbl *)v105.__type_name;
        v98 = v13;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105);
      }
    }
    else
    {
      v98 = fabs(*(double *)&v97) != INFINITY;
    }
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(&v105);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFramesInMultiInterval(&v99, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)&v105, (uint64_t *)&v92);
    sub_20BE6100C((uint64_t)&v105, (_QWORD *)v105.__type_name);
    if (0x8E38E38E38E38E39 * ((v93 - v92) >> 3) <= 2)
    {
      if ((_DWORD)v9)
        sub_20BDE881C(this, (uint64_t *)&v99);
      goto LABEL_172;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v105, v92);
    v14 = sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)&v105);
    sub_20BF4C2D8((uint64_t)&v105);
    if ((v14 & 1) == 0)
    {
LABEL_172:
      v105.__vftable = (std::type_info_vtbl *)&v92;
      sub_20BF87594((void ***)&v105);
LABEL_173:
      v84 = v100;
      if (v100)
      {
        p_shared_owners = (unint64_t *)&v100->__shared_owners_;
        do
          v86 = __ldaxr(p_shared_owners);
        while (__stlxr(v86 - 1, p_shared_owners));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v84->__on_zero_shared)(v84, v8);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      sub_20BE6100C((uint64_t)v101, (_QWORD *)v101[1]);
      return;
    }
    __p = 0;
    v90 = 0;
    v91 = 0;
    v15 = *(double *)&type_name;
    if (*(double *)&type_name <= *(double *)&v97)
    {
      v17 = 1.79769313e308;
      v18 = -1.79769313e308;
      do
      {
        pxrInternal__aapl__pxrReserved__::TsSpline::Eval(&v99, 1, (uint64_t *)&v105, v15);
        v19 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v105);
        sub_20BF4C2D8((uint64_t)&v105);
        if (v19 > v18)
          v18 = v19;
        if (v19 < v17)
          v17 = v19;
        v20 = v90;
        if (v90 >= v91)
        {
          v22 = (double *)__p;
          v23 = ((char *)v90 - (_BYTE *)__p) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            sub_20BDDF694();
          v25 = (char *)v91 - (_BYTE *)__p;
          if (((char *)v91 - (_BYTE *)__p) >> 2 > v24)
            v24 = v25 >> 2;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)sub_20BDDF6A8((uint64_t)&v91, v26);
            v22 = (double *)__p;
            v20 = v90;
          }
          else
          {
            v27 = 0;
          }
          v28 = (double *)&v27[8 * v23];
          *v28 = v19;
          v21 = v28 + 1;
          while (v20 != v22)
          {
            v29 = *((_QWORD *)v20-- - 1);
            *((_QWORD *)v28-- - 1) = v29;
          }
          __p = v28;
          v90 = v21;
          v91 = (double *)&v27[8 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v90 = v19;
          v21 = v20 + 1;
        }
        v90 = v21;
        v15 = v15 + 1.0;
      }
      while (v15 <= *(double *)&v97);
      v16 = v18 - v17;
    }
    else
    {
      v16 = -INFINITY;
    }
    v30 = fabs(v16);
    if (v30 >= 0.000001)
      v31 = v16 * v5;
    else
      v31 = 0.000001;
    v32 = v16 * a5;
    if (v30 >= 0.000001)
      v33 = v32;
    else
      v33 = 0.000001;
    Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(&v99);
    v34 = (double *)v93;
    if (v93 == v92)
    {
      v52 = 0x8E38E38E38E38E39 * ((v93 - v92) >> 3);
LABEL_112:
      v109 = 0;
      v110 = 0uLL;
      v53 = v52 + 2;
      if (v52 != -2)
      {
        if (v53 >= 0xAAAAAAAAAAAAAABLL)
          sub_20BDDF694();
        sub_20BF87604(&v105, v53, 0, (uint64_t)&v110 + 8);
        v55 = v109;
        v54 = (double *)v110;
        v56 = (double *)v105.__type_name;
        if ((double *)v110 == v109)
        {
          v58 = (std::type_info_vtbl *)v110;
        }
        else
        {
          do
          {
            v57 = *(_OWORD *)(v54 - 3);
            *(v56 - 1) = *(v54 - 1);
            *(_OWORD *)(v56 - 3) = v57;
            v56 -= 3;
            v54 -= 3;
          }
          while (v54 != v55);
          v58 = (std::type_info_vtbl *)v109;
          v54 = (double *)v110;
        }
        v109 = v56;
        v59 = *((_QWORD *)&v110 + 1);
        v110 = v106;
        *(_QWORD *)&v106 = v54;
        *((_QWORD *)&v106 + 1) = v59;
        v105.__vftable = v58;
        v105.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)v58;
        if (v54 != (double *)v58)
          *(_QWORD *)&v106 = (char *)v58 + ((char *)v54 - (char *)v58 - 24) % 0x18uLL;
        if (v58)
          operator delete(v58);
        v34 = (double *)v92;
      }
      *(double *)&v88 = v34[1] + -1.0;
      DWORD2(v88) = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v34);
      BYTE12(v88) = 0;
      sub_20BF86970((void **)&v109, &v88);
      v60 = v93;
      if (v93 == v92)
      {
        v63 = 0;
        v68 = 0x8E38E38E38E38E39 * ((v93 - v92) >> 3);
      }
      else
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v60 = v92;
        do
        {
          v105.__vftable = *(std::type_info_vtbl **)((char *)v60 + v61 + 8);
          v64 = v105.__vftable;
          LODWORD(v105.__type_name) = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v60 + v61));
          v65 = pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains((pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v101, *(double *)&v64);
          if (v62)
            v66 = v65;
          else
            v66 = 0;
          if ((v66 & 1) != 0)
          {
            v67 = sub_20BF86670(&v99, (double *)((char *)v92 + v61), v33);
            BYTE4(v105.__type_name) = !v67;
            v63 += !v67;
          }
          else
          {
            BYTE4(v105.__type_name) = 0;
          }
          sub_20BF86970((void **)&v109, (__int128 *)&v105);
          ++v62;
          v60 = v92;
          v68 = 0x8E38E38E38E38E39 * ((v93 - v92) >> 3);
          v61 += 72;
        }
        while (v62 < v68);
      }
      v69 = (double *)((char *)v60 + 72 * v68);
      *(double *)&v88 = *(v69 - 8) + 1.0;
      DWORD2(v88) = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v69 - 9));
      BYTE12(v88) = 0;
      sub_20BF86970((void **)&v109, &v88);
      if (v63)
      {
        if ((double *)v110 != v109)
        {
          v70 = 0;
          do
            sub_20BF86AD8((uint64_t *)&v109, v70++, &v99, &__p, (double *)&type_name);
          while (v70 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - (_QWORD)v109) >> 3));
        }
        v72 = v92;
        for (i = v93;
              i != v72;
        v93 = v72;
        while (1)
        {
          if ((double *)v110 == v109)
          {
            v78 = 0;
          }
          else
          {
            v73 = 0;
            v74 = 0;
            v75 = ((_QWORD)v110 - (_QWORD)v109) / 24;
            if (v75 <= 1)
              v75 = 1;
            v76 = v109 + 2;
            v77 = 1;
            do
            {
              if (*((_BYTE *)v76 - 4))
                v78 = v73;
              else
                v78 = v74;
              v79 = (*((_BYTE *)v76 - 4) == 0) & v77;
              if (*((_BYTE *)v76 - 4) && (v77 & 1) == 0)
              {
                if (*v76 < v109[3 * v74 + 2])
                  v78 = v73;
                else
                  v78 = v74;
                v79 = 0;
              }
              v76 += 3;
              ++v73;
              v77 = v79;
              v74 = v78;
            }
            while (v75 != v73);
          }
          if (v109[3 * v78 + 2] > v31)
            break;
          pxrInternal__aapl__pxrReserved__::TsSpline::RemoveKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)&v99, 0, v109[3 * v78]);
          if (!v78 || (v80 = v109, v78 >= -1 - 0x5555555555555555 * ((uint64_t)(v110 - (_QWORD)v109) >> 3)))
          {
            v105.__vftable = (std::type_info_vtbl *)"ts/simplify.cpp";
            v105.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"TsSimplifySpline";
            *(_QWORD *)&v106 = 886;
            *((_QWORD *)&v106 + 1) = "void pxrInternal__aapl__pxrReserved__::TsSimplifySpline(TsSpline *, const GfMultiIn"
                                     "terval &, double, double)";
            v107 = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v105, "bestIndex > 0 && bestIndex < ki.size()-1", 0))goto LABEL_168;
            v80 = v109;
          }
          v81 = &v80[3 * v78];
          v82 = v81[3];
          v105.__vftable = *(std::type_info_vtbl **)(v81 - 3);
          LOBYTE(v105.__type_name) = fabs(*(double *)&v105.__vftable) != INFINITY;
          *(double *)&v106 = v82;
          BYTE8(v106) = fabs(v82) != INFINITY;
          sub_20BF850B0(&v99, (double *)&v105, &__p, (double *)&type_name);
          v9 = &v109[3 * v78];
          v83 = v110 - (_QWORD)(v9 + 3);
          if ((double *)v110 != v9 + 3)
            memmove(&v109[3 * v78], v9 + 3, v110 - (_QWORD)(v9 + 3));
          *(_QWORD *)&v110 = (char *)v9 + v83;
          sub_20BF86AD8((uint64_t *)&v109, v78 - 1, &v99, &__p, (double *)&type_name);
          LOBYTE(v9) = 1;
          sub_20BF86AD8((uint64_t *)&v109, v78, &v99, &__p, (double *)&type_name);
        }
      }
      if ((v9 & 1) != 0)
        sub_20BDE881C(this, (uint64_t *)&v99);
LABEL_168:
      if (v109)
      {
        *(_QWORD *)&v110 = v109;
        operator delete(v109);
      }
      if (__p)
      {
        v90 = (double *)__p;
        operator delete(__p);
      }
      goto LABEL_172;
    }
    v35 = 0;
    v36 = 80;
    v34 = (double *)v92;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v34[(unint64_t)v36 / 8 - 10]);
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105) != 2)
        goto LABEL_107;
      v37 = *(double *)&v105.__type_name;
      if (v35 >= 0x8E38E38E38E38E39 * ((v93 - v92) >> 3) - 1)
      {
        v38 = 0;
        if (v35)
        {
LABEL_70:
          v39 = *(double *)&v105.__type_name - *(double *)((char *)v92 + v36 - 144) == 1.0;
          goto LABEL_73;
        }
      }
      else
      {
        v38 = *(double *)((char *)v92 + v36) - *(double *)&v105.__type_name == 1.0;
        if (v35)
          goto LABEL_70;
      }
      v39 = 0;
LABEL_73:
      if (v39 || v38)
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v109, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v92 + v36 - 80));
        v40 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
        sub_20BF4C2D8((uint64_t)&v109);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v109, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v92 + v36 - 80));
        v41 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
        sub_20BF4C2D8((uint64_t)&v109);
        v42 = 0.0;
        if (v39)
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v109, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v92 + v36 - 152));
          v42 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
          sub_20BF4C2D8((uint64_t)&v109);
        }
        if (v38)
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v109, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v92 + v36 - 8));
          v43 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
          sub_20BF4C2D8((uint64_t)&v109);
          if (v39)
          {
            v44 = v92;
            KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v99);
            v46 = (char *)v44 + v36;
            v47 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *(double *)((char *)v44 + v36 - 72));
            if ((*((_QWORD *)KeyFrames + 1) != v47
               || (v109 = (double *)"ts/simplify.cpp",
                   *(_QWORD *)&v110 = "_IsKnotOnPlateau",
                   *((_QWORD *)&v110 + 1) = 440,
                   v111 = "BOOL pxrInternal__aapl__pxrReserved__::_IsKnotOnPlateau(const TsSpline &, const TsKeyFrame &)",
                   v112 = 0,
                   (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v109, "kIter != keyMap.end()", 0) & 1) != 0))&& ((v48 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v46 - 80), *(_QWORD *)KeyFrames != v47)&& (pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat((pxrInternal__aapl__pxrReserved__::TsSpline *)&v99, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v47 - 72), v48) & 1) != 0|| v47 + 72 != *((_QWORD *)KeyFrames + 1)&& (pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat((pxrInternal__aapl__pxrReserved__::TsSpline *)&v99, v48, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v47 + 72)) & 1) != 0)|| sub_20BF86670(&v99, (double *)((char *)v92 + v36 - 80), v33))
            {
              v5 = 0.0;
            }
            else
            {
              v5 = (v43 - v42) * 0.5;
            }
            v49 = 1;
            goto LABEL_98;
          }
          if (v37 == v94[0] && !(_DWORD)Extrapolation)
          {
            v5 = v43 - v40;
            v49 = 1;
            goto LABEL_101;
          }
        }
        v50 = HIDWORD(Extrapolation) == 0;
        v51 = v37 == v94[2] && v39;
        v49 = v51 && v50;
        if (v51 && v50)
          v5 = v41 - v42;
        else
          *(_QWORD *)&v5 &= 0xFFFFFFFFFFFFFF00;
        if (v39)
        {
LABEL_98:
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105))
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105, 0.3333);
        }
        if (v38)
        {
LABEL_101:
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105))
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105, 0.3333);
        }
        if (v49
          && pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105))
        {
          v104[1] = &unk_24C52064B;
          *(double *)v104 = v5;
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105, v104);
          sub_20BF4C2D8((uint64_t)v104);
          v103[1] = &unk_24C52064B;
          *(double *)v103 = v5;
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105, v103);
          sub_20BF4C2D8((uint64_t)v103);
        }
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))((char *)v92 + v36 - 80), &v105);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v102, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105);
        pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)&v99, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v102, 0);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v102);
      }
LABEL_107:
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v105);
      ++v35;
      v34 = (double *)v92;
      v52 = 0x8E38E38E38E38E39 * ((v93 - v92) >> 3);
      v36 += 72;
      if (v35 >= v52)
        goto LABEL_112;
    }
  }
}

void sub_20BF86498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49)
{
  uint64_t v49;
  void *v51;

  v51 = *(void **)(v49 - 200);
  if (v51)
  {
    *(_QWORD *)(v49 - 192) = v51;
    operator delete(v51);
  }
  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a19;
  sub_20BF87594((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a30);
  sub_20BE6100C((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

BOOL sub_20BF86600(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  uint64_t v5;
  uint64_t v6;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  v5 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *a2);
  if (*((_QWORD *)KeyFrames + 1) == v5 || (v6 = v5, *(double *)(v5 + 8) != *a2))
    v6 = *((_QWORD *)KeyFrames + 1);
  return *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8) != v6;
}

BOOL sub_20BF86670(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2, double a3)
{
  unint64_t Extrapolation;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  _BOOL4 v20;
  _BOOL4 v21;
  double v22;
  uint64_t v23[4];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(a1);
  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  v8 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2[1]);
  if (*((_QWORD *)KeyFrames + 1) == v8)
  {
    v23[0] = (uint64_t)"ts/simplify.cpp";
    v23[1] = (uint64_t)"_IsKnotAnExtreme";
    v23[2] = 475;
    v23[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_IsKnotAnExtreme(const TsSpline &, const TsKeyFrame &, double)";
    v24 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "kIter != keyMap.end()", 0) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)KeyFrames;
  if (*(_QWORD *)KeyFrames == v8 && Extrapolation != 0)
    return 1;
  v11 = v8 + 72;
  v12 = *((_QWORD *)KeyFrames + 1);
  if (v8 + 72 == v12 && HIDWORD(Extrapolation) != 0)
    return 1;
  if (v9 == v8 && v11 == v12)
    return 0;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2);
  v15 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  sub_20BF4C2D8((uint64_t)v23);
  v16 = v15;
  if (v9 != v8)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
    v16 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
    sub_20BF4C2D8((uint64_t)v23);
  }
  if (v11 == v12)
  {
    v17 = v15;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 + 72));
    v17 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
    sub_20BF4C2D8((uint64_t)v23);
    if (v9 != v8 && v8 - 72 != *(_QWORD *)KeyFrames && v8 + 144 != *((_QWORD *)KeyFrames + 1))
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 144));
      v18 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_20BF4C2D8((uint64_t)v23);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 + 144));
      v19 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_20BF4C2D8((uint64_t)v23);
      v20 = v15 > v16;
      v21 = v15 < v16;
      if (v16 <= v18)
        v20 = 0;
      if (v16 >= v18)
        v21 = 0;
      if (v15 <= v17)
        v20 = 0;
      if (v15 >= v17)
        v21 = 0;
      if (v17 <= v19)
        v20 = 0;
      if (v17 >= v19)
        v21 = 0;
      if (v21 || v20)
      {
        v16 = v18;
        v17 = v19;
      }
    }
  }
  if (v15 > v16 && v15 >= v17 || (v22 = 0.0, v15 >= v16) && v15 > v17)
  {
    v22 = v15 - v16;
    if (v15 - v16 <= v15 - v17)
      v22 = v15 - v17;
  }
  if (v15 < v16 && v15 <= v17 || v15 <= v16 && v15 < v17)
  {
    v22 = v16 - v15;
    if (v16 - v15 <= v17 - v15)
      v22 = v17 - v15;
  }
  return v22 > a3;
}

void sub_20BF86944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF4C2D8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF86970(void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v5 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    sub_20BF87604(&v20, v11, v8, (uint64_t)(a1 + 2));
    v12 = v22;
    v13 = *a2;
    *((_QWORD *)v22 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v12 = v13;
    v14 = v21;
    v7 = v22 + 24;
    v22 += 24;
    v16 = (char *)*a1;
    v15 = (char *)a1[1];
    if (v15 == *a1)
    {
      v18 = (char *)a1[1];
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v15 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v15 - 1);
        *(_OWORD *)(v14 - 24) = v17;
        v14 -= 24;
        v15 -= 24;
      }
      while (v15 != v16);
      v18 = (char *)*a1;
      v15 = (char *)a1[1];
      v7 = v22;
    }
    *a1 = v14;
    a1[1] = v7;
    v19 = a1[2];
    a1[2] = v23;
    v22 = v15;
    v23 = v19;
    v20 = v18;
    v21 = v18;
    if (v15 != v18)
      v22 = &v18[(v15 - v18 - 24) % 0x18uLL];
    if (v18)
      operator delete(v18);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 24;
  }
  a1[1] = v7;
}

void sub_20BF86AD8(uint64_t *a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, _QWORD *a4, double *a5)
{
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= a2)
  {
    v15 = "ts/simplify.cpp";
    v16 = "_SetKnotInfoErrorIfKeyRemoved";
    v17 = 412;
    v18 = "void pxrInternal__aapl__pxrReserved__::_SetKnotInfoErrorIfKeyRemoved(std::vector<_EditSimplifyKnotInfo> &, siz"
          "e_t, TsSpline *, const std::vector<double> &, const GfInterval &)";
    v19 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "i >= 0 && i < ki.size()", 0))return;
    v10 = *a1;
  }
  if (*(_BYTE *)(v10 + 24 * a2 + 12))
  {
    if (a2 && 0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 3) - 1 > a2)
      goto LABEL_5;
    v15 = "ts/simplify.cpp";
    v16 = "_SetKnotInfoErrorIfKeyRemoved";
    v17 = 417;
    v18 = "void pxrInternal__aapl__pxrReserved__::_SetKnotInfoErrorIfKeyRemoved(std::vector<_EditSimplifyKnotInfo> &, siz"
          "e_t, TsSpline *, const std::vector<double> &, const GfInterval &)";
    v19 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "i > 0 && i < ki.size()-1", 0))
    {
      v10 = *a1;
LABEL_5:
      v11 = 3 * a2;
      v12 = (double *)(v10 + 8 * v11);
      v13 = *v12;
      v14 = v12[3];
      v15 = (char *)*((_QWORD *)v12 - 3);
      LOBYTE(v16) = fabs(*(double *)&v15) != INFINITY;
      v17 = *(_QWORD *)&v14;
      LOBYTE(v18) = fabs(v14) != INFINITY;
      *(double *)(*a1 + 8 * v11 + 16) = pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(this, (double *)&v15, a4, a5, v13);
    }
  }
  else
  {
    *(_QWORD *)(v10 + 24 * a2 + 16) = 0x7FEFFFFFFFFFFFFFLL;
  }
}

void pxrInternal__aapl__pxrReserved__::TsSimplifySplinesInParallel(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****a1, pxrInternal__aapl__pxrReserved__::TsSpline **a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3, void *a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::TsSpline *v8;
  pxrInternal__aapl__pxrReserved__::TsSpline *v9;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v10;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v15;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v16;
  unint64_t v17;
  unint64_t initial_auto_partitioner_divisor;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  tbb::task_group_context *v31[2];
  double *v32;
  double *v33;
  unint64_t v34;
  double v35;
  double v36;
  void ***v37;
  void **v38[4];
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v35 = a6;
  v36 = a5;
  v8 = *a2;
  v9 = a2[1];
  if (v8 == v9)
  {
    v16 = *a1;
    v15 = a1[1];
    v32 = &v36;
    v33 = &v35;
    LODWORD(v38[0]) = 0;
    v40 = 65539;
    v41 = 55;
    tbb::task_group_context::init((uint64_t)v38, (uint64_t)v8, (uint64_t)a3, a4);
    if (v16 < v15)
    {
      v31[0] = (tbb::task_group_context *)v38;
      v17 = tbb::internal::allocate_root_with_context_proxy::allocate(v31, 0x38uLL);
      *(_BYTE *)(v17 - 11) = 1;
      *(_QWORD *)v17 = &off_24C520F20;
      *(_QWORD *)(v17 + 8) = v15;
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 1;
      *(_QWORD *)(v17 + 32) = &v32;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v17);
      *(_DWORD *)(v17 + 48) = 0;
      *(_BYTE *)(v17 + 52) = 5;
      *(_QWORD *)(v17 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v17 - 40) + 16))(*(_QWORD *)(v17 - 40), v17, v17 - 8);
    }
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v38);
  }
  else
  {
    v10 = *a1;
    v11 = a1[1];
    v12 = (char *)v11 - (char *)*a1;
    v13 = v12 >> 3;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3);
    if (v12 >> 3 == v14)
    {
      if (v12 == 8)
      {
        pxrInternal__aapl__pxrReserved__::TsSimplifySpline(*v10, v8, a3, a5, a6);
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        sub_20BF87038((uint64_t *)&v32, v12 >> 3);
        if (v11 == v10)
        {
          v25 = v33;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          if (v13 <= 1)
            v24 = 1;
          else
            v24 = v13;
          v25 = v33;
          do
          {
            v26 = (uint64_t *)&(*a1)[v23];
            v27 = (uint64_t)*a2 + v22;
            if ((unint64_t)v25 >= v34)
            {
              v25 = (_QWORD *)sub_20BF87E7C((uint64_t *)&v32, v26, v27);
            }
            else
            {
              *v25 = *v26;
              sub_20BF874BC(v25 + 1, v27);
              v25 += 4;
            }
            v33 = (double *)v25;
            ++v23;
            v22 += 24;
            --v24;
          }
          while (v24);
        }
        v28 = (unint64_t)v32;
        v31[0] = (tbb::task_group_context *)&v36;
        v31[1] = (tbb::task_group_context *)&v35;
        LODWORD(v38[0]) = 0;
        v40 = 65539;
        v41 = 55;
        tbb::task_group_context::init((uint64_t)v38, v19, v20, v21);
        if (v28 < (unint64_t)v25)
        {
          v37 = v38;
          v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v37, 0x38uLL);
          *(_BYTE *)(v29 - 11) = 1;
          *(_QWORD *)v29 = &off_24C520FB0;
          *(_QWORD *)(v29 + 8) = v25;
          *(_QWORD *)(v29 + 16) = v28;
          *(_QWORD *)(v29 + 24) = 1;
          *(_QWORD *)(v29 + 32) = v31;
          v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
          *(_DWORD *)(v29 + 48) = 0;
          *(_BYTE *)(v29 + 52) = 5;
          *(_QWORD *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v29 - 40) + 16))(*(_QWORD *)(v29 - 40), v29, v29 - 8);
        }
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v38);
        v38[0] = (void **)&v32;
        sub_20BF87BD0(v38);
      }
    }
    else
    {
      v38[0] = (void **)"ts/simplify.cpp";
      v38[1] = (void **)"TsSimplifySplinesInParallel";
      v38[2] = (void **)948;
      v38[3] = (void **)"void pxrInternal__aapl__pxrReserved__::TsSimplifySplinesInParallel(const std::vector<TsSpline *>"
                        " &, const std::vector<GfMultiInterval> &, double, double)";
      v39 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v38, 1, (pxrInternal__aapl__pxrReserved__ *)"splines size %zd != intervals size %zd", v13, v14);
    }
  }
}

void sub_20BF86FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::task *v23;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  a12 = &a14;
  sub_20BF87BD0((void ***)&a12);
  _Unwind_Resume(a1);
}

void **sub_20BF87038(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20BF87C48(a1, v7);
    return sub_20BF87E04(v7);
  }
  return result;
}

void sub_20BF870B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF87E04((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsResampleSpline(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, pxrInternal__aapl__pxrReserved__::TsSpline *a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3, double a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  double i;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  _QWORD *v18;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[2];
  _BYTE v25[80];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (this)
  {
    sub_20BF874BC(&v17, (uint64_t)a2);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(this, (uint64_t)&v19);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect((pxrInternal__aapl__pxrReserved__::GfMultiInterval *)&v17, (uint64_t)&v19);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v19, this);
    v15 = v17;
    v16 = &v18;
    while ((_QWORD **)v15 != v16)
    {
      for (i = *(double *)(*sub_20BF872F8(&v15, v6, v7) + 32);
            i <= *(double *)(*sub_20BF872F8(&v15, v8, v9) + 48);
            i = i + 1.0)
      {
        v24[1] = 0;
        pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(&v19, 2, 0, v24, 0, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v25, i, 0.33);
        if (v25[72])
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v25);
        sub_20BF4C2D8((uint64_t)v24);
      }
      sub_20BF0792C(&v15);
    }
    sub_20BDE881C(this, (uint64_t *)&v19);
    pxrInternal__aapl__pxrReserved__::TsSimplifySpline(this, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v17, v11, a4, 0.001);
    v12 = (std::__shared_weak_count *)v20;
    if (v20)
    {
      v13 = (unint64_t *)(v20 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BE6100C((uint64_t)&v17, v18);
  }
  else
  {
    v19 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)"ts/simplify.cpp";
    v20 = "TsResampleSpline";
    v21 = 980;
    v22 = "void pxrInternal__aapl__pxrReserved__::TsResampleSpline(TsSpline *, const GfMultiInterval &, double)";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid spline.", a4);
  }
}

void sub_20BF872A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  sub_20BE6100C((uint64_t)va, v7);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF872F8(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::GfMultiInterval>::o"
            "perator->() [T = pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

double sub_20BF87370(int a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, pxrInternal__aapl__pxrReserved__::TsSpline *a3, double *a4, _QWORD *a5, double *a6, double a7)
{
  double v13;
  double v14;
  _BYTE v16[72];
  _BYTE v17[72];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, a2);
  v13 = fmax(a4[2] - *a4, 0.0) * a7;
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17))
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v13);
  }
  else if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v13);
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a3, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16, 0);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16);
  v14 = sub_20BF854A4((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a3, a4, a5, a6, 0);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  return v14;
}

void sub_20BF87490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)va);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF874BC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20BF87510(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20BF874F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF87510(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BF07F94(v5, v6, (uint64_t)(v4 + 4), (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_20BF87594(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v4 - 72));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20BF87604(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20BDDF5B4();
    v7 = (char *)operator new(24 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[24 * a2];
  return a1;
}

uint64_t sub_20BF87684(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v25[16];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v4 = (__int128 *)((char *)this + 8);
  v5 = *((_QWORD *)this + 3);
  v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 3;
  if (v5 < v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 > 1)
      goto LABEL_12;
    if (v7 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v8 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(_QWORD *)v8 = &unk_24C520F68;
        __dmb(0xBu);
        v8[8] = 0;
        *((_QWORD *)this - 4) = v8;
        *((_QWORD *)v8 - 3) = 2;
        v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(_BYTE *)(v9 - 11) = 1;
        *(_QWORD *)v9 = &off_24C520F20;
        *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2)
            + 8
            * ((((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 3)
              + (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 3 < 0)) >> 1);
        *((_QWORD *)this + 1) = v10;
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)this + 4);
        v11 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v11;
        *(_QWORD *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(_BYTE *)(v9 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v9 - 40))(*(_QWORD *)(v9 - 40), v9, v9 - 8);
        v5 = *((_QWORD *)this + 3);
        v6 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 3;
        if (v5 >= v6)
          break;
        v12 = *((_QWORD *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v25 = 0x10000;
    v26 = *v4;
    v27 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20BF87AFC(v25, *((unsigned __int8 *)this + 52));
      v13 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0)
        break;
      v16 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v16;
      v15 = v25[2];
      if (v25[2] < 2u)
      {
        v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((_QWORD *)&v26 + 3 * v25[0] + 2) < (unint64_t)((uint64_t)(*((_QWORD *)&v26 + 3 * v25[0])
                                                                             - *((_QWORD *)&v26 + 3 * v25[0] + 1)) >> 3))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v17 = v25[1];
      v18 = v25[v25[1] + 3];
      v19 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(_QWORD *)v19 = &unk_24C520F68;
      __dmb(0xBu);
      v19[8] = 0;
      *((_QWORD *)this - 4) = v19;
      *((_QWORD *)v19 - 3) = 2;
      v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      v21 = (char *)&v26 + 24 * v17;
      *(_BYTE *)(v20 - 11) = 1;
      *(_QWORD *)v20 = &off_24C520F20;
      v22 = *(_OWORD *)v21;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 32) = *((_QWORD *)this + 4);
      v23 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v23;
      *(_QWORD *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(_BYTE *)(v20 + 52) = *((_BYTE *)this + 52) - v18;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v20 - 40))(*(_QWORD *)(v20 - 40), v20, v20 - 8);
      v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v14 = v25[0];
LABEL_22:
    sub_20BF87A54((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)&v26 + 3 * v14);
    v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20BF87A54((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)this + 1);
  return 0;
}

uint64_t sub_20BF87A4C()
{
  return 0;
}

void sub_20BF87A54(uint64_t a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****a2)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v2;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v3;
  double **v5;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **v6;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v7;
  _BYTE v8[32];
  _BYTE v9[8];
  _QWORD *v10;

  v2 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    do
    {
      v5 = *(double ***)(a1 + 32);
      v6 = *v3;
      pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(*v3, (uint64_t)v8);
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(v9);
      pxrInternal__aapl__pxrReserved__::TsSimplifySpline(v6, (pxrInternal__aapl__pxrReserved__::TsSpline *)v9, v7, **v5, *v5[1]);
      sub_20BE6100C((uint64_t)v9, v10);
      ++v3;
    }
    while (v3 != v2);
  }
}

void sub_20BF87AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20BE6100C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BF87AFC(unsigned __int8 *result, unsigned int a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  char v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result[2];
  if (v2 <= 7)
  {
    v3 = result + 16;
    v4 = *result;
    v5 = result[v4 + 3];
    do
    {
      if (a2 <= v5)
        break;
      v6 = v4;
      v7 = &v3[24 * v4];
      v8 = v7 + 16;
      v9 = v7 + 8;
      if (*((_QWORD *)v7 + 2) >= (unint64_t)((uint64_t)(*(_QWORD *)v7 - *((_QWORD *)v7 + 1)) >> 3))
        break;
      v4 = (unint64_t)&result[v4];
      v10 = (v6 + 1) & 7;
      v11 = &v3[24 * v10];
      v12 = *((_QWORD *)v7 + 2);
      *(_OWORD *)v11 = *(_OWORD *)v7;
      *((_QWORD *)v11 + 2) = v12;
      v13 = *((_QWORD *)v11 + 1);
      *(_QWORD *)v7 = *(_QWORD *)v11;
      *result = v10;
      v14 = v13 + 8 * ((((*(_QWORD *)v11 - v13) >> 3) + (unint64_t)((*(_QWORD *)v11 - v13) >> 3 < 0)) >> 1);
      *(_QWORD *)v11 = v14;
      *v9 = v14;
      *v8 = v12;
      v5 = *(_BYTE *)(v4 + 3) + 1;
      *(_BYTE *)(v4 + 3) = v5;
      result[v10 + 3] = v5;
      result[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

void sub_20BF87BD0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        sub_20BE6100C((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BF87C48(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF87CBC((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF87CBC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v8 = a3 - 2;
    do
    {
      *(_QWORD *)(v7 - 32) = *(v8 - 2);
      *(_QWORD *)(v7 - 24) = *(v8 - 1);
      v9 = *v8;
      *(_QWORD *)(v7 - 16) = *v8;
      v10 = v7 - 16;
      v11 = v8[1];
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(v8 - 1) = (uint64_t)v8;
        *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v10;
      }
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    v13 = v18;
  }
  v16 = 1;
  sub_20BF87D84((uint64_t)v15);
  return v13;
}

uint64_t sub_20BF87D84(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF87DB8(a1);
  return a1;
}

void sub_20BF87DB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    v3 = v1 + 8;
    do
    {
      sub_20BE6100C(v3, *(_QWORD **)(v3 + 8));
      v4 = v3 + 24;
      v3 += 32;
    }
    while (v4 != v2);
  }
}

void **sub_20BF87E04(void **a1)
{
  sub_20BF87E34((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BF87E34(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_20BE6100C(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t sub_20BF87E7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v16[2];
  uint64_t *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BED2F10(v9, v11);
  else
    v12 = 0;
  v13 = (uint64_t *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *v13 = *a2;
  sub_20BF874BC(v13 + 1, a3);
  v17 += 4;
  sub_20BF87C48(a1, v16);
  v14 = a1[1];
  sub_20BF87E04(v16);
  return v14;
}

void sub_20BF87F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF87E04((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF87F74(tbb::internal::allocate_continuation_proxy *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3)
{
  uint64_t v4;
  unsigned int v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const pxrInternal__aapl__pxrReserved__::GfMultiInterval *v15;
  char v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned __int8 v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  unsigned __int8 v28[16];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v4 = *((_QWORD *)this - 4);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *((unsigned __int8 *)this + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *((_BYTE *)this + 52) = v5 + 1;
      }
    }
  }
  v6 = (__int128 *)((char *)this + 8);
  v7 = *((_QWORD *)this + 3);
  v8 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 5;
  if (v7 < v8)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C520FB0;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2)
            + 32
            * ((((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 5)
              + (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 5 < 0)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(v11 + 24) = *((_QWORD *)this + 3);
        *(_QWORD *)(v11 + 32) = *((_QWORD *)this + 4);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v7 = *((_QWORD *)this + 3);
        v8 = (uint64_t)(*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 5;
        if (v7 >= v8)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v28 = 0x10000;
    v29 = *v6;
    v30 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20BF88388(v28, *((unsigned __int8 *)this + 52));
      v16 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v16 & 1) == 0)
        break;
      v19 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v19;
      v18 = v28[2];
      if (v28[2] < 2u)
      {
        v17 = v28[0];
        if (v28[v28[0] + 3] < v19
          && *((_QWORD *)&v29 + 3 * v28[0] + 2) < (unint64_t)((uint64_t)(*((_QWORD *)&v29 + 3 * v28[0])
                                                                             - *((_QWORD *)&v29 + 3 * v28[0] + 1)) >> 5))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v20 = v28[1];
      v21 = v28[v28[1] + 3];
      v22 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v22 - 11) = 1;
      *(_QWORD *)v22 = &unk_24C520F68;
      __dmb(0xBu);
      v22[8] = 0;
      *((_QWORD *)this - 4) = v22;
      *((_QWORD *)v22 - 3) = 2;
      v23 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v22, 0x38uLL);
      v24 = (char *)&v29 + 24 * v20;
      *(_BYTE *)(v23 - 11) = 1;
      *(_QWORD *)v23 = &off_24C520FB0;
      v25 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 24) = *((_QWORD *)v24 + 2);
      *(_OWORD *)(v23 + 8) = v25;
      *(_QWORD *)(v23 + 32) = *((_QWORD *)this + 4);
      v26 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v26;
      *(_QWORD *)(v23 + 40) = v26;
      *(_DWORD *)(v23 + 48) = 2;
      *(_BYTE *)(v23 + 52) = *((_BYTE *)this + 52) - v21;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v23 - 40))(*(_QWORD *)(v23 - 40), v23, v23 - 8);
      v18 = --v28[2];
      v28[1] = (v28[1] + 1) & 7;
LABEL_27:
      if (!v18 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v17 = v28[0];
LABEL_22:
    sub_20BF88334((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)&v29 + 3 * v17, v15);
    v18 = --v28[2];
    v28[0] = (v28[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20BF88334((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)this + 1, a3);
  return 0;
}

void sub_20BF88334(uint64_t a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v3;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***v4;
  pxrInternal__aapl__pxrReserved__::TsSpline *v6;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **v7;

  v3 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v6 = (pxrInternal__aapl__pxrReserved__::TsSpline *)(v4 + 1);
      v7 = *v4;
      v4 += 4;
      pxrInternal__aapl__pxrReserved__::TsSimplifySpline(v7, v6, a3, ***(double ***)(a1 + 32), **(double **)(*(_QWORD *)(a1 + 32) + 8));
    }
    while (v4 != v3);
  }
}

unsigned __int8 *sub_20BF88388(unsigned __int8 *result, unsigned int a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  char v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result[2];
  if (v2 <= 7)
  {
    v3 = result + 16;
    v4 = *result;
    v5 = result[v4 + 3];
    do
    {
      if (a2 <= v5)
        break;
      v6 = v4;
      v7 = &v3[24 * v4];
      v8 = v7 + 16;
      v9 = v7 + 8;
      if (*((_QWORD *)v7 + 2) >= (unint64_t)((uint64_t)(*(_QWORD *)v7 - *((_QWORD *)v7 + 1)) >> 5))
        break;
      v4 = (unint64_t)&result[v4];
      v10 = (v6 + 1) & 7;
      v11 = &v3[24 * v10];
      v12 = *((_QWORD *)v7 + 2);
      *(_OWORD *)v11 = *(_OWORD *)v7;
      *((_QWORD *)v11 + 2) = v12;
      v13 = *((_QWORD *)v11 + 1);
      *(_QWORD *)v7 = *(_QWORD *)v11;
      *result = v10;
      v14 = v13 + 32 * ((((*(_QWORD *)v11 - v13) >> 5) + (unint64_t)((*(_QWORD *)v11 - v13) >> 5 < 0)) >> 1);
      *(_QWORD *)v11 = v14;
      *v9 = v14;
      *v8 = v12;
      v5 = *(_BYTE *)(v4 + 3) + 1;
      *(_BYTE *)(v4 + 3) = v5;
      result[v10 + 3] = v5;
      result[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v2);
  return sub_20BF8C5C4(this, (uint64_t)v2);
}

void sub_20BF88494(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, unsigned int a3, unsigned int a4, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a5)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v10;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v11;
  unint64_t v13;

  v10 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v10);
  sub_20BF8C5C4(a1, (uint64_t)v10);
  v11 = *a1;
  v13 = __PAIR64__(a4, a3);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(v11, (double *)&v13);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(*a1, a5);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(*a1, a2);
  return a1;
}

void sub_20BF88580(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsSpline *pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(pxrInternal__aapl__pxrReserved__::TsSpline *a1, __int128 *a2, unsigned int a3, unsigned int a4, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a5)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v10;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v11;
  uint64_t v12;
  char *v13;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v14;
  __int128 i;
  _BYTE v17[72];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v10 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v10);
  sub_20BF8C5C4(a1, (uint64_t)v10);
  v11 = *(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a1;
  *(_QWORD *)&i = __PAIR64__(a4, a3);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(v11, (double *)&i);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a1, a5);
  for (i = *a2; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BF88898(&i))
  {
    v14 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF8881C((uint64_t *)&i, v12, v13);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v14);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, 0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  }
  return a1;
}

void sub_20BF886A4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(pxrInternal__aapl__pxrReserved__::TsSpline *a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD v7[4];
  char v8;
  void *__p[2];
  uint64_t v10;
  _BYTE v11[72];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  if ((pxrInternal__aapl__pxrReserved__::TsSpline::CanSetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a1, a2, (uint64_t)__p) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
    v6 = *(_QWORD **)a1;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v11, a2);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrame(v6, (uint64_t)v11, a3);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v11);
  }
  else
  {
    v7[0] = "ts/spline.cpp";
    v7[1] = "SetKeyFrame";
    v7[2] = 250;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(TsKeyFrame, GfInterval *)";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_20BF887EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF8881C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "sKeyFrame>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TsKeyFrame>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF88890()
{
  JUMPOUT(0x20BF88840);
}

_QWORD *sub_20BF88898(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TsKeyFrame>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TsKeyFrame>"
            ", Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
    return 1;
  else
    return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::operator==(v2, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::operator!=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
    return 0;
  else
    return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::operator==(v2, v3) ^ 1;
}

BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsEmpty(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  _QWORD *KeyFrames;

  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  return *KeyFrames == KeyFrames[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  sub_20BEB59B0((uint64_t)&v10, (uint64_t)"Ts", (uint64_t)"TsSpline::_Detach");
  v2 = *((_QWORD *)this + 1);
  if (!v2 || *(_QWORD *)(v2 + 8))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v3, *(const pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, 0);
    sub_20BF8C5C4(&v9, (uint64_t)v3);
    v4 = *(_QWORD *)this;
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    *(_OWORD *)this = v9;
    *(_QWORD *)&v9 = v4;
    *((_QWORD *)&v9 + 1) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  while (v11--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
}

void sub_20BF88A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  sub_20BEB24F4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::ClearRedundantKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, std::type_info *a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3)
{
  uint64_t *KeyFrames;
  char v7;
  uint64_t v8;
  char *v9;
  char v10;
  double *v11;
  uint64_t v12;
  char *v13;
  double v14;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  double *v20[3];
  void **v21;
  void **v22;
  uint64_t v23;

  KeyFrames = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  sub_20BF8BA30(&v21, *KeyFrames, KeyFrames[1], 0x8E38E38E38E38E39 * ((KeyFrames[1] - *KeyFrames) >> 3));
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(v20);
  v7 = sub_20BF8BB34(a3, v20);
  sub_20BE6100C((uint64_t)v20, v20[1]);
  v10 = 0;
  v16 = v22;
  v17 = v22;
  v18 = v21;
  v19 = v21;
  while (v17 != v19)
  {
    v11 = (double *)sub_20BF88C1C((uint64_t)&v16, v8, v9);
    if (pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v11, a2)&& ((v7 & 1) != 0 || (pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(a3, v11[1]) & 1) != 0))
    {
      v14 = *(double *)(*(_QWORD *)(sub_20BF88D4C((uint64_t)&v16, v12, v13) + 8) - 64);
      pxrInternal__aapl__pxrReserved__::TsSpline::_Detach((pxrInternal__aapl__pxrReserved__::TsSpline *)this);
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(*this, 0, v14);
      v10 = 1;
    }
    sub_20BF88DC8((uint64_t)&v16);
  }
  v16 = (void **)&v21;
  sub_20BF87594(&v16);
  return v10 & 1;
}

void sub_20BF88BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16)
{
  sub_20BE6100C((uint64_t)&a13, a14);
  a9 = (void **)&a16;
  sub_20BF87594(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF88C1C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD v5[4];
  char v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, true"
            ">::operator*() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = true]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 72;
}

void sub_20BF88C94()
{
  JUMPOUT(0x20BF88C3CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, std::type_info *a3)
{
  pxrInternal__aapl__pxrReserved__ *KeyFrames;
  _OWORD *LoopParams;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const pxrInternal__aapl__pxrReserved__::VtValue *v11;
  _OWORD v13[5];

  KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  LoopParams = (_OWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v13[0] = *LoopParams;
  v8 = LoopParams[4];
  v10 = LoopParams[1];
  v9 = LoopParams[2];
  v13[3] = LoopParams[3];
  v13[4] = v8;
  v13[1] = v10;
  v13[2] = v9;
  return pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant(KeyFrames, a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v13, a3, v11);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::RemoveKeyFrame(pxrInternal__aapl__pxrReserved__::TsSpline *a1, uint64_t a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(*(_QWORD **)a1, a2, a3);
}

uint64_t sub_20BF88D4C(uint64_t result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, true"
            ">::operator->() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = true]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BF88DC8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKey"
            "FrameMap, true>::operator++() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 - 72;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetRawKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetNormalKeyFrames(*this);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFramesInMultiInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 i;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  for (i = *(_OWORD *)result; (_QWORD)i != *((_QWORD *)&i + 1); result = sub_20BF89020(&i))
  {
    v8 = sub_20BF88F2C(&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(a2, *(double *)(*v8 + 8)))
    {
      v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF88FA4((uint64_t *)&i, v9, v10);
      v12 = a3[1];
      if (v12 >= a3[2])
      {
        v13 = sub_20BF8C6A4(a3, v11);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a3[1], v11);
        v13 = v12 + 72;
        a3[1] = v12 + 72;
      }
      a3[1] = v13;
    }
  }
  return result;
}

void sub_20BF88F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BF87594(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF88F2C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap"
            ">::operator->() [T = const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BF88FA4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap"
            ">::operator*() [T = const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF89018()
{
  JUMPOUT(0x20BF88FC8);
}

_QWORD *sub_20BF89020(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TsKeyFrameMap>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  double v5;
  double v6;
  BOOL v7;
  BOOL v8;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*result == result[1])
  {
    v7 = 0;
    v8 = 0;
    v5 = 0.0;
    v6 = 0.0;
  }
  else
  {
    result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
    v5 = *(double *)(*result + 8);
    v6 = *(double *)(result[1] - 64);
    v7 = fabs(v5) != INFINITY;
    v8 = fabs(v6) != INFINITY;
  }
  *(double *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v8;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::SwapKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SwapKeyFrames(*(_QWORD **)a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::CanSetKeyFrame(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, uint64_t a3)
{
  _QWORD *KeyFrames;
  uint64_t Typeid;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  BOOL v11;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  void **v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  if (*KeyFrames == KeyFrames[1])
    return 1;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v25, a2);
  Typeid = pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(a1);
  v8 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  v9 = strcmp((const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v10 = v9 == 0;
  if (v9)
    v11 = a3 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v13 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
    v14 = v21;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v13 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v21);
    if (v22 < 0)
      v14 = (void **)v21[0];
    v15 = pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(a1);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v20 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"cannot mix keyframes of different value types; (adding %s to existing keyframes of type %s)",
      v16,
      v17,
      v14,
      v18);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v23;
    *(_QWORD *)(a3 + 16) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
  }
  sub_20BF4C2D8((uint64_t)v25);
  return v10;
}

void sub_20BF892DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  uint64_t KeyFrames;
  uint64_t Typeid;
  uint64_t v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*(_QWORD *)KeyFrames == *(_QWORD *)(KeyFrames + 8))
    return MEMORY[0x24BEDB7C8];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v4, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  sub_20BF4C2D8((uint64_t)v4);
  return Typeid;
}

void sub_20BF893C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::KeyFrameIsInLoopedRange(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  _OWORD *LoopParams;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t LoopedInterval;
  double v9;
  int v10;
  double v11;
  int v12;
  uint64_t MasterInterval;
  double v14;
  double v15;
  BOOL v16;
  _BOOL4 v17;
  BOOL v18;
  _OWORD v19[5];

  LoopParams = (_OWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v19[0] = *LoopParams;
  v4 = LoopParams[4];
  v6 = LoopParams[1];
  v5 = LoopParams[2];
  v19[3] = LoopParams[3];
  v19[4] = v4;
  v19[1] = v6;
  v19[2] = v5;
  result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v19);
  if ((_DWORD)result)
  {
    LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v19);
    v9 = *(double *)LoopedInterval;
    v10 = *(unsigned __int8 *)(LoopedInterval + 8);
    v11 = *(double *)(LoopedInterval + 16);
    v12 = *(unsigned __int8 *)(LoopedInterval + 24);
    MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v19);
    v14 = *(double *)(MasterInterval + 16);
    v15 = *((double *)a2 + 1);
    if (*(double *)MasterInterval >= v15
      && (*(double *)MasterInterval == v15 ? (v16 = *(_BYTE *)(MasterInterval + 8) == 0) : (v16 = 1), v16))
    {
      v17 = 0;
    }
    else
    {
      v17 = *(unsigned __int8 *)(MasterInterval + 24) != 0;
      if (v14 != v15)
        v17 = 0;
      if (v14 > v15)
        v17 = 1;
    }
    if (v9 < v15 || (v9 == v15 ? (v18 = v10 == 0) : (v18 = 1), !v18))
    {
      if (v11 > v15)
        return !v17;
      if (v11 == v15)
      {
        if (!v12)
          v17 = 1;
        return !v17;
      }
    }
    return 0;
  }
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsSpline::GetLoopParams@<Q0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t LoopParams;
  __int128 v4;
  __n128 result;

  LoopParams = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v4 = *(_OWORD *)(LoopParams + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(LoopParams + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(LoopParams + 64);
  result = *(__n128 *)(LoopParams + 16);
  *(_OWORD *)a2 = *(_OWORD *)LoopParams;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v18;
  void ***v19;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v20;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v21;
  void **v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  uint64_t v27[3];
  void *__p[2];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  double v32;
  _BYTE v33[72];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v32 = a7;
  if (pxrInternal__aapl__pxrReserved__::TsSpline::IsTimeLooped(a1, a7))
  {
    *(_BYTE *)a6 = 0;
    *((_BYTE *)a6 + 72) = 0;
  }
  else
  {
    v30 = 0uLL;
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::TsSpline::_GetBreakdown(a1, (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)&v30, a2, a3, a4, a7, a8);
    if ((_QWORD)v30 != *((_QWORD *)&v30 + 1))
    {
      __p[0] = 0;
      __p[1] = 0;
      v29 = 0;
      *(_OWORD *)v27 = v30;
      while (v27[0] != v27[1])
      {
        v18 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF89C90(v27, v16, v17);
        if ((pxrInternal__aapl__pxrReserved__::TsSpline::CanSetKeyFrame(a1, v18, (uint64_t)__p) & 1) == 0)
        {
          v22 = (void **)"ts/spline.cpp";
          v23 = "Breakdown";
          v24 = 284;
          v25 = "std::optional<TsKeyFrame> pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(double, TsKnotType, BOOL"
                ", double, const VtValue &, GfInterval *)";
          v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1);
          *(_BYTE *)a6 = 0;
          *((_BYTE *)a6 + 72) = 0;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
          goto LABEL_23;
        }
        sub_20BF89D0C(v27);
      }
      if (a5)
      {
        *(_QWORD *)a5 = 0;
        *(_BYTE *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        v19 = &v22;
        *(_BYTE *)(a5 + 24) = 0;
      }
      else
      {
        v19 = 0;
      }
      *(_OWORD *)v27 = v30;
      while (v27[0] != v27[1])
      {
        v22 = 0;
        LOBYTE(v23) = 0;
        v24 = 0;
        LOBYTE(v25) = 0;
        v20 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF89C90(v27, v16, v17);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v33, v20);
        pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v33, (uint64_t)v19);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v33);
        if (a5)
          sub_20BF06E54(a5, (uint64_t)&v22);
        sub_20BF89D0C(v27);
      }
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
    }
    v21 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsSpline::find(a1, &v32);
    if (*(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1)
                                                                + 8) == v21)
    {
      v22 = (void **)"ts/spline.cpp";
      v23 = "Breakdown";
      v24 = 309;
      v25 = "std::optional<TsKeyFrame> pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(double, TsKnotType, BOOL, do"
            "uble, const VtValue &, GfInterval *)";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to find keyframe: %f", a7);
      *(_BYTE *)a6 = 0;
      *((_BYTE *)a6 + 72) = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a6, v21);
      *((_BYTE *)a6 + 72) = 1;
    }
LABEL_23:
    v22 = (void **)&v30;
    sub_20BF87594(&v22);
  }
}

void sub_20BF897AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  a10 = &a24;
  sub_20BF87594((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsTimeLooped(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2)
{
  _OWORD *LoopParams;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t LoopedInterval;
  double v10;
  uint64_t MasterInterval;
  double v14;
  _OWORD v15[5];

  LoopParams = (_OWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v15[0] = *LoopParams;
  v4 = LoopParams[4];
  v6 = LoopParams[1];
  v5 = LoopParams[2];
  v15[3] = LoopParams[3];
  v15[4] = v4;
  v15[1] = v6;
  v15[2] = v5;
  result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v15);
  if ((_DWORD)result)
  {
    LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v15);
    if (*(double *)LoopedInterval >= a2 && (*(double *)LoopedInterval != a2 || *(_BYTE *)(LoopedInterval + 8) == 0))
      return 0;
    v10 = *(double *)(LoopedInterval + 16);
    if (v10 <= a2 && (v10 != a2 || *(_BYTE *)(LoopedInterval + 24) == 0))
      return 0;
    MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v15);
    if (*(double *)MasterInterval >= a2 && (*(double *)MasterInterval != a2 || *(_BYTE *)(MasterInterval + 8) == 0))
      return 1;
    v14 = *(double *)(MasterInterval + 16);
    if (v14 > a2)
      return 0;
    return v14 != a2 || *(_BYTE *)(MasterInterval + 24) == 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::_GetBreakdown(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, uint64_t a3, char a4, _QWORD *a5, double a6, double a7)
{
  uint64_t i;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  uint64_t result;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v22;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v23;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v24;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v25;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v26;
  double v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[9];
  uint64_t v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v27 = a6;
  v15 = *(_QWORD *)a2;
  for (i = *((_QWORD *)a2 + 1);
        i != v15;
  *((_QWORD *)a2 + 1) = v15;
  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a6);
  v18 = *((_QWORD *)KeyFrames + 1);
  if (v18 == result || *(double *)(result + 8) != a6)
  {
    if (*(_QWORD *)KeyFrames == v18)
    {
      if (a5[1])
      {
        sub_20BF4C6D0(v33, a5);
      }
      else
      {
        v33[0] = 0;
        v33[1] = (uint64_t)&unk_24C52064B;
      }
      v31 = 0;
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v32, &v27, v33, a3, &v30, v28, a7, a7);
      v26 = sub_20BF89DD8(a2, &v27);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v26, (void (***)(_QWORD))v32);
    }
    else
    {
      if (a5[1])
        sub_20BF4C6D0(v33, a5);
      else
        pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 0, v33, a6);
      if ((_DWORD)a3 == 2
        && (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents(*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(&v30, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
        v19 = v27;
        v20 = *(double *)(*(_QWORD *)KeyFrames + 8);
        v21 = *(double *)(*((_QWORD *)KeyFrames + 1) - 64);
        if ((a4 & 1) == 0)
        {
          if (v27 < v20 && *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*a1) == 1)
          {
            pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 1, v32, v27);
            sub_20BF4B5D8(&v30, v32);
            sub_20BF4C2D8((uint64_t)v32);
          }
          if (v27 > v21
            && *(_DWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*a1) + 4) == 1)
          {
            pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 1, v32, v27);
            sub_20BF4B5D8(&v30, v32);
            sub_20BF4C2D8((uint64_t)v32);
          }
        }
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v32, &v27, v33, 2, &v30, &v30, a7, a7);
        v22 = sub_20BF89DD8(a2, &v27);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v22, (void (***)(_QWORD))v32);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v32);
        if ((a4 & 1) == 0 && v19 >= v20 && v19 <= v21)
        {
          v23 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(KeyFrames, v27);
          sub_20BF89ED4(a2, v23);
          sub_20BF89ED4(a2, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v23 - 72));
          pxrInternal__aapl__pxrReserved__::Ts_Breakdown((double **)a2, v24);
        }
        goto LABEL_29;
      }
      v31 = 0;
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v32, &v27, v33, a3, &v30, v28, 0.0, 0.0);
      v25 = sub_20BF89DD8(a2, &v27);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v25, (void (***)(_QWORD))v32);
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v32);
    sub_20BF4C2D8((uint64_t)v28);
LABEL_29:
    sub_20BF4C2D8((uint64_t)&v30);
    return sub_20BF4C2D8((uint64_t)v33);
  }
  return result;
}

void sub_20BF89C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8(v5 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF89C90(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKeyFrameMap>::ope"
            "rator*() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF89D04()
{
  JUMPOUT(0x20BF89CB4);
}

_QWORD *sub_20BF89D0C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKey"
            "FrameMap>::operator++() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::find(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  uint64_t result;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *a2);
  if (*((_QWORD *)KeyFrames + 1) == result || *(double *)(result + 8) != *a2)
    return *((_QWORD *)KeyFrames + 1);
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF89DD8(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a1, double *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v5;
  _QWORD v7[10];

  v7[9] = *MEMORY[0x24BDAC8D0];
  v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a1, *a2);
  v5 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v4;
  if (*((_QWORD *)a1 + 1) == v4 || *(double *)(v4 + 8) != *a2)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7);
    v5 = sub_20BF8BC0C((uint64_t *)a1, v5, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7);
    *((double *)v5 + 1) = *a2;
  }
  return v5;
}

void sub_20BF89E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsSpline::Eval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  return pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, a2, 0, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsSpline::EvalDerivative@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  return pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, a2, 1, a3, a4);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF89ED4(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v4;
  double v5;

  v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((_QWORD *)a1 + 1);
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)a1 != v4)
  {
    v5 = *((double *)a2 + 1);
    if (v5 <= *((double *)v4 - 8))
      v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a1, v5);
  }
  return sub_20BF8C284((uint64_t *)a1, v4, a2);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t a2, int a3, char a4, _QWORD *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a7, double a8)
{
  uint64_t v16[3];
  void *__p[3];
  void **v18;

  sub_20BF8C834(__p, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  sub_20BF8C97C(v16, *(_QWORD *)(a2 + 16), a5);
  pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleValues(a1, (uint64_t *)__p, a3, a4, v16, a6, a7, a8);
  v18 = (void **)v16;
  sub_20BF8CA20(&v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20BF89FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_20BF8CA20((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleValues(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, int a3, char a4, uint64_t *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a7, double a8)
{
  unint64_t v9;
  void *__p;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  v21 = a3;
  v9 = (a2[1] - *a2) >> 3;
  if (v9 == (a5[1] - *a5) >> 4)
  {
    sub_20BF8CA90(&__p, v9, &v21);
    pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleKnotTypes(a1, a2, &__p, a4, a5, a6, a7, a8);
    if (__p)
    {
      v17 = (const char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    __p = "ts/spline.cpp";
    v17 = "_BreakdownMultipleValues";
    v18 = 460;
    v19 = "void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleValues(const std::vector<double> &, TsKnotT"
          "ype, BOOL, double, const std::vector<VtValue> &, GfInterval *, TsKeyFrameMap *)";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Number of times and values do not match");
  }
}

void sub_20BF8A10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleKnotTypes(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, _QWORD *a3, char a4, uint64_t *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a7, double a8)
{
  uint64_t v8;
  uint64_t KeyFrames;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (***v20)(_QWORD);
  uint64_t *v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v28;
  char *i;
  int v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  char **v35;
  BOOL v36;
  int v41;
  double v42;
  char *v43;
  char *v44;
  uint64_t v45;
  const char *v46;
  char v47;
  uint64_t v48[2];
  uint64_t *v49;
  _QWORD v50[4];

  v50[2] = *MEMORY[0x24BDAC8D0];
  v8 = (a2[1] - *a2) >> 3;
  if (v8 == (uint64_t)(a3[1] - *a3) >> 2 && v8 == (a5[1] - *a5) >> 4)
  {
    v44 = 0;
    v45 = 0;
    v43 = (char *)&v44;
    KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
    v14 = *a2;
    if (a2[1] != *a2)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)KeyFrames;
      v16 = 0;
      v17 = 0;
      do
      {
        v42 = 0.0;
        v42 = *(double *)(v14 + 8 * v17);
        v18 = *a5;
        v41 = 0;
        v41 = *(_DWORD *)(*a3 + 4 * v17);
        v19 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v15, v42);
        v20 = (void (***)(_QWORD))v19;
        if (*((_QWORD *)v15 + 1) != v19 && *(double *)(v19 + 8) == v42)
        {
          if (a7)
          {
            v28 = sub_20BF89DD8(a7, &v42);
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v28, v20);
          }
        }
        else
        {
          if (*(_QWORD *)(v18 + v16 + 8))
          {
            v49 = (uint64_t *)&v41;
            v21 = (uint64_t *)sub_20BE86554((uint64_t **)&v43, &v41, (uint64_t)&unk_20CAC184C, (_DWORD **)&v49);
            v49 = *(uint64_t **)&v42;
            sub_20BF4C6D0(v50, (_QWORD *)(v18 + v16));
            v22 = (uint64_t **)v21[6];
            if ((unint64_t)v22 >= v21[7])
            {
              v23 = sub_20BF8CBDC(v21 + 5, &v49);
            }
            else
            {
              *v22 = v49;
              v23 = (uint64_t)(v22 + 3);
              sub_20BF4C200(v22 + 1, v50);
            }
            v21[6] = v23;
            v27 = v50;
          }
          else
          {
            v49 = (uint64_t *)&v41;
            v24 = (uint64_t *)sub_20BE86554((uint64_t **)&v43, &v41, (uint64_t)&unk_20CAC184C, (_DWORD **)&v49);
            pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 0, v48, v42);
            v49 = *(uint64_t **)&v42;
            sub_20BF4C200(v50, v48);
            v25 = (uint64_t **)v24[6];
            if ((unint64_t)v25 >= v24[7])
            {
              v26 = sub_20BF8CBDC(v24 + 5, &v49);
            }
            else
            {
              *v25 = v49;
              v26 = (uint64_t)(v25 + 3);
              sub_20BF4C200(v25 + 1, v50);
            }
            v24[6] = v26;
            sub_20BF4C2D8((uint64_t)v50);
            v27 = v48;
          }
          sub_20BF4C2D8((uint64_t)v27);
        }
        ++v17;
        v14 = *a2;
        v16 += 16;
      }
      while (v17 < (a2[1] - *a2) >> 3);
    }
    if (a6)
    {
      *(_QWORD *)a6 = 0;
      *(_BYTE *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_BYTE *)(a6 + 24) = 0;
    }
    for (i = v44; i; i = *(char **)i)
    {
      v30 = *((_DWORD *)i + 8);
      if (v30 <= 2)
      {
        if (v30 == 2)
        {
          LODWORD(v48[0]) = 2;
          v49 = v48;
          v31 = sub_20BE86554((uint64_t **)&v43, (int *)v48, (uint64_t)&unk_20CAC184C, (_DWORD **)&v49);
          pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownSamples(a1, (uint64_t *)v31 + 5, 2, a4, a6, a7, a8);
          break;
        }
        i += 8;
      }
    }
    v32 = (uint64_t *)v43;
    if (v43 != (char *)&v44)
    {
      do
      {
        v33 = *((unsigned int *)v32 + 8);
        if ((_DWORD)v33 != 2)
          pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownSamples(a1, v32 + 5, v33, a4, a6, a7, a8);
        v34 = (char *)v32[1];
        if (v34)
        {
          do
          {
            v35 = (char **)v34;
            v34 = *(char **)v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (char **)v32[2];
            v36 = *v35 == (char *)v32;
            v32 = (uint64_t *)v35;
          }
          while (!v36);
        }
        v32 = (uint64_t *)v35;
      }
      while (v35 != &v44);
    }
    sub_20BF8CB10((uint64_t)&v43, v44);
  }
  else
  {
    v43 = "ts/spline.cpp";
    v44 = "_BreakdownMultipleKnotTypes";
    v45 = 481;
    v46 = "void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleKnotTypes(const std::vector<double> &, cons"
          "t std::vector<TsKnotType> &, BOOL, double, const std::vector<VtValue> &, GfInterval *, TsKeyFrameMap *)";
    v47 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 1, (pxrInternal__aapl__pxrReserved__ *)"Numbers of times, values and knot types do not match");
  }
}

void sub_20BF8A51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char *a16)
{
  sub_20BF8CB10((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownSamples(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v15;
  _BOOL4 v16;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  void (**v22[9])(_QWORD);
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    if (a5)
      v15 = &v18;
    else
      v15 = 0;
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(a1, a3, a4, (_QWORD *)(v7 + 8), (uint64_t)v15, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22, *(double *)v7, a7);
      if (v23)
        v16 = a6 != 0;
      else
        v16 = 0;
      if (v16)
      {
        v17 = sub_20BF89DD8(a6, (double *)v7);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v17, v22);
      }
      if (a5)
        sub_20BF06E54(a5, (uint64_t)&v18);
      if (v23)
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
      v7 += 24;
    }
    while (v7 != v8);
  }
}

void sub_20BF8A6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::Clear(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  v2 = *((_QWORD *)this + 1);
  if (v2 && !*(_QWORD *)(v2 + 8))
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9);
  }
  else
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v3, *(const pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9);
    sub_20BF8C5C4(&v8, (uint64_t)v3);
    v4 = *(_QWORD *)this;
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    *(_OWORD *)this = v8;
    *(_QWORD *)&v8 = v4;
    *((_QWORD *)&v8 + 1) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  *(_QWORD *)&v8 = v9;
  sub_20BF87594((void ***)&v8);
}

void sub_20BF8A790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_20BF87594(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrame@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *KeyFrames;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  char v8;

  KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrame(KeyFrames, v6, a2);
  if (result)
  {
    result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a3, result);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  *((_BYTE *)a3 + 72) = v8;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameBefore@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *KeyFrames;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  char v8;

  KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameBefore(KeyFrames, v6, a2);
  if (result)
  {
    result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a3, result);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  *((_BYTE *)a3 + 72) = v8;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameAfter@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *KeyFrames;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  char v8;

  KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameAfter(KeyFrames, v6, a2);
  if (result)
  {
    result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a3, result);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  *((_BYTE *)a3 + 72) = v8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, std::type_info *a3)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  double *v7;
  _QWORD v9[4];
  char v10;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  v7 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((double **)KeyFrames + 1) != v7 && v7[1] == a2)
    return pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7, a3);
  v9[0] = "ts/spline.cpp";
  v9[1] = "IsKeyFrameRedundant";
  v9[2] = 649;
  v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(TsTime, const VtValue &) const";
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Time %0.02f doesn't correspond to a key frame!", a2);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::HasRedundantKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, std::type_info *a2)
{
  uint64_t *KeyFrames;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v9;
  uint64_t v11;
  uint64_t i;

  KeyFrames = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  v7 = *KeyFrames;
  v8 = KeyFrames[1];
  v11 = *KeyFrames;
  for (i = v8; ; v8 = i)
  {
    if (v7 == v8)
      return 0;
    v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF88FA4(&v11, v5, v6);
    if ((pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(this, v9, a2) & 1) != 0)
      break;
    sub_20BF89020(&v11);
    v7 = v11;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(pxrInternal__aapl__pxrReserved__::TsSpline *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, a3, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  double *v9;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  v6 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((_QWORD *)KeyFrames + 1) == v6 || (v7 = (pxrInternal__aapl__pxrReserved__ *)v6, *(double *)(v6 + 8) != a2))
  {
    v11 = "ts/spline.cpp";
    v12 = "IsSegmentFlat";
    v13 = 687;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(TsTime, TsTime) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Start time %0.02f doesn't correspond to a key frame!");
    return 0;
  }
  v9 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a3);
  if (*((double **)KeyFrames + 1) == v9 || v9[1] != a3)
  {
    v11 = "ts/spline.cpp";
    v12 = "IsSegmentFlat";
    v13 = 694;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(TsTime, TsTime) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"End time %0.02f doesn't correspond to a key frame!");
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v7, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v9, v10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(pxrInternal__aapl__pxrReserved__::TsSpline *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(a2, a3, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  double *v9;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  v6 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((_QWORD *)KeyFrames + 1) == v6 || (v7 = (pxrInternal__aapl__pxrReserved__ *)v6, *(double *)(v6 + 8) != a2))
  {
    v11 = "ts/spline.cpp";
    v12 = "IsSegmentValueMonotonic";
    v13 = 719;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(TsTime, TsTime) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Start time %0.02f doesn't correspond to a key frame!");
    return 0;
  }
  v9 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a3);
  if (*((double **)KeyFrames + 1) == v9 || v9[1] != a3)
  {
    v11 = "ts/spline.cpp";
    v12 = "IsSegmentValueMonotonic";
    v13 = 726;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(TsTime, TsTime) const";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"End time %0.02f doesn't correspond to a key frame!");
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(v7, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v9, v10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsVarying(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline::_IsVarying(this, 0.0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::_IsVarying(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2)
{
  uint64_t KeyFrames;
  int v5;
  int *Extrapolation;
  int v7;
  int v8;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v9;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v10;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v20;
  int KnotType;
  int v22;
  double v23;
  char *v24;
  double v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v30[2];
  uint64_t v31[2];
  std::type_info v32;
  std::type_info v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*(_QWORD *)KeyFrames == *(_QWORD *)(KeyFrames + 8))
    return 0;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v33, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
  v5 = sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
  sub_20BF4C2D8((uint64_t)&v33);
  Extrapolation = (int *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this);
  v7 = *Extrapolation;
  v8 = Extrapolation[1];
  v9 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(KeyFrames + 8);
  v33.__type_name = 0;
  v10 = v9;
  if ((v5 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v32, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
    sub_20BF4B5D8(&v33, &v32);
    sub_20BF4C2D8((uint64_t)&v32);
    v10 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(KeyFrames + 8);
  }
  v11 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames;
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames == v10)
  {
LABEL_41:
    v28 = 0;
    goto LABEL_45;
  }
  v12 = -INFINITY;
  v13 = INFINITY;
  while (1)
  {
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v32, v11);
      v14 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
      sub_20BF4C2D8((uint64_t)&v32);
      if (v14 < v13)
        v13 = v14;
      if (v14 > v12)
        v12 = v14;
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v11))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v32, v11);
        v15 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
        sub_20BF4C2D8((uint64_t)&v32);
        if (v15 < v13)
          v13 = v15;
        if (v15 > v12)
          v12 = v15;
      }
      if (v12 - v13 > a2)
        goto LABEL_44;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v32, v11);
      v17 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v33, v16);
      sub_20BF4C2D8((uint64_t)&v32);
      if ((v17 & 1) == 0)
        goto LABEL_44;
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v11))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v32, v11);
        v19 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v33, v18);
        sub_20BF4C2D8((uint64_t)&v32);
        if ((v19 & 1) == 0)
          goto LABEL_44;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(v11))
      goto LABEL_40;
    v20 = *(_QWORD *)(KeyFrames + 8);
    KnotType = v7;
    if (v11 != *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames)
      KnotType = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v9);
    v22 = v8;
    if (v11 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v20 - 72))
      v22 = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v11);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero((uint64_t *)&v32, v11);
    if (!KnotType)
      goto LABEL_30;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(v11);
    if (v23 == 0.0)
    {
      KnotType = 0;
      if (!v22)
      {
LABEL_37:
        if ((KnotType & 1) != 0)
          sub_20BF4C2D8((uint64_t)v31);
        sub_20BF4C2D8((uint64_t)&v32);
        goto LABEL_40;
      }
      goto LABEL_31;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v31, v11);
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v31, &v32, v24))break;
    KnotType = 1;
LABEL_30:
    if (!v22)
      goto LABEL_37;
LABEL_31:
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(v11);
    if (v25 == 0.0)
      goto LABEL_37;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v30, v11);
    v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v30, &v32, v26);
    sub_20BF4C2D8((uint64_t)v30);
    if (KnotType)
      sub_20BF4C2D8((uint64_t)v31);
    sub_20BF4C2D8((uint64_t)&v32);
    if ((v27 & 1) == 0)
      goto LABEL_44;
LABEL_40:
    v9 = v11;
    v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v11 + 72);
    if (v11 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(KeyFrames + 8))
      goto LABEL_41;
  }
  sub_20BF4C2D8((uint64_t)v31);
  sub_20BF4C2D8((uint64_t)&v32);
LABEL_44:
  v28 = 1;
LABEL_45:
  sub_20BF4C2D8((uint64_t)&v33);
  return v28;
}

void sub_20BF8AF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsVaryingSignificantly(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline::_IsVarying(this, 0.000001);
}

double pxrInternal__aapl__pxrReserved__::TsSpline::SetExtrapolation(pxrInternal__aapl__pxrReserved__::TsSpline *a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  unint64_t v8;

  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
  v6 = *(_QWORD **)a1;
  v8 = __PAIR64__(a3, a2);
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(v6, (double *)&v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetType(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  uint64_t KeyFrames;
  const std::type_info *v2;
  char *v3;
  uint64_t Type;
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  uint64_t v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*(_QWORD *)KeyFrames == *(_QWORD *)(KeyFrames + 8))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::TfType *)atomic_load(&qword_254985450);
    if (!v5)
      v5 = sub_20BF8CDC0(&qword_254985450);
    return *(_QWORD *)v5;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v7, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
    Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v7, v2, v3);
    sub_20BF4C2D8((uint64_t)v7);
  }
  return Type;
}

void sub_20BF8B140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeName(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Typeid;

  Typeid = pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(this);
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), a2);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::EvalHeld(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  _QWORD *KeyFrames;
  _QWORD *v9;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v10;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v11;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD v15[4];
  char v16;
  _BYTE v17[72];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  if (*KeyFrames == KeyFrames[1])
  {
    a3[1] = 0;
    return;
  }
  v9 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  if (*v9 == v9[1])
  {
    v17[0] = 0;
    v18 = 0;
    goto LABEL_18;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  v11 = *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)v10;
  if (*(double *)(*(_QWORD *)v10 + 8) >= a4
    || (v12 = v10,
        v13 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v10, a4),
        *((_QWORD *)v12 + 1) != v13)
    && ((v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v13, *(double *)(v13 + 8) == a4)
      ? (v14 = a2 == 1)
      : (v14 = 0),
        v14))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v11);
    v18 = 1;
    goto LABEL_12;
  }
  pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameBefore(a1, a4, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  if (v18)
  {
LABEL_12:
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(a3, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
    goto LABEL_13;
  }
LABEL_18:
  v15[0] = "ts/spline.cpp";
  v15[1] = "EvalHeld";
  v15[2] = 933;
  v15[3] = "VtValue pxrInternal__aapl__pxrReserved__::TsSpline::EvalHeld(TsTime, TsSide) const";
  v16 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "kf", 0) & 1) != 0)
    goto LABEL_12;
  a3[1] = 0;
LABEL_13:
  if (v18)
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
}

void sub_20BF8B300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a14);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TsSpline::DoSidesDiffer(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;
  double *v4;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v5;
  char *v7;
  char v8;
  char *v9;
  int v10;
  std::type_info v11;
  uint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  v4 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((double **)KeyFrames + 1) == v4)
    return 0;
  v5 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v4;
  if (v4[1] != a2)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v4))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v12, v5);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v11, v5);
    v8 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v12, &v11, v7);
    sub_20BF4C2D8((uint64_t)&v11);
    sub_20BF4C2D8((uint64_t)v12);
    if ((v8 & 1) == 0)
      return 1;
  }
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames == v5)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72)))
    return 0;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v12, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72));
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v11, v5);
  v10 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v12, &v11, v9);
  sub_20BF4C2D8((uint64_t)&v11);
  sub_20BF4C2D8((uint64_t)v12);
  return !v10;
}

void sub_20BF8B464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsLinear(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  _QWORD *KeyFrames;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v11;
  uint64_t v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v14;
  char IsDualValued;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*KeyFrames != KeyFrames[1])
  {
    v3 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
    if (v3[1] - *v3 == 144)
    {
      v4 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
      v7 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this) + 8);
      v17 = v4;
      v18 = v7;
      if (v4 == v7)
      {
LABEL_8:
        if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this) == 1)
          return *(_DWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this) + 4) == 1;
      }
      else
      {
        while (1)
        {
          v8 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)sub_20BF8B600(&v17, v5, v6);
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(*v8) != 1)
            break;
          v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)sub_20BF8B600(&v17, v9, v10);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v19, *v11);
          if ((sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v19) & 1) == 0)
          {
            sub_20BF4C2D8((uint64_t)v19);
            return 0;
          }
          v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)sub_20BF8B600(&v17, v12, v13);
          IsDualValued = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(*v14);
          sub_20BF4C2D8((uint64_t)v19);
          if ((IsDualValued & 1) != 0)
            return 0;
          sub_20BF8B678(&v17);
          if (v17 == v18)
            goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

void sub_20BF8B5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF8B600(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsSpline>::op"
            "erator->() [T = const pxrInternal__aapl__pxrReserved__::TsSpline, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BF8B678(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TsSpline>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TsSpline, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

double pxrInternal__aapl__pxrReserved__::TsSpline::BakeSplineLoops(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(this);
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::BakeSplineLoops(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::SetLoopParams(pxrInternal__aapl__pxrReserved__::TsSpline *this, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a2)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(this);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  return pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *KeyFrames;

  KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  return pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(KeyFrames, *a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a2)
{
  _QWORD *KeyFrames;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  sub_20BDDC1C8(a1, (uint64_t)"Ts.Spline(", 10);
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a2);
  v5 = KeyFrames[1];
  v6 = v5 - *KeyFrames;
  if (v5 != *KeyFrames)
  {
    sub_20BDDC1C8(a1, (uint64_t)"[", 1);
    v7 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a2);
    v10 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a2) + 8);
    v16 = v7;
    v17 = v10;
    if (v7 != v10)
    {
      v11 = v6 / 72 - 1;
      do
      {
        v12 = sub_20BF8B8B4(&v16, v8, v9);
        pxrInternal__aapl__pxrReserved__::operator<<(a1, v12);
        if (v11)
          v13 = ", ";
        else
          v13 = "]";
        if (v11)
          v14 = 2;
        else
          v14 = 1;
        sub_20BDDC1C8(a1, (uint64_t)v13, v14);
        sub_20BF8B678(&v16);
        --v11;
      }
      while (v16 != v17);
    }
  }
  sub_20BDDC1C8(a1, (uint64_t)")", 1);
  return a1;
}

uint64_t sub_20BF8B8B4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsSpline>::op"
            "erator*() [T = const pxrInternal__aapl__pxrReserved__::TsSpline, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF8B928()
{
  JUMPOUT(0x20BF8B8D8);
}

uint64_t *sub_20BF8B930()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C520FE8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C520FE8, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BF8B9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF8BA30(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED5B44(result, a4);
    result = (_QWORD *)sub_20BF8BAB4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BF8BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BF87594(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF8BAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a4 + v7), (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20BF8BB10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v4 + v2));
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF8BB34(_QWORD *a1, double **a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  BOOL v8;
  double *v9;
  double *v10;

  if ((double *)a1[2] == a2[2])
  {
    v4 = (double *)*a1;
    v2 = (double *)(a1 + 1);
    v3 = v4;
    if (v4 == v2)
      return 1;
    v5 = *a2;
    while (v3[4] == v5[4]
         && *((unsigned __int8 *)v3 + 40) == *((unsigned __int8 *)v5 + 40)
         && v3[6] == v5[6]
         && *((unsigned __int8 *)v3 + 56) == *((unsigned __int8 *)v5 + 56))
    {
      v6 = (double *)*((_QWORD *)v3 + 1);
      v7 = v3;
      if (v6)
      {
        do
        {
          v3 = v6;
          v6 = *(double **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v3 = (double *)*((_QWORD *)v7 + 2);
          v8 = *(_QWORD *)v3 == (_QWORD)v7;
          v7 = v3;
        }
        while (!v8);
      }
      v9 = (double *)*((_QWORD *)v5 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(double **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (double *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v8);
      }
      v5 = v10;
      if (v3 == v2)
        return 1;
    }
  }
  return 0;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF8BC0C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v4;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = this;
  v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v10 = *a1;
    v11 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v12 = 0x8E38E38E38E38E39 * (((uint64_t)this - v10) >> 3);
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v13 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)sub_20BE7BBA0(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[72 * v12];
    v20 = v19;
    v21 = &v16[72 * v15];
    sub_20BF8BE24(&v18, a3);
    v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF8BFC0(a1, &v18, (uint64_t)v4);
    sub_20BF8C238((uint64_t)&v18);
  }
  else if (this == v6)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(this, a3);
    a1[1] = (uint64_t)v4 + 72;
  }
  else
  {
    sub_20BF8BD94((uint64_t)a1, (void (***)(_QWORD))this, (unint64_t)v6, (uint64_t)this + 72);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v4, (void (***)(_QWORD))a3);
  }
  return v4;
}

void sub_20BF8BD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void (***sub_20BF8BD94(uint64_t a1, void (***a2)(_QWORD), unint64_t a3, uint64_t a4))(_QWORD)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  void (***v7)(_QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v8;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v10;

  v6 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 8);
  v7 = (void (***)(_QWORD))((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v6 + (_QWORD)a2 - a4);
    v8 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 8);
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v8, v10);
      v10 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v10 + 72);
      v8 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v8 + 72);
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20BF8C070(a2, v7, (void (***)(_QWORD))v6);
}

void sub_20BF8BE1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF8BE24(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v4;
  void (***v5)(_QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v16;
  uint64_t v17;
  char *v18;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  char *v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;

  v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
  if (v4 == (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[3])
  {
    v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*a1;
    v5 = (void (***)(_QWORD))a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      v11 = v4 - v6;
      v10 = v11 == 0;
      v12 = 0x1C71C71C71C71C72 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v29 = a1[4];
      v15 = (char *)sub_20BE7BBA0(v29, v13);
      v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v15[72 * v14];
      v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      v18 = &v15[72 * v17];
      v27.i64[1] = (uint64_t)v16;
      v28 = v18;
      v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
      v20 = a1[2] - (_QWORD)v19;
      if (v20)
      {
        v21 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72 * (v20 / 72));
        v22 = 72 * (v20 / 72);
        do
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v16, v19);
          v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72);
          v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v19 + 72);
          v22 -= 72;
        }
        while (v22);
        v15 = v26;
        v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27.i64[0];
        v23 = *(int64x2_t *)(a1 + 1);
        v18 = v28;
      }
      else
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = v16;
      }
      v26 = (char *)*a1;
      *a1 = v15;
      a1[1] = v16;
      v27 = v23;
      v24 = (char *)a1[3];
      a1[2] = v21;
      a1[3] = v18;
      v28 = v24;
      sub_20BF8C238((uint64_t)&v26);
      v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
    }
    else
    {
      v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -9 * (v8 >> 1);
      sub_20BF8C0CC(v5, (void (***)(_QWORD))v4, &v5[-9 * (v8 >> 1)]);
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v4, a2);
  a1[2] += 72;
  return result;
}

void sub_20BF8BFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF8C238((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF8BFC0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20BF8C128((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20BF8C1B8(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void (***sub_20BF8C070(void (***a1)(_QWORD), void (***a2)(_QWORD), void (***a3)(_QWORD)))(_QWORD)
{
  void (***v6)(_QWORD);

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 9;
      a3 -= 9;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void (***sub_20BF8C0CC(void (***a1)(_QWORD), void (***a2)(_QWORD), void (***a3)(_QWORD)))(_QWORD)
{
  void (***v4)(_QWORD);

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(a3, v4);
      v4 += 9;
      a3 += 9;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_20BF8C128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v12;

  v10 = 0;
  v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 + v10);
    v10 -= 72;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v12, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v10 + a3));
  }
  return a6;
}

uint64_t sub_20BF8C1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a4 + v7), (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20BF8C214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v4 + v2));
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF8C238(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF8C284(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v4;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = this;
  v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v10 = *a1;
    v11 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v12 = 0x8E38E38E38E38E39 * (((uint64_t)this - v10) >> 3);
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v13 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)sub_20BE7BBA0(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[72 * v12];
    v20 = v19;
    v21 = &v16[72 * v15];
    sub_20BF8C428(&v18, a3);
    v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_20BF8BFC0(a1, &v18, (uint64_t)v4);
    sub_20BF8C238((uint64_t)&v18);
  }
  else if (this == v6)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(this, a3);
    a1[1] = (uint64_t)v4 + 72;
  }
  else
  {
    sub_20BF8BD94((uint64_t)a1, (void (***)(_QWORD))this, (unint64_t)v6, (uint64_t)this + 72);
    if (v4 <= a3)
      a3 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a3 + 72 * (a1[1] > (unint64_t)a3));
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v4, (void (***)(_QWORD))a3);
  }
  return v4;
}

void sub_20BF8C408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_20BF8C428(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v4;
  void (***v5)(_QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v16;
  uint64_t v17;
  char *v18;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  char *v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;

  v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
  if (v4 == (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[3])
  {
    v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*a1;
    v5 = (void (***)(_QWORD))a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      v11 = v4 - v6;
      v10 = v11 == 0;
      v12 = 0x1C71C71C71C71C72 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v29 = a1[4];
      v15 = (char *)sub_20BE7BBA0(v29, v13);
      v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v15[72 * v14];
      v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      v18 = &v15[72 * v17];
      v27.i64[1] = (uint64_t)v16;
      v28 = v18;
      v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
      v20 = a1[2] - (_QWORD)v19;
      if (v20)
      {
        v21 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72 * (v20 / 72));
        v22 = 72 * (v20 / 72);
        do
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v16, v19);
          v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72);
          v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v19 + 72);
          v22 -= 72;
        }
        while (v22);
        v15 = v26;
        v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27.i64[0];
        v23 = *(int64x2_t *)(a1 + 1);
        v18 = v28;
      }
      else
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = v16;
      }
      v26 = (char *)*a1;
      *a1 = v15;
      a1[1] = v16;
      v27 = v23;
      v24 = (char *)a1[3];
      a1[2] = v21;
      a1[3] = v18;
      v28 = v24;
      sub_20BF8C238((uint64_t)&v26);
      v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
    }
    else
    {
      v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -9 * (v8 >> 1);
      sub_20BF8C0CC(v5, (void (***)(_QWORD))v4, &v5[-9 * (v8 >> 1)]);
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v4, a2);
  a1[2] += 72;
  return result;
}

void sub_20BF8C5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF8C238((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF8C5C4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C521008;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BF8C60C(_Unwind_Exception *exception_object)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v1;
  void *v3;

  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::~TsSpline_KeyFrames(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BF8C62C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF8C640(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v1;
  void *v2;

  v1 = *(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)(a1 + 24);
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::~TsSpline_KeyFrames(v1);
    operator delete(v2);
  }
}

uint64_t sub_20BF8C664(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C521058))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BF8C6A4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE7BBA0(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v10[72 * v4];
  v16 = &v10[72 * v9];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v14, a2);
  v15 = (char *)v14 + 72;
  sub_20BF8C7C0(a1, &v13);
  v11 = a1[1];
  sub_20BF8C238((uint64_t)&v13);
  return v11;
}

void sub_20BF8C7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF8C238((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF8C7C0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BF8C128((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20BF8C834(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_20BF8C8B8(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_20BF8C8B8(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_20BDDF654(result, a4);
    return (_QWORD *)sub_20BF8C924(v6, a2, a3);
  }
  return result;
}

void sub_20BF8C908(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF8C924(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_QWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *v3 = a2[4];
      v4 = (_QWORD *)a2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)a2[2];
          v6 = *v5 == (_QWORD)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *sub_20BF8C97C(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[2 * a2];
    v8 = 16 * a2;
    do
    {
      sub_20BF4C6D0(v6, a3);
      v6 += 2;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20BF8CA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BF8CA20(&a9);
  _Unwind_Resume(a1);
}

void sub_20BF8CA20(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_20BF4C2D8(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20BF8CA90(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3738(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20BF8CAF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BF8CB10(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_20BF8CB10(a1, *(_QWORD *)a2);
    sub_20BF8CB10(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    sub_20BF8CB68(&v4);
    operator delete(a2);
  }
}

void sub_20BF8CB68(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        sub_20BF4C2D8((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BF8CBDC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *a2;
  sub_20BF4C200((_QWORD *)v11 + 1, a2 + 1);
  v14[2] = v11 + 24;
  sub_20BF8CCE0(a1, v14);
  v12 = a1[1];
  sub_20BF8CD70((uint64_t)v14);
  return v12;
}

void sub_20BF8CCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF8CD70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF8CCE0(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_QWORD *)(v4 - 24);
    v4 -= 24;
    *(_QWORD *)(v6 - 24) = v7;
    v6 -= 24;
    result = sub_20BF4C200((_QWORD *)(v6 + 8), (_QWORD *)(v4 + 8));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BF8CD70(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20BF4C2D8(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *sub_20BF8CDC0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType *result;

  result = sub_20BF8CE04();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
    operator delete(result);
  return (pxrInternal__aapl__pxrReserved__::TfType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::TfType *sub_20BF8CE04()
{
  pxrInternal__aapl__pxrReserved__::TfType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::TfType *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::TfType::TfType(v0);
  return v0;
}

void sub_20BF8CE30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  *(_QWORD *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)this + 8);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return this;
}

{
  *(_QWORD *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)this + 8);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return this;
}

pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, const pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  int v12;

  *(_QWORD *)this = *(_QWORD *)a2;
  v5 = *(_OWORD *)((char *)a2 + 24);
  v6 = *(_OWORD *)((char *)a2 + 40);
  v7 = *(_OWORD *)((char *)a2 + 56);
  v8 = *(_OWORD *)((char *)a2 + 72);
  v9 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 88) = 0u;
  v10 = (char *)this + 88;
  *(_OWORD *)((char *)this + 56) = v7;
  *(_OWORD *)((char *)this + 72) = v8;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 40) = v6;
  *(_OWORD *)((char *)this + 8) = v9;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (a3)
  {
    v12 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)) ^ 1;
    if (this == a2)
      LOBYTE(v12) = 1;
    if ((v12 & 1) == 0)
      sub_20BF8F518((uint64_t)v10, *((void (****)(_QWORD))a2 + 11), *((void (****)(_QWORD))a2 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(this, a3);
  }
  else if (this != a2)
  {
    sub_20BF8F518((uint64_t)this + 112, *((void (****)(_QWORD))a2 + 14), *((void (****)(_QWORD))a2 + 15), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
    sub_20BF8F518((uint64_t)v10, *((void (****)(_QWORD))a2 + 11), *((void (****)(_QWORD))a2 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
  }
  return this;
}

void sub_20BF8CFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF87594((void ***)va);
  sub_20BF87594((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2)
{
  uint64_t v5;
  int v6;

  sub_20BEB59B0((uint64_t)&v5, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::SetKeyFrames");
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
  {
    if ((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112) != a2)
      sub_20BF8F518((uint64_t)this + 112, *(void (****)(_QWORD))a2, *((void (****)(_QWORD))a2 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster(this);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetNormalFromLooped(this);
  }
  else if ((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88) != a2)
  {
    sub_20BF8F518((uint64_t)this + 88, *(void (****)(_QWORD))a2, *((void (****)(_QWORD))a2 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  }
  while (v6--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
}

void sub_20BF8D0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::~TsSpline_KeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  void **v2;

  v2 = (void **)((char *)this + 112);
  sub_20BF87594(&v2);
  v2 = (void **)((char *)this + 88);
  sub_20BF87594(&v2);
}

{
  void **v2;

  v2 = (void **)((char *)this + 112);
  sub_20BF87594(&v2);
  v2 = (void **)((char *)this + 88);
  sub_20BF87594(&v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  int Looping;
  uint64_t v3;

  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  v3 = 88;
  if (Looping)
    v3 = 112;
  return (uint64_t)this + v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetNormalKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  return (uint64_t)this + 88;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v2;
  uint64_t v4;
  int v5;

  v2 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)sub_20BEB59B0((uint64_t)&v4, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::_UnrollMaster");
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrames(v2, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  while (v5--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v4);
}

void sub_20BF8D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetNormalFromLooped(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  double *LoopedInterval;
  double v3;
  double v4;
  double *MasterInterval;
  double v6;
  double v7;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v11;
  uint64_t v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v19;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v20;
  uint64_t v22;
  int v23;

  sub_20BEB59B0((uint64_t)&v22, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::_SetNormalFromLooped");
  LoopedInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  v3 = *LoopedInterval;
  v4 = LoopedInterval[2];
  MasterInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  v6 = *MasterInterval;
  v7 = MasterInterval[2];
  v8 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  v9 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  v10 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v3);
  sub_20BF8F74C((uint64_t)this + 88, v9, v10);
  v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((_QWORD *)this + 14);
  v12 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v3);
  while (v11 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v12)
  {
    sub_20BF89ED4((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v11);
    v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v11 + 72);
  }
  v13 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v6);
  v14 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v7);
  sub_20BF8F74C((uint64_t)this + 88, v13, v14);
  v15 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v6);
  v16 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v7);
  if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16 != v15)
  {
    do
    {
      sub_20BF89ED4((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v15);
      v15 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v15 + 72);
    }
    while (v15 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16);
  }
  v17 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v4);
  sub_20BF8F74C((uint64_t)this + 88, v17, *((void (****)(_QWORD))this + 12));
  result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v4);
  v19 = result;
  v20 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((_QWORD *)this + 15);
  if (v20 != result)
  {
    do
    {
      result = sub_20BF89ED4(v8, v19);
      v19 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v19 + 72);
    }
    while (v19 != v20);
  }
  while (v23--)
    result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v22);
  return result;
}

void sub_20BF8D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SwapKeyFrames(_QWORD *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
  v5 = *a2;
  if ((_DWORD)result)
  {
    *a2 = a1[14];
    a1[14] = v5;
    v6 = a2[1];
    a2[1] = a1[15];
    a1[15] = v6;
    v7 = a2[2];
    a2[2] = a1[16];
    a1[16] = v7;
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1);
    return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetNormalFromLooped((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1);
  }
  else
  {
    *a2 = a1[11];
    a1[11] = v5;
    v8 = a2[1];
    a2[1] = a1[12];
    a1[12] = v8;
    v9 = a2[2];
    a2[2] = a1[13];
    a1[13] = v9;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrame(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t LoopedInterval;
  double v7;
  int v8;
  double v9;
  int v10;
  uint64_t MasterInterval;
  double v12;
  BOOL v13;
  int v14;
  double v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v19;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double *v24;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v25;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 i;
  void *__p[2];
  double v33;
  uint64_t v34;
  int v35;

  sub_20BEB59B0((uint64_t)&v34, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::SetKeyFrame");
  v33 = *(double *)(a2 + 8);
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1)))
  {
    LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
    v7 = *(double *)LoopedInterval;
    v8 = *(unsigned __int8 *)(LoopedInterval + 8);
    v9 = *(double *)(LoopedInterval + 16);
    v10 = *(unsigned __int8 *)(LoopedInterval + 24);
    MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
    v12 = *(double *)(MasterInterval + 16);
    if (*(double *)MasterInterval >= v33
      && (*(double *)MasterInterval == v33 ? (v13 = *(_BYTE *)(MasterInterval + 8) == 0) : (v13 = 1), v13))
    {
      v14 = 0;
    }
    else
    {
      v16 = *(unsigned __int8 *)(MasterInterval + 24) != 0;
      if (v12 != v33)
        v16 = 0;
      v14 = v12 > v33 || v16;
    }
    if (v7 < v33 || (v7 == v33 ? (v17 = v8 == 0) : (v17 = 1), !v17))
    {
      if (v9 <= v33)
      {
        if (v9 != v33)
          goto LABEL_27;
        v18 = v10 != 0;
      }
      else
      {
        v18 = 1;
      }
      if (((!v18 | v14) & 1) == 0)
        goto LABEL_42;
    }
LABEL_27:
    v19 = sub_20BF89DD8((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), &v33);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v19, (void (***)(_QWORD))a2);
    v20 = sub_20BF89DD8((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), &v33);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v20, (void (***)(_QWORD))a2);
    sub_20BE15BCC(__p, 1uLL, &v33);
    if (v14)
    {
      v23 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), v33);
      if (a1[15] == v23 || *(double *)(v23 + 8) != v33)
      {
LABEL_35:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      v27 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v23 + 72);
      *(_QWORD *)&i = v23;
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrameRange(v23, a1 + 14, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)&i, &v27, (pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1), (uint64_t)__p);
    }
    if (a3)
    {
      for (i = *(_OWORD *)__p; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BF8DDB8(&i))
      {
        v24 = (double *)sub_20BF8DD3C((uint64_t *)&i, v21, v22);
        pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, *v24, (uint64_t)&v27);
        sub_20BF06E54(a3, (uint64_t)&v27);
      }
    }
    goto LABEL_35;
  }
  if (a3)
  {
    v15 = *(double *)(a3 + 16);
    if (*(double *)a3 <= v15 && (*(double *)a3 != v15 || *(_BYTE *)(a3 + 8) && *(_BYTE *)(a3 + 24)))
    {
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindSetKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2, (uint64_t)&v27);
      sub_20BF06E54(a3, (uint64_t)&v27);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindSetKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2, (uint64_t)&v27);
      *(_QWORD *)a3 = v27;
      *(_BYTE *)(a3 + 8) = v28;
      *(_QWORD *)(a3 + 16) = v29;
      *(_BYTE *)(a3 + 24) = v30;
    }
  }
  v25 = sub_20BF89DD8((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), &v33);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v25, (void (***)(_QWORD))a2);
LABEL_42:
  while (v35--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v34);
}

void sub_20BF8D768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_20BEB24F4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrameRange(int a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame **a3, const pxrInternal__aapl__pxrReserved__::TsKeyFrame **a4, pxrInternal__aapl__pxrReserved__::TsLoopParams *this, uint64_t a6)
{
  uint64_t LoopedInterval;
  double v11;
  int v12;
  double v13;
  int v14;
  double *MasterInterval;
  double v16;
  double v17;
  double v18;
  double v19;
  signed int v20;
  signed int v21;
  double ValueOffset;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  BOOL v28;
  double v29;
  double v30;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v31;
  unint64_t v32;
  double *v33;
  double *v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  double *v41;
  uint64_t v42;
  uint64_t *v44;
  double v46;
  void (***v47)(_QWORD);
  void (***v48)(_QWORD);
  uint64_t v49;
  uint64_t v50[2];
  double v51[2];
  _QWORD v52[2];
  uint64_t v53[2];
  void **v54;
  double v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval(this);
  v11 = *(double *)LoopedInterval;
  v12 = *(unsigned __int8 *)(LoopedInterval + 8);
  v13 = *(double *)(LoopedInterval + 16);
  v14 = *(unsigned __int8 *)(LoopedInterval + 24);
  MasterInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(this);
  v16 = *MasterInterval;
  v17 = MasterInterval[2];
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = a2;
  sub_20BF8BA30(&v47, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  v18 = v16 - v11;
  v19 = fmax(v17 - v16, 0.0);
  v20 = vcvtpd_s64_f64((v13 - v17) / v19);
  v21 = -vcvtpd_s64_f64(v18 / v19);
  if (v21 <= v20)
  {
    do
    {
      if (v21)
      {
        ValueOffset = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset(this);
        v23 = *a3;
        if (*a4 != *a3)
        {
          v24 = v19 * (double)v21;
          v25 = ValueOffset * (double)v21;
          do
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54, v23);
            v26 = v24 + v55;
            v27 = v11 != v24 + v55;
            if (!v12)
              v27 = 1;
            v46 = v24 + v55;
            if (v11 < v26 || !v27)
            {
              v28 = v13 == v26;
              if (!v14)
                v28 = 0;
              if (v13 > v26 || v28)
              {
                v55 = v24 + v55;
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v53, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54);
                if (sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
                {
                  v29 = v25 + *(double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
                  v52[1] = &unk_24C52064B;
                  *(double *)v52 = v29;
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue((uint64_t)&v54, v52);
                  sub_20BF4C2D8((uint64_t)v52);
                  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54))
                  {
                    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v50, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54);
                    v30 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v50);
                    *(_QWORD *)&v51[1] = &unk_24C52064B;
                    v51[0] = v25 + v30;
                    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue((uint64_t)&v54, v51);
                    sub_20BF4C2D8((uint64_t)v51);
                    sub_20BF4C2D8((uint64_t)v50);
                  }
                }
                v31 = sub_20BF89DD8((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)&v47, &v46);
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(_QWORD))v31, (void (***)(_QWORD))&v54);
                if (a6)
                {
                  v33 = *(double **)(a6 + 8);
                  v32 = *(_QWORD *)(a6 + 16);
                  if ((unint64_t)v33 >= v32)
                  {
                    v35 = *(double **)a6;
                    v36 = ((uint64_t)v33 - *(_QWORD *)a6) >> 3;
                    v37 = v36 + 1;
                    if ((unint64_t)(v36 + 1) >> 61)
                      sub_20BDDF694();
                    v38 = v32 - (_QWORD)v35;
                    if (v38 >> 2 > v37)
                      v37 = v38 >> 2;
                    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                      v39 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v39 = v37;
                    if (v39)
                    {
                      v40 = (char *)sub_20BDDF6A8(a6 + 16, v39);
                      v35 = *(double **)a6;
                      v33 = *(double **)(a6 + 8);
                    }
                    else
                    {
                      v40 = 0;
                    }
                    v41 = (double *)&v40[8 * v36];
                    *v41 = v46;
                    v34 = v41 + 1;
                    while (v33 != v35)
                    {
                      v42 = *((_QWORD *)v33-- - 1);
                      *((_QWORD *)v41-- - 1) = v42;
                    }
                    *(_QWORD *)a6 = v41;
                    *(_QWORD *)(a6 + 8) = v34;
                    *(_QWORD *)(a6 + 16) = &v40[8 * v39];
                    if (v35)
                      operator delete(v35);
                  }
                  else
                  {
                    *v33 = v46;
                    v34 = v33 + 1;
                  }
                  *(_QWORD *)(a6 + 8) = v34;
                }
                sub_20BF4C2D8((uint64_t)v53);
              }
            }
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54);
            v23 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v23 + 72);
          }
          while (v23 != *a4);
        }
      }
    }
    while (v21++ != v20);
  }
  if (&v47 != (void (****)(_QWORD))v44)
    sub_20BF8F518((uint64_t)v44, v47, v48, 0x8E38E38E38E38E39 * (v48 - v47));
  v54 = (void **)&v47;
  sub_20BF87594(&v54);
}

void sub_20BF8DB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a13;
  sub_20BF87594(&a24);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TsLoopParams *v6;
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v12;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v15;
  uint64_t v16;
  _QWORD *v17;
  double v18;
  BOOL v19;
  char *v20;
  double v21;
  BOOL v22;

  *(_QWORD *)a3 = 0xFFF0000000000000;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0x7FF0000000000000;
  *(_BYTE *)(a3 + 24) = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  v8 = (char *)this + 112;
  v9 = (char *)this + 88;
  v10 = 88;
  if ((_DWORD)result)
  {
    v10 = 112;
    v11 = (char *)this + 112;
  }
  else
  {
    v11 = (char *)this + 88;
  }
  if (*(_QWORD *)((char *)this + v10) != *((_QWORD *)v11 + 1))
  {
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6))
      v12 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
    else
      v12 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
    pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v12, a2);
    pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6))
      v13 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
    else
      v13 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
    v14 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v13, a2);
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6))
      v15 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
    else
      v15 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
    v16 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(v15, a2);
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6))
      v17 = v8;
    else
      v17 = v9;
    if (*v17 != v14)
    {
      v18 = *(double *)(v14 - 64);
      v19 = fabs(v18) != INFINITY;
      if (v18 != a2)
        v19 = 0;
      *(double *)a3 = v18;
      *(_BYTE *)(a3 + 8) = v19;
    }
    result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    if ((_DWORD)result)
      v20 = v8;
    else
      v20 = v9;
    if (*((_QWORD *)v20 + 1) != v16)
    {
      v21 = *(double *)(v16 + 8);
      v22 = fabs(v21) != INFINITY;
      if (v21 != a2)
        v22 = 0;
      *(double *)(a3 + 16) = v21;
      *(_BYTE *)(a3 + 24) = v22;
    }
  }
  return result;
}

uint64_t sub_20BF8DD3C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<double>>::operator*() [T = std::vector<do"
            "uble>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BF8DDB0()
{
  JUMPOUT(0x20BF8DD60);
}

_QWORD *sub_20BF8DDB8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<double>>::operator++() [T ="
            " std::vector<double>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

double *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindSetKeyFrameChangedInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this@<X0>, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TsLoopParams *v6;
  int Looping;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **v9;
  double v10;
  const pxrInternal__aapl__pxrReserved__::VtValue *v11;
  int IsKeyFrameRedundant;
  double *result;
  uint64_t v14;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v15;
  const pxrInternal__aapl__pxrReserved__::VtValue *v16;
  int v17;
  double *v18;
  double v19;
  int v20;
  uint64_t v21;
  char *v22;
  int EffectiveExtrapolationType;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  double *v31;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v32;
  char *v33;
  int v34;
  uint64_t v35;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v36;
  int v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  char v47;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v48;
  __int128 v49;
  double *KeyFrameRange;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v51;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v52;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v53;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v54;
  char *v55;
  char v56;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v57;
  char *v58;
  char v59;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v60;
  __int128 v61;
  __int128 v62;
  std::type_info v63;
  std::type_info v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  if (Looping)
    v8 = 112;
  else
    v8 = 88;
  if (Looping)
    v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 112);
  else
    v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 88);
  v10 = *((double *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v61);
  v64.__type_name = 0;
  IsKeyFrameRedundant = pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant((pxrInternal__aapl__pxrReserved__ *)v9, a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v61, &v64, v11);
  sub_20BF4C2D8((uint64_t)&v64);
  if (IsKeyFrameRedundant)
  {
    result = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, v10);
    if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)result || result[1] != v10)
      goto LABEL_54;
    v14 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, v10);
    v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v14;
    if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v14 || *(double *)(v14 + 8) != v10)
      v15 = v9[1];
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v61);
    v64.__type_name = 0;
    v17 = pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant((pxrInternal__aapl__pxrReserved__ *)v9, v15, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v61, &v64, v16);
    result = (double *)sub_20BF4C2D8((uint64_t)&v64);
    if (v17)
      goto LABEL_54;
  }
  result = (double *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval(this, v10, (uint64_t)&v61);
  v18 = *(double **)((char *)this + v8);
  if (v18 != (double *)v9[1])
  {
    v19 = *(double *)&v61;
    if (*(double *)&v61 == -INFINITY)
    {
      v20 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
      v21 = 88;
      if (v20)
      {
        v21 = 112;
        v22 = (char *)this + 112;
      }
      else
      {
        v22 = (char *)this + 88;
      }
      EffectiveExtrapolationType = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v18, (unsigned int *)this, *((_QWORD *)v22 + 1) - *(_QWORD *)((char *)this + v21) == 72, 0);
      v24 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
      v25 = 88;
      if (v24)
      {
        v25 = 112;
        v26 = (char *)this + 112;
      }
      else
      {
        v26 = (char *)this + 88;
      }
      if (EffectiveExtrapolationType != pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a2, (unsigned int *)this, *((_QWORD *)v26 + 1) - *(_QWORD *)((char *)this + v25) == 72, 0))goto LABEL_28;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v64, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v18);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v63, a2);
      v28 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v27);
      sub_20BF4C2D8((uint64_t)&v63);
      sub_20BF4C2D8((uint64_t)&v64);
      if (!v28
        || EffectiveExtrapolationType
        && (v18[1] != v10
         || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v64, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v18), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v63, a2), v30 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v29), sub_20BF4C2D8((uint64_t)&v63), sub_20BF4C2D8((uint64_t)&v64), !v30)))
      {
LABEL_28:
        v19 = -INFINITY;
        goto LABEL_36;
      }
      *(double *)&v61 = v10;
      BYTE8(v61) = 0;
    }
    else
    {
      v31 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, *(double *)&v61);
      v32 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v31;
      if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v31
        || v31[1] != v19
        || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v31))
      {
LABEL_36:
        v35 = v62;
        if (*(double *)&v62 == INFINITY)
        {
          v36 = v9[1];
          v37 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
          v38 = 88;
          if (v37)
          {
            v38 = 112;
            v39 = (char *)this + 112;
          }
          else
          {
            v39 = (char *)this + 88;
          }
          v40 = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)((char *)v36 - 72), (unsigned int *)this, *((_QWORD *)v39 + 1) - *(_QWORD *)((char *)this + v38) == 72, 1);
          v41 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
          v42 = 88;
          if (v41)
          {
            v42 = 112;
            v43 = (char *)this + 112;
          }
          else
          {
            v43 = (char *)this + 88;
          }
          if (v40 != pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a2, (unsigned int *)this, *((_QWORD *)v43 + 1) - *(_QWORD *)((char *)this + v42) == 72, 1))goto LABEL_49;
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v64, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)((char *)v36 - 72));
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v63, a2);
          v45 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v44);
          sub_20BF4C2D8((uint64_t)&v63);
          sub_20BF4C2D8((uint64_t)&v64);
          if (!v45)
            goto LABEL_49;
          if (!v40
            || *((double *)v36 - 8) == v10
            && (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v64, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)((char *)v36 - 72)), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v63, a2), v47 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v46), sub_20BF4C2D8((uint64_t)&v63), sub_20BF4C2D8((uint64_t)&v64), (v47 & 1) != 0))
          {
            *(double *)&v62 = v10;
            BYTE8(v62) = 0;
            v35 = *(_QWORD *)&v10;
          }
          else
          {
LABEL_49:
            v35 = 0x7FF0000000000000;
          }
        }
        result = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, v10);
        v48 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)result;
        if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)result || result[1] != v10)
          goto LABEL_52;
        KeyFrameRange = (double *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(this, v10);
        v52 = v51;
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)v48, (double *)a2, 0)|| KeyFrameRange[1] != v10&& (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)KeyFrameRange)|| pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)KeyFrameRange, v48, v53)&& pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)KeyFrameRange, a2, v54)))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v64, v48);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v63, a2);
          v56 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v55) ^ 1;
          if (fabs(v10) == INFINITY)
            v56 = 0;
          *(double *)&v61 = v10;
          BYTE8(v61) = v56;
          sub_20BF4C2D8((uint64_t)&v63);
          sub_20BF4C2D8((uint64_t)&v64);
          v19 = v10;
        }
        result = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)v48, (double *)a2, 1);
        if ((_DWORD)result
          || v9[1] != v52
          && (result = (double *)pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v48, v52, v57), (_DWORD)result)
          && (result = (double *)pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, v52, v60), (_DWORD)result))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v64, v48);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v63, a2);
          v59 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v58) ^ 1;
          if (fabs(v10) == INFINITY)
            v59 = 0;
          *(double *)&v62 = v10;
          BYTE8(v62) = v59;
          sub_20BF4C2D8((uint64_t)&v63);
          result = (double *)sub_20BF4C2D8((uint64_t)&v64);
        }
        else
        {
LABEL_52:
          v10 = *(double *)&v35;
        }
        if (v19 <= v10 && (v19 != v10 || BYTE8(v61) && BYTE8(v62)))
          goto LABEL_58;
LABEL_54:
        *(_QWORD *)a3 = 0;
        *(_BYTE *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 0;
        return result;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v64, v32);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v63, a2);
      v34 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v33) ^ 1;
      if (fabs(v10) == INFINITY)
        LOBYTE(v34) = 0;
      *(double *)&v61 = v10;
      BYTE8(v61) = v34;
      sub_20BF4C2D8((uint64_t)&v63);
      sub_20BF4C2D8((uint64_t)&v64);
    }
    v19 = v10;
    goto LABEL_36;
  }
LABEL_58:
  v49 = v62;
  *(_OWORD *)a3 = v61;
  *(_OWORD *)(a3 + 16) = v49;
  return result;
}

void sub_20BF8E4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t LoopedInterval;
  double v6;
  int v7;
  double v8;
  int v9;
  uint64_t MasterInterval;
  double v11;
  double v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  char v17;
  uint64_t v18;
  double v19;
  signed int v20;
  signed int v21;
  int v22;
  double v23;
  BOOL v24;
  BOOL v25;
  double v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;
  uint64_t v33;
  int v34;
  double v35;

  v35 = a3;
  sub_20BEB59B0((uint64_t)&v33, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::RemoveKeyFrame");
  if (a2)
  {
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1)))
  {
    v15 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), v35);
    if (a1[12] == v15 || *(double *)(v15 + 8) != v35)
    {
      v28 = "ts/spline_KeyFrames.cpp";
      v29 = "RemoveKeyFrame";
      v30 = 268;
      v31 = "void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(TsTime, GfInterval *)";
      v32 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe does not exist; not removing");
      goto LABEL_52;
    }
    if (a2)
    {
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, v35, (uint64_t)&v28);
      sub_20BF06E54(a2, (uint64_t)&v28);
    }
    goto LABEL_51;
  }
  LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
  v6 = *(double *)LoopedInterval;
  v7 = *(unsigned __int8 *)(LoopedInterval + 8);
  v8 = *(double *)(LoopedInterval + 16);
  v9 = *(unsigned __int8 *)(LoopedInterval + 24);
  MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
  v11 = *(double *)MasterInterval;
  v12 = *(double *)(MasterInterval + 16);
  if (*(double *)MasterInterval >= v35 && (v11 == v35 ? (v13 = *(_BYTE *)(MasterInterval + 8) == 0) : (v13 = 1), v13))
  {
    v14 = 0;
  }
  else
  {
    v16 = *(unsigned __int8 *)(MasterInterval + 24) != 0;
    if (v12 != v35)
      v16 = 0;
    v14 = v12 > v35 || v16;
  }
  if (v6 < v35 || v6 == v35 && v7)
  {
    v17 = v14;
    if (v8 > v35)
      goto LABEL_27;
    if (v8 == v35)
    {
      if (v9)
        v17 = v14;
      else
        v17 = 1;
LABEL_27:
      if ((v17 & 1) == 0)
        goto LABEL_52;
    }
  }
  v18 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), v35);
  if (a1[15] == v18 || *(double *)(v18 + 8) != v35)
  {
    v28 = "ts/spline_KeyFrames.cpp";
    v29 = "RemoveKeyFrame";
    v30 = 218;
    v31 = "void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(TsTime, GfInterval *)";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe does not exist; not removing");
    goto LABEL_52;
  }
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, v35, (uint64_t)&v28);
    sub_20BF06E54(a2, (uint64_t)&v28);
  }
  sub_20BF8ED18((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), &v35);
  if (v14)
  {
    v19 = fmax(v12 - v11, 0.0);
    v20 = vcvtpd_s64_f64((v8 - v12) / v19);
    v21 = -vcvtpd_s64_f64((v11 - v6) / v19);
    if (v21 <= v20)
    {
      v22 = v20 + 1;
      do
      {
        if (v21)
        {
          v23 = v19 * (double)v21 + v35;
          v24 = v6 != v23;
          if (!v7)
            v24 = 1;
          v27 = v19 * (double)v21 + v35;
          if (v6 < v23 || !v24)
          {
            v25 = v8 == v23;
            if (!v9)
              v25 = 0;
            if (v8 > v23 || v25)
            {
              if (a2)
              {
                pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, v23, (uint64_t)&v28);
                sub_20BF06E54(a2, (uint64_t)&v28);
              }
              sub_20BF8ED18((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), &v27);
            }
          }
        }
        ++v21;
      }
      while (v22 != v21);
    }
  }
LABEL_51:
  sub_20BF8ED18((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), &v35);
LABEL_52:
  while (v34--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v33);
}

void sub_20BF8E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TsLoopParams *v6;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **v7;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v9;
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  const pxrInternal__aapl__pxrReserved__::VtValue *v13;
  int IsKeyFrameRedundant;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *KeyFrameRange;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v16;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v17;
  uint64_t v18;
  char *v19;
  double v20;
  _BOOL4 v21;
  int Looping;
  uint64_t v23;
  char *v24;
  int EffectiveExtrapolationType;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v33;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame **v34;
  double v35;
  int v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  std::type_info v48;
  std::type_info v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
    v7 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 112);
  else
    v7 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 88);
  v8 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v7, a2);
  if (v7[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v8
    || (v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v8, *(double *)(v8 + 8) != a2))
  {
    v9 = v7[1];
  }
  result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  if ((_DWORD)result)
    v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 112);
  else
    v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 88);
  if (v11[1] == v9)
    goto LABEL_15;
  v12 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)
      ? (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112)
      : (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v46);
  v49.__type_name = 0;
  IsKeyFrameRedundant = pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant(v12, v9, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v46, &v49, v13);
  result = sub_20BF4C2D8((uint64_t)&v49);
  if (IsKeyFrameRedundant)
    goto LABEL_15;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval(this, a2, (uint64_t)&v46);
  KeyFrameRange = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(this, a2);
  v17 = v16;
  result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  v18 = 88;
  if ((_DWORD)result)
  {
    v18 = 112;
    v19 = (char *)this + 112;
  }
  else
  {
    v19 = (char *)this + 88;
  }
  if (*((_QWORD *)v19 + 1) - *(_QWORD *)((char *)this + v18) == 72)
  {
    *(_QWORD *)a3 = 0xFFF0000000000000;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0x7FF0000000000000;
    goto LABEL_16;
  }
  v20 = *(double *)&v46;
  v21 = *(double *)&v46 == -INFINITY;
  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  v23 = 88;
  if (Looping)
  {
    v23 = 112;
    v24 = (char *)this + 112;
  }
  else
  {
    v24 = (char *)this + 88;
  }
  if (v21)
  {
    EffectiveExtrapolationType = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v17, (unsigned int *)this, *((_QWORD *)v24 + 1) - *(_QWORD *)((char *)this + v23) == 72, 0);
    v26 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    v27 = 88;
    if (v26)
    {
      v27 = 112;
      v28 = (char *)this + 112;
    }
    else
    {
      v28 = (char *)this + 88;
    }
    result = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v9, (unsigned int *)this, *((_QWORD *)v28 + 1) - *(_QWORD *)((char *)this + v27) == 72, 0);
    if (EffectiveExtrapolationType | result
      || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v49, v17),
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v48, v9),
          v30 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v49, &v48, v29), sub_20BF4C2D8((uint64_t)&v48), result = sub_20BF4C2D8((uint64_t)&v49), (v30 & 1) == 0))
    {
      v20 = -INFINITY;
      goto LABEL_43;
    }
    v31 = 0;
    goto LABEL_42;
  }
  v32 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v24, v20);
  v33 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v32;
  if (*((_QWORD *)v24 + 1) == v32 || *(double *)(v32 + 8) != v20)
    v33 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((_QWORD *)v24 + 1);
  result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  if ((_DWORD)result)
    v34 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)((char *)this + 112);
  else
    v34 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)((char *)this + 88);
  if (v34[1] != v33)
  {
    result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33);
    if (!(_DWORD)result)
    {
      v31 = fabs(a2) != INFINITY;
LABEL_42:
      *(double *)&v46 = a2;
      BYTE8(v46) = v31;
      v20 = a2;
    }
  }
LABEL_43:
  v35 = *(double *)&v47;
  if (*(double *)&v47 == INFINITY)
  {
    v36 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    v37 = 88;
    if (v36)
    {
      v37 = 112;
      v38 = (char *)this + 112;
    }
    else
    {
      v38 = (char *)this + 88;
    }
    v39 = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(KeyFrameRange, (unsigned int *)this, *((_QWORD *)v38 + 1) - *(_QWORD *)((char *)this + v37) == 72, 1);
    v40 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    v41 = 88;
    if (v40)
    {
      v41 = 112;
      v42 = (char *)this + 112;
    }
    else
    {
      v42 = (char *)this + 88;
    }
    result = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v9, (unsigned int *)this, *((_QWORD *)v42 + 1) - *(_QWORD *)((char *)this + v41) == 72, 1);
    if (v39 | result
      || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v49, KeyFrameRange),
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v48, v9),
          v44 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v49, &v48, v43), sub_20BF4C2D8((uint64_t)&v48), result = sub_20BF4C2D8((uint64_t)&v49), !v44))
    {
      v35 = INFINITY;
    }
    else
    {
      *(double *)&v47 = a2;
      BYTE8(v47) = 0;
      v35 = a2;
    }
  }
  if (v20 > v35 || v20 == v35 && (!BYTE8(v46) || !BYTE8(v47)))
  {
LABEL_15:
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
LABEL_16:
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  v45 = v47;
  *(_OWORD *)a3 = v46;
  *(_OWORD *)(a3 + 16) = v45;
  return result;
}

void sub_20BF8ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20BF8ED18(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a1, double *a2)
{
  uint64_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a1, *a2);
  if (*((_QWORD *)a1 + 1) != v4 && *(double *)(v4 + 8) == *a2)
    sub_20BF8F6FC((uint64_t)a1, (void (***)(_QWORD))v4);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::Clear(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void **v11;

  sub_20BEB59B0((uint64_t)&v7, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::Clear");
  v2 = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 88) = 0u;
  v9 = v2;
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  v10 = v3;
  v11 = (void **)&v9;
  sub_20BF87594(&v11);
  v4 = *((_OWORD *)this + 7);
  *((_OWORD *)this + 7) = 0u;
  v9 = v4;
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  v10 = v5;
  v11 = (void **)&v9;
  sub_20BF87594(&v11);
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_LoopParamsChanged(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, char a2, char a3, int a4)
{
  if ((a2 & 1) != 0 || (a3 & 1) != 0 || a4)
  {
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetLoopedFromNormal(this);
  }
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetLoopedFromNormal(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  uint64_t v3;
  int v4;

  sub_20BEB59B0((uint64_t)&v3, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::_SetLoopedFromNormal");
  sub_20BF8F518((uint64_t)this + 112, *((void (****)(_QWORD))this + 11), *((void (****)(_QWORD))this + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3));
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster(this);
  while (v4--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v3);
}

void sub_20BF8EEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TsLoopParams *v6;
  unsigned int v7;
  int v8;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v6 = (pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 8);
  result = sub_20BF8F7B8((double *)(a1 + 8), (double *)(a2 + 8));
  if ((_DWORD)result)
  {
    v7 = sub_20BF8EF9C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
    v8 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6) ^ 1;
    result = v8 & v7;
    if ((v8 & 1) == 0)
    {
      if (v7)
        return sub_20BF8EF9C((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
    }
  }
  return result;
}

uint64_t sub_20BF8EF9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator==(v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 72;
    v4 += 72;
  }
  while (v2 != v3);
  return result;
}

double pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::BakeSplineLoops(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  const pxrInternal__aapl__pxrReserved__::TsLoopParams *v2;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v3;
  double result;
  _BYTE v5[8];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  double v14;

  v2 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  v3 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)pxrInternal__aapl__pxrReserved__::TsLoopParams::SetLooping((_BYTE *)this + 8, 0);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrames(v3, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v2);
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)v5);
  *((_BYTE *)this + 8) = v5[0];
  *((_QWORD *)this + 2) = v6;
  *((_BYTE *)this + 24) = v7;
  *((_QWORD *)this + 4) = v8;
  *((_BYTE *)this + 40) = v9;
  *((_QWORD *)this + 6) = v10;
  *((_BYTE *)this + 56) = v11;
  *((_QWORD *)this + 8) = v12;
  *((_BYTE *)this + 72) = v13;
  result = v14;
  *((double *)this + 10) = v14;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a3)
{
  double *LoopedInterval;
  double v6;
  double v7;
  double *MasterInterval;
  double v9;
  double v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v15;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame *v16;

  LoopedInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval(a3);
  v6 = *LoopedInterval;
  v7 = LoopedInterval[2];
  MasterInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(a3);
  v9 = *MasterInterval;
  v10 = MasterInterval[2];
  v11 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v6);
  v12 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v9);
  sub_20BF8F74C((uint64_t)a2, v11, v12);
  v13 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v10);
  v14 = (void (***)(_QWORD))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v7);
  sub_20BF8F74C((uint64_t)a2, v13, v14);
  v16 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v9);
  v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v10);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrameRange((int)v15, (uint64_t *)a2, &v16, &v15, a3, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFramesMutable(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  int Looping;
  uint64_t v3;

  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  v3 = 88;
  if (Looping)
    v3 = 112;
  return (uint64_t)this + v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::TsLoopParams *v4;
  char *v5;
  char *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v7;
  uint64_t v8;
  int Looping;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  v5 = (char *)this + 112;
  v6 = (char *)this + 88;
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
    v7 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
  else
    v7 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  v8 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(v7, a2);
  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v4);
  v10 = 88;
  if (Looping)
    v10 = 112;
  if (*(_QWORD *)((char *)this + v10) == v8)
    return v8;
  v11 = v8 - 72;
  if (*(double *)(v8 - 64) == a2)
  {
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v4))
      v12 = v5;
    else
      v12 = v6;
    if (v11 != *v12)
      return v8 - 144;
  }
  return v11;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, double a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::TsLoopParams *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v7;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v8;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v9;
  uint64_t v10;
  int Looping;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *v15;

  v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  v7 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
  v8 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
    v9 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
  else
    v9 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  v10 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v9, a2);
  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  v12 = 88;
  if (Looping)
    v12 = 112;
  if (*(_QWORD *)((char *)this + v12) == v10)
    v13 = 0;
  else
    v13 = -1;
  v14 = v10 + 72 * v13;
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6))
    v15 = v7;
  else
    v15 = v8;
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(v15, a3);
  return v14;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetEffectiveExtrapolationType(unsigned int *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, int *a3)
{
  int Looping;
  unsigned int *v7;
  uint64_t v8;

  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 2));
  v7 = a1 + 28;
  v8 = 22;
  if (Looping)
    v8 = 28;
  else
    v7 = a1 + 22;
  return pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a2, a1, *((_QWORD *)v7 + 1) - *(_QWORD *)&a1[v8] == 72, *a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  return (uint64_t)this + 8;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a2)
{
  char Looping;
  char v5;
  double ValueOffset;
  double v7;
  _BOOL4 v8;
  char v9;
  uint64_t v11;
  int v12;

  sub_20BEB59B0((uint64_t)&v11, (uint64_t)"Ts", (uint64_t)"TsSpline_KeyFrames::SetLoopParams");
  Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(a2);
  v5 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  ValueOffset = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset(a2);
  v7 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  v8 = sub_20BF8F7B8((double *)a2, (double *)this + 1);
  v9 = Looping ^ v5;
  *((_BYTE *)this + 8) = *(_BYTE *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 16);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 32);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 5);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 48);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 7);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 64);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 9);
  if (ValueOffset != v7)
    v9 = 1;
  if (((v9 & 1) != 0 || !v8)
    && pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetLoopedFromNormal(this);
  }
  while (v12--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
}

void sub_20BF8F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(_QWORD *a1, double *a2)
{
  double result;

  result = *a2;
  *a1 = *(_QWORD *)a2;
  return result;
}

void sub_20BF8F518(uint64_t a1, void (***a2)(_QWORD), void (***a3)(_QWORD), unint64_t a4)
{
  uint64_t v8;
  void (***v9)(_QWORD);
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (***v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void (****)(_QWORD))a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20BF8F6A0((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    sub_20BED5B44((_QWORD *)a1, v11);
    v12 = sub_20BF8BAB4(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_20BF8C0CC(a2, v13, v9);
    v12 = sub_20BF8BAB4(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20BF8C0CC(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v16 - 72));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20BF8F690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BF8F698(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BF8F6A0(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v3 - 72));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20BF8F6FC(uint64_t a1, void (***a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_20BF8C0CC(a2 + 9, *(void (****)(_QWORD))(a1 + 8), a2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 != v3)
  {
    do
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v5 - 72));
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void (***sub_20BF8F74C(uint64_t a1, void (***a2)(_QWORD), void (***a3)(_QWORD)))(_QWORD)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    sub_20BF8C0CC(a3, *(void (****)(_QWORD))(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v7 - 72));
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

BOOL sub_20BF8F7B8(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && a1[1] == a2[1]
      && *((unsigned __int8 *)a1 + 16) == *((unsigned __int8 *)a2 + 16)
      && a1[3] == a2[3]
      && *((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32)
      && a1[5] == a2[5]
      && *((unsigned __int8 *)a1 + 48) == *((unsigned __int8 *)a2 + 48)
      && a1[7] == a2[7]
      && *((unsigned __int8 *)a1 + 64) == *((unsigned __int8 *)a2 + 64)
      && a1[9] == a2[9];
}

void pxrInternal__aapl__pxrReserved__::TsTest_Evaluator::Sample(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

pxrInternal__aapl__pxrReserved__::TsTest_SplineData *pxrInternal__aapl__pxrReserved__::TsTest_Evaluator::BakeInnerLoops@<X0>(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2, a1);
}

void sub_20BF8F878()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "TsTest_Museum::TwoKnotBezier");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210A8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_Museum::TwoKnotLinear");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210A8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_Museum::SimpleInnerLoop");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210A8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_Museum::Recurve");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210A8, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_Museum::Crossover");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210A8, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20BF8FA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsTest_Museum::GetData(int a1@<W0>, pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X8>)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10[3];
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int64x2_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int64x2_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int64x2_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40[10];
  _BYTE v41[80];
  _BYTE v42[80];
  _BYTE v43[80];
  _QWORD v44[11];

  v44[10] = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      v35 = 0x3FF0000000000000;
      v36 = 2;
      v37 = 0x3FF0000000000000;
      v38 = 0x3FF0000000000000;
      v39 = 0x3FE0000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      v30 = 0x4014000000000000;
      v31 = 2;
      v32 = 0x4000000000000000;
      v33.i64[0] = 0;
      *(_QWORD *)&v34 = 0x3FE0000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      sub_20BF9016C((uint64_t)&v25, v40, 2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v25);
      goto LABEL_7;
    case 1:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      v35 = 0x3FF0000000000000;
      v36 = 1;
      v37 = 0x3FF0000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      v30 = 0x4014000000000000;
      v31 = 1;
      v32 = 0x4000000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      sub_20BF9016C((uint64_t)&v25, v40, 2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v25);
LABEL_7:
      v8 = v26;
      v9 = &v25;
      goto LABEL_10;
    case 2:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      v35 = 0x405C000000000000;
      v36 = 2;
      v37 = 0x402199999999999ALL;
      v38 = 0x402E000000000000;
      v39 = 0x3FECCCCCCCCCCCCDLL;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      v30 = 0x4061200000000000;
      v31 = 2;
      v32 = 0;
      v33 = vdupq_n_s64(0xC015333333333333);
      v34 = xmmword_20CAA01B0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      v25 = 0x4062200000000000;
      LODWORD(v26) = 2;
      v27 = 0x4021000000000000;
      __asm { FMOV            V0.2D, #12.5 }
      v28 = _Q0;
      v29 = xmmword_20CAA01C0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      v20 = 0x4063600000000000;
      v21 = 2;
      v22 = 0x4034333333333333;
      v23 = vdupq_n_s64(0xC02F666666666666);
      v24 = xmmword_20CAA01D0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v15);
      v15 = 0x4066A00000000000;
      LODWORD(v16) = 2;
      v17 = 0x404319999999999ALL;
      v18 = 0xC022000000000000;
      v19 = 0x4000000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::InnerLoopParams((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *)&v11);
      v11 = 1;
      v12 = xmmword_20CAA01E0;
      v13 = xmmword_20CAA01F0;
      v14 = 0x4034333333333333;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v42, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v43, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v44, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v15);
      sub_20BF9016C((uint64_t)v10, v40, 5);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, v10);
      sub_20BE6100C((uint64_t)v10, v10[1]);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetInnerLoopParams((__n128 *)a2, (__n128 *)&v11);
      return;
    case 3:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      v35 = 0x4062200000000000;
      v36 = 2;
      v37 = 0xC016666666666666;
      v38 = 0xBFF4CCCCCCCCCCCDLL;
      v39 = 0x400E666666666666;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      v30 = 0x4063800000000000;
      v31 = 2;
      v32 = 0;
      v33 = vdupq_n_s64(0xBFF4CCCCCCCCCCCDLL);
      v34 = xmmword_20CAA0180;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      v25 = 0x4064E00000000000;
      LODWORD(v26) = 2;
      v27 = 0x403CCCCCCCCCCCCDLL;
      v28 = vdupq_n_s64(0x3FD999999999999AuLL);
      v29 = xmmword_20CAA01A0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      v20 = 0x4067200000000000;
      v21 = 2;
      v22 = 0;
      v23.i64[0] = 0x400CCCCCCCCCCCCDLL;
      *((_QWORD *)&v24 + 1) = 0x4014000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v42, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v43, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      sub_20BF9016C((uint64_t)&v15, v40, 4);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v15);
      goto LABEL_9;
    case 4:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      v35 = 0x4062200000000000;
      v36 = 2;
      v37 = 0xC016666666666666;
      v38 = 0xBFF4CCCCCCCCCCCDLL;
      v39 = 0x400E666666666666;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      v30 = 0x4063800000000000;
      v31 = 2;
      v32 = 0;
      v33 = vdupq_n_s64(0xBFF4CCCCCCCCCCCDLL);
      v34 = xmmword_20CAA0180;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      v25 = 0x4064E00000000000;
      LODWORD(v26) = 2;
      v27 = 0x403CCCCCCCCCCCCDLL;
      v28 = vdupq_n_s64(0x4003333333333333uLL);
      v29 = xmmword_20CAA0190;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      v20 = 0x4067200000000000;
      v21 = 2;
      v22 = 0;
      v23.i64[0] = 0x400CCCCCCCCCCCCDLL;
      *((_QWORD *)&v24 + 1) = 0x4014000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v42, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v43, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      sub_20BF9016C((uint64_t)&v15, v40, 4);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v15);
LABEL_9:
      v8 = v16;
      v9 = &v15;
LABEL_10:
      sub_20BE6100C((uint64_t)v9, v8);
      break;
    default:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      break;
  }
}

void sub_20BF900E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  uint64_t v21;

  sub_20BE6100C((uint64_t)&a20, a21);
  sub_20BE6100C(v21 + 8, *(_QWORD **)(v21 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20BF9016C(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 80 * a3;
    do
    {
      sub_20BF901EC((uint64_t **)a1, v4, a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)a2);
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
  }
  return a1;
}

void sub_20BF901D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF901EC(uint64_t **a1, uint64_t *a2, double *a3, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  double *v10;

  v6 = (uint64_t **)sub_20BF9026C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20BF903F0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

double *sub_20BF9026C(_QWORD *a1, uint64_t *a2, double **a3, uint64_t *a4, double *a5)
{
  double *v9;
  double *v11;
  double *v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t *v16;
  BOOL v17;
  double *v18;

  v9 = (double *)(a1 + 1);
  if (a1 + 1 == a2 || pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(a5, (double *)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (double *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (double *)a2;
        return (double *)a2;
      }
    }
    v11 = (double *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (double *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (double *)v16[2];
        v17 = *(_QWORD *)v12 == (_QWORD)v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(v12 + 4, a5))
      goto LABEL_16;
    return (double *)sub_20BF9045C((uint64_t)a1, a3, a5);
  }
  if (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<((double *)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (double *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(double **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (double *)a2;
      do
      {
        v15 = (double *)*((_QWORD *)v18 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(a5, v15 + 4))
        return (double *)sub_20BF9045C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (double *)a2;
    }
    return (double *)a4;
  }
  *a3 = (double *)a2;
  *a4 = (uint64_t)a2;
  return (double *)a4;
}

void sub_20BF903F0(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_20BF90444(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF9045C(uint64_t a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  double *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (double *)(v4 + 32);
        if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(a3, (double *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleBezier(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  _QWORD *Knots;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  BOOL v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  double *v28;
  double *v29;
  double *v30;
  double *v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  const char *v36;
  char v37;

  v3 = (int)a2;
  if (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetRequiredFeatures(this) != 4)
  {
    v34.n128_u64[0] = (unint64_t)"ts/tsTest_SampleBezier.cpp";
    v34.n128_u64[1] = (unint64_t)"TsTest_SampleBezier";
    v35 = 69;
    v36 = "TsTest_SampleVec pxrInternal__aapl__pxrReserved__::TsTest_SampleBezier(const SData &, const int)";
    v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"SampleBezier supports only plain Beziers");
    goto LABEL_5;
  }
  Knots = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots(this);
  v7 = Knots[2];
  if (v7 <= 1)
  {
    v34.n128_u64[0] = (unint64_t)"ts/tsTest_SampleBezier.cpp";
    v34.n128_u64[1] = (unint64_t)"TsTest_SampleBezier";
    v35 = 76;
    v36 = "TsTest_SampleVec pxrInternal__aapl__pxrReserved__::TsTest_SampleBezier(const SData &, const int)";
    v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"SampleBezier requires at least two keyframes");
LABEL_5:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v8 = v3 / v7;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v9 = (double *)(Knots + 1);
  v10 = (double *)*Knots;
  v11 = (double *)*Knots;
  while (1)
  {
    v12 = (double *)*((_QWORD *)v10 + 1);
    v13 = v10;
    if (v12)
    {
      do
      {
        v10 = v12;
        v12 = *(double **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v10 = (double *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (!v14);
    }
    if (v10 == v9)
      break;
    if ((int)v8 >= 1)
    {
      v15 = 0;
      do
      {
        v16 = 1.0 / (double)((int)v8 + 1) * (double)v15;
        v17 = v11[4];
        v18 = v11[6];
        v19 = v11[12];
        v20 = v18 + v19 * v11[10];
        v21 = v10[4];
        v22 = v10[6];
        v23 = v10[11];
        v24 = v21 - v23;
        v25 = v22 - v23 * v10[9];
        pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v34.n128_f64, (1.0 - v16)* ((1.0 - v16) * ((1.0 - v16) * v17 + v16 * (v17 + v19)) + v16 * ((1.0 - v16) * (v17 + v19) + v16 * v24))+ v16 * ((1.0 - v16) * ((1.0 - v16) * (v17 + v19) + v16 * v24) + v16 * (v16 * v21 + (1.0 - v16) * v24)), (1.0 - v16) * ((1.0 - v16) * ((1.0 - v16) * v18 + v16 * v20) + v16 * ((1.0 - v16) * v20 + v16 * v25))+ v16 * ((1.0 - v16) * ((1.0 - v16) * v20 + v16 * v25) + v16 * (v16 * v22 + (1.0 - v16) * v25)));
        v26 = *(_QWORD *)(a3 + 8);
        if (v26 >= *(_QWORD *)(a3 + 16))
        {
          v27 = sub_20BF90830(a3, &v34);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a3 + 8), &v34);
          v27 = v26 + 16;
          *(_QWORD *)(a3 + 8) = v26 + 16;
        }
        *(_QWORD *)(a3 + 8) = v27;
        ++v15;
      }
      while ((_DWORD)v8 != v15);
    }
    v28 = (double *)*((_QWORD *)v11 + 1);
    if (v28)
    {
      do
      {
        v11 = v28;
        v28 = *(double **)v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = v11;
        v11 = (double *)*((_QWORD *)v11 + 2);
      }
      while (*(double **)v11 != v29);
    }
  }
  v30 = *(double **)v9;
  if (*(_QWORD *)v9)
  {
    do
    {
      v31 = v30;
      v30 = (double *)*((_QWORD *)v30 + 1);
    }
    while (v30);
  }
  else
  {
    do
    {
      v31 = (double *)*((_QWORD *)v9 + 2);
      v14 = *(_QWORD *)v31 == (_QWORD)v9;
      v9 = v31;
    }
    while (v14);
  }
  pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v34.n128_f64, v31[4], v31[6]);
  v32 = *(_QWORD *)(a3 + 8);
  if (v32 >= *(_QWORD *)(a3 + 16))
  {
    v33 = sub_20BF90830(a3, &v34);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a3 + 8), &v34);
    v33 = v32 + 16;
    *(_QWORD *)(a3 + 8) = v32 + 16;
  }
  *(_QWORD *)(a3 + 8) = v33;
}

void sub_20BF90800(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  *(_QWORD *)(v1 + 8) = v2;
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF90830(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  __n128 *v14;
  __n128 *v15;
  char *v16;
  uint64_t v17;

  v3 = *(__n128 **)a1;
  v4 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_20BDDF694();
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 16;
  if (v9)
    v10 = (char *)sub_20BDEA2F0(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = (__n128 *)&v10[16 * v4];
  v16 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v14, a2);
  v15 = v14 + 1;
  sub_20BF9095C((__n128 **)a1, &__p);
  v11 = *(_QWORD *)(a1 + 8);
  if (v15 != v14)
    v15 = (__n128 *)((char *)v15 + (((char *)v14 - (char *)v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_20BF90924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9095C(__n128 **a1, _QWORD *a2)
{
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (__n128 *)a2[1];
  while (v4 != v5)
    pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v6 - 1, --v4);
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (__n128 *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (__n128 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

{
  *(double *)this = a2;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this, double a2, char a3)
{
  *(double *)this = a2;
  *(_BYTE *)(this + 8) = a3;
  return this;
}

{
  *(double *)this = a2;
  *(_BYTE *)(this + 8) = a3;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this, const pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)this = v2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator=(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator=(uint64_t result, double a2)
{
  *(double *)result = a2;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator<(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 < *(double *)a2)
    return 1;
  if (*(double *)a1 == *(double *)a2 && *(_BYTE *)(a1 + 8))
    return *(_BYTE *)(a2 + 8) == 0;
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator!=(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes@<X0>(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8));
  v4 = result + 1;
  v5 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    v6 = 0;
    do
    {
      if (v6 || *((_BYTE *)v5 + 56))
      {
        v10 = v5[4];
        v11 = 1;
        sub_20BF91300((uint64_t **)a2, (uint64_t)&v10, (uint64_t)&v10);
      }
      v10 = v5[4];
      v11 = 0;
      result = sub_20BF91300((uint64_t **)a2, (uint64_t)&v10, (uint64_t)&v10);
      v6 = *((_DWORD *)v5 + 10) == 0;
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
  return result;
}

void sub_20BF90BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::TsTest_SampleTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  *(_BYTE *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  return this;
}

{
  *(_BYTE *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  return this;
}

pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::TsTest_SampleTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2)
{
  *(_BYTE *)this = 1;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8), a2);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  return this;
}

{
  *(_BYTE *)this = 1;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8), a2);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddTimes(_QWORD *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)(result + 18);
    do
    {
      v5 = *v2++;
      v6 = v5;
      v7 = 0;
      result = sub_20BF91300(v4, (uint64_t)&v6, (uint64_t)&v6);
    }
    while (v2 != v3);
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddTimes(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  double *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)(result + 18);
    v5 = (double *)(result + 19);
    do
    {
      result = sub_20BF913FC(v4, v5, v2, v2);
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddKnotTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  char *v2;
  _QWORD *v3[3];
  char v4;

  if (*(_BYTE *)this)
  {
    pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes(this, (uint64_t)&v2);
    sub_20BF90E48((_QWORD *)this + 18, v2, v3);
    sub_20BE6100C((uint64_t)&v2, v3[0]);
  }
  else
  {
    v2 = "ts/tsTest_SampleTimes.cpp";
    v3[0] = "AddKnotTimes";
    v3[1] = (_QWORD *)135;
    v3[2] = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddKnotTimes()";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v2, 1, (pxrInternal__aapl__pxrReserved__ *)"AddKnotTimes: no spline data");
  }
}

void sub_20BF90E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BE6100C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF90E48(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  double *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (double *)(result + 1);
    do
    {
      result = sub_20BF913FC(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  int v8;
  double v9;
  double v10;
  uint64_t **v11;
  int v12;
  uint64_t v13;
  _QWORD *v14[2];
  double v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if (*(_BYTE *)this)
  {
    if (a2 <= 0)
    {
      v15 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
      v16 = "AddUniformInterpolationTimes";
      v17 = 154;
      v18 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(const int)";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"AddUniformInterpolationTimes: Too few samples");
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes(this, (uint64_t)&v13);
      if (v14[1] > (_QWORD *)1)
      {
        v4 = v14[0];
        if (v14[0])
        {
          do
          {
            v5 = v4;
            v4 = (_QWORD *)v4[1];
          }
          while (v4);
        }
        else
        {
          v6 = v14;
          do
          {
            v5 = v6[2];
            v7 = *v5 == (_QWORD)v6;
            v6 = (_QWORD **)v5;
          }
          while (v7);
        }
        if (a2 >= 2)
        {
          v8 = 0;
          v9 = *(double *)(v13 + 32);
          v10 = (*((double *)v5 + 4) - v9) / (double)(a2 + 1);
          v11 = (uint64_t **)((char *)this + 144);
          v12 = a2 - 1;
          do
          {
            v15 = v9 + v10 * (double)v8;
            LOBYTE(v16) = 0;
            sub_20BF91300(v11, (uint64_t)&v15, (uint64_t)&v15);
            ++v8;
          }
          while (v12 != v8);
        }
      }
      else
      {
        v15 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
        v16 = "AddUniformInterpolationTimes";
        v17 = 161;
        v18 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(const int)";
        v19 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"AddUniformInterpolationTimes: Too few knots");
      }
      sub_20BE6100C((uint64_t)&v13, v14[0]);
    }
  }
  else
  {
    v15 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
    v16 = "AddUniformInterpolationTimes";
    v17 = 148;
    v18 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(const int)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"AddUniformInterpolationTimes: no spline data");
  }
}

void sub_20BF9107C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20BE6100C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this, double a2)
{
  _QWORD *v4;
  double v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  double v9;
  double v10;
  uint64_t **v11;
  uint64_t v12;
  _QWORD *v13[2];
  double v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  if (*(_BYTE *)this)
  {
    if (a2 <= 0.0)
    {
      v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
      v15 = "AddExtrapolationTimes";
      v16 = 185;
      v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
      v18 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: invalid factor", a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes(this, (uint64_t)&v12);
      if (v13[1] > (_QWORD *)1)
      {
        if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8)) == 3
          || *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8)) == 3)
        {
          v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
          v15 = "AddExtrapolationTimes";
          v16 = 201;
          v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
          v18 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: extrapolating loops");
        }
        else
        {
          v4 = v13[0];
          v5 = *(double *)(v12 + 32);
          if (v13[0])
          {
            do
            {
              v6 = v4;
              v4 = (_QWORD *)v4[1];
            }
            while (v4);
          }
          else
          {
            v7 = v13;
            do
            {
              v6 = v7[2];
              v8 = *v6 == (_QWORD)v7;
              v7 = (_QWORD **)v6;
            }
            while (v8);
          }
          v9 = *((double *)v6 + 4);
          v10 = (v9 - v5) * a2;
          v11 = (uint64_t **)((char *)this + 144);
          v14 = v5 - v10;
          LOBYTE(v15) = 0;
          sub_20BF91300(v11, (uint64_t)&v14, (uint64_t)&v14);
          v14 = v9 + v10;
          LOBYTE(v15) = 0;
          sub_20BF91300(v11, (uint64_t)&v14, (uint64_t)&v14);
        }
      }
      else
      {
        v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
        v15 = "AddExtrapolationTimes";
        v16 = 192;
        v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
        v18 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: too few knots");
      }
      sub_20BE6100C((uint64_t)&v12, v13[0]);
    }
  }
  else
  {
    v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
    v15 = "AddExtrapolationTimes";
    v16 = 179;
    v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: no spline data", a2);
  }
}

void sub_20BF91298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20BE6100C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddStandardTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddKnotTimes(this);
  pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(this, 200);
  pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(this, 0.2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::GetTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  return (uint64_t)this + 144;
}

_QWORD *sub_20BF91300(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20BF91388((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_BYTE *)v6 + 40) = *(_BYTE *)(a3 + 8);
    sub_20BDDE1B4(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *sub_20BF91388(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  int v7;
  _QWORD *v8;
  double v9;
  BOOL v10;
  int v11;
  BOOL v12;

  v5 = *(uint64_t **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *(double *)a3;
    v7 = *(unsigned __int8 *)(a3 + 8);
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *((double *)v4 + 4);
        if (v6 >= v9)
        {
          v10 = v6 != v9 || v7 == 0;
          if (v10 || *((_BYTE *)v4 + 40))
            break;
        }
        v4 = (uint64_t *)*v4;
        result = v8;
        if (!*v8)
          goto LABEL_23;
      }
      if (v9 >= v6)
      {
        v11 = *((unsigned __int8 *)v4 + 40);
        v12 = v9 != v6 || v11 == 0;
        if (v12 || v7 != 0)
          break;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_23:
  *a2 = v8;
  return result;
}

_QWORD *sub_20BF913FC(uint64_t **a1, double *a2, uint64_t a3, uint64_t a4)
{
  double *v6;
  _QWORD *v7;
  uint64_t **v8;
  double v10;
  double *v11;

  v6 = sub_20BF91488(a1, a2, &v11, &v10, a3);
  v7 = *(_QWORD **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[4] = *(_QWORD *)a4;
    *((_BYTE *)v7 + 40) = *(_BYTE *)(a4 + 8);
    sub_20BDDE1B4(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_20BF91488(uint64_t **a1, double *a2, double **a3, double *a4, uint64_t a5)
{
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t *v8;
  double *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  BOOL v18;
  double *v21;
  double v22;
  BOOL v23;

  if (a1 + 1 == (uint64_t **)a2
    || (v5 = *(double *)a5, v6 = a2[4], *(double *)a5 < v6)
    || ((v10 = *(unsigned __int8 *)(a5 + 8), *(double *)a5 == v6) ? (v11 = v10 == 0) : (v11 = 1),
        !v11 && !*((_BYTE *)a2 + 40)))
  {
    v7 = *(uint64_t **)a2;
    if (*a1 == (uint64_t *)a2)
    {
      v9 = a2;
    }
    else
    {
      if (v7)
      {
        v8 = *(uint64_t **)a2;
        do
        {
          v9 = (double *)v8;
          v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        v16 = a2;
        do
        {
          v9 = (double *)*((_QWORD *)v16 + 2);
          v11 = *(_QWORD *)v9 == (_QWORD)v16;
          v16 = v9;
        }
        while (v11);
      }
      v17 = v9[4];
      if (v17 >= *(double *)a5)
      {
        v18 = v17 != *(double *)a5 || *((_BYTE *)v9 + 40) == 0;
        if (v18 || *(_BYTE *)(a5 + 8) != 0)
          return (double *)sub_20BF91388((uint64_t)a1, a3, a5);
      }
    }
    if (v7)
    {
      *a3 = v9;
      return v9 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v5 || (v6 == v5 ? (v12 = *((_BYTE *)a2 + 40) == 0) : (v12 = 1), !v12 ? (v13 = v10 == 0) : (v13 = 0), v13))
  {
    v14 = *((_QWORD *)a2 + 1);
    if (v14)
    {
      v15 = (double *)*((_QWORD *)a2 + 1);
      do
      {
        a4 = v15;
        v15 = *(double **)v15;
      }
      while (v15);
    }
    else
    {
      v21 = a2;
      do
      {
        a4 = (double *)*((_QWORD *)v21 + 2);
        v11 = *(_QWORD *)a4 == (_QWORD)v21;
        v21 = a4;
      }
      while (!v11);
    }
    if (a4 == (double *)(a1 + 1)
      || (v22 = a4[4], v5 < v22)
      || (v5 == v22 ? (v23 = v10 == 0) : (v23 = 1), !v23 && !*((_BYTE *)a4 + 40)))
    {
      if (v14)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return (double *)sub_20BF91388((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *(_QWORD *)a4 = a2;
  return a4;
}

void sub_20BF915F0()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "TsTest_SplineData::InterpHeld");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210E8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::InterpLinear");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210E8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::InterpCurve");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210E8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::ExtrapHeld");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210B8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::ExtrapLinear");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210B8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::ExtrapSloped");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210B8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::ExtrapLoop");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210B8, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::LoopNone");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210C8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::LoopContinue");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210C8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::LoopRepeat");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210C8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::LoopReset");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210C8, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::LoopOscillate");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210C8, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureHeldSegments");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureLinearSegments");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureBezierSegments");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureHermiteSegments");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureDualValuedKnots");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 32, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureInnerLoops");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 64, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "TsTest_SplineData::FeatureExtrapolatingLoops");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5210D8, 128, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20BF91C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 58) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 58) = 0u;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  result = *((__n128 *)a2 + 1);
  v3 = *((_OWORD *)a2 + 2);
  v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 58) = *(_OWORD *)((char *)a2 + 58);
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v4;
  *((__n128 *)this + 1) = result;
  return result;
}

{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  result = *((__n128 *)a2 + 1);
  v3 = *((_OWORD *)a2 + 2);
  v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 58) = *(_OWORD *)((char *)a2 + 58);
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v4;
  *((__n128 *)this + 1) = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && *(double *)(a1 + 56) == *(double *)(a2 + 56)
      && *(double *)(a1 + 64) == *(double *)(a2 + 64)
      && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator!=(uint64_t a1, uint64_t a2)
{
  return !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator==(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(double *a1, double *a2)
{
  return *a1 < *a2;
}

double pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::InnerLoopParams(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *this)
{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 1;
  *((_QWORD *)this + 6) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 1;
  *((_QWORD *)this + 6) = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::InnerLoopParams(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 1);
  v4 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v4;
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 1);
  v4 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v4;
  *(__n128 *)this = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && *((unsigned __int8 *)a1 + 40) == *((unsigned __int8 *)a2 + 40)
      && a1[6] == a2[6];
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator!=(double *a1, double *a2)
{
  return !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::IsValid(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *this)
{
  double v1;
  double v2;

  if (!*(_BYTE *)this)
    return 1;
  v2 = *((double *)this + 1);
  v1 = *((double *)this + 2);
  return v1 > v2 && *((double *)this + 3) <= v2 && *((double *)this + 4) >= v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;

  result = *(__n128 *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(__n128 *)this = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::operator==(double *a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (v2 != 3)
    return v2 != 2 || a1[1] == *(double *)(a2 + 8);
  return *((_DWORD *)a1 + 4) == *(_DWORD *)(a2 + 16);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::operator!=(double *a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 1;
  if (v2 == 3)
    return *((_DWORD *)a1 + 4) != *(_DWORD *)(a2 + 16);
  if (v2 == 2)
    return a1[1] != *(double *)(a2 + 8);
  return 0;
}

double pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 80) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 1;
  *((_QWORD *)this + 16) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 80) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 1;
  *((_QWORD *)this + 16) = 0;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsTest_SplineData *pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_BYTE *)this = *(_BYTE *)a2;
  sub_20BF93040((uint64_t *)this + 1, (uint64_t)a2 + 8);
  v4 = *((_OWORD *)a2 + 2);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)this + 2) = v4;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 56) = v5;
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 6);
  v8 = *((_OWORD *)a2 + 7);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_OWORD *)this + 6) = v7;
  *((_OWORD *)this + 7) = v8;
  *((_OWORD *)this + 5) = v6;
  return this;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_BYTE *)this = *(_BYTE *)a2;
  sub_20BF93040((uint64_t *)this + 1, (uint64_t)a2 + 8);
  v4 = *((_OWORD *)a2 + 2);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)this + 2) = v4;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 56) = v5;
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 6);
  v8 = *((_OWORD *)a2 + 7);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_OWORD *)this + 6) = v7;
  *((_OWORD *)this + 7) = v8;
  *((_OWORD *)this + 5) = v6;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (a1 != a2)
    sub_20BF93118((uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;

  if (*a1 == *a2 && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3))
  {
    v4 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
    v5 = a1 + 16;
    if (v4 != a1 + 16)
    {
      v6 = (_QWORD *)*((_QWORD *)a2 + 1);
      while (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator==((uint64_t)(v4 + 32), (uint64_t)(v6 + 4)))
      {
        v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
        v8 = v4;
        if (v7)
        {
          do
          {
            v4 = v7;
            v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v4 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
            v9 = *(_QWORD *)v4 == (_QWORD)v8;
            v8 = v4;
          }
          while (!v9);
        }
        v10 = (_QWORD *)v6[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v6[2];
            v9 = *v11 == (_QWORD)v6;
            v6 = v11;
          }
          while (!v9);
        }
        v6 = v11;
        if (v4 == v5)
          goto LABEL_17;
      }
      return 0;
    }
LABEL_17:
    v12 = *((_DWORD *)a1 + 8);
    if (v12 == *((_DWORD *)a2 + 8))
    {
      if (v12 == 3)
      {
        if (*((_DWORD *)a1 + 12) != *((_DWORD *)a2 + 12))
          return 0;
      }
      else if (v12 == 2 && *((double *)a1 + 5) != *((double *)a2 + 5))
      {
        return 0;
      }
      v13 = *((_DWORD *)a1 + 14);
      if (v13 == *((_DWORD *)a2 + 14))
      {
        if (v13 == 3)
        {
          if (*((_DWORD *)a1 + 18) == *((_DWORD *)a2 + 18))
            return pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==((double *)a1 + 10, (double *)a2 + 10);
        }
        else if (v13 != 2 || *((double *)a1 + 8) == *((double *)a2 + 8))
        {
          return pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==((double *)a1 + 10, (double *)a2 + 10);
        }
      }
    }
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator==(a1, a2);
}

_BYTE *pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetIsHermite(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t **pxrInternal__aapl__pxrReserved__::TsTest_SplineData::AddKnot(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a2)
{
  uint64_t **v3;

  v3 = (uint64_t **)((char *)this + 8);
  sub_20BF933A0((uint64_t)this + 8, (double *)a2);
  return sub_20BF93418(v3, (double *)a2, a2);
}

uint64_t **pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 8);
  if (result != a2)
    return sub_20BF93118(result, *a2, a2 + 1);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPreExtrapolation(__n128 *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  this[3].n128_u32[0] = *((_DWORD *)a2 + 4);
  this[2] = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPostExtrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 4);
  *(__n128 *)((char *)this + 56) = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetInnerLoopParams(__n128 *this, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;

  result = *a2;
  v3 = a2[1];
  v4 = a2[2];
  this[8].n128_u64[0] = a2[3].n128_u64[0];
  this[6] = v3;
  this[7] = v4;
  this[5] = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetIsHermite(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetInnerLoopParams(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetRequiredFeatures(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData *v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData *v6;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData *v7;
  BOOL v8;
  uint64_t v9;
  int v10;

  v1 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((_QWORD *)this + 1);
  if (v1 == (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16))
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    do
    {
      v3 = *((_DWORD *)v1 + 10);
      if (v3 == 2)
      {
        if (*(_BYTE *)this)
          v5 = 8;
        else
          v5 = 4;
        v2 |= v5;
      }
      else
      {
        v4 = v2 | 2;
        if (!v3)
          v2 |= 1u;
        if (v3 == 1)
          v2 = v4;
      }
      if (*((_BYTE *)v1 + 56))
        v2 |= 0x20u;
      if (*((unsigned __int8 *)v1 + 104) | *((unsigned __int8 *)v1 + 105))
        v2 |= 0x10u;
      v6 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((_QWORD *)v1 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(pxrInternal__aapl__pxrReserved__::TsTest_SplineData **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((_QWORD *)v1 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v1;
          v1 = v7;
        }
        while (!v8);
      }
      v1 = v7;
    }
    while (v7 != (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16));
  }
  if (*((_BYTE *)this + 80))
    v9 = v2 | 0x40;
  else
    v9 = v2;
  v10 = *((_DWORD *)this + 8);
  if (v10 == 2 || *((_DWORD *)this + 14) == 2)
    v9 = v9 | 0x100;
  if (v10 == 3 || *((_DWORD *)this + 14) == 3)
    return v9 | 0x80;
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetDebugDescription(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData *v29;
  std::locale::id *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  const char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  const char *v43;
  uint64_t v44;
  const std::locale::facet *v45;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData *v46;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData *v47;
  BOOL v48;
  std::string v51;
  std::string v52;
  _QWORD v53[11];
  char v54;
  uint64_t v55;
  std::locale v56;

  sub_20BDDE5E0((uint64_t)v53);
  v1 = sub_20BDDC1C8(v53, (uint64_t)"Spline:", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale((std::locale *)&v52);
  std::ostream::put();
  std::ostream::flush();
  v3 = sub_20BDDC1C8(v1, (uint64_t)"  hermite ", 10);
  if (*(_BYTE *)this)
    v4 = "true";
  else
    v4 = "false";
  if (*(_BYTE *)this)
    v5 = 4;
  else
    v5 = 5;
  v6 = sub_20BDDC1C8(v3, (uint64_t)v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v52);
  std::ostream::put();
  std::ostream::flush();
  v8 = sub_20BDDC1C8(v6, (uint64_t)"  preExtrap ", 12);
  sub_20BF92E18((unsigned int *)this + 8);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v52;
  else
    v9 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  else
    size = v52.__r_.__value_.__l.__size_;
  v11 = sub_20BDDC1C8(v8, (uint64_t)v9, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)&v51);
  std::ostream::put();
  std::ostream::flush();
  v13 = sub_20BDDC1C8(v11, (uint64_t)"  postExtrap ", 13);
  sub_20BF92E18((unsigned int *)this + 14);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v51;
  else
    v14 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  else
    v15 = v51.__r_.__value_.__l.__size_;
  v16 = sub_20BDDC1C8(v13, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v56, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v56);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 80))
  {
    v18 = sub_20BDDC1C8(v53, (uint64_t)"Loop:", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale((std::locale *)&v52);
    std::ostream::put();
    std::ostream::flush();
    sub_20BDDC1C8(v18, (uint64_t)"  start ", 8);
    v20 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v20, (uint64_t)", end ", 6);
    v21 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v21, (uint64_t)", preStart ", 11);
    v22 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v22, (uint64_t)", postEnd ", 10);
    v23 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v23, (uint64_t)", closed ", 9);
    v24 = (_QWORD *)std::ostream::operator<<();
    sub_20BDDC1C8(v24, (uint64_t)", offset ", 9);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
    v26 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale((std::locale *)&v52);
    std::ostream::put();
    std::ostream::flush();
  }
  v27 = sub_20BDDC1C8(v53, (uint64_t)"Knots:", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale((std::locale *)&v52);
  std::ostream::put();
  std::ostream::flush();
  v29 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((_QWORD *)this + 1);
  if (v29 != (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16))
  {
    v30 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      sub_20BDDC1C8(v53, (uint64_t)"  ", 2);
      v31 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v31, (uint64_t)": ", 2);
      v32 = (_QWORD *)std::ostream::operator<<();
      v33 = sub_20BDDC1C8(v32, (uint64_t)", ", 2);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C5210E8, *((unsigned int *)v29 + 10), (uint64_t)&v51);
      std::string::basic_string(&v52, &v51, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v52;
      else
        v34 = (std::string *)v52.__r_.__value_.__r.__words[0];
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      else
        v35 = v52.__r_.__value_.__l.__size_;
      sub_20BDDC1C8(v33, (uint64_t)v34, v35);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (*((_DWORD *)v29 + 10) == 2)
      {
        sub_20BDDC1C8(v53, (uint64_t)", preSlope ", 11);
        v36 = (_QWORD *)std::ostream::operator<<();
        sub_20BDDC1C8(v36, (uint64_t)", postSlope ", 12);
        std::ostream::operator<<();
        if (!*(_BYTE *)this)
        {
          sub_20BDDC1C8(v53, (uint64_t)", preLen ", 9);
          v37 = (_QWORD *)std::ostream::operator<<();
          sub_20BDDC1C8(v37, (uint64_t)", postLen ", 10);
          std::ostream::operator<<();
        }
        v38 = sub_20BDDC1C8(v53, (uint64_t)", auto ", 7);
        if (*((_BYTE *)v29 + 104))
          v39 = "true";
        else
          v39 = "false";
        if (*((_BYTE *)v29 + 104))
          v40 = 4;
        else
          v40 = 5;
        v41 = sub_20BDDC1C8(v38, (uint64_t)v39, v40);
        v42 = sub_20BDDC1C8(v41, (uint64_t)" / ", 3);
        if (*((_BYTE *)v29 + 105))
          v43 = "true";
        else
          v43 = "false";
        if (*((_BYTE *)v29 + 105))
          v44 = 4;
        else
          v44 = 5;
        sub_20BDDC1C8(v42, (uint64_t)v43, v44);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(v53[0] - 24)));
      v45 = std::locale::use_facet((const std::locale *)&v52, v30);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale((std::locale *)&v52);
      std::ostream::put();
      std::ostream::flush();
      v46 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((_QWORD *)v29 + 1);
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = *(pxrInternal__aapl__pxrReserved__::TsTest_SplineData **)v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((_QWORD *)v29 + 2);
          v48 = *(_QWORD *)v47 == (_QWORD)v29;
          v29 = v47;
        }
        while (!v48);
      }
      v29 = v47;
    }
    while (v47 != (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16));
  }
  std::stringbuf::str();
  v53[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v53 + *(_QWORD *)(v53[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v53[1] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete((void *)v53[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v55);
}

void sub_20BF92D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  sub_20BDDE6CC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF92E18(unsigned int *a1)
{
  std::string *v2;
  std::string::size_type size;
  _QWORD *v4;
  std::string *v5;
  std::string::size_type v6;
  std::string __p;
  std::string v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char v13;

  sub_20BDDE5E0((uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C5210B8, *a1, (uint64_t)&__p);
  std::string::basic_string(&v9, &__p, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v9;
  else
    v2 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  sub_20BDDC1C8(v10, (uint64_t)v2, size);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*a1 == 3)
  {
    v4 = sub_20BDDC1C8(v10, (uint64_t)" ", 1);
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C5210C8, a1[4], (uint64_t)&__p);
    std::string::basic_string(&v9, &__p, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      v6 = v9.__r_.__value_.__l.__size_;
    sub_20BDDC1C8(v4, (uint64_t)v5, v6);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (*a1 == 2)
  {
    sub_20BDDC1C8(v10, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v12);
}

void sub_20BF92FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  sub_20BDDE6CC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF93040(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20BF93094(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_20BF9307C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20BF93094(uint64_t *result, double *a2, double *a3)
{
  double *v4;
  uint64_t **v5;
  uint64_t *v6;
  double *v7;
  double *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BF901EC(v5, v6, v4 + 4, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)(v4 + 4));
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t **sub_20BF93118(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v17 = result;
    v18 = v8;
    v19 = v8;
    if (v8)
    {
      v18 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          v10 = *((_OWORD *)v9 + 3);
          v11 = *((_OWORD *)v9 + 4);
          v12 = *((_OWORD *)v9 + 5);
          *(_OWORD *)((char *)v8 + 90) = *(_OWORD *)((char *)v9 + 90);
          *((_OWORD *)v8 + 4) = v11;
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 3) = v10;
          sub_20BF93290(v5, (uint64_t)v8);
          v8 = v18;
          v19 = v18;
          if (v18)
            v18 = sub_20BDFC6B0((uint64_t)v18);
          v13 = (_QWORD *)v9[1];
          if (v13)
          {
            do
            {
              a2 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v14 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v14);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_20BE64AA8((uint64_t)&v17);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20BF932FC(v5, (_OWORD *)a2 + 2);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v14 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v14);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_20BF9327C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE64AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF93290(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(double *)(a2 + 32) >= *((double *)v4 + 4))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *sub_20BF932FC(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;

  v4 = operator new(0x70uLL);
  v5 = v4;
  v6 = a2[3];
  v4[4] = a2[2];
  v4[5] = v6;
  *(_OWORD *)((char *)v4 + 90) = *(_OWORD *)((char *)a2 + 58);
  v7 = a2[1];
  v4[2] = *a2;
  v4[3] = v7;
  v8 = a1 + 1;
  v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v9;
        if (*((double *)v4 + 4) >= *((double *)v9 + 4))
          break;
        v9 = (uint64_t *)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v8, v10, (uint64_t *)v4);
  return v5;
}

uint64_t sub_20BF933A0(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = (uint64_t *)(v2 + 8);
    if (*(double *)(v2 + 32) >= v3)
    {
      v5 = (uint64_t *)v2;
      v4 = v2;
    }
    v2 = *v5;
  }
  while (*v5);
  if (v4 == a1 + 8 || v3 < *(double *)(v4 + 32))
    return 0;
  sub_20BE10B80((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **sub_20BF93418(uint64_t **a1, double *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x70uLL);
    v11 = a3[3];
    v10[4] = a3[2];
    v10[5] = v11;
    *(_OWORD *)((char *)v10 + 90) = *(_OWORD *)((char *)a3 + 58);
    v12 = a3[1];
    v10[2] = *a3;
    v10[3] = v12;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void pxrInternal__aapl__pxrReserved__::TsTest_TsEvaluator::Eval(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, const pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *KeyFrames;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Times;
  _QWORD *v10;
  _QWORD *v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __n128 v22;
  double v23;
  char v24;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  sub_20BF936CC(a1, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v25);
  KeyFrames = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v25);
  v7 = *KeyFrames;
  v8 = KeyFrames[1];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v7 != v8)
  {
    Times = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::GetTimes(a2);
    v10 = Times + 1;
    v11 = (_QWORD *)*Times;
    if ((_QWORD *)*Times != Times + 1)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime((uint64_t)&v23, (const pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime *)(v11 + 4));
        v12 = v23;
        pxrInternal__aapl__pxrReserved__::TsSpline::Eval(&v25, v24 == 0, v27, v23);
        v13 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
        pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v22.n128_f64, v12, v13);
        v14 = *(_QWORD *)(a3 + 8);
        if (v14 >= *(_QWORD *)(a3 + 16))
        {
          v15 = sub_20BF90830(a3, &v22);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a3 + 8), &v22);
          v15 = v14 + 16;
          *(_QWORD *)(a3 + 8) = v14 + 16;
        }
        *(_QWORD *)(a3 + 8) = v15;
        sub_20BF4C2D8((uint64_t)v27);
        v16 = (_QWORD *)v11[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v11[2];
            v18 = *v17 == (_QWORD)v11;
            v11 = v17;
          }
          while (!v18);
        }
        v11 = v17;
      }
      while (v17 != v10);
    }
  }
  v19 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20BF93674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20BF936CC(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X0>, pxrInternal__aapl__pxrReserved__::TsSpline *a2@<X8>)
{
  _QWORD *Knots;
  BOOL v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *PostExtrapolation;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  BOOL v17;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame **v18;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v19;
  const pxrInternal__aapl__pxrReserved__::TsKeyFrame **KeyFrames;
  uint64_t PreExtrapolation;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t InnerLoopParams;
  double v30;
  double v31;
  double v32;
  _QWORD *v33;
  _QWORD v34[4];
  char v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  char v40;
  _BYTE v41[72];
  _QWORD v42[2];
  _BYTE v43[72];
  uint64_t v44[2];
  _BYTE v45[72];
  _QWORD v46[2];
  _BYTE v47[72];
  uint64_t v48[2];
  _BYTE v49[72];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[4];

  v53[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetRequiredFeatures(a1) & 0x98) != 0)
  {
    v36 = "ts/tsTest_TsEvaluator.cpp";
    v37 = "_ConvertToTsSpline";
    v38 = 45;
    v39 = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported spline features");
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
    return;
  }
  Knots = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots(a1);
  v5 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1) != 2 || Knots[2] == 0;
  if (!v5 && *(_DWORD *)(*Knots + 40) != 2)
  {
    v36 = "ts/tsTest_TsEvaluator.cpp";
    v37 = "_ConvertToTsSpline";
    v38 = 55;
    v39 = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported pre-slope");
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
    return;
  }
  if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1) == 2 && Knots[2] != 0)
  {
    v7 = Knots + 1;
    v8 = Knots[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = v7[2];
        v5 = *(_QWORD *)v9 == (_QWORD)v7;
        v7 = (_QWORD *)v9;
      }
      while (v5);
    }
    if (*(_DWORD *)(v9 + 40) != 2)
    {
      v36 = "ts/tsTest_TsEvaluator.cpp";
      v37 = "_ConvertToTsSpline";
      v38 = 63;
      v39 = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
      v40 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported post-slope");
      pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
      return;
    }
  }
  pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
  v10 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1);
  PostExtrapolation = (_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1);
  pxrInternal__aapl__pxrReserved__::TsSpline::SetExtrapolation(a2, v10 != 0, *PostExtrapolation != 0);
  v33 = Knots;
  v14 = (double *)*Knots;
  v12 = (double *)(Knots + 1);
  v13 = v14;
  if (v14 != v12)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      v37 = (const char *)*((_QWORD *)v13 + 4);
      v53[1] = &unk_24C52064B;
      *(double *)v53 = v13[6];
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue((uint64_t)&v36, v53);
      sub_20BF4C2D8((uint64_t)v53);
      v52[1] = &unk_24C52064B;
      *(double *)v52 = v13[9];
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v52);
      sub_20BF4C2D8((uint64_t)v52);
      v51[1] = &unk_24C52064B;
      *(double *)v51 = v13[10];
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v51);
      sub_20BF4C2D8((uint64_t)v51);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v13[11]);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v13[12]);
      if (*((_DWORD *)v13 + 10) >= 3u)
      {
        v34[0] = "ts/tsTest_TsEvaluator.cpp";
        v34[1] = "_ConvertToTsSpline";
        v34[2] = 93;
        v34[3] = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
        v35 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected knot type");
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetKnotType((uint64_t)&v36);
      }
      if (*((_BYTE *)v13 + 56))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
        v50[1] = &unk_24C52064B;
        *(double *)v50 = v13[8];
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue((uint64_t)&v36, v50, 0);
        sub_20BF4C2D8((uint64_t)v50);
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v49, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v49, 0);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v49);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      v15 = (double *)*((_QWORD *)v13 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(double **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (double *)*((_QWORD *)v13 + 2);
          v5 = *(_QWORD *)v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v5);
      }
      v13 = v16;
    }
    while (v16 != v12);
  }
  v17 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1) != 1 || v33[2] == 0;
  if (v17 || *(_DWORD *)(*v33 + 40) != 2)
  {
    if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1) != 2 || !v33[2])
      goto LABEL_40;
    KeyFrames = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, *KeyFrames);
    PreExtrapolation = pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1);
    v46[1] = &unk_24C52064B;
    v46[0] = *(_QWORD *)(PreExtrapolation + 8);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v46);
    sub_20BF4C2D8((uint64_t)v46);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v45, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v45, 0);
    v19 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v45;
  }
  else
  {
    v18 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, *v18);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v48, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v48);
    sub_20BF4C2D8((uint64_t)v48);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v47, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v47, 0);
    v19 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v47;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame(v19);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
LABEL_40:
  if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1) == 1 && v33[2])
  {
    v22 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
    {
      do
      {
        v23 = v22;
        v22 = *(_QWORD *)(v22 + 8);
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = *((_QWORD *)v12 + 2);
        v5 = *(_QWORD *)v23 == (_QWORD)v12;
        v12 = (double *)v23;
      }
      while (v5);
    }
    if (*(_DWORD *)(v23 + 40) == 2)
    {
      v24 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(v24 + 8) - 72));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v44, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v44);
      sub_20BF4C2D8((uint64_t)v44);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v43, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v43, 0);
      v25 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v43;
LABEL_53:
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame(v25);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      goto LABEL_54;
    }
  }
  if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1) == 2 && v33[2] != 0)
  {
    v27 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(_QWORD *)(v27 + 8) - 72));
    v28 = pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1);
    v42[1] = &unk_24C52064B;
    v42[0] = *(_QWORD *)(v28 + 8);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v42);
    sub_20BF4C2D8((uint64_t)v42);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v41, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v41, 0);
    v25 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v41;
    goto LABEL_53;
  }
LABEL_54:
  InnerLoopParams = pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetInnerLoopParams(a1);
  if (*(_BYTE *)InnerLoopParams)
  {
    v30 = *(double *)(InnerLoopParams + 16);
    v31 = *(double *)(InnerLoopParams + 32);
    v32 = 1.0;
    if (v31 <= v30)
      v32 = 0.0;
    if (!*(_BYTE *)(InnerLoopParams + 40))
      v32 = 0.0;
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((pxrInternal__aapl__pxrReserved__::TsLoopParams *)&v36, 1, *(double *)(InnerLoopParams + 8), v30 - *(double *)(InnerLoopParams + 8), *(double *)(InnerLoopParams + 8) - *(double *)(InnerLoopParams + 24), v32 + v31 - v30, *(double *)(InnerLoopParams + 48));
    pxrInternal__aapl__pxrReserved__::TsSpline::SetLoopParams(a2, (const pxrInternal__aapl__pxrReserved__::TsLoopParams *)&v36);
  }
}

void sub_20BF93D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v37;

  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a37);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v37);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTest_TsEvaluator::Sample(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *KeyFrames;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __n128 v18;
  uint64_t v19[3];
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v20;
  std::__shared_weak_count *v21;

  sub_20BF936CC(a1, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v20);
  KeyFrames = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v20);
  if (*KeyFrames == KeyFrames[1]
    || (v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v20),
        0x8E38E38E38E38E39 * ((uint64_t)(v6[1] - *v6) >> 3) <= 1))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    v7 = *(double *)(*(_QWORD *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v20) + 8);
    v8 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v20);
    pxrInternal__aapl__pxrReserved__::TsSpline::Sample(v19, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v20, v7, *(double *)(*(_QWORD *)(v8 + 8) - 64), 1.0, 1.0, 0.000001);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v9 = v19[0];
    v10 = v19[1];
    while (v9 != v10)
    {
      v11 = *(double *)(v9 + 8);
      v12 = (double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 24));
      pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v18.n128_f64, v11, *v12);
      v13 = *(_QWORD *)(a2 + 8);
      if (v13 >= *(_QWORD *)(a2 + 16))
      {
        v14 = sub_20BF90830(a2, &v18);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a2 + 8), &v18);
        v14 = v13 + 16;
        *(_QWORD *)(a2 + 8) = v13 + 16;
      }
      *(_QWORD *)(a2 + 8) = v14;
      v9 += 56;
    }
    v18.n128_u64[0] = (unint64_t)v19;
    sub_20BF7C324((void ***)&v18);
  }
  v15 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20BF94004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTest_TsEvaluator::BakeInnerLoops(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X8>)
{
  unint64_t Extrapolation;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *v6;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame *i;
  uint64_t v8;
  uint64_t v9;
  int KnotType;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  int v17;
  double v18;
  char v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetInnerLoopParams(a1))
  {
    sub_20BF936CC(a1, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v14);
    pxrInternal__aapl__pxrReserved__::TsSpline::BakeSplineLoops((pxrInternal__aapl__pxrReserved__::TsSpline *)&v14);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
    Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(&v14);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation((uint64_t)&v16, Extrapolation != 0);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPreExtrapolation((__n128 *)a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *)&v16);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation((uint64_t)&v16, HIDWORD(Extrapolation) != 0);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPostExtrapolation(a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *)&v16);
    v6 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v14);
    for (i = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v14)
                                                               + 8);
          v6 != i;
          v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v6 + 72))
    {
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v16);
      v16 = *((_QWORD *)v6 + 1);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v25, v6);
      v18 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
      sub_20BF4C2D8((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v25, v6);
      v21 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
      sub_20BF4C2D8((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v25, v6);
      v22 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
      sub_20BF4C2D8((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(v6);
      v23 = v8;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(v6);
      v24 = v9;
      KnotType = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v6);
      if (KnotType)
      {
        if (KnotType == 1)
        {
          v17 = 1;
        }
        else if (KnotType == 2)
        {
          v17 = 2;
        }
        else
        {
          v25[0] = (uint64_t)"ts/tsTest_TsEvaluator.cpp";
          v25[1] = (uint64_t)"_ConvertToSplineData";
          v25[2] = 193;
          v25[3] = (uint64_t)"SData pxrInternal__aapl__pxrReserved__::_ConvertToSplineData(const TsSpline &)";
          v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected knot type");
        }
      }
      else
      {
        v17 = 0;
      }
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v6))
      {
        v19 = 1;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v25, v6);
        v20 = sub_20BF78F8C((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        sub_20BF4C2D8((uint64_t)v25);
      }
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::AddKnot(a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v16);
    }
    v11 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2, a1);
  }
}

void sub_20BF94324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20BE6100C(v9 + 8, *(_QWORD **)(v9 + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

double *pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(double *this, double a2, double a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(__n128 *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *this = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *this = *a2;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_Sample::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985460);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985460))
  {
    qword_254985458 = pxrInternal__aapl__pxrReserved__::VtZero<double>();
    __cxa_guard_release(&qword_254985460);
  }
  return &qword_254985458;
}

void sub_20BF94438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985460);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985470);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985470))
  {
    dword_254985468 = pxrInternal__aapl__pxrReserved__::VtZero<float>();
    __cxa_guard_release(&qword_254985470);
  }
  return &dword_254985468;
}

void sub_20BF944AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985470);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985480);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985480))
  {
    dword_254985478 = pxrInternal__aapl__pxrReserved__::VtZero<int>();
    __cxa_guard_release(&qword_254985480);
  }
  return &dword_254985478;
}

void sub_20BF94520(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985480);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985490);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985490))
  {
    byte_254985488 = pxrInternal__aapl__pxrReserved__::VtZero<BOOL>();
    __cxa_guard_release(&qword_254985490);
  }
  return &byte_254985488;
}

void sub_20BF94594(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985490);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2549854A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549854A8))
  {
    qword_254985498 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2d>();
    unk_2549854A0 = v2;
    __cxa_guard_release(&qword_2549854A8);
  }
  return &qword_254985498;
}

void sub_20BF9460C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549854A8);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero()
{
  unsigned __int8 v0;
  int v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2549854B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549854B8))
  {
    dword_2549854B0 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2f>();
    *(_DWORD *)algn_2549854B4 = v2;
    __cxa_guard_release(&qword_2549854B8);
  }
  return &dword_2549854B0;
}

void sub_20BF94684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549854B8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2549854D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549854D8))
  {
    qword_2549854C0 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3d>();
    *(_QWORD *)algn_2549854C8 = v2;
    qword_2549854D0 = v3;
    __cxa_guard_release(&qword_2549854D8);
  }
  return &qword_2549854C0;
}

void sub_20BF94700(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549854D8);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero()
{
  unsigned __int8 v0;
  int v2;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2549854F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549854F0))
  {
    dword_2549854E0 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3f>();
    *(_DWORD *)algn_2549854E4 = v2;
    dword_2549854E8 = v3;
    __cxa_guard_release(&qword_2549854F0);
  }
  return &dword_2549854E0;
}

void sub_20BF9477C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549854F0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_254985518);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985518))
  {
    qword_2549854F8 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4d>();
    unk_254985500 = v2;
    qword_254985508 = v3;
    unk_254985510 = v4;
    __cxa_guard_release(&qword_254985518);
  }
  return &qword_2549854F8;
}

void sub_20BF947F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985518);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero()
{
  unsigned __int8 v0;
  int v2;
  int v3;
  int v4;

  v0 = atomic_load((unsigned __int8 *)&qword_254985530);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985530))
  {
    dword_254985520 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4f>();
    *(_DWORD *)algn_254985524 = v2;
    dword_254985528 = v3;
    unk_25498552C = v4;
    __cxa_guard_release(&qword_254985530);
  }
  return &dword_254985520;
}

void sub_20BF94874(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985530);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero()
{
  unsigned __int8 v0;
  int v2;
  int v3;
  int v4;

  v0 = atomic_load((unsigned __int8 *)&qword_254985548);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985548))
  {
    dword_254985538 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatf>();
    *(_DWORD *)algn_25498553C = v2;
    dword_254985540 = v3;
    unk_254985544 = v4;
    __cxa_guard_release(&qword_254985548);
  }
  return &dword_254985538;
}

void sub_20BF948F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985548);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_254985570);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985570))
  {
    qword_254985550 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatd>();
    *(_QWORD *)algn_254985558 = v2;
    qword_254985560 = v3;
    unk_254985568 = v4;
    __cxa_guard_release(&qword_254985570);
  }
  return &qword_254985550;
}

void sub_20BF9496C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985570);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_254985598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985598))
  {
    qword_254985578 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2d>();
    unk_254985580 = v2;
    qword_254985588 = v3;
    unk_254985590 = v4;
    __cxa_guard_release(&qword_254985598);
  }
  return &qword_254985578;
}

void sub_20BF949E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985598);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2549855E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549855E8))
  {
    pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((uint64_t)&unk_2549855A0);
    __cxa_guard_release(&qword_2549855E8);
  }
  return &unk_2549855A0;
}

void sub_20BF94A5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549855E8);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985670);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985670))
  {
    pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t)&unk_2549855F0);
    __cxa_guard_release(&qword_254985670);
  }
  return &unk_2549855F0;
}

void sub_20BF94AD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985670);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985690);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254985690))
  {
    pxrInternal__aapl__pxrReserved__::VtZero<std::string>(qword_254985678);
    __cxa_guard_release(&qword_254985690);
  }
  return qword_254985678;
}

void sub_20BF94B44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985690);
  _Unwind_Resume(a1);
}

__int128 *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2549856C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549856C0))
  {
    qword_2549856B8 = 0;
    xmmword_254985698 = 0u;
    unk_2549856A8 = 0u;
    __cxa_guard_release(&qword_2549856C0);
  }
  return &xmmword_254985698;
}

__int128 *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2549856F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549856F0))
  {
    qword_2549856E8 = 0;
    xmmword_2549856C8 = 0u;
    unk_2549856D8 = 0u;
    __cxa_guard_release(&qword_2549856F0);
  }
  return &xmmword_2549856C8;
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero()
{
  return &unk_2549856F8;
}

void sub_20BF94C20()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "TsLeft");
  sub_20BDDC0E4(__p, "left");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521138, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TsRight");
  sub_20BDDC0E4(__p, "right");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521138, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20BF94CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20BF94D2C()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "TsKnotHeld");
  sub_20BDDC0E4(__p, "held");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521148, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TsKnotLinear");
  sub_20BDDC0E4(__p, "linear");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521148, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TsKnotBezier");
  sub_20BDDC0E4(__p, "bezier");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521148, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20BF94E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20BF94E98()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "TsExtrapolationHeld");
  sub_20BDDC0E4(__p, "held");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521158, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TsExtrapolationLinear");
  sub_20BDDC0E4(__p, "linear");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C521158, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20BF94F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::TsTypeRegistry *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  std::string v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  uint64_t v20;
  const char *v21;
  char v22;
  int v23;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__14TsTypeRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
  v2 = std::string::insert(&v16, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v20 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v17, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TsTypeRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TsTypeRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::TsTypeRegistry *)operator new(0x30uLL);
      pxrInternal__aapl__pxrReserved__::TsTypeRegistry::TsTypeRegistry(v10, v11, v12);
      v14 = atomic_load(a1);
      if (v14)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::TsTypeRegistry *)v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 84;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry"
                ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v13);
        }
      }
      else
      {
        do
          v15 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v15)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v20 = 88;
          v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry"
                ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v13, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TsTypeRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_14TsTypeRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BF9518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>:"
            ":SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::DeleteInstance()
{
  uint64_t result;
  unint64_t v1;

  for (result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
        result;
        result = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
    if (v1 == result)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance))return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TsTypeRegistry *pxrInternal__aapl__pxrReserved__::TsTypeRegistry::TsTypeRegistry(pxrInternal__aapl__pxrReserved__::TsTypeRegistry *this, uint64_t a2, char *a3)
{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  _QWORD v7[4];
  char v8;
  int v9;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = off_24C521178;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  do
    v4 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance));
  if (v4)
  {
    v7[0] = "tf/instantiateSingleton.h";
    v7[1] = "SetInstanceConstructed";
    v7[2] = 56;
    v7[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>:"
            ":SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(this);
  return this;
}

void sub_20BF953A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB3FA4(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTypeRegistry::~TsTypeRegistry(pxrInternal__aapl__pxrReserved__::TsTypeRegistry *this)
{
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;

  *(_QWORD *)this = off_24C521178;
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(this);
  sub_20BEB3FA4((uint64_t)this + 8);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TsTypeRegistry::~TsTypeRegistry(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  unsigned __int8 v6;
  const std::type_info *v7;
  char *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  const std::type_info *v12;
  char *v13;
  _QWORD *v14;
  const std::type_info *v15;
  char *v16;
  uint64_t Type;
  uint64_t (*v18)(uint64_t *);
  const std::type_info *v19;
  char *v20;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v21;
  const std::type_info *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void **v29;
  uint64_t *v30;
  __n128 v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  void *__p[2];
  char v36;
  _QWORD v37[4];
  char v38;
  uint64_t v39;
  uint64_t v40;

  v6 = atomic_load((unsigned __int8 *)&qword_254985708);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254985708))
  {
    v14 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v12, v13);
    qword_254985700 = (uint64_t)(sub_20BEB4074((_QWORD *)(a1 + 8), v14) + 3);
    __cxa_guard_release(&qword_254985708);
  }
  if (sub_20BF78EEC(a3))
    return (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::VtValue *))qword_254985700)(a2, a3);
  v10 = (_QWORD *)(a1 + 8);
  v37[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v7, v8);
  v11 = sub_20BEB4074(v10, v37);
  if (v11)
    return ((uint64_t (*)(uint64_t, pxrInternal__aapl__pxrReserved__::VtValue *))v11[3])(a2, a3);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(0);
  Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v15, v16);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(Type, &v39);
  v18 = sub_20BF46110(&v39);
  if (v19 & 1 | (unint64_t)v18)
  {
    v21 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v39);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v21);
    v37[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v22, v23);
    v24 = sub_20BEB4074(v10, v37);
    if (v24)
    {
      v25 = v40;
      if (v40)
      {
        v26 = (unsigned int *)(v40 + 8);
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      v11 = v24;
      return ((uint64_t (*)(uint64_t, pxrInternal__aapl__pxrReserved__::VtValue *))v11[3])(a2, a3);
    }
  }
  v37[0] = "ts/typeRegistry.cpp";
  v37[1] = "InitializeDataHolder";
  v37[2] = 79;
  v37[3] = "void pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(Ts_PolymorphicDataHolder *, const VtValue &)";
  v38 = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v19, v20, (uint64_t)__p);
  if (v36 >= 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v37, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot create keyframes of type %s", (const char *)v29);
  if (v36 < 0)
    operator delete(__p[0]);
  v30 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v31.n128_f64[0] = sub_20BF956B8(a2, (double *)v30);
  result = v40;
  if (v40)
  {
    v32 = (unsigned int *)(v40 + 8);
    do
    {
      v33 = __ldxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v31);
  }
  return result;
}

void sub_20BF9564C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a16 < 0)
    operator delete(__p);
  v18 = *(unsigned int **)(v16 - 40);
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

double sub_20BF956B8(uint64_t a1, double *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  double result;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_24C520A40;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  result = *a2;
  v7 = *v4;
  v8 = *v5;
  *(double *)(a1 + 16) = *a2;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTypeRegistry::IsSupportedType(pxrInternal__aapl__pxrReserved__::TsTypeRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return sub_20BEDA270((_QWORD *)this + 1, a2) != 0;
}

_QWORD *sub_20BF95738(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF96020;
  return result;
}

_QWORD *sub_20BF957B0(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF96088;
  return result;
}

_QWORD *sub_20BF95828(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD80, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF96108;
  return result;
}

_QWORD *sub_20BF958A0(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD98, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF991C0;
  return result;
}

_QWORD *sub_20BF95918(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF9BDAC;
  return result;
}

_QWORD *sub_20BF95990(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF9D988;
  return result;
}

_QWORD *sub_20BF95A08(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BF9F2F4;
  return result;
}

_QWORD *sub_20BF95A80(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFA1138;
  return result;
}

_QWORD *sub_20BF95AF8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFA2F90;
  return result;
}

_QWORD *sub_20BF95B70(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFA4D54;
  return result;
}

_QWORD *sub_20BF95BE8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFA6B00;
  return result;
}

_QWORD *sub_20BF95C60(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFA8CCC;
  return result;
}

_QWORD *sub_20BF95CD8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFAB740;
  return result;
}

_QWORD *sub_20BF95D50(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFAE07C;
  return result;
}

_QWORD *sub_20BF95DC8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFAF4C4;
  return result;
}

_QWORD *sub_20BF95E40(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFB08E4;
  return result;
}

_QWORD *sub_20BF95EB8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFB1B40;
  return result;
}

_QWORD *sub_20BF95F30(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C516910, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFB2D70;
  return result;
}

_QWORD *sub_20BF95FA8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t Instance;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  v4 = Instance + 8;
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BCE0, a2, a3);
  result = sub_20BEB428C(v4, v6, (uint64_t)&unk_20CAC184C, &v6);
  result[3] = sub_20BFB46BC;
  return result;
}

double sub_20BF96020(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double *v3;
  uint64_t *v4;
  uint64_t *v5;
  double result;
  uint64_t v7;
  uint64_t v8;

  v3 = (double *)sub_20BF78F24(a2);
  *(_QWORD *)a1 = &unk_24C520A40;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  result = *v3;
  v7 = *v4;
  v8 = *v5;
  *(double *)(a1 + 16) = *v3;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

float sub_20BF96088(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  float *v3;
  int *v4;
  int *v5;
  float result;
  int v7;
  int v8;

  v3 = (float *)sub_20BF7D934(a2);
  *(_QWORD *)a1 = &unk_24C520910;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  result = *v3;
  v7 = *v4;
  v8 = *v5;
  *(float *)(a1 + 16) = *v3;
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *sub_20BF960F0(_QWORD *result)
{
  *result = &unk_24C520910;
  return result;
}

_QWORD *sub_20BF96108(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BF58130(a2);
  return sub_20BF96134(a1, v3);
}

_QWORD *sub_20BF96134(_QWORD *a1, __int128 *a2)
{
  __int128 *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *a1 = &unk_24C5211A8;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  sub_20BF9790C((uint64_t)&v11, (uint64_t)a2, a2, (uint64_t)v4, v5);
  v6 = operator new(0xA0uLL);
  v7 = v12;
  *v6 = v11;
  v6[1] = v7;
  v11 = 0u;
  v12 = 0u;
  *((_QWORD *)v6 + 4) = v13;
  v13 = 0;
  *(_OWORD *)((char *)v6 + 40) = v14;
  *(_OWORD *)((char *)v6 + 56) = v15;
  v14 = 0u;
  v15 = 0u;
  *((_QWORD *)v6 + 9) = v16;
  v16 = 0;
  v8 = v18;
  v6[5] = v17;
  v6[6] = v8;
  v17 = 0u;
  v18 = 0u;
  *((_QWORD *)v6 + 14) = v19;
  v19 = 0;
  v9 = v20;
  *(_OWORD *)((char *)v6 + 136) = v21;
  *(_OWORD *)((char *)v6 + 120) = v9;
  v21 = 0u;
  v20 = 0u;
  *((_QWORD *)v6 + 19) = v22;
  v22 = 0;
  a1[2] = v6;
  sub_20BF5618C((uint64_t)&v20);
  sub_20BF5618C((uint64_t)&v17);
  sub_20BF5618C((uint64_t)&v14);
  sub_20BF5618C((uint64_t)&v11);
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

void sub_20BF96268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF9627C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF9627C(uint64_t a1)
{
  sub_20BF5618C(a1 + 120);
  sub_20BF5618C(a1 + 80);
  sub_20BF5618C(a1 + 40);
  sub_20BF5618C(a1);
  return a1;
}

_QWORD *sub_20BF962CC(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *a1 = &unk_24C5211A8;
  v4 = (void *)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BF979E8((uint64_t)v2, v3);
  return a1;
}

void sub_20BF9630C(_QWORD *__p)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *__p = &unk_24C5211A8;
  v4 = (void *)__p[2];
  v2 = __p + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BF979E8((uint64_t)v2, v3);
  operator delete(__p);
}

__n128 sub_20BF9634C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C5211A8;
  sub_20BF97A48((_QWORD *)(a2 + 16), (_OWORD **)(a1 + 16));
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BF963A0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BF97B5C(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_20BF963E8(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  uint64_t i;
  _BYTE v10[16];
  uint64_t v11;

  sub_20BF97C70((uint64_t)v10, a1, a2);
  sub_20BF97E34((uint64_t)v10, v6, v7, v8, a3, a4);
  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C((uint64_t)&v10[i]);
  do
  {
    sub_20BF5618C((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C((uint64_t)&v11);
}

void sub_20BF96484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF98FA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF964A0(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t i;
  _BYTE v10[16];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  sub_20BF97C70((uint64_t)v10, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  v5 = v4[1];
  v12 = *v4;
  v13 = v5;
  v6 = *((_QWORD *)v4 + 4);
  v14 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v13 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v13 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = &off_24C51E978;
  sub_20BF56B40(a3, (uint64_t)&v12);
  sub_20BF5618C((uint64_t)&v12);
  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C((uint64_t)&v10[i]);
  do
  {
    sub_20BF5618C((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C((uint64_t)&v11);
}

void sub_20BF96580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF5618C(v2 - 80);
  sub_20BF98FA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF965B0(double *a1, double *a2)
{
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  char *v9;
  std::type_info v10;
  _QWORD v11[2];
  std::type_info v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 56))(a1);
  if (v4 != (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 56))(a2) || a1[1] != a2[1])
    return 0;
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 80))(v13, a1);
  (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 80))(&v12, a2);
  if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v13, &v12, v5)&& (v6 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 104))(a1), v6 == (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 104))(a2)))
  {
    if ((*(unsigned int (**)(double *))(*(_QWORD *)a1 + 104))(a1))
    {
      (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a1 + 120))(v11, a1);
      (*(void (**)(std::type_info *__return_ptr, double *))(*(_QWORD *)a2 + 120))(&v10, a2);
      v7 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v11, &v10, v9);
      sub_20BF4C2D8((uint64_t)&v10);
      sub_20BF4C2D8((uint64_t)v11);
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  sub_20BF4C2D8((uint64_t)&v12);
  sub_20BF4C2D8((uint64_t)v13);
  return v7;
}

void sub_20BF96730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BF4C2D8((uint64_t)va2);
  sub_20BF4C2D8((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF96780(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void sub_20BF96788(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
            ">>::SetKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF9681C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9683C(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BF9696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BF969A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16) + 40;
  a2[1] = &off_24C51E978;
  return sub_20BF56B40(a2, v2);
}

uint64_t sub_20BF969BC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  __int128 *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF99000(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v20, v4);
  if (v20[1])
  {
    v8 = (__int128 *)sub_20BF58130(v5);
    sub_20BF985B0(a1[2] + 40, v8);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    v18[2] = 667;
    v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<doubl"
             "e>>::SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  return sub_20BF4C2D8((uint64_t)v20);
}

void sub_20BF96B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BF96B7C@<X0>(_QWORD *a1@<X8>)
{
  __int128 *v2;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  a1[1] = &off_24C51E978;
  return sub_20BF56B40(a1, (uint64_t)v2);
}

uint64_t sub_20BF96BB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

_BYTE *sub_20BF96BB8(_BYTE *result, int a2)
{
  _BYTE *v2;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  result[68] = a2;
  if (a2)
  {
    v2 = result;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 80))(v3);
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v2 + 136))(v2, v3);
    return (_BYTE *)sub_20BF4C2D8((uint64_t)v3);
  }
  return result;
}

void sub_20BF96C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20BF96C58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 68))
    v2 = *(_QWORD *)(a1 + 16);
  else
    v2 = *(_QWORD *)(a1 + 16) + 40;
  a2[1] = &off_24C51E978;
  return sub_20BF56B40(a2, v2);
}

void sub_20BF96C80(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  __int128 *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BF99000(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
    if (v22[1])
    {
      v8 = (__int128 *)sub_20BF58130(v5);
      sub_20BF985B0(a1[2], v8);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(uint64_t *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v17 = "ts/data.h";
      v18 = "SetLeftValue";
      v19 = 737;
      v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
            ">>::SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
      v9 = v16;
      v10 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v11 = v15;
      if (v9 < 0)
        v11 = v10;
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    sub_20BF4C2D8((uint64_t)v22);
  }
  else
  {
    v17 = "ts/data.h";
    v18 = "SetLeftValue";
    v19 = 725;
    v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF96E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

void sub_20BF96E8C(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v5[40];
  unint64_t v6[5];
  double v7;
  unint64_t v8[5];
  unint64_t v9[6];

  v9[5] = *MEMORY[0x24BDAC8D0];
  v7 = 1.0 / (a2[1] - a1[1]);
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)a1 + 80))(v9);
  sub_20BF99088((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (uint64_t)v6);
  sub_20BF4C2D8((uint64_t)v9);
  (*(void (**)(unint64_t *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v8, a2);
  sub_20BF99088((pxrInternal__aapl__pxrReserved__::VtValue *)v8, (uint64_t)v9);
  sub_20BF4C2D8((uint64_t)v8);
  sub_20BF98C0C(v9, v6, (uint64_t)v8);
  sub_20BF98EC0(v8, &v7, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  a3[1] = &off_24C51E978;
  sub_20BF56B40(a3, (uint64_t)v5);
  sub_20BF5618C((uint64_t)v5);
  sub_20BF5618C((uint64_t)v8);
  sub_20BF5618C((uint64_t)v9);
  sub_20BF5618C((uint64_t)v6);
}

void sub_20BF96F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

void sub_20BF97038(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16[5];
  _BYTE v17[40];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  double v24;

  v24 = a4;
  v6 = sub_20BF58130(a1);
  v7 = *(_OWORD *)(v6 + 16);
  v21 = *(_OWORD *)v6;
  v22 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v23 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v22 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v22 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_20BF58130(a2);
  v12 = *(_OWORD *)(v11 + 16);
  v18 = *(_OWORD *)v11;
  v19 = v12;
  v13 = *(_QWORD *)(v11 + 32);
  v20 = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 - 16);
    if (*((_QWORD *)&v19 + 1))
      v14 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20BF98A04(&v24, (unint64_t *)&v18, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_20BF98A88((unint64_t *)&v21, v16, (uint64_t)v17);
  sub_20BF5618C((uint64_t)v16);
  a3[1] = &off_24C51E978;
  sub_20BF56B40(a3, (uint64_t)v17);
  sub_20BF5618C((uint64_t)v17);
  sub_20BF5618C((uint64_t)&v18);
  sub_20BF5618C((uint64_t)&v21);
}

void sub_20BF97140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C(v6 - 64);
  _Unwind_Resume(a1);
}

void sub_20BF97198(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<doubl"
          "e>>::GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF97240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9725C(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<doubl"
          "e>>::GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF97304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF97320()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
          ">>::GetLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF973C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF973E0()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
          ">>::GetRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF97484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF974A0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetLeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF97540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9755C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetRightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF975FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF97618()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetLeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF976B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF976D4()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetRightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF97774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF97790()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::GetTangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BF97834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF97850()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetTangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB0CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF978F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9790C(uint64_t result, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5)
{
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a3;
  *(_OWORD *)(result + 56) = a3[1];
  *(_OWORD *)(result + 40) = v9;
  v10 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(result + 72) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 - 16);
    if (*(_QWORD *)(result + 64))
      v11 = *(unint64_t **)(result + 64);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(result + 80) = *(_OWORD *)a4;
  *(_OWORD *)(result + 96) = v13;
  v14 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(result + 112) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 - 16);
    if (*(_QWORD *)(result + 104))
      v15 = *(unint64_t **)(result + 104);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a5;
  *(_OWORD *)(result + 136) = a5[1];
  *(_OWORD *)(result + 120) = v17;
  v18 = *((_QWORD *)a5 + 4);
  *(_QWORD *)(result + 152) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 - 16);
    if (*(_QWORD *)(result + 144))
      v19 = *(unint64_t **)(result + 144);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  return result;
}

void sub_20BF979E8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20BF5618C((uint64_t)a2 + 120);
    sub_20BF5618C((uint64_t)a2 + 80);
    sub_20BF5618C((uint64_t)a2 + 40);
    sub_20BF5618C((uint64_t)a2);
    operator delete(a2);
  }
}

_QWORD *sub_20BF97A48(_QWORD *a1, _OWORD **a2)
{
  char *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v4 = (char *)operator new(0xA0uLL);
  v5 = *a2;
  v6 = (*a2)[1];
  *(_OWORD *)v4 = **a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *((_QWORD *)v5 + 4);
  *((_QWORD *)v4 + 4) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)v4 + 3))
      v8 = (unint64_t *)*((_QWORD *)v4 + 3);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)((char *)v5 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)v5 + 56);
  *(_OWORD *)(v4 + 40) = v10;
  v11 = *((_QWORD *)v5 + 9);
  *((_QWORD *)v4 + 9) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 - 16);
    if (*((_QWORD *)v4 + 8))
      v12 = (unint64_t *)*((_QWORD *)v4 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v5[6];
  *((_OWORD *)v4 + 5) = v5[5];
  *((_OWORD *)v4 + 6) = v14;
  v15 = *((_QWORD *)v5 + 14);
  *((_QWORD *)v4 + 14) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*((_QWORD *)v4 + 13))
      v16 = (unint64_t *)*((_QWORD *)v4 + 13);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_OWORD *)((char *)v5 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)((char *)v5 + 136);
  *(_OWORD *)(v4 + 120) = v18;
  v19 = *((_QWORD *)v5 + 19);
  *((_QWORD *)v4 + 19) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 - 16);
    if (*((_QWORD *)v4 + 18))
      v20 = (unint64_t *)*((_QWORD *)v4 + 18);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *a1 = v4;
  return a1;
}

_QWORD *sub_20BF97B5C@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x1D0uLL);
  result = sub_20BF97BBC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BF97BA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF97BBC(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C5212F0;
  a1[1] = 0;
  sub_20BF97C70((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BF97BFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BF97C10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5212F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BF97C24(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5212F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF97C48(uint64_t a1)
{
  char v1;

  sub_20BF98F44((uint64_t)&v1, a1 + 24);
}

uint64_t sub_20BF97C70(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];
  char v10;

  *(_QWORD *)a1 = &unk_24C521340;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 56;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  if (a2 && a3)
  {
    sub_20BF97F9C(a1 + 56, a1 + 120, (uint64_t)a2, a3);
    sub_20BF9819C(v6);
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 152))(a2)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      sub_20BF985B0(v5, (__int128 *)(a2[2] + 40));
    }
  }
  else
  {
    v9[0] = "ts/evalCache.h";
    v9[1] = "_Init";
    v9[2] = 499;
    v9[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::VtArray<double>, true>"
            "::_Init(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::VtArray<dou"
            "ble>, INTERPOLATABLE = true]";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_20BF97DC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20BF97DE0(v2);
  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF97DE0(uint64_t a1)
{
  uint64_t i;

  for (i = 344; i != 184; i -= 40)
    sub_20BF5618C(a1 + i);
  do
  {
    sub_20BF5618C(a1 + i);
    i -= 40;
  }
  while (i != 24);
  return a1;
}

void sub_20BF97E34(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 88), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    sub_20BF98D90((unint64_t *)(a1 + 280), (uint64_t)&v16, v11);
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 32);
    v16 = *(_OWORD *)(a1 + 16);
    v17 = v12;
    v13 = *(_QWORD *)(a1 + 48);
    v18 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 - 16);
      if (*((_QWORD *)&v17 + 1))
        v14 = (unint64_t *)*((_QWORD *)&v17 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  a5[1] = &off_24C51E978;
  sub_20BF56B40(a5, (uint64_t)&v16);
  sub_20BF5618C((uint64_t)&v16);
}

void sub_20BF97EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF97F04(_QWORD *a1@<X8>)
{
  __int128 *v2;
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  v3 = v2[1];
  v7 = *v2;
  v8 = v3;
  v4 = *((_QWORD *)v2 + 4);
  v9 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 - 16);
    if (*((_QWORD *)&v8 + 1))
      v5 = (unint64_t *)*((_QWORD *)&v8 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[1] = &off_24C51E978;
  sub_20BF56B40(a1, (uint64_t)&v7);
  sub_20BF5618C((uint64_t)&v7);
}

void sub_20BF97F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF97F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  sub_20BF985B0(a2, (__int128 *)(*(_QWORD *)(a3 + 16) + 40));
  sub_20BF98668(a3, a4, (uint64_t)&v13);
  if ((__int128 *)(a2 + 40) != &v13)
  {
    sub_20BF5618C(a2 + 40);
    v10 = v14;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v10;
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)(a2 + 72) = v15;
    v15 = 0;
  }
  sub_20BF5618C((uint64_t)&v13);
  sub_20BF987CC(a3, a4, (uint64_t)&v13);
  if ((__int128 *)(a2 + 80) != &v13)
  {
    sub_20BF5618C(a2 + 80);
    v11 = v14;
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v11;
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)(a2 + 112) = v15;
    v15 = 0;
  }
  sub_20BF5618C((uint64_t)&v13);
  sub_20BF98998(a3, a4, (uint64_t)&v13);
  if ((__int128 *)(a2 + 120) != &v13)
  {
    sub_20BF5618C(a2 + 120);
    v12 = v14;
    *(_OWORD *)(a2 + 120) = v13;
    *(_OWORD *)(a2 + 136) = v12;
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)(a2 + 152) = v15;
    v15 = 0;
  }
  sub_20BF5618C((uint64_t)&v13);
}

void sub_20BF98150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF9819C(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14[5];
  uint64_t v15;
  unint64_t v16[5];
  unint64_t v17;
  unint64_t v18[5];
  unint64_t v19[5];
  unint64_t v20[5];
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)a1 * 3.0;
  v5 = v3 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  v6 = v4 + v3 * -6.0;
  v7 = *(double *)(a1 + 16);
  v8 = v5 - v2 - v7 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v8;
  v9 = (unint64_t *)(a1 + 64);
  sub_20BF985B0(a1 + 224, (__int128 *)(a1 + 64));
  v18[0] = 0xC008000000000000;
  sub_20BF98A04((double *)v18, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
  v16[0] = 0x4008000000000000;
  sub_20BF98A04((double *)v16, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  sub_20BF98A88(v20, v19, (uint64_t)&v21);
  if ((__int128 *)(a1 + 264) != &v21)
  {
    sub_20BF5618C(a1 + 264);
    v10 = v22;
    *(_OWORD *)(a1 + 264) = v21;
    *(_OWORD *)(a1 + 280) = v10;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a1 + 296) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
  sub_20BF5618C((uint64_t)v19);
  sub_20BF5618C((uint64_t)v20);
  v14[0] = 0x4008000000000000;
  sub_20BF98A04((double *)v14, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  v17 = 0xC018000000000000;
  sub_20BF98A04((double *)&v17, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  sub_20BF98A88(v19, v18, (uint64_t)v20);
  v15 = 0x4008000000000000;
  sub_20BF98A04((double *)&v15, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_20BF98A88(v20, v16, (uint64_t)&v21);
  if ((__int128 *)(a1 + 304) != &v21)
  {
    sub_20BF5618C(a1 + 304);
    v11 = v22;
    *(_OWORD *)(a1 + 304) = v21;
    *(_OWORD *)(a1 + 320) = v11;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a1 + 336) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
  sub_20BF5618C((uint64_t)v16);
  sub_20BF5618C((uint64_t)v20);
  sub_20BF5618C((uint64_t)v18);
  sub_20BF5618C((uint64_t)v19);
  v17 = 0xBFF0000000000000;
  sub_20BF98A04((double *)&v17, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  v15 = 0x4008000000000000;
  sub_20BF98A04((double *)&v15, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_20BF98A88(v18, v16, (uint64_t)v19);
  v13 = 0xC008000000000000;
  sub_20BF98A04((double *)&v13, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
  sub_20BF98A88(v19, v14, (uint64_t)v20);
  sub_20BF98A88(v20, (unint64_t *)(a1 + 184), (uint64_t)&v21);
  if ((__int128 *)(a1 + 344) != &v21)
  {
    sub_20BF5618C(a1 + 344);
    v12 = v22;
    *(_OWORD *)(a1 + 344) = v21;
    *(_OWORD *)(a1 + 360) = v12;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a1 + 376) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
  sub_20BF5618C((uint64_t)v20);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF5618C((uint64_t)v19);
  sub_20BF5618C((uint64_t)v16);
  sub_20BF5618C((uint64_t)v18);
}

void sub_20BF9845C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20BF5618C(v27 - 112);
  sub_20BF5618C(v27 - 152);
  sub_20BF5618C((uint64_t)&a10);
  sub_20BF5618C((uint64_t)&a27);
  sub_20BF5618C((uint64_t)&a16);
  sub_20BF5618C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF985B0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20BF9864C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF98668(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15[5];
  unint64_t v16[5];
  uint64_t v17;

  v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    v17 = 0x3FD5555555555555;
    v14 = 0x4000000000000000;
    sub_20BF98A04((double *)&v14, (unint64_t *)(*(_QWORD *)(a1 + 16) + 40), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15);
    if (*(_BYTE *)(a2 + 68))
      v8 = *(unint64_t **)(a2 + 16);
    else
      v8 = (unint64_t *)(*(_QWORD *)(a2 + 16) + 40);
    sub_20BF98A88(v15, v8, (uint64_t)v16);
    sub_20BF98A04((double *)&v17, v16, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
    sub_20BF5618C((uint64_t)v16);
    sub_20BF5618C((uint64_t)v15);
  }
  else if (v4 == 2)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = (unint64_t *)(v5 + 40);
    sub_20BF98A04((double *)(a1 + 56), (unint64_t *)(v5 + 120), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
    sub_20BF98A88(v6, v16, a3);
    sub_20BF5618C((uint64_t)v16);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_OWORD *)(v9 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(a3 + 16) = v10;
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(a3 + 32) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 - 16);
      if (*(_QWORD *)(a3 + 24))
        v12 = *(unint64_t **)(a3 + 24);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
}

void sub_20BF98788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF987CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21[5];
  unint64_t v22[5];
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 64);
    if (v5 == 1)
      goto LABEL_14;
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(a2 + 68))
        v7 = *(unint64_t **)(a2 + 16);
      else
        v7 = (unint64_t *)(v6 + 40);
      sub_20BF98A04((double *)(a2 + 48), (unint64_t *)(v6 + 80), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22);
      sub_20BF98C0C(v7, v22, a3);
      sub_20BF5618C((uint64_t)v22);
      return;
    }
    if (v4 == 1)
    {
LABEL_14:
      v23 = 0x3FD5555555555555;
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 40);
      v20 = 0x4000000000000000;
      if (*(_BYTE *)(a2 + 68))
        v14 = *(unint64_t **)(a2 + 16);
      else
        v14 = (unint64_t *)(*(_QWORD *)(a2 + 16) + 40);
      sub_20BF98A04((double *)&v20, v14, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
      sub_20BF98A88(v13, v21, (uint64_t)v22);
      sub_20BF98A04((double *)&v23, v22, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      sub_20BF5618C((uint64_t)v22);
      sub_20BF5618C((uint64_t)v21);
    }
    else
    {
      if (*(_BYTE *)(a2 + 68))
        v15 = *(_QWORD *)(a2 + 16);
      else
        v15 = *(_QWORD *)(a2 + 16) + 40;
      v16 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v15;
      *(_OWORD *)(a3 + 16) = v16;
      v17 = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(a3 + 32) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 - 16);
        if (*(_QWORD *)(a3 + 24))
          v18 = *(unint64_t **)(a3 + 24);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_OWORD *)(v8 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(a3 + 16) = v9;
    v10 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(a3 + 32) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 - 16);
      if (*(_QWORD *)(a3 + 24))
        v11 = *(unint64_t **)(a3 + 24);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

void sub_20BF98950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF98998@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_DWORD *)(result + 64))
  {
    if (*(_BYTE *)(a2 + 68))
      v3 = *(_QWORD *)(a2 + 16);
    else
      v3 = *(_QWORD *)(a2 + 16) + 40;
    v4 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 16) = v4;
    v5 = *(_QWORD *)(v3 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_OWORD *)(v6 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(a3 + 16) = v7;
    v5 = *(_QWORD *)(v6 + 72);
  }
  *(_QWORD *)(a3 + 32) = v5;
  if (v5)
  {
    v8 = *(unint64_t **)(a3 + 24);
    v9 = (unint64_t *)(v5 - 16);
    if (!v8)
      v8 = v9;
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
  }
  return result;
}

double sub_20BF98A04@<D0>(double *a1@<X0>, unint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  double *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  double result;
  double *v11;
  uint64_t v12;
  double v13;

  sub_20BF577E4((uint64_t)a3, *a2);
  v6 = (double *)a2[4];
  v7 = *a2;
  sub_20BF57AE4(a3, v8, v9);
  if (v7)
  {
    v11 = (double *)*((_QWORD *)a3 + 4);
    v12 = 8 * v7;
    do
    {
      v13 = *v6++;
      result = *a1 * v13;
      *v11++ = result;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void sub_20BF98A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF98A88(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  double v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  _QWORD v29[4];
  char v30;

  v6 = *a1;
  v7 = *a2;
  v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), v8 = *a1, v9))
  {
    sub_20BF577E4(a3, v8);
    v12 = pxrInternal__aapl__pxrReserved__::VtZero<double>();
    if (v6)
    {
      v13 = (double *)a1[4];
      v14 = *a1;
      if (v7)
      {
        v15 = (double *)a2[4];
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v16 = *(double **)(a3 + 32);
          v17 = 8 * v14;
          do
          {
            v18 = *v13++;
            v19 = v18;
            v20 = *v15++;
            *v16++ = v19 + v20;
            v17 -= 8;
          }
          while (v17);
        }
      }
      else
      {
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v26 = *(double **)(a3 + 32);
          v27 = 8 * v14;
          do
          {
            v28 = *v13++;
            *v26++ = v12 + v28;
            v27 -= 8;
          }
          while (v27);
        }
      }
    }
    else
    {
      v21 = (double *)a2[4];
      v22 = *a2;
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v22)
      {
        v23 = *(double **)(a3 + 32);
        v24 = 8 * v22;
        do
        {
          v25 = *v21++;
          *v23++ = v12 + v25;
          v24 -= 8;
        }
        while (v24);
      }
    }
  }
  else
  {
    v29[0] = "vt/array.h";
    v29[1] = "operator+";
    v29[2] = 1042;
    v29[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator+(const VtArray<T> &, const VtArray<T> &) [T = double]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "+");
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_20BF98BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF98C0C(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  double v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  _QWORD v29[4];
  char v30;

  v6 = *a1;
  v7 = *a2;
  v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), v8 = *a1, v9))
  {
    sub_20BF577E4(a3, v8);
    v12 = pxrInternal__aapl__pxrReserved__::VtZero<double>();
    if (v6)
    {
      v13 = (double *)a1[4];
      v14 = *a1;
      if (v7)
      {
        v15 = (double *)a2[4];
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v16 = *(double **)(a3 + 32);
          v17 = 8 * v14;
          do
          {
            v18 = *v13++;
            v19 = v18;
            v20 = *v15++;
            *v16++ = v19 - v20;
            v17 -= 8;
          }
          while (v17);
        }
      }
      else
      {
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v26 = *(double **)(a3 + 32);
          v27 = 8 * v14;
          do
          {
            v28 = *v13++;
            *v26++ = v28 - v12;
            v27 -= 8;
          }
          while (v27);
        }
      }
    }
    else
    {
      v21 = (double *)a2[4];
      v22 = *a2;
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v22)
      {
        v23 = *(double **)(a3 + 32);
        v24 = 8 * v22;
        do
        {
          v25 = *v21++;
          *v23++ = v12 - v25;
          v24 -= 8;
        }
        while (v24);
      }
    }
  }
  else
  {
    v29[0] = "vt/array.h";
    v29[1] = "operator-";
    v29[2] = 1043;
    v29[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator-(const VtArray<T> &, const VtArray<T> &) [T = double]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "-");
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_20BF98D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF98D90(unint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v5[5];
  unint64_t v6[5];
  unint64_t v7[5];
  unint64_t v8[5];
  unint64_t v9[5];
  double v10;

  v10 = a3;
  sub_20BF98A04(&v10, a1 + 15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  sub_20BF98A88(v5, a1 + 10, (uint64_t)v6);
  sub_20BF98A04(&v10, v6, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
  sub_20BF98A88(v7, a1 + 5, (uint64_t)v8);
  sub_20BF98A04(&v10, v8, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v9);
  sub_20BF98A88(v9, a1, a2);
  sub_20BF5618C((uint64_t)v9);
  sub_20BF5618C((uint64_t)v8);
  sub_20BF5618C((uint64_t)v7);
  sub_20BF5618C((uint64_t)v6);
  sub_20BF5618C((uint64_t)v5);
}

void sub_20BF98E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_20BF5618C(v19 - 64);
  sub_20BF5618C(v19 - 104);
  sub_20BF5618C((uint64_t)&a19);
  sub_20BF5618C((uint64_t)&a14);
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20BF98EC0@<D0>(unint64_t *a1@<X0>, double *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  double *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  double result;
  double *v11;
  uint64_t v12;
  double v13;

  sub_20BF577E4((uint64_t)a3, *a1);
  v6 = (double *)a1[4];
  v7 = *a1;
  sub_20BF57AE4(a3, v8, v9);
  if (v7)
  {
    v11 = (double *)*((_QWORD *)a3 + 4);
    v12 = 8 * v7;
    do
    {
      v13 = *v6++;
      result = v13 * *a2;
      *v11++ = result;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void sub_20BF98F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF98F44(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C(a2 + i);
  do
  {
    sub_20BF5618C(a2 + i);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C(a2 + 16);
}

uint64_t sub_20BF98FA0(uint64_t a1)
{
  uint64_t i;

  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C(a1 + i);
  do
  {
    sub_20BF5618C(a1 + i);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C(a1 + 16);
  return a1;
}

std::type_info *sub_20BF99000(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF57C2C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51DD80, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BF99088@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((sub_20BF57C2C(a1) & 1) != 0)
    return sub_20BF99110(a1, a2);
  result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF58198, (uint64_t)&stru_24C51DD80);
  v5 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a2 + 24))
      v7 = *(unint64_t **)(a2 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_20BF99110@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF580A0(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20BF991A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF991C0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BF56C48(a2);
  return sub_20BF991EC(a1, v3);
}

_QWORD *sub_20BF991EC(_QWORD *a1, __int128 *a2)
{
  __int128 *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *a1 = &unk_24C521378;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  sub_20BF9790C((uint64_t)&v11, (uint64_t)a2, a2, (uint64_t)v4, v5);
  v6 = operator new(0xA0uLL);
  v7 = v12;
  *v6 = v11;
  v6[1] = v7;
  v11 = 0u;
  v12 = 0u;
  *((_QWORD *)v6 + 4) = v13;
  v13 = 0;
  *(_OWORD *)((char *)v6 + 40) = v14;
  *(_OWORD *)((char *)v6 + 56) = v15;
  v14 = 0u;
  v15 = 0u;
  *((_QWORD *)v6 + 9) = v16;
  v16 = 0;
  v8 = v18;
  v6[5] = v17;
  v6[6] = v8;
  v17 = 0u;
  v18 = 0u;
  *((_QWORD *)v6 + 14) = v19;
  v19 = 0;
  v9 = v20;
  *(_OWORD *)((char *)v6 + 136) = v21;
  *(_OWORD *)((char *)v6 + 120) = v9;
  v21 = 0u;
  v20 = 0u;
  *((_QWORD *)v6 + 19) = v22;
  v22 = 0;
  a1[2] = v6;
  sub_20BF5618C((uint64_t)&v20);
  sub_20BF5618C((uint64_t)&v17);
  sub_20BF5618C((uint64_t)&v14);
  sub_20BF5618C((uint64_t)&v11);
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

void sub_20BF99320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF99334((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF99334(uint64_t a1)
{
  sub_20BF5618C(a1 + 120);
  sub_20BF5618C(a1 + 80);
  sub_20BF5618C(a1 + 40);
  sub_20BF5618C(a1);
  return a1;
}

_QWORD *sub_20BF99384(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *a1 = &unk_24C521378;
  v4 = (void *)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BF9A744((uint64_t)v2, v3);
  return a1;
}

void sub_20BF993C4(_QWORD *__p)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *__p = &unk_24C521378;
  v4 = (void *)__p[2];
  v2 = __p + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BF9A744((uint64_t)v2, v3);
  operator delete(__p);
}

__n128 sub_20BF99404(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C521378;
  sub_20BF97A48((_QWORD *)(a2 + 16), (_OWORD **)(a1 + 16));
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BF99458@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BF9A7A4(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_20BF994A0(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  uint64_t i;
  _BYTE v10[16];
  uint64_t v11;

  sub_20BF9A8B8((uint64_t)v10, a1, a2);
  sub_20BF9AA7C((uint64_t)v10, v6, v7, v8, a3, a4);
  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C((uint64_t)&v10[i]);
  do
  {
    sub_20BF5618C((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C((uint64_t)&v11);
}

void sub_20BF9953C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF9BB8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF99558(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t i;
  _BYTE v10[16];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  sub_20BF9A8B8((uint64_t)v10, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  v5 = v4[1];
  v12 = *v4;
  v13 = v5;
  v6 = *((_QWORD *)v4 + 4);
  v14 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v13 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v13 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = &off_24C51E808;
  sub_20BF56B40(a3, (uint64_t)&v12);
  sub_20BF5618C((uint64_t)&v12);
  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C((uint64_t)&v10[i]);
  do
  {
    sub_20BF5618C((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C((uint64_t)&v11);
}

void sub_20BF99638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF5618C(v2 - 80);
  sub_20BF9BB8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF99668(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
            ">::SetKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF996FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9971C(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BF9984C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BF99880@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16) + 40;
  a2[1] = &off_24C51E808;
  return sub_20BF56B40(a2, v2);
}

uint64_t sub_20BF9989C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  __int128 *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF9BBEC(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v20, v4);
  if (v20[1])
  {
    v8 = (__int128 *)sub_20BF56C48(v5);
    sub_20BF9B1F8(a1[2] + 40, v8);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    v18[2] = 667;
    v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float"
             ">>::SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  return sub_20BF4C2D8((uint64_t)v20);
}

void sub_20BF99A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BF99A5C@<X0>(_QWORD *a1@<X8>)
{
  __int128 *v2;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  a1[1] = &off_24C51E808;
  return sub_20BF56B40(a1, (uint64_t)v2);
}

char *sub_20BF99A90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 68))
    v2 = *(_QWORD *)(a1 + 16);
  else
    v2 = *(_QWORD *)(a1 + 16) + 40;
  a2[1] = &off_24C51E808;
  return sub_20BF56B40(a2, v2);
}

void sub_20BF99AB8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  __int128 *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BF9BBEC(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
    if (v22[1])
    {
      v8 = (__int128 *)sub_20BF56C48(v5);
      sub_20BF9B1F8(a1[2], v8);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(uint64_t *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v17 = "ts/data.h";
      v18 = "SetLeftValue";
      v19 = 737;
      v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
            ">::SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
      v9 = v16;
      v10 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v11 = v15;
      if (v9 < 0)
        v11 = v10;
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    sub_20BF4C2D8((uint64_t)v22);
  }
  else
  {
    v17 = "ts/data.h";
    v18 = "SetLeftValue";
    v19 = 725;
    v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF99C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

void sub_20BF99CC4(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v5[40];
  unint64_t v6[5];
  double v7;
  unint64_t v8[5];
  unint64_t v9[6];

  v9[5] = *MEMORY[0x24BDAC8D0];
  v7 = 1.0 / (a2[1] - a1[1]);
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)a1 + 80))(v9);
  sub_20BF9BC74((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (uint64_t)v6);
  sub_20BF4C2D8((uint64_t)v9);
  (*(void (**)(unint64_t *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v8, a2);
  sub_20BF9BC74((pxrInternal__aapl__pxrReserved__::VtValue *)v8, (uint64_t)v9);
  sub_20BF4C2D8((uint64_t)v8);
  sub_20BF9B7F0(v9, v6, (uint64_t)v8);
  sub_20BF9BAA4(v8, &v7, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  a3[1] = &off_24C51E808;
  sub_20BF56B40(a3, (uint64_t)v5);
  sub_20BF5618C((uint64_t)v5);
  sub_20BF5618C((uint64_t)v8);
  sub_20BF5618C((uint64_t)v9);
  sub_20BF5618C((uint64_t)v6);
}

void sub_20BF99DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

void sub_20BF99E70(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16[5];
  _BYTE v17[40];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  double v24;

  v24 = a4;
  v6 = sub_20BF56C48(a1);
  v7 = *(_OWORD *)(v6 + 16);
  v21 = *(_OWORD *)v6;
  v22 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v23 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v22 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v22 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_20BF56C48(a2);
  v12 = *(_OWORD *)(v11 + 16);
  v18 = *(_OWORD *)v11;
  v19 = v12;
  v13 = *(_QWORD *)(v11 + 32);
  v20 = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 - 16);
    if (*((_QWORD *)&v19 + 1))
      v14 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_20BF9B5E0(&v24, (unint64_t *)&v18, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_20BF9B66C((unint64_t *)&v21, v16, (uint64_t)v17);
  sub_20BF5618C((uint64_t)v16);
  a3[1] = &off_24C51E808;
  sub_20BF56B40(a3, (uint64_t)v17);
  sub_20BF5618C((uint64_t)v17);
  sub_20BF5618C((uint64_t)&v18);
  sub_20BF5618C((uint64_t)&v21);
}

void sub_20BF99F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C(v6 - 64);
  _Unwind_Resume(a1);
}

void sub_20BF99FD0(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float"
          ">>::GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF9A078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A094(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float"
          ">>::GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF9A13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF9A158()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
          ">::GetLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF9A1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF9A218()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
          ">::GetRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF9A2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A2D8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetLeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9A378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A394()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetRightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9A434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A450()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetLeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9A4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A50C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetRightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9A5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9A5C8()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":GetTangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BF9A66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A688()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetTangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB2EB6CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9A728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9A744(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20BF5618C((uint64_t)a2 + 120);
    sub_20BF5618C((uint64_t)a2 + 80);
    sub_20BF5618C((uint64_t)a2 + 40);
    sub_20BF5618C((uint64_t)a2);
    operator delete(a2);
  }
}

_QWORD *sub_20BF9A7A4@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x1D0uLL);
  result = sub_20BF9A804(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BF9A7F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF9A804(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C5214C0;
  a1[1] = 0;
  sub_20BF9A8B8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BF9A844(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9A858(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5214C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BF9A86C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5214C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20BF9A890(uint64_t a1)
{
  char v1;

  sub_20BF9BB30((uint64_t)&v1, a1 + 24);
}

uint64_t sub_20BF9A8B8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];
  char v10;

  *(_QWORD *)a1 = &unk_24C521510;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 56;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  if (a2 && a3)
  {
    sub_20BF9ABE4(a1 + 56, a1 + 120, (uint64_t)a2, a3);
    sub_20BF9ADE4(v6);
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 152))(a2)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      sub_20BF9B1F8(v5, (__int128 *)(a2[2] + 40));
    }
  }
  else
  {
    v9[0] = "ts/evalCache.h";
    v9[1] = "_Init";
    v9[2] = 499;
    v9[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::VtArray<float>, true>:"
            ":_Init(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::VtArray<floa"
            "t>, INTERPOLATABLE = true]";
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_20BF9AA08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20BF9AA28(v2);
  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF9AA28(uint64_t a1)
{
  uint64_t i;

  for (i = 344; i != 184; i -= 40)
    sub_20BF5618C(a1 + i);
  do
  {
    sub_20BF5618C(a1 + i);
    i -= 40;
  }
  while (i != 24);
  return a1;
}

void sub_20BF9AA7C(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 88), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    sub_20BF9B974((unint64_t *)(a1 + 280), (uint64_t)&v16, v11);
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 32);
    v16 = *(_OWORD *)(a1 + 16);
    v17 = v12;
    v13 = *(_QWORD *)(a1 + 48);
    v18 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 - 16);
      if (*((_QWORD *)&v17 + 1))
        v14 = (unint64_t *)*((_QWORD *)&v17 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  a5[1] = &off_24C51E808;
  sub_20BF56B40(a5, (uint64_t)&v16);
  sub_20BF5618C((uint64_t)&v16);
}

void sub_20BF9AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF9AB4C(_QWORD *a1@<X8>)
{
  __int128 *v2;
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  v3 = v2[1];
  v7 = *v2;
  v8 = v3;
  v4 = *((_QWORD *)v2 + 4);
  v9 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 - 16);
    if (*((_QWORD *)&v8 + 1))
      v5 = (unint64_t *)*((_QWORD *)&v8 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[1] = &off_24C51E808;
  sub_20BF56B40(a1, (uint64_t)&v7);
  sub_20BF5618C((uint64_t)&v7);
}

void sub_20BF9ABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF9ABE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  sub_20BF9B1F8(a2, (__int128 *)(*(_QWORD *)(a3 + 16) + 40));
  sub_20BF9B2B0(a3, a4, (uint64_t)&v13);
  if ((__int128 *)(a2 + 40) != &v13)
  {
    sub_20BF5618C(a2 + 40);
    v10 = v14;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v10;
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)(a2 + 72) = v15;
    v15 = 0;
  }
  sub_20BF5618C((uint64_t)&v13);
  sub_20BF9B414(a3, a4, (uint64_t)&v13);
  if ((__int128 *)(a2 + 80) != &v13)
  {
    sub_20BF5618C(a2 + 80);
    v11 = v14;
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v11;
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)(a2 + 112) = v15;
    v15 = 0;
  }
  sub_20BF5618C((uint64_t)&v13);
  sub_20BF98998(a3, a4, (uint64_t)&v13);
  if ((__int128 *)(a2 + 120) != &v13)
  {
    sub_20BF5618C(a2 + 120);
    v12 = v14;
    *(_OWORD *)(a2 + 120) = v13;
    *(_OWORD *)(a2 + 136) = v12;
    v13 = 0u;
    v14 = 0u;
    *(_QWORD *)(a2 + 152) = v15;
    v15 = 0;
  }
  sub_20BF5618C((uint64_t)&v13);
}

void sub_20BF9AD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF9ADE4(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14[5];
  uint64_t v15;
  unint64_t v16[5];
  unint64_t v17;
  unint64_t v18[5];
  unint64_t v19[5];
  unint64_t v20[5];
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)a1 * 3.0;
  v5 = v3 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  v6 = v4 + v3 * -6.0;
  v7 = *(double *)(a1 + 16);
  v8 = v5 - v2 - v7 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v8;
  v9 = (unint64_t *)(a1 + 64);
  sub_20BF9B1F8(a1 + 224, (__int128 *)(a1 + 64));
  v18[0] = 0xC008000000000000;
  sub_20BF9B5E0((double *)v18, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
  v16[0] = 0x4008000000000000;
  sub_20BF9B5E0((double *)v16, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  sub_20BF9B66C(v20, v19, (uint64_t)&v21);
  if ((__int128 *)(a1 + 264) != &v21)
  {
    sub_20BF5618C(a1 + 264);
    v10 = v22;
    *(_OWORD *)(a1 + 264) = v21;
    *(_OWORD *)(a1 + 280) = v10;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a1 + 296) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
  sub_20BF5618C((uint64_t)v19);
  sub_20BF5618C((uint64_t)v20);
  v14[0] = 0x4008000000000000;
  sub_20BF9B5E0((double *)v14, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  v17 = 0xC018000000000000;
  sub_20BF9B5E0((double *)&v17, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  sub_20BF9B66C(v19, v18, (uint64_t)v20);
  v15 = 0x4008000000000000;
  sub_20BF9B5E0((double *)&v15, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_20BF9B66C(v20, v16, (uint64_t)&v21);
  if ((__int128 *)(a1 + 304) != &v21)
  {
    sub_20BF5618C(a1 + 304);
    v11 = v22;
    *(_OWORD *)(a1 + 304) = v21;
    *(_OWORD *)(a1 + 320) = v11;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a1 + 336) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
  sub_20BF5618C((uint64_t)v16);
  sub_20BF5618C((uint64_t)v20);
  sub_20BF5618C((uint64_t)v18);
  sub_20BF5618C((uint64_t)v19);
  v17 = 0xBFF0000000000000;
  sub_20BF9B5E0((double *)&v17, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  v15 = 0x4008000000000000;
  sub_20BF9B5E0((double *)&v15, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_20BF9B66C(v18, v16, (uint64_t)v19);
  v13 = 0xC008000000000000;
  sub_20BF9B5E0((double *)&v13, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
  sub_20BF9B66C(v19, v14, (uint64_t)v20);
  sub_20BF9B66C(v20, (unint64_t *)(a1 + 184), (uint64_t)&v21);
  if ((__int128 *)(a1 + 344) != &v21)
  {
    sub_20BF5618C(a1 + 344);
    v12 = v22;
    *(_OWORD *)(a1 + 344) = v21;
    *(_OWORD *)(a1 + 360) = v12;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a1 + 376) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
  sub_20BF5618C((uint64_t)v20);
  sub_20BF5618C((uint64_t)v14);
  sub_20BF5618C((uint64_t)v19);
  sub_20BF5618C((uint64_t)v16);
  sub_20BF5618C((uint64_t)v18);
}

void sub_20BF9B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20BF5618C(v27 - 112);
  sub_20BF5618C(v27 - 152);
  sub_20BF5618C((uint64_t)&a10);
  sub_20BF5618C((uint64_t)&a27);
  sub_20BF5618C((uint64_t)&a16);
  sub_20BF5618C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF9B1F8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_20BF5618C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_20BF5618C((uint64_t)&v9);
  }
  return a1;
}

void sub_20BF9B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF9B2B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15[5];
  unint64_t v16[5];
  uint64_t v17;

  v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    v17 = 0x3FD5555555555555;
    v14 = 0x4000000000000000;
    sub_20BF9B5E0((double *)&v14, (unint64_t *)(*(_QWORD *)(a1 + 16) + 40), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15);
    if (*(_BYTE *)(a2 + 68))
      v8 = *(unint64_t **)(a2 + 16);
    else
      v8 = (unint64_t *)(*(_QWORD *)(a2 + 16) + 40);
    sub_20BF9B66C(v15, v8, (uint64_t)v16);
    sub_20BF9B5E0((double *)&v17, v16, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
    sub_20BF5618C((uint64_t)v16);
    sub_20BF5618C((uint64_t)v15);
  }
  else if (v4 == 2)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = (unint64_t *)(v5 + 40);
    sub_20BF9B5E0((double *)(a1 + 56), (unint64_t *)(v5 + 120), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
    sub_20BF9B66C(v6, v16, a3);
    sub_20BF5618C((uint64_t)v16);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_OWORD *)(v9 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(a3 + 16) = v10;
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(a3 + 32) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 - 16);
      if (*(_QWORD *)(a3 + 24))
        v12 = *(unint64_t **)(a3 + 24);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
}

void sub_20BF9B3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va1);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF9B414(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21[5];
  unint64_t v22[5];
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 64);
    if (v5 == 1)
      goto LABEL_14;
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(a2 + 68))
        v7 = *(unint64_t **)(a2 + 16);
      else
        v7 = (unint64_t *)(v6 + 40);
      sub_20BF9B5E0((double *)(a2 + 48), (unint64_t *)(v6 + 80), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22);
      sub_20BF9B7F0(v7, v22, a3);
      sub_20BF5618C((uint64_t)v22);
      return;
    }
    if (v4 == 1)
    {
LABEL_14:
      v23 = 0x3FD5555555555555;
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 40);
      v20 = 0x4000000000000000;
      if (*(_BYTE *)(a2 + 68))
        v14 = *(unint64_t **)(a2 + 16);
      else
        v14 = (unint64_t *)(*(_QWORD *)(a2 + 16) + 40);
      sub_20BF9B5E0((double *)&v20, v14, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
      sub_20BF9B66C(v13, v21, (uint64_t)v22);
      sub_20BF9B5E0((double *)&v23, v22, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      sub_20BF5618C((uint64_t)v22);
      sub_20BF5618C((uint64_t)v21);
    }
    else
    {
      if (*(_BYTE *)(a2 + 68))
        v15 = *(_QWORD *)(a2 + 16);
      else
        v15 = *(_QWORD *)(a2 + 16) + 40;
      v16 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v15;
      *(_OWORD *)(a3 + 16) = v16;
      v17 = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(a3 + 32) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 - 16);
        if (*(_QWORD *)(a3 + 24))
          v18 = *(unint64_t **)(a3 + 24);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_OWORD *)(v8 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(a3 + 16) = v9;
    v10 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(a3 + 32) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 - 16);
      if (*(_QWORD *)(a3 + 24))
        v11 = *(unint64_t **)(a3 + 24);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

void sub_20BF9B598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BF9B5E0(double *a1@<X0>, unint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  float *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  float *v10;
  double v11;
  uint64_t v12;
  float v13;
  float v14;

  sub_20BF56024((uint64_t)a3, *a2);
  v6 = (float *)a2[4];
  v7 = *a2;
  sub_20BF564A8(a3, v8, v9);
  if (v7)
  {
    v10 = (float *)*((_QWORD *)a3 + 4);
    v11 = *a1;
    v12 = 4 * v7;
    do
    {
      v13 = *v6++;
      v14 = v11 * v13;
      *v10++ = v14;
      v12 -= 4;
    }
    while (v12);
  }
}

void sub_20BF9B654(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9B66C(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  float v12;
  float *v13;
  unint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  float *v26;
  uint64_t v27;
  float v28;
  _QWORD v29[4];
  char v30;

  v6 = *a1;
  v7 = *a2;
  v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), v8 = *a1, v9))
  {
    sub_20BF56024(a3, v8);
    v12 = pxrInternal__aapl__pxrReserved__::VtZero<float>();
    if (v6)
    {
      v13 = (float *)a1[4];
      v14 = *a1;
      if (v7)
      {
        v15 = (float *)a2[4];
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v16 = *(float **)(a3 + 32);
          v17 = 4 * v14;
          do
          {
            v18 = *v13++;
            v19 = v18;
            v20 = *v15++;
            *v16++ = v19 + v20;
            v17 -= 4;
          }
          while (v17);
        }
      }
      else
      {
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v26 = *(float **)(a3 + 32);
          v27 = 4 * v14;
          do
          {
            v28 = *v13++;
            *v26++ = v12 + v28;
            v27 -= 4;
          }
          while (v27);
        }
      }
    }
    else
    {
      v21 = (float *)a2[4];
      v22 = *a2;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v22)
      {
        v23 = *(float **)(a3 + 32);
        v24 = 4 * v22;
        do
        {
          v25 = *v21++;
          *v23++ = v12 + v25;
          v24 -= 4;
        }
        while (v24);
      }
    }
  }
  else
  {
    v29[0] = "vt/array.h";
    v29[1] = "operator+";
    v29[2] = 1042;
    v29[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator+(const VtArray<T> &, const VtArray<T> &) [T = float]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "+");
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_20BF9B7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9B7F0(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  float v12;
  float *v13;
  unint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  float *v26;
  uint64_t v27;
  float v28;
  _QWORD v29[4];
  char v30;

  v6 = *a1;
  v7 = *a2;
  v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), v8 = *a1, v9))
  {
    sub_20BF56024(a3, v8);
    v12 = pxrInternal__aapl__pxrReserved__::VtZero<float>();
    if (v6)
    {
      v13 = (float *)a1[4];
      v14 = *a1;
      if (v7)
      {
        v15 = (float *)a2[4];
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v16 = *(float **)(a3 + 32);
          v17 = 4 * v14;
          do
          {
            v18 = *v13++;
            v19 = v18;
            v20 = *v15++;
            *v16++ = v19 - v20;
            v17 -= 4;
          }
          while (v17);
        }
      }
      else
      {
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          v26 = *(float **)(a3 + 32);
          v27 = 4 * v14;
          do
          {
            v28 = *v13++;
            *v26++ = v28 - v12;
            v27 -= 4;
          }
          while (v27);
        }
      }
    }
    else
    {
      v21 = (float *)a2[4];
      v22 = *a2;
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v22)
      {
        v23 = *(float **)(a3 + 32);
        v24 = 4 * v22;
        do
        {
          v25 = *v21++;
          *v23++ = v12 - v25;
          v24 -= 4;
        }
        while (v24);
      }
    }
  }
  else
  {
    v29[0] = "vt/array.h";
    v29[1] = "operator-";
    v29[2] = 1043;
    v29[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator-(const VtArray<T> &, const VtArray<T> &) [T = float]";
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "-");
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_20BF9B95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9B974(unint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v5[5];
  unint64_t v6[5];
  unint64_t v7[5];
  unint64_t v8[5];
  unint64_t v9[5];
  double v10;

  v10 = a3;
  sub_20BF9B5E0(&v10, a1 + 15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  sub_20BF9B66C(v5, a1 + 10, (uint64_t)v6);
  sub_20BF9B5E0(&v10, v6, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
  sub_20BF9B66C(v7, a1 + 5, (uint64_t)v8);
  sub_20BF9B5E0(&v10, v8, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v9);
  sub_20BF9B66C(v9, a1, a2);
  sub_20BF5618C((uint64_t)v9);
  sub_20BF5618C((uint64_t)v8);
  sub_20BF5618C((uint64_t)v7);
  sub_20BF5618C((uint64_t)v6);
  sub_20BF5618C((uint64_t)v5);
}

void sub_20BF9BA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_20BF5618C(v19 - 64);
  sub_20BF5618C(v19 - 104);
  sub_20BF5618C((uint64_t)&a19);
  sub_20BF5618C((uint64_t)&a14);
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20BF9BAA4(unint64_t *a1@<X0>, double *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  float *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  float *v10;
  double v11;
  uint64_t v12;
  float v13;
  float v14;

  sub_20BF56024((uint64_t)a3, *a1);
  v6 = (float *)a1[4];
  v7 = *a1;
  sub_20BF564A8(a3, v8, v9);
  if (v7)
  {
    v10 = (float *)*((_QWORD *)a3 + 4);
    v11 = *a2;
    v12 = 4 * v7;
    do
    {
      v13 = *v6++;
      v14 = v11 * v13;
      *v10++ = v14;
      v12 -= 4;
    }
    while (v12);
  }
}

void sub_20BF9BB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9BB30(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C(a2 + i);
  do
  {
    sub_20BF5618C(a2 + i);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C(a2 + 16);
}

uint64_t sub_20BF9BB8C(uint64_t a1)
{
  uint64_t i;

  for (i = 400; i != 240; i -= 40)
    sub_20BF5618C(a1 + i);
  do
  {
    sub_20BF5618C(a1 + i);
    i -= 40;
  }
  while (i != 80);
  sub_20BF5618C(a1 + 16);
  return a1;
}

std::type_info *sub_20BF9BBEC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF565F0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51DD98, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BF9BC74@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((sub_20BF565F0(a1) & 1) != 0)
    return sub_20BF9BCFC(a1, a2);
  result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BF56D60, (uint64_t)&stru_24C51DD98);
  v5 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a2 + 24))
      v7 = *(unint64_t **)(a2 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_20BF9BCFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_20BF56BB8(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20BF9BD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF9BDAC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BF9BDD8(a2);
  return sub_20BF9BE40(a1, v3);
}

uint64_t sub_20BF9BDD8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BF9D818(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2d>::Invoke, (uint64_t)&stru_24C51C110);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BF9BE40(_QWORD *a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *a1 = &unk_24C521548;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  v8 = *a2;
  v9 = *a2;
  v10 = *(_OWORD *)v4;
  v11 = *(_OWORD *)v5;
  v6 = operator new(0x40uLL);
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v10;
  v6[3] = v11;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BF9BEC8(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C521548;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF9BF08(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C521548;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BF9BF48(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C521548;
  v4 = operator new(0x40uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  *(_QWORD *)(a2 + 16) = v4;
  v9 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v9;
  return result;
}

double sub_20BF9BFB0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BF9D1A4(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

unsigned int *sub_20BF9BFF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  float64x2_t v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  float64x2_t v17;
  _BYTE v18[16];
  float64x2_t v19;
  float64x2_t v20[10];

  sub_20BF9D298((uint64_t)v18, a1, a2);
  if (v18[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v20, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = vaddq_f64(v20[6], vmulq_n_f64(vaddq_f64(v20[7], vmulq_n_f64(vaddq_f64(v20[8], vmulq_n_f64(v20[9], v12)), v12)), v12));
  }
  else
  {
    v13 = v19;
  }
  v17 = v13;
  a3[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)result = v17;
  v15 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  return result;
}

char *sub_20BF9C0D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  sub_20BF9D298((uint64_t)&v10, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  v5 = *v4;
  v6 = v4[1];
  a3[1] = (char *)&off_24C51DF68 + 2;
  result = (char *)operator new(0x18uLL);
  *(_QWORD *)result = v5;
  *((_QWORD *)result + 1) = v6;
  v8 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a3 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

void sub_20BF9C154(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF9C1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9C208(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BF9C338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20BF9C36C@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)result = *(_OWORD *)(v3 + 16);
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20BF9C3C8(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF9D790(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    *(_OWORD *)(a1[2] + 16) = *(_OWORD *)sub_20BF9BDD8(v5);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BF9C534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BF9C584@<X0>(unsigned int **a1@<X8>)
{
  uint64_t *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  a1[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)result = *(_OWORD *)v2;
  v4 = result + 4;
  atomic_store(0, result + 4);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

unsigned int *sub_20BF9C5E4@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_OWORD **)(a1 + 16);
  else
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 16);
  a2[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20BF9C650(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BF9D790(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v21, v4);
    if (v21[1])
    {
      *(_OWORD *)a1[2] = *(_OWORD *)sub_20BF9BDD8(v5);
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v16 = "ts/data.h";
      v17 = "SetLeftValue";
      v18 = 737;
      v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      v8 = v15;
      v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v10 = v14;
      if (v8 < 0)
        v10 = v9;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    sub_20BF4C2D8((uint64_t)v21);
  }
  else
  {
    v16 = "ts/data.h";
    v17 = "SetLeftValue";
    v18 = 725;
    v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF9C80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BF9C85C@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char *result;
  double v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v17);
  v7 = sub_20BF9D850((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  v9 = v8;
  sub_20BF4C2D8((uint64_t)v17);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v17, a2);
  v10 = sub_20BF9D850((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  v12 = v11;
  sub_20BF4C2D8((uint64_t)v17);
  a3[1] = (char *)&off_24C51DF68 + 2;
  result = (char *)operator new(0x18uLL);
  v14 = 1.0 / (v5 - v6);
  *(double *)result = v14 * (v10 - v7);
  *((double *)result + 1) = v14 * (v12 - v9);
  v15 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a3 = result;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  return result;
}

void sub_20BF9C978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BF9C998@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, unsigned int **a3@<X8>, double a4@<D0>)
{
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  float64x2_t v9;
  float64x2_t v11;

  v9 = *(float64x2_t *)sub_20BF9BDD8(a1);
  v11 = vaddq_f64(v9, vmulq_n_f64(*(float64x2_t *)sub_20BF9BDD8(a2), a4));
  a3[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)result = v11;
  v7 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

void sub_20BF9CA30(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF9CAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9CAF4(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF9CB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF9CBB8()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF9CC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF9CC78()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF9CD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9CD38()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9CDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9CDF4()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9CE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9CEB0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9CF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9CF6C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9D00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9D028()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BF9D0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9D0E8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9D188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF9D1A4@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xF8uLL);
  result = sub_20BF9D204(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BF9D1F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF9D204(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C521690;
  a1[1] = 0;
  sub_20BF9D298((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BF9D244(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9D258(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BF9D26C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BF9D298(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v6;
  _QWORD v8[4];
  char v9;

  *(_QWORD *)a1 = &unk_24C5216E0;
  if (a2 && a3)
  {
    sub_20BF9D4A8(a1 + 32, a1 + 96, (uint64_t)a2, a3);
    v6 = sub_20BF9D5B4(a1 + 32);
    if ((*(unsigned int (**)(_QWORD *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2[2] + 16);
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    v8[2] = 499;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec2d, true>::_Init("
            "const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, INTERPOLATABLE = true]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

unsigned int *sub_20BF9D38C@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, unsigned int **a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  float64x2_t v12;
  unsigned int *result;
  unsigned int *v14;
  unsigned int v15;
  float64x2_t v16;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 64), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = vaddq_f64(*(float64x2_t *)(a1 + 160), vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 176), vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), vmulq_n_f64(*(float64x2_t *)(a1 + 208), v11)), v11)), v11));
  }
  else
  {
    v12 = *(float64x2_t *)(a1 + 16);
  }
  v16 = v12;
  a5[1] = (unsigned int *)((char *)&off_24C51DF68 + 2);
  result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)result = v16;
  v14 = result + 4;
  atomic_store(0, result + 4);
  *a5 = result;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  return result;
}

char *sub_20BF9D444@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  v3 = *v2;
  v4 = v2[1];
  a1[1] = (char *)&off_24C51DF68 + 2;
  result = (char *)operator new(0x18uLL);
  *(_QWORD *)result = v3;
  *((_QWORD *)result + 1) = v4;
  v6 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

__n128 sub_20BF9D4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16);
  *(_QWORD *)(a2 + 16) = *(_OWORD *)&sub_20BF9D66C(a3, a4);
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = *(_OWORD *)&sub_20BF9D6E4(a3, a4);
  *(_QWORD *)(a2 + 40) = v11;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v12 = *(__n128 **)(a4 + 16);
    else
      v12 = (__n128 *)(*(_QWORD *)(a4 + 16) + 16);
  }
  else
  {
    v12 = (__n128 *)(*(_QWORD *)(a3 + 16) + 16);
  }
  result = *v12;
  *(__n128 *)(a2 + 48) = *v12;
  return result;
}

double sub_20BF9D5B4(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 - v2 * 6.0;
  v6 = *(double *)(a1 + 16) * 3.0;
  v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 64);
  v8 = *(double *)(a1 + 64);
  v9 = *(double *)(a1 + 72);
  v10 = *(double *)(a1 + 80);
  v11 = *(double *)(a1 + 88);
  v12 = v10 * 3.0;
  *(double *)(a1 + 144) = v10 * 3.0 - v8 * 3.0;
  *(double *)(a1 + 152) = v11 * 3.0 - v9 * 3.0;
  v13 = v8 * 3.0 - v10 * 6.0;
  v14 = *(double *)(a1 + 104);
  v15 = *(double *)(a1 + 96) * 3.0;
  *(double *)(a1 + 160) = v13 + v15;
  *(double *)(a1 + 168) = v9 * 3.0 - v11 * 6.0 + v14 * 3.0;
  result = v11 * 3.0 - v9 - v14 * 3.0 + *(double *)(a1 + 120);
  *(double *)(a1 + 176) = v12 - v8 - v15 + *(double *)(a1 + 112);
  *(double *)(a1 + 184) = result;
  return result;
}

float64x2_t sub_20BF9D66C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16)), *(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else if (v2 == 2)
  {
    return vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 48), *(double *)(a1 + 56)), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16));
  }
  else
  {
    return *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16);
  }
}

float64x2_t sub_20BF9D6E4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    if (v3 == 1)
      return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0)), *(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0))), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
    if (v3 == 2)
      return vsubq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0)), vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 32), *(double *)(a2 + 48)));
    if (v2 == 1)
      return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0)), *(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0))), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
    else
      return *(float64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0));
  }
  else
  {
    return *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16);
  }
}

std::type_info *sub_20BF9D790(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF9D818(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C110, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BF9D818(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C110);
  else
    return 0;
}

double sub_20BF9D850(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BF9D818(a1) & 1) != 0)
    return sub_20BF9D89C((uint64_t)a1);
  else
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2d>::Invoke, (uint64_t)&stru_24C51C110);
}

double sub_20BF9D89C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(double *)sub_20BF9D8F8((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

unsigned int *sub_20BF9D8F8(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF51BB0(a1);
}

int *sub_20BF9D988(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t *v3;
  int *v4;
  int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)sub_20BF9D9F0(a2);
  *a1 = &unk_24C521718;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  v6 = *v3;
  v7 = *(_QWORD *)v4;
  v8 = *(_QWORD *)result;
  a1[2] = *v3;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  *(_QWORD *)((char *)a1 + 62) = 0;
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

uint64_t sub_20BF9D9F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BF9F188(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2f>::Invoke, (uint64_t)&stru_24C51C120);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

_QWORD *sub_20BF9DA58(_QWORD *result)
{
  *result = &unk_24C521718;
  return result;
}

__n128 sub_20BF9DA70(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C521718;
  v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v2;
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BF9DAA4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BF9EB30(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_20BF9DAEC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  unsigned __int32 v13;
  int v14;
  _BYTE v15[12];
  unsigned __int32 v16;
  int v17;
  float64x2_t v18[4];
  float32x2_t v19[4];

  sub_20BF9EC24((uint64_t)v15, a1, a2);
  if (v15[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v18, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = sub_20BF9F0C0(v19, v12).u32[0];
  }
  else
  {
    v13 = v16;
    v14 = v17;
  }
  *(_QWORD *)(a3 + 8) = (char *)&off_24C51DEB0 + 3;
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = v14;
}

double sub_20BF9DB80@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int *v4;
  double result;
  _BYTE v6[152];

  sub_20BF9EC24((uint64_t)v6, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  a3[1] = (char *)&off_24C51DEB0 + 3;
  result = *(double *)v4;
  *a3 = *(_QWORD *)v4;
  return result;
}

void sub_20BF9DBD0(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF9DC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9DC84(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BF9DDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9DDE8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = (char *)&off_24C51DEB0 + 3;
  return result;
}

uint64_t sub_20BF9DE00(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BF9F100(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    a1[3] = *(_QWORD *)sub_20BF9D9F0(v5);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BF9DF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

int *sub_20BF9DFB8@<X0>(_QWORD *a1@<X8>)
{
  int *result;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  *a1 = *(_QWORD *)result;
  a1[1] = (char *)&off_24C51DEB0 + 3;
  return result;
}

uint64_t sub_20BF9DFEC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = 16;
  if (!*(_BYTE *)(result + 68))
    v2 = 24;
  *a2 = *(_QWORD *)(result + v2);
  a2[1] = (char *)&off_24C51DEB0 + 3;
  return result;
}

void sub_20BF9E018(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BF9F100(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v21, v4);
    if (v21[1])
    {
      a1[2] = *(_QWORD *)sub_20BF9D9F0(v5);
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v16 = "ts/data.h";
      v17 = "SetLeftValue";
      v18 = 737;
      v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      v8 = v15;
      v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v10 = v14;
      if (v8 < 0)
        v10 = v9;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    sub_20BF4C2D8((uint64_t)v21);
  }
  else
  {
    v16 = "ts/data.h";
    v17 = "SetLeftValue";
    v18 = 725;
    v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF9E1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_20BF9E220@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  uint64_t result;
  float v15;
  float v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v17);
  v7 = sub_20BF9F1C0((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  v9 = v8;
  sub_20BF4C2D8((uint64_t)v17);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v17, a2);
  v10 = sub_20BF9F1C0((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  v12 = v11;
  v13 = 1.0 / (v5 - v6);
  result = sub_20BF4C2D8((uint64_t)v17);
  v15 = v13 * (float)(v10 - v7);
  v16 = v13 * (float)(v12 - v9);
  *(_QWORD *)(a3 + 8) = (char *)&off_24C51DEB0 + 3;
  *(float *)a3 = v15;
  *(float *)(a3 + 4) = v16;
  return result;
}

void sub_20BF9E328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

float32x2_t sub_20BF9E348@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, float32x2_t *a3@<X8>, double a4@<D0>)
{
  float32x2_t v6;
  float32x2_t result;

  v6 = *(float32x2_t *)sub_20BF9D9F0(a1);
  result = vadd_f32(v6, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)sub_20BF9D9F0(a2)), a4)));
  a3[1] = (float32x2_t)((char *)&off_24C51DEB0 + 3);
  *a3 = result;
  return result;
}

void sub_20BF9E3BC(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF9E464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9E480(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BF9E528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF9E544()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF9E5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BF9E604()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BF9E6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9E6C4()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9E764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9E780()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9E820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9E83C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9E8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9E8F8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9E998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9E9B4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BF9EA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BF9EA74()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BF9EB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BF9EB30@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xB0uLL);
  result = sub_20BF9EB90(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BF9EB7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BF9EB90(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C521860;
  a1[1] = 0;
  sub_20BF9EC24((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BF9EBD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BF9EBE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BF9EBF8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BF9EC24(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  float v6;
  _QWORD v8[4];
  char v9;

  *(_QWORD *)a1 = &unk_24C5218B0;
  if (a2 && a3)
  {
    sub_20BF9EDB8(a1 + 24, a1 + 88, (uint64_t)a2, a3);
    v6 = sub_20BF9EEB8(a1 + 24);
    if ((*(unsigned int (**)(_QWORD *, float))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 12) = a2[3];
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    v8[2] = 499;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec2f, true>::_Init("
            "const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, INTERPOLATABLE = true]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_20BF9ED14(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  unsigned __int32 v12;
  int v13;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = sub_20BF9F0C0((float32x2_t *)(a1 + 120), v11).u32[0];
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 12);
    v13 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(a5 + 8) = (char *)&off_24C51DEB0 + 3;
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = v13;
}

double sub_20BF9ED80@<D0>(_QWORD *a1@<X8>)
{
  int *v2;
  double result;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  a1[1] = (char *)&off_24C51DEB0 + 3;
  result = *(double *)v2;
  *a1 = *(_QWORD *)v2;
  return result;
}

double sub_20BF9EDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  double *v10;
  int v11;
  int v12;
  double result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = (double *)(a3 + 24);
  *(_QWORD *)a2 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 8) = sub_20BF9EF80(a3, a4).u32[0];
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = sub_20BF9F000((float32x2_t *)a3, a4).u32[0];
  *(_DWORD *)(a2 + 20) = v12;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v10 = (double *)(a4 + 16);
    else
      v10 = (double *)(a4 + 24);
  }
  result = *v10;
  *(double *)(a2 + 24) = *v10;
  return result;
}

float sub_20BF9EEB8(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v1 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 96) = v1;
  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)a1 * 3.0;
  v5 = v3 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  v6 = v4 + v3 * -6.0;
  v7 = *(double *)(a1 + 16);
  v8 = v5 - v2 - v7 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v8;
  LODWORD(v5) = *(_DWORD *)(a1 + 72);
  v9 = *(float *)(a1 + 76);
  v10 = *(float *)&v5 * 3.0;
  v11 = v9 * 3.0;
  *(float *)(a1 + 104) = (float)(*(float *)&v5 * 3.0) - (float)(*(float *)&v1 * 3.0);
  *(float *)(a1 + 108) = (float)(v9 * 3.0) - (float)(*((float *)&v1 + 1) * 3.0);
  *(float *)&v6 = (float)(*(float *)&v1 * 3.0) - (float)(*(float *)&v5 * 6.0);
  *(float *)&v7 = (float)(*((float *)&v1 + 1) * 3.0) - (float)(v9 * 6.0);
  v12 = *(float *)(a1 + 84);
  *(float *)&v5 = *(float *)(a1 + 80) * 3.0;
  *(float *)(a1 + 112) = *(float *)&v6 + *(float *)&v5;
  *(float *)(a1 + 116) = *(float *)&v7 + (float)(v12 * 3.0);
  result = (float)((float)(v10 - *(float *)&v1) - *(float *)&v5) + *(float *)(a1 + 88);
  *(float *)&v8 = (float)((float)(v11 - *((float *)&v1 + 1)) - (float)(v12 * 3.0)) + *(float *)(a1 + 92);
  *(float *)(a1 + 120) = result;
  *(_DWORD *)(a1 + 124) = LODWORD(v8);
  return result;
}

float32x2_t sub_20BF9EF80(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v4 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v4 = 24;
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(a1 + 24), *(float32x2_t *)(a1 + 24)), *(float32x2_t *)(a2 + v4))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else if (v2 == 2)
  {
    return vadd_f32(*(float32x2_t *)(a1 + 24), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 40)), *(double *)(a1 + 56))));
  }
  else
  {
    return *(float32x2_t *)(a1 + 24);
  }
}

float32x2_t sub_20BF9F000(float32x2_t *a1, uint64_t a2)
{
  __int32 v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[8].i32[0];
  if (!v2)
    return a1[3];
  v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1)
    goto LABEL_9;
  if (v3 == 2)
  {
    v4 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v4 = 24;
    return vsub_f32(*(float32x2_t *)(a2 + v4), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 32)), *(double *)(a2 + 48))));
  }
  if (v2 == 1)
  {
LABEL_9:
    v6 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v6 = 24;
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(a2 + v6), *(float32x2_t *)(a2 + v6)), a1[3])), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else
  {
    v7 = 16;
    if (!*(_BYTE *)(a2 + 68))
      v7 = 24;
    return *(float32x2_t *)(a2 + v7);
  }
}

float32x2_t sub_20BF9F0C0(float32x2_t *a1, double a2)
{
  return vadd_f32(*a1, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(a1[1], vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(a1[2], vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[3]), a2)))), a2)))), a2)));
}

std::type_info *sub_20BF9F100(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BF9F188(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C120, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BF9F188(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C120);
  else
    return 0;
}

float sub_20BF9F1C0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BF9F188(a1) & 1) != 0)
    return sub_20BF9F20C(a1);
  else
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2f>::Invoke, (uint64_t)&stru_24C51C120);
}

float sub_20BF9F20C(_QWORD *a1)
{
  float v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(float *)sub_20BF9F268(a1);
  v3 = a1[1];
  if (v3)
    v4 = (a1[1] & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(_QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v2;
}

_QWORD *sub_20BF9F268(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

_QWORD *sub_20BF9F2F4(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BF9F320(a2);
  return sub_20BF9F388(a1, v3);
}

uint64_t sub_20BF9F320(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFA0FB4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3d>::Invoke, (uint64_t)&stru_24C51C150);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BF9F388(_QWORD *a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v6;
  __int128 v8;
  _BYTE v9[32];
  __int128 v10;
  _BYTE v11[32];

  *a1 = &unk_24C5218E8;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  v8 = *a2;
  *(_QWORD *)v9 = *((_QWORD *)a2 + 2);
  *(_OWORD *)&v9[8] = *a2;
  *(_QWORD *)&v9[24] = *(_QWORD *)v9;
  v10 = *(_OWORD *)v4;
  *(_QWORD *)v11 = v4[2];
  *(_QWORD *)&v11[24] = v5[2];
  *(_OWORD *)&v11[8] = *(_OWORD *)v5;
  v6 = operator new(0x60uLL);
  v6[2] = *(_OWORD *)&v9[16];
  v6[3] = v10;
  v6[4] = *(_OWORD *)v11;
  v6[5] = *(_OWORD *)&v11[16];
  *v6 = v8;
  v6[1] = *(_OWORD *)v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BF9F43C(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C5218E8;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BF9F47C(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C5218E8;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BF9F4BC(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C5218E8;
  v4 = operator new(0x60uLL);
  v5 = *(_OWORD **)(a1 + 16);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v5[2];
  v8 = v5[3];
  v9 = v5[5];
  v4[4] = v5[4];
  v4[5] = v9;
  v4[2] = v7;
  v4[3] = v8;
  *(_QWORD *)(a2 + 16) = v4;
  v10 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v10;
  return result;
}

double sub_20BF9F52C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFA07D4(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

char *sub_20BF9F574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  char *result;
  unsigned int *v15;
  unsigned int v16;
  float64x2_t v17;
  _BYTE v18[16];
  float64x2_t v19;
  double v20;
  float64x2_t v21[9];
  double v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  double v28;

  sub_20BFA08C8((uint64_t)v18, a1, a2);
  if (v18[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v21, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v17 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v27, v12), v25), v12), v23), v12), v21[8]);
    v13 = v12 * (v12 * (v28 * v12 + v26) + v24) + v22;
  }
  else
  {
    v17 = v19;
    v13 = v20;
  }
  a3[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(float64x2_t *)result = v17;
  *((double *)result + 2) = v13;
  v15 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  return result;
}

char *sub_20BF9F698@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  char *result;
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  _BYTE v10[296];

  sub_20BFA08C8((uint64_t)v10, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  v9 = *(_OWORD *)v4;
  v5 = v4[2];
  a3[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(_OWORD *)result = v9;
  *((_QWORD *)result + 2) = v5;
  v7 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

void sub_20BF9F724(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BF9F7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BF9F7D8(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BF9F908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BF9F93C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  v5 = *(_QWORD *)(v3 + 40);
  *(_OWORD *)result = *(_OWORD *)(v3 + 24);
  *((_QWORD *)result + 2) = v5;
  v6 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BF9F9A0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[4];
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFA0F2C(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
  if (v22[1])
  {
    v8 = sub_20BF9F320(v5);
    v9 = a1[2];
    v10 = *(_OWORD *)v8;
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)(v9 + 24) = v10;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    v11 = v19;
    v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v13 = v18;
    if (v11 < 0)
      v13 = v12;
    if (v17 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  return sub_20BF4C2D8((uint64_t)v22);
}

void sub_20BF9FB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BF9FB64@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  char *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  a1[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  v4 = v2[2];
  *(_OWORD *)result = *(_OWORD *)v2;
  *((_QWORD *)result + 2) = v4;
  v5 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

char *sub_20BF9FBCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_QWORD *)(a1 + 16);
  else
    v3 = *(_QWORD *)(a1 + 16) + 24;
  a2[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  v5 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *((_QWORD *)result + 2) = v5;
  v6 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BF9FC40(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFA0F2C(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v24, v4);
    if (v24[1])
    {
      v8 = sub_20BF9F320(v5);
      v9 = a1[2];
      v10 = *(_OWORD *)v8;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
      *(_OWORD *)v9 = v10;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v19 = "ts/data.h";
      v20 = "SetLeftValue";
      v21 = 737;
      v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      v11 = v18;
      v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v13 = v17;
      if (v11 < 0)
        v13 = v12;
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    sub_20BF4C2D8((uint64_t)v24);
  }
  else
  {
    v19 = "ts/data.h";
    v20 = "SetLeftValue";
    v21 = 725;
    v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BF9FE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BF9FE54@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char *result;
  double v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v21);
  v7 = sub_20BFA0FEC((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  v9 = v8;
  v11 = v10;
  sub_20BF4C2D8((uint64_t)v21);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v21, a2);
  v12 = sub_20BFA0FEC((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  v14 = v13;
  v16 = v15;
  sub_20BF4C2D8((uint64_t)v21);
  a3[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  v18 = 1.0 / (v5 - v6);
  *(double *)result = v18 * (v12 - v7);
  *((double *)result + 1) = v18 * (v14 - v9);
  *((double *)result + 2) = v18 * (v16 - v11);
  v19 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  return result;
}

void sub_20BF9FF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20BF9FFAC@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  double v7;
  float64x2_t *v8;
  float64_t v9;
  double v10;
  char *result;
  unsigned int *v12;
  unsigned int v13;
  float64x2_t v14;
  float64x2_t v16;

  v6 = sub_20BF9F320(a1);
  v7 = *(double *)(v6 + 16);
  v14 = *(float64x2_t *)v6;
  v8 = (float64x2_t *)sub_20BF9F320(a2);
  v9 = v8[1].f64[0] * a4;
  v16 = vaddq_f64(v14, vmulq_n_f64(*v8, a4));
  v10 = v7 + v9;
  a3[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(float64x2_t *)result = v16;
  *((double *)result + 2) = v10;
  v12 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  return result;
}

void sub_20BFA0060(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA0108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA0124(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA01CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA01E8()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA028C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA02A8()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA034C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA0368()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA0408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA0424()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA04C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA04E0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA0580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA059C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA0658()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFA06FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA0718()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA07B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFA07D4@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x140uLL);
  result = sub_20BFA0834(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFA0820(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFA0834(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C521A30;
  a1[1] = 0;
  sub_20BFA08C8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFA0874(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFA0888(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFA089C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFA08C8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[4];
  char v11;

  *(_QWORD *)a1 = &unk_24C521A80;
  if (a2 && a3)
  {
    sub_20BFA0AF4(a1 + 40, a1 + 104, (uint64_t)a2, a3);
    v6 = sub_20BFA0C18(a1 + 40);
    if ((*(unsigned int (**)(_QWORD *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      v7 = a2[2];
      v8 = *(_OWORD *)(v7 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 + 40);
      *(_OWORD *)(a1 + 16) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    v10[2] = 499;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec3d, true>::_Init"
             "(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, INTERPOLATABLE = true]";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

char *sub_20BFA09C4@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *result;
  unsigned int *v18;
  unsigned int v19;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 72), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = sub_20BFA0EC8((double *)(a1 + 200), v11);
    v14 = v13;
    v16 = v15;
  }
  else
  {
    v12 = *(double *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
  }
  a5[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(double *)result = v12;
  *((_QWORD *)result + 1) = v14;
  *((_QWORD *)result + 2) = v16;
  v18 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a5 = result;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  return result;
}

char *sub_20BFA0A78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  char *result;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  v7 = *(_OWORD *)v2;
  v3 = v2[2];
  a1[1] = (char *)&off_24C51E190 + 2;
  result = (char *)operator new(0x20uLL);
  *(_OWORD *)result = v7;
  *((_QWORD *)result + 2) = v3;
  v5 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

double sub_20BFA0AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_OWORD *)(v10 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v10 + 40);
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 24) = *(_OWORD *)&sub_20BFA0D10(a3, a4);
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = *(_OWORD *)&sub_20BFA0DC4(a3, a4);
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = v15;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v16 = *(_QWORD *)(a4 + 16);
    else
      v16 = *(_QWORD *)(a4 + 16) + 24;
  }
  else
  {
    v16 = *(_QWORD *)(a3 + 16) + 24;
  }
  result = *(double *)(v16 + 16);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v16;
  *(double *)(a2 + 88) = result;
  return result;
}

double sub_20BFA0C18(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 - v2 * 6.0;
  v6 = *(double *)(a1 + 16) * 3.0;
  v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 80);
  v8 = *(double *)(a1 + 64);
  v9 = *(double *)(a1 + 72);
  v10 = *(double *)(a1 + 80);
  v11 = *(double *)(a1 + 88);
  v12 = *(double *)(a1 + 96);
  v13 = *(double *)(a1 + 104);
  v14 = v11 * 3.0;
  v15 = v12 * 3.0;
  v16 = v13 * 3.0;
  v17 = v13 * 3.0 - v10 * 3.0;
  *(double *)(a1 + 184) = v11 * 3.0 - v8 * 3.0;
  *(double *)(a1 + 192) = v12 * 3.0 - v9 * 3.0;
  v18 = v8 * 3.0 - v11 * 6.0;
  v19 = v9 * 3.0 - v12 * 6.0;
  v20 = v10 * 3.0 - v13 * 6.0;
  v21 = *(double *)(a1 + 112) * 3.0;
  v22 = *(double *)(a1 + 120) * 3.0;
  v23 = *(double *)(a1 + 128);
  v24 = *(double *)(a1 + 136);
  *(double *)(a1 + 200) = v17;
  *(double *)(a1 + 208) = v18 + v21;
  *(double *)(a1 + 216) = v19 + v22;
  *(double *)(a1 + 224) = v20 + v23 * 3.0;
  v25 = v15 - v9 - v22 + *(double *)(a1 + 144);
  result = v16 - v10 - v23 * 3.0 + *(double *)(a1 + 152);
  *(double *)(a1 + 232) = v14 - v8 - v21 + v24;
  *(double *)(a1 + 240) = v25;
  *(double *)(a1 + 248) = result;
  return result;
}

float64x2_t sub_20BFA0D10(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v4 = 24;
    if (*(_BYTE *)(a2 + 68))
      v4 = 0;
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 24), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 24)), *(float64x2_t *)(*(_QWORD *)(a2 + 16) + v4)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else if (v2 == 2)
  {
    return vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 72), *(double *)(a1 + 56)), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 24));
  }
  else
  {
    return *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 24);
  }
}

float64x2_t sub_20BFA0DC4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
    return *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 24);
  v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1)
    goto LABEL_9;
  if (v3 == 2)
  {
    v4 = 24;
    if (*(_BYTE *)(a2 + 68))
      v4 = 0;
    return vsubq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + v4), vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 48), *(double *)(a2 + 48)));
  }
  if (v2 == 1)
  {
LABEL_9:
    v6 = 24;
    if (*(_BYTE *)(a2 + 68))
      v6 = 0;
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + v6), *(float64x2_t *)(*(_QWORD *)(a2 + 16) + v6)), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 24)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else
  {
    v7 = 24;
    if (*(_BYTE *)(a2 + 68))
      v7 = 0;
    return *(float64x2_t *)(*(_QWORD *)(a2 + 16) + v7);
  }
}

double sub_20BFA0EC8(double *a1, double a2)
{
  return ((a1[9] * a2 + a1[6]) * a2 + a1[3]) * a2 + *a1;
}

std::type_info *sub_20BFA0F2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA0FB4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C150, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFA0FB4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C150);
  else
    return 0;
}

double sub_20BFA0FEC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BFA0FB4(a1) & 1) != 0)
    return sub_20BFA103C((uint64_t)a1);
  else
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3d>::Invoke, (uint64_t)&stru_24C51C150);
}

double sub_20BFA103C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(double *)sub_20BFA10A8((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

unsigned int *sub_20BFA10A8(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF52A3C(a1);
}

_QWORD *sub_20BFA1138(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3;

  v3 = sub_20BFA1164(a2);
  return sub_20BFA11CC(a1, v3);
}

uint64_t sub_20BFA1164(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFA2E0C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3f>::Invoke, (uint64_t)&stru_24C51C160);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFA11CC(_QWORD *a1, uint64_t a2)
{
  int *v4;
  int *v5;
  _OWORD *v6;
  _BYTE v8[32];
  __int128 v9;

  *a1 = &unk_24C521AB8;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_DWORD *)&v8[8] = *(_DWORD *)(a2 + 8);
  *(_QWORD *)&v8[12] = *(_QWORD *)a2;
  *(_DWORD *)&v8[20] = *(_DWORD *)&v8[8];
  *(_QWORD *)&v8[24] = *(_QWORD *)v4;
  LODWORD(v9) = v4[2];
  HIDWORD(v9) = v5[2];
  *(_QWORD *)((char *)&v9 + 4) = *(_QWORD *)v5;
  v6 = operator new(0x30uLL);
  *v6 = *(_OWORD *)v8;
  v6[1] = *(_OWORD *)&v8[16];
  v6[2] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFA1278(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C521AB8;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFA12B8(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C521AB8;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFA12F8(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C521AB8;
  v4 = operator new(0x30uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  *v4 = v6;
  *(_QWORD *)(a2 + 16) = v4;
  v8 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v8;
  return result;
}

double sub_20BFA1360@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFA25D0(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_DWORD *sub_20BFA13A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  unsigned __int32 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *result;
  unsigned int *v19;
  unsigned int v20;
  _BYTE v21[12];
  unsigned __int32 v22;
  int v23;
  int v24;
  float64x2_t v25[5];
  uint64_t v26;

  sub_20BFA26C4((uint64_t)v21, a1, a2);
  if (v21[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v25, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = sub_20BFA2CFC((uint64_t)&v26, v12).u32[0];
    v15 = v14;
    v17 = v16;
  }
  else
  {
    v13 = v22;
    v15 = v23;
    v17 = v24;
  }
  a3[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  *result = v13;
  result[1] = v15;
  result[2] = v17;
  v19 = result + 3;
  atomic_store(0, result + 3);
  *a3 = result;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  return result;
}

_DWORD *sub_20BFA1484@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int *v4;
  int v5;
  uint64_t v6;
  _DWORD *result;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v10[184];

  sub_20BFA26C4((uint64_t)v10, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  v5 = v4[2];
  a3[1] = (char *)&off_24C51E0D8 + 2;
  v6 = *(_QWORD *)v4;
  result = operator new(0x10uLL);
  *(_QWORD *)result = v6;
  result[2] = v5;
  v8 = result + 3;
  atomic_store(0, result + 3);
  *a3 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

void sub_20BFA1508(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFA159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA15BC(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFA16EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20BFA1720@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  v5 = *(_DWORD *)(v3 + 20);
  *(_QWORD *)result = *(_QWORD *)(v3 + 12);
  result[2] = v5;
  v6 = result + 3;
  atomic_store(0, result + 3);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BFA1784(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[4];
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFA2D84(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
  if (v22[1])
  {
    v8 = sub_20BFA1164(v5);
    v9 = a1[2];
    v10 = *(_QWORD *)v8;
    *(_DWORD *)(v9 + 20) = *(_DWORD *)(v8 + 8);
    *(_QWORD *)(v9 + 12) = v10;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    v11 = v19;
    v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v13 = v18;
    if (v11 < 0)
      v13 = v12;
    if (v17 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  return sub_20BF4C2D8((uint64_t)v22);
}

void sub_20BFA18F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

_DWORD *sub_20BFA1948@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  _DWORD *result;
  int v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  a1[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  v4 = v2[2];
  *(_QWORD *)result = *(_QWORD *)v2;
  result[2] = v4;
  v5 = result + 3;
  atomic_store(0, result + 3);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

_DWORD *sub_20BFA19B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_QWORD *)(a1 + 16);
  else
    v3 = *(_QWORD *)(a1 + 16) + 12;
  a2[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  result[2] = v5;
  v6 = result + 3;
  atomic_store(0, result + 3);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFA1A24(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFA2D84(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v24, v4);
    if (v24[1])
    {
      v8 = sub_20BFA1164(v5);
      v9 = a1[2];
      v10 = *(_QWORD *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(_QWORD *)v9 = v10;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v19 = "ts/data.h";
      v20 = "SetLeftValue";
      v21 = 737;
      v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      v11 = v18;
      v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v13 = v17;
      if (v11 < 0)
        v13 = v12;
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    sub_20BF4C2D8((uint64_t)v24);
  }
  else
  {
    v19 = "ts/data.h";
    v20 = "SetLeftValue";
    v21 = 725;
    v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFA1BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA1C38@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  char *result;
  double v18;
  float v19;
  float v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v23);
  v7 = sub_20BFA2E44((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  v9 = v8;
  v11 = v10;
  sub_20BF4C2D8((uint64_t)v23);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v23, a2);
  v12 = sub_20BFA2E44((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  v14 = v13;
  v16 = v15;
  sub_20BF4C2D8((uint64_t)v23);
  a3[1] = (char *)&off_24C51E0D8 + 2;
  result = (char *)operator new(0x10uLL);
  v18 = 1.0 / (v5 - v6);
  v19 = v18 * (float)(v12 - v7);
  v20 = v18 * (float)(v14 - v9);
  *(float *)&v18 = v18 * (float)(v16 - v11);
  *(float *)result = v19;
  *((float *)result + 1) = v20;
  *((_DWORD *)result + 2) = LODWORD(v18);
  v21 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)result + 3);
  *a3 = result;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  return result;
}

void sub_20BFA1D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20BFA1DA8@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  float v7;
  float32x2_t v8;
  float32x2_t *v9;
  float v10;
  float32x2_t v11;
  float v12;
  char *result;
  unsigned int *v14;
  unsigned int v15;

  v6 = sub_20BFA1164(a1);
  v7 = *(float *)(v6 + 8);
  v8 = *(float32x2_t *)v6;
  v9 = (float32x2_t *)sub_20BFA1164(a2);
  v10 = v9[1].f32[0] * a4;
  v11 = vadd_f32(v8, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v9), a4)));
  v12 = v7 + v10;
  a3[1] = (char *)&off_24C51E0D8 + 2;
  result = (char *)operator new(0x10uLL);
  *(float32x2_t *)result = v11;
  *((float *)result + 2) = v12;
  v14 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)result + 3);
  *a3 = result;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  return result;
}

void sub_20BFA1E5C(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA1F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA1F20(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA1FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA1FE4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA2088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA20A4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA2148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA2164()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA2204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA2220()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA22C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA22DC()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA237C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA2398()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA2438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA2454()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFA24F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA2514()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA25B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFA25D0@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xD0uLL);
  result = sub_20BFA2630(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFA261C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFA2630(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C521C00;
  a1[1] = 0;
  sub_20BFA26C4((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFA2670(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFA2684(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFA2698(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFA26C4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;

  *(_QWORD *)a1 = &unk_24C521C50;
  if (a2 && a3)
  {
    sub_20BFA28E0(a1 + 24, a1 + 88, (uint64_t)a2, a3);
    v6 = sub_20BFA2A04(a1 + 24);
    if ((*(unsigned int (**)(_QWORD *, float))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      v7 = a2[2];
      v8 = *(_QWORD *)(v7 + 12);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(v7 + 20);
      *(_QWORD *)(a1 + 12) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    v10[2] = 499;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec3f, true>::_Init"
             "(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, INTERPOLATABLE = true]";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

_DWORD *sub_20BFA27C0@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  unsigned __int32 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *result;
  unsigned int *v18;
  unsigned int v19;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = sub_20BFA2CFC(a1 + 136, v11).u32[0];
    v14 = v13;
    v16 = v15;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 12);
    v14 = *(_DWORD *)(a1 + 16);
    v16 = *(_DWORD *)(a1 + 20);
  }
  a5[1] = (char *)&off_24C51E0D8 + 2;
  result = operator new(0x10uLL);
  *result = v12;
  result[1] = v14;
  result[2] = v16;
  v18 = result + 3;
  atomic_store(0, result + 3);
  *a5 = result;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  return result;
}

_DWORD *sub_20BFA2874@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  v3 = v2[2];
  a1[1] = (char *)&off_24C51E0D8 + 2;
  v4 = *(_QWORD *)v2;
  result = operator new(0x10uLL);
  *(_QWORD *)result = v4;
  result[2] = v3;
  v6 = result + 3;
  atomic_store(0, result + 3);
  *a1 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

float sub_20BFA28E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  float result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v10 + 20);
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 12) = sub_20BFA2B04(a3, a4).u32[0];
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  *(_DWORD *)(a2 + 24) = sub_20BFA2BD8(a3, a4).u32[0];
  *(_DWORD *)(a2 + 28) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v16 = *(_QWORD *)(a4 + 16);
    else
      v16 = *(_QWORD *)(a4 + 16) + 12;
  }
  else
  {
    v16 = *(_QWORD *)(a3 + 16) + 12;
  }
  result = *(float *)(v16 + 8);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)v16;
  *(float *)(a2 + 44) = result;
  return result;
}

float sub_20BFA2A04(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 + v2 * -6.0;
  v6 = *(double *)(a1 + 16);
  v7 = v4 - v1 - v6 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6 * 3.0;
  *(double *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 72);
  LODWORD(v7) = *(_DWORD *)(a1 + 64);
  LODWORD(v1) = *(_DWORD *)(a1 + 68);
  v8 = *(float *)(a1 + 72);
  v9 = *(float *)(a1 + 76);
  v10 = *(float *)(a1 + 80);
  v11 = *(float *)(a1 + 84);
  v12 = v9 * 3.0;
  v13 = v10 * 3.0;
  v14 = v11 * 3.0;
  v15 = (float)(v11 * 3.0) - (float)(v8 * 3.0);
  *(float *)(a1 + 124) = (float)(v9 * 3.0) - (float)(*(float *)&v7 * 3.0);
  *(float *)(a1 + 128) = (float)(v10 * 3.0) - (float)(*(float *)&v1 * 3.0);
  *(float *)&v6 = (float)(*(float *)&v7 * 3.0) - (float)(v9 * 6.0);
  *(float *)&v4 = (float)(*(float *)&v1 * 3.0) - (float)(v10 * 6.0);
  v16 = (float)(v8 * 3.0) - (float)(v11 * 6.0);
  v17 = *(float *)(a1 + 88) * 3.0;
  v18 = *(float *)(a1 + 92) * 3.0;
  v19 = *(float *)(a1 + 96);
  v20 = *(float *)(a1 + 100);
  *(float *)(a1 + 132) = v15;
  *(float *)(a1 + 136) = *(float *)&v6 + v17;
  *(float *)(a1 + 140) = *(float *)&v4 + v18;
  *(float *)(a1 + 144) = v16 + (float)(v19 * 3.0);
  result = (float)((float)(v12 - *(float *)&v7) - v17) + v20;
  *(float *)&v1 = (float)((float)(v13 - *(float *)&v1) - v18) + *(float *)(a1 + 104);
  *(float *)&v5 = (float)((float)(v14 - v8) - (float)(v19 * 3.0)) + *(float *)(a1 + 108);
  *(float *)(a1 + 148) = result;
  *(_DWORD *)(a1 + 152) = LODWORD(v1);
  *(_DWORD *)(a1 + 156) = LODWORD(v5);
  return result;
}

float32x2_t sub_20BFA2B04(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v4 = 12;
    if (*(_BYTE *)(a2 + 68))
      v4 = 0;
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 16) + 12), *(float32x2_t *)(*(_QWORD *)(a1 + 16) + 12)), *(float32x2_t *)(*(_QWORD *)(a2 + 16) + v4))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else if (v2 == 2)
  {
    return vadd_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 16) + 12), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 16) + 36)), *(double *)(a1 + 56))));
  }
  else
  {
    return *(float32x2_t *)(*(_QWORD *)(a1 + 16) + 12);
  }
}

float32x2_t sub_20BFA2BD8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
    return *(float32x2_t *)(*(_QWORD *)(a1 + 16) + 12);
  v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1)
    goto LABEL_9;
  if (v3 == 2)
  {
    v4 = 12;
    if (*(_BYTE *)(a2 + 68))
      v4 = 0;
    return vsub_f32(*(float32x2_t *)(*(_QWORD *)(a2 + 16) + v4), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a2 + 16) + 24)), *(double *)(a2 + 48))));
  }
  if (v2 == 1)
  {
LABEL_9:
    v6 = 12;
    if (*(_BYTE *)(a2 + 68))
      v6 = 0;
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(*(_QWORD *)(a2 + 16) + v6), *(float32x2_t *)(*(_QWORD *)(a2 + 16) + v6)), *(float32x2_t *)(*(_QWORD *)(a1 + 16) + 12))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else
  {
    v7 = 12;
    if (*(_BYTE *)(a2 + 68))
      v7 = 0;
    return *(float32x2_t *)(*(_QWORD *)(a2 + 16) + v7);
  }
}

float32x2_t sub_20BFA2CFC(uint64_t a1, double a2)
{
  return vadd_f32(*(float32x2_t *)a1, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(*(float32x2_t *)(a1 + 12), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(*(float32x2_t *)(a1 + 24), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 36)), a2)))), a2)))), a2)));
}

std::type_info *sub_20BFA2D84(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA2E0C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C160, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFA2E0C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C160);
  else
    return 0;
}

float sub_20BFA2E44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BFA2E0C(a1) & 1) != 0)
    return sub_20BFA2E94((uint64_t)a1);
  else
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3f>::Invoke, (uint64_t)&stru_24C51C160);
}

float sub_20BFA2E94(uint64_t a1)
{
  float v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(float *)sub_20BFA2F00((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

unsigned int *sub_20BFA2F00(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF52668(a1);
}

_QWORD *sub_20BFA2F90(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BFA2FBC(a2);
  return sub_20BFA3024(a1, v3);
}

uint64_t sub_20BFA2FBC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFA4BCC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4d>::Invoke, (uint64_t)&stru_24C51C190);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFA3024(_QWORD *a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = &unk_24C521C88;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  v8 = *a2;
  v9 = a2[1];
  v10 = *a2;
  v11 = *(_OWORD *)v4;
  v12 = *((_OWORD *)v4 + 1);
  v13 = *(_OWORD *)v5;
  v14 = *((_OWORD *)v5 + 1);
  v6 = operator new(0x80uLL);
  v6[4] = v11;
  v6[5] = v12;
  v6[6] = v13;
  v6[7] = v14;
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v10;
  v6[3] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFA30C4(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C521C88;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFA3104(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C521C88;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFA3144(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C521C88;
  v4 = operator new(0x80uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  v9 = v5[4];
  v10 = v5[5];
  v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  v4[4] = v9;
  v4[5] = v10;
  *(_QWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFA31BC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFA4408(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

char *sub_20BFA3204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *result;
  unsigned int *v21;
  unsigned int v22;
  _BYTE v23[16];
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28[10];
  double v29;

  sub_20BFA44FC((uint64_t)v23, a1, a2);
  if (v23[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v28, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = sub_20BFA4AC0(&v29, v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
  }
  else
  {
    v13 = v24;
    v15 = v25;
    v17 = v26;
    v19 = v27;
  }
  a3[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(double *)result = v13;
  *((_QWORD *)result + 1) = v15;
  *((_QWORD *)result + 2) = v17;
  *((_QWORD *)result + 3) = v19;
  v21 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  return result;
}

char *sub_20BFA32E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  _BYTE v11[368];

  sub_20BFA44FC((uint64_t)v11, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  v10 = *(_OWORD *)v4;
  v5 = v4[2];
  v6 = v4[3];
  a3[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(_OWORD *)result = v10;
  *((_QWORD *)result + 2) = v5;
  *((_QWORD *)result + 3) = v6;
  v8 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

void sub_20BFA3370(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFA3404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA3424(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFA3554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BFA3588@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)result = *(_OWORD *)(v3 + 32);
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BFA35E4(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[4];
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFA4B44(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
  if (v22[1])
  {
    v8 = (_OWORD *)sub_20BFA2FBC(v5);
    v9 = a1[2];
    v10 = v8[1];
    *(_OWORD *)(v9 + 32) = *v8;
    *(_OWORD *)(v9 + 48) = v10;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    v11 = v19;
    v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v13 = v18;
    if (v11 < 0)
      v13 = v12;
    if (v17 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  return sub_20BF4C2D8((uint64_t)v22);
}

void sub_20BFA3750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA37A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  char *result;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  a1[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  v5 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

char *sub_20BFA3800@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_OWORD **)(a1 + 16);
  else
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 32);
  a2[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFA386C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFA4B44(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v24, v4);
    if (v24[1])
    {
      v8 = (_OWORD *)sub_20BFA2FBC(v5);
      v9 = (_OWORD *)a1[2];
      v10 = v8[1];
      *v9 = *v8;
      v9[1] = v10;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v19 = "ts/data.h";
      v20 = "SetLeftValue";
      v21 = 737;
      v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      v11 = v18;
      v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v13 = v17;
      if (v11 < 0)
        v13 = v12;
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    sub_20BF4C2D8((uint64_t)v24);
  }
  else
  {
    v19 = "ts/data.h";
    v20 = "SetLeftValue";
    v21 = 725;
    v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFA3A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA3A78@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char *result;
  double v20;
  unsigned int *v21;
  unsigned int v22;
  double v23;
  double v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  v23 = a1[1];
  v24 = a2[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v25);
  v5 = sub_20BFA4C04((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  sub_20BF4C2D8((uint64_t)v25);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v25, a2);
  v12 = sub_20BFA4C04((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  sub_20BF4C2D8((uint64_t)v25);
  a3[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  v20 = 1.0 / (v24 - v23);
  *(double *)result = v20 * (v12 - v5);
  *((double *)result + 1) = v20 * (v14 - v7);
  *((double *)result + 2) = v20 * (v16 - v9);
  *((double *)result + 3) = v20 * (v18 - v11);
  v21 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  return result;
}

void sub_20BFA3BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20BFA3BE8@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  float64x2_t *v6;
  float64x2_t *v7;
  float64x2_t v8;
  char *result;
  unsigned int *v10;
  unsigned int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;

  v6 = (float64x2_t *)sub_20BFA2FBC(a1);
  v12 = v6[1];
  v13 = *v6;
  v7 = (float64x2_t *)sub_20BFA2FBC(a2);
  v8 = vaddq_f64(v13, vmulq_n_f64(*v7, a4));
  v14 = vaddq_f64(v12, vmulq_n_f64(v7[1], a4));
  v16 = v8;
  a3[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(float64x2_t *)result = v16;
  *((float64x2_t *)result + 1) = v14;
  v10 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  return result;
}

void sub_20BFA3C94(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA3D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA3D58(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA3E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA3E1C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA3EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA3EDC()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA3F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA3F9C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA4058()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA40F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA4114()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA41B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA41D0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA4270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA428C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFA4330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA434C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA43EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFA4408@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x188uLL);
  result = sub_20BFA4468(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFA4454(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFA4468(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C521DD0;
  a1[1] = 0;
  sub_20BFA44FC((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFA44A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFA44BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFA44D0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFA44FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[4];
  char v11;

  *(_QWORD *)a1 = &unk_24C521E20;
  if (a2 && a3)
  {
    sub_20BFA4724(a1 + 48, a1 + 112, (uint64_t)a2, a3);
    v6 = sub_20BFA4838(a1 + 48);
    if ((*(unsigned int (**)(_QWORD *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      v7 = a2[2];
      v8 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    v10[2] = 499;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec4d, true>::_Init"
             "(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, INTERPOLATABLE = true]";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

char *sub_20BFA45F0@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *result;
  unsigned int *v20;
  unsigned int v21;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 80), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = sub_20BFA4AC0((double *)(a1 + 240), v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
  }
  else
  {
    v12 = *(double *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 40);
  }
  a5[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(double *)result = v12;
  *((_QWORD *)result + 1) = v14;
  *((_QWORD *)result + 2) = v16;
  *((_QWORD *)result + 3) = v18;
  v20 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a5 = result;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  return result;
}

char *sub_20BFA46A8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  v8 = *(_OWORD *)v2;
  v3 = v2[2];
  v4 = v2[3];
  a1[1] = (char *)&off_24C51E3B8 + 2;
  result = (char *)operator new(0x28uLL);
  *(_OWORD *)result = v8;
  *((_QWORD *)result + 2) = v3;
  *((_QWORD *)result + 3) = v4;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

__n128 sub_20BFA4724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 32) = *(_OWORD *)&sub_20BFA495C(a3, a4);
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = *(_OWORD *)&sub_20BFA49F0(a3, a4);
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v16;
  *(_QWORD *)(a2 + 88) = v17;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v18 = *(_QWORD *)(a4 + 16);
    else
      v18 = *(_QWORD *)(a4 + 16) + 32;
  }
  else
  {
    v18 = *(_QWORD *)(a3 + 16) + 32;
  }
  result = *(__n128 *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 112) = v20;
  return result;
}

double sub_20BFA4838(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 - v2 * 6.0;
  v6 = *(double *)(a1 + 16) * 3.0;
  v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 208) = v8;
  v9 = *(double *)(a1 + 64);
  *(_QWORD *)&v8 = *(_QWORD *)(a1 + 72);
  v10 = *(double *)(a1 + 80);
  v11 = *(double *)(a1 + 88);
  v12 = *(double *)(a1 + 96);
  v13 = *(double *)(a1 + 104);
  v14 = *(double *)(a1 + 112);
  v15 = *(double *)(a1 + 120);
  v16 = v12 * 3.0;
  v17 = v13 * 3.0;
  v18 = v14 * 3.0;
  *(double *)(a1 + 224) = v12 * 3.0 - v9 * 3.0;
  *(double *)(a1 + 232) = v13 * 3.0 - *(double *)&v8 * 3.0;
  *(double *)(a1 + 240) = v14 * 3.0 - v10 * 3.0;
  *(double *)(a1 + 248) = v15 * 3.0 - v11 * 3.0;
  v19 = v9 * 3.0 - v12 * 6.0;
  v20 = *(double *)&v8 * 3.0 - v13 * 6.0;
  v21 = v10 * 3.0 - v14 * 6.0;
  v22 = *(double *)(a1 + 152);
  v23 = *(double *)(a1 + 128) * 3.0;
  v24 = *(double *)(a1 + 136) * 3.0;
  v25 = *(double *)(a1 + 144) * 3.0;
  *(double *)(a1 + 256) = v19 + v23;
  *(double *)(a1 + 264) = v20 + v24;
  *(double *)(a1 + 272) = v21 + v25;
  *(double *)(a1 + 280) = v11 * 3.0 - v15 * 6.0 + v22 * 3.0;
  *(double *)&v8 = v17 - *(double *)&v8 - v24 + *(double *)(a1 + 168);
  v26 = v18 - v10 - v25 + *(double *)(a1 + 176);
  result = v15 * 3.0 - v11 - v22 * 3.0 + *(double *)(a1 + 184);
  *(double *)(a1 + 288) = v16 - v9 - v23 + *(double *)(a1 + 160);
  *(_QWORD *)(a1 + 296) = v8;
  *(double *)(a1 + 304) = v26;
  *(double *)(a1 + 312) = result;
  return result;
}

float64x2_t sub_20BFA495C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 32), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 32)), *(float64x2_t *)(*(_QWORD *)(a2 + 16) + 32 * (*(_BYTE *)(a2 + 68) == 0))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else if (v2 == 2)
  {
    return vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 96), *(double *)(a1 + 56)), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 32));
  }
  else
  {
    return *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 32);
  }
}

float64x2_t sub_20BFA49F0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float64x2_t *v5;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    if (v3 == 1)
      goto LABEL_7;
    if (v3 == 2)
      return vsubq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 32 * (*(_BYTE *)(a2 + 68) == 0)), vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 16) + 64), *(double *)(a2 + 48)));
    if (v2 == 1)
    {
LABEL_7:
      v5 = (float64x2_t *)(*(_QWORD *)(a2 + 16) + 32 * (*(_BYTE *)(a2 + 68) == 0));
      return vmulq_f64(vaddq_f64(vaddq_f64(*v5, *v5), *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 32)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
    }
    else
    {
      return *(float64x2_t *)(*(_QWORD *)(a2 + 16) + 32 * (*(_BYTE *)(a2 + 68) == 0));
    }
  }
  else
  {
    return *(float64x2_t *)(*(_QWORD *)(a1 + 16) + 32);
  }
}

double sub_20BFA4AC0(double *a1, double a2)
{
  return ((a1[12] * a2 + a1[8]) * a2 + a1[4]) * a2 + *a1;
}

std::type_info *sub_20BFA4B44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA4BCC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C190, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFA4BCC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C190);
  else
    return 0;
}

double sub_20BFA4C04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BFA4BCC(a1) & 1) != 0)
    return sub_20BFA4C54((uint64_t)a1);
  else
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4d>::Invoke, (uint64_t)&stru_24C51C190);
}

double sub_20BFA4C54(uint64_t a1)
{
  double v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(double *)sub_20BFA4CC4((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

unsigned int *sub_20BFA4CC4(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF53AC0(a1);
}

_QWORD *sub_20BFA4D54(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BFA4D80(a2);
  return sub_20BFA4DE8(a1, v3);
}

uint64_t sub_20BFA4D80(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFA6978(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4f>::Invoke, (uint64_t)&stru_24C51C1A0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFA4DE8(_QWORD *a1, __int128 *a2)
{
  int *v4;
  int *v5;
  _OWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *a1 = &unk_24C521E58;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  v8 = *a2;
  v9 = *a2;
  v10 = *(_OWORD *)v4;
  v11 = *(_OWORD *)v5;
  v6 = operator new(0x40uLL);
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v10;
  v6[3] = v11;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFA4E70(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C521E58;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFA4EB0(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C521E58;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFA4EF0(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C521E58;
  v4 = operator new(0x40uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  *(_QWORD *)(a2 + 16) = v4;
  v9 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v9;
  return result;
}

double sub_20BFA4F58@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFA61B4(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_DWORD *sub_20BFA4FA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *result;
  unsigned int *v22;
  unsigned int v23;
  _BYTE v24[12];
  int v25;
  int v26;
  int v27;
  int v28;
  float64x2_t v29[6];
  uint64_t v30;

  sub_20BFA62A8((uint64_t)v24, a1, a2);
  if (v24[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v29, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = sub_20BFA6884((uint64_t)&v30, v12);
    v14 = LODWORD(v13);
    v16 = v15;
    v18 = v17;
    v20 = v19;
  }
  else
  {
    v14 = v25;
    v16 = v26;
    v18 = v27;
    v20 = v28;
  }
  a3[1] = (char *)&off_24C51E300 + 2;
  result = operator new(0x14uLL);
  *result = v14;
  result[1] = v16;
  result[2] = v18;
  result[3] = v20;
  v22 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  return result;
}

unsigned int *sub_20BFA5080@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  int *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  char v9[224];

  sub_20BFA62A8((uint64_t)v9, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  a3[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  v8 = *(_OWORD *)v4;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v8;
  v6 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFA50FC(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFA5190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA51B0(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFA52E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20BFA5314@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *(_OWORD *)(v3 + 16);
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20BFA5370(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFA68F0(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    *(_OWORD *)(a1[2] + 16) = *(_OWORD *)sub_20BFA4D80(v5);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BFA54DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BFA552C@<X0>(unsigned int **a1@<X8>)
{
  int *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  a1[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *(_OWORD *)v2;
  v4 = result + 4;
  atomic_store(0, result + 4);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

unsigned int *sub_20BFA558C@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_OWORD **)(a1 + 16);
  else
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 16);
  a2[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20BFA55F8(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFA68F0(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v21, v4);
    if (v21[1])
    {
      *(_OWORD *)a1[2] = *(_OWORD *)sub_20BFA4D80(v5);
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v16 = "ts/data.h";
      v17 = "SetLeftValue";
      v18 = 737;
      v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      v8 = v15;
      v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v10 = v14;
      if (v8 < 0)
        v10 = v9;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    sub_20BF4C2D8((uint64_t)v21);
  }
  else
  {
    v16 = "ts/data.h";
    v17 = "SetLeftValue";
    v18 = 725;
    v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFA57B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA5804@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  char *result;
  double v20;
  float v21;
  float v22;
  float v23;
  unsigned int *v24;
  unsigned int v25;
  double v26;
  double v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v26 = a1[1];
  v27 = a2[1];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v28);
  v5 = sub_20BFA69B0((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  sub_20BF4C2D8((uint64_t)v28);
  (*(void (**)(_QWORD *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v28, a2);
  v12 = sub_20BFA69B0((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  sub_20BF4C2D8((uint64_t)v28);
  a3[1] = (char *)&off_24C51E300 + 2;
  result = (char *)operator new(0x14uLL);
  v20 = 1.0 / (v27 - v26);
  v21 = v20 * (float)(v12 - v5);
  v22 = v20 * (float)(v14 - v7);
  v23 = v20 * (float)(v16 - v9);
  *(float *)result = v21;
  *((float *)result + 1) = v22;
  *(float *)&v20 = v20 * (float)(v18 - v11);
  *((float *)result + 2) = v23;
  *((_DWORD *)result + 3) = LODWORD(v20);
  v24 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a3 = result;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  return result;
}

void sub_20BFA5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BFA5994@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, unsigned int **a3@<X8>, double a4@<D0>)
{
  float32x2_t *v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v12;

  v10 = *(float32x4_t *)sub_20BFA4D80(a1);
  v6 = (float32x2_t *)sub_20BFA4D80(a2);
  v12 = vaddq_f32(v10, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v6), a4)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v6->f32), a4)));
  a3[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  result = (unsigned int *)operator new(0x14uLL);
  *(float32x4_t *)result = v12;
  v8 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

void sub_20BFA5A40(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA5AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA5B04(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA5BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA5BC8()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA5C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA5C88()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA5D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA5D48()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA5DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA5E04()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA5EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA5EC0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA5F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA5F7C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA601C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA6038()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFA60DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA60F8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA6198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFA61B4@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xF8uLL);
  result = sub_20BFA6214(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFA6200(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFA6214(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C521FA0;
  a1[1] = 0;
  sub_20BFA62A8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFA6254(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFA6268(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFA627C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C521FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFA62A8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  float v6;
  _QWORD v8[4];
  char v9;

  *(_QWORD *)a1 = &unk_24C521FF0;
  if (a2 && a3)
  {
    sub_20BFA64C0(a1 + 32, a1 + 96, (uint64_t)a2, a3);
    v6 = sub_20BFA65D4(a1 + 32);
    if ((*(unsigned int (**)(_QWORD *, float))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2[2] + 16);
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    v8[2] = 499;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec4f, true>::_Init("
            "const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, INTERPOLATABLE = true]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

_DWORD *sub_20BFA639C@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD *result;
  unsigned int *v21;
  unsigned int v22;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 64), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = sub_20BFA6884(a1 + 160, v11);
    v13 = LODWORD(v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 20);
    v19 = *(_DWORD *)(a1 + 24);
  }
  a5[1] = (char *)&off_24C51E300 + 2;
  result = operator new(0x14uLL);
  *result = v13;
  result[1] = v15;
  result[2] = v17;
  result[3] = v19;
  v21 = result + 4;
  atomic_store(0, result + 4);
  *a5 = result;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  return result;
}

unsigned int *sub_20BFA6454@<X0>(unsigned int **a1@<X8>)
{
  int *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  a1[1] = (unsigned int *)((char *)&off_24C51E300 + 2);
  v6 = *(_OWORD *)v2;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = v6;
  v4 = result + 4;
  atomic_store(0, result + 4);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

__n128 sub_20BFA64C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __n128 *v16;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16);
  *(_DWORD *)(a2 + 16) = sub_20BFA6700(a3, a4).u32[0];
  *(_DWORD *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v12;
  *(_DWORD *)(a2 + 32) = sub_20BFA67A8(a3, a4).u32[0];
  *(_DWORD *)(a2 + 36) = v13;
  *(_DWORD *)(a2 + 40) = v14;
  *(_DWORD *)(a2 + 44) = v15;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v16 = *(__n128 **)(a4 + 16);
    else
      v16 = (__n128 *)(*(_QWORD *)(a4 + 16) + 16);
  }
  else
  {
    v16 = (__n128 *)(*(_QWORD *)(a3 + 16) + 16);
  }
  result = *v16;
  *(__n128 *)(a2 + 48) = *v16;
  return result;
}

float sub_20BFA65D4(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)a1 * 3.0;
  v4 = v2 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  v5 = v3 + v2 * -6.0;
  v6 = *(double *)(a1 + 16);
  v7 = *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6 * 3.0;
  *(double *)(a1 + 56) = v4 - v1 - v6 * 3.0 + v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 64);
  v8 = *(float *)(a1 + 64);
  LODWORD(v1) = *(_DWORD *)(a1 + 68);
  LODWORD(v5) = *(_DWORD *)(a1 + 72);
  LODWORD(v6) = *(_DWORD *)(a1 + 76);
  v9 = *(float *)(a1 + 80);
  v10 = *(float *)(a1 + 84);
  v11 = *(float *)(a1 + 88);
  v12 = *(float *)(a1 + 92);
  v13 = v9 * 3.0;
  v14 = v10 * 3.0;
  v15 = v11 * 3.0;
  v16 = v12 * 3.0;
  *(float *)(a1 + 144) = (float)(v9 * 3.0) - (float)(v8 * 3.0);
  *(float *)(a1 + 148) = (float)(v10 * 3.0) - (float)(*(float *)&v1 * 3.0);
  *(float *)(a1 + 152) = (float)(v11 * 3.0) - (float)(*(float *)&v5 * 3.0);
  *(float *)(a1 + 156) = (float)(v12 * 3.0) - (float)(*(float *)&v6 * 3.0);
  *(float *)&v7 = (float)(v8 * 3.0) - (float)(v9 * 6.0);
  v17 = (float)(*(float *)&v1 * 3.0) - (float)(v10 * 6.0);
  v18 = (float)(*(float *)&v5 * 3.0) - (float)(v11 * 6.0);
  v19 = (float)(*(float *)&v6 * 3.0) - (float)(v12 * 6.0);
  v20 = *(float *)(a1 + 108);
  v21 = *(float *)(a1 + 96) * 3.0;
  v22 = *(float *)(a1 + 100) * 3.0;
  v23 = *(float *)(a1 + 104) * 3.0;
  *(float *)(a1 + 160) = *(float *)&v7 + v21;
  *(float *)(a1 + 164) = v17 + v22;
  *(float *)(a1 + 168) = v18 + v23;
  *(float *)(a1 + 172) = v19 + (float)(v20 * 3.0);
  result = (float)((float)(v13 - v8) - v21) + *(float *)(a1 + 112);
  *(float *)&v1 = (float)((float)(v14 - *(float *)&v1) - v22) + *(float *)(a1 + 116);
  *(float *)&v5 = (float)((float)(v15 - *(float *)&v5) - v23) + *(float *)(a1 + 120);
  *(float *)&v6 = (float)((float)(v16 - *(float *)&v6) - (float)(v20 * 3.0)) + *(float *)(a1 + 124);
  *(float *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 180) = LODWORD(v1);
  *(_DWORD *)(a1 + 184) = LODWORD(v5);
  *(_DWORD *)(a1 + 188) = LODWORD(v6);
  return result;
}

float32x4_t sub_20BFA6700(uint64_t a1, uint64_t a2)
{
  int v2;
  float32x4_t v4;
  float64x2_t v5;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v4 = vaddq_f32(vaddq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16)), *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0)));
    v5 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    return vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v4.f32), v5)), vmulq_f64(vcvt_hight_f64_f32(v4), v5));
  }
  else if (v2 == 2)
  {
    return vaddq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 16) + 48)), *(double *)(a1 + 56))), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 48)), *(double *)(a1 + 56))));
  }
  else
  {
    return *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16);
  }
}

float32x4_t sub_20BFA67A8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float32x4_t v5;
  float64x2_t v6;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    if (v3 == 1)
      goto LABEL_7;
    if (v3 == 2)
      return vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0)), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a2 + 16) + 32)), *(double *)(a2 + 48))), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 16) + 32)), *(double *)(a2 + 48))));
    if (v2 == 1)
    {
LABEL_7:
      v5 = vaddq_f32(vaddq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0)), *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0))), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16));
      v6 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
      return vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v5.f32), v6)), vmulq_f64(vcvt_hight_f64_f32(v5), v6));
    }
    else
    {
      return *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (*(_BYTE *)(a2 + 68) == 0));
    }
  }
  else
  {
    return *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16);
  }
}

double sub_20BFA6884(uint64_t a1, double a2)
{
  float32x4_t v2;
  float32x4_t v3;
  double result;

  v2 = vaddq_f32(*(float32x4_t *)(a1 + 32), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 48)), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(a1 + 48)), a2)));
  v3 = vaddq_f32(*(float32x4_t *)(a1 + 16), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v2.f32), a2)), vmulq_n_f64(vcvt_hight_f64_f32(v2), a2)));
  *(_QWORD *)&result = vaddq_f32(*(float32x4_t *)a1, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v3.f32), a2)), vmulq_n_f64(vcvt_hight_f64_f32(v3), a2))).u64[0];
  return result;
}

std::type_info *sub_20BFA68F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA6978(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C1A0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFA6978(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C1A0);
  else
    return 0;
}

float sub_20BFA69B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BFA6978(a1) & 1) != 0)
    return sub_20BFA6A00((uint64_t)a1);
  else
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4f>::Invoke, (uint64_t)&stru_24C51C1A0);
}

float sub_20BFA6A00(uint64_t a1)
{
  float v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(float *)sub_20BFA6A70((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

unsigned int *sub_20BFA6A70(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF536D0(a1);
}

_QWORD *sub_20BFA6B00(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BFA6B2C(a2);
  return sub_20BFA6B94(a1, v3);
}

uint64_t sub_20BFA6B2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFA8B44(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Invoke, (uint64_t)&stru_24C51BF90);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFA6B94(_QWORD *a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = &unk_24C522028;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  v8 = *a2;
  v9 = a2[1];
  v10 = *a2;
  v11 = *(_OWORD *)v4;
  v12 = *((_OWORD *)v4 + 1);
  v13 = *(_OWORD *)v5;
  v14 = *((_OWORD *)v5 + 1);
  v6 = operator new(0x80uLL);
  v6[4] = v11;
  v6[5] = v12;
  v6[6] = v13;
  v6[7] = v14;
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v10;
  v6[3] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFA6C34(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C522028;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFA6C74(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C522028;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFA6CB4(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522028;
  v4 = operator new(0x80uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  v9 = v5[4];
  v10 = v5[5];
  v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  v4[4] = v9;
  v4[5] = v10;
  *(_QWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFA6D2C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFA7FC8(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

char *sub_20BFA6D74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  float64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *result;
  unsigned int *v21;
  unsigned int v22;
  _BYTE v23[16];
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28[10];
  uint64_t v29;

  sub_20BFA80BC((uint64_t)v23, a1, a2);
  if (v23[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v28, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    v13 = sub_20BFA881C((uint64_t)&v29, v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
  }
  else
  {
    v13 = v24;
    v15 = v25;
    v17 = v26;
    v19 = v27;
  }
  a3[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  *(float64_t *)result = v13;
  *((_QWORD *)result + 1) = v15;
  *((_QWORD *)result + 2) = v17;
  *((_QWORD *)result + 3) = v19;
  v21 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  return result;
}

char *sub_20BFA6E54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  _BYTE v11[368];

  sub_20BFA80BC((uint64_t)v11, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  v10 = *(_OWORD *)v4;
  v5 = v4[2];
  v6 = v4[3];
  a3[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  *(_OWORD *)result = v10;
  *((_QWORD *)result + 2) = v5;
  *((_QWORD *)result + 3) = v6;
  v8 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

void sub_20BFA6EE0(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::S"
            "etKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFA6F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA6F94(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFA70C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BFA70F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)result = *(_OWORD *)(v3 + 32);
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BFA7154(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[4];
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFA8ABC(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
  if (v22[1])
  {
    v8 = (_OWORD *)sub_20BFA6B2C(v5);
    v9 = a1[2];
    v10 = v8[1];
    *(_OWORD *)(v9 + 32) = *v8;
    *(_OWORD *)(v9 + 48) = v10;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::"
             "SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    v11 = v19;
    v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v13 = v18;
    if (v11 < 0)
      v13 = v12;
    if (v17 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  return sub_20BF4C2D8((uint64_t)v22);
}

void sub_20BFA72C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA7310@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  char *result;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  a1[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  v5 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

char *sub_20BFA7370@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_OWORD **)(a1 + 16);
  else
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 32);
  a2[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFA73DC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFA8ABC(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v24, v4);
    if (v24[1])
    {
      v8 = (_OWORD *)sub_20BFA6B2C(v5);
      v9 = (_OWORD *)a1[2];
      v10 = v8[1];
      *v9 = *v8;
      v9[1] = v10;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v19 = "ts/data.h";
      v20 = "SetLeftValue";
      v21 = 737;
      v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::S"
            "etLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      v11 = v18;
      v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v13 = v17;
      if (v11 < 0)
        v13 = v12;
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    sub_20BF4C2D8((uint64_t)v24);
  }
  else
  {
    v19 = "ts/data.h";
    v20 = "SetLeftValue";
    v21 = 725;
    v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "LeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFA7598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA75E8@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *result;
  unsigned int *v23;
  unsigned int v24;
  double v25[4];
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)a1 + 80))(&v26);
  v25[0] = sub_20BFA8B7C((pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
  v25[1] = v7;
  v25[2] = v8;
  v25[3] = v9;
  sub_20BF4C2D8((uint64_t)&v26);
  (*(void (**)(float64x2_t *__return_ptr, double *))(*(_QWORD *)a2 + 120))(&v26, a2);
  v10 = sub_20BFA8B7C((pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_20BF4C2D8((uint64_t)&v26);
  v26.f64[0] = v10;
  v26.f64[1] = v12;
  v27 = v14;
  v28 = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator-=(v26.f64, v25);
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v26, 1.0 / (v5 - v6));
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v17[3];
  a3[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = v18;
  *((_QWORD *)result + 1) = v19;
  *((_QWORD *)result + 2) = v20;
  *((_QWORD *)result + 3) = v21;
  v23 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  return result;
}

void sub_20BFA7738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20BFA7758@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  _OWORD *v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  char *result;
  unsigned int *v16;
  unsigned int v17;
  _OWORD v18[2];
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = (float64x2_t *)sub_20BFA6B2C(a1);
  v8 = v7[1];
  v23 = *v7;
  v24 = v8;
  v9 = (float64x2_t *)sub_20BFA6B2C(a2);
  v10 = v9[1];
  v21 = *v9;
  v22 = v10;
  v19 = v21;
  v20 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v19, a4);
  v12 = v11[1];
  v18[0] = *v11;
  v18[1] = v12;
  v19 = v23;
  v20 = v24;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v19.f64, (double *)v18);
  v13 = v19;
  v14 = v20;
  a3[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  *(float64x2_t *)result = v13;
  *((float64x2_t *)result + 1) = v14;
  v16 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  return result;
}

void sub_20BFA7854(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::"
          "GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA78FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA7918(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::"
          "GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA79C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA79DC()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::G"
          "etLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA7A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA7A9C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::G"
          "etRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA7B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA7B5C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "LeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA7BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA7C18()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "RightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA7CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA7CD4()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "LeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA7D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA7D90()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "RightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA7E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA7E4C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Get"
          "TangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFA7EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA7F0C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "TangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA7FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFA7FC8@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x188uLL);
  result = sub_20BFA8028(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFA8014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFA8028(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C522170;
  a1[1] = 0;
  sub_20BFA80BC((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFA8068(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFA807C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFA8090(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFA80BC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  float64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[4];
  char v11;

  *(_QWORD *)a1 = &unk_24C5221C0;
  if (a2 && a3)
  {
    sub_20BFA82E4(a1 + 48, a1 + 112, (uint64_t)a2, a3);
    v6 = sub_20BFA83F8(a1 + 48);
    if ((*(unsigned int (**)(_QWORD *, float64_t))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      v7 = a2[2];
      v8 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    v10[2] = 499;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfMatrix2d, true>::_I"
             "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d, IN"
             "TERPOLATABLE = true]";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

char *sub_20BFA81B0@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  float64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *result;
  unsigned int *v20;
  unsigned int v21;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 80), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    v12 = sub_20BFA881C(a1 + 240, v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
  }
  else
  {
    v12 = *(double *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 40);
  }
  a5[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  *(float64_t *)result = v12;
  *((_QWORD *)result + 1) = v14;
  *((_QWORD *)result + 2) = v16;
  *((_QWORD *)result + 3) = v18;
  v20 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a5 = result;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  return result;
}

char *sub_20BFA8268@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  v8 = *(_OWORD *)v2;
  v3 = v2[2];
  v4 = v2[3];
  a1[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  *(_OWORD *)result = v8;
  *((_QWORD *)result + 2) = v3;
  *((_QWORD *)result + 3) = v4;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

__n128 sub_20BFA82E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(a2 + 16) = v11;
  *(double *)(a2 + 32) = sub_20BFA8614(a3, a4);
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = sub_20BFA86F8(a3, a4).n128_u64[0];
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v16;
  *(_QWORD *)(a2 + 88) = v17;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v18 = *(_QWORD *)(a4 + 16);
    else
      v18 = *(_QWORD *)(a4 + 16) + 32;
  }
  else
  {
    v18 = *(_QWORD *)(a3 + 16) + 32;
  }
  result = *(__n128 *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 112) = v20;
  return result;
}

float64_t sub_20BFA83F8(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  float64_t result;
  __int128 v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float64x2_t v52;
  __int128 v53;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)a1 * 3.0;
  v5 = v3 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  v6 = v4 + v3 * -6.0;
  v7 = *(double *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v5 - v2 - v7 * 3.0 + v8;
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 208) = v9;
  v10 = *(_OWORD *)(a1 + 80);
  v52 = *(float64x2_t *)(a1 + 64);
  v53 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -3.0);
  v43 = *(float64x2_t *)v11;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  v14 = *(_OWORD *)(a1 + 112);
  v52 = *(float64x2_t *)(a1 + 96);
  v53 = v14;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  v16 = v15[1];
  v50 = *v15;
  v51 = v16;
  v52 = v43;
  *(_QWORD *)&v53 = v12;
  *((_QWORD *)&v53 + 1) = v13;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v50);
  v17 = v53;
  *(float64x2_t *)(a1 + 224) = v52;
  *(_OWORD *)(a1 + 240) = v17;
  v18 = *(_OWORD *)(a1 + 80);
  v52 = *(float64x2_t *)(a1 + 64);
  v53 = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  v44 = *(float64x2_t *)v19;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  v22 = *(_OWORD *)(a1 + 112);
  v52 = *(float64x2_t *)(a1 + 96);
  v53 = v22;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -6.0);
  v24 = v23[1];
  v50 = *v23;
  v51 = v24;
  v52 = v44;
  *(_QWORD *)&v53 = v20;
  *((_QWORD *)&v53 + 1) = v21;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v50);
  v45 = v52;
  v25 = v53;
  v26 = *(_OWORD *)(a1 + 144);
  v52 = *(float64x2_t *)(a1 + 128);
  v53 = v26;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  v28 = v27[1];
  v48 = *v27;
  v49 = v28;
  v52 = v45;
  v53 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v48);
  v29 = v53;
  *(float64x2_t *)(a1 + 256) = v52;
  *(_OWORD *)(a1 + 272) = v29;
  v30 = *(_OWORD *)(a1 + 80);
  v52 = *(float64x2_t *)(a1 + 64);
  v53 = v30;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -1.0);
  v46 = *(float64x2_t *)v31;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(_QWORD *)(v31 + 24);
  v34 = *(_OWORD *)(a1 + 112);
  v52 = *(float64x2_t *)(a1 + 96);
  v53 = v34;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  v36 = v35[1];
  v50 = *v35;
  v51 = v36;
  v52 = v46;
  *(_QWORD *)&v53 = v32;
  *((_QWORD *)&v53 + 1) = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v50);
  v47 = v52;
  v37 = v53;
  v38 = *(_OWORD *)(a1 + 144);
  v52 = *(float64x2_t *)(a1 + 128);
  v53 = v38;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -3.0);
  v40 = v39[1];
  v48 = *v39;
  v49 = v40;
  v52 = v47;
  v53 = v37;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v48);
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)(a1 + 160));
  result = v52.f64[0];
  v42 = v53;
  *(float64x2_t *)(a1 + 288) = v52;
  *(_OWORD *)(a1 + 304) = v42;
  return result;
}

double sub_20BFA8614(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  double v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  double *v15;
  uint64_t v16;
  _OWORD v17[2];
  float64x2_t v18;
  __int128 v19;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_OWORD *)(v11 + 48);
    v18 = *(float64x2_t *)(v11 + 32);
    v19 = v12;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v18, 2.0);
    v14 = *(_OWORD *)(v13 + 16);
    if (*(_BYTE *)(a2 + 68))
      v15 = *(double **)(a2 + 16);
    else
      v15 = (double *)(*(_QWORD *)(a2 + 16) + 32);
    v18 = *(float64x2_t *)v13;
    v19 = v14;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v18.f64, v15);
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v18, 0.333333333);
    return *(double *)v16;
  }
  else if (v2 == 2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(double *)(a1 + 56);
    v5 = *(_OWORD *)(v3 + 112);
    v18 = *(float64x2_t *)(v3 + 96);
    v19 = v5;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v18, v4);
    v7 = v6[1];
    v17[0] = *v6;
    v17[1] = v7;
    v8 = *(_OWORD *)(v3 + 48);
    v18 = *(float64x2_t *)(v3 + 32);
    v19 = v8;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v18.f64, (double *)v17);
    return v18.f64[0];
  }
  else
  {
    return *(double *)(*(_QWORD *)(a1 + 16) + 32);
  }
}

__n128 sub_20BFA86F8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;

  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
    return *(__n128 *)(*(_QWORD *)(a1 + 16) + 32);
  v3 = *(_DWORD *)(a2 + 64);
  if (v3 != 1)
  {
    if (v3 == 2)
    {
      v4 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(a2 + 68))
        v5 = *(_QWORD *)(a2 + 16);
      else
        v5 = v4 + 32;
      v6 = *(double *)(a2 + 48);
      v7 = *(_OWORD *)(v4 + 80);
      v21 = *(__n128 *)(v4 + 64);
      v22 = v7;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=((float64x2_t *)&v21, v6);
      v9 = v8[1];
      v19 = *v8;
      v20 = v9;
      v10 = *(_OWORD *)(v5 + 16);
      v21 = *(__n128 *)v5;
      v22 = v10;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator-=(v21.n128_f64, (double *)&v19);
      return v21;
    }
    if (v2 != 1)
      return *(__n128 *)(*(_QWORD *)(a2 + 16) + 32 * (*(_BYTE *)(a2 + 68) == 0));
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a2 + 68))
    v13 = *(_QWORD *)(a2 + 16);
  else
    v13 = *(_QWORD *)(a2 + 16) + 32;
  v14 = *(_OWORD *)(v13 + 16);
  v21 = *(__n128 *)v13;
  v22 = v14;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=((float64x2_t *)&v21, 2.0);
  v16 = v15[1];
  v19 = *v15;
  v20 = v16;
  v17 = *(_OWORD *)(v12 + 48);
  v21 = *(__n128 *)(v12 + 32);
  v22 = v17;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v21.n128_f64, (double *)&v19);
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=((float64x2_t *)&v21, 0.333333333);
  return *(__n128 *)v18;
}

float64_t sub_20BFA881C(uint64_t a1, double a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  float64x2_t v12;
  __int128 v13;

  v4 = *(_OWORD *)(a1 + 112);
  v12 = *(float64x2_t *)(a1 + 96);
  v13 = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v12, a2);
  v6 = *(_OWORD *)(v5 + 16);
  v12 = *(float64x2_t *)v5;
  v13 = v6;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v12.f64, (double *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v12, a2);
  v8 = *(_OWORD *)(v7 + 16);
  v12 = *(float64x2_t *)v7;
  v13 = v8;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v12.f64, (double *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v12, a2);
  v10 = *(_OWORD *)(v9 + 16);
  v12 = *(float64x2_t *)v9;
  v13 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v12.f64, (double *)a1);
  return v12.f64[0];
}

uint64_t *sub_20BFA88CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BFA88F0(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 8;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BFA891C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BFA892C()
{
  return 1;
}

unint64_t sub_20BFA8934(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  double *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  sub_20BF53A74((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_20BFA8990(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(*a1, *a2);
}

BOOL sub_20BFA899C(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(*a1, a2);
}

uint64_t sub_20BFA89A8()
{
  return 0;
}

_QWORD *sub_20BFA89B4(double **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BFA89C4()
{
  return &unk_24C51BF90;
}

uint64_t sub_20BFA89D0()
{
  return 0;
}

uint64_t sub_20BFA89D8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFA89E4()
{
  return 0;
}

uint64_t sub_20BFA89EC()
{
  return 0;
}

BOOL sub_20BFA89F4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFA8A2C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, a2, a3);
}

void *sub_20BFA8A4C()
{
  return &unk_24C51BF90;
}

uint64_t sub_20BFA8A58(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BFA8A60@<X0>(_OWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (char *)&off_24C5221E8 + 2;
  result = (char *)operator new(0x28uLL);
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

std::type_info *sub_20BFA8ABC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFA8B44(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51BF90, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFA8B44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 78)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BF90);
  else
    return 0;
}

double sub_20BFA8B7C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_20BFA8B44(a1) & 1) != 0)
    return sub_20BFA8BCC((uint64_t)a1);
  else
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Invoke, (uint64_t)&stru_24C51BF90);
}

double sub_20BFA8BCC(uint64_t a1)
{
  double v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(double *)sub_20BFA8C3C((unsigned int **)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v4 = 1;
  if (!v4)
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v2;
}

unsigned int *sub_20BFA8C3C(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF53AC0(a1);
}

_QWORD *sub_20BFA8CCC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3;

  v3 = sub_20BFA8CF8(a2);
  return sub_20BFA8D60(a1, v3);
}

uint64_t sub_20BFA8CF8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFAB53C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Invoke, (uint64_t)&stru_24C51BFC0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFA8D60(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  _OWORD v17[18];

  *a1 = &unk_24C5222B0;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  v6 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v6;
  *(_QWORD *)&v17[4] = *(_QWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v7;
  *(_OWORD *)((char *)&v17[5] + 8) = v7;
  *(_OWORD *)((char *)&v17[6] + 8) = v17[2];
  *(_OWORD *)((char *)&v17[7] + 8) = v6;
  *((_QWORD *)&v17[8] + 1) = *(_QWORD *)&v17[4];
  *(_OWORD *)((char *)&v17[4] + 8) = v17[0];
  v8 = *v4;
  v9 = v4[1];
  v10 = v4[3];
  v11 = *((_QWORD *)v4 + 8);
  v17[11] = v4[2];
  v17[12] = v10;
  v17[9] = v8;
  v17[10] = v9;
  v12 = v5[8];
  v13 = *((_OWORD *)v5 + 2);
  *(_OWORD *)((char *)&v17[16] + 8) = *((_OWORD *)v5 + 3);
  v14 = *((_OWORD *)v5 + 1);
  *(_OWORD *)((char *)&v17[13] + 8) = *(_OWORD *)v5;
  *(_QWORD *)&v17[13] = v11;
  *((_QWORD *)&v17[17] + 1) = v12;
  *(_OWORD *)((char *)&v17[15] + 8) = v13;
  *(_OWORD *)((char *)&v17[14] + 8) = v14;
  v15 = operator new(0x120uLL);
  memcpy(v15, v17, 0x120uLL);
  a1[2] = v15;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFA8E4C(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C5222B0;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFA8E8C(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C5222B0;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFA8ECC(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C5222B0;
  v4 = operator new(0x120uLL);
  memcpy(v4, *(const void **)(a1 + 16), 0x120uLL);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v5;
  return result;
}

double sub_20BFA8F38@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFAA34C(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

char *sub_20BFA8F80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  char *result;
  __int128 v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  _BYTE v18[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float64x2_t v24[20];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  sub_20BFAA440((uint64_t)v18, a1, a2);
  if (v18[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v24, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    sub_20BFAB064((uint64_t)&v25, (uint64_t)&v26, v12);
  }
  else
  {
    v28 = v21;
    v29 = v22;
    v30 = v23;
    v26 = v19;
    v27 = v20;
  }
  a3[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  v14 = v29;
  *((_OWORD *)result + 2) = v28;
  *((_OWORD *)result + 3) = v14;
  *((_QWORD *)result + 8) = v30;
  v15 = v27;
  *(_OWORD *)result = v26;
  *((_OWORD *)result + 1) = v15;
  v16 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  return result;
}

char *sub_20BFA9078@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  char *result;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE v12[728];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_20BFAA440((uint64_t)v12, a1, a2);
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  v5 = v4[3];
  v15 = v4[2];
  v16 = v5;
  v17 = *((_QWORD *)v4 + 8);
  v6 = v4[1];
  v13 = *v4;
  v14 = v6;
  a3[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  v8 = v16;
  *((_OWORD *)result + 2) = v15;
  *((_OWORD *)result + 3) = v8;
  *((_QWORD *)result + 8) = v17;
  v9 = v14;
  *(_OWORD *)result = v13;
  *((_OWORD *)result + 1) = v9;
  v10 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  return result;
}

void sub_20BFA9150(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::S"
            "etKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFA91E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFA9204(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFA9334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BFA9368@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  *(_OWORD *)result = *(_OWORD *)(v3 + 72);
  v5 = *(_OWORD *)(v3 + 104);
  v6 = *(_OWORD *)(v3 + 120);
  v7 = *(_OWORD *)(v3 + 88);
  *((_QWORD *)result + 8) = *(_QWORD *)(v3 + 136);
  *((_OWORD *)result + 2) = v5;
  *((_OWORD *)result + 3) = v6;
  *((_OWORD *)result + 1) = v7;
  v8 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t sub_20BFA93E0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[4];
  char v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFAB4B4(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v24, v4);
  if (v24[1])
  {
    v8 = sub_20BFA8CF8(v5);
    v9 = a1[2];
    *(_OWORD *)(v9 + 72) = *(_OWORD *)v8;
    v10 = *(_OWORD *)(v8 + 16);
    v11 = *(_OWORD *)(v8 + 32);
    v12 = *(_OWORD *)(v8 + 48);
    *(_QWORD *)(v9 + 136) = *(_QWORD *)(v8 + 64);
    *(_OWORD *)(v9 + 120) = v12;
    *(_OWORD *)(v9 + 104) = v11;
    *(_OWORD *)(v9 + 88) = v10;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v22[0] = "ts/data.h";
    v22[1] = "SetValue";
    v22[2] = 667;
    v22[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::"
             "SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v20);
    v13 = v21;
    v14 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v15 = v20;
    if (v13 < 0)
      v15 = v14;
    if (v19 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v15, (const char *)v16);
    if (v19 < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(v20[0]);
  }
  return sub_20BF4C2D8((uint64_t)v24);
}

void sub_20BFA9568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA95B8@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  char *result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  a1[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  *(_OWORD *)result = *v2;
  v5 = v2[2];
  v4 = v2[3];
  v6 = v2[1];
  *((_QWORD *)result + 8) = *((_QWORD *)v2 + 8);
  *((_OWORD *)result + 2) = v5;
  *((_OWORD *)result + 3) = v4;
  *((_OWORD *)result + 1) = v6;
  v7 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a1 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

char *sub_20BFA9630@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_QWORD *)(a1 + 16);
  else
    v3 = *(_QWORD *)(a1 + 16) + 72;
  a2[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  *(_OWORD *)result = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 16);
  *((_QWORD *)result + 8) = *(_QWORD *)(v3 + 64);
  *((_OWORD *)result + 2) = v6;
  *((_OWORD *)result + 3) = v5;
  *((_OWORD *)result + 1) = v7;
  v8 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

void sub_20BFA96B4(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFAB4B4(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v26, v4);
    if (v26[1])
    {
      v8 = sub_20BFA8CF8(v5);
      v9 = a1[2];
      *(_OWORD *)v9 = *(_OWORD *)v8;
      v10 = *(_OWORD *)(v8 + 16);
      v11 = *(_OWORD *)(v8 + 32);
      v12 = *(_OWORD *)(v8 + 48);
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v8 + 64);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 16) = v10;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v21 = "ts/data.h";
      v22 = "SetLeftValue";
      v23 = 737;
      v24 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::S"
            "etLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v19);
      v13 = v20;
      v14 = (void **)v19[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v15 = v19;
      if (v13 < 0)
        v15 = v14;
      if (v18 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v15, (const char *)v16);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v20 < 0)
        operator delete(v19[0]);
    }
    sub_20BF4C2D8((uint64_t)v26);
  }
  else
  {
    v21 = "ts/data.h";
    v22 = "SetLeftValue";
    v23 = 725;
    v24 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "LeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFA9888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFA98D8@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  char *result;
  __int128 v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  float64x2_t v32[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)a1 + 80))(v32);
  sub_20BFAB574((pxrInternal__aapl__pxrReserved__::VtValue *)v32, (uint64_t)v25);
  sub_20BF4C2D8((uint64_t)v32);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  (*(void (**)(float64x2_t *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v32, a2);
  sub_20BFAB574((pxrInternal__aapl__pxrReserved__::VtValue *)v32, (uint64_t)&v20);
  sub_20BF4C2D8((uint64_t)v32);
  v17 = v22;
  v18 = v23;
  v19 = v24;
  v15 = v20;
  v16 = v21;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator-=(v15.f64, (double *)v25);
  v32[2] = v17;
  v32[3] = v18;
  v33 = v19;
  v32[0] = v15;
  v32[1] = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(v32, 1.0 / (v5 - v6));
  v8 = v7[3];
  v29 = v7[2];
  v30 = v8;
  v31 = *((_QWORD *)v7 + 8);
  v9 = v7[1];
  v27 = *v7;
  v28 = v9;
  a3[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  v11 = v30;
  *((_OWORD *)result + 2) = v29;
  *((_OWORD *)result + 3) = v11;
  *((_QWORD *)result + 8) = v31;
  v12 = v28;
  *(_OWORD *)result = v27;
  *((_OWORD *)result + 1) = v12;
  v13 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  return result;
}

void sub_20BFA9A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1 - 128);
  _Unwind_Resume(a1);
}

char *sub_20BFA9A84@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *result;
  __int128 v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _OWORD v22[4];
  uint64_t v23;
  float64x2_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  float64x2_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = sub_20BFA8CF8(a1);
  v8 = *(_OWORD *)(v7 + 48);
  v36 = *(_OWORD *)(v7 + 32);
  v37 = v8;
  v38 = *(_QWORD *)(v7 + 64);
  v9 = *(_OWORD *)(v7 + 16);
  v34 = *(float64x2_t *)v7;
  v35 = v9;
  v10 = sub_20BFA8CF8(a2);
  v33 = *(_QWORD *)(v10 + 64);
  v11 = *(_OWORD *)(v10 + 48);
  v31 = *(_OWORD *)(v10 + 32);
  v32 = v11;
  v12 = *(_OWORD *)(v10 + 16);
  v29 = *(float64x2_t *)v10;
  v30 = v12;
  v26 = v31;
  v27 = v11;
  v28 = v33;
  v24 = v29;
  v25 = v12;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v24, a4);
  v22[0] = *(_OWORD *)v13;
  v14 = *(_OWORD *)(v13 + 16);
  v15 = *(_OWORD *)(v13 + 32);
  v16 = *(_OWORD *)(v13 + 48);
  v23 = *(_QWORD *)(v13 + 64);
  v22[2] = v15;
  v22[3] = v16;
  v22[1] = v14;
  v26 = v36;
  v27 = v37;
  v28 = v38;
  v24 = v34;
  v25 = v35;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v24.f64, (double *)v22);
  a3[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  v18 = v27;
  *((_OWORD *)result + 2) = v26;
  *((_OWORD *)result + 3) = v18;
  *((_QWORD *)result + 8) = v28;
  v19 = v25;
  *(float64x2_t *)result = v24;
  *((_OWORD *)result + 1) = v19;
  v20 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  return result;
}

void sub_20BFA9BD8(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::"
          "GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA9C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA9C9C(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::"
          "GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFA9D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA9D60()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::G"
          "etLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA9E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFA9E20()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::G"
          "etRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFA9EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA9EE0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "LeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFA9F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFA9F9C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "RightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAA03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAA058()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "LeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAA0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAA114()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "RightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAA1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFAA1D0()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Get"
          "TangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFAA274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAA290()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "TangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAA330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFAA34C@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x2F0uLL);
  result = sub_20BFAA3AC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFAA398(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFAA3AC(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C5223F8;
  a1[1] = 0;
  sub_20BFAA440((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFAA3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFAA400(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5223F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFAA414(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5223F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFAA440(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[4];
  char v13;

  *(_QWORD *)a1 = &unk_24C522448;
  if (a2 && a3)
  {
    sub_20BFAA6CC(a1 + 88, a1 + 152, (uint64_t)a2, a3);
    v6 = sub_20BFAA848(a1 + 88);
    if ((*(unsigned int (**)(_QWORD *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      v7 = a2[2];
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 72);
      v8 = *(_OWORD *)(v7 + 88);
      v9 = *(_OWORD *)(v7 + 104);
      v10 = *(_OWORD *)(v7 + 120);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(v7 + 136);
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  else
  {
    v12[0] = "ts/evalCache.h";
    v12[1] = "_Init";
    v12[2] = 499;
    v12[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfMatrix3d, true>::_I"
             "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d, IN"
             "TERPOLATABLE = true]";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

char *sub_20BFAA550@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  __int128 v12;
  __int128 v13;
  char *result;
  __int128 v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 120), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    sub_20BFAB064(a1 + 440, (uint64_t)&v19, v11);
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 64);
    v21 = *(_OWORD *)(a1 + 48);
    v22 = v12;
    v23 = *(_QWORD *)(a1 + 80);
    v13 = *(_OWORD *)(a1 + 32);
    v19 = *(_OWORD *)(a1 + 16);
    v20 = v13;
  }
  a5[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  v15 = v22;
  *((_OWORD *)result + 2) = v21;
  *((_OWORD *)result + 3) = v15;
  *((_QWORD *)result + 8) = v23;
  v16 = v20;
  *(_OWORD *)result = v19;
  *((_OWORD *)result + 1) = v16;
  v17 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a5 = result;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  return result;
}

char *sub_20BFAA614@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  char *result;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  v8 = v2[2];
  v9 = v2[3];
  v10 = *((_QWORD *)v2 + 8);
  v6 = *v2;
  v7 = v2[1];
  a1[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  *((_OWORD *)result + 2) = v8;
  *((_OWORD *)result + 3) = v9;
  *((_QWORD *)result + 8) = v10;
  *(_OWORD *)result = v6;
  *((_OWORD *)result + 1) = v7;
  v4 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

void *sub_20BFAA6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const void *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_OWORD *)(v10 + 88);
  v12 = *(_OWORD *)(v10 + 104);
  v13 = *(_OWORD *)(v10 + 120);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v10 + 136);
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 72);
  sub_20BFAAC84(a3, a4, (uint64_t)&v20);
  v14 = v20;
  *(_OWORD *)(a2 + 88) = v21;
  v15 = v23;
  *(_OWORD *)(a2 + 104) = v22;
  *(_OWORD *)(a2 + 120) = v15;
  *(_QWORD *)(a2 + 136) = v24;
  *(_OWORD *)(a2 + 72) = v14;
  sub_20BFAAE5C(a3, a4, (uint64_t)&v20);
  v16 = v23;
  *(_OWORD *)(a2 + 176) = v22;
  *(_OWORD *)(a2 + 192) = v16;
  *(_QWORD *)(a2 + 208) = v24;
  v17 = v21;
  *(_OWORD *)(a2 + 144) = v20;
  *(_OWORD *)(a2 + 160) = v17;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v18 = *(const void **)(a4 + 16);
    else
      v18 = (const void *)(*(_QWORD *)(a4 + 16) + 72);
  }
  else
  {
    v18 = (const void *)(*(_QWORD *)(a3 + 16) + 72);
  }
  return memmove((void *)(a2 + 216), v18, 0x48uLL);
}

double sub_20BFAA848(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float64x2_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  float64x2_t v55;
  double result;
  __int128 v57;
  _OWORD v58[4];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  float64x2_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  float64x2_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  float64x2_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  float64x2_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)a1 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  v5 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 16) * 3.0;
  *(double *)(a1 + 48) = v4 + v3 * -6.0 + v6;
  *(double *)(a1 + 56) = v3 * 3.0 - v2 - v6 + v5;
  v7 = a1 + 352;
  v8 = *(_OWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 384) = v10;
  *(_OWORD *)(a1 + 400) = v9;
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 80);
  v12 = *(float64x2_t *)(a1 + 64);
  *(float64x2_t *)(a1 + 352) = v12;
  *(_OWORD *)(a1 + 368) = v11;
  v13 = *(_OWORD *)(a1 + 112);
  v67 = v10;
  v68 = v13;
  v69 = *(_QWORD *)(a1 + 128);
  v65 = v12;
  v66 = v8;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -3.0);
  v81 = *(_OWORD *)(v14 + 16);
  v82 = *(_OWORD *)(v14 + 32);
  v83 = *(_OWORD *)(v14 + 48);
  v84 = *(_QWORD *)(v14 + 64);
  v80 = *(float64x2_t *)v14;
  v15 = *(_OWORD *)(a1 + 152);
  v16 = *(_OWORD *)(a1 + 184);
  v67 = *(_OWORD *)(a1 + 168);
  v68 = v16;
  v69 = *(_QWORD *)(a1 + 200);
  v65 = *(float64x2_t *)(a1 + 136);
  v66 = v15;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  v75 = *(float64x2_t *)v17;
  v18 = *(_OWORD *)(v17 + 16);
  v19 = *(_OWORD *)(v17 + 32);
  v20 = *(_OWORD *)(v17 + 48);
  v79 = *(_QWORD *)(v17 + 64);
  v77 = v19;
  v78 = v20;
  v76 = v18;
  v67 = v82;
  v68 = v83;
  v69 = v84;
  v65 = v80;
  v66 = v81;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v65.f64, v75.f64);
  v21 = v65;
  *(_OWORD *)(v7 + 88) = v66;
  v22 = v68;
  *(_OWORD *)(v7 + 104) = v67;
  *(_OWORD *)(v7 + 120) = v22;
  *(_QWORD *)(a1 + 488) = v69;
  *(float64x2_t *)(v7 + 72) = v21;
  v23 = *(_OWORD *)(a1 + 112);
  v67 = *(_OWORD *)(a1 + 96);
  v68 = v23;
  v69 = *(_QWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 80);
  v65 = *(float64x2_t *)(a1 + 64);
  v66 = v24;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  v76 = *(_OWORD *)(v25 + 16);
  v77 = *(_OWORD *)(v25 + 32);
  v78 = *(_OWORD *)(v25 + 48);
  v79 = *(_QWORD *)(v25 + 64);
  v75 = *(float64x2_t *)v25;
  v26 = *(_OWORD *)(a1 + 152);
  v27 = *(_OWORD *)(a1 + 184);
  v67 = *(_OWORD *)(a1 + 168);
  v68 = v27;
  v69 = *(_QWORD *)(a1 + 200);
  v65 = *(float64x2_t *)(a1 + 136);
  v66 = v26;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -6.0);
  v70 = *(float64x2_t *)v28;
  v29 = *(_OWORD *)(v28 + 16);
  v30 = *(_OWORD *)(v28 + 32);
  v31 = *(_OWORD *)(v28 + 48);
  v74 = *(_QWORD *)(v28 + 64);
  v72 = v30;
  v73 = v31;
  v71 = v29;
  v82 = v77;
  v83 = v78;
  v84 = v79;
  v80 = v75;
  v81 = v76;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v80.f64, v70.f64);
  v32 = *(_OWORD *)(a1 + 256);
  v67 = *(_OWORD *)(a1 + 240);
  v68 = v32;
  v69 = *(_QWORD *)(a1 + 272);
  v33 = *(_OWORD *)(a1 + 224);
  v65 = *(float64x2_t *)(a1 + 208);
  v66 = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  v60 = *v34;
  v35 = v34[1];
  v36 = v34[2];
  v37 = v34[3];
  v64 = *((_QWORD *)v34 + 8);
  v62 = v36;
  v63 = v37;
  v61 = v35;
  v67 = v82;
  v68 = v83;
  v69 = v84;
  v65 = v80;
  v66 = v81;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v65.f64, (double *)&v60);
  v38 = v68;
  *(_OWORD *)(a1 + 528) = v67;
  *(_OWORD *)(a1 + 544) = v38;
  *(_QWORD *)(a1 + 560) = v69;
  v39 = v66;
  *(float64x2_t *)(a1 + 496) = v65;
  *(_OWORD *)(a1 + 512) = v39;
  v40 = *(_OWORD *)(a1 + 112);
  v67 = *(_OWORD *)(a1 + 96);
  v68 = v40;
  v69 = *(_QWORD *)(a1 + 128);
  v41 = *(_OWORD *)(a1 + 80);
  v65 = *(float64x2_t *)(a1 + 64);
  v66 = v41;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -1.0);
  v71 = *(_OWORD *)(v42 + 16);
  v72 = *(_OWORD *)(v42 + 32);
  v73 = *(_OWORD *)(v42 + 48);
  v74 = *(_QWORD *)(v42 + 64);
  v70 = *(float64x2_t *)v42;
  v43 = *(_OWORD *)(a1 + 152);
  v44 = *(_OWORD *)(a1 + 184);
  v67 = *(_OWORD *)(a1 + 168);
  v68 = v44;
  v69 = *(_QWORD *)(a1 + 200);
  v65 = *(float64x2_t *)(a1 + 136);
  v66 = v43;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  v60 = *v45;
  v46 = v45[1];
  v47 = v45[2];
  v48 = v45[3];
  v64 = *((_QWORD *)v45 + 8);
  v62 = v47;
  v63 = v48;
  v61 = v46;
  v77 = v72;
  v78 = v73;
  v79 = v74;
  v75 = v70;
  v76 = v71;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v75.f64, (double *)&v60);
  v49 = *(_OWORD *)(a1 + 256);
  v67 = *(_OWORD *)(a1 + 240);
  v68 = v49;
  v69 = *(_QWORD *)(a1 + 272);
  v50 = *(_OWORD *)(a1 + 224);
  v65 = *(float64x2_t *)(a1 + 208);
  v66 = v50;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -3.0);
  v58[0] = *(_OWORD *)v51;
  v52 = *(_OWORD *)(v51 + 16);
  v53 = *(_OWORD *)(v51 + 32);
  v54 = *(_OWORD *)(v51 + 48);
  v59 = *(_QWORD *)(v51 + 64);
  v58[2] = v53;
  v58[3] = v54;
  v58[1] = v52;
  v82 = v77;
  v83 = v78;
  v84 = v79;
  v80 = v75;
  v81 = v76;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v80.f64, (double *)v58);
  v67 = v82;
  v68 = v83;
  v69 = v84;
  v65 = v80;
  v66 = v81;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v65.f64, (double *)(a1 + 280));
  v55 = v65;
  *(_OWORD *)(v7 + 232) = v66;
  result = *(double *)&v67;
  v57 = v68;
  *(_OWORD *)(v7 + 248) = v67;
  *(_OWORD *)(v7 + 264) = v57;
  *(_QWORD *)(a1 + 632) = v69;
  *(float64x2_t *)(v7 + 216) = v55;
  return result;
}

void sub_20BFAAC84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float64x2_t v25;
  double *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  float64x2_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_OWORD *)(v17 + 88);
    v19 = *(_OWORD *)(v17 + 120);
    v41 = *(_OWORD *)(v17 + 104);
    v42 = v19;
    v43 = *(_QWORD *)(v17 + 136);
    v39 = *(float64x2_t *)(v17 + 72);
    v40 = v18;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, 2.0);
    v21 = *(_QWORD *)(v20 + 64);
    v48 = v21;
    v23 = *(_OWORD *)(v20 + 32);
    v22 = *(_OWORD *)(v20 + 48);
    v46 = v23;
    v47 = v22;
    v25 = *(float64x2_t *)v20;
    v24 = *(_OWORD *)(v20 + 16);
    v44 = *(float64x2_t *)v20;
    v45 = v24;
    if (*(_BYTE *)(a2 + 68))
      v26 = *(double **)(a2 + 16);
    else
      v26 = (double *)(*(_QWORD *)(a2 + 16) + 72);
    v38 = v21;
    v36 = v23;
    v37 = v22;
    v34 = v25;
    v35 = v24;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v34.f64, v26);
    v41 = v36;
    v42 = v37;
    v43 = v38;
    v39 = v34;
    v40 = v35;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, 0.333333333);
    *(_OWORD *)a3 = *(_OWORD *)v27;
    v29 = *(_OWORD *)(v27 + 32);
    v28 = *(_OWORD *)(v27 + 48);
    v30 = *(_OWORD *)(v27 + 16);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(v27 + 64);
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 48) = v28;
  }
  else
  {
    if (v4 == 2)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(double *)(a1 + 56);
      v7 = *(_OWORD *)(v5 + 232);
      v8 = *(_OWORD *)(v5 + 264);
      v41 = *(_OWORD *)(v5 + 248);
      v42 = v8;
      v43 = *(_QWORD *)(v5 + 280);
      v39 = *(float64x2_t *)(v5 + 216);
      v40 = v7;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, v6);
      v34 = *(float64x2_t *)v9;
      v11 = *(_OWORD *)(v9 + 32);
      v10 = *(_OWORD *)(v9 + 48);
      v12 = *(_OWORD *)(v9 + 16);
      v38 = *(_QWORD *)(v9 + 64);
      v36 = v11;
      v37 = v10;
      v35 = v12;
      *(_OWORD *)a3 = *(_OWORD *)(v5 + 72);
      v13 = *(_OWORD *)(v5 + 88);
      v14 = *(_OWORD *)(v5 + 104);
      v15 = *(_OWORD *)(v5 + 120);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 136);
      *(_OWORD *)(a3 + 32) = v14;
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 16) = v13;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)a3, v34.f64);
      return;
    }
    v31 = *(_QWORD *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(v31 + 72);
    v32 = *(_OWORD *)(v31 + 104);
    v33 = *(_OWORD *)(v31 + 120);
    v30 = *(_OWORD *)(v31 + 88);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(v31 + 136);
    *(_OWORD *)(a3 + 32) = v32;
    *(_OWORD *)(a3 + 48) = v33;
  }
  *(_OWORD *)(a3 + 16) = v30;
}

void sub_20BFAAE5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float64x2_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[4];
  uint64_t v39;
  float64x2_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v4 = *(_DWORD *)(a1 + 64);
  if (!v4)
  {
    v18 = *(_QWORD *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(v18 + 72);
    v19 = *(_OWORD *)(v18 + 104);
    v20 = *(_OWORD *)(v18 + 120);
    v21 = *(_OWORD *)(v18 + 88);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(v18 + 136);
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v20;
LABEL_19:
    *(_OWORD *)(a3 + 16) = v21;
    return;
  }
  v5 = *(_DWORD *)(a2 + 64);
  if (v5 == 1)
    goto LABEL_10;
  if (v5 != 2)
  {
    if (v4 != 1)
    {
      if (*(_BYTE *)(a2 + 68))
        v37 = *(_QWORD *)(a2 + 16);
      else
        v37 = *(_QWORD *)(a2 + 16) + 72;
      *(_OWORD *)a3 = *(_OWORD *)v37;
      v36 = *(_OWORD *)(v37 + 32);
      v35 = *(_OWORD *)(v37 + 48);
      v21 = *(_OWORD *)(v37 + 16);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v37 + 64);
      goto LABEL_18;
    }
LABEL_10:
    v22 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(a2 + 68))
      v23 = *(_QWORD *)(a2 + 16);
    else
      v23 = *(_QWORD *)(a2 + 16) + 72;
    v45 = *(float64x2_t *)v23;
    v24 = *(_OWORD *)(v23 + 16);
    v25 = *(_OWORD *)(v23 + 32);
    v26 = *(_OWORD *)(v23 + 48);
    v49 = *(_QWORD *)(v23 + 64);
    v47 = v25;
    v48 = v26;
    v46 = v24;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v45, 2.0);
    v38[0] = *(_OWORD *)v27;
    v28 = *(_OWORD *)(v27 + 16);
    v29 = *(_OWORD *)(v27 + 32);
    v30 = *(_OWORD *)(v27 + 48);
    v39 = *(_QWORD *)(v27 + 64);
    v38[2] = v29;
    v38[3] = v30;
    v38[1] = v28;
    v31 = *(float64x2_t *)(v22 + 72);
    v44 = *(_QWORD *)(v22 + 136);
    v32 = *(_OWORD *)(v22 + 120);
    v42 = *(_OWORD *)(v22 + 104);
    v43 = v32;
    v33 = *(_OWORD *)(v22 + 88);
    v40 = v31;
    v41 = v33;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v40.f64, (double *)v38);
    v47 = v42;
    v48 = v43;
    v49 = v44;
    v45 = v40;
    v46 = v41;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v45, 0.333333333);
    *(_OWORD *)a3 = *(_OWORD *)v34;
    v36 = *(_OWORD *)(v34 + 32);
    v35 = *(_OWORD *)(v34 + 48);
    v21 = *(_OWORD *)(v34 + 16);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(v34 + 64);
LABEL_18:
    *(_OWORD *)(a3 + 32) = v36;
    *(_OWORD *)(a3 + 48) = v35;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 68))
    v7 = *(_QWORD *)(a2 + 16);
  else
    v7 = v6 + 72;
  v8 = *(double *)(a2 + 48);
  v9 = *(_OWORD *)(v6 + 192);
  v47 = *(_OWORD *)(v6 + 176);
  v48 = v9;
  v49 = *(_QWORD *)(v6 + 208);
  v10 = *(_OWORD *)(v6 + 160);
  v45 = *(float64x2_t *)(v6 + 144);
  v46 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v45, v8);
  v40 = *(float64x2_t *)v11;
  v13 = *(_OWORD *)(v11 + 32);
  v12 = *(_OWORD *)(v11 + 48);
  v14 = *(_OWORD *)(v11 + 16);
  v44 = *(_QWORD *)(v11 + 64);
  v42 = v13;
  v43 = v12;
  v41 = v14;
  *(_OWORD *)a3 = *(_OWORD *)v7;
  v15 = *(_OWORD *)(v7 + 16);
  v16 = *(_OWORD *)(v7 + 32);
  v17 = *(_OWORD *)(v7 + 48);
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(v7 + 64);
  *(_OWORD *)(a3 + 32) = v16;
  *(_OWORD *)(a3 + 48) = v17;
  *(_OWORD *)(a3 + 16) = v15;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator-=((double *)a3, v40.f64);
}

void sub_20BFAB064(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float64x2_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float64x2_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  float64x2_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  float64x2_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a1 + 232);
  v7 = *(_OWORD *)(a1 + 264);
  v31 = *(_OWORD *)(a1 + 248);
  v32 = v7;
  v33 = *(_QWORD *)(a1 + 280);
  v29 = *(float64x2_t *)(a1 + 216);
  v30 = v6;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v29, a3);
  v38 = *(_QWORD *)(v8 + 64);
  v9 = *(_OWORD *)(v8 + 48);
  v36 = *(_OWORD *)(v8 + 32);
  v37 = v9;
  v10 = *(_OWORD *)(v8 + 16);
  v34 = *(float64x2_t *)v8;
  v35 = v10;
  v19 = v34;
  v20 = v10;
  v21 = v36;
  v22 = v9;
  v23 = v38;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v19.f64, (double *)(a1 + 144));
  v31 = v21;
  v32 = v22;
  v33 = v23;
  v29 = v19;
  v30 = v20;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v29, a3);
  v43 = *(_QWORD *)(v11 + 64);
  v12 = *(_OWORD *)(v11 + 48);
  v41 = *(_OWORD *)(v11 + 32);
  v42 = v12;
  v13 = *(_OWORD *)(v11 + 16);
  v39 = *(float64x2_t *)v11;
  v40 = v13;
  v24 = v39;
  v25 = v13;
  v26 = v41;
  v27 = v12;
  v28 = v43;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v24.f64, (double *)(a1 + 72));
  v31 = v26;
  v32 = v27;
  v33 = v28;
  v29 = v24;
  v30 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v29, a3);
  v48 = *((_QWORD *)v14 + 8);
  v15 = v48;
  v16 = v14[3];
  v46 = v14[2];
  v47 = v16;
  v18 = v14[1];
  v44 = *v14;
  v17 = v44;
  v45 = v18;
  *(_OWORD *)(a2 + 32) = v46;
  *(_OWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 64) = v15;
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)a2, (double *)a1);
}

uint64_t *sub_20BFAB1D4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 72);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20BFAB1F8(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 18;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20BFAB224(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20BFAB234()
{
  return 1;
}

unint64_t sub_20BFAB23C(double **a1)
{
  char v2;

  return sub_20BFAB3A4((uint64_t)&v2, *a1);
}

BOOL sub_20BFAB260(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(*a1, *a2);
}

BOOL sub_20BFAB26C(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(*a1, a2);
}

uint64_t sub_20BFAB278()
{
  return 0;
}

_QWORD *sub_20BFAB284(double **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20BFAB294()
{
  return &unk_24C51BFC0;
}

uint64_t sub_20BFAB2A0()
{
  return 0;
}

uint64_t sub_20BFAB2A8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20BFAB2B4()
{
  return 0;
}

uint64_t sub_20BFAB2BC()
{
  return 0;
}

BOOL sub_20BFAB2C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20BFAB2FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, a2, a3);
}

void *sub_20BFAB31C()
{
  return &unk_24C51BFC0;
}

uint64_t sub_20BFAB328(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20BFAB330@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a1;
  a2[1] = (char *)&off_24C522470 + 2;
  result = (char *)operator new(0x50uLL);
  *(_OWORD *)result = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 16);
  *((_QWORD *)result + 8) = *(_QWORD *)(v3 + 64);
  *((_OWORD *)result + 2) = v6;
  *((_OWORD *)result + 3) = v5;
  *((_OWORD *)result + 1) = v7;
  v8 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)result + 18);
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

unint64_t sub_20BFAB3A4(uint64_t a1, double *a2)
{
  uint64_t v3;
  char v4;

  v4 = 0;
  v3 = 0;
  sub_20BF54774((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t sub_20BFAB414(_OWORD **a1)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = atomic_load((unsigned int *)*a1 + 18);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x50uLL);
    v4 = (uint64_t)*a1;
    *(_OWORD *)v3 = **a1;
    v6 = *(_OWORD *)(v4 + 32);
    v5 = *(_OWORD *)(v4 + 48);
    v7 = *(_OWORD *)(v4 + 16);
    *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 64);
    *((_OWORD *)v3 + 2) = v6;
    *((_OWORD *)v3 + 3) = v5;
    *((_OWORD *)v3 + 1) = v7;
    v8 = (unsigned int *)(v3 + 72);
    atomic_store(0, (unsigned int *)v3 + 18);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *a1 = v3;
    v10 = (unsigned int *)(v4 + 72);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      __dmb(9u);
      operator delete((void *)v4);
    }
  }
  return (uint64_t)*a1;
}

std::type_info *sub_20BFAB4B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFAB53C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51BFC0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFAB53C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 77)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BFC0);
  else
    return 0;
}

__n128 sub_20BFAB574@<Q0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  if ((sub_20BFAB53C(a1) & 1) != 0)
  {
    sub_20BFAB5E8(a1, a2);
  }
  else
  {
    v5 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Invoke, (uint64_t)&stru_24C51BFC0);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    v6 = *(_OWORD *)(v5 + 32);
    result = *(__n128 *)(v5 + 48);
    v7 = *(_OWORD *)(v5 + 16);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v5 + 64);
    *(_OWORD *)(a2 + 32) = v6;
    *(__n128 *)(a2 + 48) = result;
    *(_OWORD *)(a2 + 16) = v7;
  }
  return result;
}

uint64_t sub_20BFAB5E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  result = sub_20BFAB6B0(a1);
  v10 = *(_OWORD *)(result + 32);
  v11 = *(_OWORD *)(result + 48);
  v12 = *(_QWORD *)(result + 64);
  v8 = *(_OWORD *)result;
  v9 = *(_OWORD *)(result + 16);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(result + 48) = v5;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v6;
  *(_QWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v9;
  v7 = a1[1];
  if (v7 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(_QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

uint64_t sub_20BFAB6B0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BFAB414((_OWORD **)a1);
}

_QWORD *sub_20BFAB740(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _OWORD *v3;

  v3 = (_OWORD *)sub_20BFAB76C(a2);
  return sub_20BFAB7D4(a1, v3);
}

uint64_t sub_20BFAB76C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFADE60(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Invoke, (uint64_t)&stru_24C51BFE0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFAB7D4(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  _OWORD v20[32];

  *a1 = &unk_24C522538;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  v6 = a2[5];
  v20[4] = a2[4];
  v20[5] = v6;
  v7 = a2[7];
  v20[6] = a2[6];
  v20[7] = v7;
  v8 = a2[1];
  v20[0] = *a2;
  v20[1] = v8;
  v9 = a2[3];
  v20[2] = a2[2];
  v20[3] = v9;
  v20[14] = v20[6];
  v20[15] = v7;
  v20[12] = v20[4];
  v20[13] = v6;
  v20[10] = v20[2];
  v20[11] = v9;
  v20[8] = v20[0];
  v20[9] = v8;
  v10 = v4[1];
  v20[16] = *v4;
  v20[17] = v10;
  v11 = v4[7];
  v20[22] = v4[6];
  v20[23] = v11;
  v12 = v4[5];
  v20[20] = v4[4];
  v20[21] = v12;
  v13 = v4[3];
  v20[18] = v4[2];
  v20[19] = v13;
  v14 = v5[7];
  v20[30] = v5[6];
  v20[31] = v14;
  v15 = v5[5];
  v20[28] = v5[4];
  v20[29] = v15;
  v16 = v5[3];
  v20[26] = v5[2];
  v20[27] = v16;
  v17 = v5[1];
  v20[24] = *v5;
  v20[25] = v17;
  v18 = operator new(0x200uLL);
  memcpy(v18, v20, 0x200uLL);
  a1[2] = v18;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFAB8BC(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C522538;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFAB8FC(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C522538;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFAB93C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522538;
  v4 = operator new(0x200uLL);
  memcpy(v4, *(const void **)(a1 + 16), 0x200uLL);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v5;
  return result;
}

double sub_20BFAB9A8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFACE18(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

char *sub_20BFAB9F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  const double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  char *result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE v20[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t v29[34];
  float64x2_t v30[32];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  sub_20BFACF0C((uint64_t)v20, a1, a2);
  if (v20[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v29, v6, a4, v7, v8);
    v10 = 1.0;
    if (v9 <= 1.0)
      v10 = v9;
    v11 = v9 < 0.0;
    v12 = 0.0;
    if (!v11)
      v12 = v10;
    sub_20BFADC08(v30, (uint64_t)&v31, v12);
  }
  else
  {
    v35 = v25;
    v36 = v26;
    v37 = v27;
    v38 = v28;
    v31 = v21;
    v32 = v22;
    v33 = v23;
    v34 = v24;
  }
  a3[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v14 = v36;
  *((_OWORD *)result + 4) = v35;
  *((_OWORD *)result + 5) = v14;
  v15 = v38;
  *((_OWORD *)result + 6) = v37;
  *((_OWORD *)result + 7) = v15;
  v16 = v32;
  *(_OWORD *)result = v31;
  *((_OWORD *)result + 1) = v16;
  v17 = v34;
  *((_OWORD *)result + 2) = v33;
  *((_OWORD *)result + 3) = v17;
  v18 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  return result;
}

char *sub_20BFABAEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20BFACF0C((uint64_t)&v16, a1, a2);
  v4 = (__int128 *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  v5 = v4[5];
  v21 = v4[4];
  v22 = v5;
  v6 = v4[7];
  v23 = v4[6];
  v24 = v6;
  v7 = v4[1];
  v17 = *v4;
  v18 = v7;
  v8 = v4[3];
  v19 = v4[2];
  v20 = v8;
  a3[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v10 = v22;
  *((_OWORD *)result + 4) = v21;
  *((_OWORD *)result + 5) = v10;
  v11 = v24;
  *((_OWORD *)result + 6) = v23;
  *((_OWORD *)result + 7) = v11;
  v12 = v18;
  *(_OWORD *)result = v17;
  *((_OWORD *)result + 1) = v12;
  v13 = v20;
  *((_OWORD *)result + 2) = v19;
  *((_OWORD *)result + 3) = v13;
  v14 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  return result;
}

void sub_20BFABBC8(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::S"
            "etKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFABC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFABC7C(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFABDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BFABDE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = *(_OWORD **)(a1 + 16);
  a2[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v5 = v3[11];
  v7 = v3[8];
  v6 = v3[9];
  *((_OWORD *)result + 2) = v3[10];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)result = v7;
  *((_OWORD *)result + 1) = v6;
  v8 = v3[15];
  v10 = v3[12];
  v9 = v3[13];
  *((_OWORD *)result + 6) = v3[14];
  *((_OWORD *)result + 7) = v8;
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v9;
  v11 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

uint64_t sub_20BFABE54(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  _QWORD v25[4];
  char v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFADDD8(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v27, v4);
  if (v27[1])
  {
    v8 = (__int128 *)sub_20BFAB76C(v5);
    v9 = (_OWORD *)a1[2];
    v10 = *v8;
    v11 = v8[1];
    v12 = v8[3];
    v9[10] = v8[2];
    v9[11] = v12;
    v9[8] = v10;
    v9[9] = v11;
    v13 = v8[4];
    v14 = v8[5];
    v15 = v8[7];
    v9[14] = v8[6];
    v9[15] = v15;
    v9[12] = v13;
    v9[13] = v14;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v25[0] = "ts/data.h";
    v25[1] = "SetValue";
    v25[2] = 667;
    v25[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::"
             "SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v23);
    v16 = v24;
    v17 = (void **)v23[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v18 = v23;
    if (v16 < 0)
      v18 = v17;
    if (v22 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v18, (const char *)v19);
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  return sub_20BF4C2D8((uint64_t)v27);
}

void sub_20BFABFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFAC028@<X0>(_QWORD *a1@<X8>)
{
  __int128 *v2;
  char *result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = (__int128 *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  a1[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v4 = v2[3];
  v6 = *v2;
  v5 = v2[1];
  *((_OWORD *)result + 2) = v2[2];
  *((_OWORD *)result + 3) = v4;
  *(_OWORD *)result = v6;
  *((_OWORD *)result + 1) = v5;
  v7 = v2[7];
  v9 = v2[4];
  v8 = v2[5];
  *((_OWORD *)result + 6) = v2[6];
  *((_OWORD *)result + 7) = v7;
  *((_OWORD *)result + 4) = v9;
  *((_OWORD *)result + 5) = v8;
  v10 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a1 = result;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  return result;
}

char *sub_20BFAC0A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  char *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(__int128 **)(a1 + 16);
  else
    v3 = (__int128 *)(*(_QWORD *)(a1 + 16) + 128);
  a2[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *((_OWORD *)result + 2) = v3[2];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)result = v7;
  *((_OWORD *)result + 1) = v6;
  v8 = v3[7];
  v10 = v3[4];
  v9 = v3[5];
  *((_OWORD *)result + 6) = v3[6];
  *((_OWORD *)result + 7) = v8;
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v9;
  v11 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

void sub_20BFAC124(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFADDD8(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v29, v4);
    if (v29[1])
    {
      v8 = (__int128 *)sub_20BFAB76C(v5);
      v9 = (_OWORD *)a1[2];
      v10 = *v8;
      v11 = v8[1];
      v12 = v8[3];
      v9[2] = v8[2];
      v9[3] = v12;
      *v9 = v10;
      v9[1] = v11;
      v13 = v8[4];
      v14 = v8[5];
      v15 = v8[7];
      v9[6] = v8[6];
      v9[7] = v15;
      v9[4] = v13;
      v9[5] = v14;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v24 = "ts/data.h";
      v25 = "SetLeftValue";
      v26 = 737;
      v27 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::S"
            "etLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      v28 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v22);
      v16 = v23;
      v17 = (void **)v22[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v18 = v22;
      if (v16 < 0)
        v18 = v17;
      if (v21 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v18, (const char *)v19);
      if (v21 < 0)
        operator delete(__p[0]);
      if (v23 < 0)
        operator delete(v22[0]);
    }
    sub_20BF4C2D8((uint64_t)v29);
  }
  else
  {
    v24 = "ts/data.h";
    v25 = "SetLeftValue";
    v26 = 725;
    v27 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "LeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFAC2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFAC348@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  _OWORD v35[8];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44[8];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = a1[1];
  memset(v35, 0, sizeof(v35));
  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)a1 + 80))(v44);
  sub_20BFADE98((pxrInternal__aapl__pxrReserved__::VtValue *)v44, (uint64_t)v35);
  sub_20BF4C2D8((uint64_t)v44);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  (*(void (**)(float64x2_t *__return_ptr, double *))(*(_QWORD *)a2 + 120))(v44, a2);
  sub_20BFADE98((pxrInternal__aapl__pxrReserved__::VtValue *)v44, (uint64_t)&v27);
  sub_20BF4C2D8((uint64_t)v44);
  v23 = v31;
  v24 = v32;
  v25 = v33;
  v26 = v34;
  v19 = v27;
  v20 = v28;
  v21 = v29;
  v22 = v30;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator-=(v19.f64, (double *)v35);
  v44[4] = v23;
  v44[5] = v24;
  v44[6] = v25;
  v44[7] = v26;
  v44[0] = v19;
  v44[1] = v20;
  v44[2] = v21;
  v44[3] = v22;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v44, 1.0 / (v5 - v6));
  v8 = v7[5];
  v40 = v7[4];
  v41 = v8;
  v9 = v7[7];
  v42 = v7[6];
  v43 = v9;
  v10 = v7[1];
  v36 = *v7;
  v37 = v10;
  v11 = v7[3];
  v38 = v7[2];
  v39 = v11;
  a3[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v13 = v41;
  *((_OWORD *)result + 4) = v40;
  *((_OWORD *)result + 5) = v13;
  v14 = v43;
  *((_OWORD *)result + 6) = v42;
  *((_OWORD *)result + 7) = v14;
  v15 = v37;
  *(_OWORD *)result = v36;
  *((_OWORD *)result + 1) = v15;
  v16 = v39;
  *((_OWORD *)result + 2) = v38;
  *((_OWORD *)result + 3) = v16;
  v17 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  return result;
}

void sub_20BFAC4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1 - 192);
  _Unwind_Resume(a1);
}

char *sub_20BFAC51C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, _QWORD *a3@<X8>, double a4@<D0>)
{
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *result;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  unsigned int *v29;
  unsigned int v30;
  _OWORD v31[8];
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v7 = (float64x2_t *)sub_20BFAB76C(a1);
  v8 = v7[5];
  v52 = v7[4];
  v53 = v8;
  v9 = v7[7];
  v54 = v7[6];
  v55 = v9;
  v10 = v7[1];
  v48 = *v7;
  v49 = v10;
  v11 = v7[3];
  v50 = v7[2];
  v51 = v11;
  v12 = (float64x2_t *)sub_20BFAB76C(a2);
  v13 = v12[5];
  v44 = v12[4];
  v45 = v13;
  v14 = v12[7];
  v46 = v12[6];
  v47 = v14;
  v15 = v12[1];
  v40 = *v12;
  v41 = v15;
  v16 = v12[3];
  v42 = v12[2];
  v43 = v16;
  v36 = v44;
  v37 = v45;
  v38 = v46;
  v39 = v47;
  v32 = v40;
  v33 = v41;
  v34 = v42;
  v35 = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v32, a4);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[3];
  v31[2] = v17[2];
  v31[3] = v20;
  v31[0] = v18;
  v31[1] = v19;
  v21 = v17[4];
  v22 = v17[5];
  v23 = v17[7];
  v31[6] = v17[6];
  v31[7] = v23;
  v31[4] = v21;
  v31[5] = v22;
  v36 = v52;
  v37 = v53;
  v38 = v54;
  v39 = v55;
  v32 = v48;
  v33 = v49;
  v34 = v50;
  v35 = v51;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v32.f64, (double *)v31);
  a3[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v25 = v37;
  *((float64x2_t *)result + 4) = v36;
  *((float64x2_t *)result + 5) = v25;
  v26 = v39;
  *((float64x2_t *)result + 6) = v38;
  *((float64x2_t *)result + 7) = v26;
  v27 = v33;
  *(float64x2_t *)result = v32;
  *((float64x2_t *)result + 1) = v27;
  v28 = v35;
  *((float64x2_t *)result + 2) = v34;
  *((float64x2_t *)result + 3) = v28;
  v29 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  return result;
}

void sub_20BFAC6A4(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::"
          "GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFAC74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAC768(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::"
          "GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFAC810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFAC82C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::G"
          "etLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFAC8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFAC8EC()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::G"
          "etRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFAC990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAC9AC()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "LeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFACA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFACA68()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "RightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFACB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFACB24()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "LeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFACBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFACBE0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "RightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFACC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFACC9C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Get"
          "TangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFACD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFACD5C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "TangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFACDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFACE18@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x4E8uLL);
  result = sub_20BFACE78(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFACE64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFACE78(_QWORD *a1, _QWORD **a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C522680;
  a1[1] = 0;
  sub_20BFACF0C((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFACEB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFACECC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFACEE0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFACF0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  float64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[4];
  char v16;

  *(_QWORD *)a1 = &unk_24C5226D0;
  if (a2 && a3)
  {
    sub_20BFAD1B4(a1 + 144, (_OWORD *)(a1 + 208), (uint64_t)a2, a3);
    v6 = sub_20BFAD328(a1 + 144);
    if ((*(unsigned int (**)(_QWORD *, float64_t))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 0;
      v7 = (_OWORD *)a2[2];
      v9 = v7[10];
      v8 = v7[11];
      v10 = v7[9];
      *(_OWORD *)(a1 + 16) = v7[8];
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v8;
      v11 = v7[12];
      v12 = v7[13];
      v13 = v7[15];
      *(_OWORD *)(a1 + 112) = v7[14];
      *(_OWORD *)(a1 + 128) = v13;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v12;
    }
  }
  else
  {
    v15[0] = "ts/evalCache.h";
    v15[1] = "_Init";
    v15[2] = 499;
    v15[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfMatrix4d, true>::_I"
             "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d, IN"
             "TERPOLATABLE = true]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

char *sub_20BFAD018@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  double v8;
  double v9;
  BOOL v10;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 176), a2, a6, a3, a4);
    v9 = 1.0;
    if (v8 <= 1.0)
      v9 = v8;
    v10 = v8 < 0.0;
    v11 = 0.0;
    if (!v10)
      v11 = v9;
    sub_20BFADC08((float64x2_t *)(a1 + 720), (uint64_t)&v23, v11);
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 96);
    v27 = *(_OWORD *)(a1 + 80);
    v28 = v12;
    v13 = *(_OWORD *)(a1 + 128);
    v29 = *(_OWORD *)(a1 + 112);
    v30 = v13;
    v14 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a1 + 16);
    v24 = v14;
    v15 = *(_OWORD *)(a1 + 64);
    v25 = *(_OWORD *)(a1 + 48);
    v26 = v15;
  }
  a5[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  v17 = v28;
  *((_OWORD *)result + 4) = v27;
  *((_OWORD *)result + 5) = v17;
  v18 = v30;
  *((_OWORD *)result + 6) = v29;
  *((_OWORD *)result + 7) = v18;
  v19 = v24;
  *(_OWORD *)result = v23;
  *((_OWORD *)result + 1) = v19;
  v20 = v26;
  *((_OWORD *)result + 2) = v25;
  *((_OWORD *)result + 3) = v20;
  v21 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a5 = result;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  return result;
}

char *sub_20BFAD0EC@<X0>(_QWORD *a1@<X8>)
{
  __int128 *v2;
  char *result;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = (__int128 *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  v10 = v2[4];
  v11 = v2[5];
  v12 = v2[6];
  v13 = v2[7];
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  v9 = v2[3];
  a1[1] = (char *)&off_24C51E470 + 2;
  result = (char *)operator new(0x88uLL);
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v11;
  *((_OWORD *)result + 6) = v12;
  *((_OWORD *)result + 7) = v13;
  *(_OWORD *)result = v6;
  *((_OWORD *)result + 1) = v7;
  *((_OWORD *)result + 2) = v8;
  *((_OWORD *)result + 3) = v9;
  v4 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)result + 32);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

void *sub_20BFAD1B4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const void *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *(_QWORD *)a1 = *(_QWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 64);
  v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a4 + 8);
  v10 = *(_OWORD **)(a3 + 16);
  v11 = v10[8];
  v13 = v10[10];
  v12 = v10[11];
  a2[1] = v10[9];
  a2[2] = v13;
  *a2 = v11;
  v14 = v10[12];
  v15 = v10[13];
  v16 = v10[15];
  a2[6] = v10[14];
  a2[7] = v16;
  a2[4] = v14;
  a2[5] = v15;
  a2[3] = v12;
  sub_20BFAD80C(a3, a4, (uint64_t)&v27);
  v17 = v32;
  a2[12] = v31;
  a2[13] = v17;
  v18 = v34;
  a2[14] = v33;
  a2[15] = v18;
  v19 = v28;
  a2[8] = v27;
  a2[9] = v19;
  v20 = v30;
  a2[10] = v29;
  a2[11] = v20;
  sub_20BFAD9F8(a3, a4, (uint64_t)&v27);
  v21 = v32;
  a2[20] = v31;
  a2[21] = v21;
  v22 = v34;
  a2[22] = v33;
  a2[23] = v22;
  v23 = v28;
  a2[16] = v27;
  a2[17] = v23;
  v24 = v30;
  a2[18] = v29;
  a2[19] = v24;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(_BYTE *)(a4 + 68))
      v25 = *(const void **)(a4 + 16);
    else
      v25 = (const void *)(*(_QWORD *)(a4 + 16) + 128);
  }
  else
  {
    v25 = (const void *)(*(_QWORD *)(a3 + 16) + 128);
  }
  return memmove(a2 + 24, v25, 0x80uLL);
}

float64_t sub_20BFAD328(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  __int128 v13;
  float64x2_t v14;
  __int128 v15;
  __int128 v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64_t result;
  float64x2_t v99;
  _OWORD v100[8];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)a1 * 3.0;
  v5 = v3 * 3.0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  v6 = *(double *)(a1 + 16) * 3.0;
  v7 = v4 + v3 * -6.0 + v6;
  v8 = v5 - v2 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v7;
  *(double *)(a1 + 56) = v8;
  v10 = *(float64x2_t *)(a1 + 128);
  v9 = *(_OWORD *)(a1 + 144);
  v11 = *(float64x2_t *)(a1 + 112);
  *(float64x2_t *)(a1 + 640) = v10;
  *(_OWORD *)(a1 + 656) = v9;
  v12 = *(float64x2_t *)(a1 + 144);
  v14 = *(float64x2_t *)(a1 + 160);
  v13 = *(_OWORD *)(a1 + 176);
  *(float64x2_t *)(a1 + 672) = v14;
  *(_OWORD *)(a1 + 688) = v13;
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 592) = v15;
  v16 = *(_OWORD *)(a1 + 112);
  v18 = *(float64x2_t *)(a1 + 64);
  v17 = *(float64x2_t *)(a1 + 80);
  v19 = *(float64x2_t *)(a1 + 96);
  *(float64x2_t *)(a1 + 608) = v19;
  *(_OWORD *)(a1 + 624) = v16;
  v113 = v10;
  v114 = v12;
  v20 = *(float64x2_t *)(a1 + 176);
  v115 = v14;
  v116 = v20;
  v109 = v18;
  v110 = v17;
  v111 = v19;
  v112 = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -3.0);
  v137 = v21[4];
  v138 = v21[5];
  v139 = v21[6];
  v140 = v21[7];
  v133 = *v21;
  v134 = v21[1];
  v135 = v21[2];
  v136 = v21[3];
  v22 = *(float64x2_t *)(a1 + 272);
  v113 = *(float64x2_t *)(a1 + 256);
  v114 = v22;
  v23 = *(float64x2_t *)(a1 + 304);
  v115 = *(float64x2_t *)(a1 + 288);
  v116 = v23;
  v24 = *(float64x2_t *)(a1 + 208);
  v109 = *(float64x2_t *)(a1 + 192);
  v110 = v24;
  v25 = *(float64x2_t *)(a1 + 240);
  v111 = *(float64x2_t *)(a1 + 224);
  v112 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  v27 = *v26;
  v28 = v26[1];
  v29 = v26[3];
  v127 = v26[2];
  v128 = v29;
  v125 = v27;
  v126 = v28;
  v30 = v26[4];
  v31 = v26[5];
  v32 = v26[7];
  v131 = v26[6];
  v132 = v32;
  v129 = v30;
  v130 = v31;
  v115 = v139;
  v116 = v140;
  v113 = v137;
  v114 = v138;
  v111 = v135;
  v112 = v136;
  v109 = v133;
  v110 = v134;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v109.f64, v125.f64);
  v33 = v114;
  *(float64x2_t *)(a1 + 768) = v113;
  *(float64x2_t *)(a1 + 784) = v33;
  v34 = v116;
  *(float64x2_t *)(a1 + 800) = v115;
  *(float64x2_t *)(a1 + 816) = v34;
  v35 = v110;
  *(float64x2_t *)(a1 + 704) = v109;
  *(float64x2_t *)(a1 + 720) = v35;
  v36 = v112;
  *(float64x2_t *)(a1 + 736) = v111;
  *(float64x2_t *)(a1 + 752) = v36;
  v37 = *(float64x2_t *)(a1 + 144);
  v113 = *(float64x2_t *)(a1 + 128);
  v114 = v37;
  v38 = *(float64x2_t *)(a1 + 176);
  v115 = *(float64x2_t *)(a1 + 160);
  v116 = v38;
  v39 = *(float64x2_t *)(a1 + 80);
  v109 = *(float64x2_t *)(a1 + 64);
  v110 = v39;
  v40 = *(float64x2_t *)(a1 + 112);
  v111 = *(float64x2_t *)(a1 + 96);
  v112 = v40;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  v129 = v41[4];
  v130 = v41[5];
  v131 = v41[6];
  v132 = v41[7];
  v125 = *v41;
  v126 = v41[1];
  v127 = v41[2];
  v128 = v41[3];
  v42 = *(float64x2_t *)(a1 + 272);
  v113 = *(float64x2_t *)(a1 + 256);
  v114 = v42;
  v43 = *(float64x2_t *)(a1 + 304);
  v115 = *(float64x2_t *)(a1 + 288);
  v116 = v43;
  v44 = *(float64x2_t *)(a1 + 208);
  v109 = *(float64x2_t *)(a1 + 192);
  v110 = v44;
  v45 = *(float64x2_t *)(a1 + 240);
  v111 = *(float64x2_t *)(a1 + 224);
  v112 = v45;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -6.0);
  v47 = *v46;
  v48 = v46[1];
  v49 = v46[3];
  v119 = v46[2];
  v120 = v49;
  v117 = v47;
  v118 = v48;
  v50 = v46[4];
  v51 = v46[5];
  v52 = v46[7];
  v123 = v46[6];
  v124 = v52;
  v121 = v50;
  v122 = v51;
  v139 = v131;
  v140 = v132;
  v137 = v129;
  v138 = v130;
  v135 = v127;
  v136 = v128;
  v133 = v125;
  v134 = v126;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v133.f64, v117.f64);
  v53 = *(float64x2_t *)(a1 + 400);
  v113 = *(float64x2_t *)(a1 + 384);
  v114 = v53;
  v54 = *(float64x2_t *)(a1 + 432);
  v115 = *(float64x2_t *)(a1 + 416);
  v116 = v54;
  v55 = *(float64x2_t *)(a1 + 336);
  v109 = *(float64x2_t *)(a1 + 320);
  v110 = v55;
  v56 = *(float64x2_t *)(a1 + 368);
  v111 = *(float64x2_t *)(a1 + 352);
  v112 = v56;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  v58 = *v57;
  v59 = v57[1];
  v60 = v57[3];
  v103 = v57[2];
  v104 = v60;
  v101 = v58;
  v102 = v59;
  v61 = v57[4];
  v62 = v57[5];
  v63 = v57[7];
  v107 = v57[6];
  v108 = v63;
  v105 = v61;
  v106 = v62;
  v115 = v139;
  v116 = v140;
  v113 = v137;
  v114 = v138;
  v111 = v135;
  v112 = v136;
  v109 = v133;
  v110 = v134;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v109.f64, (double *)&v101);
  v64 = v114;
  *(float64x2_t *)(a1 + 896) = v113;
  *(float64x2_t *)(a1 + 912) = v64;
  v65 = v116;
  *(float64x2_t *)(a1 + 928) = v115;
  *(float64x2_t *)(a1 + 944) = v65;
  v66 = v110;
  *(float64x2_t *)(a1 + 832) = v109;
  *(float64x2_t *)(a1 + 848) = v66;
  v67 = v112;
  *(float64x2_t *)(a1 + 864) = v111;
  *(float64x2_t *)(a1 + 880) = v67;
  v68 = *(float64x2_t *)(a1 + 144);
  v113 = *(float64x2_t *)(a1 + 128);
  v114 = v68;
  v69 = *(float64x2_t *)(a1 + 176);
  v115 = *(float64x2_t *)(a1 + 160);
  v116 = v69;
  v70 = *(float64x2_t *)(a1 + 80);
  v109 = *(float64x2_t *)(a1 + 64);
  v110 = v70;
  v71 = *(float64x2_t *)(a1 + 112);
  v111 = *(float64x2_t *)(a1 + 96);
  v112 = v71;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -1.0);
  v121 = v72[4];
  v122 = v72[5];
  v123 = v72[6];
  v124 = v72[7];
  v117 = *v72;
  v118 = v72[1];
  v119 = v72[2];
  v120 = v72[3];
  v73 = *(float64x2_t *)(a1 + 272);
  v113 = *(float64x2_t *)(a1 + 256);
  v114 = v73;
  v74 = *(float64x2_t *)(a1 + 304);
  v115 = *(float64x2_t *)(a1 + 288);
  v116 = v74;
  v75 = *(float64x2_t *)(a1 + 208);
  v109 = *(float64x2_t *)(a1 + 192);
  v110 = v75;
  v76 = *(float64x2_t *)(a1 + 240);
  v111 = *(float64x2_t *)(a1 + 224);
  v112 = v76;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  v78 = *v77;
  v79 = v77[1];
  v80 = v77[3];
  v103 = v77[2];
  v104 = v80;
  v101 = v78;
  v102 = v79;
  v81 = v77[4];
  v82 = v77[5];
  v83 = v77[7];
  v107 = v77[6];
  v108 = v83;
  v105 = v81;
  v106 = v82;
  v131 = v123;
  v132 = v124;
  v129 = v121;
  v130 = v122;
  v127 = v119;
  v128 = v120;
  v125 = v117;
  v126 = v118;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v125.f64, (double *)&v101);
  v84 = *(float64x2_t *)(a1 + 400);
  v113 = *(float64x2_t *)(a1 + 384);
  v114 = v84;
  v85 = *(float64x2_t *)(a1 + 432);
  v115 = *(float64x2_t *)(a1 + 416);
  v116 = v85;
  v86 = *(float64x2_t *)(a1 + 336);
  v109 = *(float64x2_t *)(a1 + 320);
  v110 = v86;
  v87 = *(float64x2_t *)(a1 + 368);
  v111 = *(float64x2_t *)(a1 + 352);
  v112 = v87;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -3.0);
  v89 = *v88;
  v90 = v88[1];
  v91 = v88[3];
  v100[2] = v88[2];
  v100[3] = v91;
  v100[0] = v89;
  v100[1] = v90;
  v92 = v88[4];
  v93 = v88[5];
  v94 = v88[7];
  v100[6] = v88[6];
  v100[7] = v94;
  v100[4] = v92;
  v100[5] = v93;
  v139 = v131;
  v140 = v132;
  v137 = v129;
  v138 = v130;
  v135 = v127;
  v136 = v128;
  v133 = v125;
  v134 = v126;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v133.f64, (double *)v100);
  v113 = v137;
  v114 = v138;
  v115 = v139;
  v116 = v140;
  v109 = v133;
  v110 = v134;
  v111 = v135;
  v112 = v136;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v109.f64, (double *)(a1 + 448));
  v95 = v114;
  *(float64x2_t *)(a1 + 1024) = v113;
  *(float64x2_t *)(a1 + 1040) = v95;
  v96 = v116;
  *(float64x2_t *)(a1 + 1056) = v115;
  *(float64x2_t *)(a1 + 1072) = v96;
  v97 = v110;
  *(float64x2_t *)(a1 + 960) = v109;
  *(float64x2_t *)(a1 + 976) = v97;
  result = v111.f64[0];
  v99 = v112;
  *(float64x2_t *)(a1 + 992) = v111;
  *(float64x2_t *)(a1 + 1008) = v99;
  return result;
}

void sub_20BFAD80C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    v25 = *(float64x2_t **)(a1 + 16);
    v26 = v25[13];
    v60 = v25[12];
    v61 = v26;
    v27 = v25[15];
    v62 = v25[14];
    v63 = v27;
    v28 = v25[9];
    v56 = v25[8];
    v57 = v28;
    v29 = v25[11];
    v58 = v25[10];
    v59 = v29;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, 2.0);
    v31 = v30[5];
    v68 = v30[4];
    v69 = v31;
    v32 = v30[7];
    v70 = v30[6];
    v71 = v32;
    v33 = v30[1];
    v64 = *v30;
    v65 = v33;
    v34 = v30[3];
    v66 = v30[2];
    v67 = v34;
    if (*(_BYTE *)(a2 + 68))
      v35 = *(double **)(a2 + 16);
    else
      v35 = (double *)(*(_QWORD *)(a2 + 16) + 128);
    v52 = v68;
    v53 = v69;
    v54 = v70;
    v55 = v71;
    v48 = v64;
    v49 = v65;
    v50 = v66;
    v51 = v67;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v48.f64, v35);
    v60 = v52;
    v61 = v53;
    v62 = v54;
    v63 = v55;
    v56 = v48;
    v57 = v49;
    v58 = v50;
    v59 = v51;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, 0.333333333);
    v37 = v36[3];
    v39 = *v36;
    v38 = v36[1];
    *(_OWORD *)(a3 + 32) = v36[2];
    *(_OWORD *)(a3 + 48) = v37;
    *(_OWORD *)a3 = v39;
    *(_OWORD *)(a3 + 16) = v38;
    v40 = v36[6];
    v41 = v36[7];
    v43 = v36[4];
    v42 = v36[5];
  }
  else
  {
    if (v4 == 2)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(double *)(a1 + 56);
      v7 = *(float64x2_t *)(v5 + 464);
      v60 = *(float64x2_t *)(v5 + 448);
      v61 = v7;
      v8 = *(float64x2_t *)(v5 + 496);
      v62 = *(float64x2_t *)(v5 + 480);
      v63 = v8;
      v9 = *(float64x2_t *)(v5 + 400);
      v56 = *(float64x2_t *)(v5 + 384);
      v57 = v9;
      v10 = *(float64x2_t *)(v5 + 432);
      v58 = *(float64x2_t *)(v5 + 416);
      v59 = v10;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, v6);
      v12 = v11[3];
      v14 = *v11;
      v13 = v11[1];
      v50 = v11[2];
      v51 = v12;
      v48 = v14;
      v49 = v13;
      v15 = v11[7];
      v17 = v11[4];
      v16 = v11[5];
      v54 = v11[6];
      v55 = v15;
      v52 = v17;
      v53 = v16;
      v18 = *(_OWORD *)(v5 + 128);
      v19 = *(_OWORD *)(v5 + 144);
      v20 = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(a3 + 48) = v20;
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v19;
      v21 = *(_OWORD *)(v5 + 192);
      v22 = *(_OWORD *)(v5 + 208);
      v23 = *(_OWORD *)(v5 + 240);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(a3 + 112) = v23;
      *(_OWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 80) = v22;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)a3, v48.f64);
      return;
    }
    v44 = *(_OWORD **)(a1 + 16);
    v45 = v44[11];
    v47 = v44[8];
    v46 = v44[9];
    *(_OWORD *)(a3 + 32) = v44[10];
    *(_OWORD *)(a3 + 48) = v45;
    *(_OWORD *)a3 = v47;
    *(_OWORD *)(a3 + 16) = v46;
    v40 = v44[14];
    v41 = v44[15];
    v43 = v44[12];
    v42 = v44[13];
  }
  *(_OWORD *)(a3 + 96) = v40;
  *(_OWORD *)(a3 + 112) = v41;
  *(_OWORD *)(a3 + 64) = v43;
  *(_OWORD *)(a3 + 80) = v42;
}

void sub_20BFAD9F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 *v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  float64x2_t *v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[8];
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;

  v4 = *(_DWORD *)(a1 + 64);
  if (!v4)
  {
    v26 = *(_OWORD **)(a1 + 16);
    v27 = v26[11];
    v29 = v26[8];
    v28 = v26[9];
    *(_OWORD *)(a3 + 32) = v26[10];
    *(_OWORD *)(a3 + 48) = v27;
    *(_OWORD *)a3 = v29;
    *(_OWORD *)(a3 + 16) = v28;
    v30 = v26[14];
    v31 = v26[15];
    v33 = v26[12];
    v32 = v26[13];
LABEL_18:
    *(_OWORD *)(a3 + 96) = v30;
    *(_OWORD *)(a3 + 112) = v31;
    *(_OWORD *)(a3 + 64) = v33;
    *(_OWORD *)(a3 + 80) = v32;
    return;
  }
  v5 = *(_DWORD *)(a2 + 64);
  if (v5 == 1)
  {
LABEL_10:
    v34 = *(float64x2_t **)(a1 + 16);
    if (*(_BYTE *)(a2 + 68))
      v35 = *(float64x2_t **)(a2 + 16);
    else
      v35 = (float64x2_t *)(*(_QWORD *)(a2 + 16) + 128);
    v36 = *v35;
    v37 = v35[1];
    v38 = v35[3];
    v72 = v35[2];
    v73 = v38;
    v70 = v36;
    v71 = v37;
    v39 = v35[4];
    v40 = v35[5];
    v41 = v35[7];
    v76 = v35[6];
    v77 = v41;
    v74 = v39;
    v75 = v40;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v70, 2.0);
    v43 = *v42;
    v44 = v42[1];
    v45 = v42[3];
    v61[2] = v42[2];
    v61[3] = v45;
    v61[0] = v43;
    v61[1] = v44;
    v46 = v42[4];
    v47 = v42[5];
    v48 = v42[7];
    v61[6] = v42[6];
    v61[7] = v48;
    v61[4] = v46;
    v61[5] = v47;
    v49 = v34[11];
    v64 = v34[10];
    v65 = v49;
    v50 = v34[9];
    v62 = v34[8];
    v63 = v50;
    v51 = v34[15];
    v68 = v34[14];
    v69 = v51;
    v52 = v34[13];
    v66 = v34[12];
    v67 = v52;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v62.f64, (double *)v61);
    v74 = v66;
    v75 = v67;
    v76 = v68;
    v77 = v69;
    v70 = v62;
    v71 = v63;
    v72 = v64;
    v73 = v65;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v70, 0.333333333);
    v54 = v53[3];
    v56 = *v53;
    v55 = v53[1];
    *(_OWORD *)(a3 + 32) = v53[2];
    *(_OWORD *)(a3 + 48) = v54;
    *(_OWORD *)a3 = v56;
    *(_OWORD *)(a3 + 16) = v55;
    v30 = v53[6];
    v31 = v53[7];
    v33 = v53[4];
    v32 = v53[5];
    goto LABEL_18;
  }
  if (v5 != 2)
  {
    if (v4 != 1)
    {
      if (*(_BYTE *)(a2 + 68))
        v57 = *(__int128 **)(a2 + 16);
      else
        v57 = (__int128 *)(*(_QWORD *)(a2 + 16) + 128);
      v58 = v57[3];
      v60 = *v57;
      v59 = v57[1];
      *(_OWORD *)(a3 + 32) = v57[2];
      *(_OWORD *)(a3 + 48) = v58;
      *(_OWORD *)a3 = v60;
      *(_OWORD *)(a3 + 16) = v59;
      v30 = v57[6];
      v31 = v57[7];
      v33 = v57[4];
      v32 = v57[5];
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 68))
    v7 = *(__int128 **)(a2 + 16);
  else
    v7 = (__int128 *)(v6 + 128);
  v8 = *(double *)(a2 + 48);
  v9 = *(float64x2_t *)(v6 + 336);
  v74 = *(float64x2_t *)(v6 + 320);
  v75 = v9;
  v10 = *(float64x2_t *)(v6 + 368);
  v76 = *(float64x2_t *)(v6 + 352);
  v77 = v10;
  v11 = *(float64x2_t *)(v6 + 272);
  v70 = *(float64x2_t *)(v6 + 256);
  v71 = v11;
  v12 = *(float64x2_t *)(v6 + 304);
  v72 = *(float64x2_t *)(v6 + 288);
  v73 = v12;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v70, v8);
  v14 = v13[3];
  v16 = *v13;
  v15 = v13[1];
  v64 = v13[2];
  v65 = v14;
  v62 = v16;
  v63 = v15;
  v17 = v13[7];
  v19 = v13[4];
  v18 = v13[5];
  v68 = v13[6];
  v69 = v17;
  v66 = v19;
  v67 = v18;
  v20 = *v7;
  v21 = v7[1];
  v22 = v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(_OWORD *)(a3 + 48) = v22;
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v21;
  v23 = v7[4];
  v24 = v7[5];
  v25 = v7[7];
  *(_OWORD *)(a3 + 96) = v7[6];
  *(_OWORD *)(a3 + 112) = v25;
  *(_OWORD *)(a3 + 64) = v23;
  *(_OWORD *)(a3 + 80) = v24;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator-=((double *)a3, v62.f64);
}

void sub_20BFADC08(float64x2_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = a1[29];
  v49 = a1[28];
  v50 = v6;
  v7 = a1[31];
  v51 = a1[30];
  v52 = v7;
  v8 = a1[25];
  v45 = a1[24];
  v46 = v8;
  v9 = a1[27];
  v47 = a1[26];
  v48 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v45, a3);
  v11 = v10[5];
  v57 = v10[4];
  v58 = v11;
  v12 = v10[7];
  v59 = v10[6];
  v60 = v12;
  v13 = v10[1];
  v53 = *v10;
  v54 = v13;
  v14 = v10[3];
  v55 = v10[2];
  v56 = v14;
  v35 = v59;
  v36 = v60;
  v33 = v57;
  v34 = v58;
  v31 = v55;
  v32 = v14;
  v29 = v53;
  v30 = v54;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v29.f64, a1[16].f64);
  v49 = v33;
  v50 = v34;
  v51 = v35;
  v52 = v36;
  v45 = v29;
  v46 = v30;
  v47 = v31;
  v48 = v32;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v45, a3);
  v16 = v15[5];
  v65 = v15[4];
  v66 = v16;
  v17 = v15[7];
  v67 = v15[6];
  v68 = v17;
  v18 = v15[1];
  v61 = *v15;
  v62 = v18;
  v19 = v15[3];
  v63 = v15[2];
  v64 = v19;
  v43 = v67;
  v44 = v68;
  v41 = v65;
  v42 = v66;
  v39 = v63;
  v40 = v19;
  v37 = v61;
  v38 = v62;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v37.f64, a1[8].f64);
  v49 = v41;
  v50 = v42;
  v51 = v43;
  v52 = v44;
  v45 = v37;
  v46 = v38;
  v47 = v39;
  v48 = v40;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v45, a3);
  v21 = v20[5];
  v73 = v20[4];
  v74 = v21;
  v22 = v20[7];
  v75 = v20[6];
  v76 = v22;
  v23 = v20[1];
  v69 = *v20;
  v70 = v23;
  v24 = v20[3];
  v71 = v20[2];
  v72 = v24;
  v25 = v74;
  *(_OWORD *)(a2 + 64) = v73;
  *(_OWORD *)(a2 + 80) = v25;
  v26 = v76;
  *(_OWORD *)(a2 + 96) = v75;
  *(_OWORD *)(a2 + 112) = v26;
  v27 = v70;
  *(_OWORD *)a2 = v69;
  *(_OWORD *)(a2 + 16) = v27;
  v28 = v72;
  *(_OWORD *)(a2 + 32) = v71;
  *(_OWORD *)(a2 + 48) = v28;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)a2, a1->f64);
}

std::type_info *sub_20BFADDD8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFADE60(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51BFE0, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFADE60(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BFE0);
  else
    return 0;
}

__n128 sub_20BFADE98@<Q0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if ((sub_20BFADE60(a1) & 1) != 0)
  {
    sub_20BFADF0C((uint64_t)a1, (__int128 *)a2);
  }
  else
  {
    v5 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Invoke, (uint64_t)&stru_24C51BFE0);
    v6 = *(_OWORD *)(v5 + 48);
    v8 = *(_OWORD *)v5;
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a2 + 48) = v6;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    result = *(__n128 *)(v5 + 96);
    v9 = *(_OWORD *)(v5 + 112);
    v11 = *(_OWORD *)(v5 + 64);
    v10 = *(_OWORD *)(v5 + 80);
    *(__n128 *)(a2 + 96) = result;
    *(_OWORD *)(a2 + 112) = v9;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v10;
  }
  return result;
}

unsigned int *sub_20BFADF0C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  unsigned int *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  result = sub_20BFADFEC((unsigned int **)a1);
  v16 = *((_OWORD *)result + 4);
  v17 = *((_OWORD *)result + 5);
  v18 = *((_OWORD *)result + 6);
  v19 = *((_OWORD *)result + 7);
  v12 = *(_OWORD *)result;
  v13 = *((_OWORD *)result + 1);
  v14 = *((_OWORD *)result + 2);
  v15 = *((_OWORD *)result + 3);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  *((_OWORD *)result + 2) = a2[2];
  *((_OWORD *)result + 3) = v7;
  *(_OWORD *)result = v5;
  *((_OWORD *)result + 1) = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[7];
  *((_OWORD *)result + 6) = a2[6];
  *((_OWORD *)result + 7) = v10;
  *((_OWORD *)result + 4) = v8;
  *((_OWORD *)result + 5) = v9;
  a2[2] = v14;
  a2[3] = v15;
  *a2 = v12;
  a2[1] = v13;
  a2[6] = v18;
  a2[7] = v19;
  a2[4] = v16;
  a2[5] = v17;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 && (*(_QWORD *)(a1 + 8) & 3) != 3)
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

unsigned int *sub_20BFADFEC(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF54934(a1);
}

_QWORD *sub_20BFAE07C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BFAE0A8(a2);
  return sub_20BFAE110(a1, v3);
}

uint64_t sub_20BFAE0A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFAF48C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatd>::Invoke, (uint64_t)&stru_24C51C010);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFAE110(_QWORD *a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = &unk_24C522708;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  v8 = *a2;
  v9 = a2[1];
  v10 = *a2;
  v11 = *(_OWORD *)v4;
  v12 = *((_OWORD *)v4 + 1);
  v13 = *(_OWORD *)v5;
  v14 = *((_OWORD *)v5 + 1);
  v6 = operator new(0x80uLL);
  v6[4] = v11;
  v6[5] = v12;
  v6[6] = v13;
  v6[7] = v14;
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v10;
  v6[3] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFAE1B0(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C522708;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFAE1F0(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C522708;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFAE230(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522708;
  v4 = operator new(0x80uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  v9 = v5[4];
  v10 = v5[5];
  v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  v4[4] = v9;
  v4[5] = v10;
  *(_QWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFAE2A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFAF2F0(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

char *sub_20BFAE2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *result;
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[12];

  v18[0] = &unk_24C520D90;
  sub_20BF81BC4((uint64_t)v18, a1, a2);
  v18[0] = &unk_24C520D40;
  v8 = sub_20BF81C6C((uint64_t)v18, a4, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  a3[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  *(double *)result = v8;
  *((_QWORD *)result + 1) = v10;
  *((_QWORD *)result + 2) = v12;
  *((_QWORD *)result + 3) = v14;
  v16 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  return result;
}

char *sub_20BFAE3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;

  v5 = &unk_24C520D90;
  sub_20BF81BC4((uint64_t)&v5, a1, a2);
  v5 = &unk_24C520D40;
  return sub_20BF81B4C(a3);
}

void sub_20BFAE41C(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFAE4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFAE4D0(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFAE600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

char *sub_20BFAE634@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)result = *(_OWORD *)(v3 + 32);
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BFAE68C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[4];
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFAF404(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v22, v4);
  if (v22[1])
  {
    v8 = (_OWORD *)sub_20BFAE0A8(v5);
    v9 = a1[2];
    v10 = v8[1];
    *(_OWORD *)(v9 + 32) = *v8;
    *(_OWORD *)(v9 + 48) = v10;
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    v11 = v19;
    v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v13 = v18;
    if (v11 < 0)
      v13 = v12;
    if (v17 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  return sub_20BF4C2D8((uint64_t)v22);
}

void sub_20BFAE7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFAE848@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  char *result;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  a1[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  v5 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

char *sub_20BFAE8A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  char *result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_OWORD **)(a1 + 16);
  else
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 32);
  a2[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *((_OWORD *)result + 1) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20BFAE90C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFAF404(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v24, v4);
    if (v24[1])
    {
      v8 = (_OWORD *)sub_20BFAE0A8(v5);
      v9 = (_OWORD *)a1[2];
      v10 = v8[1];
      *v9 = *v8;
      v9[1] = v10;
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v19 = "ts/data.h";
      v20 = "SetLeftValue";
      v21 = 737;
      v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      v11 = v18;
      v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v13 = v17;
      if (v11 < 0)
        v13 = v12;
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    sub_20BF4C2D8((uint64_t)v24);
  }
  else
  {
    v19 = "ts/data.h";
    v20 = "SetLeftValue";
    v21 = 725;
    v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFAEAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFAEB18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  char *result;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  a1[1] = &off_24C51E750;
  result = (char *)operator new(0x28uLL);
  v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  v5 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

_QWORD *sub_20BFAEB74@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20BF4C6D0(a2, a1);
}

void sub_20BFAEB7C(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFAEC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAEC40(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFAECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFAED04()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFAEDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFAEDC4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFAEE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAEE84()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAEF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAEF40()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAEFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAEFFC()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAF09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAF0B8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAF158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFAF174()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFAF218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFAF234()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFAF2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFAF2F0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x78uLL);
  result = sub_20BFAF350(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFAF33C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFAF350(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C522850;
  v4 = *a2;
  v5 = *a3;
  a1[3] = &unk_24C520D90;
  sub_20BF81BC4((uint64_t)(a1 + 3), v4, v5);
  a1[3] = &unk_24C520D40;
  return a1;
}

void sub_20BFAF3B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFAF3C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFAF3D8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

std::type_info *sub_20BFAF404(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFAF48C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C010, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFAF48C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 89)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C010);
  else
    return 0;
}

_QWORD *sub_20BFAF4C4(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BFAF4F0(a2);
  return sub_20BFAF558(a1, v3);
}

uint64_t sub_20BFAF4F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFB08AC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatf>::Invoke, (uint64_t)&stru_24C51C020);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFAF558(_QWORD *a1, __int128 *a2)
{
  int *v4;
  int *v5;
  _OWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *a1 = &unk_24C5228A0;
  a1[1] = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  v8 = *a2;
  v9 = *a2;
  v10 = *(_OWORD *)v4;
  v11 = *(_OWORD *)v5;
  v6 = operator new(0x40uLL);
  *v6 = v8;
  v6[1] = v9;
  v6[2] = v10;
  v6[3] = v11;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

_QWORD *sub_20BFAF5E0(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C5228A0;
  v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BFAF620(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C5228A0;
  v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2)
    operator delete(v2);
  operator delete(__p);
}

__n128 sub_20BFAF660(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C5228A0;
  v4 = operator new(0x40uLL);
  v5 = *(__int128 **)(a1 + 16);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  *(_QWORD *)(a2 + 16) = v4;
  v9 = *(_QWORD *)(a1 + 62);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 62) = v9;
  return result;
}

double sub_20BFAF6C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFB0710(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_DWORD *sub_20BFAF710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD *result;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[8];

  v17[0] = &unk_24C520E78;
  sub_20BF81E58((uint64_t)v17, a1, a2);
  v17[0] = &unk_24C520E28;
  LODWORD(a4) = sub_20BF81EF8((uint64_t)v17, a4, v6, v7);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  a3[1] = &off_24C51E5E0;
  result = operator new(0x14uLL);
  *result = LODWORD(a4);
  result[1] = v9;
  result[2] = v11;
  result[3] = v13;
  v15 = result + 4;
  atomic_store(0, result + 4);
  *a3 = result;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  return result;
}

unsigned int *sub_20BFAF7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  void *v5;

  v5 = &unk_24C520E78;
  sub_20BF81E58((uint64_t)&v5, a1, a2);
  v5 = &unk_24C520E28;
  return sub_20BF81DF0(a3);
}

void sub_20BFAF83C(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFAF8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFAF8F0(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFAFA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20BFAFA54@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 16);
  a2[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *(_OWORD *)(v3 + 16);
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_20BFAFAAC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFB0824(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    *(_OWORD *)(a1[2] + 16) = *(_OWORD *)sub_20BFAF4F0(v5);
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BFAFC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BFAFC68@<X0>(unsigned int **a1@<X8>)
{
  int *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  a1[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *(_OWORD *)v2;
  v4 = result + 4;
  atomic_store(0, result + 4);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

unsigned int *sub_20BFAFCC4@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 68))
    v3 = *(_OWORD **)(a1 + 16);
  else
    v3 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 16);
  a2[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

void sub_20BFAFD2C(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) & 1) != 0)
  {
    v4 = sub_20BFB0824(a2);
    v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v21, v4);
    if (v21[1])
    {
      *(_OWORD *)a1[2] = *(_OWORD *)sub_20BFAF4F0(v5);
      if (((*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1) & 1) == 0)
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, 0);
    }
    else
    {
      v16 = "ts/data.h";
      v17 = "SetLeftValue";
      v18 = 737;
      v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      v8 = v15;
      v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      v10 = v14;
      if (v8 < 0)
        v10 = v9;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
    }
    sub_20BF4C2D8((uint64_t)v21);
  }
  else
  {
    v16 = "ts/data.h";
    v17 = "SetLeftValue";
    v18 = 725;
    v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_20BFAFEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BFAFF38@<X0>(unsigned int **a1@<X8>)
{
  int *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;

  v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  a1[1] = (unsigned int *)&off_24C51E5E0;
  result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)result = *(_OWORD *)v2;
  v4 = result + 4;
  atomic_store(0, result + 4);
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

_QWORD *sub_20BFAFF94@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20BF4C6D0(a2, a1);
}

void sub_20BFAFF9C(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB0044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB0060(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB0108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB0124()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB01C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB01E4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB0288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB02A4()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB0344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB0360()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB0400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB041C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB04BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB04D8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB0578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB0594()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFB0638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB0654()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB06F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFB0710@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = sub_20BFB0770(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFB075C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB0770(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24C5229E8;
  v4 = *a2;
  v5 = *a3;
  a1[3] = &unk_24C520E78;
  sub_20BF81E58((uint64_t)(a1 + 3), v4, v5);
  a1[3] = &unk_24C520E28;
  return a1;
}

void sub_20BFB07D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB07E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5229E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB07F8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5229E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

std::type_info *sub_20BFB0824(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFB08AC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24C51C020, v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFB08AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C020);
  else
    return 0;
}

uint64_t sub_20BFB08E4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)sub_20BFB0910(a2);
  return sub_20BFB0978(a1, v3);
}

uint64_t sub_20BFB0910(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BFB1AC0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFB1AF4, MEMORY[0x24BEDB770]);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20BFB0978(uint64_t a1, unsigned __int8 *a2)
{
  char *v4;

  *(_QWORD *)a1 = &unk_24C522A38;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  *(_DWORD *)(a1 + 16) = (*v4 << 16) | (*a2 << 8) | (*pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero() << 24) | *a2;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

_QWORD *sub_20BFB09E8(_QWORD *result)
{
  *result = &unk_24C522A38;
  return result;
}

__n128 sub_20BFB0A00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522A38;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFB0A34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFB1868(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

uint64_t sub_20BFB0A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  _BYTE v6[16];

  result = sub_20BFB195C((uint64_t)v6, a1, a2);
  v5 = v6[8];
  *(_QWORD *)(a3 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a3 = v5;
  return result;
}

char *sub_20BFB0AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *result;
  char v5;
  uint64_t v6;

  sub_20BFB195C((uint64_t)&v6, a1, a2);
  result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  v5 = *result;
  *(_QWORD *)(a3 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a3 = v5;
  return result;
}

void sub_20BFB0B18(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetKnotType(TsKnotType) [T = BOOL]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFB0BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB0BCC(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFB0CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB0D2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = *(_BYTE *)(result + 17);
  return result;
}

uint64_t sub_20BFB0D48(_BYTE *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFB1A38(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    a1[17] = *(_BYTE *)sub_20BFB0910(v5);
    if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetValue(VtValue) [T = BOOL]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BFB0EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_20BFB0EFC@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  *(_QWORD *)(a1 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a1 = *result;
  return result;
}

void sub_20BFB0F34(uint64_t a1, int a2)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    v5[2] = 684;
    v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetIsDualValued(BOOL) [T = BOOL]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a1 + 68) = 0;
  }
}

void sub_20BFB0FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB0FF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 16;
  if (!*(_BYTE *)(result + 68))
    v2 = 17;
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = *(_BYTE *)(result + v2);
  return result;
}

void sub_20BFB1024()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetLeftValue(VtValue) [T = BOOL]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB10C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20BFB10DC@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  *(_QWORD *)(a1 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a1 = *result;
  return result;
}

_QWORD *sub_20BFB1114@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20BF4C6D0(a2, a1);
}

void sub_20BFB111C(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetLeftTangentSlope() const [T = BOOL]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB11C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB11DC(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetRightTangentSlope() const [T = BOOL]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB1280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB129C()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetLeftTangentLength() const [T = BOOL]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB133C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB1358()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetRightTangentLength() const [T = BOOL]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB13F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB1414()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetLeftTangentSlope(VtValue) [T = BOOL]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB14B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB14CC()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetRightTangentSlope(VtValue) [T = BOOL]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB1568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB1584()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetLeftTangentLength(TsTime) [T = BOOL]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB1620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB163C()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetRightTangentLength(TsTime) [T = BOOL]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB16D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB16F4()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetTangentSymmetryBroken() const [T = BOOL]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFB1794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB17B0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetTangentSymmetryBroken(BOOL) [T = BOOL]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB184C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFB1868@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = sub_20BFB18C8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFB18B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB18C8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C522B80;
  a1[1] = 0;
  sub_20BFB195C((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFB1908(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB191C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB1930(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB195C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  char v6;

  *(_QWORD *)a1 = &unk_24C522BD0;
  if (a2 && a3)
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 17);
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    v5[2] = 417;
    v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<BOOL, false>::Ts_EvalCache(const Ts_TypedData<T> *, const Ts_"
            "TypedData<T> *) [T = BOOL, INTERPOLATABLE = false]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

uint64_t sub_20BFB19E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v2;
  return result;
}

char *sub_20BFB1A00@<X0>(uint64_t a1@<X8>)
{
  char *result;
  char v3;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  v3 = *result;
  *(_QWORD *)(a1 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a1 = v3;
  return result;
}

std::type_info *sub_20BFB1A38(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFB1AC0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB770], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFB1AC0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16))
    return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB770]);
}

_BYTE *sub_20BFB1AF4@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *result;

  result = operator new(1uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BFB1B34;
  a1[2] = MEMORY[0x24BEDB770];
  return result;
}

void sub_20BFB1B34(void *__p)
{
  if (__p)
    operator delete(__p);
}

int *sub_20BFB1B40(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  int *v3;
  int *v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v3 = (int *)sub_20BFB1BA8(a2);
  *(_QWORD *)a1 = &unk_24C522C08;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  v6 = *v3;
  v7 = *v4;
  v8 = *result;
  *(_DWORD *)(a1 + 16) = *v3;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(_QWORD *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_20BFB1BA8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20BFB2CEC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFB2D24, MEMORY[0x24BEDB798]);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

_QWORD *sub_20BFB1C10(_QWORD *result)
{
  *result = &unk_24C522C08;
  return result;
}

__n128 sub_20BFB1C28(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522C08;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFB1C5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFB2A94(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

uint64_t sub_20BFB1CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  _DWORD v6[4];

  result = sub_20BFB2B88((uint64_t)v6, a1, a2);
  v5 = v6[2];
  *(_QWORD *)(a3 + 8) = &unk_24C52008B;
  *(_DWORD *)a3 = v5;
  return result;
}

int *sub_20BFB1CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *result;
  int v5;
  uint64_t v6;

  sub_20BFB2B88((uint64_t)&v6, a1, a2);
  result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  v5 = *result;
  *(_QWORD *)(a3 + 8) = &unk_24C52008B;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_20BFB1D40(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetKnotType(TsKnotType) [T = int]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFB1DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB1DF4(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFB1F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB1F54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = *(_DWORD *)(result + 20);
  return result;
}

uint64_t sub_20BFB1F70(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  _QWORD v17[4];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_20BFB2C64(a2);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(v19, v4);
  if (v19[1])
  {
    a1[5] = *(_DWORD *)sub_20BFB1BA8(v5);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 152))(a1) & 1) == 0)
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetValue(VtValue) [T = int]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    v8 = v16;
    v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v10 = v15;
    if (v8 < 0)
      v10 = v9;
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  return sub_20BF4C2D8((uint64_t)v19);
}

void sub_20BFB20D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

int *sub_20BFB2124@<X0>(uint64_t a1@<X8>)
{
  int *result;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  *(_QWORD *)(a1 + 8) = &unk_24C52008B;
  *(_DWORD *)a1 = *result;
  return result;
}

void sub_20BFB215C(uint64_t a1, int a2)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    v5[2] = 684;
    v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetIsDualValued(BOOL) [T = int]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a1 + 68) = 0;
  }
}

void sub_20BFB2204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB2220@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 16;
  if (!*(_BYTE *)(result + 68))
    v2 = 20;
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = *(_DWORD *)(result + v2);
  return result;
}

void sub_20BFB2250()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetLeftValue(VtValue) [T = int]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB22EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_20BFB2308@<X0>(uint64_t a1@<X8>)
{
  int *result;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  *(_QWORD *)(a1 + 8) = &unk_24C52008B;
  *(_DWORD *)a1 = *result;
  return result;
}

_QWORD *sub_20BFB2340@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_20BF4C6D0(a2, a1);
}

void sub_20BFB2348(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  v5[2] = 784;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetLeftTangentSlope() const [T = int]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB23EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB2408(uint64_t a1@<X8>)
{
  void **v2;
  void *__p[2];
  char v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  v5[2] = 797;
  v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetRightTangentSlope() const [T = int]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_20BFB24AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB24C8()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetLeftTangentLength() const [T = int]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB2568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BFB2584()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetRightTangentLength() const [T = int]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_20BFB2624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB2640()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetLeftTangentSlope(VtValue) [T = int]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB26DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB26F8()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetRightTangentSlope(VtValue) [T = int]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB2794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB27B0()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetLeftTangentLength(TsTime) [T = int]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB2868()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetRightTangentLength(TsTime) [T = int]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB2904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB2920()
{
  void **v0;
  void *__p[2];
  char v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetTangentSymmetryBroken() const [T = int]";
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_20BFB29C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB29DC()
{
  void **v0;
  void *__p[2];
  char v2;
  _QWORD v3[4];
  char v4;

  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetTangentSymmetryBroken(BOOL) [T = int]";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BFB2A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BFB2A94@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = sub_20BFB2AF4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20BFB2AE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BFB2AF4(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24C522D50;
  a1[1] = 0;
  sub_20BFB2B88((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_20BFB2B34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BFB2B48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BFB2B5C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C522D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BFB2B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  char v6;

  *(_QWORD *)a1 = &unk_24C522DA0;
  if (a2 && a3)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 20);
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    v5[2] = 417;
    v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<int, false>::Ts_EvalCache(const Ts_TypedData<T> *, const Ts_T"
            "ypedData<T> *) [T = int, INTERPOLATABLE = false]";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

uint64_t sub_20BFB2C10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)(a2 + 8) = &unk_24C52008B;
  *(_DWORD *)a2 = v2;
  return result;
}

int *sub_20BFB2C2C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  int v3;

  result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  v3 = *result;
  *(_QWORD *)(a1 + 8) = &unk_24C52008B;
  *(_DWORD *)a1 = v3;
  return result;
}

std::type_info *sub_20BFB2C64(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  _QWORD v3[3];

  v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFB2CEC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB798], v1, v3);
    v1 = (std::type_info *)sub_20BF4B5D8(v1, v3);
    sub_20BF4C2D8((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_20BFB2CEC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 5)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB798]);
  else
    return 0;
}

_DWORD *sub_20BFB2D24@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20BFB2D64;
  a1[2] = MEMORY[0x24BEDB798];
  return result;
}

void sub_20BFB2D64(void *__p)
{
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20BFB2D70(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  __int128 *v3;

  v3 = (__int128 *)sub_20BFB2D9C(a2);
  return sub_20BFB2E04(a1, v3);
}

uint64_t sub_20BFB2D9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFB4608(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFB4640, (uint64_t)&stru_24C516910);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

_QWORD *sub_20BFB2E04(_QWORD *a1, __int128 *a2)
{
  __int128 *v4;
  __int128 *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  *a1 = &unk_24C522DD8;
  a1[1] = 0;
  v4 = (__int128 *)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  v5 = (__int128 *)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  sub_20BFB3F70((char *)&v8, a2, a2, v4, v5);
  v6 = (char *)operator new(0x60uLL);
  *(_OWORD *)v6 = v8;
  *((_QWORD *)v6 + 2) = v9;
  *(_OWORD *)(v6 + 24) = v10;
  *((_QWORD *)v6 + 5) = v11;
  *((_OWORD *)v6 + 3) = v12;
  *((_QWORD *)v6 + 8) = v13;
  *((_QWORD *)v6 + 11) = v15;
  *(_OWORD *)(v6 + 72) = v14;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(_QWORD *)((char *)a1 + 62) = 0;
  return a1;
}

void sub_20BFB2EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BFB2ED4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BFB2ED4(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20BFB2F34(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  *a1 = &unk_24C522DD8;
  v4 = (void **)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BFB40A4((int)v2, v3);
  return a1;
}

void sub_20BFB2F74(_QWORD *__p)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  *__p = &unk_24C522DD8;
  v4 = (void **)__p[2];
  v2 = __p + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20BFB40A4((int)v2, v3);
  operator delete(__p);
}

__n128 sub_20BFB2FB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24C522DD8;
  sub_20BFB410C((char **)(a2 + 16), (__int128 **)(a1 + 16));
  result = *(__n128 *)(a1 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_20BFB3008@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  v5 = a1;
  sub_20BFB4290(&v5, &v7, &v6);
  result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_20BFB3050(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  sub_20BFB4394((uint64_t)&v4, a1, a2);
  if (SHIBYTE(v6) < 0)
  {
    sub_20BDDBFAC(__p, (void *)v5, *((unint64_t *)&v5 + 1));
  }
  else
  {
    *(_OWORD *)__p = v5;
    v8 = v6;
  }
  *(_QWORD *)(a3 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a3, (uint64_t)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)v5);
}

void sub_20BFB30EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BFB3120(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *__p[2];
  void *v10;

  sub_20BFB4394((uint64_t)&v6, a1, a2);
  v4 = (void **)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *v4, (unint64_t)v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v10 = v4[2];
    *(_OWORD *)__p = v5;
  }
  *(_QWORD *)(a3 + 8) = &off_24C520700;
  sub_20BF77444((unsigned int **)a3, (uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7);
}

void sub_20BFB31B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20BFB31EC(_DWORD *a1, uint64_t a2)
{
  int v2;
  _QWORD v4[4];
  char v5;
  void *__p[2];
  uint64_t v7;

  v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, a2, __p) & 1) != 0)
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetKnotType(TsKnotType) [T = std::string]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BFB3280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BFB32A0(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  int v6;
  void **v7;
  const char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C521148, 2, (uint64_t)v15);
      v6 = v16;
      v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0)
        v10 = v15;
      else
        v10 = v7;
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    return 0;
  }
  return 1;
}

void sub_20BFB33D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

