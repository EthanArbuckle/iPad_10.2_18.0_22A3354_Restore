void sub_20C37FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37C6E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20C37FCCC(int **a1, uint64_t a2)
{
  int *v2;
  int *v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a1[3];
    do
    {
      switch(*v3)
      {
        case 0:
          v13 = *((_QWORD *)v8 + 3);
          if (!v13)
            sub_20BE9E974();
          v8 += 8;
          v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, a2);
          v6 = v14 & 1;
          if (HIDWORD(v14) == 1 && (_DWORD)v5 == 0)
            v5 = 1;
          else
            v5 = v5;
          break;
        case 1:
          v6 ^= 1u;
          break;
        case 2:
          ++v7;
          break;
        case 3:
          --v7;
          break;
        case 4:
        case 5:
          if (v3 != v2 && ((v6 ^ (*v3 != 4)) & 1) == 0)
          {
            v9 = v7;
            v10 = v7;
            do
            {
              v11 = *v3;
              if (*v3 == 3)
              {
                v9 = v10 - 1;
                v10 = v9;
                if (v9 == v7)
                  goto LABEL_26;
              }
              else
              {
                v12 = v8 + 8;
                if (v11)
                  v12 = v8;
                if (v11 == 2)
                  v9 = ++v10;
                else
                  v8 = v12;
              }
              ++v3;
            }
            while (v3 != v2);
            v3 = v2;
            v7 = v9;
          }
          break;
        default:
          break;
      }
LABEL_26:
      ++v3;
    }
    while (v3 != v2);
  }
  return v6 | (unint64_t)(v5 << 32);
}

uint64_t sub_20C37FE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_20C37FEB8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C37FEF8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20C37FEF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_20C37FF4C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C37FF4C(a1, *a2);
    sub_20C37FF4C(a1, a2[1]);
    sub_20C37F394((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20C37FF94(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 24);
  sub_20C37B300(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C37FFE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(*a1 + 32);
  if (v5 >= *(_QWORD *)(*a1 + 40))
  {
    v6 = sub_20C3800F4((uint64_t *)(v4 + 24), a2, v3);
  }
  else
  {
    sub_20C380200(*(_QWORD *)(*a1 + 32), a2, v3);
    v6 = v5 + 136;
    *(_QWORD *)(v4 + 32) = v5 + 136;
  }
  *(_QWORD *)(v4 + 32) = v6;
  v7 = *a1;
  v8 = *(_DWORD **)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v11 = *(_DWORD **)v7;
    v12 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_20BDDF694();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)sub_20BDE1330(v7 + 16, v15);
      v11 = *(_DWORD **)v7;
      v8 = *(_DWORD **)(v7 + 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = 0;
    v10 = v17 + 4;
    while (v8 != v11)
    {
      v19 = *--v8;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *(_QWORD *)v7 = v17;
    *(_QWORD *)(v7 + 8) = v10;
    *(_QWORD *)(v7 + 16) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v8 = 0;
    v10 = v8 + 1;
  }
  *(_QWORD *)(v7 + 8) = v10;
}

void sub_20C3800EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_20C3800F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xF0F0F0F0F0F0F0)
    v11 = 0x1E1E1E1E1E1E1E1;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20C381580(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[136 * v5];
  v18 = &v12[136 * v11];
  sub_20C380200((uint64_t)v16, a2, a3);
  v17 = v16 + 136;
  sub_20C38150C(a1, &v15);
  v13 = a1[1];
  sub_20C3817E4(&v15);
  return v13;
}

void sub_20C3801EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3817E4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C380200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _QWORD v8[2];

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v6 + 1);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v8[0] = a1;
  v8[1] = a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Init(a1, a2, (uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t))sub_20C380328);
  return a1;
}

void sub_20C380290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  sub_20C37AB24(&a9);
  sub_20C3802B0(v9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3802B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 80);
  sub_20C37AC84(&v5);
  v5 = (void **)(a1 + 56);
  sub_20BDE5038(&v5);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

unint64_t sub_20C380328(uint64_t **a1, _QWORD *a2)
{
  return sub_20C38033C(a1, a2);
}

unint64_t sub_20C38033C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v2 = *a1;
  sub_20C380420(a2, (uint64_t)a1[1], (uint64_t)__p);
  v3 = (_QWORD *)v2[15];
  if ((unint64_t)v3 >= v2[16])
  {
    v4 = sub_20C3805BC(v2 + 14, (uint64_t)__p);
  }
  else
  {
    v3[2] = 0;
    v3[3] = 0;
    *v3 = 0;
    v3[1] = 0;
    *(_OWORD *)v3 = *(_OWORD *)__p;
    v3[2] = v7;
    __p[0] = 0;
    __p[1] = 0;
    v3[4] = 0;
    v3[5] = 0;
    *(_OWORD *)(v3 + 3) = v8;
    v3[5] = v9;
    v7 = 0;
    v8 = 0uLL;
    v9 = 0;
    v4 = (uint64_t)(v3 + 6);
  }
  v2[15] = v4;
  v10 = (void **)&v8;
  sub_20C37ABEC(&v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v2[15] - v2[14]) >> 4) - 1;
}

void sub_20C38040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C380574((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C380420(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  void *v6;
  void *__p;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD v14[2];
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v14[0] = a3;
  v14[1] = &v15;
  v13[1] = a3;
  v13[2] = &v16;
  v13[0] = a2;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::Walk(a1, (uint64_t)v14, (uint64_t)sub_20C380910, (uint64_t)v13, (void (*)(uint64_t, uint64_t))sub_20C380C30);
  v4 = HIBYTE(v18);
  v5 = HIBYTE(v18);
  if (v18 < 0)
    v4 = v17;
  if (v4)
  {
    v6 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v6;
      operator delete(v6);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v8 = 0;
    v9 = 0;
    __p = 0;
    sub_20C381480((void **)(a3 + 24));
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v19 = &v10;
    sub_20C37ABEC((void ***)&v19);
    if (__p)
    {
      v8 = (const char *)__p;
      operator delete(__p);
    }
    __p = "sdf/predicateProgram.h";
    v8 = "SdfLinkPredicateExpression";
    v9 = 229;
    v10 = "SdfPredicateProgram<DomainType> pxrInternal__aapl__pxrReserved__::SdfLinkPredicateExpression(const SdfPredicat"
          "eExpression &, const SdfPredicateLibrary<DomainType> &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject]";
    LOBYTE(v11) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3);
    v5 = HIBYTE(v18);
  }
  if (v5 < 0)
    operator delete(v16);
}

void sub_20C38054C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  sub_20C380574(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C380574(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 24);
  sub_20C37ABEC(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20C3805BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)sub_20BE6D0B4(v7, v9);
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v12];
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v15[2] = v11 + 48;
  sub_20C3806E4(a1, v15);
  v13 = a1[1];
  sub_20C38089C(v15);
  return v13;
}

void sub_20C3806D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C38089C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3806E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C380758((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C380758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C380818((uint64_t)v11);
  return v9;
}

uint64_t sub_20C380818(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C38084C((uint64_t *)a1);
  return a1;
}

void sub_20C38084C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C37ABA8(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_20C38089C(void **a1)
{
  sub_20C3808CC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C3808CC(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_20C37ABA8(v4, i - 48);
  }
}

void sub_20C380914(uint64_t *a1, int a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  _DWORD *v34;
  int v35;
  int *v36;
  char *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  int v46;

  v4 = a2 - 2;
  if ((a2 - 2) < 3)
  {
    if (a3 != 2)
    {
      if (a3 != 1)
        return;
      v5 = *a1;
      if (v4 > 2)
        v6 = -1;
      else
        v6 = dword_20CAE0070[v4];
      v12 = *(_QWORD *)(v5 + 16);
      v13 = *(int **)(v5 + 8);
      if ((unint64_t)v13 >= v12)
      {
        v21 = *(int **)v5;
        v22 = ((uint64_t)v13 - *(_QWORD *)v5) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          sub_20BDDF694();
        v24 = v12 - (_QWORD)v21;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)sub_20BDE1330(v5 + 16, v25);
          v21 = *(int **)v5;
          v13 = *(int **)(v5 + 8);
        }
        else
        {
          v26 = 0;
        }
        v36 = (int *)&v26[4 * v22];
        v37 = &v26[4 * v25];
        *v36 = v6;
        v14 = v36 + 1;
        while (v13 != v21)
        {
          v38 = *--v13;
          *--v36 = v38;
        }
        *(_QWORD *)v5 = v36;
        *(_QWORD *)(v5 + 8) = v14;
        *(_QWORD *)(v5 + 16) = v37;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v13 = v6;
        v14 = v13 + 1;
      }
      *(_QWORD *)(v5 + 8) = v14;
      v7 = *a1;
      v8 = *(int **)(v7 + 8);
      v39 = *(_QWORD *)(v7 + 16);
      if ((unint64_t)v8 < v39)
      {
        v10 = 2;
        goto LABEL_51;
      }
      v15 = *(int **)v7;
      v40 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
      v41 = v40 + 1;
      if (!((unint64_t)(v40 + 1) >> 62))
      {
        v42 = v39 - (_QWORD)v15;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)sub_20BDE1330(v7 + 16, v43);
          v15 = *(int **)v7;
          v8 = *(int **)(v7 + 8);
        }
        else
        {
          v44 = 0;
        }
        v32 = &v44[4 * v40];
        v33 = &v44[4 * v43];
        *(_DWORD *)v32 = 2;
        v34 = v32 + 4;
        while (v8 != v15)
        {
          v45 = *--v8;
          *((_DWORD *)v32 - 1) = v45;
          v32 -= 4;
        }
LABEL_68:
        *(_QWORD *)v7 = v32;
        *(_QWORD *)(v7 + 8) = v34;
        *(_QWORD *)(v7 + 16) = v33;
        if (v15)
          operator delete(v15);
        goto LABEL_70;
      }
      goto LABEL_72;
    }
    v7 = *a1;
    v8 = *(int **)(*a1 + 8);
    v11 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v8 >= v11)
    {
      v15 = *(int **)v7;
      v16 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
      v17 = v16 + 1;
      if (!((unint64_t)(v16 + 1) >> 62))
      {
        v18 = v11 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_20BDE1330(v7 + 16, v19);
          v15 = *(int **)v7;
          v8 = *(int **)(v7 + 8);
        }
        else
        {
          v20 = 0;
        }
        v32 = &v20[4 * v16];
        v33 = &v20[4 * v19];
        *(_DWORD *)v32 = 3;
        v34 = v32 + 4;
        while (v8 != v15)
        {
          v35 = *--v8;
          *((_DWORD *)v32 - 1) = v35;
          v32 -= 4;
        }
        goto LABEL_68;
      }
LABEL_72:
      sub_20BDDF694();
    }
    v10 = 3;
LABEL_51:
    *v8 = v10;
    v34 = v8 + 1;
LABEL_70:
    *(_QWORD *)(v7 + 8) = v34;
    return;
  }
  if (a2 == 1 && a3 == 1)
  {
    v7 = *a1;
    v8 = *(int **)(*a1 + 8);
    v9 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v8 >= v9)
    {
      v15 = *(int **)v7;
      v27 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
      v28 = v27 + 1;
      if (!((unint64_t)(v27 + 1) >> 62))
      {
        v29 = v9 - (_QWORD)v15;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)sub_20BDE1330(v7 + 16, v30);
          v15 = *(int **)v7;
          v8 = *(int **)(v7 + 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[4 * v27];
        v33 = &v31[4 * v30];
        *(_DWORD *)v32 = 1;
        v34 = v32 + 4;
        while (v8 != v15)
        {
          v46 = *--v8;
          *((_DWORD *)v32 - 1) = v46;
          v32 -= 4;
        }
        goto LABEL_68;
      }
      goto LABEL_72;
    }
    v10 = 1;
    goto LABEL_51;
  }
}

_QWORD *sub_20C380C34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void **v14;
  std::string::size_type v15;
  char *v16;
  char *v17;
  int v18;
  _QWORD *result;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C380E84(*(_QWORD **)a1, a2 + 8, a2 + 32, v23);
  if (v24)
  {
    sub_20C381024((uint64_t *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v23);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_DWORD **)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    if ((unint64_t)v4 >= v5)
    {
      v8 = *(_DWORD **)v3;
      v9 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        sub_20BDDF694();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)sub_20BDE1330(v3 + 16, v12);
        v8 = *(_DWORD **)v3;
        v4 = *(_DWORD **)(v3 + 8);
      }
      else
      {
        v13 = 0;
      }
      v16 = &v13[4 * v9];
      v17 = &v13[4 * v12];
      *(_DWORD *)v16 = 0;
      v6 = v16 + 4;
      while (v4 != v8)
      {
        v18 = *--v4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      *(_QWORD *)v3 = v16;
      *(_QWORD *)(v3 + 8) = v6;
      *(_QWORD *)(v3 + 16) = v17;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v4 = 0;
      v6 = v4 + 1;
    }
    *(_QWORD *)(v3 + 8) = v6;
    goto LABEL_32;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_17;
    goto LABEL_16;
  }
  if (*(_BYTE *)(v7 + 23))
LABEL_16:
    std::string::append((std::string *)v7, ", ");
LABEL_17:
  std::operator+<char>();
  if ((v22 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v15 = v22;
  else
    v15 = (std::string::size_type)__p[1];
  std::string::append(*(std::string **)(a1 + 16), (const std::string::value_type *)v14, v15);
  if ((char)v22 < 0)
    operator delete(__p[0]);
LABEL_32:
  result = v24;
  if (v24 == v23)
  {
    v20 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_20C380E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v19;
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  v19 = a18;
  if (a18 == &a15)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_8;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void sub_20C380E84(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  _QWORD v16[3];
  const char *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  a4[3] = 0;
  v8 = sub_20BEF33B4((uint64_t)a1, a2);
  v9 = sub_20C381124(a1, (unsigned __int8 *)a2, v8);
  if (a1[4] + 56 * a1[5] != v9)
  {
    v11 = *(_QWORD *)(v9 + 32);
    v10 = *(_QWORD *)(v9 + 40);
    while (1)
    {
      if (v10 == v11)
        return;
      v12 = *(_QWORD *)(v10 - 8);
      v10 -= 8;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v16, v12, a3);
      sub_20C017E4C(a4, (uint64_t)v16);
      v13 = v17;
      if (v17 == (const char *)v16)
        break;
      if (v17)
      {
        v14 = 5;
LABEL_8:
        (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
      }
      if (a4[3])
        return;
    }
    v13 = (const char *)v16;
    v14 = 4;
    goto LABEL_8;
  }
  v16[0] = "sdf/predicateLibrary.h";
  v16[1] = "_BindCall";
  v16[2] = 326;
  v17 = "PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObj"
        "ect>::_BindCall(const std::string &, const std::vector<SdfPredicateExpression::FnArg> &) const [DomainType = pxr"
        "Internal__aapl__pxrReserved__::UsdObject]";
  v18 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v15 = (const char *)a2;
  else
    v15 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 3, (pxrInternal__aapl__pxrReserved__ *)"No registered function '%s'", v15);
}

void sub_20C380FD0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C381024(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20BED2F10(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    sub_20C3811D4((uint64_t)v16, a2);
    v17 = v16 + 32;
    sub_20C381238(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)sub_20C3813E4(&v15);
  }
  else
  {
    result = sub_20C3811D4(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_20C381110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3813E4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C381124(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;

  v4 = *a1 & a3;
  v5 = a1[4];
  if (*(__int16 *)(v5 + 56 * v4 + 4) < 0)
    return v5 + 56 * a1[5];
  LOWORD(v7) = 0;
  while (!sub_20BEB4EF8((uint64_t)a1, (unsigned __int8 *)(v5 + 56 * v4 + 8), a2))
  {
    v4 = *a1 & (v4 + 1);
    v7 = (__int16)(v7 + 1);
    v5 = a1[4];
    if (v7 > *(__int16 *)(v5 + 56 * v4 + 4))
      return v5 + 56 * a1[5];
  }
  return a1[4] + 56 * v4;
}

uint64_t sub_20C3811D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20C381238(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3812AC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C3812AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3811D4(v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C381350((uint64_t)v12);
  return v10;
}

uint64_t sub_20C381350(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C381384((_QWORD *)a1);
  return a1;
}

_QWORD *sub_20C381384(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    result = (_QWORD *)v1[3];
    if (v1 == result)
    {
      result = v1;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 4;
  }
  return result;
}

void **sub_20C3813E4(void **a1)
{
  sub_20C381414(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *sub_20C381414(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 4;
      v3[2] = v1 - 4;
      v4 = (_QWORD *)*(v1 - 1);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_20C381480(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = (char *)*a1;
  if (!*a1)
    return;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v1)
    goto LABEL_10;
  do
  {
    v5 = v3 - 32;
    v6 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v6)
    {
      v6 = v3 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v3 = v5;
  }
  while (v5 != v1);
  v4 = *a1;
LABEL_10:
  a1[1] = v1;
  operator delete(v4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_20C38150C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3815C4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20C381580(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    sub_20BDDF5B4();
  return operator new(136 * a2);
}

uint64_t sub_20C3815C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 136;
      sub_20C381678(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C381760((uint64_t)v13);
  return v11;
}

__n128 sub_20C381678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v5;
  __n128 result;

  sub_20BFD38A4((_DWORD *)a2, (_DWORD *)a3);
  sub_20BFD38DC((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v5 = *(_WORD *)(a3 + 104);
  *(_BYTE *)(a2 + 106) = *(_BYTE *)(a3 + 106);
  *(_WORD *)(a2 + 104) = v5;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  result = *(__n128 *)(a3 + 112);
  *(__n128 *)(a2 + 112) = result;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  return result;
}

uint64_t sub_20C381760(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C381794((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C381794(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C37AA9C(v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C3817E4(void **a1)
{
  sub_20C381814(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C381814(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 136;
      result = sub_20C37AA9C(v4, v1 - 136);
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t sub_20C381858(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)a1;
  **(_QWORD **)a1 = v2 + 136;
  if ((a2 & 1) != 0)
    return 0x100000000;
  else
    return sub_20C381884(v2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

unint64_t sub_20C381884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  int v7;
  int v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a4;
  sub_20C348EEC(a2, &v7);
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Match(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (uint64_t)v9, (uint64_t)sub_20C381904);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  return v5;
}

void sub_20C3818F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C381908(uint64_t **a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int **v4;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  v4 = (int **)((*a1)[14] + 48 * a2);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1[1]);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v5, a3, (uint64_t)&v10);
  v6 = sub_20C37FCCC(v4, (uint64_t)&v10);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  return v6;
}

void sub_20C3819A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37C6E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3819B8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BF25370(a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 24) = -1;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C381A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C37FEB8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C381A3C(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BE90F0C(result, a4);
    result = (_QWORD *)sub_20C381AC0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C381AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C381C1C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C381AC0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C37B3D0(v4, (uint64_t)(v6 + 2));
      v6 = (_QWORD *)*v6;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C381B4C((uint64_t)v8);
  return v4;
}

uint64_t sub_20C381B4C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C381B80((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C381B80(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 16;
      result = (uint64_t *)sub_20C381BD0(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_20C381BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_20BFD265C((_DWORD *)a2);
}

void sub_20C381C1C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_20C381BD0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C381CA0(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v9, a2 - 4);
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v9 + 4), a2 - 3);
          v20 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_20C382394(v9, v9 + 16, (uint64_t)(a2 - 4), a3);
      case 4uLL:
        return sub_20C382B34(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4), a3);
      case 5uLL:
        return sub_20C382C34(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 4), a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return sub_20C382100(v9, a2, a3);
          else
            return sub_20C382260(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            sub_20C382394(v9 + 16 * (v13 >> 1), v9, (uint64_t)(a2 - 4), a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C382394(v9, v9 + 16 * (v13 >> 1), (uint64_t)(a2 - 4), a3);
            sub_20C382394(v9 + 16, v15 - 16, (uint64_t)(a2 - 8), a3);
            sub_20C382394(v9 + 32, v9 + 16 + 16 * v14, (uint64_t)(a2 - 12), a3);
            sub_20C382394(v15 - 16, v15, v9 + 16 + 16 * v14, a3);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v9, (int *)v15);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v9 + 4), (int *)(v15 + 4));
            v16 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9) & 1) == 0)
          {
            result = sub_20C38250C(v9, (unint64_t)a2, a3);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_20C3826E4(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_20C3828D4(v9, v17, a3);
          v9 = v17 + 16;
          result = sub_20C3828D4(v17 + 16, (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_20C381CA0(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 16;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (_DWORD *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((_DWORD *)v9 != a2)
          return sub_20C382DE8(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

uint64_t sub_20C382014(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;

  if ((sub_20BFD758C(a2, a3) & 1) != 0)
    return 1;
  if ((sub_20BFD758C(a3, a2) & 1) != 0)
    return 0;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a3 + 1);
  if (v6 && v7)
  {
    if (v6 == v7)
      return 0;
    v8 = v6 & 0xFFFFFFFFFFFFFFF8;
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v10 < v11)
      return 1;
    if (v10 != v11)
      return 0;
    v14 = *(const void **)(v9 + 16);
    v12 = v9 + 16;
    v13 = v14;
    v15 = *(char *)(v12 + 23);
    v18 = *(const void **)(v8 + 16);
    v16 = v8 + 16;
    v17 = v18;
    v19 = *(char *)(v16 + 23);
    if (v19 >= 0)
      v20 = *(unsigned __int8 *)(v16 + 23);
    else
      v20 = *(_QWORD *)(v16 + 8);
    if (v19 >= 0)
      v21 = (const void *)v16;
    else
      v21 = v17;
    if (v15 >= 0)
      v22 = *(unsigned __int8 *)(v12 + 23);
    else
      v22 = *(_QWORD *)(v12 + 8);
    if (v15 >= 0)
      v23 = (const void *)v12;
    else
      v23 = v13;
    if (v22 >= v20)
      v24 = v20;
    else
      v24 = v22;
    v25 = memcmp(v21, v23, v24);
    if (v25)
      return v25 < 0;
    else
      return v20 < v22;
  }
  else
  {
    if (v6)
      v26 = 1;
    else
      v26 = v7 == 0;
    return !v26;
  }
}

uint64_t sub_20C382100(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;

  if ((_DWORD *)result != a2)
  {
    v4 = result;
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      v7 = 0;
      v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)result;
      do
      {
        v9 = v5;
        result = sub_20C382014(a3, v5, v8);
        if ((_DWORD)result)
        {
          v15 = *(_DWORD *)v9;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
          v16 = *((_DWORD *)v8 + 5);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 5);
          v17 = *((_QWORD *)v8 + 3);
          *((_QWORD *)v8 + 3) = 0;
          v10 = v7;
          while (1)
          {
            sub_20C382D80(v4 + v10 + 16, v4 + v10);
            if (!v10)
              break;
            v11 = sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + v10 - 16));
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = v4 + v10 + 16;
              goto LABEL_10;
            }
          }
          v12 = v4;
LABEL_10:
          sub_20C382D80(v12, (uint64_t)&v15);
          if ((v17 & 7) != 0)
          {
            v13 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
            do
              v14 = __ldxr(v13);
            while (__stlxr(v14 - 2, v13));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
          result = (uint64_t)sub_20BFD265C(&v15);
        }
        v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 16);
        v7 += 16;
        v8 = v9;
      }
      while ((_DWORD *)((char *)v9 + 16) != a2);
    }
  }
  return result;
}

void sub_20C38224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C382260(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((_DWORD *)result != a2)
  {
    v4 = result;
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      do
      {
        v7 = v5;
        result = sub_20C382014(a3, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
        if ((_DWORD)result)
        {
          v10 = *(_DWORD *)v7;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
          v11 = *(_DWORD *)(v4 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 20));
          v12 = *(_QWORD *)(v4 + 24);
          *(_QWORD *)(v4 + 24) = 0;
          do
          {
            sub_20C382D80(v4 + 16, v4);
            v4 -= 16;
          }
          while ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4) & 1) != 0);
          sub_20C382D80(v4 + 16, (uint64_t)&v10);
          if ((v12 & 7) != 0)
          {
            v8 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
            do
              v9 = __ldxr(v8);
            while (__stlxr(v9 - 2, v8));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
          result = (uint64_t)sub_20BFD265C(&v10);
        }
        v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 16);
        v4 = (uint64_t)v7;
      }
      while ((_DWORD *)((char *)v7 + 16) != a2);
    }
  }
  return result;
}

void sub_20C382380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C382394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = sub_20C382014(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  result = sub_20C382014(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = (uint64_t *)(a1 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a3 + 4));
      v11 = (uint64_t *)(a3 + 8);
      result = 1;
LABEL_10:
      v14 = *v10;
      *v10 = *v11;
      *v11 = v14;
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
    v10 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v13;
    if (sub_20C382014(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
      v11 = (uint64_t *)(a3 + 8);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
    v11 = (uint64_t *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v12;
    if (sub_20C382014(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
      v10 = (uint64_t *)(a1 + 8);
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

unint64_t sub_20C38250C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  int v13;
  int v14;
  uint64_t v15;

  v13 = *(_DWORD *)a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a1);
  v14 = *(_DWORD *)(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 4));
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 16)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 16;
    while ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6) & 1) == 0);
  }
  else
  {
    v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    do
    {
      v6 = (unint64_t)v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, v7);
      v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16);
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 16;
    while ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v6, (int *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v6 + 4), (int *)(a2 + 4));
    v9 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v9;
    do
      v6 += 16;
    while (!sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6));
    do
      a2 -= 16;
    while ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  if (v6 - 16 != a1)
    sub_20C382D80(a1, v6 - 16);
  sub_20C382D80(v6 - 16, (uint64_t)&v13);
  if ((v15 & 7) != 0)
  {
    v10 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  return v6;
}

void sub_20C3826B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3826E4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v16;
  int v17;
  uint64_t v18;

  v16 = *(_DWORD *)a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a1);
  v17 = *(_DWORD *)(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 4));
  v6 = 0;
  v18 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v7 = sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + v6 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 16);
    }
    while ((sub_20C382014(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16) & 1) == 0);
  }
  else
  {
    do
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 16);
    while (!sub_20C382014(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16));
  }
  if (v8 >= (unint64_t)a2)
  {
    v12 = v8 - 16;
  }
  else
  {
    v9 = a1 + v6;
    v10 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v9, (int *)v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v9 + 4), (int *)v10 + 1);
      v11 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = v11;
      do
        v9 += 16;
      while ((sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16) & 1) != 0);
      do
        v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 - 16);
      while (!sub_20C382014(a3, v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16));
    }
    while (v9 < (unint64_t)v10);
    v12 = v9 - 16;
  }
  if (v12 != a1)
    sub_20C382D80(a1, v12);
  sub_20C382D80(v12, (uint64_t)&v16);
  if ((v18 & 7) != 0)
  {
    v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  return v12;
}

void sub_20C3828B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C3828D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)(a2 - 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 - 12));
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      sub_20C382394(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_20C382B34(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_20C382C34(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32);
      sub_20C382394(a1, a1 + 16, a1 + 32, a3);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v10, v9))
    {
      v18 = *(_DWORD *)v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v10);
      v19 = *(_DWORD *)(v10 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v10 + 4));
      v20 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      v13 = v11;
      while (1)
      {
        sub_20C382D80(a1 + v13 + 48, a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = sub_20C382014(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + v13 + 16));
        v13 -= 16;
        if ((v14 & 1) == 0)
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      sub_20C382D80(v15, (uint64_t)&v18);
      if ((v20 & 7) != 0)
      {
        v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      ++v12;
      sub_20BFD265C(&v18);
      if (v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

void sub_20C382B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C382B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_20C382394(a1, a2, a3, a5);
  result = sub_20C382014(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a3, (int *)a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a3 + 4), (int *)(a4 + 4));
    v11 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v11;
    result = sub_20C382014(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      result = sub_20C382014(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
        v13 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20C382C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_20C382B34(a1, a2, a3, a4, a6);
  result = sub_20C382014(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a4, (int *)a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a4 + 4), (int *)(a5 + 4));
    v13 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v13;
    result = sub_20C382014(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a3, (int *)a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a3 + 4), (int *)(a4 + 4));
      v14 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v14;
      result = sub_20C382014(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
        v15 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v15;
        result = sub_20C382014(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
          v16 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C382D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  sub_20BFD3EBC((int *)a1, (int *)a2);
  sub_20BFD3F10((int *)(a1 + 4), (int *)(a2 + 4));
  if (a2 != a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }
  return a1;
}

uint64_t sub_20C382DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 16 * v10;
      do
      {
        sub_20C382F30(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6 + 4;
      do
      {
        if (sub_20C382014(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 - 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)(v14 - 4), (int *)a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)v14, (int *)(a1 + 4));
          v15 = *(_QWORD *)(v14 + 4);
          *(_QWORD *)(v14 + 4) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v15;
          sub_20C382F30(a1, a4, v9, a1);
        }
        v16 = v14 + 12;
        v14 += 16;
      }
      while (v16 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        sub_20C3830F0((int *)a1, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20C382F30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 4)
    {
      v10 = (a4 - result) >> 3;
      v11 = v10 + 1;
      v12 = result + 16 * (v10 + 1);
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && sub_20C382014(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16 * (v10 + 1)), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 16)))
      {
        v12 += 16;
        v11 = v13;
      }
      result = sub_20C382014(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      if ((result & 1) == 0)
      {
        v18 = *(_DWORD *)v5;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v5);
        v19 = *(_DWORD *)(v5 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v5 + 4));
        v20 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v14 = v12;
          sub_20C382D80(v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = v6 + 16 * v15;
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if (sub_20C382014(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16 * v15), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 16)))
          {
            v12 += 16;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!sub_20C382014(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18));
        sub_20C382D80(v14, (uint64_t)&v18);
        if ((v20 & 7) != 0)
        {
          v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        return (uint64_t)sub_20BFD265C(&v18);
      }
    }
  }
  return result;
}

void sub_20C3830DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int *sub_20C3830F0(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;

  if (a4 >= 2)
  {
    v7 = (uint64_t)result;
    v13 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    v14 = *(_DWORD *)(v7 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v7 + 4));
    v15 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    v8 = sub_20C383218(v7, a3, a4);
    v9 = v8;
    v10 = a2 - 16;
    if (v8 == v10)
    {
      sub_20C382D80(v8, (uint64_t)&v13);
    }
    else
    {
      sub_20C382D80(v8, v10);
      sub_20C382D80(v10, (uint64_t)&v13);
      sub_20C3832C8((_DWORD *)v7, v9 + 16, a3, (v9 + 16 - v7) >> 4);
    }
    if ((v15 & 7) != 0)
    {
      v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return sub_20BFD265C(&v13);
  }
  return result;
}

void sub_20C383204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C383218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && sub_20C382014(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16 * v6 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16 * v6 + 32)))
    {
      v9 += 16;
      v10 = v11;
    }
    sub_20C382D80(a1, v9);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_DWORD *sub_20C3832C8(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&result[4 * (v4 >> 1)];
    v10 = (int *)(a2 - 16);
    result = (_DWORD *)sub_20C382014(a3, v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 16));
    if ((_DWORD)result)
    {
      v14 = *v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v10);
      v15 = *(_DWORD *)(a2 - 12);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 12));
      v16 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v11 = (uint64_t)v9;
        sub_20C382D80((uint64_t)v10, (uint64_t)v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[4 * v8];
        v10 = (int *)v11;
      }
      while ((sub_20C382014(a3, v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14) & 1) != 0);
      sub_20C382D80(v11, (uint64_t)&v14);
      if ((v16 & 7) != 0)
      {
        v12 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      return sub_20BFD265C(&v14);
    }
  }
  return result;
}

void sub_20C3833F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37B384((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C383404(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = result;
  v6 = *a2;
  v7 = a2[1] - v6;
  if (v7)
  {
    v8 = v7 >> 4;
    do
    {
      --v8;
      v9 = v6 + 16;
      result = sub_20C38348C(v5, v6);
      v6 = v9;
    }
    while (v8);
  }
  v10 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(v5 + 8))
    v10 += (*(_QWORD *)v5 + v10 + (*(_QWORD *)v5 + v10) * (*(_QWORD *)v5 + v10)) >> 1;
  else
    *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)v5 = v10;
  return result;
}

uint64_t sub_20C38348C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_20BFD84AC(a1, (unsigned int *)a2);
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(a1 + 8))
    v5 += (*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGetCollectionPredicateLibrary(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254988790);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988790))
  {
    qword_254988788 = (uint64_t)sub_20C383550();
    __cxa_guard_release(&qword_254988790);
  }
  return qword_254988788;
}

void sub_20C383538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988790);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C383550()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  int64x2_t *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int64x2_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  int64x2_t *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  int64x2_t *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  int64x2_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  const char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  const char *v38;
  char *v39;
  int64x2_t *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  const char *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int64x2_t v55;
  const char *v56;
  char *v57;
  int64x2_t *v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  const char *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  int64x2_t v73;
  const char *v74;
  char *v75;
  int64x2_t *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  const char *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int64x2_t v91;
  const char *v92;
  char *v93;
  int64x2_t *v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  const char *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  int64x2_t v109;
  const char *v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  const char *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  int64x2_t v141;
  const char *v142;
  char *v143;
  const char *v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  int64x2_t v148;
  const char *v149;
  char *v150;
  const char *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  int64x2_t v155;
  const char *v156;
  char *v157;
  const char *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  int64x2_t v162;
  const char *v163;
  void *__p[2];
  char v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  void *v170[2];
  char v171;
  void *v172[2];
  char v173;
  _QWORD v174[2];
  __int128 *v175;
  __int128 *v176;
  uint64_t v177;
  void *v178[2];
  char v179;
  _QWORD v180[2];
  __int128 *v181;
  __int128 *v182;
  uint64_t v183;
  void *v184[2];
  char v185;
  _QWORD v186[2];
  __int128 *v187;
  __int128 *v188;
  uint64_t v189;
  void *v190[2];
  char v191;
  _QWORD v192[2];
  __int128 *v193;
  __int128 *v194;
  uint64_t v195;
  void *v196[2];
  char v197;
  __int128 **v198;
  int64x2_t v199;
  const char *v200;
  int64x2_t *v201;
  void *v202[2];
  char v203;
  char v204[8];
  void *v205;
  void *v206[2];
  char v207;
  char v208[8];
  void *v209;
  void *v210[2];
  char v211;
  char v212[8];
  void *v213;
  void *v214[2];
  char v215;
  char v216[8];
  void *v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v0 = (uint64_t *)operator new(0x50uLL);
  sub_20C384998((uint64_t)v0, 0, 0.0, 0.5);
  sub_20BDDC0E4(v196, "abstract");
  sub_20BDDC0E4(v214, "isAbstract");
  v217 = &unk_24C51FCF3;
  v216[0] = 1;
  v192[0] = v214;
  v192[1] = 1;
  sub_20C38607C((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v193, (uint64_t)v192);
  v1 = operator new(0x30uLL);
  *v1 = &unk_24C537900;
  v1[2] = 0;
  v1[3] = 0;
  v1[1] = 0;
  sub_20C384F74(v1 + 1, v193, v194, 0xCCCCCCCCCCCCCCCDLL * (((char *)v194 - (char *)v193) >> 3));
  v1[4] = v195;
  *v1 = off_24C5378A8;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v193))
    goto LABEL_4;
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v194 - (char *)v193) >> 3) >= 2)
  {
    v198 = (__int128 **)"sdf/predicateLibrary.h";
    v199.i64[0] = (uint64_t)"_CheckNamesAndDefaultsWithSignature";
    v199.i64[1] = 424;
    v200 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:79:29)]";
    LOBYTE(v201) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v198, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v194 - (char *)v193) >> 3), 1uLL);
LABEL_4:
    (*(void (**)(_QWORD *))(*v1 + 8))(v1);
    goto LABEL_5;
  }
  if (v193 != v194)
  {
    LOBYTE(v198) = 1;
    sub_20C3857F8(&v198, 0, 1, &v193);
    if (!(_BYTE)v198)
      goto LABEL_4;
  }
  v198 = (__int128 **)v196;
  v16 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v196, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v17 = (_QWORD *)v16[2].i64[1];
  v18 = v16[3].u64[0];
  if ((unint64_t)v17 >= v18)
  {
    v112 = v16[2].i64[0];
    v113 = ((uint64_t)v17 - v112) >> 3;
    if ((unint64_t)(v113 + 1) >> 61)
      sub_20BDDF694();
    v114 = v18 - v112;
    v115 = v114 >> 2;
    if (v114 >> 2 <= (unint64_t)(v113 + 1))
      v115 = v113 + 1;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
      v116 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v116 = v115;
    v201 = v16 + 3;
    if (v116)
      v117 = (char *)sub_20BDDF6A8((uint64_t)v16[3].i64, v116);
    else
      v117 = 0;
    v136 = &v117[8 * v113];
    v137 = &v117[8 * v116];
    v200 = v137;
    *(_QWORD *)v136 = v1;
    v19 = v136 + 8;
    v199.i64[1] = (uint64_t)(v136 + 8);
    v139 = (_QWORD *)v16[2].i64[0];
    v138 = (_QWORD *)v16[2].i64[1];
    if (v138 == v139)
    {
      v141 = vdupq_n_s64((unint64_t)v138);
    }
    else
    {
      do
      {
        v140 = *--v138;
        *v138 = 0;
        *((_QWORD *)v136 - 1) = v140;
        v136 -= 8;
      }
      while (v138 != v139);
      v141 = v16[2];
      v19 = (_QWORD *)v199.i64[1];
      v137 = v200;
    }
    v16[2].i64[0] = (uint64_t)v136;
    v16[2].i64[1] = (uint64_t)v19;
    v199 = v141;
    v142 = (const char *)v16[3].i64[0];
    v16[3].i64[0] = (uint64_t)v137;
    v200 = v142;
    v198 = (__int128 **)v141.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v17 = v1;
    v19 = v17 + 1;
  }
  v16[2].i64[1] = (uint64_t)v19;
LABEL_5:
  sub_20BDDC0E4(v190, "defined");
  sub_20BDDC0E4(v210, "isDefined");
  v213 = &unk_24C51FCF3;
  v212[0] = 1;
  v186[0] = v210;
  v186[1] = 1;
  sub_20C38607C((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v187, (uint64_t)v186);
  v2 = operator new(0x30uLL);
  *v2 = &unk_24C537900;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_20C384F74(v2 + 1, v187, v188, 0xCCCCCCCCCCCCCCCDLL * (((char *)v188 - (char *)v187) >> 3));
  v2[4] = v189;
  *v2 = off_24C5379C0;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v187))
  {
LABEL_8:
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    goto LABEL_9;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v188 - (char *)v187) >> 3) >= 2)
  {
    v198 = (__int128 **)"sdf/predicateLibrary.h";
    v199.i64[0] = (uint64_t)"_CheckNamesAndDefaultsWithSignature";
    v199.i64[1] = 424;
    v200 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:87:28)]";
    LOBYTE(v201) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v198, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v188 - (char *)v187) >> 3), 1uLL);
    goto LABEL_8;
  }
  if (v187 != v188)
  {
    LOBYTE(v198) = 1;
    sub_20C3857F8(&v198, 0, 1, &v187);
    if (!(_BYTE)v198)
      goto LABEL_8;
  }
  v198 = (__int128 **)v190;
  v20 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v190, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v21 = (_QWORD *)v20[2].i64[1];
  v22 = v20[3].u64[0];
  if ((unint64_t)v21 >= v22)
  {
    v118 = v20[2].i64[0];
    v119 = ((uint64_t)v21 - v118) >> 3;
    if ((unint64_t)(v119 + 1) >> 61)
      sub_20BDDF694();
    v120 = v22 - v118;
    v121 = v120 >> 2;
    if (v120 >> 2 <= (unint64_t)(v119 + 1))
      v121 = v119 + 1;
    if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8)
      v122 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v122 = v121;
    v201 = v20 + 3;
    if (v122)
      v123 = (char *)sub_20BDDF6A8((uint64_t)v20[3].i64, v122);
    else
      v123 = 0;
    v143 = &v123[8 * v119];
    v144 = &v123[8 * v122];
    v200 = v144;
    *(_QWORD *)v143 = v2;
    v23 = v143 + 8;
    v199.i64[1] = (uint64_t)(v143 + 8);
    v146 = (_QWORD *)v20[2].i64[0];
    v145 = (_QWORD *)v20[2].i64[1];
    if (v145 == v146)
    {
      v148 = vdupq_n_s64((unint64_t)v145);
    }
    else
    {
      do
      {
        v147 = *--v145;
        *v145 = 0;
        *((_QWORD *)v143 - 1) = v147;
        v143 -= 8;
      }
      while (v145 != v146);
      v148 = v20[2];
      v23 = (_QWORD *)v199.i64[1];
      v144 = v200;
    }
    v20[2].i64[0] = (uint64_t)v143;
    v20[2].i64[1] = (uint64_t)v23;
    v199 = v148;
    v149 = (const char *)v20[3].i64[0];
    v20[3].i64[0] = (uint64_t)v144;
    v200 = v149;
    v198 = (__int128 **)v148.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v21 = v2;
    v23 = v21 + 1;
  }
  v20[2].i64[1] = (uint64_t)v23;
LABEL_9:
  sub_20BDDC0E4(v184, "model");
  sub_20BDDC0E4(v206, "isModel");
  v209 = &unk_24C51FCF3;
  v208[0] = 1;
  v180[0] = v206;
  v180[1] = 1;
  sub_20C38607C((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v181, (uint64_t)v180);
  v3 = operator new(0x30uLL);
  *v3 = &unk_24C537900;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  sub_20C384F74(v3 + 1, v181, v182, 0xCCCCCCCCCCCCCCCDLL * (((char *)v182 - (char *)v181) >> 3));
  v3[4] = v183;
  *v3 = off_24C537A88;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v181))
  {
LABEL_12:
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
    goto LABEL_13;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v182 - (char *)v181) >> 3) >= 2)
  {
    v198 = (__int128 **)"sdf/predicateLibrary.h";
    v199.i64[0] = (uint64_t)"_CheckNamesAndDefaultsWithSignature";
    v199.i64[1] = 424;
    v200 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:95:26)]";
    LOBYTE(v201) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v198, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v182 - (char *)v181) >> 3), 1uLL);
    goto LABEL_12;
  }
  if (v181 != v182)
  {
    LOBYTE(v198) = 1;
    sub_20C3857F8(&v198, 0, 1, &v181);
    if (!(_BYTE)v198)
      goto LABEL_12;
  }
  v198 = (__int128 **)v184;
  v24 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v184, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v25 = (_QWORD *)v24[2].i64[1];
  v26 = v24[3].u64[0];
  if ((unint64_t)v25 >= v26)
  {
    v124 = v24[2].i64[0];
    v125 = ((uint64_t)v25 - v124) >> 3;
    if ((unint64_t)(v125 + 1) >> 61)
      sub_20BDDF694();
    v126 = v26 - v124;
    v127 = v126 >> 2;
    if (v126 >> 2 <= (unint64_t)(v125 + 1))
      v127 = v125 + 1;
    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
      v128 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v128 = v127;
    v201 = v24 + 3;
    if (v128)
      v129 = (char *)sub_20BDDF6A8((uint64_t)v24[3].i64, v128);
    else
      v129 = 0;
    v150 = &v129[8 * v125];
    v151 = &v129[8 * v128];
    v200 = v151;
    *(_QWORD *)v150 = v3;
    v27 = v150 + 8;
    v199.i64[1] = (uint64_t)(v150 + 8);
    v153 = (_QWORD *)v24[2].i64[0];
    v152 = (_QWORD *)v24[2].i64[1];
    if (v152 == v153)
    {
      v155 = vdupq_n_s64((unint64_t)v152);
    }
    else
    {
      do
      {
        v154 = *--v152;
        *v152 = 0;
        *((_QWORD *)v150 - 1) = v154;
        v150 -= 8;
      }
      while (v152 != v153);
      v155 = v24[2];
      v27 = (_QWORD *)v199.i64[1];
      v151 = v200;
    }
    v24[2].i64[0] = (uint64_t)v150;
    v24[2].i64[1] = (uint64_t)v27;
    v199 = v155;
    v156 = (const char *)v24[3].i64[0];
    v24[3].i64[0] = (uint64_t)v151;
    v200 = v156;
    v198 = (__int128 **)v155.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v25 = v3;
    v27 = v25 + 1;
  }
  v24[2].i64[1] = (uint64_t)v27;
LABEL_13:
  sub_20BDDC0E4(v178, "group");
  sub_20BDDC0E4(v202, "isGroup");
  v205 = &unk_24C51FCF3;
  v204[0] = 1;
  v174[0] = v202;
  v174[1] = 1;
  sub_20C38607C((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v175, (uint64_t)v174);
  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  sub_20C384F74(v4 + 1, v175, v176, 0xCCCCCCCCCCCCCCCDLL * (((char *)v176 - (char *)v175) >> 3));
  v4[4] = v177;
  *v4 = off_24C537B50;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v175))
  {
LABEL_16:
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    goto LABEL_17;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v176 - (char *)v175) >> 3) >= 2)
  {
    v198 = (__int128 **)"sdf/predicateLibrary.h";
    v199.i64[0] = (uint64_t)"_CheckNamesAndDefaultsWithSignature";
    v199.i64[1] = 424;
    v200 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:107:26)]";
    LOBYTE(v201) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v198, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v176 - (char *)v175) >> 3), 1uLL);
    goto LABEL_16;
  }
  if (v175 != v176)
  {
    LOBYTE(v198) = 1;
    sub_20C3857F8(&v198, 0, 1, &v175);
    if (!(_BYTE)v198)
      goto LABEL_16;
  }
  v198 = (__int128 **)v178;
  v28 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v178, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v29 = (_QWORD *)v28[2].i64[1];
  v30 = v28[3].u64[0];
  if ((unint64_t)v29 >= v30)
  {
    v130 = v28[2].i64[0];
    v131 = ((uint64_t)v29 - v130) >> 3;
    if ((unint64_t)(v131 + 1) >> 61)
      sub_20BDDF694();
    v132 = v30 - v130;
    v133 = v132 >> 2;
    if (v132 >> 2 <= (unint64_t)(v131 + 1))
      v133 = v131 + 1;
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
      v134 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v134 = v133;
    v201 = v28 + 3;
    if (v134)
      v135 = (char *)sub_20BDDF6A8((uint64_t)v28[3].i64, v134);
    else
      v135 = 0;
    v157 = &v135[8 * v131];
    v158 = &v135[8 * v134];
    v200 = v158;
    *(_QWORD *)v157 = v4;
    v31 = v157 + 8;
    v199.i64[1] = (uint64_t)(v157 + 8);
    v160 = (_QWORD *)v28[2].i64[0];
    v159 = (_QWORD *)v28[2].i64[1];
    if (v159 == v160)
    {
      v162 = vdupq_n_s64((unint64_t)v159);
    }
    else
    {
      do
      {
        v161 = *--v159;
        *v159 = 0;
        *((_QWORD *)v157 - 1) = v161;
        v157 -= 8;
      }
      while (v159 != v160);
      v162 = v28[2];
      v31 = (_QWORD *)v199.i64[1];
      v158 = v200;
    }
    v28[2].i64[0] = (uint64_t)v157;
    v28[2].i64[1] = (uint64_t)v31;
    v199 = v162;
    v163 = (const char *)v28[3].i64[0];
    v28[3].i64[0] = (uint64_t)v158;
    v200 = v163;
    v198 = (__int128 **)v162.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v29 = v4;
    v31 = v29 + 1;
  }
  v28[2].i64[1] = (uint64_t)v31;
LABEL_17:
  sub_20BDDC0E4(v172, "kind");
  v5 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = off_24C537C18;
  v198 = (__int128 **)v172;
  v6 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v172, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v7 = (_QWORD *)v6[2].i64[1];
  v8 = v6[3].u64[0];
  if ((unint64_t)v7 >= v8)
  {
    v10 = v6[2].i64[0];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v8 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v201 = v6 + 3;
    if (v14)
      v15 = (char *)sub_20BDDF6A8((uint64_t)v6[3].i64, v14);
    else
      v15 = 0;
    v32 = &v15[8 * v11];
    v33 = &v15[8 * v14];
    v200 = v33;
    *(_QWORD *)v32 = v5;
    v9 = v32 + 8;
    v199.i64[1] = (uint64_t)(v32 + 8);
    v35 = (_QWORD *)v6[2].i64[0];
    v34 = (_QWORD *)v6[2].i64[1];
    if (v34 == v35)
    {
      v37 = vdupq_n_s64((unint64_t)v34);
    }
    else
    {
      do
      {
        v36 = *--v34;
        *v34 = 0;
        *((_QWORD *)v32 - 1) = v36;
        v32 -= 8;
      }
      while (v34 != v35);
      v37 = v6[2];
      v9 = (_QWORD *)v199.i64[1];
      v33 = v200;
    }
    v6[2].i64[0] = (uint64_t)v32;
    v6[2].i64[1] = (uint64_t)v9;
    v199 = v37;
    v38 = (const char *)v6[3].i64[0];
    v6[3].i64[0] = (uint64_t)v33;
    v200 = v38;
    v198 = (__int128 **)v37.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  v6[2].i64[1] = (uint64_t)v9;
  sub_20BDDC0E4(v170, "specifier");
  v39 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v39 + 24) = 0u;
  *(_OWORD *)(v39 + 8) = 0u;
  *(_QWORD *)v39 = off_24C537CE0;
  v198 = (__int128 **)v170;
  v40 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v170, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v41 = (_QWORD *)v40[2].i64[1];
  v42 = v40[3].u64[0];
  if ((unint64_t)v41 >= v42)
  {
    v44 = v40[2].i64[0];
    v45 = ((uint64_t)v41 - v44) >> 3;
    if ((unint64_t)(v45 + 1) >> 61)
      sub_20BDDF694();
    v46 = v42 - v44;
    v47 = v46 >> 2;
    if (v46 >> 2 <= (unint64_t)(v45 + 1))
      v47 = v45 + 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v47;
    v201 = v40 + 3;
    if (v48)
      v49 = (char *)sub_20BDDF6A8((uint64_t)v40[3].i64, v48);
    else
      v49 = 0;
    v50 = &v49[8 * v45];
    v51 = &v49[8 * v48];
    v200 = v51;
    *(_QWORD *)v50 = v39;
    v43 = v50 + 8;
    v199.i64[1] = (uint64_t)(v50 + 8);
    v53 = (_QWORD *)v40[2].i64[0];
    v52 = (_QWORD *)v40[2].i64[1];
    if (v52 == v53)
    {
      v55 = vdupq_n_s64((unint64_t)v52);
    }
    else
    {
      do
      {
        v54 = *--v52;
        *v52 = 0;
        *((_QWORD *)v50 - 1) = v54;
        v50 -= 8;
      }
      while (v52 != v53);
      v55 = v40[2];
      v43 = (_QWORD *)v199.i64[1];
      v51 = v200;
    }
    v40[2].i64[0] = (uint64_t)v50;
    v40[2].i64[1] = (uint64_t)v43;
    v199 = v55;
    v56 = (const char *)v40[3].i64[0];
    v40[3].i64[0] = (uint64_t)v51;
    v200 = v56;
    v198 = (__int128 **)v55.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v41 = v39;
    v43 = v41 + 1;
  }
  v40[2].i64[1] = (uint64_t)v43;
  sub_20BDDC0E4(v168, "isa");
  v57 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v57 + 24) = 0u;
  *(_OWORD *)(v57 + 8) = 0u;
  *(_QWORD *)v57 = off_24C537DA8;
  v198 = (__int128 **)v168;
  v58 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v168, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v59 = (_QWORD *)v58[2].i64[1];
  v60 = v58[3].u64[0];
  if ((unint64_t)v59 >= v60)
  {
    v62 = v58[2].i64[0];
    v63 = ((uint64_t)v59 - v62) >> 3;
    if ((unint64_t)(v63 + 1) >> 61)
      sub_20BDDF694();
    v64 = v60 - v62;
    v65 = v64 >> 2;
    if (v64 >> 2 <= (unint64_t)(v63 + 1))
      v65 = v63 + 1;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v66 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    v201 = v58 + 3;
    if (v66)
      v67 = (char *)sub_20BDDF6A8((uint64_t)v58[3].i64, v66);
    else
      v67 = 0;
    v68 = &v67[8 * v63];
    v69 = &v67[8 * v66];
    v200 = v69;
    *(_QWORD *)v68 = v57;
    v61 = v68 + 8;
    v199.i64[1] = (uint64_t)(v68 + 8);
    v71 = (_QWORD *)v58[2].i64[0];
    v70 = (_QWORD *)v58[2].i64[1];
    if (v70 == v71)
    {
      v73 = vdupq_n_s64((unint64_t)v70);
    }
    else
    {
      do
      {
        v72 = *--v70;
        *v70 = 0;
        *((_QWORD *)v68 - 1) = v72;
        v68 -= 8;
      }
      while (v70 != v71);
      v73 = v58[2];
      v61 = (_QWORD *)v199.i64[1];
      v69 = v200;
    }
    v58[2].i64[0] = (uint64_t)v68;
    v58[2].i64[1] = (uint64_t)v61;
    v199 = v73;
    v74 = (const char *)v58[3].i64[0];
    v58[3].i64[0] = (uint64_t)v69;
    v200 = v74;
    v198 = (__int128 **)v73.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v59 = v57;
    v61 = v59 + 1;
  }
  v58[2].i64[1] = (uint64_t)v61;
  sub_20BDDC0E4(v166, "hasAPI");
  v75 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v75 + 24) = 0u;
  *(_OWORD *)(v75 + 8) = 0u;
  *(_QWORD *)v75 = off_24C537E70;
  v198 = (__int128 **)v166;
  v76 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)v166, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v77 = (_QWORD *)v76[2].i64[1];
  v78 = v76[3].u64[0];
  if ((unint64_t)v77 >= v78)
  {
    v80 = v76[2].i64[0];
    v81 = ((uint64_t)v77 - v80) >> 3;
    if ((unint64_t)(v81 + 1) >> 61)
      sub_20BDDF694();
    v82 = v78 - v80;
    v83 = v82 >> 2;
    if (v82 >> 2 <= (unint64_t)(v81 + 1))
      v83 = v81 + 1;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    v201 = v76 + 3;
    if (v84)
      v85 = (char *)sub_20BDDF6A8((uint64_t)v76[3].i64, v84);
    else
      v85 = 0;
    v86 = &v85[8 * v81];
    v87 = &v85[8 * v84];
    v200 = v87;
    *(_QWORD *)v86 = v75;
    v79 = v86 + 8;
    v199.i64[1] = (uint64_t)(v86 + 8);
    v89 = (_QWORD *)v76[2].i64[0];
    v88 = (_QWORD *)v76[2].i64[1];
    if (v88 == v89)
    {
      v91 = vdupq_n_s64((unint64_t)v88);
    }
    else
    {
      do
      {
        v90 = *--v88;
        *v88 = 0;
        *((_QWORD *)v86 - 1) = v90;
        v86 -= 8;
      }
      while (v88 != v89);
      v91 = v76[2];
      v79 = (_QWORD *)v199.i64[1];
      v87 = v200;
    }
    v76[2].i64[0] = (uint64_t)v86;
    v76[2].i64[1] = (uint64_t)v79;
    v199 = v91;
    v92 = (const char *)v76[3].i64[0];
    v76[3].i64[0] = (uint64_t)v87;
    v200 = v92;
    v198 = (__int128 **)v91.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v77 = v75;
    v79 = v77 + 1;
  }
  v76[2].i64[1] = (uint64_t)v79;
  sub_20BDDC0E4(__p, "variant");
  v93 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v93 + 24) = 0u;
  *(_OWORD *)(v93 + 8) = 0u;
  *(_QWORD *)v93 = off_24C537F38;
  v198 = (__int128 **)__p;
  v94 = (int64x2_t *)sub_20C385984(v0, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v198);
  v95 = (_QWORD *)v94[2].i64[1];
  v96 = v94[3].u64[0];
  if ((unint64_t)v95 >= v96)
  {
    v98 = v94[2].i64[0];
    v99 = ((uint64_t)v95 - v98) >> 3;
    if ((unint64_t)(v99 + 1) >> 61)
      sub_20BDDF694();
    v100 = v96 - v98;
    v101 = v100 >> 2;
    if (v100 >> 2 <= (unint64_t)(v99 + 1))
      v101 = v99 + 1;
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
      v102 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v102 = v101;
    v201 = v94 + 3;
    if (v102)
      v103 = (char *)sub_20BDDF6A8((uint64_t)v94[3].i64, v102);
    else
      v103 = 0;
    v104 = &v103[8 * v99];
    v105 = &v103[8 * v102];
    v200 = v105;
    *(_QWORD *)v104 = v93;
    v97 = v104 + 8;
    v199.i64[1] = (uint64_t)(v104 + 8);
    v107 = (_QWORD *)v94[2].i64[0];
    v106 = (_QWORD *)v94[2].i64[1];
    if (v106 == v107)
    {
      v109 = vdupq_n_s64((unint64_t)v106);
    }
    else
    {
      do
      {
        v108 = *--v106;
        *v106 = 0;
        *((_QWORD *)v104 - 1) = v108;
        v104 -= 8;
      }
      while (v106 != v107);
      v109 = v94[2];
      v97 = (_QWORD *)v199.i64[1];
      v105 = v200;
    }
    v94[2].i64[0] = (uint64_t)v104;
    v94[2].i64[1] = (uint64_t)v97;
    v199 = v109;
    v110 = (const char *)v94[3].i64[0];
    v94[3].i64[0] = (uint64_t)v105;
    v200 = v110;
    v198 = (__int128 **)v109.i64[0];
    sub_20C0A3EB4((uint64_t)&v198);
  }
  else
  {
    *v95 = v93;
    v97 = v95 + 1;
  }
  v94[2].i64[1] = (uint64_t)v97;
  if (v165 < 0)
    operator delete(__p[0]);
  if (v167 < 0)
    operator delete(v166[0]);
  if (v169 < 0)
    operator delete(v168[0]);
  if (v171 < 0)
    operator delete(v170[0]);
  if (v173 < 0)
    operator delete(v172[0]);
  v198 = &v175;
  sub_20C00BF24((void ***)&v198);
  sub_20BF4C2D8((uint64_t)v204);
  if (v203 < 0)
    operator delete(v202[0]);
  if (v179 < 0)
    operator delete(v178[0]);
  v198 = &v181;
  sub_20C00BF24((void ***)&v198);
  sub_20BF4C2D8((uint64_t)v208);
  if (v207 < 0)
    operator delete(v206[0]);
  if (v185 < 0)
    operator delete(v184[0]);
  v198 = &v187;
  sub_20C00BF24((void ***)&v198);
  sub_20BF4C2D8((uint64_t)v212);
  if (v211 < 0)
    operator delete(v210[0]);
  if (v191 < 0)
    operator delete(v190[0]);
  v198 = &v193;
  sub_20C00BF24((void ***)&v198);
  sub_20BF4C2D8((uint64_t)v216);
  if (v215 < 0)
    operator delete(v214[0]);
  if (v197 < 0)
    operator delete(v196[0]);
  return v0;
}

void sub_20C38468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  char a65;
  void *a69;
  char a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = v72;
  (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  a24 = &a29;
  sub_20C00BF24((void ***)&a24);
  sub_20BF4AAE4(v73 - 256);
  if (a38 < 0)
    operator delete(__p);
  *(_QWORD *)(v73 - 256) = &a41;
  sub_20C00BF24((void ***)(v73 - 256));
  sub_20BF4AAE4(v73 - 216);
  if (a50 < 0)
    operator delete(a45);
  *(_QWORD *)(v73 - 216) = &a53;
  sub_20C00BF24((void ***)(v73 - 216));
  sub_20BF4AAE4(v73 - 176);
  if (a62 < 0)
    operator delete(a57);
  *(_QWORD *)(v73 - 176) = &a65;
  sub_20C00BF24((void ***)(v73 - 176));
  sub_20BF4AAE4(v73 - 136);
  if (a72 < 0)
    operator delete(a69);
  _Unwind_Resume(a1);
}

uint64_t sub_20C384998(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x492492492492493)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C384B34((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20C384ABC();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 50) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C384AA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20C384ABC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473CF98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473CF98))
  {
    dword_25473CF60 = 0;
    word_25473CF64 = -1;
    byte_25473CF66 = 1;
    __cxa_atexit((void (*)(void *))sub_20C384C60, &dword_25473CF60, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473CF98);
  }
  return &dword_25473CF60;
}

_QWORD *sub_20C384B34(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE1B554(a1, a2);
    v4 = a1[1];
    v5 = v4 + 56 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 56;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C384BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C384BBC(&a9);
  _Unwind_Resume(a1);
}

void sub_20C384BBC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C384BFC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20C384BFC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 56;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        sub_20C384C9C(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      v5 = v4 == v3;
      v4 -= 56;
    }
    while (!v5);
  }
  a1[1] = v3;
}

uint64_t sub_20C384C60(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_20C384C9C(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_20C384C9C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  sub_20C086448(&v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t sub_20C384CE0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C384D28(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C384D74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C5378A8;
  *a2 = v4;
  return result;
}

void sub_20C384DF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C384E08(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  BOOL v7;
  void *__p;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(_QWORD *)(a1 + 32))
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 638;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:79:29)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 643;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:79:29)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  v7 = 0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (sub_20C385144(&v7, a2, (_QWORD *)(a1 + 8), (uint64_t *)&__p))
  {
    v5 = v7;
    *(_QWORD *)a3 = &off_24C537930;
    *(_WORD *)(a3 + 8) = v5;
    v6 = a3;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a3 + 24) = v6;
  if (__p)
    operator delete(__p);
}

void sub_20C384F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C384F74(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED4B34(result, a4);
    result = sub_20C384FF8((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C384FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00BF24(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C384FF8(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  void *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_20C3850A0(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C385110((uint64_t)v9);
  return v4;
}

void sub_20C38508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C385110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3850A0(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  return sub_20BF4C6D0(__dst + 3, (_QWORD *)a3 + 3);
}

void sub_20C3850F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C385110(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00E080((uint64_t *)a1);
  return a1;
}

uint64_t sub_20C385144(BOOL *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  char v10;
  unsigned __int8 v11;

  v11 = 1;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  v10 = 0;
  sub_20C22BF94((uint64_t)a4, v8, &v10);
  sub_20C3851D0(0, 1, a1, &v11, a2, a4, a3);
  return v11;
}

unint64_t sub_20C3851D0(unint64_t result, uint64_t a2, BOOL *a3, _BYTE *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*a4)
    return result;
  v10 = result;
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a7[1] - *a7) >> 3) - a2;
  v12 = result >= v11;
  v13 = *a7 + 40 * (result - v11);
  if (v12)
    v14 = v13;
  else
    v14 = 0;
  v16 = *a5;
  v15 = a5[1];
  v17 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - *a5) >> 3);
  if (v17 > result)
  {
    v18 = v16 + 40 * result;
    if (*(char *)(v18 + 23) < 0)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = *(unsigned __int8 *)(v18 + 23);
    if (v19)
      v18 = 0;
    if (v14)
    {
      if (v18)
      {
        sub_20C1CFB40((_QWORD *)(v18 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
        if (!v30)
          goto LABEL_46;
LABEL_16:
        *a3 = sub_20C20B0D8(&v29);
        *(_QWORD *)(*a6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        return sub_20BF4C2D8((uint64_t)&v29);
      }
      goto LABEL_17;
    }
    if (v18)
    {
      if (*(char *)(v18 + 23) < 0)
      {
        if (*(_QWORD *)(v18 + 8))
          goto LABEL_41;
      }
      else if (*(_BYTE *)(v18 + 23))
      {
        goto LABEL_41;
      }
      sub_20C1CFB40((_QWORD *)(v18 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
      if (!v30)
        goto LABEL_46;
      goto LABEL_16;
    }
LABEL_41:
    *a4 = 0;
    return result;
  }
  if (!v14)
    goto LABEL_41;
LABEL_17:
  if (v15 == v16)
  {
LABEL_36:
    sub_20C1CFB40((_QWORD *)(v14 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
    if (v30)
    {
      *a3 = sub_20C20B0D8(&v29);
      return sub_20BF4C2D8((uint64_t)&v29);
    }
    goto LABEL_46;
  }
  v20 = 0;
  v21 = *a6;
  while (1)
  {
    if ((*(_QWORD *)(v21 + 8 * (v20 >> 6)) & (1 << v20)) != 0)
      goto LABEL_35;
    v22 = (unsigned __int8 *)(v16 + 40 * v20);
    v23 = v22[23];
    if ((v23 & 0x80u) == 0)
      v24 = v22[23];
    else
      v24 = *((_QWORD *)v22 + 1);
    v25 = *(unsigned __int8 *)(v14 + 23);
    v26 = (char)v25;
    if ((v25 & 0x80u) != 0)
      v25 = *(_QWORD *)(v14 + 8);
    if (v24 != v25)
      goto LABEL_35;
    v27 = v26 >= 0 ? (unsigned __int8 *)v14 : *(unsigned __int8 **)v14;
    if ((v23 & 0x80) != 0)
      break;
    if (!v22[23])
      goto LABEL_42;
    while (*v22 == *v27)
    {
      ++v22;
      ++v27;
      if (!--v23)
        goto LABEL_42;
    }
LABEL_35:
    if (++v20 == v17)
      goto LABEL_36;
  }
  if (memcmp(*(const void **)v22, v27, *((_QWORD *)v22 + 1)))
    goto LABEL_35;
LABEL_42:
  sub_20C1CFB40((_QWORD *)(v16 + 40 * v20 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
  if (v30)
  {
    *a3 = sub_20C20B0D8(&v29);
    *(_QWORD *)(*a6 + 8 * (v20 >> 6)) |= 1 << v20;
    return sub_20BF4C2D8((uint64_t)&v29);
  }
LABEL_46:
  *a4 = 0;
  return sub_20BF4C2D8((uint64_t)&v29);
}

void sub_20C385480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_WORD *sub_20C3854B0(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C537930;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20C3854E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C537930;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_20C385508(uint64_t a1, uint64_t a2)
{
  int v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__ *v28;
  int v29;
  int v30;
  uint64_t v31;

  sub_20C37FE20((uint64_t)v16, a2);
  sub_20C38579C((uint64_t)&v21, (uint64_t)v16);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v26 = *(_BYTE *)(a1 + 8);
  sub_20C35C4F8((uint64_t)v27, (uint64_t *)&v22, &v23);
  v5 = v28;
  if (!v28 || (v6 = *((_QWORD *)v28 + 7), (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v28, v4);
    v6 = *((_QWORD *)v5 + 7);
  }
  if ((v31 & 7) != 0)
  {
    v7 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  v9 = v21;
  if ((v25 & 7) != 0)
  {
    v10 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  if ((v20 & 7) != 0)
  {
    v12 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  if (v9 == 1)
    v14 = (v6 >> 5) & 1;
  else
    v14 = 1;
  if (v14)
    return (v3 != 0) == ((v6 & 0x20) != 0);
  else
    return (v3 == 0) | 0x100000000;
}

void sub_20C385674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a16, int a17, int a18, uint64_t a19)
{
  _DWORD *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;

  v22 = *(_QWORD *)(v20 - 40);
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v20 - 44));
  sub_20BFD265C((_DWORD *)(v20 - 48));
  v25 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v20 - 56);
  if (v25)
    sub_20C35C614(v25);
  if ((a19 & 7) != 0)
  {
    v26 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_20BFD265C(v19);
  if (a16)
    sub_20C35C614(a16);
  if ((a14 & 7) != 0)
  {
    v28 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_20C96BB64((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C385754(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5379A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C385790()
{
  return &unk_24C5379A0;
}

uint64_t sub_20C38579C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

void sub_20C3857F8(_BYTE *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  uint64_t v10;
  const std::type_info *v11;
  const std::type_info *v12;
  char *v13;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[4];
  char v23;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 3);
  if (~a2 + a3 < v4)
  {
    v6 = *a4 + 40 * (v4 + a2 - a3);
    if (*(_QWORD *)(v6 + 32))
    {
      v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 24);
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 24));
      v10 = MEMORY[0x24BEDB770];
      if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB770], v11))
      {
        v22[0] = "sdf/predicateLibrary.h";
        v22[1] = "_CheckOneNameAndDefault";
        v22[2] = 367;
        v22[3] = "static void pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::Usd"
                 "Object>::_CheckOneNameAndDefault(BOOL &, size_t, size_t, const NamesAndDefaults &) [DomainType = pxrInt"
                 "ernal__aapl__pxrReserved__::UsdObject, ParamType = BOOL]";
        v23 = 0;
        if (*(char *)(v6 + 23) < 0)
          v6 = *(_QWORD *)v6;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(v8, v12, v13, (uint64_t)v20);
        v14 = v21;
        v15 = (void **)v20[0];
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v10 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
        if (v14 >= 0)
          v16 = v20;
        else
          v16 = v15;
        if (v19 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate default parameter '%s' value of type '%s' cannot convert to c++ argument of type '%s' at index %zu", (const char *)v6, (const char *)v16, (const char *)v17, a2);
        if (v19 < 0)
          operator delete(__p[0]);
        if (v21 < 0)
          operator delete(v20[0]);
        *a1 = 0;
      }
    }
  }
}

void sub_20C385950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C385984(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 *v17;
  __int128 v18;
  _QWORD *v19;

  v8 = sub_20BEF33B4((uint64_t)a1, (uint64_t)a2);
  v9 = *a1 & v8;
  v10 = a1[4];
  if (*(__int16 *)(v10 + 56 * v9 + 4) < 0)
  {
    LOWORD(v11) = 0;
LABEL_7:
    v12 = sub_20C385B60((uint64_t)a1);
    v13 = a1[4];
    if ((v12 & 1) != 0)
    {
      v9 = v8 & *a1;
      if (*(__int16 *)(v13 + 56 * v9 + 4) < 0)
      {
        LOWORD(v11) = 0;
        v14 = *(unsigned __int16 *)(v13 + 56 * v9 + 4);
      }
      else
      {
        LOWORD(v11) = 0;
        do
        {
          v11 = (__int16)(v11 + 1);
          v9 = (v9 + 1) & *a1;
        }
        while (v11 <= *(__int16 *)(v13 + 56 * v9 + 4));
        v14 = *(unsigned __int16 *)(v13 + 56 * v9 + 4);
      }
    }
    else
    {
      v14 = *(unsigned __int16 *)(v13 + 56 * v9 + 4);
    }
    if (v14 == 0xFFFF)
    {
      v15 = v13 + 56 * v9;
      v16 = (_BYTE *)(v15 + 8);
      v17 = *a4;
      if (*((char *)*a4 + 23) < 0)
      {
        sub_20BDDBFAC(v16, *(void **)v17, *((_QWORD *)v17 + 1));
      }
      else
      {
        v18 = *v17;
        *(_QWORD *)(v13 + 56 * v9 + 24) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v16 = v18;
      }
      v19 = (_QWORD *)(v13 + 56 * v9);
      v19[4] = 0;
      v19[5] = 0;
      v19[6] = 0;
      *(_DWORD *)v15 = v8;
      *(_WORD *)(v15 + 4) = v11;
    }
    else
    {
      sub_20C385C24(a1, v9, v11, v8, a3, a4);
    }
    ++a1[6];
  }
  else
  {
    LOWORD(v11) = 0;
    while ((sub_20BEB4EF8((uint64_t)a1, (unsigned __int8 *)(v10 + 56 * v9 + 8), a2) & 1) == 0)
    {
      v9 = *a1 & (v9 + 1);
      v11 = (__int16)(v11 + 1);
      v10 = a1[4];
      if (v11 > *(__int16 *)(v10 + 56 * v9 + 4))
        goto LABEL_7;
    }
  }
  return a1[4] + 56 * v9;
}

uint64_t sub_20C385B60(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C385CD4(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C385CD4(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20C385C24(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, __int128 **a6)
{
  __int128 *v10;
  __int128 v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[4];
  void **v15;

  v10 = *a6;
  if (*((char *)*a6 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v13 = *((_QWORD *)v10 + 2);
    *(_OWORD *)__p = v11;
  }
  memset(v14, 0, 24);
  sub_20C385ED0(a1, a2, a3, a4, (__int128 *)__p);
  v15 = (void **)v14;
  sub_20C086448(&v15);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_20C385CD4(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[9];
  void **v9;

  sub_20C384998((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(unsigned int **)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = (unint64_t)(v8[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v3 + 2) != -1)
      {
        if (v5)
          v6 = sub_20BEF33B4((uint64_t)&v7, (uint64_t)(v3 + 2));
        else
          v6 = *v3;
        sub_20C385DCC(&v7, v7 & v6, 0, v6, (__int128 *)(v3 + 2));
      }
      v3 += 14;
    }
    while (v3 != v4);
  }
  v8[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v7, (uint64_t *)a1);
  v9 = (void **)v8;
  sub_20C384BBC(&v9);
}

void sub_20C385DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20C384BBC((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_20C385DCC(_QWORD *a1, uint64_t a2, __int16 a3, int a4, __int128 *a5)
{
  uint64_t v5;
  int *v6;
  _WORD *v7;
  int v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __n128 *v19;
  __n128 result;

  while (1)
  {
    v5 = a1[4];
    v6 = (int *)(v5 + 56 * a2);
    v7 = v6 + 1;
    v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3)
      goto LABEL_4;
    v9 = (__int128 *)(v5 + 56 * a2 + 8);
    if (v8 == -1)
      break;
    v10 = *((_QWORD *)a5 + 2);
    v11 = *a5;
    v12 = *(_QWORD *)(v5 + 56 * a2 + 24);
    *a5 = *v9;
    *((_QWORD *)a5 + 2) = v12;
    *v9 = v11;
    *(_QWORD *)(v5 + 56 * a2 + 24) = v10;
    v13 = (_QWORD *)(v5 + 56 * a2);
    v14 = *((_QWORD *)a5 + 3);
    *((_QWORD *)a5 + 3) = v13[4];
    v13[4] = v14;
    v15 = *((_QWORD *)a5 + 4);
    *((_QWORD *)a5 + 4) = v13[5];
    v13[5] = v15;
    v16 = *((_QWORD *)a5 + 5);
    *((_QWORD *)a5 + 5) = v13[6];
    v13[6] = v16;
    LOWORD(v13) = *v7;
    *v7 = a3;
    v17 = *v6;
    *v6 = a4;
    a3 = (__int16)v13;
    a4 = v17;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  v18 = *a5;
  *(_QWORD *)(v5 + 56 * a2 + 24) = *((_QWORD *)a5 + 2);
  *v9 = v18;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  v19 = (__n128 *)(v5 + 56 * a2);
  v19[2].n128_u64[0] = 0;
  v19[2].n128_u64[1] = 0;
  v19[3].n128_u64[0] = 0;
  result = *(__n128 *)((char *)a5 + 24);
  v19[2] = result;
  v19[3].n128_u64[0] = *((_QWORD *)a5 + 5);
  *((_QWORD *)a5 + 3) = 0;
  *((_QWORD *)a5 + 4) = 0;
  *((_QWORD *)a5 + 5) = 0;
  *v6 = a4;
  *v7 = a3;
  return result;
}

__n128 sub_20C385ED0(uint64_t *a1, uint64_t a2, __int16 a3, int a4, __int128 *a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  int *v19;
  unsigned __int16 i;
  _WORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __n128 result;

  v5 = a1[4] + 56 * a2;
  v6 = *((_QWORD *)a5 + 2);
  v7 = *a5;
  v8 = *(_QWORD *)(v5 + 24);
  *a5 = *(_OWORD *)(v5 + 8);
  *((_QWORD *)a5 + 2) = v8;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v6;
  v9 = *((_QWORD *)a5 + 3);
  *((_QWORD *)a5 + 3) = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = v9;
  v10 = *((_QWORD *)a5 + 4);
  *((_QWORD *)a5 + 4) = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v10;
  v11 = *((_QWORD *)a5 + 5);
  *((_QWORD *)a5 + 5) = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = v11;
  v12 = *(_WORD *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  v13 = *(_DWORD *)v5;
  *(_DWORD *)v5 = a4;
  v14 = a2 + 1;
  v15 = *a1;
  v16 = *a1 & v14;
  v17 = v12 + 1;
  v18 = a1[4];
  v19 = (int *)(v18 + 56 * v16);
  v21 = v19 + 1;
  for (i = *((_WORD *)v19 + 2); i != 0xFFFF; i = *((_WORD *)v19 + 2))
  {
    if (v17 > (__int16)i)
    {
      if (v17 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v22 = v18 + 56 * v16;
      v23 = *a5;
      v24 = *((_QWORD *)a5 + 2);
      v25 = *(_QWORD *)(v22 + 24);
      *a5 = *(_OWORD *)(v22 + 8);
      *((_QWORD *)a5 + 2) = v25;
      *(_QWORD *)(v22 + 24) = v24;
      *(_OWORD *)(v22 + 8) = v23;
      v26 = *((_QWORD *)a5 + 3);
      *((_QWORD *)a5 + 3) = *(_QWORD *)(v22 + 32);
      *(_QWORD *)(v22 + 32) = v26;
      v27 = *((_QWORD *)a5 + 4);
      *((_QWORD *)a5 + 4) = *(_QWORD *)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v27;
      v28 = *((_QWORD *)a5 + 5);
      *((_QWORD *)a5 + 5) = *(_QWORD *)(v22 + 48);
      *(_QWORD *)(v22 + 48) = v28;
      LOWORD(v25) = *v21;
      *v21 = v17;
      v29 = *v19;
      *v19 = v13;
      v15 = *a1;
      v18 = a1[4];
      v17 = v25;
      v13 = v29;
    }
    v16 = v15 & (v16 + 1);
    ++v17;
    v19 = (int *)(v18 + 56 * v16);
    v21 = v19 + 1;
  }
  v30 = v18 + 56 * v16;
  v31 = *a5;
  *(_QWORD *)(v30 + 24) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v30 + 8) = v31;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0;
  *(_QWORD *)(v30 + 48) = 0;
  result = *(__n128 *)((char *)a5 + 24);
  *(__n128 *)(v30 + 32) = result;
  *(_QWORD *)(v30 + 48) = *((_QWORD *)a5 + 5);
  *((_QWORD *)a5 + 3) = 0;
  *((_QWORD *)a5 + 4) = 0;
  *((_QWORD *)a5 + 5) = 0;
  *v19 = v13;
  *v21 = v17;
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *sub_20C38607C(pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 *v4;
  __int128 *v5;

  v4 = *(__int128 **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = (__int128 *)(*(_QWORD *)a2 + 40 * v3);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  sub_20C3860E4(a1, v4, v5, v3);
  *((_QWORD *)a1 + 3) = pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::_CountDefaults(a1);
  return a1;
}

void sub_20C3860CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C00BF24((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3860E4(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED4B34(result, a4);
    result = sub_20C386168((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C386148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C00BF24(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C386168(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  void *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_20C386210(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C385110((uint64_t)v9);
  return v4;
}

void sub_20C3861FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C385110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C386210(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  return sub_20BF4C6D0(__dst + 3, (_QWORD *)a3 + 3);
}

void sub_20C386264(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C386280(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C3862C8(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C386314@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C5379C0;
  *a2 = v4;
  return result;
}

void sub_20C386394(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C3863A8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  BOOL v7;
  void *__p;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(_QWORD *)(a1 + 32))
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 638;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:87:28)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 643;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:87:28)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  v7 = 0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (sub_20C385144(&v7, a2, (_QWORD *)(a1 + 8), (uint64_t *)&__p))
  {
    v5 = v7;
    *(_QWORD *)a3 = &off_24C537A08;
    *(_WORD *)(a3 + 8) = v5;
    v6 = a3;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a3 + 24) = v6;
  if (__p)
    operator delete(__p);
}

void sub_20C3864FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_WORD *sub_20C38651C(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C537A08;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20C386554(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C537A08;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_20C386574(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE v15[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  _BYTE v26[8];
  pxrInternal__aapl__pxrReserved__ *v27;
  int v28;
  int v29;
  uint64_t v30;

  sub_20C37FE20((uint64_t)v15, a2);
  sub_20C38579C((uint64_t)&v20, (uint64_t)v15);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v25 = *(_BYTE *)(a1 + 8);
  sub_20C35C4F8((uint64_t)v26, (uint64_t *)&v21, &v22);
  v5 = v27;
  if (!v27 || (v6 = *((_QWORD *)v27 + 7), (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v27, v4);
    v6 = *((_QWORD *)v5 + 7);
  }
  if ((v30 & 7) != 0)
  {
    v7 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_20BFD265C(&v28);
  if (v27)
    sub_20C35C614(v27);
  v9 = v20;
  if ((v24 & 7) != 0)
  {
    v10 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (v21)
    sub_20C35C614(v21);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  if ((v6 & 0x40) != 0 && v9 == 1)
    return v3 | 0x100000000;
  else
    return ((_DWORD)v3 == 0) ^ (v6 >> 6) & 1;
}

void sub_20C3866D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a16, int a17, int a18, uint64_t a19)
{
  _DWORD *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;

  v22 = *(_QWORD *)(v20 - 40);
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v20 - 44));
  sub_20BFD265C((_DWORD *)(v20 - 48));
  v25 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v20 - 56);
  if (v25)
    sub_20C35C614(v25);
  if ((a19 & 7) != 0)
  {
    v26 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_20BFD265C(v19);
  if (a16)
    sub_20C35C614(a16);
  if ((a14 & 7) != 0)
  {
    v28 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_20C96BB64((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3867B8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537A68))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3867F4()
{
  return &unk_24C537A68;
}

uint64_t sub_20C386800(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C386848(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C386894@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537A88;
  *a2 = v4;
  return result;
}

void sub_20C386914(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C386928(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  BOOL v7;
  void *__p;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(_QWORD *)(a1 + 32))
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 638;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:95:26)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 643;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:95:26)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  v7 = 0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (sub_20C385144(&v7, a2, (_QWORD *)(a1 + 8), (uint64_t *)&__p))
  {
    v5 = v7;
    *(_QWORD *)a3 = &off_24C537AD0;
    *(_WORD *)(a3 + 8) = v5;
    v6 = a3;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a3 + 24) = v6;
  if (__p)
    operator delete(__p);
}

void sub_20C386A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_WORD *sub_20C386A9C(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C537AD0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20C386AD4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C537AD0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_20C386AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE v21[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__ *v28;
  int v29;
  int v30;
  uint64_t v31;

  sub_20C37FE20((uint64_t)v16, a2);
  sub_20C38579C((uint64_t)v21, (uint64_t)v16);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v26 = *(_BYTE *)(a1 + 8);
  sub_20C386D74((uint64_t)v21, (uint64_t)v27);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v27, v4))
  {
    v6 = v28;
    if (!v28 || (v7 = *((_QWORD *)v28 + 7), (v7 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v28, v5);
      v7 = *((_QWORD *)v6 + 7);
    }
    if ((v7 & 4) != 0)
      v8 = v3 | 0x100000000;
    else
      v8 = (_DWORD)v3 == 0;
  }
  else
  {
    v8 = 0;
  }
  if ((v31 & 7) != 0)
  {
    v9 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  if ((v25 & 7) != 0)
  {
    v11 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  if ((v20 & 7) != 0)
  {
    v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  return v8;
}

void sub_20C386C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a16, int a17, int a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v21 = *(_QWORD *)(v19 - 24);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v19 - 28));
  sub_20BFD265C((_DWORD *)(v19 - 32));
  v24 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v19 - 40);
  if (v24)
    sub_20C35C614(v24);
  if ((a19 & 7) != 0)
  {
    v25 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_20BFD265C(&a17);
  if (a16)
    sub_20C35C614(a16);
  if ((a14 & 7) != 0)
  {
    v27 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_20C96BB64((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C386D2C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537B30))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C386D68()
{
  return &unk_24C537B30;
}

_DWORD *sub_20C386D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *result;

  if (*(_DWORD *)a1 == 1)
    return (_DWORD *)sub_20C37F4B0(a2, 1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_20C386DE4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C386E2C(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C386E78@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537B50;
  *a2 = v4;
  return result;
}

void sub_20C386EF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C386F0C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  BOOL v7;
  void *__p;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(_QWORD *)(a1 + 32))
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 638;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:107:26)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    __p = "sdf/predicateLibrary.h";
    v9 = "_TryToBindCall";
    v10 = 643;
    v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:107:26)]";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  v7 = 0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (sub_20C385144(&v7, a2, (_QWORD *)(a1 + 8), (uint64_t *)&__p))
  {
    v5 = v7;
    *(_QWORD *)a3 = &off_24C537B98;
    *(_WORD *)(a3 + 8) = v5;
    v6 = a3;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a3 + 24) = v6;
  if (__p)
    operator delete(__p);
}

void sub_20C387060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_WORD *sub_20C387080(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C537B98;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20C3870B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C537B98;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_20C3870D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE v21[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__ *v28;
  int v29;
  int v30;
  uint64_t v31;

  sub_20C37FE20((uint64_t)v16, a2);
  sub_20C38579C((uint64_t)v21, (uint64_t)v16);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v26 = *(_BYTE *)(a1 + 8);
  sub_20C386D74((uint64_t)v21, (uint64_t)v27);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v27, v4))
  {
    v6 = v28;
    if (!v28 || (v7 = *((_QWORD *)v28 + 7), (v7 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v28, v5);
      v7 = *((_QWORD *)v6 + 7);
    }
    if ((v7 & 8) != 0)
      v8 = v3 | 0x100000000;
    else
      v8 = (_DWORD)v3 == 0;
  }
  else
  {
    v8 = 0;
  }
  if ((v31 & 7) != 0)
  {
    v9 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_20BFD265C(&v29);
  if (v28)
    sub_20C35C614(v28);
  if ((v25 & 7) != 0)
  {
    v11 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  if ((v20 & 7) != 0)
  {
    v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  return v8;
}

void sub_20C38722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a16, int a17, int a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v21 = *(_QWORD *)(v19 - 24);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v19 - 28));
  sub_20BFD265C((_DWORD *)(v19 - 32));
  v24 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v19 - 40);
  if (v24)
    sub_20C35C614(v24);
  if ((a19 & 7) != 0)
  {
    v25 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_20BFD265C(&a17);
  if (a16)
    sub_20C35C614(a16);
  if ((a14 & 7) != 0)
  {
    v27 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_20C96BB64((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C387310(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537BF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C38734C()
{
  return &unk_24C537BF8;
}

uint64_t sub_20C387358(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C3873A0(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C3873EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537C18;
  *a2 = v4;
  return result;
}

void sub_20C38746C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C387480(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  int64x2_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  char *v25;
  int64x2_t v26;
  _QWORD v27[2];
  _BYTE v28[24];
  char *v29;
  _QWORD *v30;
  unint64_t v31;

  v4 = sub_20C387758(a1);
  v26 = 0uLL;
  v27[0] = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
    goto LABEL_34;
  v7 = v4 ^ 1;
  do
  {
    if (*((char *)v5 + 23) < 0)
    {
      if (v5[1])
        goto LABEL_31;
    }
    else if (*((_BYTE *)v5 + 23))
    {
      goto LABEL_31;
    }
    if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 3)))
    {
      v8 = v5[4];
      if ((v8 & 4) != 0)
        (*(void (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 3);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
      if (pxrInternal__aapl__pxrReserved__::KindRegistry::HasKind((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v31, v9))
      {
        v10 = v26.i64[1];
        if (v26.i64[1] >= v27[0])
        {
          v12 = (v26.i64[1] - v26.i64[0]) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            sub_20BDDF694();
          v13 = (v27[0] - v26.i64[0]) >> 2;
          if (v13 <= v12 + 1)
            v13 = v12 + 1;
          if (v27[0] - v26.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          v30 = v27;
          if (v14)
            v15 = (char *)sub_20BDDF6A8((uint64_t)v27, v14);
          else
            v15 = 0;
          v16 = (unint64_t *)&v15[8 * v12];
          v17 = &v15[8 * v14];
          v29 = v17;
          *v16 = v31;
          v11 = v16 + 1;
          v31 = 0;
          *(_QWORD *)&v28[16] = v16 + 1;
          v18 = (_QWORD *)v26.i64[1];
          v19 = (_QWORD *)v26.i64[0];
          if (v26.i64[1] == v26.i64[0])
          {
            v21 = vdupq_n_s64(v26.u64[1]);
          }
          else
          {
            do
            {
              v20 = *--v18;
              *--v16 = v20;
              *v18 = 0;
            }
            while (v18 != v19);
            v21 = v26;
            v11 = *(_QWORD **)&v28[16];
            v17 = v29;
          }
          v26.i64[0] = (uint64_t)v16;
          v26.i64[1] = (uint64_t)v11;
          *(int64x2_t *)&v28[8] = v21;
          v22 = (char *)v27[0];
          v27[0] = v17;
          v29 = v22;
          *(_QWORD *)v28 = v21.i64[0];
          sub_20BF1EE98((uint64_t)v28);
        }
        else
        {
          *(_QWORD *)v26.i64[1] = v31;
          v11 = (_QWORD *)(v10 + 8);
          v31 = 0;
        }
        v26.i64[1] = (uint64_t)v11;
      }
      if ((v31 & 7) != 0)
      {
        v23 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
LABEL_31:
    v5 += 5;
  }
  while (v5 != v6);
  if (v26.i64[0] == v26.i64[1])
  {
LABEL_34:
    *(_QWORD *)(a2 + 24) = 0;
    goto LABEL_35;
  }
  memset(v28, 0, sizeof(v28));
  sub_20BFE538C(v28, (uint64_t *)v26.i64[0], (uint64_t *)v26.i64[1], (v26.i64[1] - v26.i64[0]) >> 3);
  LOBYTE(v29) = v7;
  *(_QWORD *)(a2 + 24) = 0;
  v25 = (char *)operator new(0x28uLL);
  *(_QWORD *)v25 = off_24C537C60;
  *(_OWORD *)(v25 + 8) = *(_OWORD *)v28;
  *((_QWORD *)v25 + 3) = *(_QWORD *)&v28[16];
  memset(v28, 0, sizeof(v28));
  v25[32] = v7;
  *(_QWORD *)(a2 + 24) = v25;
  v31 = (unint64_t)v28;
  sub_20BEEB2B8((void ***)&v31);
LABEL_35:
  v31 = (unint64_t)&v26;
  sub_20BEEB2B8((void ***)&v31);
}

void sub_20C3876F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a13;
  sub_20BEEB2B8(&a18);
  a18 = (void **)&a9;
  sub_20BEEB2B8(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C387758(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  uint64_t result;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  while (1)
  {
    v3 = *((char *)v2 + 23);
    if (v3 < 0)
      break;
    v4 = (int *)v2;
    if (v3 == 6)
      goto LABEL_7;
LABEL_11:
    v2 += 5;
    if (v2 == v1)
      return 0;
  }
  if (v2[1] != 6)
    goto LABEL_11;
  v4 = (int *)*v2;
LABEL_7:
  v5 = *v4;
  v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 != 1769108595 || v6 != 29795)
    goto LABEL_11;
  v9 = (unsigned __int8 *)(v2 + 3);
  if (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 3)))
  {
    v10 = v2[4];
    if ((v10 & 4) != 0)
      v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 3);
    v11 = *v9;
    return v11 != 0;
  }
  if (!sub_20BFB2CEC((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 3)))
  {
    result = sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 3));
    if (!(_DWORD)result)
      return result;
    v13 = v2[4];
    if ((v13 & 4) != 0)
      v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 3);
    else
      v14 = *(unsigned __int8 **)v9;
    if ((char)v14[23] < 0)
    {
      if (!*((_QWORD *)v14 + 1))
        return 0;
      v14 = *(unsigned __int8 **)v14;
    }
    else if (!v14[23])
    {
      return 0;
    }
    v15 = *v14;
    result = 1;
    if (v15 == 49 || v15 == 89 || v15 == 121)
      return result;
    return 0;
  }
  v12 = v2[4];
  if ((v12 & 4) != 0)
    v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 3);
  v11 = *(_DWORD *)v9;
  return v11 != 0;
}

uint64_t sub_20C3878B4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C537C60;
  v3 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v3);
  return a1;
}

void sub_20C3878F8(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C537C60;
  v2 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v2);
  operator delete(a1);
}

_QWORD *sub_20C387940(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x28uLL);
  *v2 = off_24C537C60;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_20BFE538C(v2 + 1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *((_BYTE *)v2 + 32) = *(_BYTE *)(a1 + 32);
  return v2;
}

void sub_20C387998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3879AC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)a2 = off_24C537C60;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = sub_20BFE538C((_QWORD *)(a2 + 8), *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  return result;
}

void sub_20C3879FC(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v1);
}

void sub_20C387A24(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  sub_20BEEB2B8(&v2);
  operator delete(a1);
}

uint64_t sub_20C387A60(uint64_t a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  BOOL v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  unsigned int *v7;
  unsigned int v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  _BYTE v18[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  sub_20C386D74(a2, (uint64_t)v18);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v18, v3))
  {
    v17 = 0;
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v23 = 0;
    v5 = sub_20C361F00((uint64_t)v18, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208), (uint64_t)&v17, &v23);
    if ((v23 & 7) != 0)
    {
      v7 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if (v5)
    {
      v9 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 8);
      v10 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 16);
      while (v9 != v10)
      {
        if (*(_BYTE *)(a1 + 32))
        {
          if (pxrInternal__aapl__pxrReserved__::KindRegistry::IsA((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v17, v9, v6))
          {
            goto LABEL_26;
          }
        }
        else if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_26:
          v11 = 0x100000001;
          goto LABEL_17;
        }
        v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
      }
    }
    v11 = 0x100000000;
LABEL_17:
    if ((v17 & 7) != 0)
    {
      v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  else
  {
    v11 = 0;
  }
  if ((v22 & 7) != 0)
  {
    v14 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (v19)
    sub_20C35C614(v19);
  return v11;
}

void sub_20C387BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  if ((a9 & 7) != 0)
  {
    v15 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((a14 & 7) != 0)
  {
    v17 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_20C96BB64((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C387C60(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537CC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C387C9C()
{
  return &unk_24C537CC0;
}

uint64_t sub_20C387CA8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C387CF0(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C387D3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537CE0;
  *a2 = v4;
  return result;
}

void sub_20C387DBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C387DD0(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v14;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        if (*(_QWORD *)(v3 + 8))
          goto LABEL_43;
      }
      else if (*(_BYTE *)(v3 + 23))
      {
        goto LABEL_43;
      }
      if ((sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 24)) & 1) == 0)
      {
LABEL_43:
        *(_QWORD *)(a2 + 24) = 0;
        return;
      }
      v8 = *(_QWORD *)(v3 + 32);
      if ((v8 & 4) != 0)
        v9 = (int *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v3 + 24);
      else
        v9 = *(int **)(v3 + 24);
      if (*((char *)v9 + 23) < 0)
      {
        v11 = *((_QWORD *)v9 + 1);
        if (v11 == 3)
        {
          if (**(_WORD **)v9 != 25956 || *(_BYTE *)(*(_QWORD *)v9 + 2) != 102)
            goto LABEL_43;
          goto LABEL_36;
        }
        if (v11 == 4)
        {
          v14 = **(_DWORD **)v9;
          goto LABEL_38;
        }
        if (v11 != 5)
          goto LABEL_43;
        v9 = *(int **)v9;
      }
      else
      {
        v10 = *((unsigned __int8 *)v9 + 23);
        if (v10 == 3)
        {
          if (*(_WORD *)v9 != 25956 || *((_BYTE *)v9 + 2) != 102)
            goto LABEL_43;
LABEL_36:
          v7 = 1;
          goto LABEL_40;
        }
        if (v10 == 4)
        {
          v14 = *v9;
LABEL_38:
          if (v14 != 1919252079)
            goto LABEL_43;
          v5 = 1;
          goto LABEL_40;
        }
        if (v10 != 5)
          goto LABEL_43;
      }
      if (*v9 != 1935764579 || *((_BYTE *)v9 + 4) != 115)
        goto LABEL_43;
      v6 = 1;
LABEL_40:
      v3 += 40;
      if (v3 == v4)
        goto LABEL_45;
    }
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
LABEL_45:
  *(_QWORD *)a2 = &off_24C537D28;
  *(_BYTE *)(a2 + 10) = v6;
  *(_WORD *)(a2 + 8) = v7 | (unsigned __int16)(v5 << 8);
  *(_QWORD *)(a2 + 24) = a2;
}

_WORD *sub_20C387F90(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C537D28;
  result[4] = *(_WORD *)(a1 + 8);
  *((_BYTE *)result + 10) = *(_BYTE *)(a1 + 10);
  return result;
}

uint64_t sub_20C387FD0(uint64_t result, uint64_t a2)
{
  __int16 v2;

  *(_QWORD *)a2 = &off_24C537D28;
  v2 = *(_WORD *)(result + 8);
  *(_BYTE *)(a2 + 10) = *(_BYTE *)(result + 10);
  *(_WORD *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_20C387FF8(uint64_t a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_20C386D74(a2, (uint64_t)&v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v9, v3))v5 = *(unsigned __int8 *)(a1 + 8 + sub_20C388124((uint64_t)&v9, v4)) | 0x100000000;
  else
    v5 = 0;
  if ((v13 & 7) != 0)
  {
    v6 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  if (v10)
    sub_20C35C614(v10);
  return v5;
}

void sub_20C388098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a12);
  sub_20C96BB64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3880DC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537D88))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C388118()
{
  return &unk_24C537D88;
}

uint64_t sub_20C388124(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;

  v2 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v2 || (*((_BYTE *)v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSpecifier(v2);
}

uint64_t sub_20C388158(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C3881A0(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C3881EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537DA8;
  *a2 = v4;
  return result;
}

void sub_20C38826C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C388280(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t TypeFromSchemaTypeName;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  void *__p;
  uint64_t *v29;
  uint64_t *v30;

  v4 = sub_20C387758(a1);
  __p = 0;
  v29 = 0;
  v30 = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        if (!v5[1])
        {
LABEL_6:
          if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 3)))
          {
            v7 = v5[4];
            if ((v7 & 4) != 0)
              (*(void (**)(uint64_t *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 3);
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v25);
            TypeFromSchemaTypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v25, v8);
            if ((v25 & 7) != 0)
            {
              v10 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
              do
                v11 = __ldxr(v10);
              while (__stlxr(v11 - 2, v10));
            }
            pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
            if ((_QWORD)v25 != TypeFromSchemaTypeName)
            {
              v12 = v29;
              if (v29 >= v30)
              {
                v14 = ((char *)v29 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v14 + 1) >> 61)
                  sub_20BDDF694();
                v15 = ((char *)v30 - (_BYTE *)__p) >> 2;
                if (v15 <= v14 + 1)
                  v15 = v14 + 1;
                if ((unint64_t)((char *)v30 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v16 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v16 = v15;
                if (v16)
                  v17 = (char *)sub_20BDDF6A8((uint64_t)&v30, v16);
                else
                  v17 = 0;
                v18 = (uint64_t *)&v17[8 * v14];
                *v18 = TypeFromSchemaTypeName;
                v13 = v18 + 1;
                v20 = (char *)__p;
                v19 = (char *)v29;
                if (v29 != __p)
                {
                  do
                  {
                    v21 = *((_QWORD *)v19 - 1);
                    v19 -= 8;
                    *--v18 = v21;
                  }
                  while (v19 != v20);
                  v19 = (char *)__p;
                }
                __p = v18;
                v29 = v13;
                v30 = (uint64_t *)&v17[8 * v16];
                if (v19)
                  operator delete(v19);
              }
              else
              {
                *v29 = TypeFromSchemaTypeName;
                v13 = v12 + 1;
              }
              v29 = v13;
            }
          }
        }
      }
      else if (!*((_BYTE *)v5 + 23))
      {
        goto LABEL_6;
      }
      v5 += 5;
      if (v5 == v6)
      {
        v22 = __p;
        v23 = (uint64_t)v29;
        goto LABEL_33;
      }
    }
  }
  v23 = 0;
  v22 = 0;
LABEL_33:
  v25 = 0uLL;
  v26 = 0;
  sub_20BEF2C88(&v25, v22, v23, (v23 - (uint64_t)v22) >> 3);
  v27 = v4;
  *(_QWORD *)(a2 + 24) = 0;
  v24 = (char *)operator new(0x28uLL);
  *(_QWORD *)v24 = &off_24C537DF0;
  *(_OWORD *)(v24 + 8) = v25;
  *((_QWORD *)v24 + 3) = v26;
  v25 = 0uLL;
  v26 = 0;
  v24[32] = v4;
  *(_QWORD *)(a2 + 24) = v24;
  if (__p)
  {
    v29 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_20C3884C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C38852C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C537DF0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C388568(_QWORD *__p)
{
  void *v2;

  *__p = &off_24C537DF0;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *sub_20C3885A4(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C537DF0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_20BEF2C88(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *((_BYTE *)v2 + 32) = *(_BYTE *)(a1 + 32);
  return v2;
}

void sub_20C3885FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C388610(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)a2 = &off_24C537DF0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = sub_20BEF2C88((_QWORD *)(a2 + 8), *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  return result;
}

void sub_20C388660(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_20C388678(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_20C3886A8(uint64_t a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  char *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  int v16;
  int v17;
  uint64_t v18;

  sub_20C386D74(a2, (uint64_t)&v14);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v14, v3))
  {
    v10 = 0;
    goto LABEL_15;
  }
  v6 = v15;
  if (!v15 || (*((_BYTE *)v15 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v15, v4);
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *(uint64_t **)(a1 + 16);
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0x100000000;
    goto LABEL_15;
  }
  v9 = (char *)(*((_QWORD *)v6 + 3) + 40);
  while (*(_BYTE *)(a1 + 32))
  {
    if (*(_QWORD *)v9 == *v7)
      goto LABEL_14;
LABEL_11:
    if (++v7 == v8)
      goto LABEL_12;
  }
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA(v9, *v7, v5) & 1) == 0)
    goto LABEL_11;
LABEL_14:
  v10 = 0x100000001;
LABEL_15:
  if ((v18 & 7) != 0)
  {
    v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  return v10;
}

void sub_20C3887A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a12);
  sub_20C96BB64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3887F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537E50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C388834()
{
  return &unk_24C537E50;
}

uint64_t sub_20C388840(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C388888(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C3888D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537E70;
  *a2 = v4;
  return result;
}

void sub_20C388954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C388968(uint64_t ***a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  const pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t TypeFromSchemaTypeName;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  uint64_t *v42;
  uint64_t *v43;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    __p = 0;
    v42 = 0;
    v43 = 0;
LABEL_51:
    v38 = 0uLL;
    v39 = 0;
    sub_20BEF2C88(&v38, v14, v13, (v13 - (uint64_t)v14) >> 3);
    v40 = v12;
    if ((v12 & 7) != 0)
    {
      v31 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(a2 + 24) = 0;
    v33 = (char *)operator new(0x28uLL);
    *(_QWORD *)v33 = &off_24C537EB8;
    *(_OWORD *)(v33 + 8) = v38;
    v38 = 0uLL;
    v34 = v39;
    v35 = v40;
    v39 = 0;
    v40 = 0;
    *((_QWORD *)v33 + 3) = v34;
    *((_QWORD *)v33 + 4) = v35;
    *(_QWORD *)(a2 + 24) = v33;
    if (__p)
    {
      v42 = (uint64_t *)__p;
      operator delete(__p);
    }
    goto LABEL_58;
  }
  v6 = *a1;
  while (1)
  {
    v7 = *((char *)v6 + 23);
    if (v7 < 0)
      break;
    v8 = (uint64_t *)v6;
    if (v7 == 12)
      goto LABEL_8;
LABEL_12:
    v6 += 5;
    if (v6 == v4)
    {
      v12 = 0;
LABEL_19:
      __p = 0;
      v42 = 0;
      v43 = 0;
      if (v3 == v4)
      {
        v13 = 0;
        v14 = 0;
        goto LABEL_51;
      }
      while (1)
      {
        if (*((char *)v3 + 23) < 0)
        {
          if (!v3[1])
          {
LABEL_24:
            if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 3)))
            {
              v16 = v3[4];
              if ((v16 & 4) != 0)
                (*(void (**)(uint64_t **))(((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v3 + 3);
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v38);
              TypeFromSchemaTypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v38, v17);
              if ((v38 & 7) != 0)
              {
                v19 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
                do
                  v20 = __ldxr(v19);
                while (__stlxr(v20 - 2, v19));
              }
              pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v38);
              if ((_QWORD)v38 != TypeFromSchemaTypeName)
              {
                v21 = v42;
                if (v42 >= v43)
                {
                  v23 = ((char *)v42 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)(v23 + 1) >> 61)
                    sub_20BDDF694();
                  v24 = ((char *)v43 - (_BYTE *)__p) >> 2;
                  if (v24 <= v23 + 1)
                    v24 = v23 + 1;
                  if ((unint64_t)((char *)v43 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                    v25 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v25 = v24;
                  if (v25)
                    v26 = (char *)sub_20BDDF6A8((uint64_t)&v43, v25);
                  else
                    v26 = 0;
                  v27 = (uint64_t *)&v26[8 * v23];
                  *v27 = TypeFromSchemaTypeName;
                  v22 = v27 + 1;
                  v29 = (char *)__p;
                  v28 = (char *)v42;
                  if (v42 != __p)
                  {
                    do
                    {
                      v30 = *((_QWORD *)v28 - 1);
                      v28 -= 8;
                      *--v27 = v30;
                    }
                    while (v28 != v29);
                    v28 = (char *)__p;
                  }
                  __p = v27;
                  v42 = v22;
                  v43 = (uint64_t *)&v26[8 * v25];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *v42 = TypeFromSchemaTypeName;
                  v22 = v21 + 1;
                }
                v42 = v22;
              }
            }
          }
        }
        else if (!*((_BYTE *)v3 + 23))
        {
          goto LABEL_24;
        }
        v3 += 5;
        if (v3 == v4)
        {
          v14 = __p;
          v13 = (uint64_t)v42;
          goto LABEL_51;
        }
      }
    }
  }
  if (v6[1] != (uint64_t *)12)
    goto LABEL_12;
  v8 = *v6;
LABEL_8:
  v9 = *v8;
  v10 = *((_DWORD *)v8 + 2);
  if (v9 != 0x65636E6174736E69 || v10 != 1701667150)
    goto LABEL_12;
  if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 3)))
  {
    v15 = v6[4];
    if ((v15 & 4) != 0)
      (*(void (**)(uint64_t **))(((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v6 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v38);
    v12 = v38;
    v3 = *a1;
    v4 = a1[1];
    goto LABEL_19;
  }
  v12 = 0;
  *(_QWORD *)(a2 + 24) = 0;
LABEL_58:
  if ((v12 & 7) != 0)
  {
    v36 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
}

void sub_20C388CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C388D74(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;

  *a1 = &off_24C537EB8;
  v2 = a1[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20C388DD0(_QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;

  *__p = &off_24C537EB8;
  v2 = __p[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (void *)__p[1];
  if (v5)
  {
    __p[2] = v5;
    operator delete(v5);
  }
  operator delete(__p);
}

_QWORD *sub_20C388E2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24C537EB8;
  sub_20C389058(v2 + 1, v1);
  return v2;
}

void sub_20C388E6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C388E80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C537EB8;
  return sub_20C389058(a2 + 1, a1 + 8);
}

void sub_20C388E9C(uint64_t a1)
{
  sub_20C3890CC(a1 + 8);
}

void sub_20C388EA4(void *a1)
{
  sub_20C3890CC((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C388ECC(uint64_t a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t v5;
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  const pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  sub_20C386D74(a2, (uint64_t)&v12);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v3))
  {
    v8 = 0;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(a1 + 32);
  v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 32);
  v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)*((_QWORD *)v4 - 3);
  v7 = (const pxrInternal__aapl__pxrReserved__::TfType *)*((_QWORD *)v4 - 2);
  if (!v5)
  {
    if (v6 != v7)
    {
      while ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, v6) & 1) == 0)
      {
        v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 8);
        if (v6 == v7)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v8 = 0x100000000;
    goto LABEL_13;
  }
  if (v6 == v7)
    goto LABEL_11;
  while (!pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, v6, v4))
  {
    v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 8);
    if (v6 == v7)
      goto LABEL_11;
  }
LABEL_12:
  v8 = 0x100000001;
LABEL_13:
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  return v8;
}

void sub_20C388FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a12);
  sub_20C96BB64((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C389010(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537F18))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C38904C()
{
  return &unk_24C537F18;
}

_QWORD *sub_20C389058(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BEF2C88(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v4 = *(_QWORD *)(a2 + 24);
  a1[3] = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      a1[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_20C3890CC(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

uint64_t sub_20C389104(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C537900;
  v3 = (void **)(a1 + 8);
  sub_20C00BF24(&v3);
  return a1;
}

void sub_20C38914C(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C537900;
  v2 = (void **)(a1 + 8);
  sub_20C00BF24(&v2);
  operator delete(a1);
}

_QWORD *sub_20C389198@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  *v4 = &unk_24C537900;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = sub_20C384F74(v4 + 1, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v4[4] = *(_QWORD *)(a1 + 32);
  *v4 = off_24C537F38;
  *a2 = v4;
  return result;
}

void sub_20C389218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C38922C(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  BOOL v9;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  char *v23;
  void *__p[2];
  uint64_t v25;
  void *v26[3];
  uint64_t v27;
  __int128 v28;
  void **v29[6];
  __int128 *v30;
  __int128 *v31;
  unint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        if (!*(_QWORD *)(v3 + 8))
          goto LABEL_45;
      }
      else if (!*(_BYTE *)(v3 + 23))
      {
        goto LABEL_45;
      }
      if ((sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 24)) & 1) == 0)
      {
LABEL_45:
        *(_QWORD *)(a2 + 24) = 0;
        goto LABEL_48;
      }
      v5 = *(_QWORD *)(v3 + 32);
      if ((v5 & 4) != 0)
        v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v3 + 24);
      else
        v6 = *(_QWORD *)(v3 + 24);
      if (*(char *)(v6 + 23) >= 0)
        v7 = (_BYTE *)v6;
      else
        v7 = *(_BYTE **)v6;
      v8 = (char)*v7;
      if (*v7)
        v9 = (v8 - 48) >= 0xA;
      else
        v9 = 0;
      if (!v9)
        goto LABEL_30;
      if (v8 != 95 && (v8 & 0xFFFFFFDF) - 65 > 0x19)
        goto LABEL_30;
      do
      {
        v12 = (char)*v7++;
        v11 = v12;
        v13 = (v12 & 0xFFFFFFDF) - 65;
        v14 = v12 - 48;
      }
      while (v12 == 95 || v13 < 0x1A || v14 < 0xA);
      if (v11)
      {
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(v29, v6, 2);
        if (!pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL((uint64_t)v29))
        {
          *(_QWORD *)(a2 + 24) = 0;
          pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v29);
          goto LABEL_48;
        }
        sub_20C389A6C((char *)__p, (__int128 *)v3, (uint64_t)v29);
        v17 = v31;
        if ((unint64_t)v31 >= v32)
        {
          v20 = (__int128 *)sub_20C3896A8((uint64_t *)&v30, (uint64_t)__p);
        }
        else
        {
          v18 = *(_OWORD *)__p;
          *((_QWORD *)v31 + 2) = v25;
          *v17 = v18;
          __p[1] = 0;
          v25 = 0;
          __p[0] = 0;
          *((_DWORD *)v17 + 6) = v26[0];
          v19 = *(_OWORD *)&v26[1];
          *((_QWORD *)v17 + 6) = v27;
          v17[2] = v19;
          v26[2] = 0;
          v27 = 0;
          v26[1] = 0;
          *(__int128 *)((char *)v17 + 56) = v28;
          v28 = 0uLL;
          v20 = (__int128 *)((char *)v17 + 72);
        }
        v31 = v20;
        pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v26);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v29);
      }
      else
      {
        sub_20C389614((char *)__p, (__int128 *)v3, (__int128 *)v6);
        sub_20BE94920((uint64_t *)&v33, (__int128 *)__p);
        if (SHIBYTE(v26[2]) < 0)
          operator delete(v26[0]);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
      }
      v3 += 40;
      if (v3 == v4)
      {
        v21 = v33;
        v22 = v34;
        goto LABEL_46;
      }
    }
  }
  v22 = 0;
  v21 = 0;
LABEL_46:
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  sub_20C33D358((char *)__p, v21, v22, 0xAAAAAAAAAAAAAAABLL * (v22 - v21));
  memset(v26, 0, sizeof(v26));
  sub_20C389AE8(v26, v30, v31, 0x8E38E38E38E38E39 * (((char *)v31 - (char *)v30) >> 3));
  *(_QWORD *)(a2 + 24) = 0;
  v23 = (char *)operator new(0x38uLL);
  *(_QWORD *)v23 = off_24C537F80;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
  *((_QWORD *)v23 + 3) = v25;
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  *((_OWORD *)v23 + 2) = *(_OWORD *)v26;
  *((void **)v23 + 6) = v26[2];
  memset(v26, 0, sizeof(v26));
  *(_QWORD *)(a2 + 24) = v23;
  v29[0] = v26;
  sub_20C389D78(v29);
  v29[0] = __p;
  sub_20BE93030(v29);
LABEL_48:
  v29[0] = (void **)&v30;
  sub_20C389D78(v29);
  v29[0] = (void **)&v33;
  sub_20BE93030(v29);
}

void sub_20C389550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  a25 = v25 - 112;
  sub_20C389D78((void ***)&a25);
  a25 = v25 - 88;
  sub_20BE93030((void ***)&a25);
  _Unwind_Resume(a1);
}

char *sub_20C389614(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20C38968C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3896A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v17[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)sub_20BE7BBA0(v7, v9);
  v11 = &v10[72 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[72 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v11 + 2) = v14;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v17[2] = v11 + 72;
  sub_20C3897EC(a1, v17);
  v15 = a1[1];
  sub_20C3899F8(v17);
  return v15;
}

void sub_20C3897D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3899F8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3897EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C389860((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C389860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v8 - 56) = *(_QWORD *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 72) = v10;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 72) = 0;
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(a3 + v7 - 48);
      v11 = *(_OWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v11;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *((_QWORD *)&v17 + 1) = a7 + v7 - 72;
      v7 -= 72;
    }
    while (a3 + v7 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C389938((uint64_t)v14);
  return v12;
}

uint64_t sub_20C389938(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C38996C((uint64_t *)a1);
  return a1;
}

void sub_20C38996C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C3899BC(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void sub_20C3899BC(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **sub_20C3899F8(void **a1)
{
  sub_20C389A28(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C389A28(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_20C3899BC(v4, i - 72);
  }
}

char *sub_20C389A6C(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_DWORD *)__dst + 6) = *(_DWORD *)a3;
  v6 = *(_OWORD *)(a3 + 8);
  *((_QWORD *)__dst + 6) = *(_QWORD *)(a3 + 24);
  *((_OWORD *)__dst + 2) = v6;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(__dst + 56) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return __dst;
}

_QWORD *sub_20C389AE8(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED5B44(result, a4);
    result = sub_20C389B6C((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C389B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C389D78(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C389B6C(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  void *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = (char *)__dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C389C0C(v4, v6);
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v11 + 72;
      v11 += 72;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C389CF4((uint64_t)v8);
  return v4;
}

void sub_20C389BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C389CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C389C0C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20C389C80((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_20C389C64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C389C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

uint64_t sub_20C389CF4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C389D28((uint64_t *)a1);
  return a1;
}

void sub_20C389D28(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      sub_20C3899BC(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_20C389D78(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_20C3899BC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C389DFC(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_24C537F80;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 32);
  sub_20C389D78(&v4);
  v4 = v2;
  sub_20BE93030(&v4);
  return a1;
}

void sub_20C389E50(char *a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)a1 = off_24C537F80;
  v2 = (void **)(a1 + 8);
  v3 = (void **)(a1 + 32);
  sub_20C389D78(&v3);
  v3 = v2;
  sub_20BE93030(&v3);
  operator delete(a1);
}

_QWORD *sub_20C389EA8(uint64_t a1)
{
  __int128 **v1;
  _QWORD *v2;

  v1 = (__int128 **)(a1 + 8);
  v2 = operator new(0x38uLL);
  *v2 = off_24C537F80;
  sub_20C38A2A8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20C389EE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C389EFC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C537F80;
  return sub_20C38A2A8((uint64_t)(a2 + 1), (__int128 **)(a1 + 8));
}

void sub_20C389F18(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 8);
  v2 = (void **)(a1 + 32);
  sub_20C389D78(&v2);
  v2 = v1;
  sub_20BE93030(&v2);
}

void sub_20C389F58(void **a1)
{
  void **v2;
  void **v3;

  v2 = a1 + 1;
  v3 = a1 + 4;
  sub_20C389D78(&v3);
  v3 = v2;
  sub_20BE93030(&v3);
  operator delete(a1);
}

uint64_t sub_20C389FA4(_QWORD *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v14;
  int v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  char *v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  _BYTE v29[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  uint64_t v33;
  _BYTE v34[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  int v36;
  int v37;
  uint64_t v38;

  sub_20C386D74(a2, (uint64_t)v34);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v34, v3))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)v34, (uint64_t)v29);
    v4 = a1[1];
    v5 = a1[2];
    if (v4 == v5)
    {
LABEL_24:
      v16 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a1[4];
      v17 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a1[5];
      while (v16 != v17)
      {
        pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdProperty *)v29, v16, (uint64_t)&__s1);
        v18 = (char *)v16 + 24;
        v19 = pxrInternal__aapl__pxrReserved__::ArchRegex::Match((uint64_t)v16 + 24, (const char *)&__s1);
        if ((char)v28 < 0)
          operator delete(__s1);
        if ((v19 & 1) == 0)
          goto LABEL_34;
        v16 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v18 + 48);
      }
      v20 = 0x100000001;
    }
    else
    {
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdProperty *)v29, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v4, (uint64_t)&__s1);
        if ((v28 & 0x80u) == 0)
          v6 = v28;
        else
          v6 = __n;
        v7 = *(unsigned __int8 *)(v4 + 47);
        v8 = (char)v7;
        if ((v7 & 0x80u) != 0)
          v7 = *(_QWORD *)(v4 + 32);
        if (v6 != v7)
          break;
        if (v8 >= 0)
          v9 = (unsigned __int8 *)(v4 + 24);
        else
          v9 = *(unsigned __int8 **)(v4 + 24);
        if ((v28 & 0x80) != 0)
        {
          v14 = __s1;
          v15 = memcmp(__s1, v9, __n);
          operator delete(v14);
          if (v15)
            goto LABEL_34;
        }
        else if (v28)
        {
          v10 = 0;
          do
          {
            v11 = *((unsigned __int8 *)&__s1 + v10);
            v12 = v9[v10];
          }
          while (v11 == v12 && v28 - 1 != v10++);
          if (v11 != v12)
            goto LABEL_34;
        }
        v4 += 48;
        if (v4 == v5)
          goto LABEL_24;
      }
      if ((v28 & 0x80) != 0)
        operator delete(__s1);
LABEL_34:
      v20 = 0x100000000;
    }
    if ((v33 & 7) != 0)
    {
      v21 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20BFD265C(&v31);
    if (v30)
      sub_20C35C614(v30);
  }
  else
  {
    v20 = 0;
  }
  if ((v38 & 7) != 0)
  {
    v23 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
  sub_20BFD265C(&v36);
  if (v35)
    sub_20C35C614(v35);
  return v20;
}

void sub_20C38A1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unsigned int *v24;
  unsigned int v25;

  if ((a23 & 7) != 0)
  {
    v24 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&a22 + 1);
  sub_20C96BB64((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C38A260(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537FE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C38A29C()
{
  return &unk_24C537FE0;
}

uint64_t sub_20C38A2A8(uint64_t a1, __int128 **a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C33D358((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20C389AE8((_QWORD *)(a1 + 24), a2[3], a2[4], 0x8E38E38E38E38E39 * (((char *)a2[4] - (char *)a2[3]) >> 3));
  return a1;
}

void sub_20C38A32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE93030((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C38A344(uint64_t a1)
{
  return sub_20BFD265C((_DWORD *)(a1 + 16));
}

void sub_20C38A350()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADING_MODEL))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_SHADING_MODEL);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADING_MODEL);
  }
}

void sub_20C38A394()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdListPositionFrontOfPrependList");
  sub_20BDDC0E4(__p, "The front of the prepend list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C537FF0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdListPositionBackOfPrependList");
  sub_20BDDC0E4(__p, "The back of the prepend list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C537FF0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdListPositionFrontOfAppendList");
  sub_20BDDC0E4(__p, "The front of the append list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C537FF0, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdListPositionBackOfAppendList");
  sub_20BDDC0E4(__p, "The back of the append list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C537FF0, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdLoadWithDescendants");
  sub_20BDDC0E4(__p, "Load prim and all descendants");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538000, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdLoadWithoutDescendants");
  sub_20BDDC0E4(__p, "Load prim and no descendants");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538000, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C38A5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::Open(uint64_t a1@<X0>, char *a2@<X2>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***a3@<X8>)
{
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **v5;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v6;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v7;
  void *v8;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v9;

  *a3 = 0;
  a3[1] = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(a1, 0, a2, &v9);
  if (v9)
  {
    v4 = operator new(8uLL);
    *v4 = 0;
    sub_20C38A6C8(a3, (uint64_t)v4);
    v5 = *a3;
    v6 = v9;
    v9 = 0;
    sub_20C29FC14(v5, v6);
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v7);
      operator delete(v8);
    }
  }
}

void sub_20C38A698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  _Unwind_Resume(a1);
}

void sub_20C38A6C8(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20C38AA20(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSummaryStats(pxrInternal__aapl__pxrReserved__::UsdCrateInfo *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  _QWORD v10[4];
  char v11;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(_QWORD **)v2;
    v4 = (uint64_t)(v3[13] - v3[12]) >> 3;
    *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v2 + 8) - **(_QWORD **)v2) >> 2);
    *(_QWORD *)(a2 + 8) = v4;
    v5 = (uint64_t)(v3[19] - v3[18]) >> 2;
    *(_QWORD *)(a2 + 16) = (uint64_t)(v3[16] - v3[15]) >> 3;
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = (uint64_t)(v3[7] - v3[6]) >> 4;
    v6 = (int *)v3[9];
    v7 = (int *)v3[10];
    if (v6 == v7)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = *v6++;
        if (v9 == -1)
          ++v8;
      }
      while (v6 != v7);
    }
    *(_QWORD *)(a2 + 40) = v8;
  }
  else
  {
    v10[0] = "usd/crateInfo.cpp";
    v10[1] = "GetSummaryStats";
    v10[2] = 56;
    v10[3] = "UsdCrateInfo::SummaryStats pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSummaryStats() const";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdCrateInfo object");
  }
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSections(pxrInternal__aapl__pxrReserved__::UsdCrateInfo *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;
  char **v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)this)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSectionsNameStartSize(**(_QWORD ***)this, (uint64_t *)&v8);
    v3 = (__int128 *)v8;
    v4 = (__int128 *)v9;
    if (v8 != v9)
    {
      v5 = a2[1];
      do
      {
        v6 = (uint64_t *)v3 + 3;
        v7 = (uint64_t *)(v3 + 2);
        if (v5 >= a2[2])
        {
          v5 = sub_20C38ABD0(a2, v3, v6, v7);
        }
        else
        {
          sub_20C38AB60(a2, v3, v6, v7);
          v5 += 40;
        }
        a2[1] = v5;
        v3 = (__int128 *)((char *)v3 + 40);
      }
      while (v3 != v4);
    }
    v13 = &v8;
    sub_20BEE7D5C((void ***)&v13);
  }
  else
  {
    v8 = "usd/crateInfo.cpp";
    v9 = "GetSections";
    v10 = 74;
    v11 = "vector<UsdCrateInfo::Section> pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSections() const";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdCrateInfo object");
  }
}

void sub_20C38A91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEE7D5C(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetFileVersion(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***this@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD v5[4];
  char v6;

  if (*this)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersionToken(**this, a2, a3, (uint64_t)a4);
  }
  else
  {
    v5[0] = "usd/crateInfo.cpp";
    v5[1] = "GetFileVersion";
    v5[2] = 89;
    v5[3] = "TfToken pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetFileVersion() const";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdCrateInfo object");
    *a4 = 0;
  }
}

unsigned int **pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSoftwareVersion@<X0>(pxrInternal__aapl__pxrReserved__::UsdCrateInfo *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int **result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  result = (unsigned int **)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSoftwareVersionToken(this);
  v4 = *result;
  *a2 = *result;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a2 = v5;
  }
  return result;
}

_QWORD *sub_20C38AA20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C538020;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C38AA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C38AB20((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C38AA90(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C38AAA4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    sub_20C29FC14(*(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)(a1 + 24), 0);
    operator delete(v1);
  }
}

uint64_t sub_20C38AAE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538070))
    return a1 + 24;
  else
    return 0;
}

void sub_20C38AB20(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_20C29FC14(v2, 0);
    operator delete(v2);
  }
}

_QWORD *sub_20C38AB60(_QWORD *result, __int128 *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = result;
  v5 = result[1];
  v6 = *a3;
  v7 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_20BDDBFAC((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v8;
  }
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 32) = v7;
  v4[1] = v5 + 40;
  return result;
}

void sub_20C38ABC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C38ABD0(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];
  char *v23;
  char *v24;
  uint64_t *v25;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    sub_20BDDF694();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v25 = a1 + 2;
  if (v13)
    v14 = (char *)sub_20BED4724(v11, v13);
  else
    v14 = 0;
  v15 = &v14[40 * v6];
  v22[0] = v14;
  v22[1] = v15;
  v23 = v15;
  v24 = &v14[40 * v13];
  v16 = *a3;
  v17 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v15, *(void **)a2, *((_QWORD *)a2 + 1));
    v15 = v23;
  }
  else
  {
    v18 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v18;
  }
  v19 = &v14[40 * v6];
  *((_QWORD *)v19 + 3) = v16;
  *((_QWORD *)v19 + 4) = v17;
  v23 = v15 + 40;
  sub_20C38AD14(a1, v22);
  v20 = a1[1];
  sub_20BEE8178((uint64_t)v22);
  return v20;
}

void sub_20C38AD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEE8178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C38AD14(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C38AD88((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C38AD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C38AE30((uint64_t)v11);
  return v9;
}

uint64_t sub_20C38AE30(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEE8134(a1);
  return a1;
}

void sub_20C38AE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  void *v20[2];
  char v21;

  sub_20BDDC0E4(v20, "USD_AUTO_APPLY_API_SCHEMAS");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 0, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v0 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USD_AUTO_APPLY_API_SCHEMAS", "USD API schema auto application details");
  sub_20BDDC0E4(v20, "USD_CHANGES");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 1, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v1 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "USD_CHANGES", "USD change processing");
  sub_20BDDC0E4(v20, "USD_CLIPS");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 2, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v2 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "USD_CLIPS", "USD clip details");
  sub_20BDDC0E4(v20, "USD_COMPOSITION");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 3, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v3 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "USD_COMPOSITION", "USD composition details");
  sub_20BDDC0E4(v20, "USD_DATA_BD");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 4, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v4 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "USD_DATA_BD", "USD BD file format traces");
  sub_20BDDC0E4(v20, "USD_DATA_BD_TRY");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 5, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v5 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5 + 20, "USD_DATA_BD_TRY", "USD BD call traces. Prints names, errors and results.");
  sub_20BDDC0E4(v20, "USD_INSTANCING");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 6, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v6 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v6 + 24, "USD_INSTANCING", "USD instancing diagnostics");
  sub_20BDDC0E4(v20, "USD_PATH_RESOLUTION");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 7, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v7 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v7 + 28, "USD_PATH_RESOLUTION", "USD path resolution diagnostics");
  sub_20BDDC0E4(v20, "USD_PAYLOADS");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 8, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v8 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v8 + 32, "USD_PAYLOADS", "USD payload load/unload messages");
  sub_20BDDC0E4(v20, "USD_PRIM_LIFETIMES");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 9, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v9 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v9 + 36, "USD_PRIM_LIFETIMES", "USD prim ctor/dtor messages");
  sub_20BDDC0E4(v20, "USD_SCHEMA_REGISTRATION");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 10, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v10 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v10 + 40, "USD_SCHEMA_REGISTRATION", "USD schema registration details.");
  sub_20BDDC0E4(v20, "USD_STAGE_CACHE");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 11, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v11 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v11 + 44, "USD_STAGE_CACHE", "USD stage cache details");
  sub_20BDDC0E4(v20, "USD_STAGE_LIFETIMES");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 12, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v12 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v12 + 48, "USD_STAGE_LIFETIMES", "USD stage ctor/dtor messages");
  sub_20BDDC0E4(v20, "USD_STAGE_OPEN");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 13, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v13 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v13 + 52, "USD_STAGE_OPEN", "USD stage opening details");
  sub_20BDDC0E4(v20, "USD_STAGE_INSTANTIATION_TIME");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 14, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v14 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v14 + 56, "USD_STAGE_INSTANTIATION_TIME", "USD stage instantiation timing");
  sub_20BDDC0E4(v20, "USD_VALIDATE_VARIABILITY");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 16, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v15 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v15 + 64, "USD_VALIDATE_VARIABILITY", "USD attribute variability validation");
  sub_20BDDC0E4(v20, "USD_VALUE_RESOLUTION");
  __p = 0;
  v18 = 0;
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538088, 15, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (v21 < 0)
    operator delete(v20[0]);
  v16 = sub_20C287C80();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v16 + 60, "USD_VALUE_RESOLUTION", "USD trace of layers inspected as values are resolved");
}

void sub_20C38B5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  uint64_t EditTarget;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  _QWORD v17[4];
  char v18;

  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_20C369024(a2);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
    EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)EditTarget;
    v11 = *(_QWORD *)(EditTarget + 8);
    *(_QWORD *)(a1 + 24) = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_20C20123C((_DWORD *)(a1 + 32), EditTarget + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16));
  }
  v14 = sub_20C369024((_QWORD *)a1);
  if (!(v15 & 1 | (unint64_t)v14))
  {
    v17[0] = "usd/editContext.cpp";
    v17[1] = "UsdEditContext";
    v17[2] = 36;
    v17[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(const UsdStagePtr &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct EditContext with invalid stage");
  }
  return a1;
}

{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  uint64_t EditTarget;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  pxrInternal__aapl__pxrReserved__::UsdStage *v16;
  _QWORD v18[4];
  char v19;

  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_20C369024(a2);
  if (v8 & 1 | (unint64_t)v7)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
    EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)EditTarget;
    v11 = *(_QWORD *)(EditTarget + 8);
    *(_QWORD *)(a1 + 24) = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_20C20123C((_DWORD *)(a1 + 32), EditTarget + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16));
  }
  v14 = sub_20C369024((_QWORD *)a1);
  if (v15 & 1 | (unint64_t)v14)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v16, (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a2 + 2));
  }
  else
  {
    v18[0] = "usd/editContext.cpp";
    v18[1] = "UsdEditContext";
    v18[2] = 62;
    v18[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(const std::pair<UsdStagePtr, UsdEditTarget> &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct EditContext with invalid stage");
  }
  return a1;
}

void sub_20C38B734(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  sub_20C38B7B4(v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C38B7B4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 16));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t (*v9)(uint64_t *);
  char v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  uint64_t EditTarget;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t (*v16)(uint64_t *);
  char v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  _QWORD v20[4];
  char v21;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = sub_20C369024(a2);
  if (v10 & 1 | (unint64_t)v9)
  {
    v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
    EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v11);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)EditTarget;
    v13 = *(_QWORD *)(EditTarget + 8);
    *(_QWORD *)(a1 + 24) = v13;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_20C20123C((_DWORD *)(a1 + 32), EditTarget + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16));
  }
  v16 = sub_20C369024((_QWORD *)a1);
  if (v17 & 1 | (unint64_t)v16)
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v18, a3);
  }
  else
  {
    v20[0] = "usd/editContext.cpp";
    v20[1] = "UsdEditContext";
    v20[2] = 46;
    v20[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(const UsdStagePtr &, const UsdEditTarget &)";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct EditContext with invalid stage");
  }
  return a1;
}

void sub_20C38B940(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  sub_20C38B7B4(v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20C38BAF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  sub_20C38B7B4(v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext(pxrInternal__aapl__pxrReserved__::UsdEditContext *this)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t (*v4)(uint64_t *);
  char v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v15[4];
  char v16;

  v2 = sub_20C369024(this);
  if (v3 & 1 | (unint64_t)v2)
  {
    v4 = sub_20BFD2F78((_QWORD *)this + 2);
    if (v5 & 1 | (unint64_t)v4
      || (v15[0] = "usd/editContext.cpp",
          v15[1] = "~UsdEditContext",
          v15[2] = 72,
          v15[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext()",
          v16 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "_originalEditTarget.IsValid()", 0) & 1) != 0))
    {
      v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)this);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v6, (pxrInternal__aapl__pxrReserved__::UsdEditContext *)((char *)this + 16));
    }
  }
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::UsdEditContext *)((char *)this + 32));
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
  }
}

pxrInternal__aapl__pxrReserved__::UsdEditTarget *pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  sub_20C20116C((uint64_t)this + 16);
  return this;
}

void sub_20C38BCAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B4E8(v3);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE *v8;
  _BOOL8 IsIdentity;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v11;
  _QWORD **v12;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  _QWORD v15[2];
  _BYTE v16[40];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(double *)v15 = a3;
  *(double *)&v15[1] = a4;
  *(_QWORD *)a1 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_BYTE *)(a1 + 16);
  sub_20C20116C(a1 + 16);
  IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v15);
  if (IsIdentity)
  {
    v10 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    if (v8 != (_BYTE *)v10)
    {
      v11 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 16));
      sub_20C20123C(v11, v10);
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v10 + 40);
  }
  else
  {
    v12 = (_QWORD **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v12, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v15, (uint64_t)v16);
    if (v8 != v16)
    {
      v13 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 16));
      sub_20C201ECC(v13, (uint64_t)v16);
    }
    *(_OWORD *)(a1 + 56) = v17;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v16);
  }
  return a1;
}

void sub_20C38BDD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  sub_20C2011B8(v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(_QWORD *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[1];
  v15 = *a2;
  v16 = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C38BEEC(a3, &v15, (uint64_t)(a1 + 2));
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

void sub_20C38BECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  if (a10)
    sub_20C96B340(a10);
  sub_20C96BB88(v10);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *sub_20C38BEEC@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v7;
  char *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t **v14;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;
  uint64_t *LayerStack;
  _QWORD *v17;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *result;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v19;
  _QWORD **v20;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v21;
  uint64_t *v22[3];
  double v23[5];
  __int128 v24;
  _DWORD *v25[8];

  v25[7] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  v9 = (char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v7, v8);
  sub_20C20123C((_DWORD *)a3, (uint64_t)v9);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(v9 + 40);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(Path);
  v12 = (_OWORD *)(a3 + 40);
  if ((_DWORD)v11)
  {
    v13 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(v11);
    sub_20C38CAD0((uint64_t *)v22, v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, (int *)v23);
    v25[0] = Path;
    v14 = sub_20C246A40(v22, (unint64_t *)Path, (uint64_t)&unk_20CAC184C, v25);
    sub_20BFD3EBC((int *)v14 + 9, (int *)v23);
    sub_20BFD3F10((int *)v14 + 10, (int *)v23 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
    sub_20BFD265C(v23);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v23, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v22, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v23, (uint64_t)v25);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)a3, (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v25, (uint64_t)v23);
    if (v23 != (double *)a3)
    {
      v15 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a3);
      sub_20C201ECC(v15, (uint64_t)v23);
    }
    *v12 = v24;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v23);
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v25);
    sub_20BFE4CE8((uint64_t)v22, v22[1]);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  v17 = (_QWORD *)sub_20C1FE500(LayerStack);
  result = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v17, a2);
  v19 = result;
  if (result)
  {
    v20 = (_QWORD **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(result);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v20, v19, (uint64_t)v25);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)a3, (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v25, (uint64_t)v23);
    if (v23 != (double *)a3)
    {
      v21 = sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a3);
      sub_20C201ECC(v21, (uint64_t)v23);
    }
    *v12 = v24;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v23);
    return sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v25);
  }
  return result;
}

void sub_20C38C0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  sub_20BFE4CE8((uint64_t)va, v6);
  sub_20C2011B8(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t a1, uint64_t *a2, double a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v5;
  _BOOL8 IsIdentity;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v8;
  _QWORD **v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;
  _QWORD v12[2];
  _BYTE v13[40];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(double *)v12 = a3;
  *(double *)&v12[1] = a4;
  v5 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(sub_20C1034E8((uint64_t *)a1, a2) + 2);
  sub_20C20116C((uint64_t)v5);
  IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v12);
  if (IsIdentity)
  {
    v7 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    if (v5 != (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v7)
    {
      v8 = sub_20C2011B8(v5);
      sub_20C20123C(v8, v7);
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 + 40);
  }
  else
  {
    v9 = (_QWORD **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v9, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v12, (uint64_t)v13);
    if (v5 != (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v13)
    {
      v10 = sub_20C2011B8(v5);
      sub_20C201ECC(v10, (uint64_t)v13);
    }
    *(_OWORD *)(a1 + 56) = v14;
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v13);
  }
  return a1;
}

void sub_20C38C244(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  sub_20C2011B8(v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;

  sub_20C1034E8(a1, a2);
  sub_20C1034E8(&v11, a2);
  sub_20C38BEEC(a3, &v11, (uint64_t)(a1 + 2));
  v6 = v12;
  if (v12)
  {
    v7 = (unsigned int *)(v12 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

void sub_20C38C320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  v15 = *(unsigned int **)(v10 + 8);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20C20123C((_DWORD *)(a1 + 16), a3);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 40);
  return a1;
}

void sub_20C38C3E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B4E8(v3);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdEditTarget::ForLocalDirectVariant(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, _QWORD *a2@<X0>, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *IsPrimVariantSelectionPath;
  unint64_t v7;
  uint64_t **v8;
  const char *Text;
  double v10[2];
  uint64_t *v11[3];
  _DWORD *v12[4];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  IsPrimVariantSelectionPath = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(this);
  if ((IsPrimVariantSelectionPath & 1) != 0)
  {
    v7 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(IsPrimVariantSelectionPath);
    sub_20C38CAD0((uint64_t *)v11, v7);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(this, (int *)v10);
    v12[0] = this;
    v8 = sub_20C246A40(v11, (unint64_t *)this, (uint64_t)&unk_20CAC184C, v12);
    sub_20BFD3EBC((int *)v8 + 9, (int *)v10);
    sub_20BFD3F10((int *)v8 + 10, (int *)v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    sub_20BFD265C(v10);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v10, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v11, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v10, (uint64_t)v12);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((uint64_t)a3, a2, (uint64_t)v12);
    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v12);
    sub_20BFE4CE8((uint64_t)v11, v11[1]);
  }
  else
  {
    v12[0] = "usd/editTarget.cpp";
    v12[1] = "ForLocalDirectVariant";
    v12[2] = (_DWORD *)131;
    v12[3] = "static UsdEditTarget pxrInternal__aapl__pxrReserved__::UsdEditTarget::ForLocalDirectVariant(const SdfLayerH"
             "andle &, const SdfPath &)";
    v13 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Provided varSelPath <%s> must be a prim variant selection path.", Text);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3);
  }
}

void sub_20C38C578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  sub_20BFE4CE8((uint64_t)va, v8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_20BEB560C(a1, a2);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==(a1 + 16, a2 + 16);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  BOOL v7;
  uint64_t v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  uint64_t v12;
  int v13;
  int v14;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v15;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16), a2, &v13);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13))
    goto LABEL_9;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v13, (uint64_t *)&v10);
  v5 = v10;
  v6 = v11;
  if (v10 == v11)
  {
LABEL_8:
    v15 = &v10;
    sub_20BFD6F90((void ***)&v15);
LABEL_9:
    sub_20BFD38A4(a3, &v13);
    sub_20BFD38DC(a3 + 1, &v14);
    goto LABEL_10;
  }
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v4, v5, &v9);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (int *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
    sub_20BFD265C(&v9);
    v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 1);
      sub_20BFD3EBC(&v13, (int *)&v9);
      sub_20BFD3F10(&v14, (int *)&v9 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
      sub_20BFD265C(&v9);
    }
    else
    {
      *(_QWORD *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_20BFD265C(&v15);
    if (!v7)
      break;
    v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    if (v5 == v6)
      goto LABEL_8;
  }
  v15 = &v10;
  sub_20BFD6F90((void ***)&v15);
LABEL_10:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_20BFD265C(&v13);
}

void sub_20C38C7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BFD6F90(&a14);
  sub_20BFD1A18(&a13);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  char v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  int v9;
  int v10;

  result = (unint64_t)sub_20BFD2F78(this);
  if (v7 & 1 | result)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(this, a2, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (unint64_t)sub_20BFD265C(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C38C8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t result;
  char v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  int v9;
  int v10;

  result = (unint64_t)sub_20BFD2F78(this);
  if (v7 & 1 | result)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(this, a2, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(a3, v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (unint64_t)sub_20BFD265C(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C38C958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetSpecForScenePath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  char v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  int v9;
  int v10;

  result = (unint64_t)sub_20BFD2F78(this);
  if (v7 & 1 | result)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(this, a2, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (unint64_t)sub_20BFD265C(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C38CA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *pxrInternal__aapl__pxrReserved__::UsdEditTarget::ComposeOver@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *v8;
  _QWORD v10[8];

  v10[7] = *MEMORY[0x24BDAC8D0];
  v6 = sub_20BFD2F78(this);
  if (v7 & 1 | (unint64_t)v6)
    v8 = this;
  else
    v8 = a2;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16), (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)a2 + 16), (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3, v8, (uint64_t)v10);
  return sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v10);
}

void sub_20C38CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C38CAD0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C38CB24(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20C38CB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE4CE8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C38CB24(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20C251510(v5, v6, (_QWORD *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError::~UsdExpiredPrimAccessError(std::exception *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::_Reduce<pxrInternal__aapl__pxrReserved__::VtDictionary>(const void ****a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v4;

  pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(a1, a2, 0, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v4);
  *(_QWORD *)(a3 + 8) = &off_24C51D8C8;
  sub_20BF4D058((unsigned int **)a3, (const void ****)&v4);
  sub_20BF49F14(&v4, 0);
}

void sub_20C38CC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_Reduce<std::map<std::string,std::string>>(_QWORD *a1@<X0>, const void ***a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12[3];
  __int128 *v13;

  sub_20BDEBF8C((uint64_t *)v12, a2);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v13 = (__int128 *)(v6 + 4);
      v8 = sub_20BDDDFDC(v12, (const void **)v6 + 4, (uint64_t)&unk_20CAC184C, &v13);
      std::string::operator=((std::string *)(v8 + 7), (const std::string *)(v6 + 7));
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v5);
  }
  a3[1] = &off_24C526858;
  sub_20C0307AC(a3, (const void ***)v12);
  sub_20BDE9D48((uint64_t)v12, v12[1]);
}

void sub_20C38CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BDE9D48((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::_Reduce<pxrInternal__aapl__pxrReserved__::SdfSpecifier>@<X0>(int *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *result;
  *(_QWORD *)(a3 + 8) = (char *)&off_24C527CC0 + 3;
  if (v3 == 1)
    v3 = *a2;
  *(_DWORD *)a3 = v3;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_Reduce(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, _QWORD *a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::VtValue *v5;
  pxrInternal__aapl__pxrReserved__ *v7;
  const std::type_info *v9;
  char *v10;
  uint64_t Type;
  const std::type_info *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void ****v59;
  uint64_t v60;
  const char **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  const void ***v68;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__ *v71;

  v5 = a2;
  if (!*((_QWORD *)this + 1))
  {
    v14 = a4;
    goto LABEL_8;
  }
  v7 = this;
  if (!*((_QWORD *)a2 + 1)
    || (sub_20C0AA3E8(this) & 1) != 0
    || sub_20C0AA3E8(v5)
    || (Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v7, v9, v10),
        Type != pxrInternal__aapl__pxrReserved__::VtValue::GetType(v5, v12, v13)))
  {
LABEL_6:
    v14 = a4;
    a2 = v7;
LABEL_8:
    sub_20BF4C6D0(v14, a2);
    return;
  }
  if (sub_20C0DE26C(v7))
  {
    v15 = *((_QWORD *)v7 + 1);
    if ((v15 & 4) != 0)
      v7 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    v16 = *((_QWORD *)v5 + 1);
    if ((v16 & 4) != 0)
      v5 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    v17 = *(_DWORD *)v7;
    a4[1] = (char *)&off_24C527CC0 + 3;
    if (v17 == 1)
      v17 = *(_DWORD *)v5;
    *(_DWORD *)a4 = v17;
  }
  else if (sub_20BFE4F24(v7))
  {
    v18 = *((_QWORD *)v7 + 1);
    if ((v18 & 4) != 0)
      v19 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v19 = *(_QWORD **)v7;
    v20 = *((_QWORD *)v5 + 1);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v21 = *(_QWORD *)v5;
    sub_20C38D484(v19, v21, (uint64_t)a4);
  }
  else if (sub_20BFE5014(v7))
  {
    v22 = *((_QWORD *)v7 + 1);
    if ((v22 & 4) != 0)
      v23 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v23 = *(_QWORD **)v7;
    v24 = *((_QWORD *)v5 + 1);
    if ((v24 & 4) != 0)
      v25 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v25 = *(_QWORD *)v5;
    sub_20C38D5EC(v23, v25, (uint64_t)a4);
  }
  else if (sub_20BFE4F9C(v7))
  {
    v26 = *((_QWORD *)v7 + 1);
    if ((v26 & 4) != 0)
      v27 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v27 = *(_QWORD **)v7;
    v28 = *((_QWORD *)v5 + 1);
    if ((v28 & 4) != 0)
      v29 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v28 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v29 = *(_QWORD *)v5;
    sub_20C38D754(v27, v29, (uint64_t)a4);
  }
  else if (sub_20BFE508C(v7))
  {
    v30 = *((_QWORD *)v7 + 1);
    if ((v30 & 4) != 0)
      v31 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v31 = *(_QWORD **)v7;
    v32 = *((_QWORD *)v5 + 1);
    if ((v32 & 4) != 0)
      v33 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v32 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v33 = *(_QWORD *)v5;
    sub_20C38D8BC(v31, v33, (uint64_t)a4);
  }
  else if (sub_20BFE517C(v7))
  {
    v34 = *((_QWORD *)v7 + 1);
    if ((v34 & 4) != 0)
      v35 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v35 = *(_QWORD **)v7;
    v36 = *((_QWORD *)v5 + 1);
    if ((v36 & 4) != 0)
      v37 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v36 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v37 = *(_QWORD *)v5;
    sub_20C38DA24(v35, v37, (uint64_t)a4);
  }
  else if (sub_20BFE5104(v7))
  {
    v38 = *((_QWORD *)v7 + 1);
    if ((v38 & 4) != 0)
      v39 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v39 = *(_QWORD *)v7;
    v40 = *((_QWORD *)v5 + 1);
    if ((v40 & 4) != 0)
      v41 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v40 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v41 = *(_QWORD *)v5;
    sub_20C38DB8C(v39, v41, (uint64_t)a4);
  }
  else if (sub_20BFD6B4C(v7))
  {
    v42 = *((_QWORD *)v7 + 1);
    if ((v42 & 4) != 0)
      v43 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v43 = *(_QWORD *)v7;
    v44 = *((_QWORD *)v5 + 1);
    if ((v44 & 4) != 0)
      v45 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v44 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v45 = *(_QWORD *)v5;
    sub_20C38DCF4(v43, v45, (uint64_t)a4);
  }
  else if (sub_20BFE45A0(v7))
  {
    v46 = *((_QWORD *)v7 + 1);
    if ((v46 & 4) != 0)
      v47 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v47 = *(_QWORD *)v7;
    v48 = *((_QWORD *)v5 + 1);
    if ((v48 & 4) != 0)
      v49 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v48 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v49 = *(_QWORD *)v5;
    sub_20C38DE5C(v47, v49, (uint64_t)a4);
  }
  else if (sub_20BFE4618(v7))
  {
    v50 = *((_QWORD *)v7 + 1);
    if ((v50 & 4) != 0)
      v51 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v51 = *(_QWORD *)v7;
    v52 = *((_QWORD *)v5 + 1);
    if ((v52 & 4) != 0)
      v53 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v52 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v53 = *(_QWORD *)v5;
    sub_20C38DFC4(v51, v53, (uint64_t)a4);
  }
  else if (sub_20BFE4EAC(v7))
  {
    v54 = *((_QWORD *)v7 + 1);
    if ((v54 & 4) != 0)
      v55 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v55 = *(_QWORD *)v7;
    v56 = *((_QWORD *)v5 + 1);
    if ((v56 & 4) != 0)
      v57 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v56 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(v5);
    else
      v57 = *(_QWORD *)v5;
    sub_20C38E12C(v55, v57, (uint64_t)a4);
  }
  else if (sub_20BF4A73C(v7))
  {
    v58 = *((_QWORD *)v7 + 1);
    if ((v58 & 4) != 0)
      v59 = (const void ****)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v58 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 168))(v7);
    else
      v59 = *(const void *****)v7;
    v60 = *((_QWORD *)v5 + 1);
    if ((v60 & 4) != 0)
      v61 = (const char **)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v61 = *(const char ***)v5;
    pxrInternal__aapl__pxrReserved__::_Reduce<pxrInternal__aapl__pxrReserved__::VtDictionary>(v59, v61, (uint64_t)a4);
  }
  else if (sub_20BFEB19C(v7))
  {
    v62 = *((_QWORD *)v7 + 1);
    if ((v62 & 4) != 0)
      v63 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v63 = *(_QWORD *)v7;
    v64 = *((_QWORD *)v5 + 1);
    if ((v64 & 4) != 0)
      (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    a4[1] = &off_24C528438;
    sub_20C0E81C4(a4, v63);
  }
  else
  {
    if (!sub_20C0302AC(v7))
    {
      v69 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v69)
        v69 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v69 + 56) & 0xFFFFFFFFFFFFFFF8)
        && sub_20BFB5E50(v7))
      {
        v70 = *((_QWORD *)v7 + 1);
        v71 = v7;
        if ((v70 & 4) != 0)
          v71 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
        if (*(_QWORD *)v71)
          a2 = v7;
        else
          a2 = v5;
        v14 = a4;
        goto LABEL_8;
      }
      goto LABEL_6;
    }
    v65 = *((_QWORD *)v7 + 1);
    if ((v65 & 4) != 0)
      v66 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v66 = *(_QWORD **)v7;
    v67 = *((_QWORD *)v5 + 1);
    if ((v67 & 4) != 0)
      v68 = (const void ***)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    else
      v68 = *(const void ****)v5;
    pxrInternal__aapl__pxrReserved__::_Reduce<std::map<std::string,std::string>>(v66, v68, a4);
  }
}

void sub_20C38D484(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(a1, v12, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526AA0;
    sub_20C032218((unsigned int **)a3, (uint64_t)v12);
    sub_20C394EF4((uint64_t)v12);
  }
  else
  {
    sub_20C394EF4((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = int]";
    v13 = 0;
    sub_20C394E2C((uint64_t)a1);
    sub_20C394E2C(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38D5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38D5EC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(a1, v12, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526C10;
    sub_20C0339F8((unsigned int **)a3, (uint64_t)v12);
    sub_20C394EF4((uint64_t)v12);
  }
  else
  {
    sub_20C394EF4((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = unsigned int]";
    v13 = 0;
    sub_20C394F7C((uint64_t)a1);
    sub_20C394F7C(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38D710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38D754(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations(a1, v12, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526B58;
    sub_20C032E60((unsigned int **)a3, (uint64_t)v12);
    sub_20C394EF4((uint64_t)v12);
  }
  else
  {
    sub_20C394EF4((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = long long]";
    v13 = 0;
    sub_20C395044((uint64_t)a1);
    sub_20C395044(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38D878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38D8BC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(a1, v12, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526CC8;
    sub_20C0345C8((unsigned int **)a3, (uint64_t)v12);
    sub_20C394EF4((uint64_t)v12);
  }
  else
  {
    sub_20C394EF4((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = unsigned long long]";
    v13 = 0;
    sub_20C39510C((uint64_t)a1);
    sub_20C39510C(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38D9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38DA24(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(a1, v12, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526D80;
    sub_20C036F00((unsigned int **)a3, (uint64_t)v12);
    sub_20C39529C((uint64_t)v12);
  }
  else
  {
    sub_20C39529C((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = pxrInter"
             "nal__aapl__pxrReserved__::TfToken]";
    v13 = 0;
    sub_20C3951D4((uint64_t)a1);
    sub_20C3951D4(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38DB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38DB8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(v12, a1, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C5266D8;
    sub_20C02FE24((unsigned int **)a3, (uint64_t)v12);
    sub_20C3953F4((uint64_t)v12);
  }
  else
  {
    sub_20C3953F4((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = std::string]";
    v13 = 0;
    sub_20C39532C(a1);
    sub_20C39532C(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38DCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38DCF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(v12, a1, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C5249C8;
    sub_20BFD86E0((unsigned int **)a3, (uint64_t)v12);
    sub_20C39554C((uint64_t)v12);
  }
  else
  {
    sub_20C39554C((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = pxrInter"
             "nal__aapl__pxrReserved__::SdfPath]";
    v13 = 0;
    sub_20C395484(a1);
    sub_20C395484(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38DE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38DE5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(v12, a1, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526620;
    sub_20C02F37C((unsigned int **)a3, (uint64_t)v12);
    sub_20C3956A4((uint64_t)v12);
  }
  else
  {
    sub_20C3956A4((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = pxrInter"
             "nal__aapl__pxrReserved__::SdfPayload]";
    v13 = 0;
    sub_20C3955DC(a1);
    sub_20C3955DC(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38DF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38DFC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(v12, a1, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C526568;
    sub_20C02C8C8((unsigned int **)a3, (uint64_t)v12);
    sub_20C3957FC((uint64_t)v12);
  }
  else
  {
    sub_20C3957FC((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = pxrInter"
             "nal__aapl__pxrReserved__::SdfReference]";
    v13 = 0;
    sub_20C395734(a1);
    sub_20C395734(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38E0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20C38E12C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  const char *p_p;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _QWORD v12[4];
  char v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(v12, a1, a2);
  if (v14)
  {
    *(_QWORD *)(a3 + 8) = &off_24C52AC70;
    sub_20C1D5D98((unsigned int **)a3, (uint64_t)v12);
    sub_20C395954((uint64_t)v12);
  }
  else
  {
    sub_20C395954((uint64_t)v12);
    v12[0] = "usd/flattenUtils.cpp";
    v12[1] = "_Reduce";
    v12[2] = 137;
    v12[3] = "VtValue pxrInternal__aapl__pxrReserved__::_Reduce(const SdfListOp<T> &, const SdfListOp<T> &) [T = pxrInter"
             "nal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v13 = 0;
    sub_20C39588C(a1);
    sub_20C39588C(a2);
    if (v11 >= 0)
      v6 = (const char *)&v10;
    else
      v6 = (const char *)v10;
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not reduce listOp %s over %s", v6, p_p);
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C38E250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v8;
  uint64_t *Identifier;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v10;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *v11;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v12;
  uint64_t v13;
  std::string::size_type size;
  size_t v15;
  std::string *p_p;
  const void *v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  unsigned int *v19;
  unsigned int v20;
  std::string *v21;
  uint64_t v22;
  void *v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  void *v25;
  std::string *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v29;
  _QWORD *v30[2];
  _BYTE v31[8];
  const char *v32[2];
  _QWORD **v33;
  std::string __p;
  std::string *v35;
  _BYTE v36[48];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v8);
  v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  v11 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute(Identifier, v11, 0, v32);
  v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  v13 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v12);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v36, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v13 + 32));
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
  pxrInternal__aapl__pxrReserved__::TfGetExtension(a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
    {
LABEL_3:
      if (*(char *)(a3 + 23) < 0)
        sub_20BDDBFAC(&__p, *(void **)a3, *(_QWORD *)(a3 + 8));
      else
        __p = *(std::string *)a3;
      goto LABEL_18;
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_3;
  }
  if (*(char *)(a3 + 23) >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  p_p = &__p;
  sub_20BDF6BDC((uint64_t)&__p, v15 + 5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*(char *)(a3 + 23) >= 0)
      v17 = (const void *)a3;
    else
      v17 = *(const void **)a3;
    memmove(p_p, v17, v15);
  }
  strcpy((char *)p_p + v15, ".usda");
LABEL_18:
  v30[0] = 0;
  v30[1] = 0;
  v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v29, a4);
  sub_20BDE9D48((uint64_t)&v29, v30[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v18, &v28);
  v19 = (unsigned int *)v28;
  v29 = v28;
  if (v28)
  {
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C538378;
  __p.__r_.__value_.__l.__size_ = a2;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
  v35 = &__p;
  sub_20C38E668(a1, &v29, (uint64_t)&__p);
  v21 = v35;
  if (v35 == &__p)
  {
    v22 = 4;
    v21 = &__p;
  }
  else
  {
    if (!v35)
      goto LABEL_27;
    v22 = 5;
  }
  (*(void (**)(void))(v21->__r_.__value_.__r.__words[0] + 8 * v22))();
LABEL_27:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v23, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v28);
  v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v24, &v29);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C538378;
  __p.__r_.__value_.__l.__size_ = a2;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
  v35 = &__p;
  sub_20C38EA7C(a1, &v29, (uint64_t)&__p);
  v26 = v35;
  if (v35 == &__p)
  {
    v27 = 4;
    v26 = &__p;
    goto LABEL_31;
  }
  if (v35)
  {
    v27 = 5;
LABEL_31:
    (*(void (**)(void))(v26->__r_.__value_.__r.__words[0] + 8 * v27))();
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v25, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v36);
  sub_20BF49F14(&v33, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v32);
}

void sub_20C38E564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&a28);
  sub_20BF49F14((_QWORD ***)&a19, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C38E668(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v6;
  uint64_t *Layers;
  uint64_t **v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t Schema;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  unsigned int SpecType;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t **v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v33;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v35;
  uint64_t **v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  void **v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  v8 = (uint64_t **)sub_20BFD5244(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v50);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v50);
  Schema = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v9);
  v11 = v51;
  if (v51)
  {
    v12 = (unsigned int *)(v51 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v15 = sub_20BFD5244(a2);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v15);
  v17 = sub_20BFD5244(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &v46);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFields(Schema, SpecType, &v50);
  v18 = v50;
  v19 = (uint64_t *)v51;
  while (v18 != v19)
  {
    v20 = sub_20C38FB44();
    v21 = sub_20C0D8030(v20, v18);
    if ((_QWORD *)(sub_20C38FB44() + 8) == v21)
    {
      sub_20C38FD04(a1, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v18, a3, (pxrInternal__aapl__pxrReserved__ *)&v48);
      v22 = (uint64_t **)sub_20BFD5244(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v22, &v44);
      v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v44);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)v18, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v48);
      v24 = v45;
      if (v45)
      {
        v25 = (unsigned int *)(v45 + 8);
        do
        {
          v26 = __ldxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      sub_20BF4C2D8((uint64_t)&v48);
    }
    ++v18;
  }
  v48 = (void **)&v50;
  sub_20BEEB2B8(&v48);
  if (SpecType == 1)
  {
    v28 = *Layers;
    if (Layers[1] != *Layers)
    {
      v29 = 0;
      v30 = 0;
      while (1)
      {
        v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(v28 + v29));
        v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v32)
          v32 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v32 + 432), 0))break;
        v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + v29));
        v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v34)
          v34 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v34 + 88), 0))
        {
          ++v30;
          v28 = *Layers;
          v29 += 8;
          if (v30 < (Layers[1] - *Layers) >> 3)
            continue;
        }
        goto LABEL_37;
      }
      v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v35)
        v35 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      sub_20C38FD04(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 432), a3, (pxrInternal__aapl__pxrReserved__ *)&v50);
      v36 = (uint64_t **)sub_20BFD5244(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v36, (uint64_t *)&v48);
      v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v48);
      v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v38)
        v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v38 + 432), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v50);
      v39 = v49;
      if (v49)
      {
        v40 = (unsigned int *)(v49 + 8);
        do
        {
          v41 = __ldxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
      sub_20BF4C2D8((uint64_t)&v50);
    }
  }
LABEL_37:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  return sub_20BFD265C(&v46);
}

void sub_20C38E98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C38EA7C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v6;
  uint64_t *Layers;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  char *v12;
  char *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  char *v18;
  char *i;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  char *v27;
  char *v28;
  uint64_t *EmptyString;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v33;
  uint64_t *v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v35;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t *v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t **v44;
  void *v45;
  char *j;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v52;
  const pxrInternal__aapl__pxrReserved__::TfToken *v53;
  const pxrInternal__aapl__pxrReserved__::TfToken *v54;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  uint64_t *v56;
  uint64_t *v57;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v58;
  pxrInternal__aapl__pxrReserved__::TfToken *SpecType;
  const char *v60;
  const char *Text;
  void **v62;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v63;
  uint64_t *v64;
  uint64_t *v65;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v66;
  void *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v72;
  unsigned int **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v81;
  unsigned int **v82;
  unint64_t *p_shared_owners;
  void *v84[2];
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unsigned int *v90;
  int v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *__p;
  const char *v97;
  uint64_t v98;
  const char *v99;
  char v100;
  unsigned int *v101;
  unsigned int *v102;
  uint64_t v103;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v104;

  v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  sub_20C2205D4((uint64_t)&v91, 0, 0.0, 0.5);
  v8 = sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &__p);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v9)
    v9 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (char *)v9 + 32, (void **)&v93, &v91, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 216));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFD265C(&__p);
  v12 = v93;
  v13 = v94;
  while (v12 != v13)
  {
    if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
    __p = 0;
    v97 = 0;
    v98 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New(a2, 0, &v101);
    if (SHIBYTE(v98) < 0)
      operator delete(__p);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v101) & 1) == 0)
    {
      v15 = v101;
      __p = v101;
      if (v101)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      sub_20C38E668(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p, a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
      sub_20C38EA7C(a1, &v101, a3);
    }
    v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v101);
    v12 += 8;
  }
  v17 = sub_20C0B0CA4(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v17) != 7)
  {
    v18 = v93;
    for (i = v94; i != v18; i -= 8)
    {
      v21 = *((_QWORD *)i - 1);
      v20 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
    }
    v94 = v18;
    sub_20C234818(&v91);
    v24 = sub_20C0B0CA4(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
    v25 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v25)
      v25 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (char *)v25 + 64, (void **)&v93, &v91, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFD265C(&__p);
    v27 = v93;
    v28 = v94;
    if (v93 != v94)
    {
      do
      {
        if ((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
        pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(a2, (uint64_t)EmptyString, (void **)&v90);
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v90) & 1) == 0)
        {
          v31 = v90;
          __p = v90;
          if (v90)
          {
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 + 1, v31));
          }
          sub_20C38E668(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p, a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
          v101 = 0;
          v102 = 0;
          v103 = 0;
          sub_20C2205D4((uint64_t)&__p, 0, 0.0, 0.5);
          v33 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
          v34 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v33);
          v35 = sub_20C0B3C54((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v90);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v35, v84);
          v36 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v36)
            v36 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v84, (char *)v36 + 56, (void **)&v101, (int *)&__p, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v84 + 1);
          v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFD265C(v84);
          v39 = v101;
          v38 = v102;
          while (v39 != v38)
          {
            if ((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) != 0)
              v40 = (uint64_t *)((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v40 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
            pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v90, (__int128 *)v40, &v104);
            if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v104) & 1) == 0)
            {
              v42 = (unsigned int *)v104;
              v84[0] = v104;
              if (v104)
              {
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 + 1, v42));
              }
              sub_20C38E668(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v84, a3);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v84);
              v44 = (uint64_t **)sub_20BFE8634(&v104);
              pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v44, v84);
              sub_20C38EA7C(a1, v84, a3);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v45, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v84);
            }
            v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v41, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v104);
            v39 += 2;
          }
          v84[0] = &v97;
          sub_20C2207E4((void ***)v84);
          __p = &v101;
          sub_20BEEB2B8((void ***)&__p);
        }
        v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v30, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v90);
        v27 += 8;
      }
      while (v27 != v28);
      v27 = v93;
      for (j = v94; j != v27; j -= 8)
      {
        v48 = *((_QWORD *)j - 1);
        v47 = v48;
        if ((v48 & 7) != 0)
        {
          v49 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
          do
            v50 = __ldxr(v49);
          while (__stlxr(v50 - 2, v49));
        }
      }
    }
    v94 = v27;
    sub_20C234818(&v91);
    v51 = sub_20C0B0CA4(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &__p);
    v52 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v52)
      v52 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (char *)v52 + 40, (void **)&v93, &v91, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    v53 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v93;
    v54 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v94;
    if (v93 != v94)
    {
      do
      {
        v55 = sub_20C0B0CA4(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v55, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, v53, (int *)&v104);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        v57 = (uint64_t *)*Layers;
        v56 = (uint64_t *)Layers[1];
        while (1)
        {
          if (v57 == v56)
          {
            LODWORD(SpecType) = 0;
            goto LABEL_60;
          }
          v58 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v57);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v104))break;
          ++v57;
        }
        v63 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v57);
        SpecType = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v63, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
        if ((_DWORD)SpecType == 8)
        {
          if ((*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8) != 0)
            v65 = (uint64_t *)((*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v65 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(SpecType);
          pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(a2, (uint64_t)v65, 1u, 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p) & 1) == 0)
          {
            v77 = (unsigned int *)__p;
            v101 = (unsigned int *)__p;
            if (__p)
            {
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 + 1, v77));
            }
            sub_20C38E668(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v101, a3);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v101);
            v79 = (unsigned int *)__p;
            v101 = (unsigned int *)__p;
            if (__p)
            {
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 + 1, v79));
            }
            v81 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v81)
              v81 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v82 = (unsigned int **)sub_20C0B22EC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
            pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v82, &v86);
            sub_20C394AFC(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v101, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v81 + 424), &v86, a3);
            v74 = v87;
            if (v87)
            {
              p_shared_owners = (unint64_t *)&v87->__shared_owners_;
              do
                v76 = __ldaxr(p_shared_owners);
              while (__stlxr(v76 - 1, p_shared_owners));
              goto LABEL_100;
            }
LABEL_102:
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v101);
          }
LABEL_103:
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v67, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
          goto LABEL_104;
        }
        if ((_DWORD)SpecType == 1)
        {
          if ((*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8) != 0)
            v64 = (uint64_t *)((*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v64 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(SpecType);
          v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v66)
            v66 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(a2, (uint64_t)v64, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v66 + 16), 0, 0, (unsigned int **)&__p);
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p) & 1) == 0)
          {
            v68 = (unsigned int *)__p;
            v101 = (unsigned int *)__p;
            if (__p)
            {
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 + 1, v68));
            }
            sub_20C38E668(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v101, a3);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v101);
            v70 = (unsigned int *)__p;
            v101 = (unsigned int *)__p;
            if (__p)
            {
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 + 1, v70));
            }
            v72 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v72)
              v72 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v73 = (unsigned int **)sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
            pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v73, &v88);
            sub_20C394AFC(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v101, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v72 + 56), &v88, a3);
            v74 = v89;
            if (v89)
            {
              v75 = (unint64_t *)&v89->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
LABEL_100:
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            goto LABEL_102;
          }
          goto LABEL_103;
        }
LABEL_60:
        __p = "usd/flattenUtils.cpp";
        v97 = "_FlattenSpec";
        v98 = 705;
        v99 = "void pxrInternal__aapl__pxrReserved__::_FlattenSpec(const PcpLayerStackRefPtr &, const SdfPrimSpecHandle &"
              ", const _ResolveAssetPathFn &)";
        v100 = 0;
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, SpecType, (uint64_t)&v101);
        if (v103 >= 0)
          v60 = (const char *)&v101;
        else
          v60 = (const char *)v101;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
        sub_20C204894(a1);
        v62 = v84;
        if (v85 < 0)
          v62 = (void **)v84[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown spec type %s at <%s> in %s\n", v60, Text, (const char *)v62);
        if (v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v103) < 0)
          operator delete(v101);
LABEL_104:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v104 + 1);
        sub_20BFD265C(&v104);
        v53 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v53 + 8);
      }
      while (v53 != v54);
    }
  }
  __p = &v92;
  sub_20C2207E4((void ***)&__p);
  __p = &v93;
  sub_20BEEB2B8((void ***)&__p);
}

void sub_20C38F358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_20BFD1A18(&a39);
  a39 = &a27;
  sub_20C2207E4((void ***)&a39);
  a39 = (uint64_t *)&a36;
  sub_20BEEB2B8((void ***)&a39);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &unk_24C538408;
  v5[1] = pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPathAdvanced;
  v6 = v5;
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(a1, (std::string::size_type)v5, a2, a3);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20C38F5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPathAdvanced(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  __int128 v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  v4 = (void **)(a1 + 2);
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression(a1 + 2))
  {
    sub_20C38F794((uint64_t)v4, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 5), (uint64_t)&v5);
    *(_OWORD *)__p = v5;
    v8 = v6;
    v4 = __p;
  }
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPath(a1, (uint64_t)v4, a2);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_20C38F6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C5384B8;
  v6[1] = a2;
  v7 = v6;
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(a1, (std::string::size_type)v6, a3, a4);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20C38F758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C38F794@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  __int128 v10;
  std::string __p;
  void **v13[4];
  char v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(v13, a1);
  sub_20C2169A0((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)v13, a2, &v15);
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)v13);
  if (v17 != v18)
  {
    sub_20BEE380C("; ", v17, v18, &__p);
    v13[0] = (void **)"usd/flattenUtils.cpp";
    v13[1] = (void **)"_EvaluateAssetPathExpression";
    v13[2] = (void **)725;
    v13[3] = (void **)"std::string pxrInternal__aapl__pxrReserved__::_EvaluateAssetPathExpression(const std::string &, co"
                      "nst VtDictionary &)";
    v14 = 0;
    v7 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"Error evaluating expression %s: %s", v6, v7, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0)
      v9 = (*(uint64_t (**)(uint64_t *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    else
      v9 = v15;
    if (*(char *)(v9 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)v9, *(_QWORD *)(v9 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)a3 = v10;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  sub_20BEB3F28((uint64_t)v19);
  v13[0] = (void **)&v17;
  sub_20BDE5038(v13);
  return sub_20BF4C2D8((uint64_t)&v15);
}

void sub_20C38F92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20C216BE8((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPath(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v3;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t *Resolver;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  void **p_s1;
  void *__s1;
  size_t __n;
  unsigned __int8 v16;
  void *v17;
  unint64_t v18;
  unsigned __int8 v19;

  v3 = (void **)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, (uint64_t)&v17);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v5);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  v7 = v16;
  if ((v16 & 0x80u) == 0)
    v8 = v16;
  else
    v8 = __n;
  v9 = v19;
  v10 = (char)v19;
  v11 = v18;
  if ((v19 & 0x80u) != 0)
    v9 = v18;
  if (v8 != v9)
  {
LABEL_22:
    v3 = &v17;
    if (v10 < 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  if ((v19 & 0x80u) == 0)
    v12 = (unsigned __int8 *)&v17;
  else
    v12 = (unsigned __int8 *)v17;
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(__s1, v12, __n))
      goto LABEL_22;
  }
  else if (v16)
  {
    p_s1 = &__s1;
    while (*(unsigned __int8 *)p_s1 == *v12)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      ++v12;
      if (!--v7)
        goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_24:
  if (*((char *)v3 + 23) < 0)
  {
    v11 = (unint64_t)v3[1];
LABEL_27:
    sub_20BDDBFAC((_BYTE *)a3, *v3, v11);
    goto LABEL_28;
  }
LABEL_25:
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_QWORD *)(a3 + 16) = v3[2];
LABEL_28:
  if ((char)v16 < 0)
    operator delete(__s1);
  if ((char)v19 < 0)
    operator delete(v17);
}

void sub_20C38FAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C38FB44()
{
  uint64_t **v0;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v2;
  uint64_t *v3;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;

  v0 = (uint64_t **)atomic_load(&qword_254988798);
  if (!v0)
  {
    v0 = (uint64_t **)operator new(0x18uLL);
    v0[1] = 0;
    v0[2] = 0;
    *v0 = (uint64_t *)(v0 + 1);
    v2 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v2)
      v2 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v3 = (uint64_t *)*((_QWORD *)v2 + 9);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v4)
      v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v5 = (uint64_t *)*((_QWORD *)v4 + 10);
    while (v3 != v5)
    {
      sub_20C0A7D18(v0, v0 + 1, v3, v3);
      ++v3;
    }
    v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6)
      v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C0D7FB4(v0, (uint64_t *)v6 + 53, (uint64_t *)v6 + 53);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C0D7FB4(v0, (uint64_t *)v7 + 7, (uint64_t *)v7 + 7);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8)
      v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C0D7FB4(v0, (uint64_t *)v8 + 45, (uint64_t *)v8 + 45);
    v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v9)
      v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C0D7FB4(v0, (uint64_t *)v9 + 46, (uint64_t *)v9 + 46);
    v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v10)
      v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C0D7FB4(v0, (uint64_t *)v10 + 54, (uint64_t *)v10 + 54);
    while (!__ldaxr(&qword_254988798))
    {
      if (!__stlxr((unint64_t)v0, &qword_254988798))
        return (unint64_t)v0;
    }
    __clrex();
    sub_20BF2B200((uint64_t)v0, v0[1]);
    operator delete(v0);
    return atomic_load(&qword_254988798);
  }
  return (unint64_t)v0;
}

_DWORD *sub_20C38FD04@<X0>(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__ *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v8;
  uint64_t *Layers;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  unsigned int SpecType;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *LayerOffsetForLayer;
  double *v22;
  const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v29;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  uint64_t Identifier;
  uint64_t v33;
  void *v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  unsigned int v36;
  char *v37;
  void *p_p;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v39;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v40;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v41;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v42;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v43;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v44;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  _BOOL4 v52;
  const pxrInternal__aapl__pxrReserved__::VtDictionary **v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v58;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v59;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v60;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v65;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v66;
  _QWORD *v67;
  void **v68;
  uint64_t v69;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v70;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v71;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v72;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v73;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v74;
  pxrInternal__aapl__pxrReserved__ *v76;
  int v79;
  int v80;
  char v81[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *__p;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  void **v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  __int128 v119;
  uint64_t v120;
  const char *v121;
  void *v122[3];
  void *v123[3];
  void *v124[3];
  void *v125[3];
  void *v126[5];

  v126[3] = *(void **)MEMORY[0x24BDAC8D0];
  v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v8);
  v10 = sub_20BFD5244(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v79);
  v11 = sub_20BFD5244(a2);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v11);
  *((_QWORD *)a5 + 1) = 0;
  v13 = *Layers;
  if (Layers[1] != *Layers)
  {
    v14 = SpecType;
    v15 = 0;
    v16 = SpecType;
    while (1)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(v13 + 8 * v15));
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79) & 1) != 0)break;
LABEL_77:
      ++v15;
      v13 = *Layers;
      if (v15 >= (Layers[1] - *Layers) >> 3)
        goto LABEL_159;
    }
    v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + 8 * v15));
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79) != v14)
    {
      *(_QWORD *)&v119 = "usd/flattenUtils.cpp";
      *((_QWORD *)&v119 + 1) = "_ReduceField";
      v120 = 500;
      v121 = "VtValue pxrInternal__aapl__pxrReserved__::_ReduceField(const PcpLayerStackRefPtr &, const SdfSpecHandle &, "
             "const TfToken &, const _ResolveAssetPathFn &)";
      LOBYTE(v122[0]) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
      v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + 8 * v15));
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v31);
      if (*(char *)(Identifier + 23) >= 0)
        v33 = Identifier;
      else
        v33 = *(_QWORD *)Identifier;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, v16, (uint64_t)&v105);
      if (SHIBYTE(v107) >= 0)
        v34 = &v105;
      else
        v34 = v105;
      v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + 8 * v15));
      v36 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, v36, (uint64_t)&__p);
      p_p = &__p;
      if (v97 < 0)
        p_p = __p;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v119, (pxrInternal__aapl__pxrReserved__ *)"UsdFlattenLayerStack: Ignoring spec at <%s> in @%s@: expected spec type %s but found %s", v37, Text, v33, v34, p_p);
      if (v97 < 0)
        operator delete(__p);
      if (SHIBYTE(v107) < 0)
        operator delete(v105);
      goto LABEL_77;
    }
    v104 = 0;
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(*Layers + 8 * v15));
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v103) & 1) == 0)
    {
LABEL_76:
      sub_20BF4C2D8((uint64_t)&v103);
      goto LABEL_77;
    }
    v20 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(a1);
    LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v20, v15);
    v22 = (double *)LayerOffsetForLayer;
    if (!LayerOffsetForLayer || pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(LayerOffsetForLayer))
    {
LABEL_8:
      v24 = sub_20C1034E8((uint64_t *)&v119, (uint64_t *)(*Layers + 8 * v15));
      sub_20C390E94(v24, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v103);
      v25 = *((_QWORD *)&v119 + 1);
      if (*((_QWORD *)&v119 + 1))
      {
        v26 = (unsigned int *)(*((_QWORD *)&v119 + 1) + 8);
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      if (sub_20BFE4F24((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
      {
        if ((v104 & 4) != 0)
          v29 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
        else
          v29 = v103;
        sub_20C031ADC((uint64_t)&v105, (uint64_t)v29);
        sub_20C392CB4((uint64_t)&v105, (uint64_t)&v119);
        sub_20C031D24((uint64_t)&v103, (uint64_t)&v119);
      }
      else if (sub_20BFE5014((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
      {
        if ((v104 & 4) != 0)
          v39 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
        else
          v39 = v103;
        sub_20C033524((uint64_t)&v105, (uint64_t)v39);
        sub_20C392FFC((uint64_t)&v105, (uint64_t)&v119);
        sub_20C03376C((uint64_t)&v103, (uint64_t)&v119);
      }
      else if (sub_20BFE4F9C((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
      {
        if ((v104 & 4) != 0)
          v43 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
        else
          v43 = v103;
        sub_20C03298C((uint64_t)&v105, (uint64_t)v43);
        sub_20C393344((uint64_t)&v105, (uint64_t)&v119);
        sub_20C032BD4((uint64_t)&v103, (uint64_t)&v119);
      }
      else
      {
        if (!sub_20BFE508C((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
        {
          if (sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
          {
            if ((v104 & 4) != 0)
              v65 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
            else
              v65 = v103;
            sub_20C0366AC((uint64_t)&__p, (uint64_t)v65);
            sub_20C3939FC((uint64_t)&__p, (uint64_t)&v119);
            sub_20C0368F4((uint64_t)&v103, (uint64_t)&v119);
            v105 = v126;
            sub_20BEEB2B8((void ***)&v105);
            v105 = v125;
            sub_20BEEB2B8((void ***)&v105);
            v105 = v124;
            sub_20BEEB2B8((void ***)&v105);
            v105 = v123;
            sub_20BEEB2B8((void ***)&v105);
            v105 = v122;
            sub_20BEEB2B8((void ***)&v105);
            v105 = (char *)&v119 + 8;
            sub_20BEEB2B8((void ***)&v105);
            v105 = &v102;
            sub_20BEEB2B8((void ***)&v105);
            v105 = &v101;
            sub_20BEEB2B8((void ***)&v105);
            v105 = &v100;
            sub_20BEEB2B8((void ***)&v105);
            v105 = &v99;
            sub_20BEEB2B8((void ***)&v105);
            v105 = &v98;
            sub_20BEEB2B8((void ***)&v105);
            v105 = &v96;
            sub_20BEEB2B8((void ***)&v105);
          }
          else if (sub_20BFE5104((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
          {
            if ((v104 & 4) != 0)
              v70 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
            else
              v70 = v103;
            sub_20C02F650((uint64_t)&v88, (uint64_t)v70);
            sub_20C393CE0((uint64_t)&v88, (uint64_t)&v119);
            sub_20C02F8C8((uint64_t)&v103, (uint64_t)&v119);
            v105 = v126;
            sub_20BDE5038((void ***)&v105);
            v105 = v125;
            sub_20BDE5038((void ***)&v105);
            v105 = v124;
            sub_20BDE5038((void ***)&v105);
            v105 = v123;
            sub_20BDE5038((void ***)&v105);
            v105 = v122;
            sub_20BDE5038((void ***)&v105);
            v105 = (char *)&v119 + 8;
            sub_20BDE5038((void ***)&v105);
            v105 = &v94;
            sub_20BDE5038((void ***)&v105);
            v105 = &v93;
            sub_20BDE5038((void ***)&v105);
            v105 = &v92;
            sub_20BDE5038((void ***)&v105);
            v105 = &v91;
            sub_20BDE5038((void ***)&v105);
            v105 = &v90;
            sub_20BDE5038((void ***)&v105);
            v105 = &v89;
            sub_20BDE5038((void ***)&v105);
          }
          else if (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
          {
            if ((v104 & 4) != 0)
              v71 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
            else
              v71 = v103;
            sub_20BFD6BC4((uint64_t)v81, (uint64_t)v71);
            sub_20C393FB8((uint64_t)v81, (uint64_t)&v119);
            sub_20C029A24((uint64_t)&v103, (uint64_t)&v119);
            v105 = v126;
            sub_20BFD6F90((void ***)&v105);
            v105 = v125;
            sub_20BFD6F90((void ***)&v105);
            v105 = v124;
            sub_20BFD6F90((void ***)&v105);
            v105 = v123;
            sub_20BFD6F90((void ***)&v105);
            v105 = v122;
            sub_20BFD6F90((void ***)&v105);
            v105 = (char *)&v119 + 8;
            sub_20BFD6F90((void ***)&v105);
            v105 = &v87;
            sub_20BFD6F90((void ***)&v105);
            v105 = &v86;
            sub_20BFD6F90((void ***)&v105);
            v105 = &v85;
            sub_20BFD6F90((void ***)&v105);
            v105 = &v84;
            sub_20BFD6F90((void ***)&v105);
            v105 = &v83;
            sub_20BFD6F90((void ***)&v105);
            v105 = &v82;
            sub_20BFD6F90((void ***)&v105);
          }
          else if (sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
          {
            if ((v104 & 4) != 0)
              v72 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
            else
              v72 = v103;
            sub_20C02E924((uint64_t)&v105, (uint64_t)v72);
            sub_20C394284((uint64_t)&v105, (uint64_t)&v119);
            sub_20C02EB9C((uint64_t)&v103, (uint64_t)&v119);
            sub_20C02C9C4((void **)&v119);
            sub_20C02C9C4(&v105);
          }
          else if (sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
          {
            if ((v104 & 4) != 0)
              v73 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
            else
              v73 = v103;
            sub_20C02BDC4((uint64_t)&v105, (uint64_t)v73);
            sub_20C394578((uint64_t)&v105, (uint64_t)&v119);
            sub_20C02C054((uint64_t)&v103, (uint64_t)&v119);
            sub_20C029B80((void **)&v119);
            sub_20C029B80(&v105);
          }
          else if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
          {
            if ((v104 & 4) != 0)
              v74 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
            else
              v74 = v103;
            sub_20C036FFC((uint64_t)&v105, (uint64_t)v74);
            sub_20C394860((uint64_t)&v105, (uint64_t)&v119);
            sub_20C332A54((uint64_t)&v103, (uint64_t)&v119);
            sub_20C0282CC((void **)&v119);
            sub_20C0282CC(&v105);
          }
          goto LABEL_75;
        }
        if ((v104 & 4) != 0)
          v44 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
        else
          v44 = v103;
        sub_20C0340F4((uint64_t)&v105, (uint64_t)v44);
        sub_20C3936A0((uint64_t)&v105, (uint64_t)&v119);
        sub_20C03433C((uint64_t)&v103, (uint64_t)&v119);
      }
      if (v126[0])
      {
        v126[1] = v126[0];
        operator delete(v126[0]);
      }
      if (v125[0])
      {
        v125[1] = v125[0];
        operator delete(v125[0]);
      }
      if (v124[0])
      {
        v124[1] = v124[0];
        operator delete(v124[0]);
      }
      if (v123[0])
      {
        v123[1] = v123[0];
        operator delete(v123[0]);
      }
      if (v122[0])
      {
        v122[1] = v122[0];
        operator delete(v122[0]);
      }
      if (*((_QWORD *)&v119 + 1))
      {
        v120 = *((_QWORD *)&v119 + 1);
        operator delete(*((void **)&v119 + 1));
      }
      if (v117)
      {
        v118 = v117;
        operator delete(v117);
      }
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      if (v113)
      {
        v114 = v113;
        operator delete(v113);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      if (v109)
      {
        v110 = v109;
        operator delete(v109);
      }
      if (v106)
      {
        v107 = v106;
        operator delete(v106);
      }
LABEL_75:
      pxrInternal__aapl__pxrReserved__::_Reduce(a5, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v103, a3, &v119);
      sub_20BF4B5D8(a5, &v119);
      sub_20BF4C2D8((uint64_t)&v119);
      goto LABEL_76;
    }
    v40 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v40)
      v40 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v40 + 1) & 0xFFFFFFFFFFFFFFF8))
    {
      if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
      {
        if ((v104 & 4) != 0)
          v45 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
        else
          v45 = v103;
        pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p, v45);
        v76 = a5;
        *(_QWORD *)&v119 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p);
        *((_QWORD *)&v119 + 1) = v46;
        v47 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p);
        v49 = v48;
        while (1)
        {
          v50 = v119;
          v51 = !v49 || (_QWORD)v119 == v47;
          v52 = v51;
          if (*((_QWORD *)&v119 + 1) == v49 && v52)
            break;
          v54 = (const pxrInternal__aapl__pxrReserved__::VtDictionary **)(v119 + 56);
          if ((sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v119 + 56)) & 1) != 0)
          {
            v57 = *(_QWORD *)(v50 + 64);
            if ((v57 & 4) != 0)
              v58 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(v50 + 56);
            else
              v58 = *v54;
            pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v88, v58);
            v59 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v59)
              v59 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            sub_20C391958(v22, v59, (pxrInternal__aapl__pxrReserved__::TfToken *)&v88);
            v60 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v60)
              v60 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            sub_20C391958(v22, (_QWORD *)v60 + 10, (pxrInternal__aapl__pxrReserved__::TfToken *)&v88);
            v106 = &off_24C51D8C8;
            sub_20BF4D058((unsigned int **)&v105, (const void ****)&v88);
            sub_20BF4B5D8(v54, &v105);
            sub_20BF4C2D8((uint64_t)&v105);
            sub_20BF49F14(&v88, 0);
          }
          sub_20BF4D354(&v119, v55, v56);
        }
        sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)&v103, (const void ****)&__p);
        sub_20BF49F14((_QWORD ***)&__p, 0);
        a5 = v76;
      }
      goto LABEL_8;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v41)
      v41 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v41 + 35) & 0xFFFFFFFFFFFFFFF8))
    {
      v42 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v42)
        v42 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v42 + 30) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue((const void *****)&v103, (pxrInternal__aapl__pxrReserved__::VtValue *)v22, v23);
        goto LABEL_8;
      }
      if (!sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
        goto LABEL_8;
      if ((v104 & 4) != 0)
        v66 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
      else
        v66 = v103;
      sub_20C02E924((uint64_t)&v119, (uint64_t)v66);
      v67 = operator new(0x20uLL);
      *v67 = &unk_24C538198;
      v67[1] = sub_20C391ADC;
      *((_OWORD *)v67 + 1) = *(_OWORD *)v22;
      v108 = (void **)v67;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations(&v119, (uint64_t)&v105, 0);
      v68 = v108;
      if (v108 == &v105)
      {
        v68 = &v105;
        v69 = 4;
      }
      else
      {
        if (!v108)
        {
LABEL_133:
          sub_20C02EAC8((pxrInternal__aapl__pxrReserved__::VtValue *)&v103, (char *)&v119);
          v105 = v126;
          sub_20C021818((void ***)&v105);
          v105 = v125;
          sub_20C021818((void ***)&v105);
          v105 = v124;
          sub_20C021818((void ***)&v105);
          v105 = v123;
          sub_20C021818((void ***)&v105);
          v105 = v122;
          sub_20C021818((void ***)&v105);
          v105 = (char *)&v119 + 8;
          sub_20C021818((void ***)&v105);
          goto LABEL_8;
        }
        v69 = 5;
      }
      (*((void (**)(void))*v68 + v69))();
      goto LABEL_133;
    }
    if (!sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)&v103))
      goto LABEL_8;
    if ((v104 & 4) != 0)
      v61 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v104 & 0xFFFFFFFFFFFFFFF8) + 168))(&v103);
    else
      v61 = v103;
    sub_20C02BDC4((uint64_t)&v119, (uint64_t)v61);
    v62 = operator new(0x20uLL);
    *v62 = &unk_24C5380E8;
    v62[1] = sub_20C391A2C;
    *((_OWORD *)v62 + 1) = *(_OWORD *)v22;
    v108 = (void **)v62;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations(&v119, (uint64_t)&v105, 0);
    v63 = v108;
    if (v108 == &v105)
    {
      v63 = &v105;
      v64 = 4;
    }
    else
    {
      if (!v108)
      {
LABEL_130:
        sub_20C02BF80((pxrInternal__aapl__pxrReserved__::VtValue *)&v103, (char *)&v119);
        v105 = v126;
        sub_20C021740((void ***)&v105);
        v105 = v125;
        sub_20C021740((void ***)&v105);
        v105 = v124;
        sub_20C021740((void ***)&v105);
        v105 = v123;
        sub_20C021740((void ***)&v105);
        v105 = v122;
        sub_20C021740((void ***)&v105);
        v105 = (char *)&v119 + 8;
        sub_20C021740((void ***)&v105);
        goto LABEL_8;
      }
      v64 = 5;
    }
    (*((void (**)(void))*v63 + v64))();
    goto LABEL_130;
  }
LABEL_159:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
  return sub_20BFD265C(&v79);
}

void sub_20C390B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v43;
  uint64_t v44;

  sub_20C0282CC((void **)(v44 - 248));
  sub_20C0282CC((void **)&STACK[0x2F0]);
  sub_20BF4C2D8((uint64_t)&STACK[0x2E0]);
  sub_20BF4C2D8(v43);
  sub_20BFD1A18(&a43);
  _Unwind_Resume(a1);
}

void sub_20C390E94(_QWORD *a1, _QWORD *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v8;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v9;
  int v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  void (*v21)(uint64_t@<X0>, uint64_t@<X1>, __int128 *@<X2>, char *@<X8>);
  __int128 *v22;
  uint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v36;
  uint64_t v37;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  _BOOL4 v45;
  const pxrInternal__aapl__pxrReserved__::VtDictionary **v47;
  char *v48;
  uint64_t v49;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v50;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v51;
  pxrInternal__aapl__pxrReserved__::VtValue *v52;
  pxrInternal__aapl__pxrReserved__::VtValue *v53;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v54;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v55;
  pxrInternal__aapl__pxrReserved__::VtValue *v56;
  pxrInternal__aapl__pxrReserved__::VtValue *v57;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD **v62;
  _QWORD **v63[2];
  _QWORD **v64;
  void (*v65)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, _QWORD *@<X8>);
  _QWORD v66[6];
  void (*v67)(uint64_t@<X0>, uint64_t@<X1>, __int128 *@<X2>, char *@<X8>);
  _BYTE v68[24];
  _BYTE *v69;
  __int128 v70;
  void *__p[2];
  uint64_t v72;
  const char *v73;
  __int128 v74;
  _QWORD **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  _QWORD **v84[4];

  v84[1] = *(_QWORD ***)MEMORY[0x24BDAC8D0];
  if (sub_20BFED488(a4))
  {
    sub_20C391D64((uint64_t)a1, a3, a4);
    return;
  }
  if (sub_20BFED500(a4))
  {
    sub_20C391ED0((uint64_t)a1, a3, a4);
    return;
  }
  if (sub_20BFEB19C(a4))
  {
    v8 = *((_QWORD *)a4 + 1);
    if ((v8 & 4) != 0)
      v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    else
      v9 = *(const pxrInternal__aapl__pxrReserved__::VtDictionary **)a4;
    if (*((_QWORD *)v9 + 2))
    {
      v10 = sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)v9 + 40));
      v11 = sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)v9 + 40));
      if ((v10 & 1) != 0 || v11)
      {
        __p[1] = 0;
        v72 = 0;
        __p[0] = &__p[1];
        sub_20C0E686C(a4, (uint64_t)__p);
        v12 = (void **)__p[0];
        if (v10)
        {
          if (__p[0] != &__p[1])
          {
            do
            {
              sub_20C391D64((uint64_t)a1, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)(v12 + 5));
              v13 = (void **)v12[1];
              if (v13)
              {
                do
                {
                  v14 = v13;
                  v13 = (void **)*v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  v14 = (void **)v12[2];
                  v44 = *v14 == v12;
                  v12 = v14;
                }
                while (!v44);
              }
              v12 = v14;
            }
            while (v14 != &__p[1]);
          }
        }
        else if (__p[0] != &__p[1])
        {
          do
          {
            sub_20C391ED0((uint64_t)a1, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)(v12 + 5));
            v24 = (void **)v12[1];
            if (v24)
            {
              do
              {
                v25 = v24;
                v24 = (void **)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = (void **)v12[2];
                v44 = *v25 == v12;
                v12 = v25;
              }
              while (!v44);
            }
            v12 = v25;
          }
          while (v25 != &__p[1]);
        }
        sub_20C0E686C(a4, (uint64_t)__p);
        sub_20BFED2B4((uint64_t)__p, (_QWORD *)__p[1]);
      }
    }
    return;
  }
  if (sub_20C1B2200(a4))
  {
    __p[0] = 0;
    __p[1] = 0;
    v72 = 0;
    v64 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v64);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v64 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v63, 0.0, 1.0);
    v62 = 0;
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(&v80, __p, &v64, v63, &v62);
    sub_20BF49F14(&v62, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
    sub_20BFD265C(&v64);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    sub_20C392088(a4, &v80);
    sub_20C3921E4(a3, (uint64_t)a1, &v80, (char *)__p);
    if (SHIBYTE(v81) < 0)
      operator delete((void *)v80);
    v80 = *(_OWORD *)__p;
    v81 = v72;
    HIBYTE(v72) = 0;
    LOBYTE(__p[0]) = 0;
    sub_20BFD3EBC((int *)&v82, (int *)&v73);
    sub_20BFD3F10((int *)&v82 + 1, (int *)&v73 + 1);
    v83 = v74;
    v15 = v75;
    v75 = 0;
    sub_20BF49F14(v84, v15);
    sub_20C124A94((uint64_t)__p);
    sub_20C392088(a4, &v80);
    sub_20BF49F14(v84, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
    sub_20BFD265C(&v82);
    if (SHIBYTE(v81) < 0)
      operator delete((void *)v80);
    return;
  }
  if (sub_20BFE4618(a4))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)__p);
    sub_20C02BF80(a4, (char *)__p);
    v67 = sub_20C3921E4;
    v16 = v68;
    sub_20BE9E6E8((uint64_t)v68, a3);
    v17 = a1[1];
    *(_QWORD *)&v70 = *a1;
    *((_QWORD *)&v70 + 1) = v17;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v82 = 0;
    v20 = operator new(0x40uLL);
    v21 = v67;
    *v20 = &unk_24C538248;
    v20[1] = v21;
    sub_20C3928E4((uint64_t)(v20 + 2), (uint64_t)v68);
    *((_OWORD *)v20 + 3) = v70;
    v70 = 0uLL;
    v82 = (__int128 *)v20;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations((__int128 *)__p, (uint64_t)&v80, 0);
    v22 = v82;
    if (v82 == &v80)
    {
      v23 = 4;
      v22 = &v80;
    }
    else
    {
      if (!v82)
      {
LABEL_55:
        v31 = *((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v32 = (unsigned int *)(*((_QWORD *)&v70 + 1) + 8);
          do
          {
            v33 = __ldxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
        if (v69 == v68)
        {
          v35 = 4;
        }
        else
        {
          if (!v69)
          {
LABEL_65:
            sub_20C02BF80(a4, (char *)__p);
            *(_QWORD *)&v80 = &v79;
            sub_20C021740((void ***)&v80);
            *(_QWORD *)&v80 = &v78;
            sub_20C021740((void ***)&v80);
            *(_QWORD *)&v80 = &v77;
            sub_20C021740((void ***)&v80);
            *(_QWORD *)&v80 = &v76;
            sub_20C021740((void ***)&v80);
            *(_QWORD *)&v80 = &v74;
            sub_20C021740((void ***)&v80);
            *(_QWORD *)&v80 = &__p[1];
            sub_20C021740((void ***)&v80);
            return;
          }
          v35 = 5;
          v16 = v69;
        }
        (*(void (**)(_QWORD *))(*v16 + 8 * v35))(v16);
        goto LABEL_65;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
    goto LABEL_55;
  }
  if (sub_20C1B1F04(a4))
  {
    __p[0] = 0;
    __p[1] = 0;
    v72 = 0;
    v64 = 0;
    sub_20C019BD0(&v64);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v63, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&v80, __p, &v64, v63);
    sub_20BFD1A18(&v64);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    sub_20C329FC8(a4, &v80);
    sub_20C392364(a3, (uint64_t)a1, (uint64_t)&v80, __p);
    sub_20C39249C((uint64_t)&v80, (__int128 *)__p);
    sub_20C124BA4((uint64_t)__p);
    sub_20C329FC8(a4, &v80);
    sub_20C02CDE4((uint64_t)&v80);
    return;
  }
  if (sub_20BFE45A0(a4))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)__p);
    sub_20C02EAC8(a4, (char *)__p);
    v65 = sub_20C392364;
    sub_20BE9E6E8((uint64_t)v66, a3);
    v26 = a1[1];
    v66[4] = *a1;
    v66[5] = v26;
    if (v26)
    {
      v27 = (unsigned int *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    sub_20C3929C8((uint64_t)&v80, (uint64_t *)&v65);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations((__int128 *)__p, (uint64_t)&v80, 0);
    v29 = v82;
    if (v82 == &v80)
    {
      v30 = 4;
      v29 = &v80;
    }
    else
    {
      if (!v82)
      {
LABEL_110:
        sub_20C3922E8((uint64_t)&v65);
        sub_20C02EAC8(a4, (char *)__p);
        sub_20C02C9C4(__p);
        return;
      }
      v30 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
    goto LABEL_110;
  }
  v36 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v36)
    v36 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v36 + 1) & 0xFFFFFFFFFFFFFFF8) && sub_20BF4A73C(a4))
  {
    v37 = *((_QWORD *)a4 + 1);
    if ((v37 & 4) != 0)
      v38 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    else
      v38 = *(const pxrInternal__aapl__pxrReserved__::VtDictionary **)a4;
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v63, v38);
    *(_QWORD *)&v80 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)v63);
    *((_QWORD *)&v80 + 1) = v39;
    v40 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)v63);
    v42 = v41;
    while (1)
    {
      v43 = v80;
      v44 = !v42 || (_QWORD)v80 == v40;
      v45 = v44;
      if (*((_QWORD *)&v80 + 1) == v42 && v45)
        break;
      v47 = (const pxrInternal__aapl__pxrReserved__::VtDictionary **)(v80 + 56);
      if ((sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)(v80 + 56)) & 1) != 0)
      {
        v49 = *(_QWORD *)(v43 + 64);
        if ((v49 & 4) != 0)
          v50 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(v43 + 56);
        else
          v50 = *v47;
        pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v64, v50);
        v51 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v51)
          v51 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v52 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C291094((pxrInternal__aapl__pxrReserved__::TfToken *)&v64, (_QWORD *)v51 + 1);
        v53 = v52;
        if (v52 && sub_20BFED500(v52))
        {
          v54 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v54)
            v54 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C390E94(a1, (char *)v54 + 8, a3, v53);
        }
        v55 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v55)
          v55 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        v56 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C291094((pxrInternal__aapl__pxrReserved__::TfToken *)&v64, (_QWORD *)v55 + 3);
        v57 = v56;
        if (v56 && sub_20BFED488(v56))
        {
          v58 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v58)
            v58 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          sub_20C390E94(a1, (char *)v58 + 24, a3, v57);
        }
        __p[1] = &off_24C51D8C8;
        sub_20BF4D058((unsigned int **)__p, (const void ****)&v64);
        sub_20BF4B5D8(v47, __p);
        sub_20BF4C2D8((uint64_t)__p);
        sub_20BF49F14(&v64, 0);
      }
      else
      {
        v61 = (_QWORD *)(v43 + 32);
        __p[0] = "usd/flattenUtils.cpp";
        __p[1] = "_FixAssetPaths";
        v72 = 432;
        v73 = "void pxrInternal__aapl__pxrReserved__::_FixAssetPaths(const SdfLayerHandle &, const TfToken &, const _Reso"
              "lveAssetPathFn &, VtValue *)";
        LOBYTE(v74) = 0;
        if (*(char *)(v43 + 55) < 0)
          v61 = (_QWORD *)*v61;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Expected dictionary for entry '%s' in 'clips'", v48, v61);
      }
      sub_20BF4D354(&v80, v59, v60);
    }
    sub_20BF4AB1C(a4, (const void ****)v63);
    sub_20BF49F14(v63, 0);
  }
}

void sub_20C3917C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, _QWORD **a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_20BF49F14(&a12, 0);
  _Unwind_Resume(a1);
}

void sub_20C391958(double *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;
  char *v7;
  double *v8;
  uint64_t v9;
  char *v10;
  double *v11;
  __n128 v12[2];
  double *v13;

  v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C291094(a3, a2);
  if (v4)
  {
    v5 = v4;
    if (sub_20BF5A0F8(v4))
    {
      v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_20BF5A044(v5, v12);
      sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
      v8 = v13;
      sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
      v11 = &v13[2 * v12[0].n128_u64[0]];
      while (v8 != v11)
      {
        *v8 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, *v8);
        v8 += 2;
      }
      sub_20BF5A044(v5, v12);
      sub_20BF5618C((uint64_t)v12);
    }
  }
}

void sub_20C391A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C391A2C(double *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  void *__p[2];
  char v8;
  int v9;
  int v10;
  double v11;
  uint64_t v12;
  _QWORD **v13;

  sub_20C029E64((char *)__p, (__int128 *)a2);
  v11 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, (double *)(a2 + 32));
  v12 = v6;
  sub_20C029E64(a3, (__int128 *)__p);
  a3[56] = 1;
  sub_20BF49F14(&v13, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20C391AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C029F94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C391ADC(double *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
  }
  sub_20BFD6E54(&v9, (_DWORD *)(a2 + 24));
  sub_20BFD6EA4(&v10, (_DWORD *)(a2 + 28));
  v11 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)&v11 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, (double *)(a2 + 32));
  *((_QWORD *)&v11 + 1) = v6;
  sub_20C1057F0(a3, (__int128 *)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_20C391BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C02CDE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C391BCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C5380E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C391C10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5380E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C391C3C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_20C391C4C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538170))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C391C88()
{
  return &unk_24C538170;
}

__n128 sub_20C391C9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C538198;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C391CE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C538198;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C391D0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_20C391D1C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538220))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C391D58()
{
  return &unk_24C538220;
}

void sub_20C391D64(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  __n128 v6;
  uint64_t v7;
  void *v8[2];
  char v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
  v6 = sub_20C1D19D0(a3, (uint64_t)__p);
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
    sub_20BE9E974();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, __n128))(*(_QWORD *)v7 + 48))(v8, v7, a1, __p, v6);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v10, v8);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v10;
  v15 = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10[0]) = 0;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)v16);
    v16 = v12;
    v17 = v13;
    HIBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
  }
  else
  {
    v16 = v12;
    v17 = v13;
    HIBYTE(v13) = 0;
    LOBYTE(v12) = 0;
  }
  if (v9 < 0)
    operator delete(v8[0]);
  sub_20C1D19D0(a3, (uint64_t)__p);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20C391EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20BE930F8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20C391ED0(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t i;
  uint64_t v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  int v16;
  __int128 v17;
  void *v18[2];
  char v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __n128 v24[2];
  uint64_t v25;

  v25 = 0;
  memset(v24, 0, sizeof(v24));
  sub_20C1D1A90(a3, v24);
  sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v6, v7);
  v8 = v25;
  sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v9, v10);
  for (i = v25 + 48 * v24[0].n128_u64[0]; v8 != i; v8 += 48)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
      sub_20BE9E974();
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v18, v12, a1, v8);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, v18);
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    v13 = *(_OWORD *)__p;
    *(_QWORD *)(v8 + 16) = v21;
    *(_OWORD *)v8 = v13;
    HIBYTE(v21) = 0;
    LOBYTE(__p[0]) = 0;
    v14 = (void **)(v8 + 24);
    if (*(char *)(v8 + 47) < 0)
    {
      operator delete(*v14);
      v16 = SHIBYTE(v21);
      v17 = v22;
      *(_QWORD *)(v8 + 40) = v23;
      *(_OWORD *)v14 = v17;
      HIBYTE(v23) = 0;
      LOBYTE(v22) = 0;
      if (v16 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v15 = v22;
      *(_QWORD *)(v8 + 40) = v23;
      *(_OWORD *)v14 = v15;
      HIBYTE(v23) = 0;
      LOBYTE(v22) = 0;
    }
    if (v19 < 0)
      operator delete(v18[0]);
  }
  sub_20C1D1A90(a3, v24);
  sub_20C00A724(v24);
}

void sub_20C392048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_20C00A724(&a22);
  _Unwind_Resume(a1);
}

void sub_20C392088(pxrInternal__aapl__pxrReserved__::VtValue *a1, __int128 *a2)
{
  __int128 *v4;
  _QWORD **v5;
  double v6[2];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  char v11;
  int v12;
  _DWORD v13[5];
  _QWORD **v14;

  if ((sub_20C1B2200(a1) & 1) == 0)
  {
    v8[0] = 0;
    v8[1] = 0;
    v9 = 0;
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v6, 0.0, 1.0);
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, v8, &v7, v6, &v5);
    sub_20C392508(a1, (__int128 *)__p);
    sub_20BF49F14(&v14, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
    sub_20BFD265C(&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    sub_20BF49F14(&v5, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
    sub_20BFD265C(&v7);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
  }
  v4 = sub_20C3925D0((__int128 **)a1);
  sub_20C02B118((uint64_t)v4, a2);
}

void sub_20C39219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_20C029F94((uint64_t)&a19);
  sub_20BF49F14((_QWORD ***)&a9, 0);
  sub_20BFD1A18(&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C3921E4(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char *a4@<X8>)
{
  uint64_t v8;
  void *__p[2];
  char v10;
  void *__dst[2];
  char v12;
  int v13;
  _DWORD v14[5];
  _QWORD **v15;

  sub_20C029E64((char *)__dst, a3);
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    sub_20BE9E974();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v8 + 48))(__p, v8, a2, a3);
  sub_20C1051AC((uint64_t)__dst, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_20C029E64(a4, (__int128 *)__dst);
  a4[56] = 1;
  sub_20BF49F14(&v15, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v14);
  sub_20BFD265C(&v13);
  if (v12 < 0)
    operator delete(__dst[0]);
}

void sub_20C3922B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20C029F94((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3922E8(uint64_t a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7 == v2)
  {
    v8 = 4;
    v7 = v2;
    goto LABEL_10;
  }
  if (v7)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_20C392364(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  void *__p[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v12 = *(_QWORD *)(a3 + 16);
  }
  sub_20BFD6E54(&v13, (_DWORD *)(a3 + 24));
  sub_20BFD6EA4(&v14, (_DWORD *)(a3 + 28));
  v15 = *(_OWORD *)(a3 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    sub_20BE9E974();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(__p, v8, a2, a3);
  sub_20C105740((uint64_t)__dst, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_20C1057F0(a4, (__int128 *)__dst);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_20C39246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20C02CDE4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39249C(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  sub_20BFD3EBC((int *)(a1 + 24), (int *)a2 + 6);
  sub_20BFD3F10((int *)(a1 + 28), (int *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

_QWORD *sub_20C392508(_QWORD *a1, __int128 *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C52A048;
  sub_20C196610(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C392598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20BDC12F4(exception_object);
}

__int128 *sub_20C3925D0(__int128 **a1)
{
  __int128 *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, __int128 **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C196580(a1);
}

_QWORD *sub_20C392660(_QWORD *a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_24C538248;
  v2 = a1 + 2;
  v3 = (unsigned int *)a1[7];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = (_QWORD *)a1[5];
  if (v7 == v2)
  {
    v8 = 4;
    v7 = v2;
    goto LABEL_10;
  }
  if (v7)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_20C3926EC(char *__p)
{
  char *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;

  *(_QWORD *)__p = &unk_24C538248;
  v2 = __p + 16;
  v3 = (unsigned int *)*((_QWORD *)__p + 7);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = (char *)*((_QWORD *)__p + 5);
  if (v7 == v2)
  {
    v8 = 4;
    v7 = v2;
    goto LABEL_10;
  }
  if (v7)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  operator delete(__p);
}

_QWORD *sub_20C392778(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = operator new(0x40uLL);
  v3 = a1[1];
  *v2 = &unk_24C538248;
  v2[1] = v3;
  sub_20BE9E6E8((uint64_t)(v2 + 2), (uint64_t)(a1 + 2));
  v4 = a1[7];
  v2[6] = a1[6];
  v2[7] = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return v2;
}

void sub_20C3927E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3927F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v4 = a1[1];
  *a2 = &unk_24C538248;
  a2[1] = v4;
  result = sub_20BE9E6E8((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  v6 = a1[7];
  a2[6] = a1[6];
  a2[7] = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

_QWORD *sub_20C392854(uint64_t a1)
{
  return sub_20C392948(a1 + 8);
}

void sub_20C39285C(void *a1)
{
  sub_20C392948((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C392884(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 48, a2);
}

uint64_t sub_20C39289C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5382B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3928D8()
{
  return &unk_24C5382B8;
}

uint64_t sub_20C3928E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_20C392948(uint64_t a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *result;
  uint64_t v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = *(_QWORD **)(a1 + 32);
  if (result == v2)
  {
    v8 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t sub_20C3929C8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x40uLL);
  v5 = *a2;
  *v4 = &unk_24C5382E0;
  v4[1] = v5;
  sub_20C3928E4((uint64_t)(v4 + 2), (uint64_t)(a2 + 1));
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 5);
  a2[5] = 0;
  a2[6] = 0;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

_QWORD *sub_20C392A30(_QWORD *a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_24C5382E0;
  v2 = a1 + 2;
  v3 = (unsigned int *)a1[7];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = (_QWORD *)a1[5];
  if (v7 == v2)
  {
    v8 = 4;
    v7 = v2;
    goto LABEL_10;
  }
  if (v7)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_20C392ABC(char *__p)
{
  char *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;

  *(_QWORD *)__p = &unk_24C5382E0;
  v2 = __p + 16;
  v3 = (unsigned int *)*((_QWORD *)__p + 7);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = (char *)*((_QWORD *)__p + 5);
  if (v7 == v2)
  {
    v8 = 4;
    v7 = v2;
    goto LABEL_10;
  }
  if (v7)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  operator delete(__p);
}

_QWORD *sub_20C392B48(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = operator new(0x40uLL);
  v3 = a1[1];
  *v2 = &unk_24C5382E0;
  v2[1] = v3;
  sub_20BE9E6E8((uint64_t)(v2 + 2), (uint64_t)(a1 + 2));
  v4 = a1[7];
  v2[6] = a1[6];
  v2[7] = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return v2;
}

void sub_20C392BB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C392BC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v4 = a1[1];
  *a2 = &unk_24C5382E0;
  a2[1] = v4;
  result = sub_20BE9E6E8((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  v6 = a1[7];
  a2[6] = a1[6];
  a2[7] = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

_QWORD *sub_20C392C24(uint64_t a1)
{
  return sub_20C392948(a1 + 8);
}

void sub_20C392C2C(void *a1)
{
  sub_20C392948((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_20C392C54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 48, a2);
}

uint64_t sub_20C392C6C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538350))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C392CA8()
{
  return &unk_24C538350;
}

void sub_20C392CB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int32 *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int32 *v15;
  __int32 v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int32 *__s;
  __int32 *v21;
  __int32 *v22;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    __s = 0;
    v21 = 0;
    v22 = 0;
    if (&__s != (__int32 **)(a1 + 80))
      sub_20BE8B37C((char *)&__s, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
    v4 = *(__int32 **)(a1 + 32);
    v5 = *(__int32 **)(a1 + 40);
    if (v4 != v5)
    {
      v6 = v21;
      do
      {
        v7 = wmemchr(__s, *v4, v6 - __s);
        if (v7)
          v8 = v7;
        else
          v8 = v6;
        v6 = v21;
        if (v8 == v21)
        {
          if (v8 >= v22)
          {
            v9 = __s;
            v10 = v21 - __s;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62)
              sub_20BDDF694();
            v12 = (char *)v22 - (char *)__s;
            if (((char *)v22 - (char *)__s) >> 1 > v11)
              v11 = v12 >> 1;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v13 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)sub_20BDE1330((uint64_t)&v22, v13);
              v9 = __s;
              v8 = v21;
            }
            else
            {
              v14 = 0;
            }
            v15 = (__int32 *)&v14[4 * v10];
            *v15 = *v4;
            v6 = v15 + 1;
            while (v8 != v9)
            {
              v16 = *--v8;
              *--v15 = v16;
            }
            __s = v15;
            v21 = v6;
            v22 = (__int32 *)&v14[4 * v13];
            if (v9)
              operator delete(v9);
          }
          else
          {
            *v8 = *v4;
            v6 = v8 + 1;
          }
          v21 = v6;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems(a1, (uint64_t)&__s);
    __p = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems(a1, (uint64_t)&__p);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    __p = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems(a1, (uint64_t)&__p);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__s)
    {
      v21 = __s;
      operator delete(__s);
    }
  }
}

void sub_20C392FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C392FFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int32 *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int32 *v15;
  __int32 v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int32 *__s;
  __int32 *v21;
  __int32 *v22;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    __s = 0;
    v21 = 0;
    v22 = 0;
    if (&__s != (__int32 **)(a1 + 80))
      sub_20BE8B37C((char *)&__s, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
    v4 = *(__int32 **)(a1 + 32);
    v5 = *(__int32 **)(a1 + 40);
    if (v4 != v5)
    {
      v6 = v21;
      do
      {
        v7 = wmemchr(__s, *v4, v6 - __s);
        if (v7)
          v8 = v7;
        else
          v8 = v6;
        v6 = v21;
        if (v8 == v21)
        {
          if (v8 >= v22)
          {
            v9 = __s;
            v10 = v21 - __s;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62)
              sub_20BDDF694();
            v12 = (char *)v22 - (char *)__s;
            if (((char *)v22 - (char *)__s) >> 1 > v11)
              v11 = v12 >> 1;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v13 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)sub_20BDE1330((uint64_t)&v22, v13);
              v9 = __s;
              v8 = v21;
            }
            else
            {
              v14 = 0;
            }
            v15 = (__int32 *)&v14[4 * v10];
            *v15 = *v4;
            v6 = v15 + 1;
            while (v8 != v9)
            {
              v16 = *--v8;
              *--v15 = v16;
            }
            __s = v15;
            v21 = v6;
            v22 = (__int32 *)&v14[4 * v13];
            if (v9)
              operator delete(v9);
          }
          else
          {
            *v8 = *v4;
            v6 = v8 + 1;
          }
          v21 = v6;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems(a1, (uint64_t)&__s);
    __p = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems(a1, (uint64_t)&__p);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    __p = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems(a1, (uint64_t)&__p);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__s)
    {
      v21 = __s;
      operator delete(__s);
    }
  }
}

void sub_20C393304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C393344(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *__p;
  char *v21;
  char *v22;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    if (&__p != (void **)(a1 + 80))
      sub_20BDDF7E4((char *)&__p, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    v4 = *(_QWORD **)(a1 + 32);
    v5 = *(_QWORD **)(a1 + 40);
    if (v4 != v5)
    {
      v6 = v21;
      do
      {
        v7 = (char *)__p;
        v8 = v6;
        if (__p != v6)
        {
          v8 = (char *)__p;
          while (*(_QWORD *)v8 != *v4)
          {
            v8 += 8;
            if (v8 == v6)
            {
              v8 = v6;
              break;
            }
          }
        }
        if (v8 == v6)
        {
          if (v6 >= v22)
          {
            v10 = (v6 - (_BYTE *)__p) >> 3;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 61)
              sub_20BDDF694();
            v12 = v22 - (_BYTE *)__p;
            if ((v22 - (_BYTE *)__p) >> 2 > v11)
              v11 = v12 >> 2;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
              v13 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)sub_20BDDF6A8((uint64_t)&v22, v13);
              v7 = (char *)__p;
              v6 = v21;
            }
            else
            {
              v14 = 0;
            }
            v15 = &v14[8 * v10];
            *(_QWORD *)v15 = *v4;
            v9 = v15 + 8;
            while (v6 != v7)
            {
              v16 = *((_QWORD *)v6 - 1);
              v6 -= 8;
              *((_QWORD *)v15 - 1) = v16;
              v15 -= 8;
            }
            __p = v15;
            v21 = v9;
            v22 = &v14[8 * v13];
            if (v7)
              operator delete(v7);
          }
          else
          {
            *(_QWORD *)v6 = *v4;
            v9 = v6 + 8;
          }
          v21 = v9;
          v6 = v9;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems(a1, (uint64_t)&__p);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems(a1, (uint64_t)&v17);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems(a1, (uint64_t)&v17);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__p)
    {
      v21 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20C393660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C3936A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *__p;
  char *v21;
  char *v22;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    if (&__p != (void **)(a1 + 80))
      sub_20BDDF7E4((char *)&__p, *(char **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    v4 = *(_QWORD **)(a1 + 32);
    v5 = *(_QWORD **)(a1 + 40);
    if (v4 != v5)
    {
      v6 = v21;
      do
      {
        v7 = (char *)__p;
        v8 = v6;
        if (__p != v6)
        {
          v8 = (char *)__p;
          while (*(_QWORD *)v8 != *v4)
          {
            v8 += 8;
            if (v8 == v6)
            {
              v8 = v6;
              break;
            }
          }
        }
        if (v8 == v6)
        {
          if (v6 >= v22)
          {
            v10 = (v6 - (_BYTE *)__p) >> 3;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 61)
              sub_20BDDF694();
            v12 = v22 - (_BYTE *)__p;
            if ((v22 - (_BYTE *)__p) >> 2 > v11)
              v11 = v12 >> 2;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
              v13 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)sub_20BDDF6A8((uint64_t)&v22, v13);
              v7 = (char *)__p;
              v6 = v21;
            }
            else
            {
              v14 = 0;
            }
            v15 = &v14[8 * v10];
            *(_QWORD *)v15 = *v4;
            v9 = v15 + 8;
            while (v6 != v7)
            {
              v16 = *((_QWORD *)v6 - 1);
              v6 -= 8;
              *((_QWORD *)v15 - 1) = v16;
              v15 -= 8;
            }
            __p = v15;
            v21 = v9;
            v22 = &v14[8 * v13];
            if (v7)
              operator delete(v7);
          }
          else
          {
            *(_QWORD *)v6 = *v4;
            v9 = v6 + 8;
          }
          v21 = v9;
          v6 = v9;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems(a1, (uint64_t)&__p);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems(a1, (uint64_t)&v17);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems(a1, (uint64_t)&v17);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__p)
    {
      v21 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20C3939BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_20C3939FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t ***v18;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v4 = (_QWORD *)(a1 + 80);
    if (&v15 != (uint64_t **)(a1 + 80))
      sub_20C106430(&v15, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    v5 = *(uint64_t **)(a1 + 32);
    v6 = *(uint64_t **)(a1 + 40);
    if (v5 != v6)
    {
      v7 = v16;
      do
      {
        v8 = v7;
        if (v15 != v7)
        {
          v8 = v15;
          while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*v5 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v8 == v7)
            {
              v8 = v7;
              break;
            }
          }
        }
        if (v8 == v7)
        {
          if ((unint64_t)v7 >= v17)
          {
            v7 = (uint64_t *)sub_20BFCA068((char **)&v15, v5);
          }
          else
          {
            v9 = *v5;
            *v7 = *v5;
            if ((v9 & 7) != 0)
            {
              v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
              do
                v11 = __ldxr(v10);
              while (__stxr(v11 + 2, v10));
              if ((v11 & 1) == 0)
                *v7 &= 0xFFFFFFFFFFFFFFF8;
            }
            ++v7;
          }
          v16 = v7;
        }
        ++v5;
      }
      while (v5 != v6);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems((unsigned __int8 *)a1, &v15);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems((unsigned __int8 *)a1, (uint64_t **)&v12);
    v18 = &v12;
    sub_20BEEB2B8((void ***)&v18);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems((unsigned __int8 *)a1, (uint64_t **)&v12);
    v18 = &v12;
    sub_20BEEB2B8((void ***)&v18);
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *v4 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v12 = &v15;
    sub_20BEEB2B8((void ***)&v12);
  }
}

void sub_20C393CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BEEB2B8((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C393CE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void ***v17;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v4 = (_QWORD *)(a1 + 80);
    if (&v14 != (uint64_t *)(a1 + 80))
      sub_20BE75818((uint64_t)&v14, *(std::string **)(a1 + 80), *(__int128 **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
    v5 = *(__int128 **)(a1 + 32);
    v6 = *(__int128 **)(a1 + 40);
    if (v5 != v6)
    {
      v7 = v15;
      do
      {
        v8 = sub_20C020210(v14, v7, (unsigned __int8 **)v5);
        v7 = v15;
        if (v8 == v15)
        {
          v9 = v8;
          if (v8 >= v16)
          {
            v7 = sub_20BE4EE50(&v14, v5);
          }
          else
          {
            if (*((char *)v5 + 23) < 0)
            {
              sub_20BDDBFAC((_BYTE *)v8, *(void **)v5, *((_QWORD *)v5 + 1));
            }
            else
            {
              v10 = *v5;
              *(_QWORD *)(v8 + 16) = *((_QWORD *)v5 + 2);
              *(_OWORD *)v8 = v10;
            }
            v7 = v9 + 24;
          }
          v15 = v7;
        }
        v5 = (__int128 *)((char *)v5 + 24);
      }
      while (v5 != v6);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems((uint64_t *)a1, (uint64_t)&v14);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems((uint64_t *)a1, (uint64_t)&v11);
    v17 = &v11;
    sub_20BDE5038((void ***)&v17);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems((uint64_t *)a1, (uint64_t)&v11);
    v17 = &v11;
    sub_20BDE5038((void ***)&v17);
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *v4 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v11 = (void **)&v14;
    sub_20BDE5038(&v11);
  }
}

void sub_20C393F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BDE5038((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C393FB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  void **v15;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v4 = (_QWORD *)(a1 + 80);
    if (&v12 != (_DWORD **)(a1 + 80))
      sub_20C0E29B0((uint64_t)&v12, *(_DWORD **)(a1 + 80), *(_DWORD **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    v5 = *(_DWORD **)(a1 + 32);
    v6 = *(_DWORD **)(a1 + 40);
    if (v5 != v6)
    {
      v7 = v13;
      do
      {
        v8 = v7;
        if (v12 != v7)
        {
          v8 = v12;
          while (*v8 != *(_QWORD *)v5)
          {
            if (++v8 == (_QWORD *)v7)
            {
              v8 = v7;
              break;
            }
          }
        }
        if (v8 == (_QWORD *)v7)
        {
          if ((unint64_t)v7 >= v14)
          {
            v7 = (_DWORD *)sub_20BFD7890((uint64_t *)&v12, v5);
          }
          else
          {
            sub_20BFD6E54(v7, v5);
            sub_20BFD6EA4(v7 + 1, v5 + 1);
            v7 += 2;
          }
          v13 = v7;
        }
        v5 += 2;
      }
      while (v5 != v6);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems((_DWORD *)a1, &v12);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems((_DWORD *)a1, &v9);
    v15 = (void **)&v9;
    sub_20BFD6F90(&v15);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems((_DWORD *)a1, &v9);
    v15 = (void **)&v9;
    sub_20BFD6F90(&v15);
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *v4 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v9 = &v12;
    sub_20BFD6F90((void ***)&v9);
  }
}

void sub_20C39424C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BFD6F90((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C394284(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  std::string *v7;
  std::string *v8;
  std::string **v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  void *__dst;
  unint64_t v14;
  void ***v15;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    v12 = 0;
    __dst = 0;
    v14 = 0;
    v4 = (_QWORD *)(a1 + 80);
    if (&v12 != (std::string **)(a1 + 80))
      sub_20C0E376C((uint64_t)&v12, *(std::string **)(a1 + 80), *(std::string **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4));
    v5 = *(unsigned __int8 **)(a1 + 32);
    v6 = *(unsigned __int8 **)(a1 + 40);
    if (v5 != v6)
    {
      v7 = (std::string *)__dst;
      do
      {
        v8 = v12;
        if (v12 == v7)
        {
          v8 = v7;
        }
        else
        {
          while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v8, v5))
          {
            v8 += 2;
            if (v8 == v7)
            {
              v8 = v7;
              break;
            }
          }
          v7 = (std::string *)__dst;
        }
        if (v8 == v7)
        {
          if ((unint64_t)v7 >= v14)
          {
            v7 = (std::string *)sub_20C12FBAC((uint64_t *)&v12, (uint64_t)v5);
          }
          else
          {
            sub_20C02CCF8((int)&v14, (__n128 *)v7, (uint64_t)v5);
            v7 += 2;
          }
          __dst = v7;
        }
        v5 += 48;
      }
      while (v5 != v6);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems((unsigned __int8 *)a1, &v12);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems((unsigned __int8 *)a1, (std::string **)&v9);
    v15 = (void ***)&v9;
    sub_20C021818((void ***)&v15);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems((unsigned __int8 *)a1, (std::string **)&v9);
    v15 = (void ***)&v9;
    sub_20C021818((void ***)&v15);
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *v4 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v9 = &v12;
    sub_20C021818((void ***)&v9);
  }
}

void sub_20C394530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20C021818((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20C021818((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C394578(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  __int128 *v7;
  unsigned __int8 *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  void *__dst;
  unint64_t v14;
  __int128 ***v15;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    v12 = 0;
    __dst = 0;
    v14 = 0;
    v4 = (_QWORD *)(a1 + 80);
    if (&v12 != (__int128 **)(a1 + 80))
      sub_20C0E2FAC((uint64_t)&v12, *(__int128 **)(a1 + 80), *(__int128 **)(a1 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
    v5 = *(unsigned __int8 **)(a1 + 32);
    v6 = *(unsigned __int8 **)(a1 + 40);
    if (v5 != v6)
    {
      v7 = (__int128 *)__dst;
      do
      {
        v8 = (unsigned __int8 *)v12;
        if (v12 == v7)
        {
          v8 = (unsigned __int8 *)v7;
        }
        else
        {
          while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v8, v5) & 1) == 0)
          {
            v8 += 56;
            if (v8 == (unsigned __int8 *)v7)
            {
              v8 = (unsigned __int8 *)v7;
              break;
            }
          }
          v7 = (__int128 *)__dst;
        }
        if (v8 == (unsigned __int8 *)v7)
        {
          if ((unint64_t)v7 >= v14)
          {
            v7 = (__int128 *)sub_20C12D654((uint64_t *)&v12, (__int128 *)v5);
          }
          else
          {
            sub_20C029E64((char *)v7, (__int128 *)v5);
            v7 = (__int128 *)((char *)v7 + 56);
          }
          __dst = v7;
        }
        v5 += 56;
      }
      while (v5 != v6);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems((unsigned __int8 *)a1, &v12);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems((unsigned __int8 *)a1, (__int128 **)&v9);
    v15 = &v9;
    sub_20C021740((void ***)&v15);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems((unsigned __int8 *)a1, (__int128 **)&v9);
    v15 = &v9;
    sub_20C021740((void ***)&v15);
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *v4 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v9 = &v12;
    sub_20C021740((void ***)&v9);
  }
}

void sub_20C394818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20C021740((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20C021740((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C394860(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void ***v16;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v4 = (_QWORD *)(a1 + 80);
    if (&v13 != (uint64_t *)(a1 + 80))
      sub_20C129B64((uint64_t)&v13, *(_QWORD **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4);
    v5 = *(_QWORD **)(a1 + 32);
    v6 = *(_QWORD **)(a1 + 40);
    while (v5 != v6)
    {
      v7 = v13;
      v8 = v14;
      if (v13 == v14)
      {
        v9 = v13;
      }
      else
      {
        while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, v5) & 1) == 0)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v9 = v7;
        v7 = v14;
      }
      if (v9 == v7)
        sub_20C11AA68(&v13, v5);
      v5 += 2;
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems((unsigned __int8 *)a1, (unsigned __int8 *)&v13);
    v10 = 0;
    v11 = 0;
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems((unsigned __int8 *)a1, (unsigned __int8 *)&v10);
    v16 = &v10;
    sub_20BF8CA20((void ***)&v16);
    v10 = 0;
    v11 = 0;
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems((unsigned __int8 *)a1, (unsigned __int8 *)&v10);
    v16 = &v10;
    sub_20BF8CA20((void ***)&v16);
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    *v4 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v10 = (void **)&v13;
    sub_20BF8CA20(&v10);
  }
}

void sub_20C394AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20BF8CA20((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_20BF8CA20((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C394AFC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void **v30;
  std::__shared_weak_count *v31;
  int v32;
  char v33[8];
  _QWORD v34[3];
  uint64_t v35;
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_20C38FD04(a1, a2, a3, a5, (pxrInternal__aapl__pxrReserved__ *)&v40);
  if (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v40))
  {
    if ((v41 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t *))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(&v40);
    else
      v6 = v40;
    sub_20BFD6BC4((uint64_t)v33, v6);
    if (v33[0])
    {
      if (sub_20C0AA0E4((uint64_t)a4))
        (*(void (**)(_QWORD))(*(_QWORD *)*a4 + 56))(*a4);
      v7 = (std::__shared_weak_count *)a4[1];
      v30 = (void **)*a4;
      v31 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v32 = 0;
      sub_20C3619E0((unsigned int *)&v30, v34);
      v10 = v31;
      if (!v31)
        goto LABEL_40;
      v11 = (unint64_t *)&v31->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
    }
    else
    {
      if (sub_20C0AA0E4((uint64_t)a4))
        (*(void (**)(_QWORD))(*(_QWORD *)*a4 + 48))(*a4);
      v13 = (std::__shared_weak_count *)a4[1];
      v30 = (void **)*a4;
      v31 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v32 = 4;
      sub_20C3619E0((unsigned int *)&v30, v36);
      v16 = v31;
      if (v31)
      {
        v17 = (unint64_t *)&v31->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)a4[1];
      v30 = (void **)*a4;
      v31 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v32 = 5;
      sub_20C3619E0((unsigned int *)&v30, v37);
      v22 = v31;
      if (v31)
      {
        v23 = (unint64_t *)&v31->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)a4[1];
      v30 = (void **)*a4;
      v31 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v32 = 2;
      sub_20C3619E0((unsigned int *)&v30, v38);
      v10 = v31;
      if (!v31)
        goto LABEL_40;
      v28 = (unint64_t *)&v31->__shared_owners_;
      do
        v12 = __ldaxr(v28);
      while (__stlxr(v12 - 1, v28));
    }
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_40:
    v30 = (void **)&v39;
    sub_20BFD6F90(&v30);
    v30 = (void **)v38;
    sub_20BFD6F90(&v30);
    v30 = (void **)v37;
    sub_20BFD6F90(&v30);
    v30 = (void **)v36;
    sub_20BFD6F90(&v30);
    v30 = (void **)&v35;
    sub_20BFD6F90(&v30);
    v30 = (void **)v34;
    sub_20BFD6F90(&v30);
  }
  return sub_20BF4C2D8((uint64_t)&v40);
}

void sub_20C394DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20BFD6A50((void **)va1);
  sub_20BF4C2D8(v2 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_20C394E2C(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<int>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C394EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C394EF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(_QWORD *)(a1 + 112) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(_QWORD *)(a1 + 88) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 56);
    if (v5)
    {
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 32);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

uint64_t sub_20C394F7C(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C395030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C395044(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<long long>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C3950F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39510C(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C3951C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3951D4(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C395288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39529C(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = (void **)(a1 + 128);
    sub_20BEEB2B8(&v3);
    v3 = (void **)(a1 + 104);
    sub_20BEEB2B8(&v3);
    v3 = (void **)(a1 + 80);
    sub_20BEEB2B8(&v3);
    v3 = (void **)(a1 + 56);
    sub_20BEEB2B8(&v3);
    v3 = (void **)(a1 + 32);
    sub_20BEEB2B8(&v3);
    v3 = (void **)(a1 + 8);
    sub_20BEEB2B8(&v3);
  }
  return a1;
}

uint64_t sub_20C39532C(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<std::string>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C3953E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3953F4(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = (void **)(a1 + 128);
    sub_20BDE5038(&v3);
    v3 = (void **)(a1 + 104);
    sub_20BDE5038(&v3);
    v3 = (void **)(a1 + 80);
    sub_20BDE5038(&v3);
    v3 = (void **)(a1 + 56);
    sub_20BDE5038(&v3);
    v3 = (void **)(a1 + 32);
    sub_20BDE5038(&v3);
    v3 = (void **)(a1 + 8);
    sub_20BDE5038(&v3);
  }
  return a1;
}

uint64_t sub_20C395484(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C395538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39554C(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = (void **)(a1 + 128);
    sub_20BFD6F90(&v3);
    v3 = (void **)(a1 + 104);
    sub_20BFD6F90(&v3);
    v3 = (void **)(a1 + 80);
    sub_20BFD6F90(&v3);
    v3 = (void **)(a1 + 56);
    sub_20BFD6F90(&v3);
    v3 = (void **)(a1 + 32);
    sub_20BFD6F90(&v3);
    v3 = (void **)(a1 + 8);
    sub_20BFD6F90(&v3);
  }
  return a1;
}

uint64_t sub_20C3955DC(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C395690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3956A4(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = (void **)(a1 + 128);
    sub_20C021818(&v3);
    v3 = (void **)(a1 + 104);
    sub_20C021818(&v3);
    v3 = (void **)(a1 + 80);
    sub_20C021818(&v3);
    v3 = (void **)(a1 + 56);
    sub_20C021818(&v3);
    v3 = (void **)(a1 + 32);
    sub_20C021818(&v3);
    v3 = (void **)(a1 + 8);
    sub_20C021818(&v3);
  }
  return a1;
}

uint64_t sub_20C395734(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C3957E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3957FC(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = (void **)(a1 + 128);
    sub_20C021740(&v3);
    v3 = (void **)(a1 + 104);
    sub_20C021740(&v3);
    v3 = (void **)(a1 + 80);
    sub_20C021740(&v3);
    v3 = (void **)(a1 + 56);
    sub_20C021740(&v3);
    v3 = (void **)(a1 + 32);
    sub_20C021740(&v3);
    v3 = (void **)(a1 + 8);
    sub_20C021740(&v3);
  }
  return a1;
}

uint64_t sub_20C39588C(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>((pxrInternal__aapl__pxrReserved__::TfType *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C395940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C395954(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = (void **)(a1 + 128);
    sub_20BF8CA20(&v3);
    v3 = (void **)(a1 + 104);
    sub_20BF8CA20(&v3);
    v3 = (void **)(a1 + 80);
    sub_20BF8CA20(&v3);
    v3 = (void **)(a1 + 56);
    sub_20BF8CA20(&v3);
    v3 = (void **)(a1 + 32);
    sub_20BF8CA20(&v3);
    v3 = (void **)(a1 + 8);
    sub_20BF8CA20(&v3);
  }
  return a1;
}

__n128 sub_20C3959EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C538378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C395A24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C538378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C395A44(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 __p;
  uint64_t v16;
  _QWORD **v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2[1];
  v13 = *a2;
  v14 = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __p = *a3;
    v16 = *((_QWORD *)a3 + 2);
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(_QWORD *)(a1 + 16) + 16));
  v8 = *(_QWORD *)(v4 + 24);
  if (!v8)
    sub_20BE9E974();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v13);
  sub_20BF49F14(&v17, 0);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  result = v14;
  if (v14)
  {
    v10 = (unsigned int *)(v14 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C395B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (a10)
  {
    v17 = a10 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C395BD8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5383E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C395C14()
{
  return &unk_24C5383E8;
}

_QWORD *sub_20C395C28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C538408;
  result[1] = v3;
  return result;
}

uint64_t sub_20C395C60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C538408;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C395C80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_20C395C8C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538488))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C395CC8()
{
  return &unk_24C538488;
}

_QWORD *sub_20C395CDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C5384B8;
  result[1] = v3;
  return result;
}

uint64_t sub_20C395D10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C5384B8;
  a2[1] = v2;
  return result;
}

void sub_20C395D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v4 = a2 + 16;
  if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression(a2 + 16))
  {
    sub_20C38F794(v4, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 40), (uint64_t)__p);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      sub_20BE9E974();
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v5 + 48))(v5, a2, __p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v6)
      sub_20BE9E974();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2, v4);
  }
}

void sub_20C395DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C395E10(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538518))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C395E4C()
{
  return &unk_24C538518;
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v3;

  v3 = (unsigned int **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(v3, a2);
}

BOOL sub_20C395E80(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, int a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  _BOOL8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *Instance;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  char v31[8];
  int v32;
  int v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    sub_20BFD6E54(&v32, a2);
    sub_20BFD6EA4(&v33, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v34);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v34);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = sub_20C396D0C(&v32, EditTarget);
    v10 = v35;
    if (v35)
    {
      v11 = (unsigned int *)(v35 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20C396E84(a1, v14, &v34);
      if (v34
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v34 + 1) & 1) == 0)
      {
        v28 = v34;
        v29 = (std::__shared_weak_count *)v35;
        if (v35)
        {
          v20 = (unint64_t *)(v35 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        sub_20C360F84(&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, a3);
        v22 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v26 = v30;
        v27 = atomic_load(Instance + 18);
        v15 = v26 >= v27
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v15 = 0;
      }
      v16 = (std::__shared_weak_count *)v35;
      if (v35)
      {
        v17 = (unint64_t *)(v35 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
    }
    else
    {
      v15 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
  }
  else
  {
    v34 = "usd/listEditImpl.h";
    v35 = "Add";
    v36 = 117;
    v37 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Add"
          "(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal__aapl__"
          "pxrReserved__::UsdInherits, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal"
          "__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v15;
}

void sub_20C3960C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  sub_20BFD1A18(&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20C396158(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v7;
  const char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  _BOOL8 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *Instance;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[8];
  int v26;
  int v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    sub_20BFD6E54(&v26, a2);
    sub_20BFD6EA4(&v27, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v28);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v28);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = sub_20C396D0C(&v26, EditTarget);
    v8 = v29;
    if (v29)
    {
      v9 = (unsigned int *)(v29 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(const char *))(*(_QWORD *)v8 + 8))(v8);
    }
    if ((v7 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20C396E84(a1, v12, &v28);
      if (v28
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v28 + 1) & 1) == 0)
      {
        sub_20C3613EC((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v22 = v24;
        v23 = atomic_load(Instance + 18);
        v13 = v22 >= v23
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v13 = 0;
      }
      v14 = (std::__shared_weak_count *)v29;
      if (v29)
      {
        v15 = (unint64_t *)(v29 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17)
        v17 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v18 = sub_20BEC5244(&v24, 0);
      LOBYTE(v28) = 0;
      v19 = (_QWORD *)sub_20BEB5B80(v17 + 19, &v28);
      if (v19 != v18)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v17, v18, v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
    }
    else
    {
      v13 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_20BFD265C(&v26);
  }
  else
  {
    v28 = "usd/listEditImpl.h";
    v29 = "Remove";
    v30 = 148;
    v31 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Rem"
          "ove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__:"
          ":UsdInherits, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrRes"
          "erved__::SdfPathKeyPolicy>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v13;
}

void sub_20C39638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a10);
  sub_20BFD1A18(&a12);
  _Unwind_Resume(a1);
}

BOOL sub_20C396414(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  unint64_t *Instance;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20C396E84(a1, v3, &v17);
    if (v17
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v17 + 1) & 1) == 0
      && sub_20C0AA0E4((uint64_t)&v17)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v17 + 6))(v17))
    {
      Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!Instance)
        Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v5 = v15;
      v6 = atomic_load(Instance + 18);
      v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
    }
    else
    {
      v7 = 0;
    }
    v8 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v9 = (unint64_t *)(v18 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v11)
      v11 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v12 = sub_20BEC5244(&v15, 0);
    LOBYTE(v17) = 0;
    v13 = (_QWORD *)sub_20BEB5B80(v11 + 19, &v17);
    if (v13 != v12)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    v18 = "Clear";
    v19 = 174;
    v20 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Cle"
          "ar(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdInherits, ListOpProxyT"
          "ype = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_20C3965C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C396604(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  unint64_t *Instance;
  unint64_t v16;
  unint64_t v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL8 v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char **v35;
  std::__shared_weak_count *v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[8];
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  const char *v45;
  char v46;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v42);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v42);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = v43;
    if (v43)
    {
      v8 = (unsigned int *)(v43 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_20C0B8D74((uint64_t *)&v42, (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
    v11 = *(_DWORD **)a2;
    v12 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (*(_DWORD **)a2 != v12)
    {
      do
      {
        sub_20BFD6E54(&v35, v11);
        sub_20BFD6EA4((_DWORD *)&v35 + 1, v11 + 1);
        if (sub_20C396D0C((int *)&v35, EditTarget))
        {
          v13 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v14 = (char *)sub_20BFD7890((uint64_t *)&v42, &v35);
          }
          else
          {
            sub_20BFD6E54(v43, &v35);
            sub_20BFD6EA4((_DWORD *)v13 + 1, (_DWORD *)&v35 + 1);
            v14 = v13 + 8;
          }
          v43 = v14;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
        sub_20BFD265C(&v35);
        v11 += 2;
      }
      while (v11 != v12);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v16 = v41;
    v17 = atomic_load(Instance + 18);
    if (v16 >= v17
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
      sub_20C396E84(a1, v18, &v38);
      if (v38
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v38 + 8)) & 1) == 0)
      {
        if (v42 == v43)
        {
          if (sub_20C0AA0E4((uint64_t)&v38))
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
        }
        else
        {
          v35 = (char **)v38;
          v36 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
          }
          v37 = 0;
          sub_20C3619E0((unsigned int *)&v35, &v42);
          v32 = v36;
          if (v36)
          {
            v33 = (unint64_t *)&v36->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
      }
      v19 = v39;
      if (v39)
      {
        v20 = (unint64_t *)&v39->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v22)
        v22 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v23 = v41;
      v24 = atomic_load(v22 + 18);
      v25 = v23 >= v24
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v22);
      v26 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26)
        v26 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v27 = sub_20BEC5244(&v41, 0);
      LOBYTE(v38) = 0;
      v28 = (_QWORD *)sub_20BEB5B80(v26 + 19, &v38);
      if (v28 != v27)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v26, v27, v28);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
    }
    else
    {
      v25 = 0;
    }
    v35 = &v42;
    sub_20BFD6F90((void ***)&v35);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
  }
  else
  {
    v42 = "usd/listEditImpl.h";
    v43 = "Set";
    v44 = 195;
    v45 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Set"
          "(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::"
          "UsdInherits, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrRese"
          "rved__::SdfPathKeyPolicy>]";
    v46 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v25;
}

void sub_20C39697C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a14);
  a9 = &a20;
  sub_20BFD6F90((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInherits::GetAllDirectInherits(pxrInternal__aapl__pxrReserved__::UsdInherits *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *__p;
  void *v26;
  void **v27;
  uint64_t v28[2];
  __int128 v29;
  __int128 v30;
  int v31;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2) & 1) != 0)
  {
    v29 = 0u;
    v30 = 0u;
    v31 = 1065353216;
    v28[0] = (uint64_t)&v29;
    v28[1] = (uint64_t)a3;
    pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex(this, v5, v6, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v24);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)&v24, 1u, &v20);
    v8 = v20;
    v7 = v21;
    v9 = v22;
    if (v20 != v22 || v21 != v23)
    {
      v10 = v23 - 1;
      do
      {
        do
        {
          v11 = v7;
          v18 = v8;
          v19 = v7;
          sub_20C396C18(v28, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18);
          v7 = v11 + 1;
        }
        while (v8 != v9);
      }
      while (v10 != v11);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)&v24, 5u, &v20);
    v13 = v20;
    v12 = v21;
    v14 = v22;
    if (v20 != v22 || v21 != v23)
    {
      v15 = v23 - 1;
      do
      {
        do
        {
          v16 = v12;
          v18 = v13;
          v19 = v12;
          sub_20C396C18(v28, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18);
          v12 = v16 + 1;
        }
        while (v13 != v14);
      }
      while (v15 != v16);
    }
    sub_20BF1C150(&v27, 0);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v24);
    sub_20C220E58((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)&v29 = "usd/inherits.cpp";
    *((_QWORD *)&v29 + 1) = "GetAllDirectInherits";
    *(_QWORD *)&v30 = 79;
    *((_QWORD *)&v30 + 1) = "SdfPathVector pxrInternal__aapl__pxrReserved__::UsdInherits::GetAllDirectInherits() const";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&v24, this, v5);
    if (SHIBYTE(v26) >= 0)
      v17 = (const char *)&v24;
    else
      v17 = (const char *)v24;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim: %s", v17);
    if (SHIBYTE(v26) < 0)
      operator delete(v24);
  }
}

void sub_20C396BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  *(_QWORD *)(v22 - 96) = v21;
  sub_20BFD6F90((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

unint64_t sub_20C396C18(uint64_t *a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  unint64_t result;
  _QWORD *LayerStack;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *Path;
  char v11;
  uint64_t *v12;
  _DWORD *v13;
  unint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if ((_DWORD)result == 1)
  {
    LayerStack = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    v16[0] = v6;
    v16[1] = v7;
    result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16);
    if (*LayerStack == *(_QWORD *)result)
    {
      v15[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode(this);
      v15[1] = v8;
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v15);
      if ((result & 1) == 0)
      {
        v9 = *a1;
        Path = (unsigned int *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
        result = (unint64_t)sub_20C2215D8(v9, Path, Path);
        if ((v11 & 1) != 0)
        {
          v12 = (uint64_t *)a1[1];
          v13 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          v14 = v12[1];
          if (v14 >= v12[2])
          {
            result = sub_20BFD7890(v12, v13);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)v12[1], v13);
            sub_20BFD6EA4((_DWORD *)(v14 + 4), v13 + 1);
            result = v14 + 8;
          }
          v12[1] = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C396D0C(int *a1, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  _BOOL8 v4;
  const char *Text;
  int v7;
  int v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1) & 1) != 0)
    {
      return 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, &v7);
      v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
      if (v4)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (int *)&v9);
        sub_20BFD3EBC(a1, (int *)&v9);
        sub_20BFD3F10(a1 + 1, (int *)&v9 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
        sub_20BFD265C(&v9);
      }
      else
      {
        v9 = "usd/listEditImpl.h";
        v10 = "_TranslatePath";
        v11 = 60;
        v12 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImplBase::_TranslatePath(SdfPath *, const UsdEditTarget &)";
        v13 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot map <%s> to current edit target.", Text);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
      sub_20BFD265C(&v7);
    }
  }
  else
  {
    v9 = "usd/listEditImpl.h";
    v10 = "_TranslatePath";
    v11 = 46;
    v12 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImplBase::_TranslatePath(SdfPath *, const UsdEditTarget &)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid empty path");
    return 0;
  }
  return v4;
}

void sub_20C396E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C396E84@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int **v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (v15 = "usd/listEditImpl.h",
        v16 = "_GetListEditor",
        v17 = 238,
        v18 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdInherits, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfP"
              "athKeyPolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::Usd"
              "Inherits, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrRes"
              "erved__::SdfPathKeyPolicy>]",
        v19 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v15);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v14);
    v7 = v16;
    if (v16)
    {
      v8 = (unsigned int *)(v16 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v14))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      v12 = (unsigned int **)sub_20C0B0CA4(&v14);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(v12, a3);
    }
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_20C396F74(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  _Unwind_Resume(a1);
}

void sub_20C396F9C()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdInterpolationTypeHeld");
  sub_20BDDC0E4(__p, "Held");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538528, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdInterpolationTypeLinear");
  sub_20BDDC0E4(__p, "Linear");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538528, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C39706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C538548;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usd/modelAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdModelAPI pxrInternal__aapl__pxrReserved__::UsdModelAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C538548;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C39723C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_2549887A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2549887A8))
  {
    __cxa_guard_release(&qword_2549887A8);
  }
  return &qword_2549887A0;
}

void sub_20C3972C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549887A8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdModelAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_2549887B8);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdModelAPI *)__cxa_guard_acquire(&qword_2549887B8);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetStaticTfType(v3);
      byte_2549887B0 = sub_20C35BD7C((char *)&qword_2549887A0, v4, v5);
      __cxa_guard_release(&qword_2549887B8);
    }
  }
  return byte_2549887B0;
}

void sub_20C397344(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549887B8);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetStaticTfType(this);
  return &qword_2549887A0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_2549887D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2549887D8))
  {
    qword_2549887C0 = 0;
    *(_QWORD *)algn_2549887C8 = 0;
    qword_2549887D0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_2549887C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549887D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2549887F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2549887F8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_2549887E0 = 0;
    *(_QWORD *)algn_2549887E8 = 0;
    qword_2549887F0 = 0;
    sub_20BFE538C(&qword_2549887E0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_2549887E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549887F8);
  }
  if (v1)
    return &qword_2549887E0;
  else
    return &qword_2549887C0;
}

void sub_20C397474(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549887F8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::~UsdModelAPIAssetInfoKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v13 = (void **)((char *)this + 32);
  sub_20BEEB2B8(&v13);
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::UsdModelAPIAssetInfoKeys_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "identifier", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "name", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "version", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "payloadAssetDependencies", 0);
  v3 = *this;
  v26 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v26 = v4;
  }
  v6 = *v2;
  v27 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v27 = v7;
  }
  v9 = this[2];
  v28 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v28 = v10;
  }
  v12 = this[3];
  v29 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v29 = v13;
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  v15 = (unsigned int *)operator new(0x20uLL);
  v16 = 0;
  this[4] = v15;
  this[5] = v15;
  this[6] = v15 + 8;
  do
  {
    v17 = (&v26)[v16];
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v20 = (unsigned int **)&v30;
  this[5] = v15;
  do
  {
    v22 = (uint64_t)*--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v26);
  return (pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *)this;
}

void sub_20C39775C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C39783C()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "UsdModelAPI::KindValidationNone");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538590, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "UsdModelAPI::KindValidationModelHierarchy");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C538590, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C3978FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _BOOL8 Kind;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  Kind = pxrInternal__aapl__pxrReserved__::UsdPrim::GetKind((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7, a2);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return Kind;
}

void sub_20C3979B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetKind((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7, a2);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return v3;
}

void sub_20C397A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, pxrInternal__aapl__pxrReserved__::KindRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int **v5;
  unint64_t result;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  if ((_DWORD)a3 != 1)
    goto LABEL_6;
  v5 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v5)
    v5 = sub_20BFC9FE0(&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, a3)|| (result = pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsModel(this), (_DWORD)result))
  {
LABEL_6:
    v10 = 0;
    result = pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetKind(this, (pxrInternal__aapl__pxrReserved__::TfToken *)&v10)&& pxrInternal__aapl__pxrReserved__::KindRegistry::IsA((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v10, a2, v7);
    if ((v10 & 7) != 0)
    {
      v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsModel(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v1;
  pxrInternal__aapl__pxrReserved__ *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v2 = v8;
  if (!v8 || (v3 = *((_QWORD *)v8 + 7), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v8, v1);
    v3 = *((_QWORD *)v2 + 7);
  }
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return (v3 >> 2) & 1;
}

void sub_20C397BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsGroup(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v1;
  pxrInternal__aapl__pxrReserved__ *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C35C4F8((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v2 = v8;
  if (!v8 || (v3 = *((_QWORD *)v8 + 7), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v8, v1);
    v3 = *((_QWORD *)v2 + 7);
  }
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return (v3 >> 3) & 1;
}

void sub_20C397C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetIdentifier(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, std::string *a2)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4)
    v4 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  return sub_20C397CE0((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v4, a2);
}

uint64_t sub_20C397CE0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  unsigned int *v5;
  unsigned int v6;
  std::string *v7;
  uint64_t v8;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  std::string *__str;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v10, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
  if ((v14 & 7) != 0)
  {
    v5 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if (v16 && sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)&__str))
  {
    if ((v16 & 4) != 0)
      v7 = (std::string *)(*(uint64_t (**)(std::string **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&__str);
    else
      v7 = __str;
    std::string::operator=(a3, v7);
    std::string::operator=(a3 + 1, v7 + 1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  sub_20BF4C2D8((uint64_t)&__str);
  return v8;
}

void sub_20C397DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetIdentifier(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11[3];

  v11[2] = *(char **)MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3)
    v3 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  v11[1] = (char *)&off_24C5255B8;
  sub_20C00A0DC(v11, (__int128 *)a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C397F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetName(uint64_t a1, std::string *a2)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4)
    v4 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  return sub_20C397FB8(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 1), a2);
}

uint64_t sub_20C397FB8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  unsigned int *v5;
  unsigned int v6;
  std::string *v7;
  uint64_t v8;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  std::string *__str;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v10, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
  if ((v14 & 7) != 0)
  {
    v5 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if (v16 && sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&__str))
  {
    if ((v16 & 4) != 0)
      v7 = (std::string *)(*(uint64_t (**)(std::string **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&__str);
    else
      v7 = __str;
    std::string::operator=(a3, v7);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  sub_20BF4C2D8((uint64_t)&__str);
  return v8;
}

void sub_20C3980C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetName(uint64_t a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11[3];

  v11[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v6, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3)
    v3 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  v11[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v11, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3981F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetVersion(uint64_t a1, std::string *a2)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4)
    v4 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  return sub_20C397FB8(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 2), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetVersion(uint64_t a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11[3];

  v11[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v6, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3)
    v3 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  v11[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v11, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 2), (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C398374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetPayloadAssetDependencies(uint64_t a1, uint64_t a2)
{
  unsigned int **v4;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4)
    v4 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  return sub_20C398400(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 3), a2);
}

uint64_t sub_20C398400(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  __int128 *v7;
  uint64_t v8;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v10, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v10, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v15);
  if ((v14 & 7) != 0)
  {
    v5 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  if (v16 && sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0)
      v7 = (__int128 *)(*(uint64_t (**)(__int128 **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    else
      v7 = v15;
    sub_20C28130C(a3, v7);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  sub_20BF4C2D8((uint64_t)&v15);
  return v8;
}

void sub_20C39850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetPayloadAssetDependencies(uint64_t a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v6, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3)
    v3 = sub_20C398970(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  v11[1] = &off_24C525670;
  sub_20BF56B40(v11, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 3), (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C39863C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  uint64_t HasAssetInfo;
  unsigned int *v6;
  unsigned int v7;
  _QWORD **v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD **v12;
  _BYTE v13[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = (uint64_t *)((char *)this + 8);
  v4 = (_DWORD *)((char *)this + 16);
  sub_20C35C4F8((uint64_t)v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
  HasAssetInfo = pxrInternal__aapl__pxrReserved__::UsdObject::HasAssetInfo((pxrInternal__aapl__pxrReserved__::UsdObject *)v13);
  if ((v17 & 7) != 0)
  {
    v6 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  if ((_DWORD)HasAssetInfo)
  {
    sub_20C35C4F8((uint64_t)v13, v3, v4);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfo((pxrInternal__aapl__pxrReserved__::UsdObject *)v13, &v12);
    v8 = v12;
    v12 = 0;
    sub_20BF49F14((_QWORD ***)a2, v8);
    sub_20BF49F14(&v12, 0);
    if ((v17 & 7) != 0)
    {
      v9 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_20BFD265C(&v15);
    if (v14)
      sub_20C35C614(v14);
  }
  return HasAssetInfo;
}

void sub_20C398798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C35C4F8((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfo((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5, a2);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
}

void sub_20C398838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C39884C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C398920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unsigned int **sub_20C398970(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C3989B8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::~UsdModelAPIAssetInfoKeys_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C3989B8()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::UsdModelAPIAssetInfoKeys_StaticTokenType(v0);
  return v0;
}

void sub_20C3989E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::UsdNamespaceEditor(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = *a2;
  sub_20BF1DD04((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 12));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimDelete(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  int v5;
  const char *Text;
  _QWORD v8[4];
  char v9;

  sub_20C3999F8((uint64_t)this + 32);
  sub_20C01A074((int *)this + 2, a2);
  sub_20C01A0C8((int *)this + 3, (_DWORD *)a2 + 1);
  v8[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 1);
  sub_20BFD3EBC((int *)this + 4, (int *)v8);
  sub_20BFD3F10((int *)this + 5, (int *)v8 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_20BFD265C(v8);
  v4 = sub_20C399980(a2);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v8[0] = "usd/namespaceEditor.cpp";
    v8[1] = "_AddPrimDelete";
    v8[2] = 452;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimDelete(const SdfPath &)";
    v9 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a prim namespace edit.", Text);
    v5 = 0;
  }
  *((_DWORD *)this + 6) = v5;
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t result;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  sub_20C3999F8((uint64_t)this + 32);
  sub_20C01A074((int *)this + 2, a2);
  sub_20C01A0C8((int *)this + 3, (_DWORD *)a2 + 1);
  sub_20C01A074((int *)this + 4, a3);
  sub_20C01A0C8((int *)this + 5, (_DWORD *)a3 + 1);
  if ((sub_20C399980(a2) & 1) == 0)
  {
    v11 = "usd/namespaceEditor.cpp";
    v12 = "_AddPrimMove";
    v13 = 473;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(const SdfPath &, const SdfPath &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a prim namespace edit.");
LABEL_7:
    result = 0;
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  if ((sub_20C399980(a3) & 1) == 0)
  {
    v11 = "usd/namespaceEditor.cpp";
    v12 = "_AddPrimMove";
    v13 = 480;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(const SdfPath &, const SdfPath &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the destination for a prim namespace edit.");
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v10);
  v7 = v10;
  v6 = v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    v8 = 2;
  else
    v8 = 3;
  *((_DWORD *)this + 6) = v8;
  return 1;
}

void sub_20C398CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::DeletePrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t *v3;

  v3 = sub_20C3734F4((uint64_t)a2);
  return pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimDelete(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::RenamePrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;
  int v11;

  v6 = sub_20C3734F4((uint64_t)a2);
  v7 = sub_20C3734F4((uint64_t)a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, a3, &v10);
  v8 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  return v8;
}

void sub_20C398DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentPrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v8;
  uint64_t v9;
  int v11;
  int v12;

  v6 = sub_20C3734F4((uint64_t)a2);
  v7 = sub_20C3734F4((uint64_t)a3);
  v8 = sub_20C398E78(a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, v8, &v11);
  v9 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  return v9;
}

void sub_20C398E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *sub_20C398E78(_DWORD *a1)
{
  uint64_t *v1;

  if (*a1 != 1)
    return (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(a1 + 6);
  v1 = sub_20C3734F4((uint64_t)a1);
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentPrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v11;
  int v12;

  v7 = sub_20C3734F4((uint64_t)a2);
  v8 = sub_20C3734F4((uint64_t)a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v8, a4, &v11);
  v9 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  return v9;
}

void sub_20C398F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyDelete(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  int v5;
  const char *Text;
  _QWORD v8[4];
  char v9;

  sub_20C3999F8((uint64_t)this + 32);
  sub_20C01A074((int *)this + 2, a2);
  sub_20C01A0C8((int *)this + 3, (_DWORD *)a2 + 1);
  v8[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 1);
  sub_20BFD3EBC((int *)this + 4, (int *)v8);
  sub_20BFD3F10((int *)this + 5, (int *)v8 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_20BFD265C(v8);
  v4 = sub_20C3999BC(a2);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v8[0] = "usd/namespaceEditor.cpp";
    v8[1] = "_AddPropertyDelete";
    v8[2] = 508;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyDelete(const SdfPath &)";
    v9 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a property namespace edit.", Text);
    v5 = 0;
  }
  *((_DWORD *)this + 6) = v5;
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t result;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  sub_20C3999F8((uint64_t)this + 32);
  sub_20C01A074((int *)this + 2, a2);
  sub_20C01A0C8((int *)this + 3, (_DWORD *)a2 + 1);
  sub_20C01A074((int *)this + 4, a3);
  sub_20C01A0C8((int *)this + 5, (_DWORD *)a3 + 1);
  if ((sub_20C3999BC(a2) & 1) == 0)
  {
    v11 = "usd/namespaceEditor.cpp";
    v12 = "_AddPropertyMove";
    v13 = 530;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(const SdfPath &, const SdfPath &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a property namespace edit.");
LABEL_7:
    result = 0;
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  if ((sub_20C3999BC(a3) & 1) == 0)
  {
    v11 = "usd/namespaceEditor.cpp";
    v12 = "_AddPropertyMove";
    v13 = 537;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(const SdfPath &, const SdfPath &)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the destination for a property namespace edit.");
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, &v10);
  v7 = v10;
  v6 = v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    v8 = 2;
  else
    v8 = 3;
  *((_DWORD *)this + 6) = v8;
  return 1;
}

void sub_20C3991D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::DeleteProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  uint64_t v3;
  int v5;
  int v6;

  sub_20C348EEC((uint64_t)a2, &v5);
  v3 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyDelete(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_20BFD265C(&v5);
  return v3;
}

void sub_20C399240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::RenameProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  sub_20C348EEC((uint64_t)a2, &v12);
  sub_20C348EEC((uint64_t)a2, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3, &v10);
  v6 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  return v6;
}

void sub_20C399310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va1);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18((int *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3)
{
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v7;
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;

  sub_20C348EEC((uint64_t)a2, &v12);
  v6 = sub_20C3734F4((uint64_t)a3);
  v7 = sub_20C398E78(a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v7, &v10);
  v8 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  return v8;
}

void sub_20C3993F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;

  sub_20C348EEC((uint64_t)a2, &v12);
  v7 = sub_20C3734F4((uint64_t)a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, a4, &v10);
  v8 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  return v8;
}

void sub_20C3994B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ApplyEdits(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this)
{
  std::string **v2;
  uint64_t v3;
  _QWORD v5[4];
  char v6;

  pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessEditsIfNeeded(this);
  if (*((_BYTE *)this + 168))
  {
    v2 = (std::string **)((char *)this + 32);
    v3 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply(v2);
    sub_20C3999F8((uint64_t)v2);
    return v3;
  }
  else
  {
    v5[0] = "usd/namespaceEditor.cpp";
    v5[1] = "ApplyEdits";
    v5[2] = 403;
    v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ApplyEdits()";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to process edits");
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessEditsIfNeeded(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this)
{
  char *v1;
  _BYTE v2[24];
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD v8[3];
  void **v9;

  if (!*((_BYTE *)this + 168))
  {
    v1 = (char *)this + 32;
    pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::ProcessEdit((uint64_t *)this, (_DWORD *)this + 2, (uint64_t)v2);
    sub_20C39A5BC((uint64_t)v1, (uint64_t)v2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v8);
    sub_20BFD265C(&v7);
    v9 = (void **)&v6;
    sub_20BDE5038(&v9);
    v9 = (void **)&v5;
    sub_20C39C844(&v9);
    v9 = (void **)&v4;
    sub_20BEB4844(&v9);
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit(&v3);
    v9 = (void **)v2;
    sub_20BDE5038(&v9);
  }
}

void sub_20C399608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C39A6AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply(std::string **this)
{
  const char *v2;
  char *v3;
  _BOOL4 CanApply;
  std::string *v5;
  char v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  std::string **v13;
  char *v14;
  std::string *v15;
  _BYTE v17[8];
  void *__p[2];
  char v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  CanApply = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::CanApply(this, (uint64_t)&v25);
  if (!CanApply)
  {
    v20 = "usd/namespaceEditor.cpp";
    v21 = "Apply";
    v22 = 1201;
    v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()";
    v24 = 0;
    v5 = &v25;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v25.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to apply edits to the stage because of the following errors: %s", v2, v3, v5);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (CanApply)
    {
LABEL_8:
      __p[0] = this;
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
      if (*((_BYTE *)this + 128))
      {
        pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::SdfCleanupEnabler((pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *)&v20);
        v6 = sub_20C39C5FC((uint64_t *)__p);
        pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::~SdfCleanupEnabler((pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *)&v20);
        if ((v6 & 1) != 0)
          goto LABEL_10;
      }
      else if ((sub_20C39C5FC((uint64_t *)__p) & 1) != 0)
      {
LABEL_10:
        v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this[9];
        v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this[10];
        while (v7 != v8)
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v7) & 1) == 0)
          {
            v9 = sub_20BFE6874(v7);
            sub_20C39C79C(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1), (uint64_t)(v7 + 2));
          }
          v7 += 21;
        }
        v11 = this[12];
        v12 = this[13];
        v13 = this + 12;
        if (v11 != v12)
        {
          v20 = "usd/namespaceEditor.cpp";
          v21 = "Apply";
          v22 = 1273;
          v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()";
          v24 = 0;
          pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", v13, &v25);
          v15 = (v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v25
              : (std::string *)v25.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"The follow target path or connections could not be updated for the namespace edit: %s", v14, v15);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
        }
        v10 = 1;
        goto LABEL_26;
      }
      v10 = 0;
LABEL_26:
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
      return v10;
    }
  }
  else if (CanApply)
  {
    goto LABEL_8;
  }
  return 0;
}

void sub_20C3997FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 33) < 0)
    operator delete(*(void **)(v18 - 56));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ClearProcessedEdits(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this)
{
  sub_20C3999F8((uint64_t)this + 32);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::CanApplyEdits(uint64_t a1, uint64_t a2)
{
  _QWORD v5[4];
  char v6;

  pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessEditsIfNeeded((pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *)a1);
  if (*(_BYTE *)(a1 + 168))
    return pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::CanApply((std::string **)(a1 + 32), a2);
  v5[0] = "usd/namespaceEditor.cpp";
  v5[1] = "CanApplyEdits";
  v5[2] = 418;
  v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::CanApplyEdits(std::string *) const";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to process edits");
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::CanApply(std::string **a1, uint64_t a2)
{
  std::string *v2;
  std::string *v3;
  std::string v6;

  v2 = *a1;
  v3 = a1[1];
  if (a2 && v2 != v3)
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", a1, &v6);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v6;
  }
  return v2 == v3;
}

uint64_t sub_20C399980(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a1);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a1);
    if ((_DWORD)result)
      return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a1) ^ 1;
  }
  return result;
}

uint64_t sub_20C3999BC(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a1);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a1);
    if ((_DWORD)result)
      return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a1) ^ 1;
  }
  return result;
}

void sub_20C3999F8(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 136))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 124));
    sub_20BFD265C((_DWORD *)(a1 + 120));
    v2 = (void **)(a1 + 96);
    sub_20BDE5038(&v2);
    v2 = (void **)(a1 + 72);
    sub_20C39C844(&v2);
    v2 = (void **)(a1 + 48);
    sub_20BEB4844(&v2);
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((void **)(a1 + 24));
    v2 = (void **)a1;
    sub_20BDE5038(&v2);
    *(_BYTE *)(a1 + 136) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::ProcessEdit(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  unsigned int **NameToken;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  pxrInternal__aapl__pxrReserved__ *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  pxrInternal__aapl__pxrReserved__ *v38;
  __int128 v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v42;
  pxrInternal__aapl__pxrReserved__ *v43;
  unsigned int *v44;
  unsigned int v45;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v46;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  int IsDefined;
  unsigned int *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v54;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v55;
  const char *v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  pxrInternal__aapl__pxrReserved__ *v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v78;
  pxrInternal__aapl__pxrReserved__ *v79;
  __int128 v80;
  pxrInternal__aapl__pxrReserved__::UsdStage *v81;
  _QWORD *EditTarget;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v83;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__ *v87;
  uint64_t v88;
  void *v89[2];
  uint64_t v90;
  void *v91[2];
  uint64_t v92;
  void *__p[2];
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  pxrInternal__aapl__pxrReserved__ *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = (uint64_t *)(a3 + 24);
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit((_QWORD *)(a3 + 24));
  *(_QWORD *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 124));
  *(_WORD *)(a3 + 128) = 0;
  if (a2[4])
  {
    sub_20C39A72C(v6, a2, a2 + 2, -2);
    v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8(a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v96);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v96, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v96 + 1);
    sub_20BFD265C(&v96);
    v91[0] = 0;
    v91[1] = 0;
    v92 = 0;
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      NameToken = (unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (!pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, NameToken))
      {
        v10 = "The property to edit is not a valid property";
        goto LABEL_30;
      }
      if ((sub_20C39C9C4((uint64_t)__p) & 1) != 0)
      {
        v10 = "The property to edit belongs to a prototype prim";
        goto LABEL_30;
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v94))
      {
        v10 = "The property to edit belongs to an instance prototype proxy";
        goto LABEL_30;
      }
      v42 = (_QWORD *)sub_20C39CA24((uint64_t)__p, v33);
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(v42, NameToken, (unsigned int **)&v96);
      v43 = v97;
      if ((v96 & 7) != 0)
      {
        v44 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if (v43)
      {
        v10 = "The property to edit is a built-in property of its prim";
LABEL_30:
        MEMORY[0x212B929D0](v91, v10);
        v20 = a3 + 16;
        v28 = *(_QWORD *)(a3 + 16);
        v22 = *(_QWORD *)(a3 + 8);
        if (v22 < v28)
          goto LABEL_31;
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(_QWORD *)a3) >> 3);
        v31 = v23 + 1;
        if (v23 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(_QWORD *)a3) >> 3);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v31;
          v100 = a3 + 16;
          if (!v26)
          {
            v27 = 0;
            goto LABEL_49;
          }
LABEL_28:
          v27 = (unsigned int *)sub_20BDE4FF4(v20, v26);
LABEL_49:
          v38 = (pxrInternal__aapl__pxrReserved__ *)&v27[6 * v23];
          v96 = (unint64_t)v27;
          v97 = v38;
          v99 = (const char *)&v27[6 * v26];
          v39 = *(_OWORD *)v91;
          *((_QWORD *)v38 + 2) = v92;
          *(_OWORD *)v38 = v39;
          v91[1] = 0;
          v92 = 0;
          v91[0] = 0;
          v98 = (uint64_t)v38 + 24;
          sub_20BDF34C0((uint64_t *)a3, &v96);
          v30 = *(_QWORD *)(a3 + 8);
          sub_20BDF3648((uint64_t)&v96);
          goto LABEL_50;
        }
        goto LABEL_137;
      }
LABEL_64:
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2))
      {
        v46 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8(a1);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), (uint64_t)&v96);
        IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v96, v47);
        if ((v99 & 7) != 0)
        {
          v49 = (unsigned int *)((unint64_t)v99 & 0xFFFFFFFFFFFFFFF8);
          do
            v50 = __ldxr(v49);
          while (__stlxr(v50 - 2, v49));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
        sub_20BFD265C(&v98);
        if (v97)
          sub_20C35C614(v97);
        if (IsDefined)
        {
          sub_20BDDC0E4(v89, "An object already exists at the new path");
          v51 = *(_QWORD *)(a3 + 16);
          v52 = *(_QWORD *)(a3 + 8);
          if (v52 >= v51)
          {
            v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(_QWORD *)a3) >> 3);
            v65 = v64 + 1;
            if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)a3) >> 3);
            if (2 * v66 > v65)
              v65 = 2 * v66;
            if (v66 >= 0x555555555555555)
              v67 = 0xAAAAAAAAAAAAAAALL;
            else
              v67 = v65;
            v100 = a3 + 16;
            if (v67)
              v68 = (unsigned int *)sub_20BDE4FF4(a3 + 16, v67);
            else
              v68 = 0;
            v74 = (pxrInternal__aapl__pxrReserved__ *)&v68[6 * v64];
            v96 = (unint64_t)v68;
            v97 = v74;
            v99 = (const char *)&v68[6 * v67];
            v75 = *(_OWORD *)v89;
            *((_QWORD *)v74 + 2) = v90;
            *(_OWORD *)v74 = v75;
            v89[1] = 0;
            v90 = 0;
            v89[0] = 0;
            v98 = (uint64_t)v74 + 24;
            sub_20BDF34C0((uint64_t *)a3, &v96);
            v76 = *(_QWORD *)(a3 + 8);
            sub_20BDF3648((uint64_t)&v96);
            v77 = SHIBYTE(v90);
            *(_QWORD *)(a3 + 8) = v76;
            if (v77 < 0)
              operator delete(v89[0]);
          }
          else
          {
            v53 = *(_OWORD *)v89;
            *(_QWORD *)(v52 + 16) = v90;
            *(_OWORD *)v52 = v53;
            *(_QWORD *)(a3 + 8) = v52 + 24;
          }
          goto LABEL_51;
        }
      }
      if (a2[4] != 3)
      {
LABEL_117:
        v81 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(a1);
        EditTarget = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v81);
        v84 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_20C368FF0((uint64_t)__p, v83);
        pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherLayersToEdit((uint64_t)a2, EditTarget, v84, (uint64_t *)a3);
        if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 56))
        {
          if (!*(_BYTE *)(a3 + 129))
          {
            v96 = (unint64_t)"usd/namespaceEditor.cpp";
            v97 = (pxrInternal__aapl__pxrReserved__ *)"ProcessEdit";
            v98 = 818;
            v99 = "static UsdNamespaceEditor::_ProcessedEdit pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditP"
                  "rocessor::ProcessEdit(const UsdStageRefPtr &, const _EditDescription &)";
            LOBYTE(v100) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v96, "processedEdit.requiresRelocates", 0);
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetListOpEdits(a1, a2, (uint64_t *)a3);
        }
        goto LABEL_51;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), &v96);
      sub_20BFD3EBC((int *)(a3 + 120), (int *)&v96);
      sub_20BFD3F10((int *)(a3 + 124), (int *)&v96 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v96 + 1);
      sub_20BFD265C(&v96);
      *(_BYTE *)(a3 + 128) = 1;
      v89[0] = 0;
      v89[1] = 0;
      v90 = 0;
      v54 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8(a1);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 120), (uint64_t)&v96);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v96, v55) & 1) != 0)
      {
        if ((sub_20C39C9C4((uint64_t)&v96) & 1) != 0)
        {
          v56 = "The new parent prim belongs to a prototype prim";
        }
        else
        {
          if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v98))
          {
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
            {
              if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v96))
              {
                v56 = "The new parent prim for a property cannot be the pseudo-root";
                goto LABEL_78;
              }
            }
            else
            {
              v87 = v97;
              if (!v97 || (v88 = *((_QWORD *)v97 + 7), (v88 & 0x800) != 0))
              {
                pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v97, v78);
                v88 = *((_QWORD *)v87 + 7);
              }
              if ((v88 & 0x100) != 0)
              {
                v56 = "The new parent prim is an instance prim whose children are provided exclusively by its prototype";
                goto LABEL_78;
              }
              if (*(_QWORD *)(a3 + 120) == *(_QWORD *)a2)
              {
                v56 = "The new parent prim is the same as the prim to move";
                goto LABEL_78;
              }
              if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 120), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
              {
                v56 = "The new parent prim is a descendant of the prim to move";
                goto LABEL_78;
              }
            }
            v57 = 1;
LABEL_79:
            if ((v99 & 7) != 0)
            {
              v58 = (unsigned int *)((unint64_t)v99 & 0xFFFFFFFFFFFFFFF8);
              do
                v59 = __ldxr(v58);
              while (__stlxr(v59 - 2, v58));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
            sub_20BFD265C(&v98);
            if (v97)
              sub_20C35C614(v97);
            if ((v57 & 1) == 0)
            {
              v60 = *(_QWORD *)(a3 + 16);
              v61 = *(_QWORD *)(a3 + 8);
              if (v61 >= v60)
              {
                v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *(_QWORD *)a3) >> 3);
                v70 = v69 + 1;
                if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *(_QWORD *)a3) >> 3);
                if (2 * v71 > v70)
                  v70 = 2 * v71;
                if (v71 >= 0x555555555555555)
                  v72 = 0xAAAAAAAAAAAAAAALL;
                else
                  v72 = v70;
                v100 = a3 + 16;
                if (v72)
                  v73 = (unsigned int *)sub_20BDE4FF4(a3 + 16, v72);
                else
                  v73 = 0;
                v79 = (pxrInternal__aapl__pxrReserved__ *)&v73[6 * v69];
                v96 = (unint64_t)v73;
                v97 = v79;
                v99 = (const char *)&v73[6 * v72];
                v80 = *(_OWORD *)v89;
                *((_QWORD *)v79 + 2) = v90;
                *(_OWORD *)v79 = v80;
                v89[1] = 0;
                v90 = 0;
                v89[0] = 0;
                v98 = (uint64_t)v79 + 24;
                sub_20BDF34C0((uint64_t *)a3, &v96);
                v63 = *(_QWORD *)(a3 + 8);
                sub_20BDF3648((uint64_t)&v96);
              }
              else
              {
                v62 = *(_OWORD *)v89;
                *(_QWORD *)(v61 + 16) = v90;
                *(_OWORD *)v61 = v62;
                v89[1] = 0;
                v90 = 0;
                v89[0] = 0;
                v63 = v61 + 24;
                *(_QWORD *)(a3 + 8) = v61 + 24;
              }
              *(_QWORD *)(a3 + 8) = v63;
            }
            if (SHIBYTE(v90) < 0)
              operator delete(v89[0]);
            if (!v57)
            {
              if (SHIBYTE(v92) < 0)
                operator delete(v91[0]);
              if ((v95 & 7) != 0)
              {
                v85 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
                do
                  v86 = __ldxr(v85);
                while (__stlxr(v86 - 2, v85));
              }
              goto LABEL_56;
            }
            goto LABEL_117;
          }
          v56 = "The new parent prim is a prototype proxy descendant of an instance prim";
        }
      }
      else
      {
        v56 = "The new parent prim is not a valid prim";
      }
LABEL_78:
      MEMORY[0x212B929D0](v89, v56);
      v57 = 0;
      goto LABEL_79;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)__p, v8))
    {
      if ((sub_20C39C9C4((uint64_t)__p) & 1) != 0)
      {
        v14 = "The prim to edit belongs to a prototype prim";
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v94))
          goto LABEL_64;
        v14 = "The prim to edit is a prototype proxy descendant of an instance prim";
      }
    }
    else
    {
      v14 = "The prim to edit is not a valid prim";
    }
    MEMORY[0x212B929D0](v91, v14);
    v20 = a3 + 16;
    v21 = *(_QWORD *)(a3 + 16);
    v22 = *(_QWORD *)(a3 + 8);
    if (v22 < v21)
    {
LABEL_31:
      v29 = *(_OWORD *)v91;
      *(_QWORD *)(v22 + 16) = v92;
      *(_OWORD *)v22 = v29;
      v91[1] = 0;
      v92 = 0;
      v91[0] = 0;
      v30 = v22 + 24;
      *(_QWORD *)(a3 + 8) = v22 + 24;
LABEL_50:
      *(_QWORD *)(a3 + 8) = v30;
LABEL_51:
      if (SHIBYTE(v92) < 0)
        operator delete(v91[0]);
      if ((v95 & 7) != 0)
      {
        v40 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
LABEL_56:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
      sub_20BFD265C(&v94);
      if (__p[1])
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
      return;
    }
    v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(_QWORD *)a3) >> 3);
    v24 = v23 + 1;
    if (v23 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a3) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      v100 = a3 + 16;
      if (!v26)
      {
        v27 = 0;
        goto LABEL_49;
      }
      goto LABEL_28;
    }
LABEL_137:
    sub_20BDDF694();
  }
  sub_20BDDC0E4(__p, "There are no valid edits to perform");
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 8);
  if (v12 >= v11)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a3) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)a3) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    v100 = a3 + 16;
    if (v18)
      v19 = (unsigned int *)sub_20BDE4FF4(a3 + 16, v18);
    else
      v19 = 0;
    v34 = (pxrInternal__aapl__pxrReserved__ *)&v19[6 * v15];
    v96 = (unint64_t)v19;
    v97 = v34;
    v99 = (const char *)&v19[6 * v18];
    v35 = *(_OWORD *)__p;
    *((_QWORD *)v34 + 2) = v94;
    *(_OWORD *)v34 = v35;
    __p[1] = 0;
    v94 = 0;
    __p[0] = 0;
    v98 = (uint64_t)v34 + 24;
    sub_20BDF34C0((uint64_t *)a3, &v96);
    v36 = *(_QWORD *)(a3 + 8);
    sub_20BDF3648((uint64_t)&v96);
    v37 = SHIBYTE(v94);
    *(_QWORD *)(a3 + 8) = v36;
    if (v37 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v13 = *(_OWORD *)__p;
    *(_QWORD *)(v12 + 16) = v94;
    *(_OWORD *)v12 = v13;
    *(_QWORD *)(a3 + 8) = v12 + 24;
  }
}

void sub_20C39A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  sub_20C35C2E0((uint64_t)&a22);
  sub_20C39A6AC(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39A5BC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 136))
  {
    sub_20BE7598C((uint64_t *)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::operator=(a1 + 24, (_DWORD **)(a2 + 24));
    sub_20BF49804(a1 + 48);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    sub_20C3A0874((void **)(a1 + 72));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    sub_20BE7598C((uint64_t *)(a1 + 96));
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    sub_20BFD3EBC((int *)(a1 + 120), (int *)(a2 + 120));
    sub_20BFD3F10((int *)(a1 + 124), (int *)(a2 + 124));
    *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  }
  else
  {
    sub_20C3A08E0(a1, a2);
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t sub_20C39A6AC(uint64_t a1)
{
  void **v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 124));
  sub_20BFD265C((_DWORD *)(a1 + 120));
  v3 = (void **)(a1 + 96);
  sub_20BDE5038(&v3);
  v3 = (void **)(a1 + 72);
  sub_20C39C844(&v3);
  v3 = (void **)(a1 + 48);
  sub_20BEB4844(&v3);
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((void **)(a1 + 24));
  v3 = (void **)a1;
  sub_20BDE5038(&v3);
  return a1;
}

_DWORD *sub_20C39A72C(uint64_t *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  int v6;
  int v7;
  int v8;
  int v9;

  sub_20C136FB4(&v6, a2, a3, a4);
  sub_20C39C974(a1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C39A794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  sub_20C134DB8(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39A7A8(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() cons"
            "t [U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAE3853 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherLayersToEdit(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v11;
  uint64_t Layers;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t *i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t Identifier;
  uint64_t v47;
  const char *Text;
  const char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v63;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  const char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  void *__p[2];
  uint64_t v91;
  _QWORD v92[2];
  char *v93;
  char *v94;
  _OWORD *v95;
  char *v96;
  uint64_t *v97;

  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v92[0] = v8;
  v92[1] = v9;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v92);
  v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v11);
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentityPathMapping((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(a2 + 2)))
  {
    v13 = *(uint64_t **)Layers;
    v14 = *(uint64_t **)(Layers + 8);
    if (*(uint64_t **)Layers == v14)
    {
      v15 = *(uint64_t **)Layers;
    }
    else
    {
      while (!sub_20C1020E4(a2, v13))
      {
        if (++v13 == v14)
        {
          v13 = v14;
          break;
        }
      }
      v15 = v13;
      v13 = *(uint64_t **)(Layers + 8);
    }
    if (v15 != v13)
    {
      v23 = *(uint64_t **)Layers;
      if (*(uint64_t **)Layers != v13)
      {
        v24 = a4 + 6;
        do
        {
          v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v23);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
          {
            sub_20C1034E8((uint64_t *)__p, v23);
            v27 = (_OWORD *)a4[7];
            v26 = a4[8];
            if ((unint64_t)v27 >= v26)
            {
              v28 = ((uint64_t)v27 - *v24) >> 4;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60)
                sub_20BDDF694();
              v30 = v26 - *v24;
              if (v30 >> 3 > v29)
                v29 = v30 >> 3;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
                v31 = 0xFFFFFFFFFFFFFFFLL;
              else
                v31 = v29;
              v97 = a4 + 8;
              v32 = (char *)sub_20BDEA2F0((uint64_t)(a4 + 8), v31);
              v33 = &v32[16 * v28];
              v93 = v32;
              v94 = v33;
              v96 = &v32[16 * v34];
              *(_OWORD *)v33 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              v95 = v33 + 16;
              sub_20C139948(a4 + 6, &v93);
              v35 = a4[7];
              sub_20BEB5F68((unsigned int *)&v93);
              v36 = (unsigned int *)__p[1];
              a4[7] = v35;
              if (v36)
              {
                v37 = v36 + 2;
                do
                {
                  v38 = __ldxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
              }
            }
            else
            {
              *v27 = *(_OWORD *)__p;
              a4[7] = (uint64_t)(v27 + 1);
            }
          }
          ++v23;
        }
        while (v23 != v13);
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1) & 1) != 0)
        pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPropEditRequiresRelocates((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (uint64_t *)this, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v92, (uint64_t)a4);
      else
        pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPrimEditRequiresRelocates(a1, (uint64_t *)this, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v92, (uint64_t)a4);
      v42 = (uint64_t *)a4[6];
      for (i = (uint64_t *)a4[7]; v42 != i; v42 += 2)
      {
        v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v42);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v44) & 1) == 0)
        {
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v42);
          Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v45);
          if (*(char *)(Identifier + 23) >= 0)
            v47 = Identifier;
          else
            v47 = *(_QWORD *)Identifier;
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The spec @%s@<%s> cannot be edited because the layer is not editable", v49, v50, v47, Text);
          v52 = a4[1];
          v51 = a4[2];
          if (v52 >= v51)
          {
            v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *a4) >> 3);
            v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *a4) >> 3);
            if (2 * v56 > v55)
              v55 = 2 * v56;
            if (v56 >= 0x555555555555555)
              v57 = 0xAAAAAAAAAAAAAAALL;
            else
              v57 = v55;
            v97 = a4 + 2;
            if (v57)
              v58 = (char *)sub_20BDE4FF4((uint64_t)(a4 + 2), v57);
            else
              v58 = 0;
            v59 = &v58[24 * v54];
            v93 = v58;
            v94 = v59;
            v96 = &v58[24 * v57];
            v60 = *(_OWORD *)__p;
            *((_QWORD *)v59 + 2) = v91;
            *(_OWORD *)v59 = v60;
            __p[1] = 0;
            v91 = 0;
            __p[0] = 0;
            v95 = v59 + 24;
            sub_20BDF34C0(a4, &v93);
            v61 = a4[1];
            sub_20BDF3648((uint64_t)&v93);
            v62 = SHIBYTE(v91);
            a4[1] = v61;
            if (v62 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v53 = *(_OWORD *)__p;
            *(_QWORD *)(v52 + 16) = v91;
            *(_OWORD *)v52 = v53;
            a4[1] = v52 + 24;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8)))
        {
          v63 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v42);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v63, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
          {
            v64 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v42);
            v65 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v64);
            if (*(char *)(v65 + 23) >= 0)
              v66 = v65;
            else
              v66 = *(_QWORD *)v65;
            v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
            v68 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The spec @%s@<%s> cannot be moved to <%s> because a spec already exists at the new path", v69, v70, v66, v67, v68);
            v72 = a4[1];
            v71 = a4[2];
            if (v72 >= v71)
            {
              v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *a4) >> 3);
              v75 = v74 + 1;
              if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20BDDF694();
              v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *a4) >> 3);
              if (2 * v76 > v75)
                v75 = 2 * v76;
              if (v76 >= 0x555555555555555)
                v77 = 0xAAAAAAAAAAAAAAALL;
              else
                v77 = v75;
              v97 = a4 + 2;
              if (v77)
                v78 = (char *)sub_20BDE4FF4((uint64_t)(a4 + 2), v77);
              else
                v78 = 0;
              v79 = &v78[24 * v74];
              v93 = v78;
              v94 = v79;
              v96 = &v78[24 * v77];
              v80 = *(_OWORD *)__p;
              *((_QWORD *)v79 + 2) = v91;
              *(_OWORD *)v79 = v80;
              __p[1] = 0;
              v91 = 0;
              __p[0] = 0;
              v95 = v79 + 24;
              sub_20BDF34C0(a4, &v93);
              v81 = a4[1];
              sub_20BDF3648((uint64_t)&v93);
              v82 = SHIBYTE(v91);
              a4[1] = v81;
              if (v82 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v73 = *(_OWORD *)__p;
              *(_QWORD *)(v72 + 16) = v91;
              *(_OWORD *)v72 = v73;
              a4[1] = v72 + 24;
            }
          }
        }
      }
      return;
    }
    sub_20BDDC0E4(__p, "Edit targets with layers outside of the root layer stack are not currently supported for namespace editing");
    v16 = (uint64_t)(a4 + 2);
    v40 = a4[2];
    v18 = a4[1];
    if (v18 < v40)
    {
LABEL_38:
      v41 = *(_OWORD *)__p;
      *(_QWORD *)(v18 + 16) = v91;
      *(_OWORD *)v18 = v41;
      a4[1] = v18 + 24;
      return;
    }
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a4) >> 3);
    v83 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a4) >> 3);
    if (2 * v84 > v83)
      v83 = 2 * v84;
    if (v84 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v83;
    v97 = a4 + 2;
    if (v22)
      goto LABEL_85;
    v85 = 0;
  }
  else
  {
    sub_20BDDC0E4(__p, "Edit targets that map paths across composition arcs are not currently supported for namespace editing");
    v16 = (uint64_t)(a4 + 2);
    v17 = a4[2];
    v18 = a4[1];
    if (v18 < v17)
      goto LABEL_38;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a4) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a4) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v97 = a4 + 2;
    if (v22)
    {
LABEL_85:
      v85 = (char *)sub_20BDE4FF4(v16, v22);
      goto LABEL_88;
    }
    v85 = 0;
  }
LABEL_88:
  v86 = &v85[24 * v19];
  v93 = v85;
  v94 = v86;
  v96 = &v85[24 * v22];
  v87 = *(_OWORD *)__p;
  *((_QWORD *)v86 + 2) = v91;
  *(_OWORD *)v86 = v87;
  __p[1] = 0;
  v91 = 0;
  __p[0] = 0;
  v95 = v86 + 24;
  sub_20BDF34C0(a4, &v93);
  v88 = a4[1];
  sub_20BDF3648((uint64_t)&v93);
  v89 = SHIBYTE(v91);
  a4[1] = v88;
  if (v89 < 0)
    operator delete(__p[0]);
}

void sub_20C39AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20BDF3648((uint64_t)&a21);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetListOpEdits(_QWORD *a1, unsigned int *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  tbb::internal *v7;
  void *v8;
  int8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  void **i;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  uint64_t *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *j;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  void ***v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t *v43;
  void **v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  const char *v50;
  const char *Text;
  const char *v52;
  char *v53;
  const char *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void **v63;
  uint64_t **v64;
  void **v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  BOOL v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v78;
  uint64_t v79;
  uint64_t *v80;
  void *v82;
  uint64_t *v83;
  char v84;
  void **v85;
  void **v86;
  uint64_t v87;
  void ***v88;
  _QWORD *v89[2];
  void *v90;
  int8x8_t v91;
  __int128 v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  void *v97[3];
  void **v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  void **v109;
  unint64_t v110;
  uint64_t v111;
  __int128 v112;
  void **v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;
  tbb::internal *v127[3];
  void *__p[2];
  __int128 v129;
  int v130;
  __int128 v131;
  _QWORD v132[5];

  v132[3] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v109);
  v125 = 0;
  v4 = operator new(0x20uLL);
  v5 = v124;
  *v4 = &off_24C5385B0;
  v4[1] = &v109;
  v4[2] = &v109;
  v125 = v4;
  v126 = 0;
  v127[0] = (tbb::internal *)off_24C5386E8;
  v7 = (tbb::internal *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v6);
  v127[1] = v7;
  bzero(v7, 0x2C0uLL);
  *((_OWORD *)v7 + 16) = xmmword_20CAE2E30;
  v127[0] = (tbb::internal *)off_24C538678;
  *(_OWORD *)__p = 0u;
  v129 = 0u;
  v130 = 1065353216;
  memset(v132, 0, 24);
  v131 = 0u;
  v88 = &v109;
  v89[0] = a1;
  v97[0] = off_24C538728;
  v97[1] = &v88;
  tbb::interface7::internal::isolate_within_arena((uint64_t (***)(_QWORD))v97, 0);
  v8 = __p[0];
  v9 = (int8x8_t)__p[1];
  __p[1] = 0;
  __p[0] = 0;
  v90 = v8;
  v91 = v9;
  v92 = v129;
  v93 = v130;
  if (*((_QWORD *)&v129 + 1))
  {
    v10 = *(_QWORD *)(v129 + 8);
    if ((*(_QWORD *)&v9 & (*(_QWORD *)&v9 - 1)) != 0)
    {
      if (v10 >= *(_QWORD *)&v9)
        v10 %= *(_QWORD *)&v9;
    }
    else
    {
      v10 &= *(_QWORD *)&v9 - 1;
    }
    *((_QWORD *)v8 + v10) = &v92;
    v129 = 0uLL;
  }
  v94 = v131;
  v95 = v132[0];
  memset(v132, 0, 24);
  v131 = 0uLL;
  v96 = *(_OWORD *)&v132[1];
  sub_20C20003C((uint64_t *)&v131);
  v11 = (_QWORD *)v129;
  if ((_QWORD)v129)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      sub_20C39D89C((uint64_t)(v11 + 2));
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = __p[0];
  __p[0] = 0;
  if (v13)
    operator delete(v13);
  sub_20C39CB10(v127);
  if (v125 == v124)
  {
    v14 = 4;
  }
  else
  {
    if (!v125)
      goto LABEL_16;
    v14 = 5;
    v5 = v125;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v14))(v5);
LABEL_16:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v109);
  v89[0] = 0;
  v89[1] = 0;
  v88 = (void ***)v89;
  v110 = 0;
  v109 = (void **)sub_20C200D44(&v94, a2);
  v15 = sub_20C200DAC((uint64_t)&v109);
  for (i = v109; i != (void **)v15; v109 = i)
  {
    v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)i[1];
    v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)i[2];
    if (v18 != v17)
    {
      do
      {
        sub_20BFD72BC((uint64_t **)&v88, v89, v18, v18);
        v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 8);
      }
      while (v18 != v17);
      i = v109;
    }
    i = (void **)i[5];
    if (!i)
      i = (void **)sub_20C200DAC((uint64_t)&v109);
  }
  v19 = (uint64_t *)v88;
  if (v88 == v89)
    goto LABEL_110;
  v80 = a3 + 9;
  v79 = (uint64_t)(a3 + 11);
  v75 = (uint64_t)(a3 + 14);
  v76 = a3 + 12;
  do
  {
    if (v91)
    {
      v20 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v19 + 8)+ ((*((unsigned int *)v19 + 8)+ (unint64_t)*((unsigned int *)v19 + 7)+ (*((unsigned int *)v19 + 8) + (unint64_t)*((unsigned int *)v19 + 7))* (*((unsigned int *)v19 + 8) + (unint64_t)*((unsigned int *)v19 + 7))) >> 1)));
      v21 = (uint8x8_t)vcnt_s8(v91);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v20;
        if (v20 >= *(_QWORD *)&v91)
          v22 = v20 % *(_QWORD *)&v91;
      }
      else
      {
        v22 = v20 & (*(_QWORD *)&v91 - 1);
      }
      v23 = (_QWORD *)*((_QWORD *)v90 + v22);
      if (v23)
      {
        for (j = (_QWORD *)*v23; j; j = (_QWORD *)*j)
        {
          v25 = j[1];
          if (v25 == v20)
          {
            if (j[2] == *(uint64_t *)((char *)v19 + 28))
            {
              v78 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 + 28);
              v64 = (uint64_t **)(j + 3);
              goto LABEL_44;
            }
          }
          else
          {
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&v91)
                v25 %= *(_QWORD *)&v91;
            }
            else
            {
              v25 &= *(_QWORD *)&v91 - 1;
            }
            if (v25 != v22)
              break;
          }
        }
      }
    }
    v109 = (void **)"usd/namespaceEditor.cpp";
    v110 = (unint64_t)"_GatherTargetListOpEdits";
    v111 = 1071;
    *(_QWORD *)&v112 = "static void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetLi"
                       "stOpEdits(const UsdStageRefPtr &, const _EditDescription &, _ProcessedEdit *)";
    BYTE8(v112) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v109, "propertySpecs", 0) & 1) == 0)
      goto LABEL_104;
    v78 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 + 28);
    v64 = 0;
LABEL_44:
    v27 = *v64;
    v26 = v64[1];
    if (*v64 != v26)
    {
      v28 = a3;
      while (1)
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v27 + 4)))
        {
LABEL_66:
          v27 = *v64;
          a3 = v28;
          goto LABEL_67;
        }
        sub_20C39C320(v27, (uint64_t (**)(_QWORD, uint64_t))v97);
        v109 = (void **)&off_24C5388F8;
        v110 = (unint64_t)a2;
        *(_QWORD *)&v112 = &v109;
        v29 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations((__int128 *)v97, (uint64_t)&v109, 0);
        v30 = (void ***)v112;
        if ((void ***)v112 == &v109)
          break;
        if ((_QWORD)v112)
        {
          v31 = 5;
LABEL_51:
          ((void (*)(void))(*v30)[v31])();
        }
        if (v29)
        {
          v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v27);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v109, v32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 2));
          v33 = v27[3];
          v110 = v33;
          if ((v33 & 7) != 0)
          {
            v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 2, v34));
            if ((v35 & 1) == 0)
              v110 &= 0xFFFFFFFFFFFFFFF8;
          }
          LOBYTE(v111) = v97[0];
          v112 = *(_OWORD *)&v97[1];
          v36 = v100;
          v113 = v98;
          v97[2] = 0;
          v98 = 0;
          v97[1] = 0;
          v114 = v99;
          v100 = 0;
          v99 = 0uLL;
          v116 = v101;
          v37 = v104;
          v115 = v36;
          v117 = v102;
          v101 = 0uLL;
          v102 = 0;
          v118 = v103;
          v103 = 0uLL;
          v104 = 0;
          v120 = v105;
          v119 = v37;
          v121 = v106;
          v105 = 0uLL;
          v106 = 0;
          v122 = v107;
          v123 = v108;
          v107 = 0uLL;
          v108 = 0;
          v38 = v28[10];
          if (v38 >= v28[11])
          {
            v39 = sub_20C3A0B98(v80, (uint64_t)&v109);
            v40 = v28;
          }
          else
          {
            sub_20C3A0CBC(v79, v28[10], (uint64_t)&v109);
            v39 = v38 + 168;
            v40 = v28;
            v28[10] = v38 + 168;
          }
          v40[10] = v39;
          v85 = (void **)&v122;
          sub_20BFD6F90(&v85);
          v85 = (void **)&v120;
          sub_20BFD6F90(&v85);
          v85 = (void **)&v118;
          sub_20BFD6F90(&v85);
          v85 = (void **)&v116;
          sub_20BFD6F90(&v85);
          v85 = (void **)&v114;
          sub_20BFD6F90(&v85);
          v85 = (void **)&v112;
          sub_20BFD6F90(&v85);
          v41 = (unsigned int *)v110;
          if ((v110 & 7) != 0)
          {
            v41 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
            do
              v42 = __ldxr(v41);
            while (__stlxr(v42 - 2, v41));
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v41, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v109);
        }
        v109 = (void **)&v107;
        sub_20BFD6F90(&v109);
        v109 = (void **)&v105;
        sub_20BFD6F90(&v109);
        v109 = (void **)&v103;
        sub_20BFD6F90(&v109);
        v109 = (void **)&v101;
        sub_20BFD6F90(&v109);
        v109 = (void **)&v99;
        sub_20BFD6F90(&v109);
        v109 = &v97[1];
        sub_20BFD6F90(&v109);
        v27 += 6;
        if (v27 == v26)
          goto LABEL_66;
      }
      v30 = &v109;
      v31 = 4;
      goto LABEL_51;
    }
LABEL_67:
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v43 = v64[1];
    v82 = v43;
    v83 = v43;
    if (v43 == v27)
      goto LABEL_103;
    while (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v43 - 2)))
    {
      sub_20C39C320(v83 - 6, (uint64_t (**)(_QWORD, uint64_t))&v109);
      v97[0] = &off_24C538978;
      v97[1] = &v82;
      v97[2] = a2;
      v98 = v97;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations((uint64_t)&v109, (uint64_t *)&v85, (uint64_t)v97);
      v44 = v98;
      if (v98 == v97)
      {
        v44 = v97;
        v45 = 4;
        goto LABEL_73;
      }
      if (v98)
      {
        v45 = 5;
LABEL_73:
        (*((void (**)(void))*v44 + v45))();
      }
      v97[0] = (char *)&v120 + 8;
      sub_20BFD6F90((void ***)v97);
      v97[0] = (char *)&v118 + 8;
      sub_20BFD6F90((void ***)v97);
      v97[0] = (char *)&v116 + 8;
      sub_20BFD6F90((void ***)v97);
      v97[0] = (char *)&v114 + 8;
      sub_20BFD6F90((void ***)v97);
      v97[0] = (char *)&v112 + 8;
      sub_20BFD6F90((void ***)v97);
      v97[0] = &v110;
      sub_20BFD6F90((void ***)v97);
      v43 = v83 - 6;
      v83 = v43;
      if (v43 == *v64)
        break;
    }
    if (v85 != v86)
    {
      v46 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8(a1);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v46, v78, (uint64_t)&v109);
      v47 = (int)v109;
      if ((v112 & 7) != 0)
      {
        v48 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
      sub_20BFD265C(&v111);
      if (v110)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v110);
      if (v47 == 3)
        v50 = "attribute";
      else
        v50 = "relationship";
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v78);
      sub_20C39C4D0((pxrInternal__aapl__pxrReserved__::SdfPath **)&v85);
      v54 = "relationship target";
      if (v47 == 3)
        v54 = "connection";
      v55 = &v82;
      if (v84 < 0)
        v55 = v82;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s at '%s' has the following %s paths [%s] which require authoring relocates to be retargeted because they are introduced by opinions from composition arcs; authoring relocates is not yet supported",
        v52,
        v53,
        v50,
        Text,
        v54,
        v55);
      v56 = a3[13];
      v57 = a3[14];
      if (v56 >= v57)
      {
        v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *v76) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v76) >> 3);
        if (2 * v61 > v60)
          v60 = 2 * v61;
        if (v61 >= 0x555555555555555)
          v62 = 0xAAAAAAAAAAAAAAALL;
        else
          v62 = v60;
        *((_QWORD *)&v112 + 1) = v75;
        if (v62)
          v63 = (void **)sub_20BDE4FF4(v75, v62);
        else
          v63 = 0;
        v65 = &v63[3 * v59];
        v109 = v63;
        v110 = (unint64_t)v65;
        *(_QWORD *)&v112 = &v63[3 * v62];
        v66 = *(_OWORD *)v97;
        v65[2] = v97[2];
        *(_OWORD *)v65 = v66;
        memset(v97, 0, sizeof(v97));
        v111 = (uint64_t)(v65 + 3);
        sub_20BDF34C0(v76, &v109);
        v67 = a3[13];
        sub_20BDF3648((uint64_t)&v109);
        v68 = SHIBYTE(v97[2]);
        a3[13] = v67;
        if (v68 < 0)
          operator delete(v97[0]);
      }
      else
      {
        v58 = *(_OWORD *)v97;
        *(void **)(v56 + 16) = v97[2];
        *(_OWORD *)v56 = v58;
        memset(v97, 0, sizeof(v97));
        a3[13] = v56 + 24;
      }
      if (v84 < 0)
        operator delete(v82);
    }
LABEL_103:
    v109 = (void **)&v85;
    sub_20BFD6F90(&v109);
LABEL_104:
    v69 = (uint64_t *)v19[1];
    if (v69)
    {
      do
      {
        v70 = v69;
        v69 = (uint64_t *)*v69;
      }
      while (v69);
    }
    else
    {
      do
      {
        v70 = (uint64_t *)v19[2];
        v71 = *v70 == (_QWORD)v19;
        v19 = v70;
      }
      while (!v71);
    }
    v19 = v70;
  }
  while (v70 != (uint64_t *)v89);
LABEL_110:
  sub_20BFD7C28((uint64_t)&v88, v89[0]);
  sub_20C20003C((uint64_t *)&v94);
  v72 = (_QWORD *)v92;
  if ((_QWORD)v92)
  {
    do
    {
      v73 = (_QWORD *)*v72;
      sub_20C39D89C((uint64_t)(v72 + 2));
      operator delete(v72);
      v72 = v73;
    }
    while (v73);
  }
  v74 = v90;
  v90 = 0;
  if (v74)
    operator delete(v74);
}

void sub_20C39BA98(_Unwind_Exception *a1)
{
  sub_20C39CA74((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPrimEditRequiresRelocates(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  void *__p[2];
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  uint64_t v52;

  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetChildrenRange(this, &v46);
  v44 = v46;
  v7 = v47;
  v8 = v48;
  v45 = v47;
  v9 = v49;
  v10 = v50;
  v12 = *((_QWORD *)&v46 + 1);
  v11 = v46;
  while (1)
  {
    if (v12 == v9 && v11 == v8 && v7 == v10)
      return;
    v43[0] = v11;
    v43[1] = v7;
    if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeSubtreeRange(a2, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43, &v39);
      v16 = v39;
      v15 = v40;
      v17 = v41;
      if (v39 != v41 || v40 != v42)
        break;
    }
LABEL_19:
    pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::increment(&v44);
    v12 = *((_QWORD *)&v44 + 1);
    v11 = v44;
    v7 = v45;
  }
  v19 = v42 - 1;
  while (1)
  {
    v20 = v15;
    v38[0] = v16;
    v38[1] = v15;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38))
    {
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38) & 1) == 0)
        break;
    }
    v15 = v20 + 1;
    if (v16 == v17 && v19 == v20)
      goto LABEL_19;
  }
  *(_BYTE *)(a4 + 129) = 1;
  if (*(_DWORD *)(a1 + 16) != 1)
  {
    sub_20BDDC0E4(__p, "The prim to move requires authoring relocates since it composes opinions introduced by ancestral composition arcs;"
      " authoring relocates is not yet supported");
    v22 = *(_QWORD *)(a4 + 8);
    v27 = *(_QWORD *)(a4 + 16);
    if (v22 >= v27)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(_QWORD *)a4) >> 3);
      v29 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(_QWORD *)a4) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v29;
      v52 = a4 + 16;
      if (v26)
        goto LABEL_39;
      v31 = 0;
      goto LABEL_42;
    }
LABEL_31:
    v28 = *(_OWORD *)__p;
    *(_QWORD *)(v22 + 16) = v37;
    *(_OWORD *)v22 = v28;
    *(_QWORD *)(a4 + 8) = v22 + 24;
    return;
  }
  sub_20BDDC0E4(__p, "The prim to delete must be deactivated rather than deleted since it composes opinions introduced by ancestral composition arcs; deletion via deactivation is not yet supported");
  v22 = *(_QWORD *)(a4 + 8);
  v21 = *(_QWORD *)(a4 + 16);
  if (v22 < v21)
    goto LABEL_31;
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(_QWORD *)a4) >> 3);
  v24 = v23 + 1;
  if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a4) >> 3);
  if (2 * v25 > v24)
    v24 = 2 * v25;
  if (v25 >= 0x555555555555555)
    v26 = 0xAAAAAAAAAAAAAAALL;
  else
    v26 = v24;
  v52 = a4 + 16;
  if (v26)
  {
LABEL_39:
    v31 = (char *)sub_20BDE4FF4(a4 + 16, v26);
    goto LABEL_42;
  }
  v31 = 0;
LABEL_42:
  v32 = &v31[24 * v23];
  v51[0] = v31;
  v51[1] = v32;
  v51[3] = &v31[24 * v26];
  v33 = *(_OWORD *)__p;
  *((_QWORD *)v32 + 2) = v37;
  *(_OWORD *)v32 = v33;
  __p[1] = 0;
  v37 = 0;
  __p[0] = 0;
  v51[2] = v32 + 24;
  sub_20BDF34C0((uint64_t *)a4, v51);
  v34 = *(_QWORD *)(a4 + 8);
  sub_20BDF3648((uint64_t)v51);
  v35 = SHIBYTE(v37);
  *(_QWORD *)(a4 + 8) = v34;
  if (v35 < 0)
    operator delete(__p[0]);
}

void sub_20C39BF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20BDF3648(v15 - 128);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPropEditRequiresRelocates(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v17;
  uint64_t Layers;
  uint64_t *v19;
  uint64_t *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  void *__p[2];
  uint64_t v40;
  int v41;
  int v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  uint64_t v49;

  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a1);
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeSubtreeRange(a2, a3, &v44);
  v10 = v44;
  v11 = ++v45;
  v12 = v46;
  v13 = v47;
  if (v44 != v46 || v11 != v47)
  {
    while (1)
    {
      v43[0] = v10;
      v43[1] = v11;
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
      if (!(_DWORD)result)
        goto LABEL_41;
      result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
      if ((result & 1) != 0)
        goto LABEL_41;
      Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, NameToken, &v41);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v41))
        break;
      v22 = 3;
LABEL_39:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
      result = (uint64_t)sub_20BFD265C(&v41);
      if (v22 != 3 && v22)
        return result;
LABEL_41:
      ++v11;
      if (v10 == v12 && v11 == v13)
        return result;
    }
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
    v17 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v17);
    v20 = *(uint64_t **)Layers;
    v19 = *(uint64_t **)(Layers + 8);
    while (1)
    {
      if (v20 == v19)
      {
        v22 = 0;
        goto LABEL_39;
      }
      v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v20);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41))break;
      ++v20;
    }
    *(_BYTE *)(a4 + 129) = 1;
    if (*((_DWORD *)a1 + 4) == 1)
    {
      sub_20BDDC0E4(__p, "The property to delete must be deactivated rather than deleted since it composes opinions introduced by ancestral composition arcs; deletion via deactivation is not yet supported");
      v24 = *(_QWORD *)(a4 + 8);
      v23 = *(_QWORD *)(a4 + 16);
      if (v24 >= v23)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(_QWORD *)a4) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(_QWORD *)a4) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = a4 + 16;
        v49 = a4 + 16;
        if (v28)
        {
LABEL_33:
          v34 = (char *)sub_20BDE4FF4(v29, v28);
          goto LABEL_36;
        }
        v34 = 0;
LABEL_36:
        v35 = &v34[24 * v25];
        v48[0] = v34;
        v48[1] = v35;
        v48[3] = &v34[24 * v28];
        v36 = *(_OWORD *)__p;
        *((_QWORD *)v35 + 2) = v40;
        *(_OWORD *)v35 = v36;
        __p[1] = 0;
        v40 = 0;
        __p[0] = 0;
        v48[2] = v35 + 24;
        sub_20BDF34C0((uint64_t *)a4, v48);
        v37 = *(_QWORD *)(a4 + 8);
        sub_20BDF3648((uint64_t)v48);
        v38 = SHIBYTE(v40);
        *(_QWORD *)(a4 + 8) = v37;
        if (v38 < 0)
          operator delete(__p[0]);
        goto LABEL_38;
      }
    }
    else
    {
      sub_20BDDC0E4(__p, "The property to move requires authoring relocates since it composes opinions introduced by ancestral composition arcs; authoring relocates is not supported for properties");
      v24 = *(_QWORD *)(a4 + 8);
      v30 = *(_QWORD *)(a4 + 16);
      if (v24 >= v30)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(_QWORD *)a4) >> 3);
        v32 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(_QWORD *)a4) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v32;
        v29 = a4 + 16;
        v49 = a4 + 16;
        if (v28)
          goto LABEL_33;
        v34 = 0;
        goto LABEL_36;
      }
    }
    v31 = *(_OWORD *)__p;
    *(_QWORD *)(v24 + 16) = v40;
    *(_OWORD *)v24 = v31;
    *(_QWORD *)(a4 + 8) = v24 + 24;
LABEL_38:
    v22 = 1;
    goto LABEL_39;
  }
  return result;
}

void sub_20C39C2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a16);
  _Unwind_Resume(a1);
}

void sub_20C39C320(uint64_t *a1@<X0>, uint64_t (**a2)(_QWORD, uint64_t)@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  uint64_t Identifier;
  const char *v9;
  const char *Text;
  unint64_t v11;
  const char *v12;
  _QWORD v13[4];
  char v14;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)a2);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2);
  v6 = a1 + 3;
  if ((sub_20C3A0504(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 3), a2) & 1) == 0)
  {
    v13[0] = "usd/namespaceEditor.cpp";
    v13[1] = "GetTargetListOp";
    v13[2] = 79;
    v13[3] = "SdfPathListOp pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PropertySpecWithAuthoredTargetsInfo"
             "::GetTargetListOp() const";
    v14 = 0;
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
    if (*(char *)(Identifier + 23) >= 0)
      v9 = (const char *)Identifier;
    else
      v9 = *(const char **)Identifier;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v5);
    v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0)
        v12 = *(const char **)v12;
    }
    else
    {
      v12 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec at site @%s@<%s> is expected to have a path list op for field %s", v9, Text, v12);
  }
}

void sub_20C39C40C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20BFD6A50(v1);
  _Unwind_Resume(a1);
}

void *sub_20C39C424(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  void **v5;

  v5 = (void **)(a1 + 144);
  sub_20BFD6F90(&v5);
  v5 = (void **)(a1 + 120);
  sub_20BFD6F90(&v5);
  v5 = (void **)(a1 + 96);
  sub_20BFD6F90(&v5);
  v5 = (void **)(a1 + 72);
  sub_20BFD6F90(&v5);
  v5 = (void **)(a1 + 48);
  sub_20BFD6F90(&v5);
  v5 = (void **)(a1 + 24);
  sub_20BFD6F90(&v5);
  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v2 &= 0xFFFFFFFFFFFFFFF8;
    do
      v3 = __ldxr((unsigned int *)v2);
    while (__stlxr(v3 - 2, (unsigned int *)v2));
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)a1);
}

uint64_t sub_20C39C4D0(pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  sub_20C0D84C0(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C39C584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39C598(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  sub_20C20003C((uint64_t *)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C39D89C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20C39C5FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t v10;
  const char *v11;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t Identifier;
  const char *v15;
  void *__p;
  char v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  v1 = *a1;
  v2 = *(uint64_t **)(*a1 + 48);
  v3 = *(uint64_t **)(*a1 + 56);
  if (v2 == v3)
    return 1;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 120);
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(v1 + 24);
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v4)
      && (pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimInLayer((uint64_t)v2, (uint64_t)v4) & 1) == 0)
    {
      v18 = "usd/namespaceEditor.cpp";
      v19 = "operator()";
      v20 = 1221;
      v21 = "auto pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()::(anonymous class)::operator()() const";
      v22 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v4);
      v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v2);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
      if (*(char *)(Identifier + 23) >= 0)
        v15 = (const char *)Identifier;
      else
        v15 = *(const char **)Identifier;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find or create new parent spec at path '%s' on layer '%s' which is necessary to apply edits. The edit will be incomplete.", Text, v15);
      return 0;
    }
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v2);
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(v6, v5))
      break;
    v2 += 2;
    if (v2 == v3)
      return 1;
  }
  v18 = "usd/namespaceEditor.cpp";
  v19 = "operator()";
  v20 = 1231;
  v21 = "auto pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()::(anonymous class)::operator()() const";
  v22 = 0;
  p_p = (const char *)&__p;
  sub_20C3A07AC((uint64_t)v5);
  if (v17 < 0)
    p_p = (const char *)__p;
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v2);
  v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
  if (*(char *)(v10 + 23) >= 0)
    v11 = (const char *)v10;
  else
    v11 = *(const char **)v10;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to apply batch edit '%s' on layer '%s' which is necessary to apply edits. The edit will be incomplete.", p_p, v11);
  if (v17 < 0)
    operator delete(__p);
  return 0;
}

void sub_20C39C77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C39C79C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL8 v5;
  unsigned int *v7[3];

  v7[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v7[1] = (unsigned int *)&off_24C5249C8;
  sub_20BFD86E0(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C39C828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C39C844(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        sub_20C39C8C8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_20C39C8C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  void **v6;

  v6 = (void **)(a2 + 144);
  sub_20BFD6F90(&v6);
  v6 = (void **)(a2 + 120);
  sub_20BFD6F90(&v6);
  v6 = (void **)(a2 + 96);
  sub_20BFD6F90(&v6);
  v6 = (void **)(a2 + 72);
  sub_20BFD6F90(&v6);
  v6 = (void **)(a2 + 48);
  sub_20BFD6F90(&v6);
  v6 = (void **)(a2 + 24);
  sub_20BFD6F90(&v6);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 7) != 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
    do
      v4 = __ldxr((unsigned int *)v3);
    while (__stlxr(v4 - 2, (unsigned int *)v3));
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v3, (pxrInternal__aapl__pxrReserved__::SdfSpec *)a2);
}

uint64_t sub_20C39C974(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = sub_20C137014(a1, a2);
  }
  else
  {
    sub_20C13711C(v3, *(_DWORD **)(v3 - 8), a2);
    result = v5 + 20;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_20C39C9C4(uint64_t a1)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t *v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__ *v6;
  unint64_t v7;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16)))
  {
    v3 = sub_20C3734F4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPathInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)v3, v4);
  }
  else
  {
    v6 = *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
    if (!v6 || (v7 = *((_QWORD *)v6 + 7), (v7 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v6, v2);
      v7 = *((_QWORD *)v6 + 7);
    }
    return (v7 >> 12) & 1;
  }
}

unint64_t sub_20C39CA24(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v3 = *(unint64_t **)(v2 + 24);
  v4 = atomic_load(v3 + 7);
  if (v4)
    return v4;
  else
    return pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v3);
}

void sub_20C39CA74(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  sub_20C20003C((uint64_t *)(a1 + 440));
  v2 = *(_QWORD **)(a1 + 416);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C39D89C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v4)
    operator delete(v4);
  sub_20C39CB10((tbb::internal **)(a1 + 376));
  v5 = *(_QWORD **)(a1 + 360);
  if (v5 == (_QWORD *)(a1 + 336))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 336);
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)a1);
}

tbb::internal **sub_20C39CB10(tbb::internal **a1)
{
  tbb::internal *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v11;
  int v12;
  void *v13[3];
  _QWORD **v14;
  _QWORD *v15[2];

  *a1 = (tbb::internal *)off_24C538678;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v12);
  memset(v13, 0, sizeof(v13));
  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  while (1)
  {
    v2 = a1[1];
    v3 = *((_QWORD *)v2 + 16);
    __dmb(0xBu);
    v4 = *(_QWORD *)v2;
    __dmb(0xBu);
    v5 = *((_QWORD *)v2 + 16);
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = *((_QWORD *)v2 + 34);
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    sub_20C39D44C((uint64_t)a1, (uint64_t)&v11);
  }
  sub_20BFD7C28((uint64_t)&v14, v15[0]);
  sub_20C39D8D0(v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  v7 = 0;
  v8 = (uint64_t)a1[1] + 400;
  do
  {
    v9 = *(void **)(v8 + v7);
    __dmb(0xBu);
    if ((unint64_t)v9 >= 2)
    {
      (*((void (**)(tbb::internal **))*a1 + 3))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v8 + v7) = 0;
    }
    v7 += 40;
  }
  while (v7 != 320);
  *a1 = (tbb::internal *)off_24C5386E8;
  tbb::internal::NFS_Free(a1[1], v9);
  return a1;
}

void sub_20C39CC54(void *a1)
{
  sub_20BDC12F4(a1);
}

__n128 sub_20C39CC98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C5385B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C39CCD8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C5385B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C39CD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[2];

  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 256);
  v8[0] = 0;
  v8[1] = v5;
  v6 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((_BYTE *)v6 - 11) = 1;
  *v6 = &off_24C538620;
  v6[1] = v3;
  v6[2] = a2;
  v6[3] = v4 + 264;
  return (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v6 - 5))(*(v6 - 5), v6, (uint64_t)(v6 - 1));
}

uint64_t sub_20C39CD7C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538658))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C39CDB8()
{
  return &unk_24C538658;
}

uint64_t sub_20C39CDCC(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  char *v12;
  float v13;
  float v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD **v38;
  BOOL v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  unint64_t *Instance;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD **v55;
  _QWORD *v56[2];
  _QWORD v57[2];
  char v58;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51);
  v48 = *(_QWORD *)(a1 + 8);
  v49 = a1;
  v3 = atomic_load(*(unint64_t **)(a1 + 16));
  do
  {
    v50 = v3;
    v4 = *(_QWORD *)(v48 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v52);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v52 + 1);
    v53 = 0uLL;
    v54 = 0;
    v56[0] = 0;
    v56[1] = 0;
    v5 = (_QWORD *)(v4 + 416);
    v55 = v56;
    while (sub_20C39D44C(v4 + 376, (uint64_t)&v52))
    {
      v6 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v52)+ ((HIDWORD(v52)+ (unint64_t)v52+ (HIDWORD(v52) + (unint64_t)v52)* (HIDWORD(v52) + (unint64_t)v52)) >> 1)));
      v7 = *(_QWORD *)(v4 + 408);
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v1 = v6;
          if (v6 >= v7)
            v1 = v6 % v7;
        }
        else
        {
          v1 = v6 & (v7 - 1);
        }
        v9 = *(_QWORD **)(*(_QWORD *)(v4 + 400) + 8 * v1);
        if (v9)
        {
          for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
          {
            v11 = i[1];
            if (v11 == v6)
            {
              if (i[2] == v52)
                goto LABEL_75;
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= v7)
                  v11 %= v7;
              }
              else
              {
                v11 &= v7 - 1;
              }
              if (v11 != v1)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      v57[0] = v12;
      v57[1] = v4 + 416;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v6;
      sub_20BFD6E54((_DWORD *)v12 + 4, &v52);
      sub_20BFD6EA4((_DWORD *)v12 + 5, (_DWORD *)&v52 + 1);
      *(_OWORD *)(v12 + 24) = v53;
      *((_QWORD *)v12 + 5) = v54;
      v54 = 0;
      v53 = 0uLL;
      v58 = 1;
      v13 = (float)(unint64_t)(*(_QWORD *)(v4 + 424) + 1);
      v14 = *(float *)(v4 + 432);
      if (!v7 || (float)(v14 * (float)v7) < v13)
      {
        v15 = (v7 & (v7 - 1)) == 0;
        if (v7 < 3)
          v15 = 0;
        v16 = (2 * v7) | !v15;
        v17 = vcvtps_u32_f32(v13 / v14);
        if (v16 <= v17)
          prime = (int8x8_t)v17;
        else
          prime = (int8x8_t)v16;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v7 = *(_QWORD *)(v4 + 408);
        if (*(_QWORD *)&prime <= v7)
        {
          if (*(_QWORD *)&prime < v7)
          {
            v25 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 424) / *(float *)(v4 + 432));
            if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
            {
              v25 = std::__next_prime(v25);
            }
            else
            {
              v27 = 1 << -(char)__clz(v25 - 1);
              if (v25 >= 2)
                v25 = v27;
            }
            if (*(_QWORD *)&prime <= v25)
              prime = (int8x8_t)v25;
            if (*(_QWORD *)&prime >= v7)
            {
              v7 = *(_QWORD *)(v4 + 408);
            }
            else
            {
              if (prime)
                goto LABEL_32;
              v40 = *(void **)(v4 + 400);
              *(_QWORD *)(v4 + 400) = 0;
              if (v40)
                operator delete(v40);
              v7 = 0;
              *(_QWORD *)(v4 + 408) = 0;
            }
          }
        }
        else
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            sub_20BDDF5B4();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(void **)(v4 + 400);
          *(_QWORD *)(v4 + 400) = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *(int8x8_t *)(v4 + 408) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v4 + 400) + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v5;
          if (*v5)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v4 + 400) + 8 * v23) = v5;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  v30 = *(_QWORD *)(v4 + 400);
                  if (!*(_QWORD *)(v30 + 8 * v29))
                  {
                    *(_QWORD *)(v30 + 8 * v29) = v22;
                    goto LABEL_57;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)(v4 + 400) + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)(v4 + 400) + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_57:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
        }
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7)
            v1 = v6 % v7;
          else
            v1 = v6;
        }
        else
        {
          v1 = (v7 - 1) & v6;
        }
      }
      v31 = *(_QWORD **)(*(_QWORD *)(v4 + 400) + 8 * v1);
      if (v31)
      {
        *(_QWORD *)v57[0] = *v31;
        *v31 = v57[0];
      }
      else
      {
        *(_QWORD *)v57[0] = *(_QWORD *)(v4 + 416);
        *(_QWORD *)(v4 + 416) = v57[0];
        *(_QWORD *)(*(_QWORD *)(v4 + 400) + 8 * v1) = v5;
        if (*(_QWORD *)v57[0])
        {
          v32 = *(_QWORD *)(*(_QWORD *)v57[0] + 8);
          if ((v7 & (v7 - 1)) != 0)
          {
            if (v32 >= v7)
              v32 %= v7;
          }
          else
          {
            v32 &= v7 - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v4 + 400) + 8 * v32) = v57[0];
        }
      }
      v57[0] = 0;
      ++*(_QWORD *)(v4 + 424);
      sub_20C39D858((uint64_t)v57);
LABEL_75:
      v33 = v55;
      if (v55 != v56)
      {
        do
        {
          v34 = (uint64_t *)sub_20C1FFC20(v4 + 440, (_DWORD *)v33 + 7);
          v35 = v34;
          v1 = v34[1];
          if (v1 >= v34[2])
          {
            v36 = sub_20BFD7890(v34, &v52);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)v34[1], &v52);
            sub_20BFD6EA4((_DWORD *)(v1 + 4), (_DWORD *)&v52 + 1);
            v36 = v1 + 8;
          }
          v35[1] = v36;
          v37 = v33[1];
          if (v37)
          {
            do
            {
              v38 = (_QWORD **)v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD **)v33[2];
              v39 = *v38 == v33;
              v33 = v38;
            }
            while (!v39);
          }
          v33 = v38;
        }
        while (v38 != v56);
      }
    }
    sub_20BFD7C28((uint64_t)&v55, v56[0]);
    sub_20C39D8D0((void **)&v53);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
    sub_20BFD265C(&v52);
    v41 = *(unint64_t **)(v49 + 16);
    while (1)
    {
      v42 = __ldaxr(v41);
      if (v42 != v50)
        break;
      if (!__stlxr(0, v41))
      {
        v43 = 1;
        goto LABEL_100;
      }
    }
    v43 = 0;
    __clrex();
LABEL_100:
    v3 = v42;
  }
  while (!v43);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v45 = v51;
  v46 = atomic_load(Instance + 18);
  if (v45 < v46
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v51, *(_QWORD *)(v49 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51);
  return 0;
}

void sub_20C39D3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C39D44C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  void **v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  void **v38;
  uint64_t v40;
  int *v41;
  _BOOL4 v42;
  unint64_t *v43;
  _BYTE *v45;

  v2 = (_QWORD *)a1;
  v3 = *(unint64_t **)(a1 + 8);
  v38 = (void **)(a2 + 8);
  v40 = a2 + 32;
  v41 = (int *)(a2 + 4);
  while (1)
  {
    v4 = *v3;
    __dmb(0xBu);
    v5 = v3[16];
    __dmb(0xBu);
    v6 = v5 - v4;
    v7 = v6 > 0;
LABEL_3:
    if (v6 < 1)
      break;
    do
    {
      while (1)
      {
        v8 = __ldaxr(v3);
        if (v8 == v4)
          break;
        __clrex();
        do
          v9 = __ldxr(v3);
        while (__stxr(v9, v3));
        if (v9 != v4)
        {
          v10 = v3[16];
          __dmb(0xBu);
          v6 = v10 - v9;
          v4 = v9;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v4 + 1, v3));
    v42 = v7;
    v11 = (3 * (_BYTE)v4) & 7;
    v12 = &v3[5 * ((3 * v4) & 7)];
    v13 = v4 & 0xFFFFFFFFFFFFFFF8;
    v14 = v12 + 49;
    v15 = v12[49];
    __dmb(0xBu);
    if (v15 != (v4 & 0xFFFFFFFFFFFFFFF8))
    {
      while (1)
      {
        v20 = *v14;
        __dmb(0xBu);
        if (v20 == v13)
          break;
        sched_yield();
      }
    }
    v16 = &v3[5 * ((3 * v4) & 7)];
    v17 = v16[51];
    __dmb(0xBu);
    if (v17 == v13)
    {
      v18 = (uint64_t *)(v16 + 51);
      while (1)
      {
        v19 = *v18;
        __dmb(0xBu);
        if (v19 != v13)
          break;
        sched_yield();
      }
    }
    v21 = v12 + 48;
    v22 = (unint64_t *)v12[48];
    __dmb(0xBu);
    v23 = v2[1];
    v24 = *(_QWORD *)(v23 + 256) - 1;
    v25 = v24 & (v4 >> 3);
    if (v25 == v24)
      v26 = v22;
    else
      v26 = 0;
    v27 = (1 << v25) & v22[1];
    if (v27)
    {
      v43 = v21;
      v28 = v22 + 2;
      v29 = (int *)&v22[7 * v25 + 2];
      sub_20BFD3EBC((int *)a2, v29);
      sub_20BFD3F10(v41, v29 + 1);
      if (*(_QWORD *)(a2 + 8))
      {
        sub_20C39D724(v38);
        operator delete(*v38);
        *v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
      }
      v30 = (void **)&v28[7 * v25];
      v31 = *(_OWORD *)++v30;
      *(_OWORD *)(a2 + 8) = v31;
      *(_QWORD *)(a2 + 24) = v30[2];
      *v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
      sub_20C39D7F0(v40, v30 + 3);
      sub_20BFD7C28((uint64_t)(v30 + 3), v30[4]);
      sub_20C39D8D0(v30);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v29 + 1);
      sub_20BFD265C(v29);
      v2 = (_QWORD *)a1;
      v21 = v43;
    }
    else
    {
      v32 = (unint64_t *)(v23 + 272);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
    }
    v34 = v13 + 8;
    if ((unint64_t)v26 < 2)
    {
      __dmb(0xBu);
      *v14 = v34;
      if (v27)
        return v42;
    }
    else
    {
      sub_20BEB3FEC((uint64_t)&v45, (uint64_t)&v3[5 * v11 + 52]);
      v35 = *v26;
      __dmb(0xBu);
      *v21 = v35;
      if (v35 <= 1)
      {
        __dmb(0xBu);
        v3[5 * v11 + 50] = 0;
      }
      v36 = v45;
      if (v45)
      {
        __dmb(0xBu);
        *v36 = 0;
      }
      __dmb(0xBu);
      *v14 = v34;
      (*(void (**)(_QWORD *, unint64_t *))(*v2 + 24))(v2, v26);
      if (v27)
        return v42;
    }
  }
  return 0;
}

_QWORD *sub_20C39D724(_QWORD *result)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;

  v1 = result;
  v3 = *result;
  for (i = result[1]; i != v3; result = (_QWORD *)sub_20C39D76C(i))
    i -= 48;
  v1[1] = v3;
  return result;
}

uint64_t sub_20C39D76C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v6 = (unsigned int *)(result + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C39D7F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_20BFD7C28(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t sub_20C39D858(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C39D89C((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

_DWORD *sub_20C39D89C(uint64_t a1)
{
  sub_20C39D8D0((void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void **sub_20C39D8D0(void **a1)
{
  if (*a1)
  {
    sub_20C39D724(a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_20C39D908(tbb::internal **a1)
{
  tbb::internal **v1;

  v1 = sub_20C39CB10(a1);
  operator delete(v1);
}

uint64_t sub_20C39D91C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 56 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C39D938(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 56 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C39D954(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C39D990(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

_DWORD *sub_20C39D9A4(uint64_t a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  tbb::task_group_context *v14;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v15;
  tbb::interface5::internal::task_base *v16;
  unint64_t v17;
  uint64_t v18;
  tbb::task_group_context *v19;
  tbb::interface5::internal::task_base *v20;
  tbb::task *v21;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v23;
  tbb::task_group_context *v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  tbb::task_group_context *v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  tbb::task_group_context *v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  tbb::task_group_context *v39;
  int v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  tbb::task_group_context *v44;
  int v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  tbb::task_group_context *v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  tbb::task_group_context *v54;
  int v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  tbb::task_group_context *v59;
  int v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  tbb::task_group_context *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  tbb::task_group_context *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher **v72;
  tbb::task_group_context *v73;
  int v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  tbb::task_group_context *v78;
  int v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  tbb::task_group_context *v83;
  int v84;
  int v85;
  __int128 v86;
  uint64_t v87;
  tbb::task_group_context *v88;
  int v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  tbb::task_group_context *v93;
  int v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  tbb::task_group_context *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  _QWORD v102[2];
  tbb::interface5::internal::task_base *v103;
  int v104;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)v1;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8(*(uint64_t **)(v1 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v3, (uint64_t)&v104);
  UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v4);
  v7 = *(_QWORD *)UsdPrimDefaultPredicate;
  v6 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
  v8 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v106)
    && ((v7 & 0x2000) != 0 || (v6 & 0x2000) == 0))
  {
    v7 |= 0x2000uLL;
    v6 &= ~0x2000uLL;
  }
  v98 = (tbb::task_group_context *)v7;
  v99 = v6;
  *(_QWORD *)&v100 = v8;
  sub_20C39E344((uint64_t)&v104, (uint64_t *)&v98, (uint64_t)&v34);
  if ((v108 & 7) != 0)
  {
    v9 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
  sub_20BFD265C(&v106);
  if (v105)
    sub_20C35C614(v105);
  v29 = v34;
  sub_20BFD6E54(&v30, &v35);
  sub_20BFD6EA4(&v31, &v36);
  v32 = v37;
  v33 = v38;
  v24 = v39;
  sub_20BFD6E54(&v25, &v40);
  sub_20BFD6EA4(&v26, &v41);
  v27 = v42;
  v28 = v43;
  v23 = v2;
  v104 = 0;
  v109 = 65539;
  v110 = 55;
  tbb::task_group_context::init((uint64_t)&v104, v11, v12, v13);
  v49 = v29;
  sub_20BFD6E54(&v50, &v30);
  sub_20BFD6EA4(&v51, &v31);
  v52 = v32;
  v53 = v33;
  v44 = v24;
  sub_20BFD6E54(&v45, &v25);
  sub_20BFD6EA4(&v46, &v26);
  v47 = v27;
  v48 = v28;
  v59 = v49;
  sub_20BFD6E54(&v60, &v50);
  sub_20BFD6EA4(&v61, &v51);
  v62 = v52;
  v63 = v53;
  v54 = v44;
  sub_20BFD6E54(&v55, &v45);
  sub_20BFD6EA4(&v56, &v46);
  v57 = v47;
  v58 = v48;
  v72 = &v23;
  v68 = v59;
  sub_20BFD6E54(&v69, &v60);
  sub_20BFD6EA4((_DWORD *)&v69 + 1, &v61);
  v70 = v62;
  v71 = v63;
  v64 = v54;
  sub_20BFD6E54(&v65, &v55);
  sub_20BFD6EA4((_DWORD *)&v65 + 1, &v56);
  v66 = v57;
  v67 = v58;
  v14 = v68;
  if (v68 != v64)
    goto LABEL_14;
  v15 = v2;
  if (v69 != v65)
    goto LABEL_14;
  if ((sub_20C39FA44((uint64_t)&v70, (uint64_t)&v66) & 1) == 0)
  {
    v14 = v68;
LABEL_14:
    v78 = v14;
    sub_20BFD6E54(&v79, &v69);
    sub_20BFD6EA4(&v80, (_DWORD *)&v69 + 1);
    v81 = v70;
    v82 = v71;
    v73 = v64;
    sub_20BFD6E54(&v74, &v65);
    sub_20BFD6EA4(&v75, (_DWORD *)&v65 + 1);
    v76 = v66;
    v77 = v67;
    v88 = v78;
    sub_20BFD6E54(&v89, &v79);
    sub_20BFD6EA4(&v90, &v80);
    v91 = v81;
    v92 = v82;
    v83 = v73;
    sub_20BFD6E54(&v84, &v74);
    sub_20BFD6EA4(&v85, &v75);
    v86 = v76;
    v87 = v77;
    v102[0] = off_24C538768;
    v98 = (tbb::task_group_context *)&v104;
    v16 = (tbb::interface5::internal::task_base *)tbb::internal::allocate_root_with_context_proxy::allocate(&v98, 8uLL);
    *((_BYTE *)v16 - 11) = 1;
    *(_QWORD *)v16 = &unk_24C5164A8;
    v103 = v16;
    v102[1] = &v72;
    v17 = tbb::internal::allocate_child_proxy::allocate(v16, 0x60uLL);
    v98 = v88;
    sub_20BFD6E54(&v99, &v89);
    sub_20BFD6EA4((_DWORD *)&v99 + 1, &v90);
    v100 = v91;
    v101 = v92;
    v93 = v83;
    sub_20BFD6E54(&v94, &v84);
    sub_20BFD6EA4(&v95, &v85);
    v96 = v86;
    v97 = v87;
    *(_BYTE *)(v17 - 11) = 1;
    *(_QWORD *)v17 = off_24C538820;
    *(_QWORD *)(v17 + 8) = v98;
    sub_20BFD6E54((_DWORD *)(v17 + 16), &v99);
    sub_20BFD6EA4((_DWORD *)(v17 + 20), (_DWORD *)&v99 + 1);
    v18 = v101;
    *(_OWORD *)(v17 + 24) = v100;
    v19 = v93;
    *(_QWORD *)(v17 + 40) = v18;
    *(_QWORD *)(v17 + 48) = v19;
    sub_20BFD6E54((_DWORD *)(v17 + 56), &v94);
    sub_20BFD6EA4((_DWORD *)(v17 + 60), &v95);
    *(_OWORD *)(v17 + 64) = v96;
    *(_QWORD *)(v17 + 80) = v97;
    *(_QWORD *)(v17 + 88) = v102;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v95);
    sub_20BFD265C(&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
    sub_20BFD265C(&v99);
    v20 = v103;
    *((_QWORD *)v103 - 3) = 2;
    (*(void (**)(_QWORD, tbb::interface5::internal::task_base *, unint64_t))(**((_QWORD **)v20 - 5)
                                                                                             + 8))(*((_QWORD *)v20 - 5), v20, v17);
    v102[0] = off_24C538768;
    tbb::interface5::internal::task_base::destroy(v103, v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85);
    v15 = v2;
    sub_20BFD265C(&v84);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v90);
    sub_20BFD265C(&v89);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
    sub_20BFD265C(&v74);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
    sub_20BFD265C(&v79);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
  sub_20BFD265C(&v65);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
  sub_20BFD265C(&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
  sub_20BFD265C(&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
  sub_20BFD265C(&v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
  sub_20BFD265C(&v50);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v104);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_20BFD265C(&v30);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_20BFD265C(&v40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  return sub_20BFD265C(&v35);
}

void sub_20C39E114(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

void sub_20C39E304()
{
  JUMPOUT(0x20C39E2F4);
}

uint64_t sub_20C39E310(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return a1;
}

_DWORD *sub_20C39E344@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v6;
  uint64_t v8;
  int v9;
  _DWORD v10[7];
  _BYTE v11[8];
  int v12;
  _DWORD v13[7];
  int v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v16;
  int v17;
  int v18;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v19;

  v19 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(a1 + 8);
  v6 = v19;
  sub_20BFD6E54(&v17, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v18, (_DWORD *)(a1 + 20));
  v16 = v6;
  sub_20BFD6E54(&v14, &v17);
  sub_20BFD6EA4(&v15, &v18);
  if (sub_20C39E4C4((pxrInternal__aapl__pxrReserved__::UsdStage ***)&v19, &v17, 0, a2))
  {
    while (sub_20C39E5EC(&v16, &v14, 0, a2))
      ;
  }
  sub_20C39E8FC((uint64_t)v11, &v19, &v17, (__int128 *)a2);
  sub_20C39E8FC((uint64_t)&v8, &v16, &v14, (__int128 *)a2);
  sub_20C39EA14(a3, (uint64_t)v11, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
  sub_20BFD265C(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_20BFD265C(&v17);
}

void sub_20C39E494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20C39E310((uint64_t)va);
  sub_20BFD1A18((int *)va1);
  sub_20BFD1A18((_DWORD *)(v6 - 64));
  _Unwind_Resume(a1);
}

BOOL sub_20C39E4C4(pxrInternal__aapl__pxrReserved__::UsdStage ***a1, int *a2, pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***a3, uint64_t *a4)
{
  _BOOL4 v8;
  pxrInternal__aapl__pxrReserved__::UsdStage **v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  int v14;
  int v15;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if ((*((_BYTE *)*a1 + 57) & 1) != 0)
  {
    v9 = *(pxrInternal__aapl__pxrReserved__::UsdStage ***)(pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(*a1)
                                                         + 32);
    if (v9)
      goto LABEL_6;
    return 0;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdStage **)(*a1)[4];
  if (!v9)
    return 0;
  if (!v8)
  {
    v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
    v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
  else
    v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*a1 + 2);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2));
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v11, NameToken, &v14);
  sub_20BFD3EBC(a2, &v14);
  sub_20BFD3F10(a2 + 1, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  v10 = 1;
LABEL_10:
  *a1 = v9;
  return sub_20C37F8B8(a4, (uint64_t)a1, v10)
      || !sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, a2, a3, a4);
}

BOOL sub_20C39E5EC(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****a1, int *a2, pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***a3, uint64_t *a4)
{
  _BOOL4 v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v17;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***PrimDataAtPathOrInPrototype;
  int *v19;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  BOOL v21;
  const char *Text;
  const char *v24;
  char *v25;
  char *v26;
  _QWORD v27[4];
  char v28;
  int v29;
  int v30;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v31;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  v9 = (unint64_t)(*a1)[5];
  if ((v9 & 7) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  v31 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v10;
  if (v10)
    v11 = v10 == (_QWORD)a3;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = v8;
    do
    {
      v13 = sub_20C37F8B8(a4, (uint64_t)&v31, v12);
      v10 = (unint64_t)v31;
      if (v13)
        break;
      *a1 = v31;
      v14 = *(_QWORD *)(v10 + 40);
      v10 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v31 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v10;
    }
    while (v10 && v10 != (_QWORD)a3);
  }
  if (!v10)
  {
    v16 = (unint64_t)(*a1)[5];
    if ((v16 & 7) != 0)
      v10 = v16 & 0xFFFFFFFFFFFFFFF8;
    else
      v10 = 0;
  }
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v10;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    if (*a1 == a3)
    {
LABEL_30:
      v27[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
      sub_20BFD3EBC(a2, (int *)v27);
      sub_20BFD3F10(a2 + 1, (int *)v27 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
      v19 = (int *)v27;
LABEL_32:
      sub_20BFD265C(v19);
      goto LABEL_33;
    }
    if (*a1 == v31)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v29);
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a1 + 2));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, NameToken, v27);
      sub_20BFD3EBC(a2, (int *)v27);
      sub_20BFD3F10(a2 + 1, (int *)v27 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
      sub_20BFD265C(v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      v19 = &v29;
      goto LABEL_32;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v27);
    sub_20BFD3EBC(a2, (int *)v27);
    sub_20BFD3F10(a2 + 1, (int *)v27 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
    sub_20BFD265C(v27);
    v17 = *a1;
    if (!*a1
      || (*((_BYTE *)v17 + 57) & 0x10) == 0
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 + 2)))
    {
      goto LABEL_33;
    }
    PrimDataAtPathOrInPrototype = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    *a1 = PrimDataAtPathOrInPrototype;
    if (PrimDataAtPathOrInPrototype)
    {
LABEL_29:
      if (PrimDataAtPathOrInPrototype[2] != *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)a2)
        goto LABEL_33;
      goto LABEL_30;
    }
    v27[0] = "usd/primData.h";
    v27[1] = "Usd_MoveToNextSiblingOrParent";
    v27[2] = 576;
    v27[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent(PrimDataPtr &, SdfPath &, PrimDataPtr,"
             " const Usd_PrimFlagsPredicate &) [PrimDataPtr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
    v28 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    v26 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v24, v25, Text);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v27, "p", v26))
    {
      PrimDataAtPathOrInPrototype = *a1;
      goto LABEL_29;
    }
  }
LABEL_33:
  if (v31)
    v21 = 1;
  else
    v21 = *a1 == 0;
  return !v21;
}

void sub_20C39E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39E8FC(uint64_t a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  int *v7;
  __int128 v8;
  uint64_t v10;

  *(_QWORD *)a1 = *a2;
  v7 = (int *)(a1 + 8);
  sub_20BFD6E54((_DWORD *)(a1 + 8), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 12), a3 + 1);
  v8 = *a4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v8;
  if (*(_QWORD *)a1
    && !sub_20C37F7E8((uint64_t *)(a1 + 16), a1, v7)
    && sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, v7, 0, (uint64_t *)(a1 + 16)))
  {
    *(_QWORD *)a1 = 0;
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
    sub_20BFD3EBC(v7, (int *)&v10);
    sub_20BFD3F10((int *)(a1 + 12), (int *)&v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_20BFD265C(&v10);
  }
  return a1;
}

void sub_20C39EA00(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39EA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_20BFD6E54((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  v6 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)a3;
  sub_20BFD6E54((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 12));
  v7 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t sub_20C39EA9C(_QWORD **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v2;
  unint64_t v3;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v8;
  char HasField;
  char v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  int SpecType;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  _QWORD *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  _QWORD *v18;
  char v19;
  char v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t Identifier;
  int v27;
  const char *v28;
  const char *Text;
  const char *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  _BOOL4 v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t prime;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD **v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *i;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  _QWORD *v82;
  void *v83;
  uint64_t *j;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _BYTE *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v112;
  pxrInternal__aapl__pxrReserved__::SdfPath *v114;
  const pxrInternal__aapl__pxrReserved__::TfToken *v115;
  uint64_t v116;
  _QWORD v117[2];
  _OWORD v118[2];
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  const char *v123;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v124[3];
  _BYTE v125[24];
  const pxrInternal__aapl__pxrReserved__::SdfPath *v126[3];
  const pxrInternal__aapl__pxrReserved__::SdfPath *v127[3];
  const pxrInternal__aapl__pxrReserved__::SdfPath *v128[3];
  uint64_t v129;
  int v130;
  int v131;
  const pxrInternal__aapl__pxrReserved__::TfToken *v132;
  const pxrInternal__aapl__pxrReserved__::TfToken *v133;
  uint64_t v134;
  _BYTE v135[16];
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  __int128 v140;
  __int128 v141;
  float v142;
  __int128 v143;
  char v144;

  v112 = (_QWORD *)**a1;
  v140 = 0u;
  v141 = 0u;
  v142 = 1.0;
  v2 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_20C368FF0((uint64_t)a2, a2);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v135, v2, 1);
  v3 = (unint64_t)&v121 + 8;
  while ((_QWORD)v136 != v137 || *((_QWORD *)&v136 + 1) != v138)
  {
    v5 = v139;
    v121 = v136;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v121);
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v7 = (_QWORD *)sub_20C0EEAF8(v5);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v8)
      v8 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    LOWORD(v123) = 0;
    *((_QWORD *)&v121 + 1) = &v132;
    v122 = (uint64_t)&stru_24C51BCF0;
    *(_QWORD *)&v121 = &unk_24C528DB0;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, Path, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v8 + 40), (uint64_t (***)(_QWORD, uint64_t))&v121);
    if ((_BYTE)v123)
      v10 = 0;
    else
      v10 = HasField;
    if ((v10 & 1) != 0)
    {
      v12 = v132;
      v11 = v133;
      if (v132 != v133)
      {
        v114 = Path;
        v115 = v133;
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v12, &v130);
          v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v5);
          SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v130);
          v129 = 0;
          if (SpecType == 8)
            break;
          if (SpecType == 1)
          {
            v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v15)
              v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v16 = (_QWORD *)((char *)v15 + 56);
            goto LABEL_22;
          }
          *(_QWORD *)&v121 = "usd/namespaceEditor.cpp";
          *((_QWORD *)&v121 + 1) = "_VisitPrim";
          v122 = 186;
          v123 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_TargetingPropertyDependencyCollector::_V"
                 "isitPrim(const UsdPrim &)";
          LOBYTE(v124[0]) = 0;
          v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v5);
          Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v25);
          v27 = *(char *)(Identifier + 23);
          v28 = *(const char **)Identifier;
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130);
          if (v27 >= 0)
            v30 = (const char *)Identifier;
          else
            v30 = v28;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v121, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec type for property child of at site @%s@<%s> is not an attribute or relationship", v30, Text);
          v11 = v115;
LABEL_138:
          if ((v129 & 7) != 0)
          {
            v80 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v81 = __ldxr(v80);
            while (__stlxr(v81 - 2, v80));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v131);
          sub_20BFD265C(&v130);
          v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v12 + 8);
          if (v12 == v11)
            goto LABEL_152;
        }
        v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v17)
          v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v16 = (_QWORD *)((char *)v17 + 424);
LABEL_22:
        sub_20BF32220(&v129, v16);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v121);
        v18 = (_QWORD *)sub_20C0EEAF8(v5);
        *((_QWORD *)&v118[0] + 1) = &v121;
        *(_QWORD *)&v118[1] = &stru_24C5249B8;
        WORD4(v118[1]) = 0;
        *(_QWORD *)&v118[0] = &unk_24C527D98;
        v19 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v18, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v129, (uint64_t (***)(_QWORD, uint64_t))v118);
        if (BYTE8(v118[1]))
          v20 = 0;
        else
          v20 = v19;
        if ((v20 & 1) != 0)
        {
          v21 = sub_20C3734F4((uint64_t)a2);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, v12, (int *)v117);
          v120 = 0;
          v119 = 0u;
          memset(v118, 0, sizeof(v118));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v118);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v118 + 1);
          memset((char *)v118 + 8, 0, 24);
          *((_QWORD *)&v119 + 1) = 0;
          v120 = 0;
          *(_QWORD *)&v119 = (char *)&v119 + 8;
          v22 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v117[0])+ ((HIDWORD(v117[0])+ (unint64_t)LODWORD(v117[0])+ (HIDWORD(v117[0]) + (unint64_t)LODWORD(v117[0]))* (HIDWORD(v117[0]) + (unint64_t)LODWORD(v117[0]))) >> 1)));
          v23 = *((_QWORD *)&v140 + 1);
          if (*((_QWORD *)&v140 + 1))
          {
            v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v140 + 8));
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              v3 = v22;
              if (v22 >= *((_QWORD *)&v140 + 1))
                v3 = v22 % *((_QWORD *)&v140 + 1);
            }
            else
            {
              v3 = v22 & (*((_QWORD *)&v140 + 1) - 1);
            }
            v31 = *(_QWORD **)(v140 + 8 * v3);
            if (v31)
            {
              v32 = (_QWORD *)*v31;
              if (*v31)
              {
                do
                {
                  v33 = v32[1];
                  if (v33 == v22)
                  {
                    if (v32[2] == v117[0])
                    {
                      v82 = 0;
                      v3 = (unint64_t)&v121 + 8;
                      goto LABEL_104;
                    }
                  }
                  else
                  {
                    if (v24.u32[0] > 1uLL)
                    {
                      if (v33 >= *((_QWORD *)&v140 + 1))
                        v33 %= *((_QWORD *)&v140 + 1);
                    }
                    else
                    {
                      v33 &= *((_QWORD *)&v140 + 1) - 1;
                    }
                    if (v33 != v3)
                      break;
                  }
                  v32 = (_QWORD *)*v32;
                }
                while (v32);
              }
            }
          }
          v34 = operator new(0x50uLL);
          *(_QWORD *)&v143 = v34;
          *((_QWORD *)&v143 + 1) = &v141;
          *v34 = 0;
          v34[1] = v22;
          sub_20BFD38A4((_DWORD *)v34 + 4, v117);
          sub_20BFD38DC((_DWORD *)v34 + 5, (_DWORD *)v117 + 1);
          sub_20BFD38A4((_DWORD *)v34 + 6, v118);
          sub_20BFD38DC((_DWORD *)v34 + 7, (_DWORD *)v118 + 1);
          v35 = *(_OWORD *)((char *)v118 + 8);
          v36 = *((_QWORD *)&v119 + 1);
          v37 = v120;
          v34[8] = *((_QWORD *)&v119 + 1);
          v38 = (char *)(v34 + 8);
          *((_OWORD *)v34 + 2) = v35;
          v39 = *((_QWORD *)&v118[1] + 1);
          v40 = v119;
          memset((char *)v118 + 8, 0, 24);
          v34[6] = v39;
          v34[7] = v40;
          v34[9] = v37;
          if (v37)
          {
            *(_QWORD *)(v36 + 16) = v38;
            *(_QWORD *)&v119 = (char *)&v119 + 8;
            *((_QWORD *)&v119 + 1) = 0;
            v120 = 0;
          }
          else
          {
            v34[7] = v38;
          }
          v144 = 1;
          v41 = (float)(unint64_t)(*((_QWORD *)&v141 + 1) + 1);
          if (!v23 || (float)(v142 * (float)v23) < v41)
          {
            v42 = (v23 & (v23 - 1)) == 0;
            if (v23 < 3)
              v42 = 0;
            v43 = (2 * v23) | !v42;
            v44 = vcvtps_u32_f32(v41 / v142);
            if (v43 <= v44)
              prime = (int8x8_t)v44;
            else
              prime = (int8x8_t)v43;
            if (*(_QWORD *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            }
            v23 = *((_QWORD *)&v140 + 1);
            if (*(_QWORD *)&prime <= *((_QWORD *)&v140 + 1))
            {
              if (*(_QWORD *)&prime < *((_QWORD *)&v140 + 1))
              {
                v52 = vcvtps_u32_f32((float)*((unint64_t *)&v141 + 1) / v142);
                if (*((_QWORD *)&v140 + 1) < 3uLL
                  || (v53 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v140 + 8)),
                      v53.i16[0] = vaddlv_u8(v53),
                      v53.u32[0] > 1uLL))
                {
                  v52 = std::__next_prime(v52);
                }
                else
                {
                  v54 = 1 << -(char)__clz(v52 - 1);
                  if (v52 >= 2)
                    v52 = v54;
                }
                if (*(_QWORD *)&prime <= v52)
                  prime = (int8x8_t)v52;
                if (*(_QWORD *)&prime >= v23)
                {
                  v23 = *((_QWORD *)&v140 + 1);
                }
                else
                {
                  if (prime)
                    goto LABEL_61;
                  v83 = (void *)v140;
                  *(_QWORD *)&v140 = 0;
                  if (v83)
                    operator delete(v83);
                  v23 = 0;
                  *((_QWORD *)&v140 + 1) = 0;
                }
              }
            }
            else
            {
LABEL_61:
              if (*(_QWORD *)&prime >> 61)
                sub_20BDDF5B4();
              v46 = operator new(8 * *(_QWORD *)&prime);
              v47 = (void *)v140;
              *(_QWORD *)&v140 = v46;
              if (v47)
                operator delete(v47);
              v48 = 0;
              *((int8x8_t *)&v140 + 1) = prime;
              do
                *(_QWORD *)(v140 + 8 * v48++) = 0;
              while (*(_QWORD *)&prime != v48);
              v49 = (_QWORD **)v141;
              if ((_QWORD)v141)
              {
                v50 = *(_QWORD *)(v141 + 8);
                v51 = (uint8x8_t)vcnt_s8(prime);
                v51.i16[0] = vaddlv_u8(v51);
                if (v51.u32[0] > 1uLL)
                {
                  if (v50 >= *(_QWORD *)&prime)
                    v50 %= *(_QWORD *)&prime;
                }
                else
                {
                  v50 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(v140 + 8 * v50) = &v141;
                for (i = *v49; i; v50 = v56)
                {
                  v56 = i[1];
                  if (v51.u32[0] > 1uLL)
                  {
                    if (v56 >= *(_QWORD *)&prime)
                      v56 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v56 &= *(_QWORD *)&prime - 1;
                  }
                  if (v56 != v50)
                  {
                    if (!*(_QWORD *)(v140 + 8 * v56))
                    {
                      *(_QWORD *)(v140 + 8 * v56) = v49;
                      goto LABEL_86;
                    }
                    *v49 = (_QWORD *)*i;
                    *i = **(_QWORD **)(v140 + 8 * v56);
                    **(_QWORD **)(v140 + 8 * v56) = i;
                    i = v49;
                  }
                  v56 = v50;
LABEL_86:
                  v49 = (_QWORD **)i;
                  i = (_QWORD *)*i;
                }
              }
              v23 = (unint64_t)prime;
            }
            if ((v23 & (v23 - 1)) != 0)
            {
              if (v22 >= v23)
                v3 = v22 % v23;
              else
                v3 = v22;
            }
            else
            {
              v3 = (v23 - 1) & v22;
            }
          }
          v57 = *(_QWORD **)(v140 + 8 * v3);
          if (v57)
          {
            *(_QWORD *)v143 = *v57;
            *v57 = v143;
            v3 = (unint64_t)&v121 + 8;
          }
          else
          {
            *(_QWORD *)v143 = v141;
            *(_QWORD *)&v141 = v143;
            *(_QWORD *)(v140 + 8 * v3) = &v141;
            v3 = (unint64_t)&v121 + 8;
            if (*(_QWORD *)v143)
            {
              v58 = *(_QWORD *)(*(_QWORD *)v143 + 8);
              if ((v23 & (v23 - 1)) != 0)
              {
                if (v58 >= v23)
                  v58 %= v23;
              }
              else
              {
                v58 &= v23 - 1;
              }
              *(_QWORD *)(v140 + 8 * v58) = v143;
            }
          }
          v32 = (_QWORD *)v143;
          *(_QWORD *)&v143 = 0;
          ++*((_QWORD *)&v141 + 1);
          sub_20C3A06C4((uint64_t)&v143);
          v82 = (_QWORD *)*((_QWORD *)&v119 + 1);
LABEL_104:
          sub_20BFD7C28((uint64_t)&v119, v82);
          sub_20C39D8D0((void **)v118 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v118 + 1);
          sub_20BFD265C(v118);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v117 + 1);
          sub_20BFD265C(v117);
          v143 = v136;
          v117[0] = &v143;
          v117[1] = v32 + 3;
          v59 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v121 + 1;
          if (!(_BYTE)v121)
          {
            sub_20C3A0558((uint64_t)v117, v124);
            sub_20C3A0558((uint64_t)v117, v126);
            sub_20C3A0558((uint64_t)v117, v127);
            sub_20C3A0558((uint64_t)v117, v128);
            v59 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)v125;
          }
          sub_20C3A0558((uint64_t)v117, v59);
          sub_20C1034E8((uint64_t *)v118, v5);
          LODWORD(v118[1]) = v130;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v130);
          DWORD1(v118[1]) = v131;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v131);
          *((_QWORD *)&v118[1] + 1) = v129;
          v129 = 0;
          v119 = v143;
          v61 = v32[5];
          v60 = v32[6];
          if (v61 >= v60)
          {
            v63 = v32[4];
            v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - v63) >> 4);
            v65 = v64 + 1;
            if (v64 + 1 > 0x555555555555555)
              sub_20BDDF694();
            v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - v63) >> 4);
            if (2 * v66 > v65)
              v65 = 2 * v66;
            if (v66 >= 0x2AAAAAAAAAAAAAALL)
              v67 = 0x555555555555555;
            else
              v67 = v65;
            if (v67)
            {
              if (v67 > 0x555555555555555)
                sub_20BDDF5B4();
              v68 = (char *)operator new(48 * v67);
            }
            else
            {
              v68 = 0;
            }
            v69 = (uint64_t)&v68[48 * v64];
            sub_20C3A075C(v69, (uint64_t)v118);
            v71 = v32[4];
            v70 = v32[5];
            if (v70 == v71)
            {
              v73 = (void *)v32[5];
              v72 = v69;
            }
            else
            {
              v72 = v69;
              do
              {
                v72 -= 48;
                v70 -= 48;
                sub_20C3A075C(v72, v70);
              }
              while (v70 != v71);
              v73 = (void *)v32[4];
              v70 = v32[5];
            }
            v62 = v69 + 48;
            v32[4] = v72;
            v32[5] = v62;
            v32[6] = &v68[48 * v67];
            v11 = v115;
            while ((void *)v70 != v73)
            {
              v70 -= 48;
              sub_20C39D76C(v70);
            }
            if (v73)
              operator delete(v73);
            v3 = (unint64_t)&v121 + 8;
          }
          else
          {
            sub_20C3A075C(v32[5], (uint64_t)v118);
            v62 = v61 + 48;
          }
          v32[5] = v62;
          if ((BYTE8(v118[1]) & 7) != 0)
          {
            v74 = (unsigned int *)(*((_QWORD *)&v118[1] + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v75 = __ldxr(v74);
            while (__stlxr(v75 - 2, v74));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118[1] + 1);
          Path = v114;
          sub_20BFD265C(&v118[1]);
          v76 = *((_QWORD *)&v118[0] + 1);
          if (*((_QWORD *)&v118[0] + 1))
          {
            v77 = (unsigned int *)(*((_QWORD *)&v118[0] + 1) + 8);
            do
            {
              v78 = __ldxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          }
        }
        *(_QWORD *)&v118[0] = v128;
        sub_20BFD6F90((void ***)v118);
        *(_QWORD *)&v118[0] = v127;
        sub_20BFD6F90((void ***)v118);
        *(_QWORD *)&v118[0] = v126;
        sub_20BFD6F90((void ***)v118);
        *(_QWORD *)&v118[0] = v125;
        sub_20BFD6F90((void ***)v118);
        *(_QWORD *)&v118[0] = v124;
        sub_20BFD6F90((void ***)v118);
        *(_QWORD *)&v118[0] = (char *)&v121 + 8;
        sub_20BFD6F90((void ***)v118);
        goto LABEL_138;
      }
    }
LABEL_152:
    *(_QWORD *)&v121 = &v132;
    sub_20BEEB2B8((void ***)&v121);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v135);
  }
  if (*((_QWORD *)&v141 + 1))
  {
    for (j = (uint64_t *)v141; j; j = (uint64_t *)*j)
    {
      sub_20C01A074((int *)j + 6, (_DWORD *)j + 4);
      sub_20C01A0C8((int *)j + 7, (_DWORD *)j + 5);
      v85 = v112[48];
      v86 = (unint64_t *)(v85 + 128);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 + 1, v86));
      v88 = (3 * (_BYTE)v87) & 7;
      v89 = v87 & 0xFFFFFFFFFFFFFFF8;
      v90 = (*(_QWORD *)(v112[48] + 256) - 1) & (v87 >> 3);
      v116 = v85 + 40 * ((3 * (_BYTE)v87) & 7) + 384;
      if (v90)
      {
        v91 = 0;
      }
      else
      {
        v91 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v112[47] + 16))(v112 + 47);
        *v91 = 0;
        v91[1] = 0;
      }
      v92 = (unint64_t *)(v85 + 40 * v88 + 408);
      v93 = *v92;
      __dmb(0xBu);
      if (v93 != v89)
      {
        v94 = v112[48];
        sched_yield();
        v95 = *v92;
        __dmb(0xBu);
        if (v95 != v89)
        {
          v96 = (unint64_t *)(v94 + 272);
          do
          {
            if ((v95 & 1) != 0)
            {
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 + 1, v96));
              tbb::internal::throw_exception_v4(2);
            }
            sched_yield();
            v95 = *v92;
            __dmb(0xBu);
          }
          while (v95 != v89);
        }
      }
      if (v91)
      {
        sub_20BEB3FEC((uint64_t)&v121, v85 + 40 * v88 + 416);
        v98 = v85 + 40 * v88;
        v99 = *(_QWORD **)(v98 + 400);
        __dmb(0xBu);
        if ((unint64_t)v99 < 2)
        {
          __dmb(0xBu);
          v99 = (_QWORD *)v116;
        }
        *v99 = v91;
        __dmb(0xBu);
        *(_QWORD *)(v98 + 400) = v91;
        v100 = (_BYTE *)v121;
        if ((_QWORD)v121)
        {
          __dmb(0xBu);
          *v100 = 0;
        }
      }
      else
      {
        v91 = *(_QWORD **)(v85 + 40 * v88 + 400);
        __dmb(0xBu);
      }
      v101 = &v91[7 * v90];
      sub_20BFD38A4((_DWORD *)v101 + 4, (_DWORD *)j + 6);
      sub_20BFD38DC((_DWORD *)v101 + 5, (_DWORD *)j + 7);
      v101[3] = 0;
      v101[4] = 0;
      v101[5] = 0;
      *(_OWORD *)(v101 + 3) = *((_OWORD *)j + 2);
      v101[5] = j[6];
      j[4] = 0;
      j[5] = 0;
      j[6] = 0;
      v101[6] = j[7];
      v102 = v101 + 6;
      v103 = j + 8;
      v104 = j[8];
      v101[7] = v104;
      v105 = v101 + 7;
      v106 = j[9];
      v105[1] = v106;
      if (v106)
      {
        *(_QWORD *)(v104 + 16) = v105;
        j[7] = (uint64_t)v103;
        *v103 = 0;
        j[9] = 0;
      }
      else
      {
        *v102 = v105;
      }
      v91[1] |= 1 << v90;
      do
        v107 = __ldaxr(v92);
      while (__stlxr(v107 + 8, v92));
    }
    v108 = v112 + 46;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 + 1, v108));
    if (!v109)
    {
      v110 = v112[45];
      if (!v110)
        sub_20BE9E974();
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 48))(v110);
    }
  }
  return sub_20C3A0668((uint64_t)&v140);
}

void sub_20C39F81C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;

  __cxa_begin_catch(a1);
  v14 = (unint64_t *)(*(_QWORD *)(a12 + 384) + 272);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  sub_20BF3A1B0(v13, v12);
}

void sub_20C39F850()
{
  __cxa_end_catch();
  JUMPOUT(0x20C39FA2CLL);
}

void sub_20C39F864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_DWORD *a30,int a31,uint64_t a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD *a38)
{
  void **v38;
  uint64_t v39;

  sub_20C3A06C4(v39 - 112);
  sub_20BFD7C28(a23, a38);
  sub_20C39D8D0(v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a30);
  sub_20BFD265C(&a33);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a22);
  sub_20BFD265C(&a31);
  JUMPOUT(0x20C39F988);
}

void sub_20C39F95C()
{
  JUMPOUT(0x20C39FA2CLL);
}

void sub_20C39F97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60)
{
  _DWORD *v60;
  uint64_t v61;
  unsigned int *v63;
  unsigned int v64;

  if ((a59 & 7) != 0)
  {
    v63 = (unsigned int *)(a59 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v60);
  sub_20BFD265C(&a60);
  a31 = (void **)(v61 - 256);
  sub_20BEEB2B8(&a31);
  sub_20C3A0668(v61 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39FA44(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_20C37F938((_QWORD *)a1, 0, a1, 0xFu, (_QWORD *)a2);
  if ((_DWORD)result)
  {
    result = sub_20C37F938((_QWORD *)(a1 + 8), 0, a1 + 8, 0xFu, (_QWORD *)(a2 + 8));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return result;
}

uint64_t sub_20C39FAB8(uint64_t a1, tbb::task *a2)
{
  *(_QWORD *)a1 = off_24C538768;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_20C39FAF0(uint64_t a1, tbb::task *a2)
{
  void *v2;

  v2 = (void *)sub_20C39FAB8(a1, a2);
  operator delete(v2);
}

uint64_t sub_20C39FB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v14[2];

  v4 = *(_QWORD *)(a1 + 16);
  v14[0] = 0;
  v14[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v14, 0x30uLL);
  v6 = v5;
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = off_24C5387D8;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 48);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(v5 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(v6 + 28), (_DWORD *)(a2 + 20));
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 32) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(v6 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v6 + 40) = a1;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v6 - 40))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
}

uint64_t sub_20C39FBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = off_24C5387D8;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a2;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(v5 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(v5 + 28), (_DWORD *)(a2 + 20));
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(v5 + 40) = a1;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v5 - 40))(*(_QWORD *)(v5 - 40), v5, v5 - 8);
}

uint64_t sub_20C39FCA0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C5387D8;
  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C39FD0C(void *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C5387D8;
  v2 = *((_QWORD *)a1 + 4);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_20BFD265C((_DWORD *)a1 + 6);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 2);
  if (v5)
    sub_20C35C614(v5);
  operator delete(a1);
}

uint64_t sub_20C39FD78(uint64_t a1)
{
  sub_20C39FDA0(*(_QWORD ***)(*(_QWORD *)(a1 + 40) + 8), (int *)(a1 + 8));
  return 0;
}

void sub_20C39FDA0(_QWORD **a1, int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  v6 = *a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v8 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  v9 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  sub_20C39EA9C(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v6);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C39FE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a10, uint64_t a11, uint64_t a12)
{
  _DWORD *v12;
  _DWORD *v13;
  unsigned int *v15;
  unsigned int v16;

  if ((a12 & 7) != 0)
  {
    v15 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(v12);
  if (a10)
    sub_20C35C614(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C39FEC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C538820;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_20BFD265C((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C39FF14(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C538820;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_20BFD265C(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

unint64_t sub_20C39FF64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v2 = a1 + 8;
  v15 = *(_QWORD *)(a1 + 8);
  sub_20BFD6E54(&v16, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v17, (_DWORD *)(v2 + 12));
  v3 = 0;
  v18 = *(_OWORD *)(v2 + 16);
  v19 = *(_QWORD *)(v2 + 32);
  while (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 48)
       || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 56)
       || (sub_20C39FA44(v2 + 16, v2 + 56) & 1) == 0)
  {
    sub_20C3A016C(v2);
    if (++v3 == 4)
    {
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 48)
        || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 56)
        || (sub_20C39FA44(v2 + 16, v2 + 56) & 1) == 0)
      {
        *(_BYTE *)(a1 - 12) = 1;
      }
      v3 = 4;
      goto LABEL_11;
    }
  }
  if (v3)
  {
LABEL_11:
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16);
    v14[0] = 0;
    v14[1] = v4;
    v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v14, 0x40uLL);
    v9 = v15;
    sub_20BFD6E54(&v10, &v16);
    sub_20BFD6EA4(&v11, &v17);
    v13 = v19;
    v12 = v18;
    v6 = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(v5 - 11) = 1;
    *(_QWORD *)v5 = off_24C538868;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v9;
    sub_20BFD6E54((_DWORD *)(v5 + 24), &v10);
    sub_20BFD6EA4((_DWORD *)(v5 + 28), &v11);
    v7 = v13;
    *(_OWORD *)(v5 + 32) = v12;
    *(_QWORD *)(v5 + 48) = v7;
    *(_QWORD *)(v5 + 56) = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    goto LABEL_12;
  }
  v5 = 0;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  return v5;
}

void sub_20C3A0148(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20C3A016C(uint64_t a1)
{
  int *v2;
  uint64_t *v3;
  _BOOL8 result;

  v2 = (int *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 16);
  result = sub_20C39E4C4((pxrInternal__aapl__pxrReserved__::UsdStage ***)a1, (int *)(a1 + 8), 0, (uint64_t *)(a1 + 16));
  if (!result)
  {
    do
      result = sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, v2, 0, v3);
    while (result);
  }
  return result;
}

uint64_t sub_20C3A01C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C538868;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  return a1;
}

void sub_20C3A0200(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C538868;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_20BFD265C(a1 + 6);
  operator delete(a1);
}

uint64_t sub_20C3A023C(tbb::internal::allocate_child_proxy *this)
{
  char *v2;
  _DWORD *v3;
  _DWORD *v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t *v14;

  v2 = (char *)this + 16;
  v13 = 0;
  v3 = (_DWORD *)((char *)this + 24);
  v4 = (_DWORD *)((char *)this + 28);
  v5 = (char *)this + 32;
  v6 = (unint64_t *)&v13;
  v7 = 0x200000000;
  for (i = 1; ; ++i)
  {
    v14 = v6;
    v9 = tbb::internal::allocate_child_proxy::allocate(this, 0x38uLL);
    v10 = *((_QWORD *)this + 1);
    *(_BYTE *)(v9 - 11) = 1;
    *(_QWORD *)v9 = off_24C5388B0;
    *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 2);
    sub_20BFD6E54((_DWORD *)(v9 + 16), v3);
    sub_20BFD6EA4((_DWORD *)(v9 + 20), v4);
    v11 = *((_QWORD *)v5 + 2);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)v5;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 48) = v10;
    sub_20C3A016C((uint64_t)v2);
    if (i == *((_QWORD *)this + 7))
      break;
    *(_QWORD *)(v9 - 8) = 0;
    v6 = (unint64_t *)(v9 - 8);
    *v14 = v9;
    v7 += 0x100000000;
  }
  *((_QWORD *)this - 3) = v7 >> 32;
  if (v13)
  {
    (***(void (****)(_QWORD, uint64_t, unint64_t *))(v13 - 40))(*(_QWORD *)(v13 - 40), v13, v14);
    v13 = 0;
    v14 = (unint64_t *)&v13;
  }
  (*(void (**)(_QWORD, tbb::internal::allocate_child_proxy *, unint64_t))(**((_QWORD **)this - 5) + 8))(*((_QWORD *)this - 5), this, v9);
  return 0;
}

uint64_t sub_20C3A0378(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5388B0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C3A03B4(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C5388B0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

uint64_t sub_20C3A03F0(uint64_t a1)
{
  _QWORD **v1;
  unsigned int *v2;
  unsigned int v3;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v1 = *(_QWORD ***)(*(_QWORD *)(a1 + 48) + 8);
  sub_20C3A048C(a1 + 8, (uint64_t)&v5);
  sub_20C39FDA0(v1, &v5);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return 0;
}

void sub_20C3A0478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C3A048C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1;
  v7 = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20C35C4F8(a2, (uint64_t *)&v7, (_DWORD *)(a1 + 8));
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3A04EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a10)
{
  if (a10)
    sub_20C35C614(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3A0504(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C5249B8;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C527D98;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

void *sub_20C3A0558(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  void *result;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **v5;
  const char *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  uint64_t **v12;
  _QWORD *v13;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v19;
  int v20;
  int v21;

  result = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(*(pxrInternal__aapl__pxrReserved__::PcpNodeRef **)a1);
  if ((result & 1) != 0
    || (v5 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(*(pxrInternal__aapl__pxrReserved__::PcpNodeRef **)a1),
        v8 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v5, v6, v7), result = (void *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v8), (_DWORD)result))
  {
    v9 = *a2;
    v10 = a2[1];
    if (*a2 != v10)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = (uint64_t **)(v11 + 32);
      v13 = (_QWORD *)(v11 + 40);
      do
      {
        result = sub_20BFD72BC(v12, v13, v9, v9);
        v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
      }
      while (v9 != v10);
    }
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (*a2 != v15)
    {
      do
      {
        MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(*(pxrInternal__aapl__pxrReserved__::PcpNodeRef **)a1);
        v19 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v17, v18);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v19, v14, &v20);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v20))
          sub_20C37F3F8((uint64_t **)(*(_QWORD *)(a1 + 8) + 32), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, &v20);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        result = sub_20BFD265C(&v20);
        v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
      }
      while (v14 != v15);
    }
  }
  return result;
}

void sub_20C3A064C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3A0668(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C3A0708((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20C3A06C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C3A0708((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

_DWORD *sub_20C3A0708(uint64_t a1)
{
  sub_20BFD7C28(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_20C39D8D0((void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

__n128 sub_20C3A075C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_20C3A07AC(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C3A0860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C3A0874(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 168;
        sub_20C39C8C8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C3A08E0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(a2 + 24));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 120), (_DWORD *)(a2 + 120));
  sub_20BFD38DC((_DWORD *)(a1 + 124), (_DWORD *)(a2 + 124));
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

void sub_20C3A09B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3A09D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C5388F8;
  result[1] = v3;
  return result;
}

uint64_t sub_20C3A0A0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C5388F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20C3A0A28@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7[4];
  char v8;

  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
     || (v7[0] = (uint64_t)"usd/namespaceEditor.cpp",
         v7[1] = (uint64_t)"operator()",
         v7[2] = 1095,
         v7[3] = (uint64_t)"auto pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetListOp"
                          "Edits(const UsdStageRefPtr &, const _EditDescription &, _ProcessedEdit *)::(anonymous class)::"
                          "operator()(const SdfPath &) const",
         v8 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "path.IsAbsolutePath()", 0) & 1) != 0))
    && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(this, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8)))
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(_QWORD *)(a2 + 8) + 8));
    if ((result & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v7, this, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(a2 + 8) + 8), 1);
      sub_20BFD38A4((_DWORD *)a3, v7);
      sub_20BFD38DC((_DWORD *)(a3 + 4), (_DWORD *)v7 + 1);
      *(_BYTE *)(a3 + 8) = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
      return (uint64_t)sub_20BFD265C(v7);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
    }
  }
  else
  {
    sub_20BFD6E54((_DWORD *)a3, this);
    result = (uint64_t)sub_20BFD6EA4((_DWORD *)(a3 + 4), (_DWORD *)this + 1);
    *(_BYTE *)(a3 + 8) = 1;
  }
  return result;
}

uint64_t sub_20C3A0B50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538958))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3A0B8C()
{
  return &unk_24C538958;
}

uint64_t sub_20C3A0B98(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    sub_20BDDF694();
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20C3A0E24((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[168 * v3];
  v13 = &v7[168 * v6];
  sub_20C3A0CBC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 168;
  sub_20C3A0DB0(a1, &v10);
  v8 = a1[1];
  sub_20C3A1064(&v10);
  return v8;
}

void sub_20C3A0CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3A1064((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C3A0CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  __n128 result;

  v3 = *(unsigned int **)a3;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  result = *(__n128 *)(a3 + 144);
  *(__n128 *)(a2 + 144) = result;
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  return result;
}

uint64_t sub_20C3A0DB0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3A0E6C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20C3A0E24(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    sub_20BDDF5B4();
  return operator new(168 * a2);
}

uint64_t sub_20C3A0E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 168;
      sub_20C3A0F34(a1, (_QWORD *)(v7 - 168), v9);
      v7 = *((_QWORD *)&v16 + 1) - 168;
      *((_QWORD *)&v16 + 1) -= 168;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C3A0FE0((uint64_t)v13);
  return v11;
}

void sub_20C3A0F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C3A0FE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3A0F34(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *(unsigned int **)a3;
  *a2 = *(_QWORD *)a3;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a3 + 8);
  a2[1] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      a2[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return sub_20BFD6BC4((uint64_t)(a2 + 2), a3 + 16);
}

void sub_20C3A0FAC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  unint64_t v3;
  unsigned int v4;

  v3 = *((_QWORD *)v1 + 1);
  if ((v3 & 7) != 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
    do
      v4 = __ldxr((unsigned int *)v3);
    while (__stlxr(v4 - 2, (unsigned int *)v3));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3A0FE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C3A1014((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C3A1014(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C39C8C8(v3, v1);
      v1 += 168;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C3A1064(void **a1)
{
  sub_20C3A1094(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *sub_20C3A1094(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = v3[4];
      v3[2] = v1 - 168;
      result = sub_20C39C8C8(v4, v1 - 168);
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

__n128 sub_20C3A10E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C538978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3A1118(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C538978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *sub_20C3A1138@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v9;
  char v10;
  int v12;
  int v13;

  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - 16));
  v9 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v7, v8);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v9, a2, &v12);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12)
    && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16)))
  {
    sub_20BFD6E54((_DWORD *)a3, &v12);
    sub_20BFD6EA4((_DWORD *)(a3 + 4), &v13);
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 8) = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_20BFD265C(&v12);
}

void sub_20C3A11F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 4));
  sub_20BFD265C((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3A1218(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5389D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3A1254()
{
  return &unk_24C5389D8;
}

uint64_t *sub_20C3A1260()
{
  sub_20C3A1AC4();
  sub_20C3A1BE4();
  sub_20C3A1D04();
  sub_20C3A1E24();
  return sub_20C3A1F44();
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_24C5389F8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_24C5389F8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_24C5389F8;
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged::~StageEditTargetChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::LayerMutingChanged::~LayerMutingChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::LayerMutingChanged *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);
  operator delete(v1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::GetChangedFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *this@<X0>, char **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char **v15[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(uint64_t **)(*(_QWORD *)this + 40);
  v4 = *(uint64_t **)(*(_QWORD *)this + 48);
  if (v3 == v4)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    do
    {
      v5 = *v3;
      sub_20BFC9A6C(a2, *(unsigned int *)(*v3 + 120) + ((a2[1] - *a2) >> 3));
      v6 = (uint64_t *)v5;
      if (*(_DWORD *)(v5 + 124) >= 4u)
        v6 = *(uint64_t **)v5;
      v7 = *(unsigned int *)(v5 + 120);
      v15[0] = a2;
      if ((_DWORD)v7)
      {
        v8 = 40 * v7;
        do
        {
          sub_20C3A2104(v15, v6);
          v6 += 5;
          v8 -= 40;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != v4);
    v9 = *a2;
    v10 = (uint64_t *)a2[1];
  }
  v11 = 126 - 2 * __clz(((char *)v10 - v9) >> 3);
  if (v10 == (uint64_t *)v9)
    v12 = 0;
  else
    v12 = v11;
  sub_20C0353A4((uint64_t)v9, v10, (uint64_t)v15, v12, 1);
  v13 = sub_20C3A217C(*a2, a2[1]);
  return sub_20C117D14((uint64_t)a2, v13, a2[1]);
}

void sub_20C3A14AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = *(_QWORD *)(*(_QWORD *)this + 40);
  v1 = *(_QWORD *)(*(_QWORD *)this + 48);
  if (v2 == v1)
    return 0;
  v3 = v2 + 8;
  do
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 - 8) + 120);
    result = v4 != 0;
    if (v4)
      v6 = 1;
    else
      v6 = v3 == v1;
    v3 += 8;
  }
  while (!v6);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254988818);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988818))
  {
    qword_254988810 = 0;
    qword_254988808 = 0;
    qword_254988800 = (uint64_t)&qword_254988808;
    __cxa_atexit((void (*)(void *))sub_20C3A1584, &qword_254988800, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988818);
  }
  return &qword_254988800;
}

uint64_t sub_20C3A1584(uint64_t a1)
{
  sub_20C3A2248(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *EmptyChangesMap;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  EmptyChangesMap = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap(a1);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)EmptyChangesMap);
  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = off_24C5389F8;
  *((_QWORD *)a1 + 1) = v8;
  *((_QWORD *)a1 + 2) = v7;
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)a1 = &off_24C538A68;
  *((_QWORD *)a1 + 3) = a3;
  *((_QWORD *)a1 + 4) = &qword_254988800;
  *((_QWORD *)a1 + 5) = &qword_254988800;
  return a1;
}

{
  uint64_t *EmptyChangesMap;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  EmptyChangesMap = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap(a1);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)EmptyChangesMap);
  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = off_24C5389F8;
  *((_QWORD *)a1 + 1) = v8;
  *((_QWORD *)a1 + 2) = v7;
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)a1 = &off_24C538A68;
  *((_QWORD *)a1 + 3) = a3;
  *((_QWORD *)a1 + 4) = &qword_254988800;
  *((_QWORD *)a1 + 5) = &qword_254988800;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);
  operator delete(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ResyncedObject(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v7;
  int v8;
  char v9;

  v3 = *(_QWORD **)(a1 + 24);
  sub_20C348EEC(a2, &v7);
  v4 = sub_20C3A22CC(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, 0, (uint64_t)&v9);
  v5 = *(_QWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  return v5 + 8 != (_QWORD)v4;
}

void sub_20C3A1748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  sub_20BFD1A18(&a10);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ChangedInfoOnly(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v7;
  int v8;

  v3 = *(_QWORD *)(a1 + 32);
  sub_20C348EEC(a2, &v7);
  v4 = sub_20C33FFFC(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  v5 = *(_QWORD *)(a1 + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  return v5 + 8 != (_QWORD)v4;
}

void sub_20C3A17D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ResolvedAssetPathsResynced(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v7;
  int v8;
  char v9;

  v3 = *(_QWORD **)(a1 + 40);
  sub_20C348EEC(a2, &v7);
  v4 = sub_20C3A22CC(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, 0, (uint64_t)&v9);
  v5 = *(_QWORD *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  return v5 + 8 != (_QWORD)v4;
}

void sub_20C3A1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  sub_20BFD1A18(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResolvedAssetPathsResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return *((_QWORD *)this + 5);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;

  sub_20C348EEC(a2, &v6);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C3A18F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;

  v6 = *((_QWORD *)this + 3);
  v9 = sub_20C33FFFC(v6, a2);
  if ((_QWORD *)(v6 + 8) != v9)
    return pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::GetChangedFields((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *)&v9, (char **)a3);
  v7 = *((_QWORD *)this + 4);
  result = sub_20C33FFFC(v7, a2);
  v9 = result;
  if ((_QWORD *)(v7 + 8) != result)
    return pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::GetChangedFields((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *)&v9, (char **)a3);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t a2)
{
  _BOOL8 HasChangedFields;
  int v5;
  int v6;

  sub_20C348EEC(a2, &v5);
  HasChangedFields = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_20BFD265C(&v5);
  return HasChangedFields;
}

void sub_20C3A19F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;

  v4 = *((_QWORD *)this + 3);
  v5 = sub_20C33FFFC(v4, a2);
  if ((_QWORD *)(v4 + 8) != v5)
  {
    v7 = v5[5];
    v6 = v5[6];
    if (v7 != v6)
    {
      v8 = v7 + 8;
      do
      {
        v9 = *(_DWORD *)(*(_QWORD *)(v8 - 8) + 120);
        result = v9 != 0;
        if (v9)
          v11 = 1;
        else
          v11 = v8 == v6;
        v8 += 8;
      }
      while (!v11);
      return result;
    }
    return 0;
  }
  v12 = *((_QWORD *)this + 4);
  v13 = sub_20C33FFFC(v12, a2);
  if ((_QWORD *)(v12 + 8) == v13)
    return 0;
  v15 = v13[5];
  v14 = v13[6];
  if (v15 == v14)
    return 0;
  v16 = v15 + 8;
  do
  {
    v17 = *(_DWORD *)(*(_QWORD *)(v16 - 8) + 120);
    result = v17 != 0;
    if (v17)
      v18 = 1;
    else
      v18 = v16 == v14;
    v16 += 8;
  }
  while (!v18);
  return result;
}

uint64_t *sub_20C3A1AC4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C3A1B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3A1BE4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C3A2068((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C3A1CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3A1D04()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C3A2068((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C3A1DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3A1E24()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C3A2068((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C3A1EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3A1F44()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C3A2068((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C3A2018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C3A2068(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C3A20D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_20C3A2104(char ***a1, uint64_t *a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char *v8;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v8 = sub_20BFCA068(*a1, a2);
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)v4 = *a2;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        *(_QWORD *)v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 = v4 + 8;
  }
  v3[1] = v8;
  return a1;
}

_QWORD *sub_20C3A217C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1) & 0xFFFFFFFFFFFFFFF8;
      v6 = *v4++ & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    if (v4 == a2)
    {
      v11 = v4 - 2;
    }
    else
    {
      v8 = v4 - 1;
      do
      {
        v9 = v8;
        v8 = v4;
        v10 = *v4;
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (v10 & 0xFFFFFFFFFFFFFFF8))
        {
          v11 = v7;
        }
        else
        {
          v11 = v7 + 1;
          if (v9 != v7)
          {
            if ((*v11 & 7) != 0)
            {
              v12 = (unsigned int *)(*v11 & 0xFFFFFFFFFFFFFFF8);
              do
                v13 = __ldxr(v12);
              while (__stlxr(v13 - 2, v12));
              v10 = *v8;
            }
            *v11 = v10;
            *v8 = 0;
          }
        }
        v4 = v8 + 1;
        v7 = v11;
      }
      while (v8 + 1 != a2);
    }
    return v11 + 1;
  }
  return result;
}

void sub_20C3A2248(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C3A2248(a1, *a2);
    sub_20C3A2248(a1, a2[1]);
    sub_20C3A2290((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_20C3A2290(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_QWORD *sub_20C3A22CC(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v8;
  _QWORD *v9;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v17;
  int v18;

  v4 = a1 + 1;
  if (!a1[2])
    return a1 + 1;
  v8 = (_QWORD *)*v4;
  v9 = a1 + 1;
  if (!*v4)
    goto LABEL_10;
  v9 = a1 + 1;
  do
  {
    v11 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 4), a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v9 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if ((a3 & 1) != 0 || v9 == v4 || (v13 = v9, v9[4] != *(_QWORD *)a2))
  {
LABEL_10:
    v13 = v4;
    if (v9 != (_QWORD *)*a1)
    {
      v14 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v13 = v14;
          v14 = (_QWORD *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v15 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (v15);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 4)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 4), &v17);
        v13 = (_QWORD *)sub_20C3A22CC(a1, &v17, 0, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_20BFD265C(&v17);
      }
    }
  }
  return v13;
}

void sub_20C3A2410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdObject::GetStage@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return sub_20C3A3AEC(a3, *(_QWORD *)v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;

  v8 = *((_QWORD *)this + 1);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v8, this, a2, a4, 1, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, a2, a4, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;

  v8 = *((_QWORD *)this + 1);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v8, this, a2, a4, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, a2, a4, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  v5 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v4;
  v9 = 0;
  result = pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(v5, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6;

  v6 = *((_QWORD *)this + 1);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6, this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  v5 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v4;
  v9 = 0;
  result = pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(v5, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, 1);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  v5 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v4;
  v9 = 0;
  result = pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(v5, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, 0);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6;

  v6 = *((_QWORD *)this + 1);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6, this, a2, a3, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6;

  v6 = *((_QWORD *)this + 1);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6, this, a2, a3, 0);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v5 = *((_QWORD *)this + 1);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAllMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, this, 1, (uint64_t **)a3, 0);
}

void sub_20C3A297C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C3A3BA4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v5 = *((_QWORD *)this + 1);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAllMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, this, 0, (uint64_t **)a3, 0);
}

void sub_20C3A29F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C3A3BA4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData@<W0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3690B8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3A2A94(_Unwind_Exception *a1)
{
  _QWORD ***v1;

  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  *((_QWORD *)a3 + 1) = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 72), a3, a2);
}

void sub_20C3A2B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369120((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 72), a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredCustomDataKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfo@<W0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3690B8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3A2E80(_Unwind_Exception *a1)
{
  _QWORD ***v1;

  sub_20BF49F14(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  *((_QWORD *)a3 + 1) = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 16), a3, a2);
}

void sub_20C3A2F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369120((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 16), a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearAssetInfoByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAssetInfoKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredAssetInfoKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::IsHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned __int8 v6;
  uint64_t v7;

  v6 = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v7 = 0;
  sub_20C36978C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176), (uint64_t)&v6, &v7);
  if ((v7 & 7) != 0)
  {
    v3 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;

  v7 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369640((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 176), (uint64_t (**)(_QWORD, uint64_t))&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdObject::GetDocumentation@<W0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3699B0((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3A3444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369820(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearDocumentation(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 136));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredDocumentation(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 136));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdObject::GetDisplayName@<W0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3699B0((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3A363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369820(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearDisplayName(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 120));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredDisplayName(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 120));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3
    || (a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1),
        (*(_BYTE *)(v3 + 57) & 8) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  }
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, a2, (unsigned int **)this + 3);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_GetObjectDescription(pxrInternal__aapl__pxrReserved__ **a1@<X0>, const char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t *v6;
  unint64_t v7;
  const char *v8;
  uint64_t *v9;
  unint64_t v10;
  const char *v11;
  uint64_t *v12;
  unint64_t v13;
  const char *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string __p;
  std::string v20;

  switch(*(_DWORD *)a1)
  {
    case 0:
    case 1:
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), a4);
      return;
    case 2:
      if (a2[23] >= 0)
        v6 = (uint64_t *)a2;
      else
        v6 = *(uint64_t **)a2;
      v7 = (unint64_t)a1[3] & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v8 = *(const char **)v8;
      }
      else
      {
        v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%sproperty '%s' on ", a2, a3, v6, v8);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      goto LABEL_43;
    case 3:
      if (a2[23] >= 0)
        v9 = (uint64_t *)a2;
      else
        v9 = *(uint64_t **)a2;
      v10 = (unint64_t)a1[3] & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        v11 = (const char *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0)
          v11 = *(const char **)v11;
      }
      else
      {
        v11 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%sattribute '%s' on ", a2, a3, v9, v11);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      goto LABEL_43;
    case 4:
      if (a2[23] >= 0)
        v12 = (uint64_t *)a2;
      else
        v12 = *(uint64_t **)a2;
      v13 = (unint64_t)a1[3] & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v14 = *(const char **)v14;
      }
      else
      {
        v14 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%srelationship '%s' on ", a2, a3, v12, v14);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
LABEL_43:
      v17 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      break;
    default:
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unknown object type %d", a2, a3, *(unsigned int *)a1);
      break;
  }
}

void sub_20C3A3A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(pxrInternal__aapl__pxrReserved__ **this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetObjectDescription(this, (const char *)__p, v4, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20C3A3ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3A3AEC(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C3A3B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B0D8(v3);
  _Unwind_Resume(exception_object);
}

void sub_20C3A3BA4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_20C3A3BA4(a1, *a2);
    sub_20C3A3BA4(a1, a2[1]);
    sub_20BF4C2D8((uint64_t)(a2 + 5));
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v3;

  v3 = (unsigned int **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v3, a2);
}

BOOL sub_20C3A3C34(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, int a3)
{
  _BOOL8 v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *Instance;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  char v31[8];
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v35;
  const char *v36;
  __int128 v37;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2) & 1) != 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v35 = *(_QWORD *)(a2 + 16);
    }
    sub_20BFD6E54(&v36, (_DWORD *)(a2 + 24));
    sub_20BFD6EA4((_DWORD *)&v36 + 1, (_DWORD *)(a2 + 28));
    v37 = *(_OWORD *)(a2 + 32);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v7, &v32);
    v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v32);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v8);
    v10 = sub_20C3A4B10((uint64_t)__p, EditTarget);
    v11 = v33;
    if (v33)
    {
      v12 = (unsigned int *)(v33 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    if ((v10 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20C3A4BF8(a1, v15, &v32);
      if (v32
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v32 + 8)) & 1) == 0)
      {
        v28 = v32;
        v29 = (std::__shared_weak_count *)v33;
        if (v33)
        {
          v20 = (unint64_t *)(v33 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        sub_20C3A4D10(&v28, (unsigned __int8 *)__p, a3);
        v22 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v26 = v30;
        v27 = atomic_load(Instance + 18);
        v6 = v26 >= v27
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v6 = 0;
      }
      v16 = (std::__shared_weak_count *)v33;
      if (v33)
      {
        v17 = (unint64_t *)(v33 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    if (SHIBYTE(v35) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Add";
    v35 = 117;
    v36 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Add(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal__aa"
          "pl__pxrReserved__::UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInte"
          "rnal__aapl__pxrReserved__::SdfPayloadTypePolicy>]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v6;
}

void sub_20C3A3EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a17);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  sub_20C02CDE4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPayloads::AddPayload(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v7;
  void *__p[2];
  char v10;
  int v11;
  _DWORD v12[5];

  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, a2, a3, a4);
  v7 = sub_20C3A3C34(a1, (uint64_t)__p, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_20BFD265C(&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_20C3A3FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C02CDE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPayloads::AddPayload(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v8;
  uint64_t v10;
  void *__p[2];
  char v12;
  int v13;
  _DWORD v14[5];

  v10 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, a2, &v10, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  v8 = sub_20C3A3C34(a1, (uint64_t)__p, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v14);
  sub_20BFD265C(&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_20C3A40B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C02CDE4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPayloads::AddInternalPayload(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v6;
  void *__p[2];
  uint64_t v9;
  void *v10[2];
  char v11;
  int v12;
  _DWORD v13[5];

  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(v10, __p, a2, a3);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  v6 = sub_20C3A3C34(a1, (uint64_t)v10, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(&v12);
  if (v11 < 0)
    operator delete(v10[0]);
  return v6;
}

void sub_20C3A4178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20C02CDE4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_20C3A41A8(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2)
{
  _BOOL8 v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *Instance;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  __int128 v31;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2) & 1) != 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v29 = *(_QWORD *)(a2 + 16);
    }
    sub_20BFD6E54(&v30, (_DWORD *)(a2 + 24));
    sub_20BFD6EA4((_DWORD *)&v30 + 1, (_DWORD *)(a2 + 28));
    v31 = *(_OWORD *)(a2 + 32);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v26);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v26);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v6);
    v8 = sub_20C3A4B10((uint64_t)__p, EditTarget);
    v9 = v27;
    if (v27)
    {
      v10 = (unsigned int *)(v27 + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v8 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20C3A4BF8(a1, v13, &v26);
      if (v26
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v26 + 8)) & 1) == 0)
      {
        sub_20C3A540C(&v26, (unsigned __int8 *)__p);
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v22 = v24;
        v23 = atomic_load(Instance + 18);
        v4 = v22 >= v23
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v4 = 0;
      }
      v14 = (std::__shared_weak_count *)v27;
      if (v27)
      {
        v15 = (unint64_t *)(v27 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17)
        v17 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v18 = sub_20BEC5244(&v24, 0);
      LOBYTE(v26) = 0;
      v19 = (_QWORD *)sub_20BEB5B80(v17 + 19, &v26);
      if (v19 != v18)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v17, v18, v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
    }
    else
    {
      v4 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
    sub_20BFD265C(&v30);
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Remove";
    v29 = 148;
    v30 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Remove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrReserve"
          "d__::UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__px"
          "rReserved__::SdfPayloadTypePolicy>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v4;
}

void sub_20C3A4428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a10);
  sub_20C02CDE4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_20C3A44B0(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  unint64_t *Instance;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20C3A4BF8(a1, v3, &v17);
    if (v17
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v17 + 1) & 1) == 0
      && sub_20C105864((uint64_t)&v17)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v17 + 6))(v17))
    {
      Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!Instance)
        Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v5 = v15;
      v6 = atomic_load(Instance + 18);
      v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
    }
    else
    {
      v7 = 0;
    }
    v8 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v9 = (unint64_t *)(v18 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v11)
      v11 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v12 = sub_20BEC5244(&v15, 0);
    LOBYTE(v17) = 0;
    v13 = (_QWORD *)sub_20BEB5B80(v11 + 19, &v17);
    if (v13 != v12)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    v18 = "Clear";
    v19 = 174;
    v20 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Clear(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdPayloads, ListOpPr"
          "oxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_20C3A4664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C3A46A0(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t *Instance;
  unint64_t v17;
  unint64_t v18;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 v26;
  unint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v36;
  std::__shared_weak_count *v37;
  _BYTE v38[8];
  void *__p[2];
  uint64_t v40;
  const char *v41;
  __int128 v42;
  __n128 *v43;
  __n128 *v44;
  unint64_t v45;
  unint64_t v46;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, __p);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)__p);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = __p[1];
    if (__p[1])
    {
      v8 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v46);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_20C3A5874((uint64_t *)&v43, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4));
    v11 = *(__int128 **)a2;
    v12 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*(__int128 **)a2 != v12)
    {
      do
      {
        if (*((char *)v11 + 23) < 0)
        {
          sub_20BDDBFAC(__p, *(void **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v13 = *v11;
          v40 = *((_QWORD *)v11 + 2);
          *(_OWORD *)__p = v13;
        }
        sub_20BFD6E54(&v41, (_DWORD *)v11 + 6);
        sub_20BFD6EA4((_DWORD *)&v41 + 1, (_DWORD *)v11 + 7);
        v42 = v11[2];
        if (sub_20C3A4B10((uint64_t)__p, EditTarget))
        {
          v14 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v15 = (__n128 *)sub_20C12FBAC((uint64_t *)&v43, (uint64_t)__p);
          }
          else
          {
            sub_20C02CCF8((int)&v45, v44, (uint64_t)__p);
            v15 = v14 + 3;
          }
          v44 = v15;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
        sub_20BFD265C(&v41);
        if (SHIBYTE(v40) < 0)
          operator delete(__p[0]);
        v11 += 3;
      }
      while (v11 != v12);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v17 = v46;
    v18 = atomic_load(Instance + 18);
    if (v17 >= v18
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v46, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v38);
      sub_20C3A4BF8(a1, v19, &v36);
      if (v36 && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v36 + 1) & 1) == 0)
      {
        if (v43 == v44)
        {
          if (sub_20C105864((uint64_t)&v36))
            (*((void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v36 + 7))(v36);
        }
        else
        {
          __p[0] = v36;
          __p[1] = v37;
          if (v37)
          {
            p_shared_owners = (unint64_t *)&v37->__shared_owners_;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
          }
          LODWORD(v40) = 0;
          sub_20C3A5924((unsigned int *)__p, &v43);
          v33 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v34 = (unint64_t *)((char *)__p[1] + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
      }
      v20 = v37;
      if (v37)
      {
        v21 = (unint64_t *)&v37->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v23)
        v23 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v24 = v46;
      v25 = atomic_load(v23 + 18);
      v26 = v24 >= v25
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v46, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v23);
      v27 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v27)
        v27 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v28 = sub_20BEC5244(&v46, 0);
      LOBYTE(v36) = 0;
      v29 = (_QWORD *)sub_20BEB5B80(v27 + 19, &v36);
      if (v29 != v28)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v27, v28, v29);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v38);
    }
    else
    {
      v26 = 0;
    }
    __p[0] = &v43;
    sub_20C021818((void ***)__p);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v46);
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Set";
    v40 = 195;
    v41 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Set(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrReserved"
          "__::UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxr"
          "Reserved__::SdfPayloadTypePolicy>]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v26;
}

void sub_20C3A4A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  a13 = (void **)&a19;
  sub_20C021818(&a13);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v19 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_20C3A4B10(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  uint64_t v4;
  int *v5;
  int *v6;
  int v8;
  int v9;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      return 1;
LABEL_5:
    v5 = (int *)(a1 + 24);
    sub_20BFD6E54(&v8, (_DWORD *)(a1 + 24));
    v6 = (int *)(a1 + 28);
    sub_20BFD6EA4(&v9, v6);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
    {
      if ((sub_20C396D0C(&v8, a2) & 1) == 0)
      {
        v4 = 0;
        goto LABEL_10;
      }
      sub_20C01A074(v5, &v8);
      sub_20C01A0C8(v6, &v9);
    }
    v4 = 1;
LABEL_10:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_20BFD265C(&v8);
    return v4;
  }
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_5;
  return 1;
}

void sub_20C3A4BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3A4BF8@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int **v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (v15 = "usd/listEditImpl.h",
        v16 = "_GetListEditor",
        v17 = 238,
        v18 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdPayloads, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfP"
              "ayloadTypePolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__:"
              ":UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__px"
              "rReserved__::SdfPayloadTypePolicy>]",
        v19 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v15);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v14);
    v7 = v16;
    if (v16)
    {
      v8 = (unsigned int *)(v16 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v14))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      v12 = (unsigned int **)sub_20C0B0CA4(&v14);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v12, a3);
    }
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_20C3A4CE8(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  _Unwind_Resume(a1);
}

void sub_20C3A4D10(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  switch(a3)
  {
    case 0:
      v6 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v32 = v6;
      v9 = 1;
      goto LABEL_11;
    case 1:
      v10 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v9 = 0;
      v32 = v10;
LABEL_11:
      v13 = 4;
      goto LABEL_21;
    case 2:
      v14 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v15 = (unint64_t *)&v5->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v32 = v14;
      v9 = 1;
      goto LABEL_20;
    case 3:
      v17 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v18 = (unint64_t *)&v5->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v9 = 0;
      v32 = v17;
LABEL_20:
      v13 = 5;
LABEL_21:
      v33 = v5;
      v34 = v13;
      break;
    default:
      v9 = 0;
      break;
  }
  if (!sub_20C1027F8((uint64_t)a1)
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1))
  {
    v21 = *a1;
    v20 = (std::__shared_weak_count *)a1[1];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = v33;
    v32 = v21;
    v33 = v20;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v34 = 0;
  }
  if (sub_20C3A5068((uint64_t)&v32))
  {
    v27 = sub_20C3A5024((uint64_t)&v32, a2);
    if (v27 != -1)
    {
      if ((v9 & 1) != 0)
        v28 = 0;
      else
        v28 = sub_20C3A5068((uint64_t)&v32) - 1;
      if (v27 == v28)
        goto LABEL_42;
      sub_20C3A50C4((unsigned int *)&v32, v27);
    }
    sub_20C3A4F64((unsigned int *)&v32, v9 - 1, (uint64_t)a2);
  }
  else
  {
    sub_20C3A4F64((unsigned int *)&v32, -1, (uint64_t)a2);
  }
LABEL_42:
  v29 = v33;
  if (v33)
  {
    v30 = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20C3A4F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3A4F64(unsigned int *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  if (a2 == -1)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, a1[4]);
      a2 = -1431655765 * ((v6[1] - *v6) >> 4);
    }
    else
    {
      a2 = 0;
    }
  }
  v7 = a2;
  sub_20C29DC5C(v8, 1uLL, a3);
  sub_20C3A5124(a1, v7, 0, v8);
  v9 = (void **)v8;
  sub_20C021818(&v9);
}

void sub_20C3A500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C021818((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C3A5024(uint64_t a1, unsigned __int8 *a2)
{
  if (sub_20C3A5300(a1))
    return sub_20C3A5374(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), a2);
  else
    return -1;
}

unint64_t sub_20C3A5068(uint64_t a1)
{
  unint64_t result;
  _QWORD *v3;

  if (!sub_20C3A5300(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 4);
  }
  return result;
}

void sub_20C3A50C4(unsigned int *a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  sub_20C3A5124(a1, a2, 1, v2);
  v3 = (void **)v2;
  sub_20C021818(&v3);
}

void sub_20C3A5108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C021818(&a12);
  _Unwind_Resume(a1);
}

void sub_20C3A5124(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *WhyNot;
  const char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p[2];
  char v16;
  char v17;

  if (sub_20C3A528C((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 32))(__p, *(_QWORD *)a1, a1[4]);
      if (v17)
      {
        v10 = "sdf/listProxy.h";
        v11 = "_Edit";
        v12 = 750;
        v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy"
              ">::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPa"
              "yloadTypePolicy]";
        v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0)
          v9 = (const char *)WhyNot;
        else
          v9 = (const char *)*WhyNot;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0)
          operator delete(__p[0]);
      }
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      v10 = "sdf/listProxy.h";
      v11 = "_Edit";
      v12 = 758;
      v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>:"
            ":_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_20C3A5268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3A528C(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>:"
            ":_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_20C3A5300(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>:"
            ":_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

unint64_t sub_20C3A5374(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (_QWORD *)v4;
  v6 = *(unsigned __int8 **)v4;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if (*(unsigned __int8 **)v4 == v7)
  {
    v8 = *(unsigned __int8 **)v4;
  }
  else
  {
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v6, a3))
    {
      v6 += 48;
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
    v8 = v6;
    v6 = (unsigned __int8 *)v5[1];
  }
  if (v8 == v6)
    return -1;
  else
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*v5] >> 4);
}

void sub_20C3A540C(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  int v30;

  if (sub_20C105864((uint64_t)a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1))
    {
      v4 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v30 = 0;
      sub_20C3A564C((unsigned int *)&v28, a2);
      v7 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) & 1) == 0)
    {
      v10 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v30 = 1;
      sub_20C3A564C((unsigned int *)&v28, a2);
      v13 = v29;
      if (v29)
      {
        v14 = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v30 = 4;
      sub_20C3A564C((unsigned int *)&v28, a2);
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v30 = 5;
      sub_20C3A564C((unsigned int *)&v28, a2);
      v25 = v29;
      if (v29)
      {
        v26 = (unint64_t *)&v29->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      sub_20C3A570C(a1, 2, a2);
    }
  }
}

void sub_20C3A562C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3A564C(unsigned int *a1, unsigned __int8 *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  void **v7;

  v3 = sub_20C3A5024((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(_QWORD *)a1)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4]);
      v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 4);
    }
    else
    {
      v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_20C3A5124(a1, v5, 0, v6);
    v7 = (void **)v6;
    sub_20C021818(&v7);
  }
  else
  {
    sub_20C3A50C4(a1, v3);
  }
}

void sub_20C3A56F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C021818((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C3A570C(uint64_t *a1, int a2, unsigned __int8 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;

  v4 = (std::__shared_weak_count *)a1[1];
  v10 = *a1;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v12 = a2;
  if (sub_20C3A5024((uint64_t)&v10, a3) == -1)
    sub_20C3A57C0((unsigned int *)&v10, (uint64_t)a3);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20C3A57AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3A57C0(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  void **v8;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 4);
  }
  else
  {
    v6 = 0;
  }
  sub_20C29DC5C(v7, 1uLL, a2);
  sub_20C3A5124(a1, v6, 0, v7);
  v8 = (void **)v7;
  sub_20C021818(&v8);
}

void sub_20C3A585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C021818((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C3A5874(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE6D0B4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 48 * v6;
    sub_20C12FCB8(a1, v7);
    return sub_20C12FAA0(v7);
  }
  return result;
}

void sub_20C3A5910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12FAA0((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C3A5924(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 4);
  }
  else
  {
    v6 = 0;
  }
  sub_20C3A5124(a1, 0, v6, a2);
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::UsdPrim::_ProtoToInstancePathMap::MapProtoToInstance@<X0>(char **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  int *v6;
  char *result;
  char *v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL HasPrefix;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  sub_20BFD6E54(a3, a2);
  v6 = a3 + 1;
  result = (char *)sub_20BFD6EA4(a3 + 1, (_DWORD *)a2 + 1);
  v9 = *this;
  v8 = this[1];
  if (*this != v8)
  {
    result = sub_20C3AE2D0(*this, this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    v10 = result;
    if (v8 == result
      || (sub_20BFD6E54(&v26, result),
          v11 = sub_20BFD6EA4((_DWORD *)&v26 + 1, (_DWORD *)v10 + 1),
          v12 = v26,
          v13 = *(_QWORD *)a3,
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11),
          result = (char *)sub_20BFD265C(&v26),
          v14 = v10,
          v12 != v13))
    {
      if (v9 == v10)
      {
        v14 = v8;
      }
      else
      {
        v14 = v10 - 16;
        sub_20BFD6E54(&v26, (_DWORD *)v10 - 4);
        v15 = v10 - 12;
        sub_20BFD6EA4((_DWORD *)&v26 + 1, v15);
        HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
        result = (char *)sub_20BFD265C(&v26);
        if (!HasPrefix)
        {
          sub_20BFD6E54(&v25, v14);
          sub_20BFD6EA4((_DWORD *)&v25 + 1, v15);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (int *)&v26);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
          sub_20BFD265C(&v25);
          while (1)
          {
            v17 = sub_20C3AE2D0(v9, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
            if (v14 != v17)
            {
              sub_20BFD6E54(&v25, v17);
              v18 = sub_20BFD6EA4((_DWORD *)&v25 + 1, (_DWORD *)v17 + 1);
              v19 = v25;
              v20 = v26;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
              sub_20BFD265C(&v25);
              if (v19 == v20)
                break;
            }
            if (v9 == v17)
            {
              v14 = v8;
              goto LABEL_15;
            }
            v14 = v17 - 16;
            sub_20BFD6E54(&v25, (_DWORD *)v17 - 4);
            v21 = v17 - 12;
            sub_20BFD6EA4((_DWORD *)&v25 + 1, v21);
            v22 = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_20BFD265C(&v25);
            if (v22)
              goto LABEL_15;
            sub_20BFD6E54(&v23, v14);
            sub_20BFD6EA4(&v24, v21);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (int *)&v25);
            sub_20BFD3EBC((int *)&v26, (int *)&v25);
            sub_20BFD3F10((int *)&v26 + 1, (int *)&v25 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_20BFD265C(&v25);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
            sub_20BFD265C(&v23);
          }
          v14 = v17;
LABEL_15:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
          v6 = a3 + 1;
          result = (char *)sub_20BFD265C(&v26);
        }
      }
    }
    if (v14 != this[1])
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 + 8), 1);
      sub_20BFD3EBC(a3, (int *)&v26);
      sub_20BFD3F10(v6, (int *)&v26 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      return (char *)sub_20BFD265C(&v26);
    }
  }
  return result;
}

void sub_20C3A5C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _DWORD *v5;
  _DWORD *v6;
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
  sub_20BFD265C((int *)va);
  sub_20BFD1A18(v5);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, a2, &v15);
  v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v15);
  sub_20C348EEC((uint64_t)this, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a2, &v13);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  result = v16;
  if (v16)
  {
    v8 = (unsigned int *)(v16 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C3A5E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  sub_20BFD1A18(&a11);
  sub_20BFD1A18(&a9);
  v14 = a13;
  if (a13)
  {
    v15 = (unsigned int *)(a13 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v4;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
  return pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(*(_QWORD *)(v4 + 24) + 40), a2[1], a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t *SchemaInfo;
  char *v4;

  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *SchemaInfo;
  char *v4;

  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *SchemaInfo;
  char *v5;

  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_20C3A5F5C((uint64_t)this, a2) != 0;
}

uint64_t sub_20C3A5F5C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *SchemaInfosInFamily;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v4 = *(_QWORD *)(v3 + 24);
  SchemaInfosInFamily = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a2);
  v7 = *SchemaInfosInFamily;
  v8 = SchemaInfosInFamily[1];
  if (*SchemaInfosInFamily == v8)
    return 0;
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v4 + 40), *(_QWORD *)(*(_QWORD *)v7 + 8), v6) & 1) == 0)
  {
    v7 += 8;
    if (v7 == v8)
      return 0;
  }
  return *(_QWORD *)v7;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7 || (*(_BYTE *)(v7 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v8 = *(_QWORD *)(v7 + 24);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a3, a4, &v14);
  v10 = v14;
  v11 = v15;
  if (v14 == v15)
  {
    v12 = 0;
    if (!v14)
      return v12 != 0;
    goto LABEL_12;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v8 + 40), *(_QWORD *)(*(_QWORD *)v10 + 8), v9) & 1) == 0)
  {
    v10 += 8;
    if (v10 == v11)
    {
      v12 = 0;
      goto LABEL_11;
    }
  }
  v12 = *(_QWORD *)v10;
LABEL_11:
  v10 = v14;
  if (v14)
  {
LABEL_12:
    v15 = v10;
    operator delete(v10);
  }
  return v12 != 0;
}

void sub_20C3A60A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v6 = *(_QWORD *)(v5 + 24);
  sub_20C3AE3AC(a2, a3, &v12);
  v8 = v12;
  v9 = v13;
  if (v12 == v13)
  {
    v10 = 0;
    if (!v12)
      return v10 != 0;
    goto LABEL_12;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v6 + 40), *(_QWORD *)(*(_QWORD *)v8 + 8), v7) & 1) == 0)
  {
    v8 += 8;
    if (v8 == v9)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  v10 = *(_QWORD *)v8;
LABEL_11:
  v8 = v12;
  if (v12)
  {
LABEL_12:
    v13 = v8;
    operator delete(v8);
  }
  return v10 != 0;
}

void sub_20C3A6184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v6 = *(_QWORD *)(v5 + 24);
  sub_20C3AE3FC(a2, a3, &v12);
  v8 = v12;
  v9 = v13;
  if (v12 == v13)
  {
    v10 = 0;
    if (!v12)
      return v10 != 0;
    goto LABEL_12;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v6 + 40), *(_QWORD *)(*(_QWORD *)v8 + 8), v7) & 1) == 0)
  {
    v8 += 8;
    if (v8 == v9)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  v10 = *(_QWORD *)v8;
LABEL_11:
  v8 = v12;
  if (v12)
  {
LABEL_12:
    v13 = v8;
    operator delete(v8);
  }
  return v10 != 0;
}

void sub_20C3A6260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetVersionIfIsInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned int *a3)
{
  uint64_t v4;

  v4 = sub_20C3A5F5C((uint64_t)this, a2);
  if (v4)
    *a3 = *(_DWORD *)(v4 + 24);
  return v4 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v2 = (uint64_t)a2;
  if (a2)
  {
    v3 = sub_20C39CA24(a1, a2);
    v6 = 0;
    v7 = 0;
    v5 = 0;
    sub_20BFE538C(&v5, *(uint64_t **)(v3 + 56), *(uint64_t **)(v3 + 64), (uint64_t)(*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56)) >> 3);
    if (v5 == v6)
      v2 = 0;
    else
      v2 = sub_20C3A638C((size_t)&v5, v2);
    v8 = (void **)&v5;
    sub_20BEEB2B8(&v8);
  }
  return v2;
}

void sub_20C3A633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;

  v4 = sub_20C39CA24((uint64_t)this, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return sub_20BFE538C(a3, *(uint64_t **)(v4 + 56), *(uint64_t **)(v4 + 64), (uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 3);
}

uint64_t sub_20C3A638C(size_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *EmptyString;
  const char *v16;
  int v17;
  size_t v18;
  size_t v19;
  const char *v20;
  _QWORD *v22;
  _QWORD *v23;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 == 5)
  {
    v23 = *(_QWORD **)a1;
    v22 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 != v22)
    {
      while ((*v23 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v23 == v22)
        {
          v23 = *(_QWORD **)(a1 + 8);
          return v23 != v22;
        }
      }
    }
    return v23 != v22;
  }
  else
  {
    if (v3 != 6)
      return 0;
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 == v5)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        v6 = atomic_load((unsigned __int8 *)&qword_254988828);
        if ((v6 & 1) == 0)
        {
          a1 = __cxa_guard_acquire(&qword_254988828);
          if ((_DWORD)a1)
          {
            byte_254988820 = sub_20C377708();
            __cxa_guard_release(&qword_254988828);
          }
        }
        v7 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (v7)
          v8 = *(char *)(v7 + 39) < 0 ? *(_QWORD *)(v7 + 24) : *(unsigned __int8 *)(v7 + 39);
        else
          v8 = 0;
        v9 = *v4 & 0xFFFFFFFFFFFFFFF8;
        if (v9)
        {
          v10 = *(char *)(v9 + 39);
          v11 = *(unsigned __int8 *)(v9 + 39);
          v12 = v10 < 0 ? *(_QWORD *)(v9 + 24) : *(unsigned __int8 *)(v9 + 39);
          if (v12 > v8)
          {
            v13 = (unint64_t *)(v9 + 16);
            v14 = v9 + 16;
            if (v10 < 0)
              v14 = *v13;
            if (*(unsigned __int8 *)(v14 + v8) == byte_254988820)
            {
              if (v7)
              {
                EmptyString = (uint64_t *)(v7 + 16);
              }
              else
              {
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
                v11 = *(unsigned __int8 *)(v9 + 39);
              }
              v16 = *((char *)EmptyString + 23) >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
              v17 = (char)v11;
              v18 = (v11 & 0x80u) == 0 ? v11 : *(_QWORD *)(v9 + 24);
              a1 = strlen(v16);
              if (v18 >= a1)
              {
                v19 = a1;
                v20 = v17 >= 0 ? (const char *)v13 : (const char *)*v13;
                a1 = strncmp(v20, v16, v19);
                if (!(_DWORD)a1)
                  break;
              }
            }
          }
        }
        if (++v4 == v5)
          return 0;
      }
      return 1;
    }
  }
}

void sub_20C3A654C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988828);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t v5;
  _BOOL8 v6;
  char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char v12;
  char **v13;

  if (!*(_QWORD *)a3)
  {
    v8 = "usd/prim.cpp";
    v9 = "_HasAPIInstance";
    v10 = 329;
    v11 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance(const UsdSchemaRegistry::SchemaInfo *, const TfToken &) const";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
    return 0;
  }
  if (!a2)
    return 0;
  v5 = sub_20C39CA24(a1, a2);
  v9 = 0;
  v10 = 0;
  v8 = 0;
  sub_20BFE538C(&v8, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 3);
  v6 = v8 != v9 && sub_20C3A665C((uint64_t)&v8, a2, a3);
  v13 = &v8;
  sub_20BEEB2B8((void ***)&v13);
  return v6;
}

void sub_20C3A6644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C3A665C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 result;
  unsigned int *v7;
  unsigned int v8;
  void *__p;
  char v10;
  uint64_t v11;

  if (*((_DWORD *)this + 7) != 6)
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  if (v10 < 0)
    operator delete(__p);
  v5 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v4)
  {
    while ((*v5 & 0xFFFFFFFFFFFFFFF8) != (v11 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v5 == v4)
      {
        v5 = *(_QWORD **)(a1 + 8);
        break;
      }
    }
  }
  result = v5 != v4;
  if ((v11 & 7) != 0)
  {
    v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

void sub_20C3A6718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)this, SchemaInfo, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)this, SchemaInfo, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)this, SchemaInfo, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_20C3A6878((uint64_t)this, a2) != 0;
}

uint64_t sub_20C3A6878(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unint64_t v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *SchemaInfosInFamily;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v3 = sub_20C39CA24(a1, a2);
  v11 = 0;
  v12 = 0;
  v10 = 0;
  sub_20BFE538C(&v10, *(uint64_t **)(v3 + 56), *(uint64_t **)(v3 + 64), (uint64_t)(*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56)) >> 3);
  if (v10 != v11)
  {
    SchemaInfosInFamily = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, v4);
    v6 = (uint64_t *)*SchemaInfosInFamily;
    v7 = (uint64_t *)SchemaInfosInFamily[1];
    while (v6 != v7)
    {
      if ((sub_20C3A638C((size_t)&v10, *v6) & 1) != 0)
      {
        v8 = *v6;
        goto LABEL_7;
      }
      ++v6;
    }
  }
  v8 = 0;
LABEL_7:
  v13 = (void **)&v10;
  sub_20BEEB2B8(&v13);
  return v8;
}

void sub_20C3A691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return sub_20C3A6964((uint64_t)this, a3, a2) != 0;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C3A6964(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a3)
{
  unint64_t v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *SchemaInfosInFamily;
  pxrInternal__aapl__pxrReserved__::SdfPath **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath **v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  char **v17;

  if (*(_QWORD *)a2)
  {
    v5 = sub_20C39CA24(a1, a2);
    v13 = 0;
    v14 = 0;
    v12 = 0;
    sub_20BFE538C(&v12, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 3);
    if (v12 != v13)
    {
      SchemaInfosInFamily = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a3, v6);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)*SchemaInfosInFamily;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)SchemaInfosInFamily[1];
      while (v8 != v9)
      {
        if (sub_20C3A665C((uint64_t)&v12, *v8, a2))
        {
          v10 = *v8;
          goto LABEL_8;
        }
        ++v8;
      }
    }
    v10 = 0;
LABEL_8:
    v17 = &v12;
    sub_20BEEB2B8((void ***)&v17);
  }
  else
  {
    v12 = "usd/prim.cpp";
    v13 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
    v14 = 428;
    v15 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstan"
          "ce(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrR"
          "eserved__::TfToken>]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
    return 0;
  }
  return v10;
}

void sub_20C3A6A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  sub_20BEEB2B8(&a14);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, int a4)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = sub_20C39CA24(a1, a2);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  sub_20BFE538C(&v14, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3);
  if (v14 == v15)
  {
    v10 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a3, a4, &v12);
    v8 = (uint64_t *)v12;
    v9 = (uint64_t *)v13;
    if (v12 == v13)
    {
      v10 = 0;
      if (!v12)
        goto LABEL_12;
      goto LABEL_11;
    }
    while ((sub_20C3A638C((size_t)&v14, *v8) & 1) == 0)
    {
      if (++v8 == v9)
      {
        v10 = 0;
        goto LABEL_10;
      }
    }
    v10 = *v8;
LABEL_10:
    v8 = (uint64_t *)v12;
    if (v12)
    {
LABEL_11:
      v13 = (void **)v8;
      operator delete(v8);
    }
  }
LABEL_12:
  v12 = (void **)&v14;
  sub_20BEEB2B8(&v12);
  return v10 != 0;
}

void sub_20C3A6B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  sub_20BEEB2B8((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, int a4, pxrInternal__aapl__pxrReserved__::TfToken *a5)
{
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfPath **v10;
  void **v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  void **v14;
  void **v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;

  if (*(_QWORD *)a5)
  {
    v9 = sub_20C39CA24(a1, a2);
    v17 = 0;
    v18 = 0;
    v16 = 0;
    sub_20BFE538C(&v16, *(uint64_t **)(v9 + 56), *(uint64_t **)(v9 + 64), (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 3);
    if (v16 == v17)
    {
      v12 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a3, a4, &v14);
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v14;
      v11 = v15;
      if (v14 == v15)
      {
        v12 = 0;
        if (!v14)
          goto LABEL_14;
      }
      else
      {
        while (!sub_20C3A665C((uint64_t)&v16, *v10, a5))
        {
          if (++v10 == (pxrInternal__aapl__pxrReserved__::SdfPath **)v11)
          {
            v12 = 0;
            goto LABEL_12;
          }
        }
        v12 = *v10;
LABEL_12:
        v10 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v14;
        if (!v14)
          goto LABEL_14;
      }
      v15 = (void **)v10;
      operator delete(v10);
    }
LABEL_14:
    v14 = (void **)&v16;
    sub_20BEEB2B8(&v14);
    return v12 != 0;
  }
  v16 = "usd/prim.cpp";
  v17 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
  v18 = 428;
  v19 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstance"
        "(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrReser"
        "ved__::TfToken, unsigned int, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::VersionPolicy>]";
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
  v12 = 0;
  return v12 != 0;
}

void sub_20C3A6CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 56) = &a13;
  sub_20BEEB2B8((void ***)(v13 - 56));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_20C39CA24(a1, a2);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  sub_20BFE538C(&v12, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 3);
  if (v12 == v13)
  {
    v8 = 0;
  }
  else
  {
    sub_20C3AE3AC(a2, a3, &v10);
    v6 = (uint64_t *)v10;
    v7 = (uint64_t *)v11;
    if (v10 == v11)
    {
      v8 = 0;
      if (!v10)
        goto LABEL_12;
      goto LABEL_11;
    }
    while ((sub_20C3A638C((size_t)&v12, *v6) & 1) == 0)
    {
      if (++v6 == v7)
      {
        v8 = 0;
        goto LABEL_10;
      }
    }
    v8 = *v6;
LABEL_10:
    v6 = (uint64_t *)v10;
    if (v10)
    {
LABEL_11:
      v11 = (void **)v6;
      operator delete(v6);
    }
  }
LABEL_12:
  v10 = (void **)&v12;
  sub_20BEEB2B8(&v10);
  return v8 != 0;
}

void sub_20C3A6DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  sub_20BEEB2B8((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath **v8;
  void **v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  void **v12;
  void **v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  if (*(_QWORD *)a4)
  {
    v7 = sub_20C39CA24(a1, a2);
    v15 = 0;
    v16 = 0;
    v14 = 0;
    sub_20BFE538C(&v14, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3);
    if (v14 == v15)
    {
      v10 = 0;
    }
    else
    {
      sub_20C3AE3AC(a2, a3, &v12);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
      v9 = v13;
      if (v12 == v13)
      {
        v10 = 0;
        if (!v12)
          goto LABEL_14;
      }
      else
      {
        while (!sub_20C3A665C((uint64_t)&v14, *v8, a4))
        {
          if (++v8 == (pxrInternal__aapl__pxrReserved__::SdfPath **)v9)
          {
            v10 = 0;
            goto LABEL_12;
          }
        }
        v10 = *v8;
LABEL_12:
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
        if (!v12)
          goto LABEL_14;
      }
      v13 = (void **)v8;
      operator delete(v8);
    }
LABEL_14:
    v12 = (void **)&v14;
    sub_20BEEB2B8(&v12);
    return v10 != 0;
  }
  v14 = "usd/prim.cpp";
  v15 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
  v16 = 428;
  v17 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstance"
        "(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrReser"
        "ved__::TfType, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::VersionPolicy>]";
  v18 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
  v10 = 0;
  return v10 != 0;
}

void sub_20C3A6F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  sub_20BEEB2B8((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_20C39CA24(a1, a2);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  sub_20BFE538C(&v12, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 3);
  if (v12 == v13)
  {
    v8 = 0;
  }
  else
  {
    sub_20C3AE3FC(a2, a3, &v10);
    v6 = (uint64_t *)v10;
    v7 = (uint64_t *)v11;
    if (v10 == v11)
    {
      v8 = 0;
      if (!v10)
        goto LABEL_12;
      goto LABEL_11;
    }
    while ((sub_20C3A638C((size_t)&v12, *v6) & 1) == 0)
    {
      if (++v6 == v7)
      {
        v8 = 0;
        goto LABEL_10;
      }
    }
    v8 = *v6;
LABEL_10:
    v6 = (uint64_t *)v10;
    if (v10)
    {
LABEL_11:
      v11 = (void **)v6;
      operator delete(v6);
    }
  }
LABEL_12:
  v10 = (void **)&v12;
  sub_20BEEB2B8(&v10);
  return v8 != 0;
}

void sub_20C3A706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  sub_20BEEB2B8((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath **v8;
  void **v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  void **v12;
  void **v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  if (*(_QWORD *)a4)
  {
    v7 = sub_20C39CA24(a1, a2);
    v15 = 0;
    v16 = 0;
    v14 = 0;
    sub_20BFE538C(&v14, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3);
    if (v14 == v15)
    {
      v10 = 0;
    }
    else
    {
      sub_20C3AE3FC(a2, a3, &v12);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
      v9 = v13;
      if (v12 == v13)
      {
        v10 = 0;
        if (!v12)
          goto LABEL_14;
      }
      else
      {
        while (!sub_20C3A665C((uint64_t)&v14, *v8, a4))
        {
          if (++v8 == (pxrInternal__aapl__pxrReserved__::SdfPath **)v9)
          {
            v10 = 0;
            goto LABEL_12;
          }
        }
        v10 = *v8;
LABEL_12:
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
        if (!v12)
          goto LABEL_14;
      }
      v13 = (void **)v8;
      operator delete(v8);
    }
LABEL_14:
    v12 = (void **)&v14;
    sub_20BEEB2B8(&v12);
    return v10 != 0;
  }
  v14 = "usd/prim.cpp";
  v15 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
  v16 = 428;
  v17 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstance"
        "(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrReser"
        "ved__::TfToken, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::VersionPolicy>]";
  v18 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
  v10 = 0;
  return v10 != 0;
}

void sub_20C3A71D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  sub_20BEEB2B8((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetVersionIfHasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned int *a3)
{
  uint64_t v4;

  v4 = sub_20C3A6878((uint64_t)this, a2);
  if (v4)
    *a3 = *(_DWORD *)(v4 + 24);
  return v4 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetVersionIfHasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, unsigned int *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;

  v5 = sub_20C3A6964((uint64_t)this, a3, a2);
  if (v5)
    *a4 = *((_DWORD *)v5 + 6);
  return v5 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, uint64_t a3)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  result = sub_20C3A7360("CanApplyAPI", (uint64_t)a2, a3);
  if ((_DWORD)result)
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v7) & 1) != 0)
    {
      v9 = *((_QWORD *)a1 + 1);
      if (!v9 || (*(_BYTE *)(v9 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v9, v8);
      v10 = (char *)(*(_QWORD *)(v9 + 24) + 40);
      v13 = 0;
      result = sub_20C3A7478(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, a3);
      if ((v13 & 7) != 0)
      {
        v11 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
    }
    else
    {
      if (a3)
        MEMORY[0x212B929D0](a3, "Prim is not valid.");
      return 0;
    }
  }
  return result;
}

BOOL sub_20C3A7360(const char *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t TypeName;
  const char *v7;
  char *v8;
  uint64_t v9;
  void **v10;
  _QWORD v12[4];
  char v13;
  void *__p[2];
  uint64_t v15;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 != 5)
  {
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a2 + 8));
    if (*(char *)(TypeName + 23) >= 0)
      v9 = TypeName;
    else
      v9 = *(_QWORD *)TypeName;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Provided schema type %s is not a single-apply API schema.", v7, v8, v9);
    v12[0] = "usd/prim.cpp";
    v12[1] = "_ValidateIsSingleApplyAPI";
    v12[2] = 609;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateIsSingleApplyAPI(const char *, const UsdSchemaRegistry::Sch"
             "emaInfo &, std::string *)";
    v13 = 0;
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v10);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 16) = v15;
    }
    else if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
    }
  }
  return v3 == 5;
}

void sub_20C3A745C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3A7478(char *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t *APISchemaCanOnlyApplyToTypeNames;
  std::string **v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  std::string *v11;
  std::string *v12;
  uint64_t TypeFromSchemaTypeName;
  char *v14;
  int v15;
  void **v16;
  const char *v17;
  char *v18;
  void **v19;
  std::string *p_p;
  std::string __p;
  void *v23[2];
  char v24;
  __int128 v25;
  uint64_t v26;

  APISchemaCanOnlyApplyToTypeNames = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaCanOnlyApplyToTypeNames(a2, a3, a3);
  if (*APISchemaCanOnlyApplyToTypeNames == APISchemaCanOnlyApplyToTypeNames[1])
    return 1;
  v9 = (std::string **)APISchemaCanOnlyApplyToTypeNames;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
  if (*(_QWORD *)a1 != (_QWORD)v25)
  {
    v11 = *v9;
    v12 = v9[1];
    while (v11 != v12)
    {
      TypeFromSchemaTypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v11, v10);
      if ((pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, TypeFromSchemaTypeName, v14) & 1) != 0)
        return 1;
      v11 = (std::string *)((char *)v11 + 8);
    }
  }
  if (a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, a3, (uint64_t)v23);
    v15 = v24;
    v16 = (void **)v23[0];
    sub_20C3AD8D0(", ", *v9, v9[1], &__p);
    if (v15 >= 0)
      v19 = v23;
    else
      v19 = v16;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"API schema '%s' can only be applied to prims of the following types: %s.", v17, v18, v19, p_p);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v25;
    *(_QWORD *)(a4 + 16) = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  return 0;
}

void sub_20C3A75D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  const char *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  char v23;

  if (!sub_20C3A77CC("CanApplyAPI", (uint64_t)a2, a4))
    return 0;
  if (!*(_QWORD *)a3)
  {
    *(_QWORD *)&v20 = "usd/prim.cpp";
    *((_QWORD *)&v20 + 1) = "_CanApplyMultipleApplyAPI";
    v21 = 724;
    v22 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo "
          "&, const TfToken &, std::string *) const";
    v23 = 0;
    v14 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"CanApplyAPI: for multiple apply API schema %s, a non-empty instance name must be provided.", v15);
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v8) & 1) == 0)
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Prim is not valid.");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(a2, a3, v9))
  {
    if (a4)
    {
      v16 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        v17 = (const char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0)
          v17 = *(const char **)v17;
      }
      else
      {
        v17 = "";
      }
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not an allowed instance name for multiple apply API schema '%s'.", v10, v11, v17, v19);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v21;
    }
    return 0;
  }
  v12 = *((_QWORD *)a1 + 1);
  if (!v12 || (*(_BYTE *)(v12 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  return sub_20C3A7478((char *)(*(_QWORD *)(v12 + 24) + 40), a2, a3, a4);
}

BOOL sub_20C3A77CC(const char *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t TypeName;
  const char *v7;
  char *v8;
  uint64_t v9;
  void **v10;
  _QWORD v12[4];
  char v13;
  void *__p[2];
  uint64_t v15;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 != 6)
  {
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a2 + 8));
    if (*(char *)(TypeName + 23) >= 0)
      v9 = TypeName;
    else
      v9 = *(_QWORD *)TypeName;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Provided schema type %s is not a multiple-apply API schema.", v7, v8, v9);
    v12[0] = "usd/prim.cpp";
    v12[1] = "_ValidateIsMultipleApplyAPI";
    v12[2] = 628;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateIsMultipleApplyAPI(const char *, const UsdSchemaRegistry::S"
             "chemaInfo &, std::string *)";
    v13 = 0;
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v10);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 16) = v15;
    }
    else if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
    }
  }
  return v3 == 6;
}

void sub_20C3A78C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a3);
  sub_20C3A7950("CanApplyAPI", a2, a3);
  return 0;
}

{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a3);
  sub_20C3A7B34("CanApplyAPI", (const char *)a2, a3);
  return 0;
}

void sub_20C3A7950(const char *a1, pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a3)
{
  uint64_t TypeName;
  const char *v6;
  char *v7;
  uint64_t v8;
  void **v9;
  _QWORD v10[4];
  char v11;
  void *__p[2];
  uint64_t v13;

  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  if (*(char *)(TypeName + 23) >= 0)
    v8 = TypeName;
  else
    v8 = *(_QWORD *)TypeName;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find a valid schema for the provided schema type '%s'", v6, v7, v8);
  v10[0] = "usd/prim.cpp";
  v10[1] = "_ReportInvalidSchemaError";
  v10[2] = 560;
  v10[3] = "void pxrInternal__aapl__pxrReserved__::_ReportInvalidSchemaError(const char *, const TfType &, std::string *)";
  v11 = 0;
  if (v13 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v9);
  if (a3)
  {
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else if (SHIBYTE(v13) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_20C3A7A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a3, a4);
  sub_20C3A7950("CanApplyAPI", a2, a4);
  return 0;
}

{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a3, a4);
  sub_20C3A7B34("CanApplyAPI", (const char *)a2, a4);
  return 0;
}

{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a4);
  sub_20C3A7D34("CanApplyAPI", (const char *)a2, (char *)a3, a4);
  return 0;
}

void sub_20C3A7B34(const char *a1, const char *a2, uint64_t a3)
{
  unint64_t v5;
  const char *v6;
  void **v7;
  _QWORD v8[4];
  char v9;
  void *__p[2];
  uint64_t v11;

  v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(const char **)v6;
  }
  else
  {
    v6 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find a valid schema for the provided schema identifier '%s'", a2, (char *)a3, v6);
  v8[0] = "usd/prim.cpp";
  v8[1] = "_ReportInvalidSchemaError";
  v8[2] = 575;
  v8[3] = "void pxrInternal__aapl__pxrReserved__::_ReportInvalidSchemaError(const char *, const TfToken &, std::string *)";
  v9 = 0;
  if (v11 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v7);
  if (a3)
  {
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_20C3A7C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C3A7D34(const char *a1, const char *a2, char *a3, uint64_t a4)
{
  unint64_t v6;
  const char *v7;
  void **v8;
  _QWORD v9[4];
  char v10;
  void *__p[2];
  uint64_t v12;

  v6 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find a valid schema for the provided schema family '%s' and version '%u", a2, a3, v7, a3);
  v9[0] = "usd/prim.cpp";
  v9[1] = "_ReportInvalidSchemaError";
  v9[2] = 591;
  v9[3] = "void pxrInternal__aapl__pxrReserved__::_ReportInvalidSchemaError(const char *, const TfToken &, UsdSchemaVersi"
          "on, std::string *)";
  v10 = 0;
  if (v12 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v8);
  if (a4)
  {
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 16) = v12;
  }
  else if (SHIBYTE(v12) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_20C3A7E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a4, a5);
  sub_20C3A7D34("CanApplyAPI", (const char *)a2, (char *)a3, a5);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  std::string *p_p;
  std::string __p;
  _QWORD v8[4];
  char v9;

  if (sub_20C3A7360("ApplyAPI", (uint64_t)a2, 0))
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v4) & 1) != 0)
      return pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(a1, a2);
    v8[0] = "usd/prim.cpp";
    v8[1] = "_ApplySingleApplyAPI";
    v8[2] = 859;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(const UsdSchemaRegistry::SchemaInfo &) const";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription((pxrInternal__aapl__pxrReserved__ **)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim '%s'", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_20C3A7FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  const char *Text;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t *EditTarget;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t Identifier;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v33;
  _QWORD *v34;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int *v40;
  unsigned int v41;
  char v42;
  unsigned int *v43;
  unsigned int v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v56;
  const char ***v57;
  char v58;
  const char **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v4, this, &v56);
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v56))
  {
    v15 = sub_20C0B0CA4(&v56);
    v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v16)
      v16 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v15, v16, &v59);
    sub_20C3A9394((uint64_t *)&v59, (char *)&v45);
    sub_20BF4C2D8((uint64_t)&v59);
    if ((_BYTE)v45)
    {
      v17 = v46;
      v18 = v47;
      if (v46 == (const char *)v47)
      {
        v19 = v46;
      }
      else
      {
        v19 = v46;
        while ((*v19 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v19 == (_QWORD *)v47)
          {
            v19 = (_QWORD *)v47;
            break;
          }
        }
      }
      if (v19 != (_QWORD *)v47)
        goto LABEL_51;
      v23 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 7) != 0)
      {
        v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 2, v24));
        if ((v25 & 1) == 0)
          v23 &= 0xFFFFFFFFFFFFFFF8;
      }
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v57 = &v59;
      v58 = 0;
      v26 = (uint64_t *)operator new(8uLL);
      v59 = (const char **)v26;
      v60 = v26;
      *v26 = v23;
      v61 = v26 + 1;
      if ((v23 & 7) != 0)
      {
        v27 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 2, v27));
        if ((v28 & 1) == 0)
          *v26 &= 0xFFFFFFFFFFFFFFF8;
      }
      v60 = v26 + 1;
      v29 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations((unsigned __int8 *)&v45, 0, (v18 - (uint64_t)v17) >> 3, 0, (uint64_t **)&v59);
      v57 = &v59;
      sub_20BEEB2B8((void ***)&v57);
      if ((v23 & 7) != 0)
      {
        v30 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((v29 & 1) != 0)
      {
LABEL_41:
        v32 = sub_20C0B0CA4(&v56);
        v33 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v33)
          v33 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        sub_20C035104((char *)&v45, (pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v32, v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        sub_20BF4C2D8((uint64_t)&v59);
LABEL_51:
        v14 = 1;
LABEL_52:
        v59 = (const char **)&v55;
        sub_20BEEB2B8((void ***)&v59);
        v59 = (const char **)&v54;
        sub_20BEEB2B8((void ***)&v59);
        v59 = (const char **)&v52;
        sub_20BEEB2B8((void ***)&v59);
        v59 = (const char **)&v50;
        sub_20BEEB2B8((void ***)&v59);
        v59 = (const char **)&v49;
        sub_20BEEB2B8((void ***)&v59);
        v59 = &v46;
        sub_20BEEB2B8((void ***)&v59);
        goto LABEL_53;
      }
    }
    else
    {
      v20 = v50;
      v21 = v51;
      if (v50 == v51)
      {
        v22 = v50;
      }
      else
      {
        v22 = v50;
        while ((*v22 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v22 == v51)
          {
            v22 = v51;
            break;
          }
        }
      }
      if (v22 != v51)
        goto LABEL_51;
      v34 = v52;
      if (v52 != v53)
      {
        while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v34 == v53)
          {
            v34 = v53;
            break;
          }
        }
      }
      if (v34 != v53)
        goto LABEL_51;
      v36 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 7) != 0)
      {
        v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 2, v37));
        if ((v38 & 1) == 0)
          v36 &= 0xFFFFFFFFFFFFFFF8;
      }
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v57 = &v59;
      v58 = 0;
      v39 = (uint64_t *)operator new(8uLL);
      v59 = (const char **)v39;
      v60 = v39;
      *v39 = v36;
      v61 = v39 + 1;
      if ((v36 & 7) != 0)
      {
        v40 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 2, v40));
        if ((v41 & 1) == 0)
          *v39 &= 0xFFFFFFFFFFFFFFF8;
      }
      v60 = v39 + 1;
      v42 = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations((unsigned __int8 *)&v45, 4, v21 - v20, 0, (uint64_t **)&v59);
      v57 = &v59;
      sub_20BEEB2B8((void ***)&v57);
      if ((v36 & 7) != 0)
      {
        v43 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((v42 & 1) != 0)
        goto LABEL_41;
    }
    v14 = 0;
    goto LABEL_52;
  }
  v45 = "usd/prim.cpp";
  v46 = "AddAppliedSchema";
  v47 = 1104;
  v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(const TfToken &) const";
  v49 = 0;
  sub_20C348EEC((uint64_t)this, (int *)&v59);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
  v7 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)this + 1);
  if (!v7 || (*((_BYTE *)v7 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v7, v5);
  EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v7);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(EditTarget);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
  if (*(char *)(Identifier + 23) >= 0)
    v12 = Identifier;
  else
    v12 = *(_QWORD *)Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__ *)"Unable to create primSpec at path <%s> in edit target '%s'. Failed to add applied API schema.", v11, Text, v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_20BFD265C(&v59);
  v14 = 0;
LABEL_53:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v56);
  return v14;
}

void sub_20C3A8494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  va_list va;

  va_start(va, a3);
  *(_QWORD *)(v6 - 96) = v5;
  sub_20BEEB2B8((void ***)(v6 - 96));
  if (v4)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  sub_20C03507C((void **)va);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v6 - 104));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(pxrInternal__aapl__pxrReserved__ **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  std::string *v12;
  std::string v13;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;

  result = sub_20C3A77CC("ApplyAPI", (uint64_t)a2, 0);
  if (!(_DWORD)result)
    return result;
  if (!*(_QWORD *)a3)
  {
    __p = "usd/prim.cpp";
    v15 = "_ApplyMultipleApplyAPI";
    v16 = 880;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo &, "
          "const TfToken &) const";
    v18 = 0;
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"ApplyAPI: for mutiple apply API schema %s, a non-empty instance name must be provided.", v11);
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, v7) & 1) == 0)
  {
    __p = "usd/prim.cpp";
    v15 = "_ApplyMultipleApplyAPI";
    v16 = 894;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo &, "
          "const TfToken &) const";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(a1, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v13;
    else
      v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim '%s'", (const char *)v12);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  result = pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13);
  if ((v13.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v8 = (unsigned int *)(v13.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

void sub_20C3A8724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t __p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  unsigned int *v22;
  unsigned int v23;

  if ((__p & 7) != 0)
  {
    v22 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(this, SchemaInfo);
  sub_20C3A7950("ApplyAPI", a2, 0);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__ **this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(this, SchemaInfo, a3);
  sub_20C3A7950("ApplyAPI", a2, 0);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(this, SchemaInfo);
  sub_20C3A7B34("ApplyAPI", (const char *)a2, 0);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__ **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(this, SchemaInfo, a3);
  sub_20C3A7B34("ApplyAPI", (const char *)a2, 0);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(this, SchemaInfo);
  sub_20C3A7D34("ApplyAPI", (const char *)a2, (char *)a3, 0);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__ **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(this, SchemaInfo, a4);
  sub_20C3A7D34("ApplyAPI", (const char *)a2, (char *)a3, 0);
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _BOOL8 result;

  result = sub_20C3A7360("RemoveAPI", (uint64_t)a2, 0);
  if (result)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(a1, a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  const char *Text;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t *EditTarget;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t Identifier;
  char *v11;
  uint64_t v12;
  void *v13;
  _BOOL8 v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v25;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v26;
  uint64_t **v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  uint64_t v29;
  const char *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v31;
  const char *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  void ***v37;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v58;
  char *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  char v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  char v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v4, this, &v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v58))
  {
    v64 = "usd/prim.cpp";
    v65 = "RemoveAppliedSchema";
    v66 = 1163;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(const TfToken &) const";
    v68 = 0;
    sub_20C348EEC((uint64_t)this, &v50);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v7 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)this + 1);
    if (!v7 || (*((_BYTE *)v7 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v7, v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v7);
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(EditTarget);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
    if (*(char *)(Identifier + 23) >= 0)
      v12 = Identifier;
    else
      v12 = *(_QWORD *)Identifier;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Unable to create primSpec at path <%s> in edit target '%s'. Failed to remove applied API schema.", v11, Text, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_20BFD265C(&v50);
    v14 = 0;
  }
  else
  {
    v15 = sub_20C0B0CA4(&v58);
    v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v16)
      v16 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v15, v16, &v64);
    sub_20C3A9394((uint64_t *)&v64, (char *)&v50);
    sub_20BF4C2D8((uint64_t)&v64);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v43);
    v17 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v59 = (char *)&v64;
    LOBYTE(v60) = 0;
    v20 = (uint64_t *)operator new(8uLL);
    v64 = (char *)v20;
    v65 = (const char *)v20;
    *v20 = v17;
    v66 = (uint64_t)(v20 + 1);
    if ((v17 & 7) != 0)
    {
      v21 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        *v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    v65 = (const char *)(v20 + 1);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems((unsigned __int8 *)&v43, (uint64_t **)&v64);
    v59 = (char *)&v64;
    sub_20BEEB2B8((void ***)&v59);
    if ((v17 & 7) != 0)
    {
      v23 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(&v43, &v64, (uint64_t)&v50);
    v14 = v69 != 0;
    if (v69)
    {
      v25 = sub_20C0B0CA4(&v58);
      v26 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v26)
        v26 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v60 = (const char *)&off_24C526D80;
      sub_20C036F00((unsigned int **)&v59, (uint64_t)&v64);
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v25, v26, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
      sub_20BF4C2D8((uint64_t)&v59);
    }
    else
    {
      v59 = "usd/prim.cpp";
      v60 = "RemoveAppliedSchema";
      v61 = 1183;
      v62 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(const TfToken &) const";
      v63 = 0;
      v27 = (uint64_t **)sub_20C0B0CA4(&v58);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v27, &v41);
      v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v41);
      v29 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v28);
      if (*(char *)(v29 + 23) >= 0)
        v30 = (const char *)v29;
      else
        v30 = *(const char **)v29;
      v31 = sub_20C0B0CA4(&v58);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v31, &v39);
      v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to apply list op edits to 'apiSchemas' on spec at path <%s> in layer '%s'", v30, v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
      sub_20BFD265C(&v39);
      v33 = v42;
      if (v42)
      {
        v34 = (unsigned int *)(v42 + 8);
        do
        {
          v35 = __ldxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
    }
    v37 = (void ***)sub_20C39529C((uint64_t)&v64);
    v64 = (char *)&v49;
    sub_20BEEB2B8(v37);
    v64 = (char *)&v48;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v47;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v46;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v45;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v44;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v57;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v56;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v55;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v54;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v53;
    sub_20BEEB2B8((void ***)&v64);
    v64 = (char *)&v52;
    sub_20BEEB2B8((void ***)&v64);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v58);
  return v14;
}

void sub_20C3A8E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _BOOL8 result;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  const char *v14;
  char v15;

  result = sub_20C3A77CC("RemoveAPI", (uint64_t)a2, 0);
  if (result)
  {
    if (*(_QWORD *)a3)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, a3, (uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      result = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11);
      if ((v11 & 7) != 0)
      {
        v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
    }
    else
    {
      __p[0] = "usd/prim.cpp";
      __p[1] = "_RemoveMultipleApplyAPI";
      v13 = 1005;
      v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo "
            "&, const TfToken &) const";
      v15 = 0;
      v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0)
          v10 = *(const char **)v10;
      }
      else
      {
        v10 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"RemoveAPI: for mutiple apply API schema %s, a non-empty instance name must be provided.", v10);
      return 0;
    }
  }
  return result;
}

void sub_20C3A90E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  unsigned int *v17;
  unsigned int v18;

  if ((a11 & 7) != 0)
  {
    v17 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(this, SchemaInfo);
  sub_20C3A7950("RemoveAPI", a2, 0);
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(this, SchemaInfo, a3);
  sub_20C3A7950("RemoveAPI", a2, 0);
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(this, SchemaInfo);
  sub_20C3A7B34("RemoveAPI", (const char *)a2, 0);
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(this, SchemaInfo, a3);
  sub_20C3A7B34("RemoveAPI", (const char *)a2, 0);
  return 0;
}

{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(this, SchemaInfo);
  sub_20C3A7D34("RemoveAPI", (const char *)a2, (char *)a3, 0);
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(this, SchemaInfo, a4);
  sub_20C3A7D34("RemoveAPI", (const char *)a2, (char *)a3, 0);
  return 0;
}

char *sub_20C3A9394@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5;

  if ((sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) != 0)
    return sub_20C3AE4C8(a1, a2);
  v5 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C3AE4C4, (uint64_t)&stru_24C524D40);
  return (char *)sub_20C0366AC((uint64_t)a2, v5);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData **v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  unsigned int **v9;
  unsigned int **v10;
  _DWORD *v11;
  int DefiningSpecType;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7 || (*(_BYTE *)(v7 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v8 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v7;
  sub_20C3A960C(a3, (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  v9 = *(unsigned int ***)a2;
  v10 = (unsigned int **)*((_QWORD *)a2 + 1);
  if (*(unsigned int ***)a2 != v10)
  {
    v11 = (_DWORD *)(a1 + 16);
    do
    {
      DefiningSpecType = pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(v8, *v6, v9);
      if (DefiningSpecType == 1)
      {
        sub_20C37F4B0((uint64_t)&v17, 3, (uint64_t *)v6, v11, (uint64_t *)v9);
        sub_20C3A969C(a3, (uint64_t)&v17);
        if ((v20 & 7) != 0)
        {
          v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
      }
      else
      {
        if (DefiningSpecType != 8)
        {
          v17 = "usd/prim.cpp";
          v18 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_MakeProperties";
          v19 = 1199;
          v20 = (unint64_t)"std::vector<UsdProperty> pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(co"
                                  "nst TfTokenVector &) const";
          v21 = 0;
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "specType == SdfSpecTypeRelationship", 0) & 1) == 0)goto LABEL_17;
        }
        sub_20C37F4B0((uint64_t)&v17, 4, (uint64_t *)v6, v11, (uint64_t *)v9);
        sub_20C3A969C(a3, (uint64_t)&v17);
        if ((v20 & 7) != 0)
        {
          v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
      sub_20BFD265C(&v19);
      if (v18)
        sub_20C35C614(v18);
LABEL_17:
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_20C3A95BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37FA04((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C3A960C(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20C3AE668(a1, v7);
    return sub_20C3AE86C(v7);
  }
  return result;
}

void sub_20C3A9688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AE86C((void **)va);
  _Unwind_Resume(a1);
}

void *sub_20C3A969C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_20BDDF694();
    v10 = v4 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v9];
    v17 = &v13[32 * v12];
    sub_20C3AE790(v5, (uint64_t)v15, a2);
    v16 = v15 + 32;
    sub_20C3AE668(a1, &v14);
    v8 = a1[1];
    result = sub_20C3AE86C(&v14);
  }
  else
  {
    result = sub_20C3AE790((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_20C3A9798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AE86C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20C37F4B0(a3, 3, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20C37F4B0(a3, 4, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  int v11;

  sub_20C348EEC((uint64_t)this, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  v5 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)this + 1);
  if (!v5 || (*((_BYTE *)v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v5, v4);
  v6 = pxrInternal__aapl__pxrReserved__::UsdStage::_RemoveProperty(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  return v6;
}

void sub_20C3A9880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int **v3;
  uint64_t *v6;
  uint64_t v7;
  int DefiningSpecType;
  _DWORD *v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  v3 = a2;
  v6 = (uint64_t *)((char *)this + 8);
  v7 = *((_QWORD *)this + 1);
  if (!v7 || (a2 = (unsigned int **)*((_QWORD *)this + 1), (*(_BYTE *)(v7 + 57) & 8) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    a2 = (unsigned int **)*v6;
  }
  DefiningSpecType = pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, v3);
  v9 = (_DWORD *)((char *)this + 16);
  if (DefiningSpecType == 8)
  {
    sub_20C37F4B0((uint64_t)&v10, 4, v6, v9, (uint64_t *)v3);
    *(_DWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    v11 = 0;
    sub_20BFD38A4((_DWORD *)(a3 + 16), &v12);
    sub_20BFD38DC((_DWORD *)(a3 + 20), &v13);
    *(_QWORD *)(a3 + 24) = v14;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  else
  {
    if (DefiningSpecType != 1)
    {
      sub_20C37F4B0(a3, 2, v6, v9, (uint64_t *)v3);
      return;
    }
    sub_20C37F4B0((uint64_t)&v10, 3, v6, v9, (uint64_t *)v3);
    *(_DWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    v11 = 0;
    sub_20BFD38A4((_DWORD *)(a3 + 16), &v12);
    sub_20BFD38DC((_DWORD *)(a3 + 20), &v13);
    *(_QWORD *)(a3 + 24) = v14;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, unsigned int **a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t IsDefined;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(this, a2, (uint64_t)&v7);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v2);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return IsDefined;
}

void sub_20C3A9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37EC58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetKind(pxrInternal__aapl__pxrReserved__::UsdPrim *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(this))
    return 0;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C361F00((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 208), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_20C348EEC((uint64_t)this, (int *)&v6);
  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v1);
  v3 = v6;
  v4 = *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_20BFD265C(&v6);
  return v3 == v4;
}

void sub_20C3A9BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetKind(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(this))
    return 0;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C361C9C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 208), (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder@<W0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3AE8E0((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 272), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3A9D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  uint64_t v11;
  unint64_t PrimDefinition;
  uint64_t *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v18;
  uint64_t Layers;
  uint64_t *v20;
  uint64_t *v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  int v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  uint64_t *v38;
  uint64_t *v39;
  pxrInternal__aapl__pxrReserved__::TfToken *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v45;
  uint64_t v46;
  void **v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD v56[2];
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;
  char v62[8];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  sub_20C2205D4((uint64_t)&v49, 0, 0.0, 0.5);
  *a5 = 0;
  a5[1] = 0;
  v46 = (uint64_t)a5;
  a5[2] = 0;
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11 || (*(_BYTE *)(v11 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v10);
  PrimDefinition = atomic_load((unint64_t *)(*(_QWORD *)(v11 + 24) + 56));
  if (!PrimDefinition)
    PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition(*(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo **)(v11 + 24));
  if ((a2 & 1) == 0)
  {
    v42 = *(uint64_t **)(PrimDefinition + 80);
    v41 = *(uint64_t **)(PrimDefinition + 88);
    while (v42 != v41)
    {
      v43 = *(_QWORD *)(a4 + 24);
      if (!v43 || (*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v43 + 48))(v43, v42))
        sub_20C231504(&v49, v42, v42);
      ++v42;
    }
  }
  v13 = (uint64_t *)sub_20C368FF0(a1, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v13, 6u, (uint64_t *)&v57);
  v44 = a3;
  v45 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)a1;
  v14 = *(_QWORD *)(a4 + 24);
  v16 = v57;
  v15 = v58;
  v47 = v60;
  v48 = v59;
  if (v57 != v59 || v58 != v60)
  {
    do
    {
      v56[0] = v16;
      v56[1] = v15;
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v56) & 1) == 0
        && pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v56))
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v56);
        v18 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
        Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v18);
        v21 = *(uint64_t **)Layers;
        v20 = *(uint64_t **)(Layers + 8);
        while (v21 != v20)
        {
          v63 = 0;
          v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v21);
          Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v56);
          v24 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v24)
            v24 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v22, Path, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v24 + 40), (pxrInternal__aapl__pxrReserved__::VtValue *)v62)&& sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v62))
          {
            sub_20C1065C0((uint64_t)v62, &v54);
            v25 = v54;
            if (v14)
            {
              v26 = v55;
              while (v25 != v26)
              {
                v27 = sub_20C26D308(&v49, v25, bswap64(0x9E3779B97F4A7C55 * (*v25 & 0xFFFFFFFFFFFFFFF8)));
                if (v51 + 16 * v52 == v27)
                {
                  v28 = *(_QWORD *)(a4 + 24);
                  if (!v28)
                    sub_20BE9E974();
                  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, v25))
                    sub_20C3ADA80(&v49, v25, v25);
                }
                ++v25;
              }
            }
            else
            {
              sub_20C3ADBE8((uint64_t)&v49, v54, v55);
            }
            v61 = (void **)&v54;
            sub_20BEEB2B8(&v61);
          }
          sub_20BF4C2D8((uint64_t)v62);
          ++v21;
        }
      }
      v15 = (void **)((char *)v15 + 1);
    }
    while (v16 != v48 || v15 != v47);
  }
  if (v53)
  {
    sub_20C0E5D00(v46, v53);
    v29 = 0;
    if (v52)
    {
      v30 = (__int16 *)(v51 + 4);
      while (1)
      {
        v31 = *v30;
        v30 += 8;
        if (v31 != -1)
          break;
        if (v52 == ++v29)
        {
          v29 = v52;
          break;
        }
      }
    }
    sub_20C3AE974((uint64_t)&v57, v51 + 16 * v29, v51 + 16 * v52, *(_QWORD **)v46);
    v32 = *(uint64_t **)(v46 + 8);
    v33 = 126 - 2 * __clz(((uint64_t)v32 - *(_QWORD *)v46) >> 3);
    if (v32 == *(uint64_t **)v46)
      v34 = 0;
    else
      v34 = v33;
    sub_20BFE19BC(*(pxrInternal__aapl__pxrReserved__::TfToken **)v46, v32, (uint64_t)&v57, v34, 1);
    if (v44)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder(v45, &v57);
      v35 = v57;
      v36 = v58;
      if (v57 != v58)
      {
        v37 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v46;
        v38 = *(uint64_t **)(v46 + 8);
        if (*(uint64_t **)v46 != v38)
        {
          do
          {
            v39 = v38;
            if (v37 != (pxrInternal__aapl__pxrReserved__::TfToken *)v38)
            {
              v39 = (uint64_t *)v37;
              while ((*v39 & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)*v35 & 0xFFFFFFFFFFFFFFF8))
              {
                if (++v39 == v38)
                {
                  v39 = v38;
                  break;
                }
              }
            }
            if (v39 == v38)
            {
              v40 = v37;
            }
            else
            {
              v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v37 + 8);
              if (v39 != (uint64_t *)v37)
                sub_20C3ADC84((uint64_t *)v37, v39, v39 + 1);
            }
            ++v35;
            v37 = v40;
          }
          while (v35 != v36);
        }
      }
      v54 = (uint64_t *)&v57;
      sub_20BEEB2B8((void ***)&v54);
    }
  }
  v57 = (void **)&v50;
  sub_20C2207E4(&v57);
}

void sub_20C3AA17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = a12;
  sub_20BEEB2B8(&a25);
  a25 = (void **)&a16;
  sub_20C2207E4(&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, 0, 1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, 1, 1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD v5[3];
  void **v6;

  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, 0, 1, a2, v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5, a3);
  v6 = (void **)v5;
  sub_20BEEB2B8(&v6);
}

void sub_20C3AA290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD v5[3];
  void **v6;

  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, 1, 1, a2, v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5, a3);
  v6 = (void **)v5;
  sub_20BEEB2B8(&v6);
}

void sub_20C3AA30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v7;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  void ***v16;
  uint64_t v17;
  void ***v18;
  uint64_t v19;
  _QWORD v20[3];
  void **v21[3];
  void ***v22;
  uint64_t v23;

  v4 = a3;
  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = a2[1];
  if (v7)
  {
    v9 = sub_20C377708();
    v10 = v9;
    v11 = *((unsigned __int8 *)a2 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = a2[1];
    if (v12 >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v14 = v11 - (*((unsigned __int8 *)v13 + v11 - 1) == v9);
    v15 = operator new(0x20uLL);
    *v15 = &off_24C538B10;
    v15[1] = a2;
    v15[2] = v14;
    *((_BYTE *)v15 + 24) = v10;
    v22 = (void ***)v15;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, v4, 1, (uint64_t)v21, v20);
    v16 = v22;
    if (v22 == v21)
    {
      v17 = 4;
      v16 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_16:
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20, a4);
        sub_20C3AA54C((pxrInternal__aapl__pxrReserved__ *)v20);
        v21[0] = (void **)v20;
        sub_20BEEB2B8(v21);
        return;
      }
      v17 = 5;
    }
    ((void (*)(void))(*v16)[v17])();
    goto LABEL_16;
  }
  v22 = 0;
  if (a3)
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties(a1, (uint64_t)v21, a4);
  else
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties(a1, (uint64_t)v21, a4);
  v18 = v22;
  if (v22 == v21)
  {
    v19 = 4;
    v18 = v21;
  }
  else
  {
    if (!v22)
      return;
    v19 = 5;
  }
  ((void (*)(void))(*v18)[v19])();
}

void sub_20C3AA4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  uint64_t *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20C3AA54C(pxrInternal__aapl__pxrReserved__ *a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
    sub_20C3AEB80((pxrInternal__aapl__pxrReserved__ *)&v1);
  v3 = (void **)&v1;
  sub_20BEEB2B8(&v3);
}

void sub_20C3AA5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(a1, a2, 0, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(a1, a2, 1, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t *a3@<X8>)
{
  std::string __p;

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(a1, (uint64_t *)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C3AA628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t *a3@<X8>)
{
  std::string __p;

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(a1, (uint64_t *)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C3AA69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v10;

  v10 = a5;
  sub_20C37F4B0(a6, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), a2);
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Create(a6, a3, a4, &v10);
}

void sub_20C3AA720(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a1, a2, a3, 1, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(uint64_t a1@<X0>, std::string **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int *v11;
  unsigned int v12;
  std::string __p;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v14);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a1, &v14, a3, a4, a5, a6);
  if ((v14 & 7) != 0)
  {
    v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C3AA7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  unsigned int *v16;
  unsigned int v17;

  if ((a15 & 7) != 0)
  {
    v16 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(uint64_t a1@<X0>, std::string **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a1, a2, a3, 1, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, char a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  void ***v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _DWORD *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  void ***v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames((uint64_t)this, a2, a3, (uint64_t)&v19, &v17);
  v6 = v23;
  if (v23 == &v19)
  {
    v7 = 4;
    v6 = &v19;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v7 = 5;
  }
  ((void (*)(void))(*v6)[v7])();
LABEL_6:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20C3AAA6C(a4, v18 - v17);
  v8 = v17;
  v9 = v18;
  if (v17 != v18)
  {
    v10 = (uint64_t *)((char *)this + 8);
    v11 = (_DWORD *)((char *)this + 16);
    do
    {
      sub_20C37F4B0((uint64_t)&v19, 3, v10, v11, v8);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v19, v12))
      {
        v13 = a4[1];
        if (v13 >= a4[2])
        {
          v14 = sub_20C3AF144(a4, (uint64_t)&v19);
        }
        else
        {
          sub_20C37F2BC((uint64_t)(a4 + 2), a4[1], (uint64_t)&v19);
          v14 = v13 + 32;
          a4[1] = v13 + 32;
        }
        a4[1] = v14;
      }
      if ((v23 & 7) != 0)
      {
        v15 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_20BFD265C(&v21);
      if (v20)
        sub_20C35C614(v20);
      ++v8;
    }
    while (v8 != v9);
  }
  v19 = (void **)&v17;
  sub_20BEEB2B8(&v19);
}

void sub_20C3AA9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_20C3AEE3C(&a12);
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void **sub_20C3AAA6C(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20C3AEF24(a1, v7);
    return sub_20C3AF0D0(v7);
  }
  return result;
}

void sub_20C3AAAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AF0D0((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetAttributes(this, 0, 1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetAttributes(this, 1, 1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t IsDefined;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C37F4B0((uint64_t)&v7, 3, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v2);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return IsDefined;
}

void sub_20C3AABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a4@<X8>)
{
  sub_20C37F4B0((uint64_t)a4, 4, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
  return pxrInternal__aapl__pxrReserved__::UsdRelationship::_Create(a4, a3);
}

void sub_20C3AABF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C377F1C(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, std::string **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  std::string __p;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, a3, a4);
  if ((v10 & 7) != 0)
  {
    v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C3AAC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  unsigned int *v16;
  unsigned int v17;

  if ((a15 & 7) != 0)
  {
    v16 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, char a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  void ***v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _DWORD *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  void ***v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames((uint64_t)this, a2, a3, (uint64_t)&v19, &v17);
  v6 = v23;
  if (v23 == &v19)
  {
    v7 = 4;
    v6 = &v19;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v7 = 5;
  }
  ((void (*)(void))(*v6)[v7])();
LABEL_6:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20C3AAF14(a4, v18 - v17);
  v8 = v17;
  v9 = v18;
  if (v17 != v18)
  {
    v10 = (uint64_t *)((char *)this + 8);
    v11 = (_DWORD *)((char *)this + 16);
    do
    {
      sub_20C37F4B0((uint64_t)&v19, 4, v10, v11, v8);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v19, v12))
      {
        v13 = a4[1];
        if (v13 >= a4[2])
        {
          v14 = sub_20C3AF538(a4, (uint64_t)&v19);
        }
        else
        {
          sub_20C37F2BC((uint64_t)(a4 + 2), a4[1], (uint64_t)&v19);
          v14 = v13 + 32;
          a4[1] = v13 + 32;
        }
        a4[1] = v14;
      }
      if ((v23 & 7) != 0)
      {
        v15 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_20BFD265C(&v21);
      if (v20)
        sub_20C35C614(v20);
      ++v8;
    }
    while (v8 != v9);
  }
  v19 = (void **)&v17;
  sub_20BEEB2B8(&v19);
}

void sub_20C3AAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_20C3AF230(&a12);
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void **sub_20C3AAF14(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20C3AF318(a1, v7);
    return sub_20C3AF4C4(v7);
  }
  return result;
}

void sub_20C3AAF90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AF4C4((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetRelationships(this, 0, 1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetRelationships(this, 1, 1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t IsDefined;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  sub_20C37F4B0((uint64_t)&v7, 4, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v2);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return IsDefined;
}

void sub_20C3AB048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C377F1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AB060@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v7[769];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20C3AF68C((uint64_t)v7, a1, a2, a3, a4);
  sub_20C3AF624((uint64_t)v7);
  *(_OWORD *)a5 = v8;
  *(_QWORD *)(a5 + 16) = v9;
  v9 = 0;
  v8 = 0u;
  return sub_20C3B5020((uint64_t)v7);
}

void sub_20C3AB0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3B5020((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::FindAllAttributeConnectionPaths@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __int128 *UsdPrimDefaultPredicate;

  UsdPrimDefaultPredicate = (__int128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);
  return sub_20C3AB060((uint64_t)a1, UsdPrimDefaultPredicate, a2, a3, a4);
}

uint64_t sub_20C3AB164@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v7[769];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_20C3B5178((uint64_t)v7, a1, a2, a3, a4);
  sub_20C3B5110((uint64_t)v7);
  *(_OWORD *)a5 = v8;
  *(_QWORD *)(a5 + 16) = v9;
  v9 = 0;
  v8 = 0u;
  return sub_20C3B7890((uint64_t)v7);
}

void sub_20C3AB200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3B7890((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::FindAllRelationshipTargetPaths@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __int128 *UsdPrimDefaultPredicate;

  UsdPrimDefaultPredicate = (__int128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);
  return sub_20C3AB164((uint64_t)a1, UsdPrimDefaultPredicate, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 472));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_20C37FE20(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20C3ADD0C(a3, a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetInherits@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_20C37FE20(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredInherits(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 192));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_20C37FE20(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredSpecializes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 304));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_20C37FE20(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 280));
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredPayloads(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    v3 = *(_QWORD *)(v2 + 56);
  }
  return (v3 >> 9) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  _BYTE v10[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  __n128 **v15;
  char v16;
  void *__p[2];
  uint64_t v18;
  int v19;
  int v20;
  __int128 v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  sub_20C37FE20((uint64_t)v10, a1);
  pxrInternal__aapl__pxrReserved__::UsdPayloads::ClearPayloads((pxrInternal__aapl__pxrReserved__::UsdPayloads *)v10);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v18 = *(_QWORD *)(a2 + 16);
  }
  sub_20BFD6E54(&v19, (_DWORD *)(a2 + 24));
  sub_20BFD6EA4(&v20, (_DWORD *)(a2 + 28));
  v21 = *(_OWORD *)(a2 + 32);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v15 = &v7;
  v16 = 0;
  v7 = (__n128 *)operator new(0x30uLL);
  v8 = v7;
  v9 = v7 + 3;
  v8 = sub_20C12FF1C((uint64_t)&v9, (uint64_t)__p, (uint64_t)v22, v7);
  v3 = pxrInternal__aapl__pxrReserved__::UsdPayloads::SetPayloads(v10, &v7);
  v15 = &v7;
  sub_20C021818((void ***)&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if ((v14 & 7) != 0)
  {
    v4 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  return v3;
}

void sub_20C3AB580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C3AB5F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C3AB5DC()
{
  JUMPOUT(0x20C3AB5D4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPayloads@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_20C37FE20(a2, (uint64_t)this);
}

uint64_t sub_20C3AB5F0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v8[2];
  void *__p[2];
  char v10;
  int v11;
  _DWORD v12[5];

  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v8, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, a2, a3, v8);
  v6 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(a1, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_20BFD265C(&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_20C3AB6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C02CDE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  uint64_t Identifier;
  uint64_t v7;
  double v9[2];
  void *__p[2];
  char v11;
  int v12;
  _DWORD v13[5];

  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v9, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, Identifier, a3, v9);
  v7 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(a1, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_20C3AB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C02CDE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ClearPayload(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_20C37FE20((uint64_t)&v5, (uint64_t)this);
  v1 = pxrInternal__aapl__pxrReserved__::UsdPayloads::ClearPayloads((pxrInternal__aapl__pxrReserved__::UsdPayloads *)&v5);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return v1;
}

void sub_20C3AB834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C3AB5F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::Load(uint64_t a1, int a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  const char *Text;
  int *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE v12[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD v19[4];
  char v20;

  if (sub_20C39C9C4(a1))
  {
    v19[0] = "usd/prim.cpp";
    v19[1] = "Load";
    v19[2] = 1896;
    v19[3] = "void pxrInternal__aapl__pxrReserved__::UsdPrim::Load(UsdLoadPolicy) const";
    v20 = 0;
    sub_20C348EEC(a1, &v17);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to load a prim in a prototype <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    v6 = &v17;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7 || (*(_BYTE *)(v7 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v4);
    v8 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v7;
    sub_20C348EEC(a1, (int *)v19);
    pxrInternal__aapl__pxrReserved__::UsdStage::Load(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)v19, a2, (uint64_t)v12);
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v19 + 1);
    v6 = (int *)v19;
  }
  return sub_20BFD265C(v6);
}

void sub_20C3AB980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::Unload(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  const char *Text;
  int *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  int v8;
  int v9;
  _QWORD v10[4];
  char v11;

  if (sub_20C39C9C4((uint64_t)this))
  {
    v10[0] = "usd/prim.cpp";
    v10[1] = "Unload";
    v10[2] = 1907;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::UsdPrim::Unload() const";
    v11 = 0;
    sub_20C348EEC((uint64_t)this, &v8);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to unload a prim in a prototype <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    v4 = &v8;
  }
  else
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
    v6 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v5;
    sub_20C348EEC((uint64_t)this, (int *)v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::Unload(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    v4 = (int *)v10;
  }
  return sub_20BFD265C(v4);
}

void sub_20C3ABA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(this);
  v6 = *UsdPrimDefaultPredicate;
  v5 = UsdPrimDefaultPredicate[1];
  v7 = UsdPrimDefaultPredicate[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4)
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v26 = v6;
  v27 = v5;
  *(_QWORD *)&v28 = v7;
  sub_20C3ADEFC((uint64_t)this, &v26, (uint64_t)&v30);
  v26 = v30;
  sub_20BFD6E54(&v27, &v31);
  sub_20BFD6EA4((_DWORD *)&v27 + 1, &v32);
  v28 = v33;
  v29 = v34;
  v22 = v35;
  sub_20BFD6E54(&v23, &v36);
  sub_20BFD6EA4((_DWORD *)&v23 + 1, &v37);
  v24 = v38;
  v25 = v39;
  while (v26 != v22 || v27 != v23 || !sub_20C39FA44((uint64_t)&v28, (uint64_t)&v24))
  {
    sub_20C3ADDEC((uint64_t)&v26, (uint64_t)&v17);
    v8 = (uint64_t *)sub_20C398E78(&v17);
    v9 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
    {
      v13 = sub_20BFCA068((char **)a2, v8);
    }
    else
    {
      v10 = *v8;
      *v9 = *v8;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      v13 = (char *)(v9 + 1);
    }
    *(_QWORD *)(a2 + 8) = v13;
    if ((v21 & 7) != 0)
    {
      v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if (v18)
      sub_20C35C614(v18);
    sub_20C3ADE64((uint64_t)&v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_20BFD265C(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_20BFD265C(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
  sub_20BFD265C(&v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  return sub_20BFD265C(&v31);
}

void sub_20C3ABD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3ABD68(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return a1;
}

_DWORD *sub_20C3ABD9C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 13);
  sub_20BFD265C(a1 + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *UsdPrimAllPrimsPredicate;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(this);
  v6 = *UsdPrimAllPrimsPredicate;
  v5 = UsdPrimAllPrimsPredicate[1];
  v7 = UsdPrimAllPrimsPredicate[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4)
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v26 = v6;
  v27 = v5;
  *(_QWORD *)&v28 = v7;
  sub_20C3ADEFC((uint64_t)this, &v26, (uint64_t)&v30);
  v26 = v30;
  sub_20BFD6E54(&v27, &v31);
  sub_20BFD6EA4((_DWORD *)&v27 + 1, &v32);
  v28 = v33;
  v29 = v34;
  v22 = v35;
  sub_20BFD6E54(&v23, &v36);
  sub_20BFD6EA4((_DWORD *)&v23 + 1, &v37);
  v24 = v38;
  v25 = v39;
  while (v26 != v22 || v27 != v23 || !sub_20C39FA44((uint64_t)&v28, (uint64_t)&v24))
  {
    sub_20C3ADDEC((uint64_t)&v26, (uint64_t)&v17);
    v8 = (uint64_t *)sub_20C398E78(&v17);
    v9 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
    {
      v13 = sub_20BFCA068((char **)a2, v8);
    }
    else
    {
      v10 = *v8;
      *v9 = *v8;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      v13 = (char *)(v9 + 1);
    }
    *(_QWORD *)(a2 + 8) = v13;
    if ((v21 & 7) != 0)
    {
      v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if (v18)
      sub_20C35C614(v18);
    sub_20C3ADE64((uint64_t)&v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_20BFD265C(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_20BFD265C(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
  sub_20BFD265C(&v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  return sub_20BFD265C(&v31);
}

void sub_20C3AC04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetFilteredChildrenNames@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16))
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v26 = v6;
  v27 = v5;
  *(_QWORD *)&v28 = v7;
  sub_20C3ADEFC(a1, &v26, (uint64_t)&v30);
  v26 = v30;
  sub_20BFD6E54(&v27, &v31);
  sub_20BFD6EA4((_DWORD *)&v27 + 1, &v32);
  v28 = v33;
  v29 = v34;
  v22 = v35;
  sub_20BFD6E54(&v23, &v36);
  sub_20BFD6EA4((_DWORD *)&v23 + 1, &v37);
  v24 = v38;
  v25 = v39;
  while (v26 != v22 || v27 != v23 || !sub_20C39FA44((uint64_t)&v28, (uint64_t)&v24))
  {
    sub_20C3ADDEC((uint64_t)&v26, (uint64_t)&v17);
    v8 = (uint64_t *)sub_20C398E78(&v17);
    v9 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v9 >= *(_QWORD *)(a3 + 16))
    {
      v13 = sub_20BFCA068((char **)a3, v8);
    }
    else
    {
      v10 = *v8;
      *v9 = *v8;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      v13 = (char *)(v9 + 1);
    }
    *(_QWORD *)(a3 + 8) = v13;
    if ((v21 & 7) != 0)
    {
      v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if (v18)
      sub_20C35C614(v18);
    sub_20C3ADE64((uint64_t)&v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_20BFD265C(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_20BFD265C(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
  sub_20BFD265C(&v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  return sub_20BFD265C(&v31);
}

void sub_20C3AC2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenReorder@<W0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3AE8E0((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 216), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3AC3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetNextSibling@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *UsdPrimDefaultPredicate;

  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(this);
  return pxrInternal__aapl__pxrReserved__::UsdPrim::GetFilteredNextSibling((uint64_t)this, UsdPrimDefaultPredicate, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetFilteredNextSibling@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  uint64_t v13[3];
  int v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v16;

  v16 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(a1 + 8);
  sub_20BFD6E54(&v14, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v15, (_DWORD *)(a1 + 20));
  v7 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v14)
    && ((v7 & 0x2000) != 0 || (v6 & 0x2000) == 0))
  {
    v7 |= 0x2000uLL;
    v6 &= ~0x2000uLL;
  }
  v13[0] = v7;
  v13[1] = v6;
  v13[2] = v8;
  if (sub_20C39E5EC(&v16, &v14, 0, v13))
  {
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
  }
  else
  {
    v12 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v16;
    if (v16)
    {
      v9 = (unint64_t *)(v16 + 6);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C35C4F8(a3, (uint64_t *)&v12, &v14);
    if (v12)
      sub_20C35C614(v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_20BFD265C(&v14);
}

void sub_20C3AC564(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a2)
    sub_20C35C614(a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *PrototypeForInstance;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v5 = *((_QWORD *)this + 1);
  if (!v5
    || (a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1),
        (*(_BYTE *)(v5 + 57) & 8) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  }
  PrototypeForInstance = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, a2);
  v10 = PrototypeForInstance;
  if (PrototypeForInstance)
  {
    v7 = (unint64_t *)((char *)PrototypeForInstance + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v9 + 1);
  sub_20C35C4F8(a3, (uint64_t *)&v10, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_20BFD265C(&v9);
  if (v10)
    sub_20C35C614(v10);
}

void sub_20C3AC664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a10)
{
  sub_20BFD1A18(&a9);
  if (a10)
    sub_20C35C614(a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetInstances(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 1);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetInstancesForPrototype(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, this, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *SourcePrimIndex;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t *Path;
  _BYTE *v10;
  pxrInternal__aapl__pxrReserved__::PcpCache *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  const char *Text;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  void *v28;
  void *v29;
  void **v30;
  uint64_t v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[3];
  void *v36[2];
  char v37;
  _BYTE v38[24];
  _BYTE *v39;
  void *__p;
  char v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  SourcePrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(v6, (uint64_t)a2, a3);
  if (!*(_QWORD *)SourcePrimIndex)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(a4);
    return;
  }
  Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(SourcePrimIndex);
  v10 = (_BYTE *)*((_QWORD *)this + 1);
  if (!v10 || (v10[57] & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v8);
  v11 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*(_QWORD *)v10 + 128);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v27);
  v33 = 0;
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v34);
  memset(v35, 0, sizeof(v35));
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v11, &v25);
  pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(v11, (uint64_t)v36);
  v42 = 0;
  pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex((pxrInternal__aapl__pxrReserved__::SdfPath *)Path, &v25, (uint64_t)v36, (uint64_t)&v27, 0);
  if (v41 < 0)
    operator delete(__p);
  v13 = v39;
  if (v39 == v38)
  {
    v14 = 4;
    v13 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v15 = v26;
  if (v26)
  {
    v16 = (unsigned int *)(v26 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = *((_QWORD *)this + 1);
  if (!v19 || (*(_BYTE *)(v19 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v12);
  v20 = *(_QWORD *)v19;
  sub_20C348EEC((uint64_t)this, (int *)&v25);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"computing expanded prim index for <%s>", v22, v23, Text);
  pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors(v20, v31, (uint64_t *)v36);
  if (v37 < 0)
    operator delete(v36[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_20BFD265C(&v25);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(a4, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v27);
  v36[0] = v35;
  sub_20C2034B0((void ***)v36);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v34);
  v24 = v33;
  v33 = 0;
  if (v24)
    sub_20C201118((uint64_t)&v33, v24);
  v36[0] = v31;
  sub_20BDE9EB0((void ***)v36);
  sub_20BF1C150(&v30, 0);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  sub_20C21DABC(&v27);
}

void sub_20C3AC990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeResolveTargetFromEditTarget@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  uint64_t *LayerStack;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  void **v22;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v35[2];
  void *__p[2];
  __int128 v37;
  void **v38;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *v39;
  uint64_t v40;
  char *v41;
  std::__shared_weak_count *v42;
  char *v43;
  std::__shared_weak_count *v44;

  v4 = (int)a3;
  pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex(this, a2, a3, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)__p);
  if (!__p[0])
    goto LABEL_19;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)__p);
  v41 = (char *)v7;
  v42 = v8;
  Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a2, Path, &v33);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v33)
    || (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)__p, 6u, (uint64_t *)&v41),
        v11 = (uint64_t)v41,
        v10 = v42,
        v12 = v43,
        v41 == v43)
    && v42 == v44)
  {
LABEL_10:
    v18 = 0;
    v19 = -1;
  }
  else
  {
    v13 = (std::__shared_weak_count *)((char *)v44 - 1);
    while (1)
    {
      v14 = v10;
      v39 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v11;
      v40 = (uint64_t)v10;
      v15 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v39);
      if (*v15 == v33)
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v39);
        v17 = sub_20C1FE500(LayerStack);
        if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v17, (uint64_t *)a2))
          break;
      }
      v10 = (std::__shared_weak_count *)((char *)&v14->__vftable + 1);
      if ((char *)v11 == v12 && v13 == v14)
        goto LABEL_10;
    }
    v18 = v39;
    v19 = v40;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  v35[0] = v18;
  v35[1] = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v19;
  if (v18 && v19 != -1)
  {
    v20 = (char *)operator new(0x40uLL);
    v21 = v37;
    *(_OWORD *)(v20 + 24) = *(_OWORD *)__p;
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &unk_24C539328;
    *((_QWORD *)v20 + 1) = 0;
    __p[0] = 0;
    __p[1] = 0;
    *(_OWORD *)(v20 + 40) = v21;
    v37 = 0uLL;
    v22 = v38;
    v38 = 0;
    *((_QWORD *)v20 + 7) = v22;
    v41 = v20 + 24;
    v42 = (std::__shared_weak_count *)v20;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(v35);
      v39 = v23;
      v40 = v24;
      v33 = 0;
      v34 = 0;
      pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a4, &v41, &v39, &v33, v35, a2);
      v25 = v34;
      if (v34)
      {
        v26 = (unsigned int *)(v34 + 8);
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a4, &v41, v35, a2);
    }
    v30 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
LABEL_19:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_OWORD *)(a4 + 24) = xmmword_20CA9D3F0;
    *(_QWORD *)(a4 + 40) = -1;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = -1;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 80) = -1;
    *(_QWORD *)(a4 + 88) = 0;
  }
  sub_20BF1C150(&v38, 0);
  if (__p[1])
  {
    *(void **)&v37 = __p[1];
    operator delete(__p[1]);
  }
  return sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
}

void sub_20C3ACCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  sub_20C21C1E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetProtoToInstancePathMap(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  unint64_t *v8;
  unint64_t v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  unsigned int *v17;
  unsigned int v18;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  uint64_t v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  pxrInternal__aapl__pxrReserved__ *v23;
  unint64_t *v24;
  unint64_t v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  unsigned int *v29;
  unsigned int v30;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v33;
  uint64_t *Path;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__ *v37;
  pxrInternal__aapl__pxrReserved__ *v38;
  unsigned int *v39;
  unsigned int v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  int v47;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  pxrInternal__aapl__pxrReserved__ *v58;
  int v59;
  int v60;
  uint64_t v61;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *((_QWORD *)this + 1);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 56), (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    v6 = *(_QWORD *)(v5 + 56);
  }
  if ((v6 & 0x1000) != 0)
  {
    v57 = *(_DWORD *)this;
    v7 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)this + 1);
    v58 = v7;
    if (v7)
    {
      v8 = (unint64_t *)((char *)v7 + 48);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    sub_20BFD6E54(&v59, (_DWORD *)this + 4);
    sub_20BFD6EA4(&v60, (_DWORD *)this + 5);
    v11 = *((_QWORD *)this + 3);
    v61 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v61 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (!v58 || (v14 = *((_QWORD *)v58 + 7), (v14 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v58, v10);
      v14 = *((_QWORD *)v58 + 7);
    }
    if ((v14 & 0x100) != 0)
    {
      sub_20C3AD22C((uint64_t)&v57, (uint64_t)&v52);
      v57 = v52;
      v15 = v53;
      v53 = 0;
      v16 = v58;
      v58 = v15;
      if (v16)
        sub_20C35C614(v16);
      sub_20BFD3EBC(&v59, &v54);
      sub_20BFD3F10(&v60, &v55);
      if ((v61 & 7) != 0)
      {
        v17 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      v61 = v56;
      v56 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
      sub_20BFD265C(&v54);
      if (v53)
        sub_20C35C614(v53);
    }
    while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v57, v10))
    {
      v52 = 1;
      v53 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v54);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v55);
      v56 = 0;
      v20 = v58;
      if (!v58 || (v21 = *((_QWORD *)v58 + 7), (v21 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v58, v19);
        v21 = *((_QWORD *)v20 + 7);
      }
      if ((v21 & 0x100) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v57, v19, (uint64_t)&v46);
        v52 = v46;
        v27 = v48;
        v48 = 0;
        v28 = v53;
        v53 = v27;
        if (v28)
          sub_20C35C614(v28);
        sub_20BFD3EBC(&v54, &v49);
        sub_20BFD3F10(&v55, &v50);
        if ((v56 & 7) != 0)
        {
          v29 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        v56 = v51;
        v51 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
        sub_20BFD265C(&v49);
        if (v48)
          sub_20C35C614(v48);
      }
      else if (sub_20C3AD308((uint64_t)&v57, v19))
      {
        v52 = v57;
        v23 = v58;
        if (v58)
        {
          v24 = (unint64_t *)((char *)v58 + 48);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = v53;
        v53 = v23;
        if (v26)
          sub_20C35C614(v26);
        sub_20C01A074(&v54, &v59);
        sub_20C01A0C8(&v55, &v60);
        sub_20BF32220(&v56, &v61);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v52, v22))
      {
        v33 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_20C3AD358((uint64_t)&v52, v31, v32);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(v33);
        sub_20C348EEC((uint64_t)&v57, &v46);
        sub_20C33C5F0(a3, Path, &v46);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        sub_20BFD265C(&v46);
      }
      if ((v56 & 7) != 0)
      {
        v35 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
      sub_20BFD265C(&v54);
      if (v53)
        sub_20C35C614(v53);
      sub_20C3AD22C((uint64_t)&v57, (uint64_t)&v52);
      v57 = v52;
      v37 = v53;
      v53 = 0;
      v38 = v58;
      v58 = v37;
      if (v38)
        sub_20C35C614(v38);
      sub_20BFD3EBC(&v59, &v54);
      sub_20BFD3F10(&v60, &v55);
      if ((v61 & 7) != 0)
      {
        v39 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      v61 = v56;
      v56 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
      sub_20BFD265C(&v54);
      if (v53)
        sub_20C35C614(v53);
    }
    v41 = (int *)a3[1];
    v42 = 126 - 2 * __clz(((uint64_t)v41 - *a3) >> 4);
    if (v41 == (int *)*a3)
      v43 = 0;
    else
      v43 = v42;
    sub_20C3B79EC(*a3, v41, (uint64_t)&v52, v43, 1);
    if ((v61 & 7) != 0)
    {
      v44 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
    sub_20BFD265C(&v59);
    if (v58)
      sub_20C35C614(v58);
  }
}

void sub_20C3AD1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20C35C2E0((uint64_t)va);
  sub_20C22D004((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3AD22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v10 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  sub_20BFD6E54(&v8, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v9, (_DWORD *)(a1 + 20));
  sub_20C3AE150(&v10, &v8);
  v7 = v10;
  if (v10)
  {
    v4 = (unint64_t *)((char *)v10 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20C35C4F8(a2, (uint64_t *)&v7, &v8);
  if (v7)
    sub_20C35C614(v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C3AD2E0(_Unwind_Exception *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    sub_20C35C614(a3);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AD308(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
    if ((*(_QWORD *)(v2 + 56) & 0x1000) == 0)
      return 0;
  }
  else if ((v3 & 0x1000) == 0)
  {
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 16));
}

uint64_t sub_20C3AD358(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;

  v3 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v3 || (*((_BYTE *)v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(v3, (uint64_t)a2, a3);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdPrim::MakeResolveTargetUpToEditTarget@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, uint64_t a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeResolveTargetFromEditTarget(this, a2, 0, a3);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdPrim::MakeResolveTargetStrongerThanEditTarget@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, uint64_t a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeResolveTargetFromEditTarget(this, a2, (char *)1, a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  sub_20C348EEC((uint64_t)this, (int *)&v13);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
  sub_20BFD265C(&v13);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, v6, &v13);
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v13);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, a3);
  v8 = v14;
  if (v14)
  {
    v9 = (unsigned int *)(v14 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C3AD460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  sub_20C348EEC((uint64_t)this, (int *)&v13);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
  sub_20BFD265C(&v13);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, v6, &v13);
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v13);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, a3);
  v8 = v14;
  if (v14)
  {
    v9 = (unsigned int *)(v14 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C3AD57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath(this, a2, (uint64_t)&v6);
  sub_20C3AD664((uint64_t)&v6, a3);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3AD650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37C6E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3AD664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *result;

  if (*(int *)a1 >= 2)
    return (_DWORD *)sub_20C37F4B0(a2, *(_DWORD *)a1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath(this, a2, (uint64_t)&v6);
  sub_20C3AD760((uint64_t)&v6, a3);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3AD74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37C6E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3AD760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *result;

  if (*(_DWORD *)a1 == 3)
    return (_DWORD *)sub_20C37F4B0(a2, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath(this, a2, (uint64_t)&v6);
  sub_20C3AD860((uint64_t)&v6, a3);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3AD84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37C6E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3AD860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *result;

  if (*(_DWORD *)a1 == 4)
    return (_DWORD *)sub_20C37F4B0(a2, 4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 4;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

std::string *sub_20C3AD8D0@<X0>(char *__s@<X2>, std::string *result@<X0>, std::string *a3@<X1>, std::string *a4@<X8>)
{
  std::string *v6;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  size_t v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t *EmptyString;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string::size_type *i;
  std::string *v20;
  uint64_t *v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;

  if (result == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v6 = result;
    if ((char *)a3 - (char *)result == 8)
    {
      if ((result->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        result = (std::string *)((result->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        result = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
      {
        return (std::string *)sub_20BDDBFAC(a4, result->__r_.__value_.__l.__data_, result->__r_.__value_.__l.__size_);
      }
      else
      {
        v15 = *(_OWORD *)&result->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = result->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v15;
      }
    }
    else
    {
      v8 = 0;
      v9 = ((char *)a3 - (char *)result) >> 3;
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      v10 = result;
      a4->__r_.__value_.__r.__words[2] = 0;
      do
      {
        v11 = v10->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
        if (v11)
        {
          if (*(char *)(v11 + 39) < 0)
            v11 = *(_QWORD *)(v11 + 24);
          else
            v11 = *(unsigned __int8 *)(v11 + 39);
        }
        v8 += v11;
        v10 = (std::string *)((char *)v10 + 8);
      }
      while (v10 != a3);
      v12 = strlen(__s);
      std::string::reserve(a4, v8 + v12 * (v9 - 1));
      if ((v6->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((v6->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      v16 = *((char *)EmptyString + 23);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)EmptyString;
      else
        v17 = (const std::string::value_type *)*EmptyString;
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)EmptyString + 23);
      else
        v18 = EmptyString[1];
      result = std::string::append(a4, v17, v18);
      for (i = &v6->__r_.__value_.__l.__size_; i != (std::string::size_type *)a3; ++i)
      {
        v20 = std::string::append(a4, __s);
        if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
          v21 = (uint64_t *)((*i & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v20);
        v22 = *((char *)v21 + 23);
        if (v22 >= 0)
          v23 = (const std::string::value_type *)v21;
        else
          v23 = (const std::string::value_type *)*v21;
        if (v22 >= 0)
          v24 = *((unsigned __int8 *)v21 + 23);
        else
          v24 = v21[1];
        result = std::string::append(a4, v23, v24);
      }
    }
  }
  return result;
}

void sub_20C3ADA60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3ADA80(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *a1;
  v8 = a1[4];
  v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 16 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    v12 = sub_20C23169C((uint64_t)a1);
    v13 = a1[4];
    if ((v12 & 1) != 0)
    {
      v9 = v6 & *a1;
      v14 = *(__int16 *)(v13 + 16 * v9 + 4);
      if (v14 < 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          v10 = (__int16)(v10 + 1);
          v9 = (v9 + 1) & *a1;
          v14 = *(__int16 *)(v13 + 16 * v9 + 4);
        }
        while (v10 <= v14);
      }
      v15 = (unsigned __int16)v14;
    }
    else
    {
      v15 = *(unsigned __int16 *)(v13 + 16 * v9 + 4);
    }
    if (v15 == 0xFFFF)
    {
      v16 = v13 + 16 * v9;
      *(_QWORD *)(v16 + 8) = *a3;
      *a3 = 0;
      *(_DWORD *)v16 = v6;
      *(_WORD *)(v16 + 4) = v10;
    }
    else
    {
      sub_20C231974(a1, v9, v10, v6, a3);
    }
    ++a1[6];
    return a1[4] + 16 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      result = v8 + 16 * v9;
      if ((*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8) == v5)
        break;
      v10 = (__int16)(v10 + 1);
      v9 = (v9 + 1) & v7;
      if (v10 > *(__int16 *)(v8 + 16 * v9 + 4))
        goto LABEL_7;
    }
  }
  return result;
}

void sub_20C3ADBE8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a2;
  if ((char *)a3 - (char *)a2 >= 1)
  {
    v6 = a3 - a2;
    v7 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 56) - v7 < v6)
    {
      v8 = *(float *)(a1 + 68);
      v9 = vcvtps_u32_f32((float)(v7 + v6) / v8);
      v10 = vcvtps_u32_f32((float)v7 / v8);
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v10;
      sub_20C2317F0(a1, v11);
    }
  }
  while (v4 != a3)
  {
    sub_20C3ADA80((uint64_t *)a1, v4, v4);
    ++v4;
  }
}

uint64_t *sub_20C3ADC84(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *a1;
  *a1 = *a2;
  result = a1 + 1;
  for (i = a2; ; *result++ = *i)
  {
    *i++ = v3;
    if (i == a3)
      break;
    if (result == a2)
      a2 = i;
    v3 = *result;
  }
  if (result != a2)
  {
    v6 = result;
    v7 = a2;
    while (1)
    {
      v8 = v6;
      while (1)
      {
        v9 = *v6;
        *v8++ = *v7;
        *v7++ = v9;
        if (v7 != a3)
          break;
        v6 = v8;
        v7 = a2;
        if (v8 == a2)
          return result;
      }
      if (v8 == a2)
        a2 = v7;
      ++v6;
    }
  }
  return result;
}

uint64_t sub_20C3ADD0C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *v12;
  __int128 v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v12, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v12 = v13;
  }
  return a1;
}

void sub_20C3ADDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C35C2E0(v1);
  _Unwind_Resume(a1);
}

void sub_20C3ADDEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1;
  v7 = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20C35C4F8(a2, (uint64_t *)&v7, (_DWORD *)(a1 + 8));
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3ADE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a10)
{
  if (a10)
    sub_20C35C614(a10);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C3ADE64(uint64_t a1)
{
  int *v2;
  _DWORD *result;
  uint64_t v4;

  v2 = (int *)(a1 + 8);
  result = (_DWORD *)sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, (int *)(a1 + 8), 0, (uint64_t *)(a1 + 16));
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = 0;
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
    sub_20BFD3EBC(v2, (int *)&v4);
    sub_20BFD3F10((int *)(a1 + 12), (int *)&v4 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
    return sub_20BFD265C(&v4);
  }
  return result;
}

_DWORD *sub_20C3ADEFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  _BYTE v8[8];
  int v9;
  _DWORD v10[7];
  _BYTE v11[8];
  int v12;
  _DWORD v13[7];
  uint64_t v14;
  int v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::UsdStage **v17;

  v17 = *(pxrInternal__aapl__pxrReserved__::UsdStage ***)(a1 + 8);
  sub_20BFD6E54(&v15, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v16, (_DWORD *)(a1 + 20));
  if (!sub_20C39E4C4(&v17, &v15, 0, a2))
  {
    v17 = 0;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v14 + 1);
    sub_20BFD3EBC(&v15, (int *)&v14);
    sub_20BFD3F10(&v16, (int *)&v14 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_20BFD265C(&v14);
  }
  sub_20C3AE0B4((uint64_t)v11, &v17, &v15, (__int128 *)a2);
  v14 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
  sub_20C3AE0B4((uint64_t)v8, &v14, &v7, (__int128 *)a2);
  sub_20C39EA14(a3, (uint64_t)v11, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
  sub_20BFD265C(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_20BFD265C(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C3AE088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_20BFD1A18(&a9);
  sub_20C3ABD68((uint64_t)&a15);
  sub_20BFD1A18((_DWORD *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AE0B4(uint64_t a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  _DWORD *v7;
  __int128 v8;

  *(_QWORD *)a1 = *a2;
  v7 = (_DWORD *)(a1 + 8);
  sub_20BFD6E54((_DWORD *)(a1 + 8), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 12), a3 + 1);
  v8 = *a4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v8;
  if (*(_QWORD *)a1 && !sub_20C37F7E8((uint64_t *)(a1 + 16), a1, v7))
    sub_20C3ADE64(a1);
  return a1;
}

void sub_20C3AE13C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AE150(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, int *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  const char *Text;
  const char *v7;
  char *v8;
  char *v9;
  _QWORD v10[4];
  char v11;

  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v10);
    sub_20BFD3EBC(a2, (int *)v10);
    sub_20BFD3F10(a2 + 1, (int *)v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    result = (uint64_t)sub_20BFD265C(v10);
    v5 = *a1;
    if (*a1)
    {
      if ((*((_BYTE *)v5 + 57) & 0x10) != 0)
      {
        result = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if ((_DWORD)result)
        {
          result = pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
          *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)result;
          if (!result)
          {
            v10[0] = "usd/primData.h";
            v10[1] = "Usd_MoveToParent";
            v10[2] = 527;
            v10[3] = "void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimDataPtr = co"
                     "nst pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            v11 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
            v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, v8, Text);
            result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "p", v9);
            if (!(_DWORD)result)
              return result;
            result = (uint64_t)*a1;
          }
          if (*(_QWORD *)(result + 16) == *(_QWORD *)a2)
          {
            v10[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v10);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v10 + 1);
            sub_20BFD3EBC(a2, (int *)v10);
            sub_20BFD3F10(a2 + 1, (int *)v10 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
            return (uint64_t)sub_20BFD265C(v10);
          }
        }
      }
    }
  }
  return result;
}

char *sub_20C3AE2D0(char *a1, char *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char *v4;
  unint64_t v5;
  char *v6;
  int v7;
  int v9;
  int v10;

  if (a2 != a1)
  {
    v4 = a1;
    v5 = (a2 - a1) >> 4;
    do
    {
      v6 = &v4[16 * (v5 >> 1)];
      sub_20BFD6E54(&v9, v6);
      sub_20BFD6EA4(&v10, (_DWORD *)v6 + 1);
      v7 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_20BFD265C(&v9);
      if (v7)
        v5 += ~(v5 >> 1);
      else
        v5 >>= 1;
      if (v7)
        v4 = v6 + 16;
    }
    while (v5);
    return v4;
  }
  return a2;
}

void sub_20C3AE38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _DWORD *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C((int *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3AE3AC@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfType *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  _QWORD *result;

  v3 = (int)a2;
  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a1, a2);
  if (result)
    return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(result + 2, *((_DWORD *)result + 6), v3, a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

_QWORD *sub_20C3AE3FC@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  _QWORD *SchemaInfo;
  _QWORD *result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v3 = (int)a2;
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a1, a2);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(SchemaInfo + 2, *((_DWORD *)SchemaInfo + 6), v3, a3);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(a1, (uint64_t)&v10);
  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(&v10, v11, v3, a3);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

char *sub_20C3AE4C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  char *result;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)a2);
  v4 = (char *)sub_20C036F6C(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Swap(v4, a2);
  v6 = a1[1];
  if (v6 && (a1[1] & 3) != 3)
    result = (char *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C3AE528(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C03507C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AE53C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_20C3AE58C(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_24C524D40;
  return v2(0);
}

void sub_20C3AE58C(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v2);
  *a1 = v2;
  a1[1] = sub_20C3AE5D8;
}

void sub_20C3AE5C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C3AE5D8(void **a1)
{
  void **v2;

  if (a1)
  {
    v2 = a1 + 16;
    sub_20BEEB2B8(&v2);
    v2 = a1 + 13;
    sub_20BEEB2B8(&v2);
    v2 = a1 + 10;
    sub_20BEEB2B8(&v2);
    v2 = a1 + 7;
    sub_20BEEB2B8(&v2);
    v2 = a1 + 4;
    sub_20BEEB2B8(&v2);
    v2 = a1 + 1;
    sub_20BEEB2B8(&v2);
    operator delete(a1);
  }
}

uint64_t sub_20C3AE668(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3AE6DC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C3AE6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3AE790(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C3AE7E8((uint64_t)v13);
  return v11;
}

_DWORD *sub_20C3AE790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  result = sub_20BFD38DC((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_20C3AE7E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C3AE81C((uint64_t *)a1);
  return a1;
}

void sub_20C3AE81C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C37FA88(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_20C3AE86C(void **a1)
{
  sub_20C3AE89C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C3AE89C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_20C37FA88(v4, i - 32);
  }
}

BOOL sub_20C3AE8E0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = &stru_24C51BCF0;
  v12 = 0;
  v11[0] = &unk_24C528DB0;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C3AE974(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20BF32220(a4, (_QWORD *)(v5 + 8));
      v7 = v5 + 16;
      do
      {
        v5 = v7;
        if (*(_BYTE *)(v7 - 10))
          break;
        v7 += 16;
      }
      while (*(__int16 *)(v5 + 4) == -1);
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

__n128 sub_20C3AE9F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C538B10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C3AEA34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C538B10;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20C3AEA5C(uint64_t a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  v4 = *((_BYTE *)EmptyString + 23);
  if (v4 < 0)
    v5 = EmptyString[1];
  else
    v5 = *((unsigned __int8 *)EmptyString + 23);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5 <= v6)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(char *)(v7 + 23) >= 0 ? *(const char **)(a1 + 8) : *(const char **)v7;
  v9 = v4 >= 0 ? *((unsigned __int8 *)EmptyString + 23) : EmptyString[1];
  v10 = strlen(v8);
  if (v9 < v10)
    return 0;
  if (v4 < 0)
    EmptyString = (uint64_t *)*EmptyString;
  return !strncmp((const char *)EmptyString, v8, v10)
      && *((unsigned __int8 *)EmptyString + v6) == *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_20C3AEB38(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538B80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3AEB74()
{
  return &unk_24C538B80;
}

void sub_20C3AEB80(pxrInternal__aapl__pxrReserved__ *a1)
{
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  __int128 v7;
  uint64_t v8;
  void **v9[2];

  v7 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0] = 0;
    v9[1] = v3;
    v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(_BYTE *)(v4 - 11) = 1;
    *(_QWORD *)v4 = &unk_24C538BA0;
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = 0;
    v7 = 0uLL;
    v5 = v8;
    v8 = 0;
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = DetachedDispatcher + 264;
    v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v4 - 40))(*(_QWORD *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_20C3AEC6C();
  }
  v9[0] = (void **)&v7;
  sub_20BEEB2B8(v9);
}

void sub_20C3AEC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void sub_20C3AEC6C()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C3AECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AED08(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C538BA0;
  v3 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v3);
  return a1;
}

void sub_20C3AED50(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C538BA0;
  v2 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v2);
  operator delete(a1);
}

uint64_t sub_20C3AED9C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C3AEC6C();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C3AEE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C3AEE3C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C3AEEC0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C3AEEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

uint64_t sub_20C3AEF24(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3AEF98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C3AEF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3AE790(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C3AF04C((uint64_t)v13);
  return v11;
}

uint64_t sub_20C3AF04C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C3AF080((uint64_t *)a1);
  return a1;
}

void sub_20C3AF080(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C3AEEC0(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_20C3AF0D0(void **a1)
{
  sub_20C3AF100(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C3AF100(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_20C3AEEC0(v4, i - 32);
  }
}

uint64_t sub_20C3AF144(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C3AEF24(a1, &v11);
  v9 = a1[1];
  sub_20C3AF0D0(&v11);
  return v9;
}

void sub_20C3AF21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AF0D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C3AF230(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C3AF2B4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C3AF2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

uint64_t sub_20C3AF318(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3AF38C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C3AF38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3AE790(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C3AF440((uint64_t)v13);
  return v11;
}

uint64_t sub_20C3AF440(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C3AF474((uint64_t *)a1);
  return a1;
}

void sub_20C3AF474(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C3AF2B4(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_20C3AF4C4(void **a1)
{
  sub_20C3AF4F4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C3AF4F4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_20C3AF2B4(v4, i - 32);
  }
}

uint64_t sub_20C3AF538(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20BDDF694();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_20BED2F10((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  sub_20C37F2BC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  sub_20C3AF318(a1, &v11);
  v9 = a1[1];
  sub_20C3AF4C4(&v11);
  return v9;
}

void sub_20C3AF610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3AF4C4((void **)va);
  _Unwind_Resume(a1);
}

int *sub_20C3AF624(uint64_t a1)
{
  int *v2;
  uint64_t v4;
  uint64_t (**v5[2])(_QWORD);

  v4 = a1;
  v5[0] = (uint64_t (**)(_QWORD))off_24C538D60;
  v5[1] = (uint64_t (**)(_QWORD))&v4;
  tbb::interface7::internal::isolate_within_arena(v5, 0);
  v2 = sub_20C29D4D8(*(int **)(a1 + 1024), *(int **)(a1 + 1032));
  return sub_20C11D784(a1 + 1024, v2, *(int **)(a1 + 1032));
}

uint64_t sub_20C3AF68C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  __int16 v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 48);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v13 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v16;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  *(_QWORD *)(a1 + 416) = 0;
  v17 = operator new(0x20uLL);
  *v17 = &off_24C538BE8;
  v17[1] = a1 + 56;
  v17[2] = a1;
  *(_QWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = a4;
  *(_QWORD *)(a1 + 440) = &unk_24C538D20;
  v19 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v18);
  *(_QWORD *)(a1 + 448) = v19;
  bzero(v19, 0x2C0uLL);
  *(_OWORD *)(*(_QWORD *)(a1 + 448) + 256) = xmmword_20CAE3D80;
  *(_QWORD *)(a1 + 440) = &unk_24C538CB0;
  sub_20C3AFE9C(a1 + 464, 8uLL, &v21);
  *(_QWORD *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1048) = a5;
  return a1;
}

void sub_20C3AF7F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  sub_20C3B0100(v3);
  v5 = *(_QWORD **)(v1 + 416);
  if (v5 == (_QWORD *)(v1 + 392))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 + 392);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v2);
  sub_20C35C2E0(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3AF870(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C538BE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C3AF8B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C538BE8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3AF8D8(uint64_t a1, uint64_t a2)
{
  return sub_20C3AF928((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C3AF8E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C538C90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3AF91C()
{
  return &unk_24C538C90;
}

uint64_t sub_20C3AF928(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[2];

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 256);
  v8[0] = 0;
  v8[1] = v5;
  v6 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((_BYTE *)v6 - 11) = 1;
  *v6 = &off_24C538C58;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v4 + 264;
  return (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v6 - 5))(*(v6 - 5), v6, (uint64_t)(v6 - 1));
}

uint64_t sub_20C3AF9AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *Instance;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load(*(unint64_t **)(a1 + 16));
  sub_20C3AFAC8(*(uint64_t **)(v2 + 8));
  v4 = *(unint64_t **)(a1 + 16);
  while (1)
  {
    v5 = __ldaxr(v4);
    if (v5 != v3)
      break;
    if (!__stlxr(0, v4))
      goto LABEL_12;
  }
  __clrex();
  do
  {
    sub_20C3AFAC8(*(uint64_t **)(v2 + 8));
    v6 = *(unint64_t **)(a1 + 16);
    while (1)
    {
      v7 = __ldaxr(v6);
      if (v7 != v5)
        break;
      if (!__stlxr(0, v6))
      {
        v8 = 1;
        goto LABEL_11;
      }
    }
    v8 = 0;
    __clrex();
LABEL_11:
    v5 = v7;
  }
  while (!v8);
LABEL_12:
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v10 = v13;
  v11 = atomic_load(Instance + 18);
  if (v10 < v11
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v13, *(_QWORD *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  return 0;
}

void sub_20C3AFAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3AFAC8(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  int v5;
  int v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  while (sub_20C3AFBA0((uint64_t)(a1 + 55), &v5))
  {
    v2 = a1[129];
    if (v2 >= a1[130])
    {
      v3 = sub_20BFD7890(a1 + 128, &v5);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a1[129], &v5);
      sub_20BFD6EA4((_DWORD *)(v2 + 4), &v6);
      v3 = v2 + 8;
    }
    a1[129] = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C3AFB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C3AFBA0(uint64_t a1, int *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20C3AFC70((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20C3AFC70(uint64_t *a1, int *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v22[0] = v8 + 8;
  v22[1] = (uint64_t)a1;
  v22[2] = v17;
  v22[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    sub_20C3AFD90((uint64_t)a1, a2, v13, v16);
  }
  else
  {
    v19 = (unint64_t *)(v14 + 272);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  sub_20BF39F2C(v22);
  return v18 != 0;
}

void sub_20C3AFD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF39F2C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AFD90(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = a3 + 8 * a4;
  v7 = v5 + 16;
  sub_20BFD3EBC(a2, (int *)(v5 + 16));
  sub_20BFD3F10(a2 + 1, (int *)(v5 + 20));
  return sub_20C3AFDDC((uint64_t)&v7);
}

uint64_t sub_20C3AFDDC(uint64_t a1)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(_QWORD *)a1 + 4));
  sub_20BFD265C(v2);
  return a1;
}

void sub_20C3AFE14(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C3B0100(a1);
  operator delete(v1);
}

uint64_t sub_20C3AFE28(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 8 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C3AFE40(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 8 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C3AFE58(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C3AFE94(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_20C3AFE9C(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  v5[5] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  sub_20BF6EE60(a1, 0, &v11);
  return a1;
}

void sub_20C3AFFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C3AFFF0(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3AFFF0(uint64_t a1)
{
  tbb::internal *v2;

  sub_20C3B0028(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C3B006C(a1, v2);
  return a1;
}

uint64_t sub_20C3B0028(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = sub_20C3B006C(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_20C3B006C(uint64_t a1, tbb::internal *this)
{
  if ((*((_BYTE *)this + 40) & 1) != 0)
    sub_20C3B009C(a1, (uint64_t)this);
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

void sub_20C3B009C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 32);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
  sub_20BFD265C((_DWORD *)(a2 + 24));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 16);
  if (v6)
    sub_20C35C614(v6);
}

uint64_t sub_20C3B0100(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C538CB0;
  sub_20C3B0184((uint64_t)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C3B0238((uint64_t)a1, v4);
}

_DWORD *sub_20C3B0184(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
  while (1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    sub_20C3AFBA0(a1, &v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C3B0224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B0238(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C538D20;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

void sub_20C3B0278(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;

  v1 = **(_QWORD **)(a1 + 8);
  sub_20C3B02C8((_QWORD *)v1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v1);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 56));
  sub_20C3B0464(*(int **)(v1 + 1024), *(int **)(v1 + 1032), (uint64_t)&v3, v2);
}

_DWORD *sub_20C3B02C8(_QWORD *a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29[3];

  sub_20C3B04B8((uint64_t)a1, a2);
  v5 = a1[4];
  v4 = a1[5];
  v6 = a1[6];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v29[0] = v5;
  v29[1] = v4;
  v29[2] = v6;
  sub_20C39E344((uint64_t)a2, v29, (uint64_t)&v19);
  v14 = v19;
  sub_20BFD6E54(&v15, &v20);
  sub_20BFD6EA4(&v16, &v21);
  v17 = v22;
  v18 = v23;
  v9 = v24;
  sub_20BFD6E54(&v10, &v25);
  sub_20BFD6EA4(&v11, &v26);
  v12 = v27;
  v13 = v28;
  v29[0] = (uint64_t)a1;
  sub_20C3B0684(&v14, (uint64_t)&v9, (uint64_t)v29, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  return sub_20BFD265C(&v20);
}

void sub_20C3B043C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_20C39E310((uint64_t)va);
  sub_20C39E310((uint64_t)va1);
  sub_20C3B0808((int *)va2);
  _Unwind_Resume(a1);
}

void sub_20C3B0464(int *a1, int *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[9];
  uint64_t v9;

  if (a1 < a2)
  {
    if ((char *)a2 - (char *)a1 > 3999)
    {
      sub_20C3B2D40((uint64_t)a1, (uint64_t)a2, a3, a4);
    }
    else
    {
      *(_QWORD *)&v8[1] = v4;
      v9 = v5;
      v6 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 3);
      if (a2 == a1)
        v7 = 0;
      else
        v7 = v6;
      sub_20C3B2E6C(a1, a2, (uint64_t)v8, v7, 1);
    }
  }
}

void sub_20C3B04B8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_20C3B08B0(a1 + 464, (uint64_t)a2, 0, (uint64_t)&v16);
  if ((_BYTE)v18)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::_GetAttributes(a2, 1, 0, &v22);
    v4 = v22;
    for (i = v23; v4 != i; v4 += 32)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 24);
      if (!v6 || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v4))
      {
        v16 = (void **)a1;
        v17 = *(_DWORD *)v4;
        v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v4 + 8);
        v18 = v7;
        if (v7)
        {
          v8 = (unint64_t *)((char *)v7 + 48);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        sub_20BFD6E54(&v19, (_DWORD *)(v4 + 16));
        sub_20BFD6EA4(&v20, (_DWORD *)(v4 + 20));
        v10 = *(_QWORD *)(v4 + 24);
        v21 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            v21 &= 0xFFFFFFFFFFFFFFF8;
        }
        v13 = sub_20C3B0F00(a1 + 56, (uint64_t *)&v16);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v13 - 40))(*(_QWORD *)(v13 - 40), v13, v13 - 8);
        if ((v21 & 7) != 0)
        {
          v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
        if (v18)
          sub_20C35C614(v18);
      }
    }
    v16 = (void **)&v22;
    sub_20C3AEE3C(&v16);
  }
}

void sub_20C3B0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  sub_20C3AEE3C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C3B0684(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  _DWORD v17[32];
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17[0] = 0;
  v18 = 65539;
  v19 = 55;
  tbb::task_group_context::init((uint64_t)v17, a2, a3, a4);
  v12 = *a1;
  sub_20BFD6E54(&v13, (_DWORD *)a1 + 2);
  sub_20BFD6EA4(&v14, (_DWORD *)a1 + 3);
  v15 = *((_OWORD *)a1 + 1);
  v16 = a1[4];
  v7 = *(_QWORD *)a2;
  sub_20BFD6E54(&v8, (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(&v9, (_DWORD *)(a2 + 12));
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 32);
  sub_20C3B1C90((uint64_t)&v12, &v7, a3, (tbb::task_group_context *)v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
}

void sub_20C3B07C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C3B0808(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 13);
  sub_20BFD265C(a1 + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  return a1;
}

uint64_t sub_20C3B0850(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C3B08B0(uint64_t a1@<X0>, uint64_t a2@<X1>, tbb::internal *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t *v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  sub_20C3B0C60((uint64_t)&v29, (unsigned int *)a2, (_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16), (_QWORD *)(a2 + 24));
  v8 = bswap64(0x9E3779B97F4A7C55 * v29);
  v29 = v8;
  v31 = 0;
  v9 = &v29;
  for (i = 7; i != -1; --i)
  {
    v11 = *(unsigned __int8 *)v9;
    v9 = (unint64_t *)((char *)v9 + 1);
    *((_BYTE *)&v31 + i) = byte_20CA9F1BD[v11];
  }
  v12 = v31 | 1;
  sub_20C3B0B18(a1, v8, &v29);
  v13 = a1 + 16;
  if (a3)
  {
    *((_QWORD *)a3 + 5) = v12;
    *(_QWORD *)a3 = 0;
  }
  v14 = (_QWORD *)a2;
  while (1)
  {
    v15 = (unint64_t *)v29;
    v16 = *(_QWORD *)v29;
    if (*(_QWORD *)v29)
    {
      v17 = *(_QWORD *)(v16 + 40);
      while (1)
      {
        v18 = (unint64_t *)v16;
        if (v17 > v12)
          break;
        if (v17 == v12
          && *(_DWORD *)(v16 + 8) == *(_DWORD *)v14
          && *(_QWORD *)(v16 + 16) == v14[1]
          && *(_QWORD *)(v16 + 24) == v14[2]
          && (*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF8) == (v14[3] & 0xFFFFFFFFFFFFFFF8))
        {
          if (a3)
            sub_20C3B006C(a1 + 16, a3);
          *(_QWORD *)a4 = v16;
          *(_QWORD *)(a4 + 8) = v13;
          *(_BYTE *)(a4 + 16) = 0;
          return;
        }
        v29 = v16;
        v16 = *(_QWORD *)v16;
        if (!*v18)
        {
          v15 = v18;
          break;
        }
        v17 = *(_QWORD *)(v16 + 40);
        v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (tbb::internal *)sub_20C3B0BAC(a1 + 16, v12, a2);
      v14 = (_QWORD *)((char *)a3 + 8);
      v15 = (unint64_t *)v29;
    }
    *(_QWORD *)a3 = v16;
    do
    {
      while (1)
      {
        v19 = __ldaxr(v15);
        if (v19 == v16)
          break;
        __clrex();
        do
          v20 = __ldxr(v15);
        while (__stxr(v20, v15));
        if (v20 != v16)
          goto LABEL_26;
      }
    }
    while (__stlxr((unint64_t)a3, v15));
    v20 = v16;
LABEL_26:
    if (v16 == v20 || a3 == (tbb::internal *)v20)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v13;
    *(_BYTE *)(a4 + 16) = 0;
  }
  v22 = (unint64_t *)(a1 + 24);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = 1;
  v26 = *(_QWORD *)(a1 + 8);
  v25 = a1 + 8;
  v24 = v26;
  __dmb(0xBu);
  if ((float)((float)v23 / (float)v26) > *(float *)(v25 + 36))
  {
    do
    {
      while (1)
      {
        v27 = __ldaxr((unint64_t *)v25);
        if (v27 != v24)
          break;
        if (!__stlxr(2 * v24, (unint64_t *)v25))
          return;
      }
      __clrex();
      do
        v28 = __ldxr((unint64_t *)v25);
      while (__stxr(v28, (unint64_t *)v25));
    }
    while (v28 == v24);
  }
}

void sub_20C3B0B18(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  __dmb(0xBu);
  v6 = a2 % v5;
  v7 = sub_20BEB4B94(a2 % v5);
  v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  v9 = a1 + 8 * v7;
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (v12 = *v10, __dmb(0xBu), !*(_QWORD *)(v12 + 8 * v8)))
    sub_20C3B0D40(a1, (unint64_t *)v6);
  v13 = *v10;
  __dmb(0xBu);
  *a3 = *(_QWORD *)(v13 + 8 * v8);
}

uint64_t sub_20C3B0BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  v6 = v5;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v5 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 48);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(v5 + 24), (_DWORD *)(a3 + 16));
  sub_20BFD6EA4((_DWORD *)(v6 + 28), (_DWORD *)(a3 + 20));
  v10 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(v6 + 32) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(v6 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)v6 = 0;
  return v6;
}

uint64_t sub_20C3B0C60(uint64_t a1, unsigned int *a2, _QWORD *a3, unsigned int *a4, _QWORD *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C3B0C9C(a1, a3, a4, a5);
}

uint64_t sub_20C3B0C9C(uint64_t a1, _QWORD *a2, unsigned int *a3, _QWORD *a4)
{
  unint64_t v4;

  v4 = bswap64(0x9E3779B97F4A7C55 * *a2);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C3B0CEC(a1, a3, a4);
}

uint64_t sub_20C3B0CEC(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;

  result = sub_20BFD84AC(a1, a2);
  v6 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(a1 + 8))
    v6 += (*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return result;
}

void sub_20C3B0D40(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t i;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;

  v4 = sub_20BF77DA0(a1, (unint64_t)a2);
  if (!sub_20BF77E2C(a1, v4))
    sub_20C3B0D40(a1, v4);
  v5 = sub_20BEB4B94(v4);
  v6 = *(_QWORD *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  v11 = *(unint64_t **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  v12 = 0;
  v13 = a2;
  v7 = &v13;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t **)((char *)v7 + 1);
    *((_BYTE *)&v12 + i) = byte_20CA9F1BD[v9];
  }
  sub_20C3B0E20(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  v10 = v13;
  sub_20BF6EE60(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_20C3B0E20@<X0>(uint64_t a1@<X0>, unint64_t **a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t *i;
  tbb::internal *result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  i = (unint64_t *)**a2;
  result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  *((_QWORD *)result + 5) = a3;
  *(_QWORD *)result = 0;
  if (i)
    goto LABEL_2;
LABEL_3:
  while (1)
  {
    v11 = *a2;
    *(_QWORD *)result = i;
    do
    {
      while (1)
      {
        v12 = __ldaxr(v11);
        if ((unint64_t *)v12 == i)
          break;
        __clrex();
        do
          v13 = __ldxr(v11);
        while (__stxr(v13, v11));
        if ((unint64_t *)v13 != i)
          goto LABEL_10;
      }
    }
    while (__stlxr((unint64_t)result, v11));
    v13 = (unint64_t)i;
LABEL_10:
    if (i == (unint64_t *)v13 || result == (tbb::internal *)v13)
      break;
    for (i = *a2; ; *a2 = i)
    {
      i = (unint64_t *)*i;
      if (!i)
        break;
LABEL_2:
      v10 = i[5];
      if (v10 > a3)
        goto LABEL_3;
      if (v10 == a3)
      {
        result = (tbb::internal *)sub_20C3B006C(a1, result);
        goto LABEL_21;
      }
    }
  }
  i = (unint64_t *)result;
LABEL_21:
  *a4 = i;
  return result;
}

unint64_t sub_20C3B0F00(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  sub_20C3B0F74(v5, a2, a1 + 264);
  return v5;
}

void sub_20C3B0F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::task *v9;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B0F74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_BYTE *)(a1 - 11) = 1;
  v6 = *a2;
  *(_QWORD *)a1 = off_24C538DA0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 48);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 32), (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)(a1 + 36), (_DWORD *)a2 + 7);
  v10 = a2[4];
  *(_QWORD *)(a1 + 40) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_20C3B1034(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C538DA0;
  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 24);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C3B10A0(void *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C538DA0;
  v2 = *((_QWORD *)a1 + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
  sub_20BFD265C((_DWORD *)a1 + 8);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 3);
  if (v5)
    sub_20C35C614(v5);
  operator delete(a1);
}

uint64_t sub_20C3B110C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C3B11B0(*(_QWORD *)(a1 + 8), a1 + 16);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C3B119C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C3B11B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5[3];
  void **v6;

  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections(a2, (uint64_t *)v5);
  sub_20C3B122C(a1, v5, v3, v4);
  v6 = (void **)v5;
  sub_20BFD6F90(&v6);
}

void sub_20C3B1214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C3B122C(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  int8x16_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  _DWORD v19[32];
  uint64_t v20;
  int v21;
  uint64_t v22;

  v4 = (int8x16_t *)a2;
  v22 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = *(_QWORD *)(a1 + 448);
      v9 = (unint64_t *)(v8 + 128);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      sub_20C3B13D8((_QWORD *)(v8 + 40 * ((3 * (_BYTE)v10) & 7) + 384), v6, v10, (uint64_t *)(a1 + 440), (uint64_t (*)(_QWORD *, uint64_t))sub_20C3B13B0);
      v6 += 8;
    }
    while (v6 != v7);
    a2 = (unint64_t *)(a1 + 424);
    do
      v11 = __ldaxr(a2);
    while (__stlxr(v11 + 1, a2));
    if (!v11)
    {
      v12 = *(_QWORD *)(a1 + 416);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    }
  }
  if (*(_BYTE *)(a1 + 1048))
  {
    v14 = a1;
    v19[0] = 0;
    v20 = 65539;
    v21 = 55;
    v13 = *v4;
    tbb::task_group_context::init((uint64_t)v19, (uint64_t)a2, a3, a4);
    v17 = &v14;
    v15 = vextq_s8(v13, v13, 8uLL);
    v16 = 1;
    sub_20C3B158C(&v15, &v17, (uint64_t)&v18, (tbb::task_group_context *)v19);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v19);
  }
}

void sub_20C3B1394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B13B0(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;

  v3 = sub_20BFD6E54(a1, a2);
  return sub_20BFD6EA4(v3 + 1, a2 + 1);
}

uint64_t sub_20C3B13D8(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD *, uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t result;
  unint64_t v17;
  _BYTE *v18;

  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  v10 = (*(_QWORD *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    *v11 = 0;
    v11[1] = 0;
  }
  v13 = a1 + 3;
  v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9)
    sub_20BF3A228((uint64_t)a1, a1 + 3, v9, a4[1]);
  if (v11)
  {
    sub_20BEB3FEC((uint64_t)&v18, (uint64_t)(a1 + 4));
    v14 = (_QWORD *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v14 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      *v14 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    v15 = v18;
    if (v18)
    {
      __dmb(0xBu);
      *v15 = 0;
    }
  }
  else
  {
    v11 = (_QWORD *)a1[2];
    __dmb(0xBu);
  }
  result = a5(&v11[v10 + 2], a2);
  v11[1] |= 1 << v10;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 + 8, v13));
  return result;
}

void sub_20C3B1508(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  __cxa_begin_catch(a1);
  v4 = (unint64_t *)(*(_QWORD *)(v1 + 8) + 272);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  sub_20BF3A1B0(v2, v3);
}

void sub_20C3B1530()
{
  __cxa_end_catch();
  __break(1u);
}

void sub_20C3B1538(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3B158C(_QWORD *result, _QWORD *a2, uint64_t a3, tbb::task_group_context *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v9;

  if (result[1] < *result)
  {
    v5 = result;
    v9 = a4;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &off_24C538DE8;
    v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_QWORD *)(v6 + 32) = *a2;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 52) = 5;
    *(_QWORD *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40)
                                                                                           + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_20C3B163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::task *v10;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B1660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C3B16CC(v2, a1, a1 + 8);
  return 0;
}

void sub_20C3B16CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16) < (unint64_t)((uint64_t)(*(_QWORD *)a3 - *(_QWORD *)(a3 + 8)) >> 3))
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C3B177C(a2);
          if (*(_QWORD *)(a3 + 16) >= (unint64_t)((uint64_t)(*(_QWORD *)a3 - *(_QWORD *)(a3 + 8)) >> 3))
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            break;
          }
        }
      }
    }
  }
  sub_20C3B1854(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfPath **)a3);
}

uint64_t sub_20C3B177C(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = &off_24C538DE8;
  *(_QWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 16)
     + 8
     * ((((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3 < 0)) >> 1);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(v3 + 40) = v6;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 52);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

void sub_20C3B1854(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfPath **v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14[16];
  __int128 v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  v5 = *a3;
  if ((unint64_t)a3[2] < (*a3 - v4) >> 3 && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v14 = 0x10000;
    v15 = *(_OWORD *)a3;
    v16 = a3[2];
    while (1)
    {
      sub_20BF87AFC(v14, *(unsigned __int8 *)(a1 + 12));
      v7 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0)
        break;
      v13 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v13;
      v12 = v14[2];
      if (v14[2] < 2u)
      {
        v8 = v14[0];
        if (v14[v14[0] + 3] >= v13
          || *((_QWORD *)&v15 + 3 * v14[0] + 2) >= (unint64_t)((uint64_t)(*((_QWORD *)&v15 + 3 * v14[0])
                                                                              - *((_QWORD *)&v15 + 3 * v14[0] + 1)) >> 3))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_20C3B1A1C(a2, (uint64_t)&v15 + 24 * v14[1], v14[v14[1] + 3]);
        v12 = --v14[2];
        v14[1] = (v14[1] + 1) & 7;
      }
LABEL_14:
      if (!v12 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56)))
        return;
    }
    v8 = v14[0];
LABEL_6:
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&v15 + 3 * v8;
    v11 = *v9;
    v10 = v9[1];
    if (v10 != *v9)
    {
      do
      {
        sub_20C3B1AE8(*(uint64_t **)(a2 + 32), v10);
        v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      }
      while (v10 != v11);
      LOBYTE(v8) = v14[0];
    }
    v12 = --v14[2];
    v14[0] = (v8 - 1) & 7;
    goto LABEL_14;
  }
  while (v4 != v5)
  {
    sub_20C3B1AE8(*(uint64_t **)(a2 + 32), v4);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
  }
}

uint64_t sub_20C3B1A1C(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &off_24C538DE8;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

void sub_20C3B1AE8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  BOOL HasPrefix;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*a1;
  sub_20C348EEC(*a1, &v18);
  HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (!HasPrefix)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, v5, &v16);
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v14);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (uint64_t)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    v8 = v17;
    if (v17)
    {
      v9 = (unsigned int *)(v17 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v18, v7))sub_20C3B02C8(v3, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
    if ((v23 & 7) != 0)
    {
      v12 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
  }
}

void sub_20C3B1C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B1C90(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  v14 = *(_QWORD *)a1;
  sub_20BFD6E54(&v15, (_DWORD *)(a1 + 8));
  sub_20BFD6EA4(&v16, (_DWORD *)(a1 + 12));
  v17 = *(_OWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 32);
  v9 = *a2;
  sub_20BFD6E54(&v10, (_DWORD *)a2 + 2);
  sub_20BFD6EA4(&v11, (_DWORD *)a2 + 3);
  v12 = *((_OWORD *)a2 + 1);
  v13 = a2[4];
  sub_20C3B1DA8(&v14, (uint64_t)&v9, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C3B1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C39E310((uint64_t)&a9);
  sub_20C39E310((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B1DA8(uint64_t *a1, uint64_t a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a3;
  v13 = *a1;
  sub_20BFD6E54(&v14, (_DWORD *)a1 + 2);
  sub_20BFD6EA4(&v15, (_DWORD *)a1 + 3);
  v16 = *((_OWORD *)a1 + 1);
  v17 = a1[4];
  v8 = *(_QWORD *)a2;
  sub_20BFD6E54(&v9, (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(&v10, (_DWORD *)(a2 + 12));
  v11 = *(_OWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 32);
  sub_20C3B1EB8((uint64_t)&v13, &v8, (uint64_t)&v18, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_20BFD265C(&v14);
}

void sub_20C3B1E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C39E310((uint64_t)va);
  sub_20C39E310((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B1EB8(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1])
  {
    result = sub_20C39FA44(a1 + 16, (uint64_t)(a2 + 2));
    if ((result & 1) != 0)
      return result;
    v8 = *(_QWORD *)a1;
  }
  v15 = v8;
  sub_20BFD6E54(&v16, (_DWORD *)(a1 + 8));
  sub_20BFD6EA4(&v17, (_DWORD *)(a1 + 12));
  v18 = *(_OWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 32);
  v10 = *a2;
  sub_20BFD6E54(&v11, (_DWORD *)a2 + 2);
  sub_20BFD6EA4(&v12, (_DWORD *)a2 + 3);
  v13 = *((_OWORD *)a2 + 1);
  v14 = a2[4];
  sub_20C3B200C(&v15, (uint64_t)&v10, a3, (uint64_t)sub_20C3B2124, 0, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  return (uint64_t)sub_20BFD265C(&v16);
}

void sub_20C3B1FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C39E310((uint64_t)&a9);
  sub_20C39E310((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B200C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, tbb::task_group_context *a6)
{
  uint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;

  v16 = *a1;
  sub_20BFD6E54(&v17, (_DWORD *)a1 + 2);
  sub_20BFD6EA4(&v18, (_DWORD *)a1 + 3);
  v19 = *((_OWORD *)a1 + 1);
  v20 = a1[4];
  v11 = *(_QWORD *)a2;
  sub_20BFD6E54(&v12, (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(&v13, (_DWORD *)(a2 + 12));
  v14 = *(_OWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 32);
  sub_20C3B2130((uint64_t)&v16, &v11, a3, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_20BFD265C(&v17);
}

void sub_20C3B2108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C39E310((uint64_t)&a9);
  sub_20C39E310((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20C3B2124(uint64_t **a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_20C3B04B8(**a1, a2);
}

tbb::internal::generic_scheduler *sub_20C3B2130(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  tbb::interface5::internal::task_base *v7;
  unint64_t v8;
  tbb::interface5::internal::task_base *v9;
  tbb::task *v10;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[2];
  tbb::interface5::internal::task_base *v23;
  tbb::task_group_context *v24;

  v22[0] = off_24C538E30;
  v24 = a4;
  v7 = (tbb::interface5::internal::task_base *)tbb::internal::allocate_root_with_context_proxy::allocate(&v24, 8uLL);
  *((_BYTE *)v7 - 11) = 1;
  *(_QWORD *)v7 = &unk_24C5164A8;
  v22[1] = a3;
  v23 = v7;
  v8 = tbb::internal::allocate_child_proxy::allocate(v7, 0x60uLL);
  v17 = *(_QWORD *)a1;
  sub_20BFD6E54(&v18, (_DWORD *)(a1 + 8));
  sub_20BFD6EA4(&v19, (_DWORD *)(a1 + 12));
  v20 = *(_OWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 32);
  v12 = *a2;
  sub_20BFD6E54(&v13, (_DWORD *)a2 + 2);
  sub_20BFD6EA4(&v14, (_DWORD *)a2 + 3);
  v15 = *((_OWORD *)a2 + 1);
  v16 = a2[4];
  sub_20C3B26F0(v8, &v17, (uint64_t)&v12, (uint64_t)v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  v9 = v23;
  *((_QWORD *)v23 - 3) = 2;
  (*(void (**)(_QWORD, tbb::interface5::internal::task_base *, unint64_t))(**((_QWORD **)v9 - 5) + 8))(*((_QWORD *)v9 - 5), v9, v8);
  v22[0] = off_24C538E30;
  return tbb::interface5::internal::task_base::destroy(v23, v10);
}

void sub_20C3B229C(_Unwind_Exception *a1, tbb::task *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,tbb::interface5::internal::task_base *a21)
{
  tbb::interface5::internal::task_base::destroy(a21, a2);
  _Unwind_Resume(a1);
}

void sub_20C3B22BC(uint64_t a1, tbb::task *a2)
{
  void *v2;

  v2 = (void *)sub_20C3B2D08(a1, a2);
  operator delete(v2);
}

uint64_t sub_20C3B22D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *(_QWORD *)(a1 + 16);
  v8[0] = 0;
  v8[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x30uLL);
  v6 = sub_20C3B2670(v5, a2, a1);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v6 - 40))(*(_QWORD *)(v6 - 40), v5, v5 - 8);
}

uint64_t sub_20C3B2340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  sub_20C3B23C8(v5, a2, a1);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v5 - 40))(*(_QWORD *)(v5 - 40), v5, v5 - 8);
}

void sub_20C3B23AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::task *v9;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B23C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = off_24C538E78;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_20C3B2484(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C538E78;
  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C3B24F0(void *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C538E78;
  v2 = *((_QWORD *)a1 + 4);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_20BFD265C((_DWORD *)a1 + 6);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 2);
  if (v5)
    sub_20C35C614(v5);
  operator delete(a1);
}

uint64_t sub_20C3B255C(uint64_t a1)
{
  sub_20C3B2590(*(uint64_t ***)(*(_QWORD *)(a1 + 40) + 8), (int *)(a1 + 8));
  return 0;
}

void sub_20C3B2590(uint64_t **a1, int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  v6 = *a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v8 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  v9 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  sub_20C3B04B8(**a1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3B2654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B2670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = off_24C538E78;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_20C3B26F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)(a1 - 11) = 1;
  v8 = *a2;
  *(_QWORD *)a1 = off_24C538EC0;
  *(_QWORD *)(a1 + 8) = v8;
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)a2 + 2);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)a2 + 3);
  v9 = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 40) = a2[4];
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
  sub_20BFD6E54((_DWORD *)(a1 + 56), (_DWORD *)(a3 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 60), (_DWORD *)(a3 + 12));
  v10 = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_20C3B278C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C538EC0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_20BFD265C((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C3B27DC(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C538EC0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_20BFD265C(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

unint64_t sub_20C3B2830(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v2 = a1 + 8;
  v15 = *(_QWORD *)(a1 + 8);
  sub_20BFD6E54(&v16, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v17, (_DWORD *)(v2 + 12));
  v3 = 0;
  v18 = *(_OWORD *)(v2 + 16);
  v19 = *(_QWORD *)(v2 + 32);
  while (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 48)
       || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 56)
       || (sub_20C39FA44(v2 + 16, v2 + 56) & 1) == 0)
  {
    sub_20C3A016C(v2);
    if (++v3 == 4)
    {
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 48)
        || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 56)
        || (sub_20C39FA44(v2 + 16, v2 + 56) & 1) == 0)
      {
        *(_BYTE *)(a1 - 12) = 1;
      }
      v3 = 4;
      goto LABEL_11;
    }
  }
  if (v3)
  {
LABEL_11:
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16);
    v14[0] = 0;
    v14[1] = v4;
    v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v14, 0x40uLL);
    v9 = v15;
    sub_20BFD6E54(&v10, &v16);
    sub_20BFD6EA4(&v11, &v17);
    v13 = v19;
    v12 = v18;
    v6 = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(v5 - 11) = 1;
    *(_QWORD *)v5 = off_24C538F08;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v9;
    sub_20BFD6E54((_DWORD *)(v5 + 24), &v10);
    sub_20BFD6EA4((_DWORD *)(v5 + 28), &v11);
    v7 = v13;
    *(_OWORD *)(v5 + 32) = v12;
    *(_QWORD *)(v5 + 48) = v7;
    *(_QWORD *)(v5 + 56) = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    goto LABEL_12;
  }
  v5 = 0;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  return v5;
}

void sub_20C3B2A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C39E310((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B2A2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C538F08;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  return a1;
}

void sub_20C3B2A68(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C538F08;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_20BFD265C(a1 + 6);
  operator delete(a1);
}

uint64_t sub_20C3B2AA4(tbb::internal::allocate_child_proxy *this)
{
  char *v2;
  _DWORD *v3;
  _DWORD *v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t *v14;

  v2 = (char *)this + 16;
  v13 = 0;
  v3 = (_DWORD *)((char *)this + 24);
  v4 = (_DWORD *)((char *)this + 28);
  v5 = (char *)this + 32;
  v6 = (unint64_t *)&v13;
  v7 = 0x200000000;
  for (i = 1; ; ++i)
  {
    v14 = v6;
    v9 = tbb::internal::allocate_child_proxy::allocate(this, 0x38uLL);
    v10 = *((_QWORD *)this + 1);
    *(_BYTE *)(v9 - 11) = 1;
    *(_QWORD *)v9 = off_24C538F50;
    *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 2);
    sub_20BFD6E54((_DWORD *)(v9 + 16), v3);
    sub_20BFD6EA4((_DWORD *)(v9 + 20), v4);
    v11 = *((_QWORD *)v5 + 2);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)v5;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 48) = v10;
    sub_20C3A016C((uint64_t)v2);
    if (i == *((_QWORD *)this + 7))
      break;
    *(_QWORD *)(v9 - 8) = 0;
    v6 = (unint64_t *)(v9 - 8);
    *v14 = v9;
    v7 += 0x100000000;
  }
  *((_QWORD *)this - 3) = v7 >> 32;
  if (v13)
  {
    (***(void (****)(_QWORD, uint64_t, unint64_t *))(v13 - 40))(*(_QWORD *)(v13 - 40), v13, v14);
    v13 = 0;
    v14 = (unint64_t *)&v13;
  }
  (*(void (**)(_QWORD, tbb::internal::allocate_child_proxy *, unint64_t))(**((_QWORD **)this - 5) + 8))(*((_QWORD *)this - 5), this, v9);
  return 0;
}

uint64_t sub_20C3B2BE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C538F50;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C3B2C1C(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C538F50;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

uint64_t sub_20C3B2C58(uint64_t a1)
{
  uint64_t **v1;
  unsigned int *v2;
  unsigned int v3;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v1 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 8);
  sub_20C3A048C(a1 + 8, (uint64_t)&v5);
  sub_20C3B2590(v1, &v5);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return 0;
}

void sub_20C3B2CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B2D08(uint64_t a1, tbb::task *a2)
{
  *(_QWORD *)a1 = off_24C538E30;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_20C3B2D40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _DWORD v15[32];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15[0] = 1;
  v16 = 65539;
  v17 = 54;
  tbb::task_group_context::init((uint64_t)v15, a2, a3, a4);
  v8 = 0;
  while (v8 != 72)
  {
    v9 = *(_QWORD *)(a1 + v8);
    v10 = *(_QWORD *)(a1 + v8 + 8);
    v8 += 8;
    if (v10 < v9)
      goto LABEL_6;
  }
  *(_QWORD *)&v13 = a2;
  *((_QWORD *)&v13 + 1) = a1 + 80;
  v14 = 1;
  v12 = a3;
  sub_20C3B4154(&v13, &v12, (uint64_t)&v11, (tbb::task_group_context *)v15);
  if (!tbb::task_group_context::is_group_execution_cancelled((tbb::task_group_context *)v15))
    goto LABEL_7;
LABEL_6:
  *(_QWORD *)&v13 = a3;
  *((_QWORD *)&v13 + 1) = (a2 - a1) >> 3;
  v14 = a1;
  sub_20C3B4748(&v13, (uint64_t)&v12, (uint64_t)&v11, v7);
LABEL_7:
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
}

void sub_20C3B2E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

int *sub_20C3B2E6C(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  char v17;
  BOOL v18;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((_QWORD *)a2 - 1) < *(_QWORD *)v9)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, a2 - 2);
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, a2 - 1);
        }
        return result;
      case 3uLL:
        return (int *)sub_20C3B33FC(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_20C3B39EC(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_20C3B3ABC(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_20C3B31CC(v9, a2);
          else
            return sub_20C3B32F4(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20C3B33FC(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C3B33FC(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_20C3B33FC(v9 + 2, v15 - 2, a2 - 4);
            sub_20C3B33FC(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_20C3B33FC(v15 - 2, v15, &v9[2 * v14 + 2]);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v15);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, &v9[2 * v14 + 1]);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*((_QWORD *)v9 - 1) >= *(_QWORD *)v9)
          {
            result = sub_20C3B3514(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v16 = sub_20C3B366C(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_15;
          v18 = sub_20C3B37D8(v9, v16);
          v9 = v16 + 2;
          result = (int *)sub_20C3B37D8(v16 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_15:
            result = (int *)sub_20C3B2E6C(v8, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return sub_20C3B3BBC((uint64_t)v9, (uint64_t)a2, a2, a3);
        return result;
    }
  }
}

int *sub_20C3B31CC(int *result, int *a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  unint64_t v11;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 2;
    if (result + 2 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v4;
        if (*((_QWORD *)v6 + 1) < *(_QWORD *)v6)
        {
          LODWORD(v11) = *((_QWORD *)v6 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v4);
          HIDWORD(v11) = v6[3];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v6 + 3);
          v8 = v5;
          while (1)
          {
            v9 = (int *)((char *)v3 + v8);
            sub_20BFD3EBC((int *)((char *)v3 + v8 + 8), (int *)((char *)v3 + v8));
            sub_20BFD3F10(v9 + 3, v9 + 1);
            if (!v8)
              break;
            v8 -= 8;
            if (v11 >= *((_QWORD *)v9 - 1))
            {
              v10 = (int *)((char *)v3 + v8 + 8);
              goto LABEL_10;
            }
          }
          v10 = v3;
LABEL_10:
          sub_20BFD3EBC(v10, (int *)&v11);
          sub_20BFD3F10(v9 + 1, (int *)&v11 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
          result = sub_20BFD265C(&v11);
        }
        v4 = v7 + 2;
        v5 += 8;
        v6 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

_DWORD *sub_20C3B32F4(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  int *v5;
  _DWORD *v6;
  int *v7;
  int *v8;
  unint64_t v9;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 2;
    if (result + 2 != a2)
    {
      v5 = result + 3;
      do
      {
        v6 = v4;
        if (*((_QWORD *)v3 + 1) < *(_QWORD *)v3)
        {
          LODWORD(v9) = *((_QWORD *)v3 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v4);
          HIDWORD(v9) = v3[3];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v3 + 3);
          v7 = v5;
          do
          {
            v8 = v7;
            sub_20BFD3EBC(v7 - 1, v7 - 3);
            v7 -= 2;
            sub_20BFD3F10(v8, v7);
          }
          while (v9 < *(_QWORD *)(v8 - 5));
          sub_20BFD3EBC(v7 - 1, (int *)&v9);
          sub_20BFD3F10(v7, (int *)&v9 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
          result = sub_20BFD265C(&v9);
        }
        v4 = v6 + 2;
        v5 += 2;
        v3 = v6;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_20C3B33FC(int *a1, int *a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int *v11;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)a3;
  if (*(_QWORD *)a2 >= *(_QWORD *)a1)
  {
    if (v7 >= v6)
      return 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    v9 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    if (*(_QWORD *)a2 < *(_QWORD *)a1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
      v8 = a1 + 1;
      v10 = 2;
      goto LABEL_9;
    }
    return 1;
  }
  v8 = a1 + 1;
  if (v7 >= v6)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
    v11 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8, a2 + 1);
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      v9 = a3 + 1;
      v10 = 2;
      v8 = v11;
      goto LABEL_9;
    }
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a3);
  v9 = a3 + 1;
  v10 = 1;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8, v9);
  return v10;
}

int *sub_20C3B3514(int *a1, int *a2)
{
  int *v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  LODWORD(v11) = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  HIDWORD(v11) = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  if (v11 >= *((_QWORD *)a2 - 1))
  {
    v6 = a1 + 2;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 2;
    }
    while (v11 >= *(_QWORD *)v4);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = *((_QWORD *)v4 + 1);
      v4 += 2;
    }
    while (v11 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *((_QWORD *)a2 - 1);
      a2 -= 2;
    }
    while (v11 < v7);
  }
  while (v4 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v4, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v4 + 1, a2 + 1);
    do
    {
      v8 = *((_QWORD *)v4 + 1);
      v4 += 2;
    }
    while (v11 >= v8);
    do
    {
      v9 = *((_QWORD *)a2 - 1);
      a2 -= 2;
    }
    while (v11 < v9);
  }
  if (v4 - 2 != a1)
  {
    sub_20BFD3EBC(a1, v4 - 2);
    sub_20BFD3F10(a1 + 1, v4 - 1);
  }
  sub_20BFD3EBC(v4 - 2, (int *)&v11);
  sub_20BFD3F10(v4 - 1, (int *)&v11 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  return v4;
}

int *sub_20C3B366C(int *a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  LODWORD(v14) = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  HIDWORD(v14) = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)&a1[v4 + 2];
    v4 += 2;
  }
  while (v5 < v14);
  v6 = &a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v6 >= a2)
        break;
      v8 = *((_QWORD *)a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v14);
  }
  else
  {
    do
    {
      v7 = *((_QWORD *)a2 - 1);
      a2 -= 2;
    }
    while (v7 >= v14);
  }
  v9 = &a1[v4];
  if (v6 < a2)
  {
    v10 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v10 + 1);
      do
      {
        v11 = *((_QWORD *)v9 + 1);
        v9 += 2;
      }
      while (v11 < v14);
      do
      {
        v12 = *((_QWORD *)v10 - 1);
        v10 -= 2;
      }
      while (v12 >= v14);
    }
    while (v9 < v10);
  }
  if (v9 - 2 != a1)
  {
    sub_20BFD3EBC(a1, v9 - 2);
    sub_20BFD3F10(a1 + 1, v9 - 1);
  }
  sub_20BFD3EBC(v9 - 2, (int *)&v14);
  sub_20BFD3F10(v9 - 1, (int *)&v14 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  return v9 - 2;
}

BOOL sub_20C3B37D8(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int *v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unint64_t v14;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (*((_QWORD *)a2 - 1) < *(_QWORD *)a1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 1);
        return 1;
      }
      return result;
    case 3:
      sub_20C3B33FC(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20C3B39EC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20C3B3ABC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v7 = a1 + 4;
      sub_20C3B33FC(a1, a1 + 2, a1 + 4);
      v8 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (*(_QWORD *)v8 < *(_QWORD *)v7)
    {
      LODWORD(v14) = *(_QWORD *)v8;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v8);
      HIDWORD(v14) = v8[1];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v8 + 1);
      v11 = v9;
      while (1)
      {
        v12 = (int *)((char *)a1 + v11);
        sub_20BFD3EBC((int *)((char *)a1 + v11 + 24), (int *)((char *)a1 + v11 + 16));
        sub_20BFD3F10(v12 + 7, v12 + 5);
        if (v11 == -16)
          break;
        v11 -= 8;
        if (v14 >= *((_QWORD *)v12 + 1))
        {
          v13 = (int *)((char *)a1 + v11 + 24);
          goto LABEL_12;
        }
      }
      v13 = a1;
LABEL_12:
      sub_20BFD3EBC(v13, (int *)&v14);
      sub_20BFD3F10(v12 + 5, (int *)&v14 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
      ++v10;
      sub_20BFD265C(&v14);
      if (v10 == 8)
        return v8 + 2 == a2;
    }
    v7 = v8;
    v9 += 8;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
}

int *sub_20C3B39EC(int *a1, int *a2, int *a3, int *a4)
{
  int *result;

  result = (int *)sub_20C3B33FC(a1, a2, a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      }
    }
  }
  return result;
}

int *sub_20C3B3ABC(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;

  result = sub_20C3B39EC(a1, a2, a3, a4);
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    if (*(_QWORD *)a4 < *(_QWORD *)a3)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      if (*(_QWORD *)a3 < *(_QWORD *)a2)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        if (*(_QWORD *)a2 < *(_QWORD *)a1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        }
      }
    }
  }
  return result;
}

int *sub_20C3B3BBC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (int *)(a1 + 8 * v10);
      do
      {
        sub_20C3B3CE0((char *)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((int *)v6 != a3)
    {
      v14 = (int *)v6;
      do
      {
        if (*(_QWORD *)v14 < *(_QWORD *)a1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v14, (int *)a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v14 + 1, (int *)(a1 + 4));
          sub_20C3B3CE0((char *)a1, a4, v9, (int *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 9)
    {
      v15 = (unint64_t)v8 >> 3;
      do
      {
        sub_20C3B3E68((int *)a1, v6, a4, v15);
        v6 -= 8;
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

char *sub_20C3B3CE0(char *result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - result) >> 3)
    {
      v9 = ((char *)a4 - result) >> 2;
      v10 = v9 + 1;
      v11 = &result[8 * v9 + 8];
      v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        v13 = *(_QWORD *)v11;
      }
      else
      {
        v13 = *(_QWORD *)v11;
        v14 = *((_QWORD *)v11 + 1);
        if (*(_QWORD *)v11 <= v14)
          v13 = *((_QWORD *)v11 + 1);
        if (*(_QWORD *)v11 < v14)
        {
          v11 += 8;
          v10 = v12;
        }
      }
      if (v13 >= *(_QWORD *)a4)
      {
        LODWORD(v19) = *(_QWORD *)a4;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a4);
        HIDWORD(v19) = v5[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v5 + 1);
        do
        {
          v15 = (int *)v11;
          sub_20BFD3EBC(v5, (int *)v11);
          v16 = (int *)(v11 + 4);
          sub_20BFD3F10(v5 + 1, (int *)v11 + 1);
          if (v7 < v10)
            break;
          v11 = &v6[8 * ((2 * v10) | 1)];
          if (2 * v10 + 2 >= a3)
          {
            v17 = *(_QWORD *)v11;
            v10 = (2 * v10) | 1;
          }
          else
          {
            v17 = *(_QWORD *)v11;
            v18 = *((_QWORD *)v11 + 1);
            if (*(_QWORD *)v11 <= v18)
              v17 = *((_QWORD *)v11 + 1);
            if (*(_QWORD *)v11 >= v18)
            {
              v10 = (2 * v10) | 1;
            }
            else
            {
              v11 += 8;
              v10 = 2 * v10 + 2;
            }
          }
          v5 = v15;
        }
        while (v17 >= v19);
        sub_20BFD3EBC(v15, (int *)&v19);
        sub_20BFD3F10(v16, (int *)&v19 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
        return (char *)sub_20BFD265C(&v19);
      }
    }
  }
  return result;
}

int *sub_20C3B3E68(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;

  if (a4 >= 2)
  {
    v7 = result;
    v13 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    v14 = v7[1];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
    v8 = (int *)sub_20C3B3FA4(v7, a3, a4);
    v9 = v8;
    v10 = (int *)(a2 - 8);
    v11 = v8 + 1;
    if (v8 == (int *)(a2 - 8))
    {
      sub_20BFD3EBC(v8, &v13);
      sub_20BFD3F10(v11, &v14);
    }
    else
    {
      sub_20BFD3EBC(v8, (int *)(a2 - 8));
      v12 = (int *)(a2 - 4);
      sub_20BFD3F10(v11, v12);
      sub_20BFD3EBC(v10, &v13);
      sub_20BFD3F10(v12, &v14);
      sub_20C3B404C(v7, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)v7) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return sub_20BFD265C(&v13);
  }
  return result;
}

void sub_20C3B3F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B3FA4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)&a1[2 * v5 + 2];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3 && *(_QWORD *)v8 < *(_QWORD *)(v8 + 8))
    {
      v8 += 8;
      v9 = v10;
    }
    sub_20BFD3EBC(a1, (int *)v8);
    sub_20BFD3F10(a1 + 1, (int *)(v8 + 4));
    a1 = (int *)v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

_DWORD *sub_20C3B404C(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  unint64_t v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = &result[2 * (v4 >> 1)];
    v9 = (int *)(a2 - 8);
    if (*(_QWORD *)v8 < *(_QWORD *)(a2 - 8))
    {
      LODWORD(v12) = *(_QWORD *)(a2 - 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 8));
      HIDWORD(v12) = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        v10 = v8;
        sub_20BFD3EBC(v9, v8);
        v11 = v8 + 1;
        sub_20BFD3F10(v9 + 1, v8 + 1);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = &v6[2 * v7];
        v9 = v10;
      }
      while (*(_QWORD *)v8 < v12);
      sub_20BFD3EBC(v10, (int *)&v12);
      sub_20BFD3F10(v11, (int *)&v12 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      return sub_20BFD265C(&v12);
    }
  }
  return result;
}

_QWORD *sub_20C3B4154(_QWORD *result, _QWORD *a2, uint64_t a3, tbb::task_group_context *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v9;

  if (result[1] < *result)
  {
    v5 = result;
    v9 = a4;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &unk_24C538F98;
    v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_QWORD *)(v6 + 32) = *a2;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 52) = 5;
    *(_QWORD *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40)
                                                                                           + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_20C3B4208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::task *v10;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B422C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C3B4298(v2, a1, (_QWORD *)(a1 + 8));
  return 0;
}

uint64_t sub_20C3B4298(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (a3[2] < (unint64_t)((uint64_t)(*a3 - a3[1]) >> 3))
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C3B4348(a2);
          if (a3[2] >= (unint64_t)((uint64_t)(*a3 - a3[1]) >> 3))
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            return sub_20C3B4424(a1, a2, a3);
          }
        }
      }
    }
  }
  return sub_20C3B4424(a1, a2, a3);
}

uint64_t sub_20C3B4348(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = &unk_24C538F98;
  *(_QWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 16)
     + 8
     * ((((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3 < 0)) >> 1);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(v3 + 40) = v6;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 52);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

uint64_t sub_20C3B4424(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  char v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10[16];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a3[2] < (unint64_t)((uint64_t)(*a3 - a3[1]) >> 3) && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v10 = 0x10000;
    v11 = *(_OWORD *)a3;
    v12 = a3[2];
    while (1)
    {
      result = (uint64_t)sub_20BF87AFC(v10, *(unsigned __int8 *)(a1 + 12));
      v6 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0)
        break;
      v9 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v9;
      v8 = v10[2];
      if (v10[2] < 2u)
      {
        v7 = v10[0];
        if (v10[v10[0] + 3] < v9
          && *((_QWORD *)&v11 + 3 * v10[0] + 2) < (unint64_t)((uint64_t)(*((_QWORD *)&v11 + 3 * v10[0])
                                                                             - *((_QWORD *)&v11 + 3 * v10[0] + 1)) >> 3))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      result = sub_20C3B45F4(a2, (uint64_t)&v11 + 24 * v10[1], v10[v10[1] + 3]);
      v8 = --v10[2];
      v10[1] = (v10[1] + 1) & 7;
LABEL_11:
      if (v8)
      {
        result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
    v7 = v10[0];
LABEL_6:
    result = sub_20C3B46C4((tbb::task *)(a2 + 32), (_QWORD *)&v11 + 3 * v7);
    v8 = --v10[2];
    v10[0] = (v10[0] - 1) & 7;
    goto LABEL_11;
  }
  return sub_20C3B46C4((tbb::task *)(a2 + 32), a3);
}

uint64_t sub_20C3B45F4(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &unk_24C538F98;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

uint64_t sub_20C3B46C4(tbb::task *a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  result = tbb::task::self(a1);
  v5 = (_QWORD *)*a2;
  v4 = (_QWORD *)a2[1];
  if (v4 != v5)
  {
    v6 = result;
    v7 = 0;
    do
    {
      if ((v7 & 0x3F) == 0)
      {
        result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(v6 - 56));
        if ((result & 1) != 0)
          break;
      }
      v8 = &v4[v7];
      if (*v8 < *(v8 - 1))
        return tbb::task_group_context::cancel_group_execution(*(tbb::task_group_context **)(v6 - 56));
      ++v7;
    }
    while (v8 + 1 != v5);
  }
  return result;
}

void sub_20C3B4748(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5;
  __int128 v6;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v8;
  _DWORD v9[32];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 1))
  {
    v9[0] = 1;
    v10 = 65539;
    v11 = 49;
    tbb::task_group_context::init((uint64_t)v9, a2, a3, a4);
    v8 = (tbb::task_group_context *)v9;
    v5 = tbb::internal::allocate_root_with_context_proxy::allocate(&v8, 0x38uLL);
    *(_BYTE *)(v5 - 11) = 1;
    *(_QWORD *)v5 = &unk_24C538FE0;
    v6 = *a1;
    *(_QWORD *)(v5 + 24) = *((_QWORD *)a1 + 2);
    *(_OWORD *)(v5 + 8) = v6;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v5);
    *(_DWORD *)(v5 + 48) = 0;
    *(_BYTE *)(v5 + 52) = 5;
    *(_QWORD *)(v5 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v5 - 40) + 16))(*(_QWORD *)(v5 - 40), v5, v5 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v9);
  }
}

void sub_20C3B4848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B4894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C3B4900(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

uint64_t sub_20C3B4900(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 8) >= 0x1F4uLL)
  {
    if (*(_QWORD *)a1 <= 1uLL)
    {
      if (!*(_QWORD *)a1 || !*(_BYTE *)(a1 + 12))
        return sub_20C3B4A9C(a1, (uint64_t)a2, (__int128 *)a3);
      --*(_BYTE *)(a1 + 12);
      *(_QWORD *)a1 = 0;
    }
    sub_20C3B49D0(a2);
    if (*(_QWORD *)(a3 + 8) >= 0x1F4uLL)
    {
      do
      {
        if (*(_QWORD *)a1 <= 1uLL)
        {
          if (!*(_QWORD *)a1 || !*(_BYTE *)(a1 + 12))
            return sub_20C3B4A9C(a1, (uint64_t)a2, (__int128 *)a3);
          --*(_BYTE *)(a1 + 12);
          *(_QWORD *)a1 = 0;
        }
        sub_20C3B49D0(a2);
      }
      while (*(_QWORD *)(a3 + 8) > 0x1F3uLL);
    }
  }
  return sub_20C3B4A9C(a1, (uint64_t)a2, (__int128 *)a3);
}

uint64_t sub_20C3B49D0(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v1;
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t)a1;
  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(v1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  *(_QWORD *)v3 = &unk_24C538FE0;
  v4 = *(_QWORD *)(v1 + 8);
  v1 += 8;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)(v3 + 16) = sub_20C3B4C68(v3 + 8, v1);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v1 + 16) + 8 * *(_QWORD *)(v1 + 8) + 8;
  v5 = *(_QWORD *)(v1 + 32) >> 1;
  *(_QWORD *)(v1 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v5;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(v1 + 44);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

uint64_t sub_20C3B4A9C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  uint64_t result;
  char v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int8 v18[16];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a3 + 1);
  if (v3 >= 0x1F4 && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v18 = 0x10000;
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 2);
    while (1)
    {
      result = (uint64_t)sub_20C3B4E60(v18, *(unsigned __int8 *)(a1 + 12));
      v7 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0)
        break;
      v9 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v9;
      v10 = v18[2];
      if (v18[2] < 2u)
      {
        v8 = v18[0];
        if (v18[v18[0] + 3] >= v9 || *((_QWORD *)&v19 + 3 * v18[0] + 1) <= 0x1F3uLL)
          goto LABEL_10;
      }
      else
      {
        result = sub_20C3B4F58(a2, (__int128 *)((char *)&v19 + 24 * v18[1]), v18[v18[1] + 3]);
        v10 = --v18[2];
        v18[1] = (v18[1] + 1) & 7;
      }
LABEL_14:
      if (v10)
      {
        result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!(_DWORD)result)
          continue;
      }
      return result;
    }
    v8 = v18[0];
LABEL_10:
    v12 = *((_QWORD *)&v19 + 3 * v8 + 1);
    v11 = (int *)*((_QWORD *)&v19 + 3 * v8 + 2);
    v13 = 126 - 2 * __clz(v12);
    if (v12)
      v14 = v13;
    else
      v14 = 0;
    result = (uint64_t)sub_20C3B2E6C(v11, &v11[2 * v12], (uint64_t)&v17, v14, 1);
    v10 = --v18[2];
    v18[0] = (v18[0] - 1) & 7;
    goto LABEL_14;
  }
  v15 = 126 - 2 * __clz(v3);
  if (v3)
    v16 = v15;
  else
    v16 = 0;
  return (uint64_t)sub_20C3B2E6C(*((int **)a3 + 2), (int *)(*((_QWORD *)a3 + 2) + 8 * v3), (uint64_t)v18, v16, 1);
}

uint64_t sub_20C3B4C68(uint64_t a1, uint64_t a2)
{
  int *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(int **)(a2 + 16);
  v5 = v4 >> 3;
  v6 = 2 * (v4 >> 3);
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)&v3[2 * (v4 >> 3)];
  v9 = *(_QWORD *)&v3[4 * (v4 >> 3)];
  if (v9 >= *(_QWORD *)v3)
    v10 = 0;
  else
    v10 = 2 * (v4 >> 3);
  if (v9 < v8)
    v10 = v4 >> 3;
  if (v7 >= v9)
    v6 = 0;
  if (v8 < v9)
    v6 = v4 >> 3;
  if (v7 >= v8)
    v6 = v10;
  v11 = 3 * v5;
  v12 = 4 * v5;
  v13 = 5 * v5;
  v14 = *(_QWORD *)&v3[6 * v5];
  v15 = *(_QWORD *)&v3[8 * v5];
  v16 = *(_QWORD *)&v3[10 * v5];
  if (v16 >= v14)
    v17 = 3 * v5;
  else
    v17 = 5 * v5;
  if (v16 < v15)
    v17 = 4 * v5;
  if (v14 >= v16)
    v13 = 3 * v5;
  if (v15 >= v16)
    v12 = v13;
  if (v14 >= v15)
    v12 = v17;
  v18 = 7 * v5;
  v19 = *(_QWORD *)&v3[4 * v11];
  v20 = *(_QWORD *)&v3[2 * v18];
  v21 = *(_QWORD *)&v3[2 * v4 - 2];
  if (v19 >= v20)
  {
    if (v21 < v20)
      goto LABEL_31;
    v22 = v21 >= v19;
  }
  else
  {
    if (v20 < v21)
      goto LABEL_31;
    v22 = v19 >= v21;
  }
  if (v22)
    v18 = 2 * v11;
  else
    v18 = v4 - 1;
LABEL_31:
  v23 = *(_QWORD *)&v3[2 * v6];
  v24 = *(_QWORD *)&v3[2 * v12];
  v25 = *(_QWORD *)&v3[2 * v18];
  if (v25 >= v23)
    v26 = v6;
  else
    v26 = v18;
  if (v25 < v24)
    v26 = v12;
  if (v23 < v25)
    v6 = v18;
  if (v24 < v25)
    v6 = v12;
  if (v23 >= v24)
    v6 = v26;
  if (v6)
  {
    v27 = &v3[2 * v6];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(*(int **)(a2 + 16), v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v3 + 1, v27 + 1);
    v4 = *(_QWORD *)(a2 + 8);
  }
  v28 = 0;
LABEL_45:
  v29 = *(_QWORD *)v3;
  v30 = -8 * v4;
  do
  {
    v31 = v4--;
    v30 += 8;
  }
  while (v29 < *(_QWORD *)&v3[2 * v31 - 2]);
  v32 = &v3[v30 / 0xFFFFFFFFFFFFFFFCLL];
  v33 = v28 + 1;
  v34 = -8 * v28;
  while (v31 != v33)
  {
    v35 = *(_QWORD *)&v3[2 * v33++];
    v34 -= 8;
    if (v35 >= v29)
    {
      if (v31 == v33)
        break;
      v36 = &v3[v34 / 0xFFFFFFFFFFFFFFFCLL];
      v28 = v33 - 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v3[v34 / 0xFFFFFFFFFFFFFFFCLL], v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v36 + 1, v32 + 1);
      goto LABEL_45;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v32, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v32 + 1, v3 + 1);
  result = ~v4 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

unsigned __int8 *sub_20C3B4E60(unsigned __int8 *result, unsigned int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (result[2] <= 7u)
  {
    v3 = result;
    v4 = result + 16;
    v5 = *result;
    v6 = result[v5 + 3];
    do
    {
      if (a2 <= v6)
        break;
      v7 = &v4[24 * v5];
      v9 = *((_QWORD *)v7 + 1);
      v8 = v7 + 8;
      if (v9 < 0x1F4)
        break;
      v10 = &v3[v5 + 3];
      *v3 = (v5 + 1) & 7;
      v11 = (uint64_t)&v4[24 * (((_BYTE)v5 + 1) & 7)];
      v12 = (uint64_t)&v4[24 * v5];
      v13 = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_QWORD *)(v11 + 16) = v13;
      *(_QWORD *)v12 = *(_QWORD *)v11;
      result = (unsigned __int8 *)sub_20C3B4C68(v12, v11);
      *v8 = result;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16) + 8 * *(_QWORD *)(v11 + 8) + 8;
      v6 = *v10 + 1;
      *v10 = v6;
      v5 = *v3;
      v3[v5 + 3] = v6;
      v14 = ++v3[2];
    }
    while (v14 < 8);
  }
  return result;
}

uint64_t sub_20C3B4F58(uint64_t a1, __int128 *a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &unk_24C538FE0;
  v8 = *a2;
  *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

uint64_t sub_20C3B5020(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  void **v10;

  v10 = (void **)(a1 + 1024);
  sub_20BFD6F90(&v10);
  sub_20C3B50E0(a1 + 464, v2);
  sub_20C3B0100((_QWORD *)(a1 + 440));
  v3 = *(_QWORD **)(a1 + 416);
  if (v3 == (_QWORD *)(a1 + 392))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 392);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v8)
    sub_20C35C614(v8);
  return a1;
}

uint64_t sub_20C3B50E0(uint64_t a1, void *a2)
{
  sub_20BF776C4(a1, a2);
  sub_20C3AFFF0(a1 + 16);
  return a1;
}

int *sub_20C3B5110(uint64_t a1)
{
  int *v2;
  uint64_t v4;
  uint64_t (**v5[2])(_QWORD);

  v4 = a1;
  v5[0] = (uint64_t (**)(_QWORD))off_24C5390F0;
  v5[1] = (uint64_t (**)(_QWORD))&v4;
  tbb::interface7::internal::isolate_within_arena(v5, 0);
  v2 = sub_20C29D4D8(*(int **)(a1 + 1024), *(int **)(a1 + 1032));
  return sub_20C11D784(a1 + 1024, v2, *(int **)(a1 + 1032));
}

uint64_t sub_20C3B5178(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  __int16 v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 48);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v13 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v16;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  *(_QWORD *)(a1 + 416) = 0;
  v17 = operator new(0x20uLL);
  *v17 = &off_24C539028;
  v17[1] = a1 + 56;
  v17[2] = a1;
  *(_QWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = a4;
  *(_QWORD *)(a1 + 440) = &unk_24C538D20;
  v19 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v18);
  *(_QWORD *)(a1 + 448) = v19;
  bzero(v19, 0x2C0uLL);
  *(_OWORD *)(*(_QWORD *)(a1 + 448) + 256) = xmmword_20CAE3D80;
  *(_QWORD *)(a1 + 440) = &unk_24C538CB0;
  sub_20C3AFE9C(a1 + 464, 8uLL, &v21);
  *(_QWORD *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1048) = a5;
  return a1;
}

void sub_20C3B52E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  sub_20C3B0100(v3);
  v5 = *(_QWORD **)(v1 + 416);
  if (v5 == (_QWORD *)(v1 + 392))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 + 392);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v2);
  sub_20C35C2E0(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3B5358(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C539028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C3B5398(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C539028;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3B53C0(uint64_t a1, uint64_t a2)
{
  return sub_20C3B5410((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C3B53C8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5390D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3B5404()
{
  return &unk_24C5390D0;
}

uint64_t sub_20C3B5410(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[2];

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 256);
  v8[0] = 0;
  v8[1] = v5;
  v6 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((_BYTE *)v6 - 11) = 1;
  *v6 = &off_24C539098;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v4 + 264;
  return (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v6 - 5))(*(v6 - 5), v6, (uint64_t)(v6 - 1));
}

uint64_t sub_20C3B5494(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *Instance;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load(*(unint64_t **)(a1 + 16));
  sub_20C3B55B0(*(uint64_t **)(v2 + 8));
  v4 = *(unint64_t **)(a1 + 16);
  while (1)
  {
    v5 = __ldaxr(v4);
    if (v5 != v3)
      break;
    if (!__stlxr(0, v4))
      goto LABEL_12;
  }
  __clrex();
  do
  {
    sub_20C3B55B0(*(uint64_t **)(v2 + 8));
    v6 = *(unint64_t **)(a1 + 16);
    while (1)
    {
      v7 = __ldaxr(v6);
      if (v7 != v5)
        break;
      if (!__stlxr(0, v6))
      {
        v8 = 1;
        goto LABEL_11;
      }
    }
    v8 = 0;
    __clrex();
LABEL_11:
    v5 = v7;
  }
  while (!v8);
LABEL_12:
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v10 = v13;
  v11 = atomic_load(Instance + 18);
  if (v10 < v11
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v13, *(_QWORD *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  return 0;
}

void sub_20C3B5598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B55B0(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  int v5;
  int v6;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  while (sub_20C3AFBA0((uint64_t)(a1 + 55), &v5))
  {
    v2 = a1[129];
    if (v2 >= a1[130])
    {
      v3 = sub_20BFD7890(a1 + 128, &v5);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a1[129], &v5);
      sub_20BFD6EA4((_DWORD *)(v2 + 4), &v6);
      v3 = v2 + 8;
    }
    a1[129] = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_20BFD265C(&v5);
}

void sub_20C3B5674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C3B568C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;

  v1 = **(_QWORD **)(a1 + 8);
  sub_20C3B56DC((_QWORD *)v1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v1);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 56));
  sub_20C3B0464(*(int **)(v1 + 1024), *(int **)(v1 + 1032), (uint64_t)&v3, v2);
}

_DWORD *sub_20C3B56DC(_QWORD *a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29[3];

  sub_20C3B5878((uint64_t)a1, a2);
  v5 = a1[4];
  v4 = a1[5];
  v6 = a1[6];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v29[0] = v5;
  v29[1] = v4;
  v29[2] = v6;
  sub_20C39E344((uint64_t)a2, v29, (uint64_t)&v19);
  v14 = v19;
  sub_20BFD6E54(&v15, &v20);
  sub_20BFD6EA4(&v16, &v21);
  v17 = v22;
  v18 = v23;
  v9 = v24;
  sub_20BFD6E54(&v10, &v25);
  sub_20BFD6EA4(&v11, &v26);
  v12 = v27;
  v13 = v28;
  v29[0] = (uint64_t)a1;
  sub_20C3B5A44(&v14, (uint64_t)&v9, (uint64_t)v29, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_20BFD265C(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  return sub_20BFD265C(&v20);
}

void sub_20C3B5850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_20C39E310((uint64_t)va);
  sub_20C39E310((uint64_t)va1);
  sub_20C3B0808((int *)va2);
  _Unwind_Resume(a1);
}

void sub_20C3B5878(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_20C3B08B0(a1 + 464, (uint64_t)a2, 0, (uint64_t)&v16);
  if ((_BYTE)v18)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::_GetRelationships(a2, 1, 0, &v22);
    v4 = v22;
    for (i = v23; v4 != i; v4 += 32)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 24);
      if (!v6 || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v4))
      {
        v16 = (void **)a1;
        v17 = *(_DWORD *)v4;
        v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v4 + 8);
        v18 = v7;
        if (v7)
        {
          v8 = (unint64_t *)((char *)v7 + 48);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        sub_20BFD6E54(&v19, (_DWORD *)(v4 + 16));
        sub_20BFD6EA4(&v20, (_DWORD *)(v4 + 20));
        v10 = *(_QWORD *)(v4 + 24);
        v21 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            v21 &= 0xFFFFFFFFFFFFFFF8;
        }
        v13 = sub_20C3B5C28(a1 + 56, (uint64_t *)&v16);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v13 - 40))(*(_QWORD *)(v13 - 40), v13, v13 - 8);
        if ((v21 & 7) != 0)
        {
          v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
        if (v18)
          sub_20C35C614(v18);
      }
    }
    v16 = (void **)&v22;
    sub_20C3AF230(&v16);
  }
}

void sub_20C3B5A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  sub_20C3AF230(&a9);
  _Unwind_Resume(a1);
}

void sub_20C3B5A44(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  _DWORD v17[32];
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17[0] = 0;
  v18 = 65539;
  v19 = 55;
  tbb::task_group_context::init((uint64_t)v17, a2, a3, a4);
  v12 = *a1;
  sub_20BFD6E54(&v13, (_DWORD *)a1 + 2);
  sub_20BFD6EA4(&v14, (_DWORD *)a1 + 3);
  v15 = *((_OWORD *)a1 + 1);
  v16 = a1[4];
  v7 = *(_QWORD *)a2;
  sub_20BFD6E54(&v8, (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(&v9, (_DWORD *)(a2 + 12));
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 32);
  sub_20C3B67E0((uint64_t)&v12, &v7, a3, (tbb::task_group_context *)v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
}

void sub_20C3B5B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3B5BC8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

unint64_t sub_20C3B5C28(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  sub_20C3B5C9C(v5, a2, a1 + 264);
  return v5;
}

void sub_20C3B5C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::task *v9;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B5C9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_BYTE *)(a1 - 11) = 1;
  v6 = *a2;
  *(_QWORD *)a1 = off_24C539130;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 48);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 32), (_DWORD *)a2 + 6);
  sub_20BFD6EA4((_DWORD *)(a1 + 36), (_DWORD *)a2 + 7);
  v10 = a2[4];
  *(_QWORD *)(a1 + 40) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_20C3B5D5C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C539130;
  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 24);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C3B5DC8(void *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C539130;
  v2 = *((_QWORD *)a1 + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
  sub_20BFD265C((_DWORD *)a1 + 8);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 3);
  if (v5)
    sub_20C35C614(v5);
  operator delete(a1);
}

uint64_t sub_20C3B5E34(uint64_t *a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C3B5ED8(a1[1], (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 2));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, a1[6]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C3B5EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C3B5ED8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5[3];
  void **v6;

  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargets(a2, (uint64_t *)v5, 1u);
  sub_20C3B5F58(a1, v5, v3, v4);
  v6 = (void **)v5;
  sub_20BFD6F90(&v6);
}

void sub_20C3B5F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C3B5F58(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  int8x16_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  _DWORD v19[32];
  uint64_t v20;
  int v21;
  uint64_t v22;

  v4 = (int8x16_t *)a2;
  v22 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = *(_QWORD *)(a1 + 448);
      v9 = (unint64_t *)(v8 + 128);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      sub_20C3B13D8((_QWORD *)(v8 + 40 * ((3 * (_BYTE)v10) & 7) + 384), v6, v10, (uint64_t *)(a1 + 440), (uint64_t (*)(_QWORD *, uint64_t))sub_20C3B13B0);
      v6 += 8;
    }
    while (v6 != v7);
    a2 = (unint64_t *)(a1 + 424);
    do
      v11 = __ldaxr(a2);
    while (__stlxr(v11 + 1, a2));
    if (!v11)
    {
      v12 = *(_QWORD *)(a1 + 416);
      if (!v12)
        sub_20BE9E974();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    }
  }
  if (*(_BYTE *)(a1 + 1048))
  {
    v14 = a1;
    v19[0] = 0;
    v20 = 65539;
    v21 = 55;
    v13 = *v4;
    tbb::task_group_context::init((uint64_t)v19, (uint64_t)a2, a3, a4);
    v17 = &v14;
    v15 = vextq_s8(v13, v13, 8uLL);
    v16 = 1;
    sub_20C3B60DC(&v15, &v17, (uint64_t)&v18, (tbb::task_group_context *)v19);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v19);
  }
}

void sub_20C3B60C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3B60DC(_QWORD *result, _QWORD *a2, uint64_t a3, tbb::task_group_context *a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t initial_auto_partitioner_divisor;
  tbb::task_group_context *v9;

  if (result[1] < *result)
  {
    v5 = result;
    v9 = a4;
    v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(_BYTE *)(v6 - 11) = 1;
    *(_QWORD *)v6 = &off_24C539178;
    v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_QWORD *)(v6 + 32) = *a2;
    initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 52) = 5;
    *(_QWORD *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v6 - 40)
                                                                                           + 16))(*(_QWORD *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_20C3B618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::task *v10;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B61B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 40;
  if (!v3)
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      v4 = *(_QWORD *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v4 + 8) = 1;
        v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1)
          LOBYTE(v5) = 1;
        *(_BYTE *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_20C3B621C(v2, a1, a1 + 8);
  return 0;
}

void sub_20C3B621C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16) < (unint64_t)((uint64_t)(*(_QWORD *)a3 - *(_QWORD *)(a3 + 8)) >> 3))
  {
    if (*(_QWORD *)a1 > 1uLL)
      goto LABEL_6;
    if (*(_QWORD *)a1)
    {
LABEL_4:
      if (*(_BYTE *)(a1 + 12))
      {
        --*(_BYTE *)(a1 + 12);
        *(_QWORD *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_20C3B62CC(a2);
          if (*(_QWORD *)(a3 + 16) >= (unint64_t)((uint64_t)(*(_QWORD *)a3 - *(_QWORD *)(a3 + 8)) >> 3))
            break;
          if (*(_QWORD *)a1 <= 1uLL)
          {
            if (*(_QWORD *)a1)
              goto LABEL_4;
            break;
          }
        }
      }
    }
  }
  sub_20C3B63A4(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfPath **)a3);
}

uint64_t sub_20C3B62CC(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(_QWORD *)v2 = &unk_24C520F68;
  __dmb(0xBu);
  v2[8] = 0;
  *(_QWORD *)(a1 - 32) = v2;
  *((_QWORD *)v2 - 3) = 2;
  v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  *(_BYTE *)(v3 - 11) = 1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = &off_24C539178;
  *(_QWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 16)
     + 8
     * ((((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >> 3 < 0)) >> 1);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(v3 + 40) = v6;
  *(_DWORD *)(v3 + 48) = 2;
  *(_BYTE *)(v3 + 52) = *(_BYTE *)(a1 + 52);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v3 - 40))(*(_QWORD *)(v3 - 40), v3, v3 - 8);
}

void sub_20C3B63A4(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfPath **v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14[16];
  __int128 v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3[1];
  v5 = *a3;
  if ((unint64_t)a3[2] < (*a3 - v4) >> 3 && *(_BYTE *)(a1 + 12))
  {
    *(_DWORD *)v14 = 0x10000;
    v15 = *(_OWORD *)a3;
    v16 = a3[2];
    while (1)
    {
      sub_20BF87AFC(v14, *(unsigned __int8 *)(a1 + 12));
      v7 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0)
        break;
      v13 = *(_BYTE *)(a1 + 12) + 1;
      *(_BYTE *)(a1 + 12) = v13;
      v12 = v14[2];
      if (v14[2] < 2u)
      {
        v8 = v14[0];
        if (v14[v14[0] + 3] >= v13
          || *((_QWORD *)&v15 + 3 * v14[0] + 2) >= (unint64_t)((uint64_t)(*((_QWORD *)&v15 + 3 * v14[0])
                                                                              - *((_QWORD *)&v15 + 3 * v14[0] + 1)) >> 3))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_20C3B656C(a2, (uint64_t)&v15 + 24 * v14[1], v14[v14[1] + 3]);
        v12 = --v14[2];
        v14[1] = (v14[1] + 1) & 7;
      }
LABEL_14:
      if (!v12 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56)))
        return;
    }
    v8 = v14[0];
LABEL_6:
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&v15 + 3 * v8;
    v11 = *v9;
    v10 = v9[1];
    if (v10 != *v9)
    {
      do
      {
        sub_20C3B6638(*(uint64_t **)(a2 + 32), v10);
        v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      }
      while (v10 != v11);
      LOBYTE(v8) = v14[0];
    }
    v12 = --v14[2];
    v14[0] = (v8 - 1) & 7;
    goto LABEL_14;
  }
  while (v4 != v5)
  {
    sub_20C3B6638(*(uint64_t **)(a2 + 32), v4);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
  }
}

uint64_t sub_20C3B656C(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(_QWORD *)v6 = &unk_24C520F68;
  __dmb(0xBu);
  v6[8] = 0;
  *(_QWORD *)(a1 - 32) = v6;
  *((_QWORD *)v6 - 3) = 2;
  v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(_BYTE *)(v7 - 11) = 1;
  *(_QWORD *)v7 = &off_24C539178;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40) >> 1;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(_BYTE *)(v7 + 52) = *(_BYTE *)(a1 + 52) - a3;
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v7 - 40))(*(_QWORD *)(v7 - 40), v7, v7 - 8);
}

void sub_20C3B6638(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  BOOL HasPrefix;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int v21;
  int v22;
  uint64_t v23;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*a1;
  sub_20C348EEC(*a1, &v18);
  HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (!HasPrefix)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, v5, &v16);
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v14);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (uint64_t)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    v8 = v17;
    if (v17)
    {
      v9 = (unsigned int *)(v17 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v18, v7))sub_20C3B56DC(v3, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
    if ((v23 & 7) != 0)
    {
      v12 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    if (v20)
      sub_20C35C614(v20);
  }
}

void sub_20C3B6770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  sub_20BFD1A18(&a10);
  v13 = a12;
  if (a12)
  {
    v14 = (unsigned int *)(a12 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B67E0(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  v14 = *(_QWORD *)a1;
  sub_20BFD6E54(&v15, (_DWORD *)(a1 + 8));
  sub_20BFD6EA4(&v16, (_DWORD *)(a1 + 12));
  v17 = *(_OWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 32);
  v9 = *a2;
  sub_20BFD6E54(&v10, (_DWORD *)a2 + 2);
  sub_20BFD6EA4(&v11, (_DWORD *)a2 + 3);
  v12 = *((_OWORD *)a2 + 1);
  v13 = a2[4];
  sub_20C3B68F8(&v14, (uint64_t)&v9, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C3B68DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C39E310((uint64_t)&a9);
  sub_20C39E310((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B68F8(uint64_t *a1, uint64_t a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a3;
  v13 = *a1;
  sub_20BFD6E54(&v14, (_DWORD *)a1 + 2);
  sub_20BFD6EA4(&v15, (_DWORD *)a1 + 3);
  v16 = *((_OWORD *)a1 + 1);
  v17 = a1[4];
  v8 = *(_QWORD *)a2;
  sub_20BFD6E54(&v9, (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(&v10, (_DWORD *)(a2 + 12));
  v11 = *(_OWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 32);
  sub_20C3B6A08((uint64_t)&v13, &v8, (uint64_t)&v18, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_20BFD265C(&v14);
}

void sub_20C3B69EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C39E310((uint64_t)va);
  sub_20C39E310((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B6A08(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1])
  {
    result = sub_20C39FA44(a1 + 16, (uint64_t)(a2 + 2));
    if ((result & 1) != 0)
      return result;
    v8 = *(_QWORD *)a1;
  }
  v15 = v8;
  sub_20BFD6E54(&v16, (_DWORD *)(a1 + 8));
  sub_20BFD6EA4(&v17, (_DWORD *)(a1 + 12));
  v18 = *(_OWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 32);
  v10 = *a2;
  sub_20BFD6E54(&v11, (_DWORD *)a2 + 2);
  sub_20BFD6EA4(&v12, (_DWORD *)a2 + 3);
  v13 = *((_OWORD *)a2 + 1);
  v14 = a2[4];
  sub_20C3B6B5C(&v15, (uint64_t)&v10, a3, (uint64_t)sub_20C3B6C74, 0, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  return (uint64_t)sub_20BFD265C(&v16);
}

void sub_20C3B6B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C39E310((uint64_t)&a9);
  sub_20C39E310((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3B6B5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, tbb::task_group_context *a6)
{
  uint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;

  v16 = *a1;
  sub_20BFD6E54(&v17, (_DWORD *)a1 + 2);
  sub_20BFD6EA4(&v18, (_DWORD *)a1 + 3);
  v19 = *((_OWORD *)a1 + 1);
  v20 = a1[4];
  v11 = *(_QWORD *)a2;
  sub_20BFD6E54(&v12, (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(&v13, (_DWORD *)(a2 + 12));
  v14 = *(_OWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 32);
  sub_20C3B6C80((uint64_t)&v16, &v11, a3, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_20BFD265C(&v17);
}

void sub_20C3B6C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C39E310((uint64_t)&a9);
  sub_20C39E310((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20C3B6C74(uint64_t **a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_20C3B5878(**a1, a2);
}

tbb::internal::generic_scheduler *sub_20C3B6C80(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  tbb::interface5::internal::task_base *v7;
  unint64_t v8;
  tbb::interface5::internal::task_base *v9;
  tbb::task *v10;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[2];
  tbb::interface5::internal::task_base *v23;
  tbb::task_group_context *v24;

  v22[0] = off_24C5391C0;
  v24 = a4;
  v7 = (tbb::interface5::internal::task_base *)tbb::internal::allocate_root_with_context_proxy::allocate(&v24, 8uLL);
  *((_BYTE *)v7 - 11) = 1;
  *(_QWORD *)v7 = &unk_24C5164A8;
  v22[1] = a3;
  v23 = v7;
  v8 = tbb::internal::allocate_child_proxy::allocate(v7, 0x60uLL);
  v17 = *(_QWORD *)a1;
  sub_20BFD6E54(&v18, (_DWORD *)(a1 + 8));
  sub_20BFD6EA4(&v19, (_DWORD *)(a1 + 12));
  v20 = *(_OWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 32);
  v12 = *a2;
  sub_20BFD6E54(&v13, (_DWORD *)a2 + 2);
  sub_20BFD6EA4(&v14, (_DWORD *)a2 + 3);
  v15 = *((_OWORD *)a2 + 1);
  v16 = a2[4];
  sub_20C3B7240(v8, &v17, (uint64_t)&v12, (uint64_t)v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  v9 = v23;
  *((_QWORD *)v23 - 3) = 2;
  (*(void (**)(_QWORD, tbb::interface5::internal::task_base *, unint64_t))(**((_QWORD **)v9 - 5) + 8))(*((_QWORD *)v9 - 5), v9, v8);
  v22[0] = off_24C5391C0;
  return tbb::interface5::internal::task_base::destroy(v23, v10);
}

void sub_20C3B6DEC(_Unwind_Exception *a1, tbb::task *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,tbb::interface5::internal::task_base *a21)
{
  tbb::interface5::internal::task_base::destroy(a21, a2);
  _Unwind_Resume(a1);
}

void sub_20C3B6E0C(uint64_t a1, tbb::task *a2)
{
  void *v2;

  v2 = (void *)sub_20C3B7858(a1, a2);
  operator delete(v2);
}

uint64_t sub_20C3B6E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *(_QWORD *)(a1 + 16);
  v8[0] = 0;
  v8[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x30uLL);
  v6 = sub_20C3B71C0(v5, a2, a1);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v6 - 40))(*(_QWORD *)(v6 - 40), v5, v5 - 8);
}

uint64_t sub_20C3B6E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  sub_20C3B6F18(v5, a2, a1);
  return (***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v5 - 40))(*(_QWORD *)(v5 - 40), v5, v5 - 8);
}

void sub_20C3B6EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::task *v9;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B6F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = off_24C539208;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_20C3B6FD4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C539208;
  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C3B7040(void *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  *(_QWORD *)a1 = off_24C539208;
  v2 = *((_QWORD *)a1 + 4);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_20BFD265C((_DWORD *)a1 + 6);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a1 + 2);
  if (v5)
    sub_20C35C614(v5);
  operator delete(a1);
}

uint64_t sub_20C3B70AC(uint64_t a1)
{
  sub_20C3B70E0(*(uint64_t ***)(*(_QWORD *)(a1 + 40) + 8), (int *)(a1 + 8));
  return 0;
}

void sub_20C3B70E0(uint64_t **a1, int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  uint64_t v10;

  v6 = *a2;
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v8 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  v9 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  sub_20C3B5878(**a1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_20BFD265C(&v8);
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C3B71A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B71C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = off_24C539208;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_20C3B7240(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)(a1 - 11) = 1;
  v8 = *a2;
  *(_QWORD *)a1 = off_24C539250;
  *(_QWORD *)(a1 + 8) = v8;
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)a2 + 2);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)a2 + 3);
  v9 = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 40) = a2[4];
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
  sub_20BFD6E54((_DWORD *)(a1 + 56), (_DWORD *)(a3 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 60), (_DWORD *)(a3 + 12));
  v10 = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_20C3B72DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C539250;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_20BFD265C((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C3B732C(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C539250;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_20BFD265C(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

unint64_t sub_20C3B7380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v2 = a1 + 8;
  v15 = *(_QWORD *)(a1 + 8);
  sub_20BFD6E54(&v16, (_DWORD *)(a1 + 16));
  sub_20BFD6EA4(&v17, (_DWORD *)(v2 + 12));
  v3 = 0;
  v18 = *(_OWORD *)(v2 + 16);
  v19 = *(_QWORD *)(v2 + 32);
  while (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 48)
       || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 56)
       || (sub_20C39FA44(v2 + 16, v2 + 56) & 1) == 0)
  {
    sub_20C3A016C(v2);
    if (++v3 == 4)
    {
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 48)
        || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 56)
        || (sub_20C39FA44(v2 + 16, v2 + 56) & 1) == 0)
      {
        *(_BYTE *)(a1 - 12) = 1;
      }
      v3 = 4;
      goto LABEL_11;
    }
  }
  if (v3)
  {
LABEL_11:
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16);
    v14[0] = 0;
    v14[1] = v4;
    v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v14, 0x40uLL);
    v9 = v15;
    sub_20BFD6E54(&v10, &v16);
    sub_20BFD6EA4(&v11, &v17);
    v13 = v19;
    v12 = v18;
    v6 = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(v5 - 11) = 1;
    *(_QWORD *)v5 = off_24C539298;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = v9;
    sub_20BFD6E54((_DWORD *)(v5 + 24), &v10);
    sub_20BFD6EA4((_DWORD *)(v5 + 28), &v11);
    v7 = v13;
    *(_OWORD *)(v5 + 32) = v12;
    *(_QWORD *)(v5 + 48) = v7;
    *(_QWORD *)(v5 + 56) = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    goto LABEL_12;
  }
  v5 = 0;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  return v5;
}

void sub_20C3B7564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C39E310((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B757C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C539298;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  return a1;
}

void sub_20C3B75B8(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C539298;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_20BFD265C(a1 + 6);
  operator delete(a1);
}

uint64_t sub_20C3B75F4(tbb::internal::allocate_child_proxy *this)
{
  char *v2;
  _DWORD *v3;
  _DWORD *v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t *v14;

  v2 = (char *)this + 16;
  v13 = 0;
  v3 = (_DWORD *)((char *)this + 24);
  v4 = (_DWORD *)((char *)this + 28);
  v5 = (char *)this + 32;
  v6 = (unint64_t *)&v13;
  v7 = 0x200000000;
  for (i = 1; ; ++i)
  {
    v14 = v6;
    v9 = tbb::internal::allocate_child_proxy::allocate(this, 0x38uLL);
    v10 = *((_QWORD *)this + 1);
    *(_BYTE *)(v9 - 11) = 1;
    *(_QWORD *)v9 = off_24C5392E0;
    *(_QWORD *)(v9 + 8) = *((_QWORD *)this + 2);
    sub_20BFD6E54((_DWORD *)(v9 + 16), v3);
    sub_20BFD6EA4((_DWORD *)(v9 + 20), v4);
    v11 = *((_QWORD *)v5 + 2);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)v5;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 48) = v10;
    sub_20C3A016C((uint64_t)v2);
    if (i == *((_QWORD *)this + 7))
      break;
    *(_QWORD *)(v9 - 8) = 0;
    v6 = (unint64_t *)(v9 - 8);
    *v14 = v9;
    v7 += 0x100000000;
  }
  *((_QWORD *)this - 3) = v7 >> 32;
  if (v13)
  {
    (***(void (****)(_QWORD, uint64_t, unint64_t *))(v13 - 40))(*(_QWORD *)(v13 - 40), v13, v14);
    v13 = 0;
    v14 = (unint64_t *)&v13;
  }
  (*(void (**)(_QWORD, tbb::internal::allocate_child_proxy *, unint64_t))(**((_QWORD **)this - 5) + 8))(*((_QWORD *)this - 5), this, v9);
  return 0;
}

uint64_t sub_20C3B7730(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5392E0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C3B776C(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C5392E0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_20BFD265C(a1 + 4);
  operator delete(a1);
}

uint64_t sub_20C3B77A8(uint64_t a1)
{
  uint64_t **v1;
  unsigned int *v2;
  unsigned int v3;
  int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int v7;
  int v8;
  uint64_t v9;

  v1 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 8);
  sub_20C3A048C(a1 + 8, (uint64_t)&v5);
  sub_20C3B70E0(v1, &v5);
  if ((v9 & 7) != 0)
  {
    v2 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  if (v6)
    sub_20C35C614(v6);
  return 0;
}

void sub_20C3B7844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B7858(uint64_t a1, tbb::task *a2)
{
  *(_QWORD *)a1 = off_24C5391C0;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

uint64_t sub_20C3B7890(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  void **v10;

  v10 = (void **)(a1 + 1024);
  sub_20BFD6F90(&v10);
  sub_20C3B50E0(a1 + 464, v2);
  sub_20C3B0100((_QWORD *)(a1 + 440));
  v3 = *(_QWORD **)(a1 + 416);
  if (v3 == (_QWORD *)(a1 + 392))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 392);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v8)
    sub_20C35C614(v8);
  return a1;
}

void sub_20C3B7950(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C539328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C3B7964(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C539328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C3B7988(uint64_t a1)
{
  char v2;

  return sub_20C3B79B0((uint64_t)&v2, a1 + 24);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C3B79B0(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20BF1C150((void ***)(a2 + 32), 0);
  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
  return sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2);
}

uint64_t sub_20C3B79EC(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  char v17;
  BOOL v18;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_20C3B7D40(a3, (uint64_t)(a2 - 4), (uint64_t)v9);
        if ((_DWORD)result)
          return (uint64_t)sub_20C2503D8(v9, a2 - 4);
        return result;
      case 3uLL:
        return sub_20C3B7FD8(v9, v9 + 4, a2 - 4, a3);
      case 4uLL:
        return (uint64_t)sub_20C3B85D4(v9, v9 + 4, v9 + 8, a2 - 4, a3);
      case 5uLL:
        return (uint64_t)sub_20C3B8688(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4, a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return sub_20C3B7DA0((uint64_t)v9, a2, a3);
          else
            return sub_20C3B7ED0((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_20C3B7FD8(&v9[4 * (v13 >> 1)], v9, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C3B7FD8(v9, &v9[4 * (v13 >> 1)], a2 - 4, a3);
            sub_20C3B7FD8(v9 + 4, v15 - 4, a2 - 8, a3);
            sub_20C3B7FD8(v9 + 8, &v9[4 * v14 + 4], a2 - 12, a3);
            sub_20C3B7FD8(v15 - 4, v15, &v9[4 * v14 + 4], a3);
            sub_20C2503D8(v9, v15);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((sub_20C3B7D40(a3, (uint64_t)(v9 - 4), (uint64_t)v9) & 1) == 0)
          {
            result = (uint64_t)sub_20C3B80B0(v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v16 = sub_20C3B8230(v9, (unint64_t)a2, a3);
          if ((v17 & 1) == 0)
            goto LABEL_15;
          v18 = sub_20C3B83C0(v9, v16, a3);
          v9 = v16 + 4;
          result = sub_20C3B83C0(v16 + 4, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_15:
            result = sub_20C3B79EC(v8, v16, a3, -v11, a5 & 1);
            v9 = v16 + 4;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_20C3B8760(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_20C3B7D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3) & 1) != 0)return 1;
  if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0)return 0;
  return sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 8));
}

uint64_t sub_20C3B7DA0(uint64_t result, _DWORD *a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if ((_DWORD *)result != a2)
  {
    v4 = (int *)result;
    v5 = result + 16;
    if ((_DWORD *)(result + 16) != a2)
    {
      v7 = 0;
      v8 = (_DWORD *)result;
      do
      {
        v9 = (uint64_t)v8;
        v8 = (_DWORD *)v5;
        result = sub_20C3B7D40(a3, v5, v9);
        if ((_DWORD)result)
        {
          sub_20C0308C4(&v13, v8);
          v10 = v7;
          while (1)
          {
            sub_20C24E938((int *)((char *)v4 + v10 + 16), (int *)((char *)v4 + v10));
            if (!v10)
              break;
            v11 = sub_20C3B7D40(a3, (uint64_t)&v13, (uint64_t)v4 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              v12 = (int *)((char *)v4 + v10 + 16);
              goto LABEL_10;
            }
          }
          v12 = v4;
LABEL_10:
          sub_20C24E938(v12, &v13);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
          sub_20BFD265C(&v15);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
          result = (uint64_t)sub_20BFD265C(&v13);
        }
        v5 = (uint64_t)(v8 + 4);
        v7 += 16;
      }
      while (v8 + 4 != a2);
    }
  }
  return result;
}

void sub_20C3B7EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B7ED0(uint64_t result, int *a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if ((int *)result != a2)
  {
    v4 = (int *)result;
    v5 = result + 16;
    if ((int *)(result + 16) != a2)
    {
      do
      {
        v7 = (int *)v5;
        result = sub_20C3B7D40(a3, v5, (uint64_t)v4);
        if ((_DWORD)result)
        {
          sub_20C0308C4(&v8, v7);
          do
          {
            sub_20C24E938(v4 + 4, v4);
            v4 -= 4;
          }
          while ((sub_20C3B7D40(a3, (uint64_t)&v8, (uint64_t)v4) & 1) != 0);
          sub_20C24E938(v4 + 4, &v8);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
          sub_20BFD265C(&v10);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
          result = (uint64_t)sub_20BFD265C(&v8);
        }
        v5 = (uint64_t)(v7 + 4);
        v4 = v7;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

void sub_20C3B7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B7FD8(int *a1, int *a2, int *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  int *v10;
  int *v11;

  v8 = sub_20C3B7D40(a4, (uint64_t)a2, (uint64_t)a1);
  result = sub_20C3B7D40(a4, (uint64_t)a3, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    sub_20C2503D8(a2, a3);
    if (!sub_20C3B7D40(a4, (uint64_t)a2, (uint64_t)a1))
      return 1;
    v10 = a1;
    v11 = a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    sub_20C2503D8(a1, a2);
    if (!sub_20C3B7D40(a4, (uint64_t)a3, (uint64_t)a2))
      return 1;
    v10 = a2;
    v11 = a3;
LABEL_9:
    sub_20C2503D8(v10, v11);
    return 2;
  }
  sub_20C2503D8(a1, a3);
  return 1;
}

int *sub_20C3B80B0(int *a1, int *a2, uint64_t a3)
{
  int *v6;
  unint64_t v7;
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;

  sub_20C0308C4(&v10, a1);
  if ((sub_20C3B7D40(a3, (uint64_t)&v10, (uint64_t)(a2 - 4)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 4;
    while ((sub_20C3B7D40(a3, (uint64_t)&v10, (uint64_t)v6) & 1) == 0);
  }
  else
  {
    v7 = (unint64_t)(a1 + 4);
    do
    {
      v6 = (int *)v7;
      if (v7 >= (unint64_t)a2)
        break;
      v8 = sub_20C3B7D40(a3, (uint64_t)&v10, v7);
      v7 = (unint64_t)(v6 + 4);
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 4;
    while ((sub_20C3B7D40(a3, (uint64_t)&v10, (uint64_t)a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    sub_20C2503D8(v6, a2);
    do
      v6 += 4;
    while (!sub_20C3B7D40(a3, (uint64_t)&v10, (uint64_t)v6));
    do
      a2 -= 4;
    while ((sub_20C3B7D40(a3, (uint64_t)&v10, (uint64_t)a2) & 1) != 0);
  }
  if (v6 - 4 != a1)
    sub_20C24E938(a1, v6 - 4);
  sub_20C24E938(v6 - 4, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  return v6;
}

void sub_20C3B8208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

int *sub_20C3B8230(int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int v13;
  int v14;
  int v15;
  int v16;

  sub_20C0308C4(&v13, a1);
  v6 = 0;
  do
  {
    v7 = sub_20C3B7D40(a3, (uint64_t)&a1[v6 + 4], (uint64_t)&v13);
    v6 += 4;
  }
  while ((v7 & 1) != 0);
  v8 = &a1[v6];
  if (v6 == 4)
  {
    do
    {
      if ((unint64_t)v8 >= a2)
        break;
      a2 -= 16;
    }
    while ((sub_20C3B7D40(a3, a2, (uint64_t)&v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!sub_20C3B7D40(a3, a2, (uint64_t)&v13));
  }
  if ((unint64_t)v8 >= a2)
  {
    v11 = v8 - 4;
  }
  else
  {
    v9 = &a1[v6];
    v10 = (int *)a2;
    do
    {
      sub_20C2503D8(v9, v10);
      do
        v9 += 4;
      while ((sub_20C3B7D40(a3, (uint64_t)v9, (uint64_t)&v13) & 1) != 0);
      do
        v10 -= 4;
      while (!sub_20C3B7D40(a3, (uint64_t)v10, (uint64_t)&v13));
    }
    while (v9 < v10);
    v11 = v9 - 4;
  }
  if (v11 != a1)
    sub_20C24E938(a1, v11);
  sub_20C24E938(v11, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  return v11;
}

void sub_20C3B839C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C3B83C0(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 4;
      if (sub_20C3B7D40(a3, (uint64_t)(a2 - 4), (uint64_t)a1))
        sub_20C2503D8(a1, v8);
      return 1;
    case 3:
      sub_20C3B7FD8(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_20C3B85D4(a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      sub_20C3B8688(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      v9 = (uint64_t)(a1 + 8);
      sub_20C3B7FD8(a1, a1 + 4, a1 + 8, a3);
      v10 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_20C3B7D40(a3, (uint64_t)v10, v9))
    {
      sub_20C0308C4(&v16, v10);
      v13 = v11;
      while (1)
      {
        sub_20C24E938((int *)((char *)a1 + v13 + 48), (int *)((char *)a1 + v13 + 32));
        if (v13 == -32)
          break;
        v14 = sub_20C3B7D40(a3, (uint64_t)&v16, (uint64_t)a1 + v13 + 16);
        v13 -= 16;
        if ((v14 & 1) == 0)
        {
          v15 = (int *)((char *)a1 + v13 + 48);
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      sub_20C24E938(v15, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_20BFD265C(&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      ++v12;
      sub_20BFD265C(&v16);
      if (v12 == 8)
        return v10 + 4 == a2;
    }
    v9 = (uint64_t)v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2)
      return 1;
  }
}

void sub_20C3B85C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C024A08((int *)va);
  _Unwind_Resume(a1);
}

int *sub_20C3B85D4(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *result;

  sub_20C3B7FD8(a1, a2, a3, a5);
  result = (int *)sub_20C3B7D40(a5, (uint64_t)a4, (uint64_t)a3);
  if ((_DWORD)result)
  {
    sub_20C2503D8(a3, a4);
    result = (int *)sub_20C3B7D40(a5, (uint64_t)a3, (uint64_t)a2);
    if ((_DWORD)result)
    {
      sub_20C2503D8(a2, a3);
      result = (int *)sub_20C3B7D40(a5, (uint64_t)a2, (uint64_t)a1);
      if ((_DWORD)result)
        return sub_20C2503D8(a1, a2);
    }
  }
  return result;
}

int *sub_20C3B8688(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  int *result;

  sub_20C3B85D4(a1, a2, a3, a4, a6);
  result = (int *)sub_20C3B7D40(a6, (uint64_t)a5, (uint64_t)a4);
  if ((_DWORD)result)
  {
    sub_20C2503D8(a4, a5);
    result = (int *)sub_20C3B7D40(a6, (uint64_t)a4, (uint64_t)a3);
    if ((_DWORD)result)
    {
      sub_20C2503D8(a3, a4);
      result = (int *)sub_20C3B7D40(a6, (uint64_t)a3, (uint64_t)a2);
      if ((_DWORD)result)
      {
        sub_20C2503D8(a2, a3);
        result = (int *)sub_20C3B7D40(a6, (uint64_t)a2, (uint64_t)a1);
        if ((_DWORD)result)
          return sub_20C2503D8(a1, a2);
      }
    }
  }
  return result;
}

int *sub_20C3B8760(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        sub_20C3B8878((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((int *)v6 != a3)
    {
      v14 = (int *)v6;
      do
      {
        if (sub_20C3B7D40(a4, (uint64_t)v14, (uint64_t)a1))
        {
          sub_20C2503D8(v14, a1);
          sub_20C3B8878((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      v15 = (unint64_t)v8 >> 4;
      do
      {
        sub_20C3B89F8(a1, v6, a4, v15);
        v6 -= 16;
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

uint64_t sub_20C3B8878(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v10 = ((uint64_t)a4 - result) >> 3;
      v11 = v10 + 1;
      v12 = (int *)(result + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_20C3B7D40(a2, result + 16 * (v10 + 1), (uint64_t)(v12 + 4)))
      {
        v12 += 4;
        v11 = v13;
      }
      result = sub_20C3B7D40(a2, (uint64_t)v12, (uint64_t)v5);
      if ((result & 1) == 0)
      {
        sub_20C0308C4(&v16, v5);
        do
        {
          v14 = v12;
          sub_20C24E938(v5, v12);
          if (v7 < v11)
            break;
          v15 = (2 * v11) | 1;
          v12 = (int *)(v6 + 16 * v15);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v15;
          }
          else if (sub_20C3B7D40(a2, v6 + 16 * v15, (uint64_t)(v12 + 4)))
          {
            v12 += 4;
          }
          else
          {
            v11 = v15;
          }
          v5 = v14;
        }
        while (!sub_20C3B7D40(a2, (uint64_t)v12, (uint64_t)&v16));
        sub_20C24E938(v14, &v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_20BFD265C(&v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        return (uint64_t)sub_20BFD265C(&v16);
      }
    }
  }
  return result;
}

void sub_20C3B89E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

int *sub_20C3B89F8(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;

  if (a4 >= 2)
  {
    v7 = result;
    sub_20C0308C4(&v11, result);
    v8 = sub_20C3B8AE8(v7, a3, a4);
    v9 = v8;
    v10 = (int *)(a2 - 16);
    if (v8 == v10)
    {
      sub_20C24E938(v8, &v11);
    }
    else
    {
      sub_20C24E938(v8, v10);
      sub_20C24E938(v10, &v11);
      sub_20C3B8B98(v7, (uint64_t)(v9 + 4), a3, ((char *)(v9 + 4) - (char *)v7) >> 4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_20BFD265C(&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    return sub_20BFD265C(&v11);
  }
  return result;
}

void sub_20C3B8AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

int *sub_20C3B8AE8(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[4 * v6 + 4];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && sub_20C3B7D40(a2, (uint64_t)&a1[4 * v6 + 4], (uint64_t)&a1[4 * v6 + 8]))
    {
      v9 += 4;
      v10 = v11;
    }
    sub_20C24E938(a1, v9);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_DWORD *sub_20C3B8B98(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = &result[4 * (v4 >> 1)];
    v9 = (int *)(a2 - 16);
    result = (_DWORD *)sub_20C3B7D40(a3, (uint64_t)v8, a2 - 16);
    if ((_DWORD)result)
    {
      sub_20C0308C4(&v11, v9);
      do
      {
        v10 = v8;
        sub_20C24E938(v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = &v6[4 * v7];
        v9 = v10;
      }
      while ((sub_20C3B7D40(a3, (uint64_t)v8, (uint64_t)&v11) & 1) != 0);
      sub_20C24E938(v10, &v11);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_20BFD265C(&v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
      return sub_20BFD265C(&v11);
    }
  }
  return result;
}

void sub_20C3B8C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C024A08(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::UsdPrimCompositionQueryArc(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  _OWORD *v3;
  uint64_t OriginNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t ParentNode;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  char v13;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *(_OWORD *)a2;
  *((_QWORD *)this + 4) = 0;
  v3 = (_OWORD *)((char *)this + 32);
  *((_QWORD *)this + 5) = -1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (*(_QWORD *)this && *((_QWORD *)this + 1) != -1
    || (v12[0] = "usd/primCompositionQuery.cpp",
        v12[1] = "UsdPrimCompositionQueryArc",
        v12[2] = 42,
        v12[3] = "pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::UsdPrimCompositionQueryArc(const PcpNodeRef &)",
        v13 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "_node", 0) & 1) != 0))
  {
    *((_OWORD *)this + 1) = *(_OWORD *)this;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
    {
      *v3 = *(_OWORD *)this;
    }
    else
    {
      OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
      v6 = v5;
      ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
      if (v6 != v8 || OriginNode != ParentNode)
      {
        *((_QWORD *)this + 2) = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode(this);
        *((_QWORD *)this + 3) = v9;
      }
      *((_QWORD *)this + 4) = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 16));
      *((_QWORD *)this + 5) = v10;
    }
  }
  return this;
}

void sub_20C3B8DA4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetTargetNode(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  return *(_QWORD *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingNode(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  return *((_QWORD *)this + 4);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetTargetLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v4;
  _QWORD *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
  v6 = result[1];
  *a2 = *result;
  a2[1] = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetTargetPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *Path;

  Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  sub_20BFD6E54(a2, Path);
  return sub_20BFD6EA4(a2 + 1, Path + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetUpTo@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  uint64_t *LayerStack;
  uint64_t v9;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t Identifier;
  int v13;
  const char *v14;
  const char *v15;
  const char *p_p;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  int v21;
  int v22;
  void *__p;
  char v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  v6 = sub_20BFD2F78(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
    v9 = sub_20C1FE500(LayerStack);
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v9, a2))
      return pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, (char *)a1 + 48, a1, a2);
    v25 = "usd/primCompositionQuery.cpp";
    v26 = "MakeResolveTargetUpTo";
    v27 = 149;
    v28 = "UsdResolveTarget pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetUpTo(const Sdf"
          "LayerHandle &) const";
    v29 = 0;
    v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
    v13 = *(char *)(Identifier + 23);
    v14 = *(const char **)Identifier;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a1, (uint64_t)&v20);
    sub_20C264098((uint64_t *)&v20);
    if (v13 >= 0)
      v15 = (const char *)Identifier;
    else
      v15 = v14;
    if (v24 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer '%s' is not a layer in the layer stack of the node site '%s'", v15, p_p);
    if (v24 < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    sub_20C2012CC(&v20);
  }
  v25 = 0;
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, (char *)a1 + 48, a1, &v25);
  result = (uint64_t)v26;
  if (v26)
  {
    v17 = (unsigned int *)(v26 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C3B8FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20C20ACC8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetStrongerThan@<X0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t *LayerStack;
  uint64_t v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  uint64_t Identifier;
  int v18;
  const char *v19;
  const char *v20;
  const char *p_p;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  int v29;
  int v30;
  void *__p;
  uint64_t v32;
  char v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  _QWORD v39[2];

  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(a1);
  v39[0] = v6;
  v39[1] = v7;
  v8 = sub_20BFD2F78(a2);
  if (v9 & 1 | (unint64_t)v8)
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
    v11 = sub_20C1FE500(LayerStack);
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v11, a2))
    {
      v34 = 0;
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, a1 + 6, v39, &v34, a1, a2);
      result = (uint64_t)v35;
      if (!v35)
        return result;
      v13 = (unsigned int *)(v35 + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = --v14 == 0;
      }
      while (__stlxr(v14, v13));
      goto LABEL_24;
    }
    v34 = "usd/primCompositionQuery.cpp";
    v35 = "MakeResolveTargetStrongerThan";
    v36 = 168;
    v37 = "UsdResolveTarget pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetStrongerThan(c"
          "onst SdfLayerHandle &) const";
    v38 = 0;
    v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16);
    v18 = *(char *)(Identifier + 23);
    v19 = *(const char **)Identifier;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1, (uint64_t)&v28);
    sub_20C264098((uint64_t *)&v28);
    if (v18 >= 0)
      v20 = (const char *)Identifier;
    else
      v20 = v19;
    if (v33 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer '%s' is not a layer in the layer stack of the node site '%s'", v20, p_p);
    if (v33 < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    sub_20C2012CC(&v28);
  }
  v34 = 0;
  v35 = 0;
  __p = 0;
  v32 = 0;
  pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, a1 + 6, v39, &v34, a1, &__p);
  v22 = v32;
  if (v32)
  {
    v23 = (unsigned int *)(v32 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  result = (uint64_t)v35;
  if (v35)
  {
    v26 = (unsigned int *)(v35 + 8);
    do
    {
      v27 = __ldxr(v26);
      v15 = --v27 == 0;
    }
    while (__stlxr(v27, v26));
LABEL_24:
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C3B9220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_20C20ACC8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, _QWORD *a2@<X8>)
{
  int ArcType;
  void (*v5)(uint64_t, int *, uint64_t *, uint64_t *);
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;

  v14 = 0;
  v15 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(&v16, 0.0, 1.0);
  __p = 0;
  v18 = 0;
  v19 = 0;
  ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  v5 = (void (*)(uint64_t, int *, uint64_t *, uint64_t *))pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits;
  switch(ArcType)
  {
    case 1:
      goto LABEL_6;
    case 2:
      v6 = sub_20C3B9B58(this, (uint64_t)&v14, 0);
      goto LABEL_7;
    case 4:
      v6 = sub_20C3B9400(this, (uint64_t)&v14, 0);
      goto LABEL_7;
    case 5:
      v6 = sub_20C3B9670(this, (uint64_t)&v14, 0);
      goto LABEL_7;
    case 6:
      v5 = (void (*)(uint64_t, int *, uint64_t *, uint64_t *))pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes;
LABEL_6:
      v6 = sub_20C3B98FC(this, v5, (uint64_t)&v14, 0);
LABEL_7:
      if (!v6)
        goto LABEL_12;
      v7 = v15;
      *a2 = v14;
      a2[1] = v7;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      break;
    default:
LABEL_12:
      *a2 = 0;
      a2[1] = 0;
      break;
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  result = v15;
  if (v15)
  {
    v11 = (unsigned int *)(v15 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C3B93B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, unsigned int *a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a11)
  {
    v12 = a11 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3B9400(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *LayerStack;
  int SiblingNumAtOrigin;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v15 = *((_OWORD *)a1 + 2);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v15);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v19);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(LayerStack, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (uint64_t)&v21, &v24, 0, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (v22 - v21 != v25 - v24)
  {
    *(_QWORD *)&v15 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v15 + 1) = "_GetIntroducingComposeInfo";
    v16 = 104;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfReference]";
    v18 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "result.size() == info.size()", 0) & 1) == 0)
      goto LABEL_9;
  }
  v15 = *(_OWORD *)a1;
  SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v15);
  v8 = v24;
  if (0x6DB6DB6DB6DB6DB7 * ((v25 - v24) >> 3) <= (unint64_t)SiblingNumAtOrigin)
  {
    *(_QWORD *)&v15 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v15 + 1) = "_GetIntroducingComposeInfo";
    v16 = 113;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfReference]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Node sibling number of target node is out of range introducing composed list op");
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  v9 = SiblingNumAtOrigin;
  if (a2)
  {
    sub_20BF2D298(a2, v24 + 56 * SiblingNumAtOrigin);
    v10 = v8 + 56 * v9;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v10 + 16);
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(v10 + 32));
  }
  if (a3)
  {
    v11 = v21;
    std::string::operator=((std::string *)a3, (const std::string *)(v21 + 56 * v9));
    v12 = v11 + 56 * v9;
    sub_20C01A074((int *)(a3 + 24), (_DWORD *)(v12 + 24));
    sub_20C01A0C8((int *)(a3 + 28), (_DWORD *)(v12 + 28));
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v12 + 32);
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a3 + 48), (const void ****)(v12 + 48));
  }
  v13 = 1;
LABEL_10:
  *(_QWORD *)&v15 = &v21;
  sub_20C021740((void ***)&v15);
  *(_QWORD *)&v15 = &v24;
  sub_20C266AD4((void ***)&v15);
  return v13;
}

void sub_20C3B961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_20C021740(&a9);
  a9 = (void **)&a18;
  sub_20C266AD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B9670(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *LayerStack;
  int SiblingNumAtOrigin;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v15 = *((_OWORD *)a1 + 2);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v15);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v19);
  pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(LayerStack, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21, &v24, 0, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if (0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 4) != 0x6DB6DB6DB6DB6DB7 * ((v25 - v24) >> 3))
  {
    *(_QWORD *)&v15 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v15 + 1) = "_GetIntroducingComposeInfo";
    v16 = 104;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    v18 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "result.size() == info.size()", 0) & 1) == 0)
      goto LABEL_9;
  }
  v15 = *(_OWORD *)a1;
  SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v15);
  v8 = v24;
  if (0x6DB6DB6DB6DB6DB7 * ((v25 - v24) >> 3) <= (unint64_t)SiblingNumAtOrigin)
  {
    *(_QWORD *)&v15 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v15 + 1) = "_GetIntroducingComposeInfo";
    v16 = 113;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Node sibling number of target node is out of range introducing composed list op");
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  v9 = SiblingNumAtOrigin;
  if (a2)
  {
    sub_20BF2D298(a2, v24 + 56 * SiblingNumAtOrigin);
    v10 = v8 + 56 * v9;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v10 + 16);
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(v10 + 32));
  }
  if (a3)
  {
    v11 = v21;
    std::string::operator=((std::string *)a3, (const std::string *)(v21 + 48 * v9));
    v12 = v11 + 48 * v9;
    sub_20C01A074((int *)(a3 + 24), (_DWORD *)(v12 + 24));
    sub_20C01A0C8((int *)(a3 + 28), (_DWORD *)(v12 + 28));
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v12 + 32);
  }
  v13 = 1;
LABEL_10:
  *(_QWORD *)&v15 = &v21;
  sub_20C021818((void ***)&v15);
  *(_QWORD *)&v15 = &v24;
  sub_20C266AD4((void ***)&v15);
  return v13;
}

void sub_20C3B98A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_20C021818(&a9);
  a9 = (void **)&a18;
  sub_20C266AD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B98FC(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, void (*a2)(uint64_t, int *, uint64_t *, uint64_t *), uint64_t a3, int *a4)
{
  uint64_t LayerStack;
  int SiblingNumAtOrigin;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v16 = *((_OWORD *)a1 + 2);
  LayerStack = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v16);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v20);
  a2(LayerStack, &v20, &v22, &v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (0x6DB6DB6DB6DB6DB7 * ((v26 - v25) >> 3) != (v23 - v22) >> 3)
  {
    *(_QWORD *)&v16 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v16 + 1) = "_GetIntroducingComposeInfo";
    v17 = 104;
    v18 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfPath]";
    v19 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "result.size() == info.size()", 0) & 1) == 0)
      goto LABEL_9;
  }
  v16 = *(_OWORD *)a1;
  SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v16);
  v10 = v25;
  if (0x6DB6DB6DB6DB6DB7 * ((v26 - v25) >> 3) <= (unint64_t)SiblingNumAtOrigin)
  {
    *(_QWORD *)&v16 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v16 + 1) = "_GetIntroducingComposeInfo";
    v17 = 113;
    v18 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfPath]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Node sibling number of target node is out of range introducing composed list op");
LABEL_9:
    v14 = 0;
    goto LABEL_10;
  }
  v11 = SiblingNumAtOrigin;
  if (a3)
  {
    sub_20BF2D298(a3, v25 + 56 * SiblingNumAtOrigin);
    v12 = v10 + 56 * (int)v11;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v12 + 16);
    std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  }
  if (a4)
  {
    v13 = (_DWORD *)(v22 + 8 * v11);
    sub_20C01A074(a4, v13);
    sub_20C01A0C8(a4 + 1, v13 + 1);
  }
  v14 = 1;
LABEL_10:
  *(_QWORD *)&v16 = &v22;
  sub_20BFD6F90((void ***)&v16);
  *(_QWORD *)&v16 = &v25;
  sub_20C266AD4((void ***)&v16);
  return v14;
}

void sub_20C3B9B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_20BFD6F90(&a9);
  a9 = (void **)&a18;
  sub_20C266AD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B9B58(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, uint64_t a2, std::string *a3)
{
  uint64_t *LayerStack;
  int SiblingNumAtOrigin;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  const char *v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v13 = *((_OWORD *)a1 + 2);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v17);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSets(LayerStack, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v19, &v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3) != 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 3))
  {
    *(_QWORD *)&v13 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v13 + 1) = "_GetIntroducingComposeInfo";
    v14 = 104;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = std::string]";
    v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "result.size() == info.size()", 0) & 1) == 0)
      goto LABEL_9;
  }
  v13 = *(_OWORD *)a1;
  SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
  v8 = v22;
  if (0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 3) <= (unint64_t)SiblingNumAtOrigin)
  {
    *(_QWORD *)&v13 = "usd/primCompositionQuery.cpp";
    *((_QWORD *)&v13 + 1) = "_GetIntroducingComposeInfo";
    v14 = 113;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = std::string]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Node sibling number of target node is out of range introducing composed list op");
LABEL_9:
    v11 = 0;
    goto LABEL_10;
  }
  v9 = SiblingNumAtOrigin;
  if (a2)
  {
    sub_20BF2D298(a2, v22 + 56 * SiblingNumAtOrigin);
    v10 = v8 + 56 * v9;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v10 + 16);
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(v10 + 32));
  }
  if (a3)
    std::string::operator=(a3, (const std::string *)(v19 + 24 * v9));
  v11 = 1;
LABEL_10:
  *(_QWORD *)&v13 = &v19;
  sub_20BDE5038((void ***)&v13);
  *(_QWORD *)&v13 = &v22;
  sub_20C266AD4((void ***)&v13);
  return v11;
}

void sub_20C3B9D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_20BDE5038(&a9);
  a9 = (void **)&a18;
  sub_20C266AD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3B9DB4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, int *a2@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetIntroPath((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 16), a2);
  *(_QWORD *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int **v7;
  unint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  __int128 v17;
  char *v18;
  const char *v19;
  double v20[2];
  void *__p[2];
  uint64_t v22;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 4)
  {
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v20, 0.0, 1.0);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v6 = sub_20C3B9400(a1, (uint64_t)&v18, a3);
    if ((v6 & 1) != 0)
    {
      sub_20C3BA048(a1, (uint64_t *)&v18, &v16);
      v7 = (unsigned int **)sub_20C0B0CA4(&v16);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v7, &v17);
      sub_20BDE82DC(a2, &v17);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
      sub_20C1051AC(a3, (uint64_t)__p);
    }
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    v11 = v19;
    if (v19)
    {
      v12 = (unsigned int *)(v19 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v18 = "usd/primCompositionQuery.cpp";
    v19 = "GetIntroducingListEditor";
    *(_QWORD *)&v20[0] = 243;
    *(_QWORD *)&v20[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(Sdf"
                         "ReferenceEditorProxy *, SdfReference *) const";
    LOBYTE(__p[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a reference list editor and reference for arc types other than PcpArcTypeReference");
    return 0;
  }
  return v6;
}

{
  uint64_t v6;
  unsigned int **v7;
  unint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  __int128 v17;
  char *v18;
  const char *v19;
  double v20[2];
  void *__p[2];
  uint64_t v22;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 5)
  {
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v20, 0.0, 1.0);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v6 = sub_20C3B9670(a1, (uint64_t)&v18, a3);
    if ((v6 & 1) != 0)
    {
      sub_20C3BA048(a1, (uint64_t *)&v18, &v16);
      v7 = (unsigned int **)sub_20C0B0CA4(&v16);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v7, &v17);
      sub_20BDE82DC(a2, &v17);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
      sub_20C105740(a3, (uint64_t)__p);
    }
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    v11 = v19;
    if (v19)
    {
      v12 = (unsigned int *)(v19 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v18 = "usd/primCompositionQuery.cpp";
    v19 = "GetIntroducingListEditor";
    *(_QWORD *)&v20[0] = 268;
    *(_QWORD *)&v20[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(Sdf"
                         "PayloadEditorProxy *, SdfPayload *) const";
    LOBYTE(__p[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a payload list editor and payload for arc types other than PcpArcTypePayload");
    return 0;
  }
  return v6;
}

void sub_20C3B9FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C3B9DB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3BA048@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  int v7;
  int v8;

  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C3BA0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C3BA24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C3B9DB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, int *a3)
{
  unsigned int **v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;
  __int128 v18;
  char *v19;
  const char *v20;
  double v21[2];
  void *__p;
  uint64_t v23;
  uint64_t v24;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) != 1
    && pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) != 6)
  {
    v19 = "usd/primCompositionQuery.cpp";
    v20 = "GetIntroducingListEditor";
    *(_QWORD *)&v21[0] = 295;
    *(_QWORD *)&v21[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(Sdf"
                         "PathEditorProxy *, SdfPath *) const";
    LOBYTE(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a path list editor and path for arc types other than PcpArcTypeInherit and PcpArcTypeSpecialize");
    return 0;
  }
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v21, 0.0, 1.0);
  __p = 0;
  v23 = 0;
  v24 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 1)
  {
    if ((sub_20C3B98FC(a1, (void (*)(uint64_t, int *, uint64_t *, uint64_t *))pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits, (uint64_t)&v19, a3) & 1) != 0)
    {
      sub_20C3BA048(a1, (uint64_t *)&v19, &v17);
      v6 = (unsigned int **)sub_20C0B0CA4(&v17);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(v6, &v18);
      sub_20BDE82DC(a2, &v18);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 - 1, v7));
        goto LABEL_13;
      }
      goto LABEL_15;
    }
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  if (!sub_20C3B98FC(a1, (void (*)(uint64_t, int *, uint64_t *, uint64_t *))pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes, (uint64_t)&v19, a3))goto LABEL_16;
  sub_20C3BA048(a1, (uint64_t *)&v19, &v17);
  v10 = (unsigned int **)sub_20C0B0CA4(&v17);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(v10, &v18);
  sub_20BDE82DC(a2, &v18);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
LABEL_13:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_15:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
  v11 = 1;
LABEL_17:
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  v12 = v20;
  if (v20)
  {
    v13 = (unsigned int *)(v20 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(const char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v11;
}

void sub_20C3BA4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C3B9DB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, uint64_t a2, std::string *a3)
{
  uint64_t v6;
  unsigned int **v7;
  unint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  __int128 v17;
  char *v18;
  const char *v19;
  double v20[2];
  void *__p;
  uint64_t v22;
  uint64_t v23;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 2)
  {
    v18 = 0;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v20, 0.0, 1.0);
    __p = 0;
    v22 = 0;
    v23 = 0;
    v6 = sub_20C3B9B58(a1, (uint64_t)&v18, a3);
    if ((v6 & 1) != 0)
    {
      sub_20C3BA048(a1, (uint64_t *)&v18, &v16);
      v7 = (unsigned int **)sub_20C0B0CA4(&v16);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList(v7, (std::__shared_weak_count_vtbl **)&v17);
      sub_20BDE82DC(a2, &v17);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
    }
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
    v11 = v19;
    if (v19)
    {
      v12 = (unsigned int *)(v19 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v18 = "usd/primCompositionQuery.cpp";
    v19 = "GetIntroducingListEditor";
    *(_QWORD *)&v20[0] = 327;
    *(_QWORD *)&v20[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(Sdf"
                         "NameEditorProxy *, std::string *) const";
    LOBYTE(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a name list editor and name for arc types other than PcpArcTypeVariant");
    return 0;
  }
  return v6;
}

void sub_20C3BA674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C3B9DB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C3BA69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a13)
  {
    v13 = a13 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  JUMPOUT(0x20C3BA694);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsImplicit(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  _BOOL8 v2;
  uint64_t ParentNode;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  int v9;
  int v10;
  _QWORD v11[2];
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  int v13;
  int v14;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
    return 0;
  ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  if (v4 == *((_QWORD *)this + 5) && *((_QWORD *)this + 4) == ParentNode)
    return 0;
  v11[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
  v11[1] = v5;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v11, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v8);
  v6 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v12, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  sub_20C2012CC(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  v2 = !v6;
  sub_20BFD265C(&v13);
  sub_20C2012CC(&v12);
  return v2;
}

void sub_20C3BA7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20C20ACC8((uint64_t)&a9);
  sub_20C20ACC8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsIntroducedInRootLayerStack(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v4;
  uint64_t Identifier;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v9;
  uint64_t v10;
  _QWORD v11[2];

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
    return 1;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 32));
  v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
  v11[0] = v6;
  v11[1] = v7;
  v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v11);
  v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v8);
  v10 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v9);
  return sub_20BEB560C(Identifier, v10);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsIntroducedInRootLayerPrimSpec(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 32));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex **v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v27;
  uint64_t v28;
  void **v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];
  uint64_t v32[4];

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = 0u;
  v13 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(a1 + 48);
  *(_QWORD *)(a1 + 80) = 0;
  sub_20C3BB4C0(&v27);
  sub_20BDE82DC(a1 + 48, &v27);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1, v14, v15, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v27);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap((uint64_t *)&v27, *v13);
  sub_20BF1C150(&v29, 0);
  if (*((_QWORD *)&v27 + 1))
  {
    v28 = *((_QWORD *)&v27 + 1);
    operator delete(*((void **)&v27 + 1));
  }
  sub_20C21DABC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v27);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)*v13, 6u, v32);
  v19 = v32[0];
  v20 = v32[1];
  v21 = v32[2];
  v22 = v32[3];
  while (v19 != v21 || v20 != v22)
  {
    v31[0] = v19;
    v31[1] = v20;
    if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v31) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::UsdPrimCompositionQueryArc((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)&v27, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v31);
      sub_20C3BAAA0((uint64_t *)(a1 + 64), &v27);
      v23 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    ++v20;
  }
  return a1;
}

void sub_20C3BAA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  sub_20C3BB44C(&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  sub_20C35C2E0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3BAAA0(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v14 = (uint64_t)(v7 - *a1) >> 6;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 58)
      sub_20BDDF694();
    v16 = v5 - *a1;
    if (v16 >> 5 > v15)
      v15 = v16 >> 5;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
      v17 = 0x3FFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v26[4] = result;
    v18 = (char *)sub_20C00D6F0(result, v17);
    v19 = &v18[64 * v14];
    v26[0] = v18;
    v26[1] = v19;
    v26[3] = &v18[64 * v20];
    v21 = *a2;
    v22 = a2[2];
    *((_OWORD *)v19 + 1) = a2[1];
    *((_OWORD *)v19 + 2) = v22;
    *(_OWORD *)v19 = v21;
    *((_QWORD *)v19 + 6) = *((_QWORD *)a2 + 6);
    v23 = *((_QWORD *)a2 + 7);
    *((_QWORD *)v19 + 7) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26[2] = v19 + 64;
    sub_20C3BB554(a1, v26);
    v13 = a1[1];
    result = sub_20C3BB5DC((uint64_t)v26);
  }
  else
  {
    v8 = *a2;
    v9 = a2[2];
    *(_OWORD *)(v7 + 16) = a2[1];
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)v7 = v8;
    *(_QWORD *)(v7 + 48) = *((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(v7 + 56) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v13;
  return result;
}

void sub_20C3BABD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3BB5DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetDirectReferences@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;

  v4 = 0x100000001uLL;
  return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(a2, (uint64_t)this, &v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetDirectInherits@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;

  v4 = 0x100000003uLL;
  return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(a2, (uint64_t)this, &v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetDirectRootLayerArcs@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;

  LODWORD(v4) = 0;
  HIDWORD(v4) = 0;
  *(_QWORD *)((char *)&v4 + 4) = 0x100000001;
  return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(a2, (uint64_t)this, &v4);
}

__n128 pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::SetFilter(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[2] = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetFilter(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this)
{
  return *((_QWORD *)this + 4);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetCompositionArcs(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v4;
  _QWORD *v5;
  void ***v6;
  uint64_t v7;
  _QWORD *v8;
  void ***v9;
  uint64_t v10;
  _QWORD *v11;
  void ***v12;
  uint64_t v13;
  _QWORD *v14;
  void ***v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27[3];
  void ***v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v4 = (_OWORD *)((char *)this + 32);
  if (*((_DWORD *)this + 8))
  {
    v5 = operator new(0x20uLL);
    *v5 = &unk_24C539378;
    v5[1] = sub_20C3BB12C;
    *((_OWORD *)v5 + 1) = *v4;
    v28 = (void ***)v5;
    sub_20C3BB02C(&v24, (uint64_t)v27);
    v6 = v28;
    if (v28 == v27)
    {
      v7 = 4;
      v6 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_7;
      v7 = 5;
    }
    ((void (*)(void))(*v6)[v7])();
  }
LABEL_7:
  if (!*((_DWORD *)this + 9))
    goto LABEL_13;
  v8 = operator new(0x20uLL);
  *v8 = &unk_24C539378;
  v8[1] = sub_20C3BB1D0;
  *((_OWORD *)v8 + 1) = *v4;
  v28 = (void ***)v8;
  sub_20C3BB02C(&v24, (uint64_t)v27);
  v9 = v28;
  if (v28 == v27)
  {
    v10 = 4;
    v9 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_13;
    v10 = 5;
  }
  ((void (*)(void))(*v9)[v10])();
LABEL_13:
  if (!*((_DWORD *)this + 10))
    goto LABEL_19;
  v11 = operator new(0x20uLL);
  *v11 = &unk_24C539378;
  v11[1] = sub_20C3BB20C;
  *((_OWORD *)v11 + 1) = *v4;
  v28 = (void ***)v11;
  sub_20C3BB02C(&v24, (uint64_t)v27);
  v12 = v28;
  if (v28 == v27)
  {
    v13 = 4;
    v12 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_19;
    v13 = 5;
  }
  ((void (*)(void))(*v12)[v13])();
LABEL_19:
  if (!*((_DWORD *)this + 11))
    goto LABEL_25;
  v14 = operator new(0x20uLL);
  *v14 = &unk_24C539378;
  v14[1] = sub_20C3BB234;
  *((_OWORD *)v14 + 1) = *v4;
  v28 = (void ***)v14;
  sub_20C3BB02C(&v24, (uint64_t)v27);
  v15 = v28;
  if (v28 == v27)
  {
    v16 = 4;
    v15 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_25;
    v16 = 5;
  }
  ((void (*)(void))(*v15)[v16])();
LABEL_25:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v24 == v25)
  {
    if ((uint64_t *)((char *)this + 64) != a2)
      sub_20C3BB8B0((uint64_t)a2, *((__int128 **)this + 8), *((__int128 **)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 6);
  }
  else
  {
    sub_20C3BB270(a2, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 6);
    v17 = (__int128 *)*((_QWORD *)this + 8);
    v18 = (__int128 *)*((_QWORD *)this + 9);
    while (v17 != v18)
    {
      v19 = v24;
      v20 = v25;
      while (v19 != v20)
      {
        v21 = *(_QWORD *)(v19 + 24);
        if (!v21)
          sub_20BE9E974();
        if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 48))(v21, v17) & 1) == 0)
          goto LABEL_34;
        v19 += 32;
      }
      sub_20C3BB300(a2, v17);
LABEL_34:
      v17 += 4;
    }
  }
  v22 = *a2;
  v23 = a2[1];
  if (*a2 != v23)
  {
    do
    {
      sub_20BDE881C((_QWORD *)(v22 + 48), (uint64_t *)this + 6);
      v22 += 64;
    }
    while (v22 != v23);
  }
  v27[0] = (void **)&v24;
  sub_20C37ABEC(v27);
}

void sub_20C3BAF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void ***a15)
{
  void ***v15;
  void ***v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  ((void (*)(void))(*v17)[v18])();
LABEL_6:
  a12 = (void **)&a9;
  sub_20C37ABEC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3BB02C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20BED2F10(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    sub_20C3BB62C((uint64_t)v16, a2);
    v17 = v16 + 32;
    sub_20C3BB690(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)sub_20C3813E4(&v15);
  }
  else
  {
    result = sub_20C3BB62C(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_20C3BB118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3813E4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3BB12C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = 1;
  switch(*a2)
  {
    case 0:
      return v2;
    case 1:
      v3 = 16;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 2:
      v3 = 32;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 3:
      v3 = 2;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 4:
      v3 = 64;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 5:
      v3 = 4;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 6:
      v3 = 48;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 7:
      v3 = 66;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 8:
      v3 = -49;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 9:
      v3 = -67;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 0xA:
      v3 = -5;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    default:
      v3 = 0;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
  }
}

uint64_t sub_20C3BB1D0(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2 == 2)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1);
  if (v2 == 1)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1) ^ 1;
  return 1;
}

uint64_t sub_20C3BB20C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 2)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 32));
  if (v2 == 1)
    return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsIntroducedInRootLayerStack((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)a1);
  return 1;
}

uint64_t sub_20C3BB234(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 12);
  if (v2 == 2)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1) ^ 1;
  if (v2 == 1)
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
  return 1;
}

uint64_t sub_20C3BB270(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C00D6F0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    sub_20C3BB554(a1, v7);
    return sub_20C3BB5DC((uint64_t)v7);
  }
  return result;
}

void sub_20C3BB2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3BB5DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3BB300(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v14 = (uint64_t)(v7 - *a1) >> 6;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 58)
      sub_20BDDF694();
    v16 = v5 - *a1;
    if (v16 >> 5 > v15)
      v15 = v16 >> 5;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
      v17 = 0x3FFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v26[4] = result;
    v18 = (char *)sub_20C00D6F0(result, v17);
    v19 = &v18[64 * v14];
    v26[0] = v18;
    v26[1] = v19;
    v26[3] = &v18[64 * v20];
    v21 = *a2;
    v22 = a2[2];
    *((_OWORD *)v19 + 1) = a2[1];
    *((_OWORD *)v19 + 2) = v22;
    *(_OWORD *)v19 = v21;
    *((_QWORD *)v19 + 6) = *((_QWORD *)a2 + 6);
    v23 = *((_QWORD *)a2 + 7);
    *((_QWORD *)v19 + 7) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26[2] = v19 + 64;
    sub_20C3BB554(a1, v26);
    v13 = a1[1];
    result = sub_20C3BB5DC((uint64_t)v26);
  }
  else
  {
    v8 = *a2;
    v9 = a2[2];
    *(_OWORD *)(v7 + 16) = a2[1];
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)v7 = v8;
    *(_QWORD *)(v7 + 48) = *((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(v7 + 56) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v13;
  return result;
}

void sub_20C3BB438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3BB5DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C3BB44C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 64;
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20C3BB4C0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x40uLL);
  result = sub_20C3BB508(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20C3BB4F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3BB508(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24C539328;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 3));
  return a1;
}

void sub_20C3BB540(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3BB554(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 64);
    v6 = *(_OWORD *)(v2 - 32);
    *(_OWORD *)(v4 - 48) = *(_OWORD *)(v2 - 48);
    *(_OWORD *)(v4 - 32) = v6;
    *(_OWORD *)(v4 - 64) = v5;
    v7 = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(v4 - 16) = *(_QWORD *)(v2 - 16);
    *(_QWORD *)(v4 - 8) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v4 -= 64;
    v2 -= 64;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C3BB5DC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C3BB62C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20C3BB690(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C3BB704((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C3BB704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      sub_20C3BB62C(v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C3BB7A8((uint64_t)v12);
  return v10;
}

uint64_t sub_20C3BB7A8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C381384((_QWORD *)a1);
  return a1;
}

__n128 sub_20C3BB7E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C539378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C3BB828(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C539378;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3BB854(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a1 + 16);
}

uint64_t sub_20C3BB868(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C539410))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3BB8A4()
{
  return &unk_24C539410;
}

void sub_20C3BB8B0(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2;
  v8 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    sub_20C3BBA30((void **)a1);
    if (a4 >> 58)
      sub_20BDDF694();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 5;
    if (v9 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_20C00D6B0((_QWORD *)a1, v11);
    v12 = *(_QWORD *)(a1 + 8);
    while (v6 != a3)
    {
      v13 = *v6;
      v14 = v6[2];
      *(_OWORD *)(v12 + 16) = v6[1];
      *(_OWORD *)(v12 + 32) = v14;
      *(_OWORD *)v12 = v13;
      v15 = *((_QWORD *)v6 + 7);
      *(_QWORD *)(v12 + 48) = *((_QWORD *)v6 + 6);
      *(_QWORD *)(v12 + 56) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v6 += 4;
      v12 += 64;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v18 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 6;
  if (v18 < a4)
  {
    v19 = &a2[4 * v18];
    sub_20C3BBA98(a2, v19, (uint64_t)v8);
    v12 = *(_QWORD *)(a1 + 8);
    while (v19 != a3)
    {
      v20 = *v19;
      v21 = v19[2];
      *(_OWORD *)(v12 + 16) = v19[1];
      *(_OWORD *)(v12 + 32) = v21;
      *(_OWORD *)v12 = v20;
      v22 = *((_QWORD *)v19 + 7);
      *(_QWORD *)(v12 + 48) = *((_QWORD *)v19 + 6);
      *(_QWORD *)(v12 + 56) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v19 += 4;
      v12 += 64;
    }
    goto LABEL_21;
  }
  sub_20C3BBA98(a2, a3, (uint64_t)v8);
  v26 = v25;
  v27 = *(_QWORD *)(a1 + 8);
  if (v27 != v25)
  {
    do
    {
      v28 = v27 - 64;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v27 - 16));
      v27 = v28;
    }
    while (v28 != v26);
  }
  *(_QWORD *)(a1 + 8) = v26;
}

void sub_20C3BBA30(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 64;
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__int128 *sub_20C3BBA98(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;

  v4 = (uint64_t *)a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *(_OWORD *)v4;
    v7 = *((_OWORD *)v4 + 2);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)v4 + 1);
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)a3 = v6;
    sub_20BDE881C((_QWORD *)(a3 + 48), v4 + 6);
    a3 += 64;
    v4 += 8;
  }
  while (v4 != (uint64_t *)v5);
  return v5;
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *pxrInternal__aapl__pxrReserved__::Usd_PrimData::Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, pxrInternal__aapl__pxrReserved__::UsdStage *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char *v6;
  unsigned __int8 v7;
  unint64_t v8;
  const char *v9;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t Identifier;
  const char *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  int v27;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  sub_20BFD6E54((_DWORD *)this + 4, a3);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a3 + 1);
  v7 = atomic_load((unsigned __int8 *)&qword_254988868);
  if ((v7 & 1) == 0)
  {
    v21 = (pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)__cxa_guard_acquire(&qword_254988868);
    if ((_DWORD)v21)
    {
      qword_254988860 = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::GetEmptyPrimType(v21);
      __cxa_guard_release(&qword_254988868);
    }
  }
  *((_QWORD *)this + 3) = qword_254988860;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (!a2)
  {
    v22 = "usd/primData.cpp";
    v23 = "Usd_PrimData";
    v24 = 67;
    v25 = "pxrInternal__aapl__pxrReserved__::Usd_PrimData::Usd_PrimData(UsdStage *, const SdfPath &)";
    v26 = 0;
    v27 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v22, (pxrInternal__aapl__pxrReserved__ *)"Attempted to construct with null stage", v6);
  }
  if (sub_20C286E00(9))
  {
    v8 = **((_QWORD **)this + 3) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, (uint64_t *)&v22);
    v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v22);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
    if (*(char *)(Identifier + 23) >= 0)
      v15 = Identifier;
    else
      v15 = *(_QWORD *)Identifier;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Usd_PrimData::ctor<%s,%s,%s>\n", v13, v14, v9, Text, v15);
    v16 = v23;
    if (v23)
    {
      v17 = (unsigned int *)(v23 + 8);
      do
      {
        v18 = __ldxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(const char *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  return this;
}

void sub_20C3BBCA4(_Unwind_Exception *a1)
{
  _DWORD *v1;

  __cxa_guard_abort(&qword_254988868);
  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  unint64_t v2;
  const char *v3;
  const char *v4;
  char *v5;
  const char *Text;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t Identifier;
  const char *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  if (sub_20C286E00(9))
  {
    v2 = **((_QWORD **)this + 3) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)this + 16));
    v7 = *(_QWORD **)this;
    if (*(_QWORD *)this)
    {
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, &v15);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v15);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v8);
      if (*(char *)(Identifier + 23) >= 0)
        v10 = (const char *)Identifier;
      else
        v10 = *(const char **)Identifier;
    }
    else
    {
      v10 = "prim is invalid/expired";
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"~Usd_PrimData::dtor<%s,%s,%s>\n", v4, v5, v3, Text, v10);
    if (v7)
    {
      v11 = v16;
      if (v16)
      {
        v12 = (unsigned int *)(v16 + 8);
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_20BFD265C((_DWORD *)this + 4);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  uint64_t v1;
  unint64_t PrimDataAtPath;
  pxrInternal__aapl__pxrReserved__::SdfPath *ParentPath;
  uint64_t *v6;
  uint64_t v8;

  v1 = *((_QWORD *)this + 5);
  PrimDataAtPath = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 7) == 0 || PrimDataAtPath == 0)
  {
    ParentPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)this + 16), &v8);
    v6 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(ParentPath);
    if (v8 == *v6)
      PrimDataAtPath = 0;
    else
      PrimDataAtPath = pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
    sub_20BFD265C(&v8);
  }
  return PrimDataAtPath;
}

void sub_20C3BBEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254988858);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254988858))
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&unk_254988830);
    __cxa_atexit((void (*)(void *))sub_20C21C1E0, &unk_254988830, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988858);
  }
  if ((*((_BYTE *)this + 57) & 0x10) != 0
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)this + 16)) & 1) != 0)
  {
    return &unk_254988830;
  }
  else
  {
    return (void *)*((_QWORD *)this + 1);
  }
}

void sub_20C3BBF5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988858);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v4[4];
  char v5;
  int v6;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    v4[0] = "usd/primData.cpp";
    v4[1] = "GetSourcePrimIndex";
    v4[2] = 104;
    v4[3] = "const PcpPrimIndex &pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex() const";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_primIndex");
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdStage *pxrInternal__aapl__pxrReserved__::Usd_PrimData::_ComposeAndCacheFlags(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, int a3)
{
  uint64_t v4;
  _BOOL4 IsActive;
  int HasAnyPayloads;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *Path;
  BOOL IsPayloadIncluded;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const pxrInternal__aapl__pxrReserved__::TfToken *v16;
  _BOOL4 IsModel;
  _BOOL4 IsGroup;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *v20;
  _BOOL4 IsComponent;
  const pxrInternal__aapl__pxrReserved__::TfToken *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BOOL8 v38;

  v4 = (uint64_t)this;
  if (a2 && !a3)
  {
    IsActive = pxrInternal__aapl__pxrReserved__::UsdStage::_IsActive(this, a2);
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL | IsActive;
    HasAnyPayloads = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v4 + 8));
    v8 = *(_QWORD *)(v4 + 56);
    if (HasAnyPayloads)
    {
      v9 = v8 | 0x200;
      *(_QWORD *)(v4 + 56) = v9;
      if (IsActive)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v4 + 128);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v4 + 8));
        IsPayloadIncluded = pxrInternal__aapl__pxrReserved__::PcpCache::IsPayloadIncluded(v10, (unsigned int *)Path);
        v9 = *(_QWORD *)(v4 + 56);
        if (IsPayloadIncluded)
        {
LABEL_10:
          v13 = v9 | 2;
LABEL_11:
          *(_QWORD *)(v4 + 56) = v13;
          if ((*((_BYTE *)a2 + 56) & 8) == 0)
          {
            v14 = v13 & 0xFFFFFFFFFFFFFFF3;
            *(_QWORD *)(v4 + 56) = v14;
LABEL_13:
            v15 = v14 & 0xFFFFFFFFFFFFFFEFLL;
            goto LABEL_29;
          }
          pxrInternal__aapl__pxrReserved__::UsdStage::_GetKind((pxrInternal__aapl__pxrReserved__::UsdStage *)v4, &v38);
          IsModel = v38;
          if (v38)
          {
            IsGroup = pxrInternal__aapl__pxrReserved__::KindRegistry::IsGroup((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v38, v7, v16);
            IsComponent = pxrInternal__aapl__pxrReserved__::KindRegistry::IsComponent((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v38, v19, v20);
            if (IsGroup || IsComponent)
            {
              IsModel = 1;
              goto LABEL_19;
            }
            IsModel = pxrInternal__aapl__pxrReserved__::KindRegistry::IsModel((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v38, v7, v22);
          }
          IsComponent = 0;
          IsGroup = 0;
LABEL_19:
          if (v38 & 7)
          {
            v23 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stlxr(v24 - 2, v23));
          }
          v25 = *(_QWORD *)(v4 + 56);
          if (IsGroup)
          {
            v26 = v25 | 8;
            *(_QWORD *)(v4 + 56) = v26;
            if (!IsModel)
              goto LABEL_24;
          }
          else
          {
            v26 = v25 & 0xFFFFFFFFFFFFFFF7;
            *(_QWORD *)(v4 + 56) = v26;
            if (!IsModel)
            {
LABEL_24:
              v14 = v26 & 0xFFFFFFFFFFFFFFFBLL;
              *(_QWORD *)(v4 + 56) = v26 & 0xFFFFFFFFFFFFFFFBLL;
              if (!IsComponent)
                goto LABEL_13;
LABEL_28:
              v15 = v14 | 0x10;
LABEL_29:
              *(_QWORD *)(v4 + 56) = v15;
              this = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetSpecifier((pxrInternal__aapl__pxrReserved__::UsdStage *)v4, v7);
              v27 = (*((_QWORD *)a2 + 7) >> 5) & 1;
              if ((_DWORD)this == 2)
                LODWORD(v27) = 1;
              v28 = (_DWORD)v27 == 0;
              v29 = 32;
              if (v28)
                v29 = 0;
              v30 = *(_QWORD *)(v4 + 56) & 0xFFFFFFFFFFFFFFDFLL | v29;
              *(_QWORD *)(v4 + 56) = v30;
              if ((_DWORD)this == 1)
              {
                v31 = v30 & 0xFFFFFFFFFFFFFF7FLL;
                *(_QWORD *)(v4 + 56) = v30 & 0xFFFFFFFFFFFFFF7FLL;
              }
              else
              {
                v31 = v30 | 0x80;
                *(_QWORD *)(v4 + 56) = v30 | 0x80;
                if ((*((_BYTE *)a2 + 56) & 0x40) != 0)
                {
                  v32 = v30 | 0xC0;
LABEL_39:
                  v33 = v32 & 0xFFFFFFFFFFFFFBFFLL;
                  *(_QWORD *)(v4 + 56) = v33;
                  if (IsActive
                    && (this = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v4 + 8)),
                        v33 = *(_QWORD *)(v4 + 56),
                        (_DWORD)this))
                  {
                    v34 = v33 | 0x100;
                  }
                  else
                  {
                    v34 = v33 & 0xFFFFFFFFFFFFFEFFLL;
                  }
                  *(_QWORD *)(v4 + 56) = v34;
                  if ((*((_BYTE *)a2 + 57) & 0x10) != 0)
                    v35 = v34 | 0x1000;
                  else
                    v35 = v34 & 0xFFFFFFFFFFFFEFFFLL;
                  goto LABEL_46;
                }
              }
              v32 = v31 & 0xFFFFFFFFFFFFFFBFLL;
              goto LABEL_39;
            }
          }
          v14 = v26 | 4;
          *(_QWORD *)(v4 + 56) = v26 | 4;
          if (!IsComponent)
            goto LABEL_13;
          goto LABEL_28;
        }
      }
    }
    else
    {
      v9 = v8 & 0xFFFFFFFFFFFFFDFFLL;
      *(_QWORD *)(v4 + 56) = v9;
      if (IsActive && (*((_BYTE *)a2 + 56) & 2) != 0)
        goto LABEL_10;
    }
    v13 = v9 & 0xFFFFFFFFFFFFFFFDLL;
    goto LABEL_11;
  }
  v36 = 207;
  if (a3)
    v36 = 4303;
  v37 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFEF20 | v36;
  *((_QWORD *)this + 7) = v37;
  if (a2)
    v35 = v37 & 0xFFFFFFFFFFFFBFEFLL;
  else
    v35 = v37 | 0x4000;
LABEL_46:
  *(_QWORD *)(v4 + 56) = v35;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimData::IsSubComponent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v1;
  const pxrInternal__aapl__pxrReserved__::TfToken *v2;
  _BOOL8 result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetKind(this, &v6);
  result = pxrInternal__aapl__pxrReserved__::KindRegistry::IsSubComponent((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v6, v1, v2);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPathOrInPrototype(*this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdStage **this)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(*this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::_ComposePrimChildNames(pxrInternal__aapl__pxrReserved__::Usd_PrimData *a1, uint64_t **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t *SourcePrimIndex;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  sub_20C2205D4((uint64_t)&v8, 0, 0.0, 0.5);
  SourcePrimIndex = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(a1, v4, v5);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimChildNames(SourcePrimIndex, a2, &v8);
  v10 = (void **)&v9;
  sub_20C2207E4(&v10);
  return 1;
}

void sub_20C3BC370(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1 + 8;
  sub_20C2207E4((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_DescribePrimData(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  char *v8;
  _BOOL4 v9;
  uint64_t v10;
  int IsRootPrimPath;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__ *PrototypeForInstance;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  const char *Text;
  const char *v21;
  char *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  const char *v27;
  const char *v28;
  char *v29;
  const std::string::value_type *p_p;
  std::string::size_type v31;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *SourcePrimIndex;
  uint64_t *Path;
  const char *v34;
  const char *v35;
  char *v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  const char *v39;
  char *v40;
  void **v41;
  const std::string::value_type *v42;
  pxrInternal__aapl__pxrReserved__ *v43;
  int v44;
  void *v46[2];
  char v47;
  void *__p;
  std::string::size_type v49;
  unsigned __int8 v50;
  char *v51;
  char v52;

  if (!this)
  {
    sub_20BDDC0E4(a3, "null prim");
    return;
  }
  v6 = *((_QWORD *)this + 7);
  v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (v9)
  {
    LODWORD(v10) = pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(a2, v7);
    if ((*((_QWORD *)this + 7) & 0x1000) != 0)
    {
LABEL_4:
      IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__ *)((char *)this + 16));
      goto LABEL_8;
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 7);
    v10 = (v12 >> 12) & 1;
    if ((v12 & 0x1000) != 0)
      goto LABEL_4;
  }
  IsRootPrimPath = 0;
LABEL_8:
  v44 = IsRootPrimPath;
  if ((v6 & 0x100) != 0)
  {
    if (*(_QWORD *)this)
    {
      PrototypeForInstance = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, this);
      v43 = PrototypeForInstance;
      if ((v6 & 0x800) != 0)
      {
LABEL_11:
        v14 = "expired ";
        goto LABEL_16;
      }
    }
    else
    {
      PrototypeForInstance = 0;
      v43 = 0;
      if ((v6 & 0x800) != 0)
        goto LABEL_11;
    }
  }
  else
  {
    v43 = 0;
    PrototypeForInstance = this;
    if ((v6 & 0x800) != 0)
      goto LABEL_11;
  }
  if ((*((_BYTE *)this + 56) & 1) != 0)
    v14 = "";
  else
    v14 = "inactive ";
LABEL_16:
  v15 = **((_QWORD **)this + 3);
  if (v15)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(const char **)v17;
    }
    else
    {
      v17 = "";
    }
    v18 = (const char *)&v51;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' ", (const char *)v7, v8, v17);
    if (v52 < 0)
      v18 = v51;
  }
  else
  {
    v18 = "";
  }
  if (v9)
    v19 = a2;
  else
    v19 = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 16);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v19);
  v23 = "in prototype ";
  if (!(_DWORD)v10)
    v23 = "";
  v24 = "instance proxy ";
  if (!v9)
    v24 = "";
  if ((v6 & 0x100) != 0)
    v24 = "instance ";
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s%sprim %s<%s> ", v21, v22, v14, v18, v24, v23, Text);
  if (v15 && v52 < 0)
  {
    operator delete(v51);
    if ((v6 & 0x800) != 0)
      return;
  }
  else if ((v6 & 0x800) != 0)
  {
    return;
  }
  if ((v9 | (v6 >> 8) & 1) == 1)
  {
    if ((v6 & 0x100) == 0 || v43)
    {
      v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__ *)((char *)PrototypeForInstance
                                                                                                  + 16));
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"with prototype <%s> ", v28, v29, v27);
      if ((v50 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v50 & 0x80u) == 0)
        v31 = v50;
      else
        v31 = v49;
      std::string::append(a3, p_p, v31);
      if ((char)v50 < 0)
        operator delete(__p);
    }
    else
    {
      std::string::append(a3, "with expired prototype");
    }
  }
  if ((v9 | v44 | v10) == 1)
  {
    SourcePrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(this, v25, v26);
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(SourcePrimIndex);
    v34 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"using prim index <%s> ", v35, v36, v34);
    v37 = (v50 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v38 = (v50 & 0x80u) == 0 ? v50 : v49;
    std::string::append(a3, v37, v38);
    if ((char)v50 < 0)
      operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdDescribe(*(pxrInternal__aapl__pxrReserved__ **)this, v46);
  if (v47 >= 0)
    v41 = v46;
  else
    v41 = (void **)v46[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"on %s", v39, v40, v41);
  if ((v50 & 0x80u) == 0)
    v42 = (const std::string::value_type *)&__p;
  else
    v42 = (const std::string::value_type *)__p;
  std::string::append(a3, v42);
  if ((char)v50 < 0)
    operator delete(__p);
  if (v47 < 0)
    operator delete(v46[0]);
}

void sub_20C3BC700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(a17 + 23) < 0)
    operator delete(*(void **)a17);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const char *v3;
  char *v4;
  std::string *v5;
  uint64_t v7;
  std::string v8;
  __int128 __p;
  char v10;
  __int128 v11;
  uint64_t v12;
  const char *v13;
  char v14;

  *(_QWORD *)&v11 = "usd/primData.cpp";
  *((_QWORD *)&v11 + 1) = "Usd_ThrowExpiredPrimAccessError";
  v12 = 283;
  v13 = "void pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(const Usd_PrimData *)";
  v14 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
  pxrInternal__aapl__pxrReserved__::Usd_DescribePrimData(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v7, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Used %s", v3, v4, v5);
  sub_20C3BC8C8(&v11, 0, &__p);
  if (v10 < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  return sub_20BFD265C(&v7);
}

void sub_20C3BC884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

void sub_20C3BC8C8(__int128 *a1, int a2, __int128 *a3)
{
  _QWORD *v5;
  _QWORD v6[12];

  pxrInternal__aapl__pxrReserved__::TfBaseException::TfBaseException((uint64_t)v6, a3);
  v5 = v6;
  v6[0] = &unk_24C5380A8;
  pxrInternal__aapl__pxrReserved__::TfBaseException::_ThrowImpl(a1, (uint64_t)v6, (uint64_t)&v5, (uint64_t (*)(uint64_t))sub_20C3BC950, a2);
  pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError::~UsdExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError *)v6);
}

void sub_20C3BC93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError::~UsdExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError *)va);
  _Unwind_Resume(a1);
}

void sub_20C3BC950(uint64_t *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x60uLL);
  sub_20C3BC9A0((uint64_t)exception, *a1);
}

void sub_20C3BC98C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3BC9A0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = off_24C51B740;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20BEC5FD4((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  v7 = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)a1 = &unk_24C5380A8;
  return a1;
}

void sub_20C3BCA54(_Unwind_Exception *a1)
{
  std::exception *v1;
  void **v2;
  std::exception_vtbl *v4;

  v4 = (std::exception_vtbl *)*v2;
  if (*v2)
  {
    v1[7].__vftable = v4;
    operator delete(v4);
  }
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(pxrInternal__aapl__pxrReserved__ **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, std::string *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_DescribePrimData(*this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForTypedSchema(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t result;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;

  v7 = a2[1];
  if (v7)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
      v7 = *a2;
    else
      v7 = 0;
  }
  v12 = v7;
  sub_20BFD6E54(&v13, a3);
  sub_20BFD6EA4(&v14, a3 + 1);
  *(_QWORD *)a1 = v12;
  sub_20BFD3EBC((int *)(a1 + 8), &v13);
  sub_20BFD3F10((int *)(a1 + 12), &v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(a1, a4);
  if ((_DWORD)result)
  {
    v12 = 0;
    result = (uint64_t)sub_20C3C068C(a1 + 16, &v12, &v12, (uint64_t *)a1);
    if ((v12 & 7) != 0)
    {
      v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  return result;
}

uint64_t sub_20C3BCBB4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  _QWORD *v6;
  char HasField;
  char v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *Text;
  uint64_t Identifier;
  char *v19;
  uint64_t v20;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  const pxrInternal__aapl__pxrReserved__::TfToken *v27;
  const pxrInternal__aapl__pxrReserved__::TfToken *v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4)
    v4 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40);
  v6 = *(_QWORD **)a1;
  v24 = (uint64_t)&stru_24C51BCF0;
  LOWORD(v25) = 0;
  v22 = (char *)&unk_24C528DB0;
  v23 = (const char *)&v27;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), v5, (uint64_t (***)(_QWORD, uint64_t))&v22);
  if ((_BYTE)v25)
    v8 = 0;
  else
    v8 = HasField;
  if ((v8 & 1) != 0)
  {
    v22 = (char *)a1;
    sub_20BFC9A6C((char **)(a1 + 80), (v28 - v27) >> 3);
    v9 = v27;
    v10 = v28;
    v11 = v27 == v28;
    if (*a2)
    {
      if (v27 != v28)
      {
        do
        {
          v12 = a2[4];
          v13 = *a2;
          if (*a2)
          {
            v14 = 8 * v13;
            v15 = (_QWORD *)a2[4];
            while ((*v15 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
            {
              ++v15;
              v14 -= 8;
              if (!v14)
              {
                v15 = (_QWORD *)(v12 + 8 * v13);
                break;
              }
            }
          }
          else
          {
            v15 = (_QWORD *)a2[4];
          }
          if (v13 == ((uint64_t)v15 - v12) >> 3)
            sub_20C3BD550((uint64_t **)&v22, v9);
          v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
        }
        while (v9 != v10);
      }
    }
    else
    {
      while (!v11)
      {
        sub_20C3BD550((uint64_t **)&v22, v9);
        v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
        v11 = v9 == v10;
      }
    }
    goto LABEL_23;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)) & 1) != 0)
  {
LABEL_23:
    v16 = 1;
    goto LABEL_28;
  }
  v22 = "usd/primDefinition.cpp";
  v23 = "_MapSchematicsPropertyPaths";
  v24 = 200;
  v25 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(const VtTokenArray &)";
  v26 = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1);
  if (*(char *)(Identifier + 23) >= 0)
    v20 = Identifier;
  else
    v20 = *(_QWORD *)Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"No prim spec exists at path '%s' in schematics layer %s.", v19, Text, v20);
  v16 = 0;
LABEL_28:
  v22 = (char *)&v27;
  sub_20BEEB2B8((void ***)&v22);
  return v16;
}

void sub_20C3BCDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = &a17;
  sub_20BEEB2B8((void ***)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForAPISchema(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v16 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v16 = (uint64_t)v10;
  }
  sub_20C106430((_QWORD *)(a1 + 56), &v16, v17, 1uLL);
  if ((v16 & 7) != 0)
  {
    v12 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = a3[1];
  if (v14)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a3 + 1) + 14))
      v14 = *a3;
    else
      v14 = 0;
  }
  v16 = v14;
  sub_20BFD6E54(v17, a4);
  sub_20BFD6EA4((_DWORD *)v17 + 1, a4 + 1);
  *(_QWORD *)a1 = v16;
  sub_20BFD3EBC((int *)(a1 + 8), (int *)v17);
  sub_20BFD3F10((int *)(a1 + 12), (int *)v17 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v17 + 1);
  sub_20BFD265C(v17);
  return pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(a1, a5);
}

void sub_20C3BCF58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaPropertySpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(a3, (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4));
  *a3 = 0;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaAttributeSpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath(a3, (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4));
  *a3 = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaRelationshipSpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)this + 2, a2);
  if (result)
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRelationshipAtPath((pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4));
  *a3 = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition@<X0>(_QWORD *this@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  if (*a2)
  {
    this = sub_20BF2B2B4(this + 2, a2);
    v5 = (unsigned int *)(this + 3);
    if (!this)
      v5 = 0;
    v6 = *a2;
    *a3 = *a2;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *a3 = v7;
    }
    a3[1] = v5;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetAttributeDefinition@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  unsigned int *v5;
  unsigned int *v6[2];

  result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, v6);
  v5 = v6[1];
  *(unsigned int **)a3 = v6[0];
  *(_QWORD *)(a3 + 8) = v5;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetRelationshipDefinition@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  unsigned int *v5;
  unsigned int *v6[2];

  result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, v6);
  v5 = v6[1];
  *(unsigned int **)a3 = v6[0];
  *(_QWORD *)(a3 + 8) = v5;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSpecType(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, unsigned int **a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v3;
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v7;

  LODWORD(result) = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, (unsigned int **)&v6);
  v3 = v7;
  if (v7)
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 1));
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if (v3)
    return result;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfLayer ***this)
{
  return pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this[1] + 1));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = this;
  return pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C246BA8(*v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (uint64_t (**)(_QWORD, uint64_t))a2);
}

void sub_20C3BD284(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListPropertyMetadataFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, (unsigned int **)&v8);
  v5 = v9;
  if (v9)
    result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields((pxrInternal__aapl__pxrReserved__::SdfLayer ****)&v8, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry **)a3);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (!v5)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer ****this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry **a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v5;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *i;
  unsigned int *v7;
  unsigned int v8;

  pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(*this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this[1] + 1), a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    while (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(v4, v3))
    {
      v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v4 + 8);
      if (v4 == v5)
      {
        v4 = v5;
        return sub_20C117D14((uint64_t)a2, v4, a2[1]);
      }
    }
    if (v4 != v5)
    {
      for (i = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v4 + 8);
            i != v5;
            i = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)i + 8))
      {
        if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(i, v3))
        {
          if (i != v4)
          {
            if ((*(_QWORD *)v4 & 7) != 0)
            {
              v7 = (unsigned int *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              do
                v8 = __ldxr(v7);
              while (__stlxr(v8 - 2, v7));
            }
            *(_QWORD *)v4 = *(_QWORD *)i;
            *(_QWORD *)i = 0;
          }
          v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v4 + 8);
        }
      }
    }
  }
  return sub_20C117D14((uint64_t)a2, v4, a2[1]);
}

void sub_20C3BD404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  result = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, (unsigned int **)&v8);
  v5 = v9;
  if (v9)
    result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&v8, (uint64_t)a3);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if (!v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer ***v6[2];

  v6[0] = 0;
  result = sub_20BF2B2B4((_QWORD *)this + 2, v6);
  if (((uint64_t)v6[0] & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v6[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if (result)
  {
    v6[0] = 0;
    v6[1] = (pxrInternal__aapl__pxrReserved__::SdfLayer ***)(result + 3);
    return pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields(v6, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry **)a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

_DWORD *sub_20C3BD550(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  uint64_t v14;
  int v15;
  int v16;

  v3 = *a1;
  v4 = (uint64_t)(*a1 + 2);
  v14 = **a1;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), a2, &v15);
  v5 = sub_20C3BFF5C(v4, a2, (uint64_t *)a2, &v14);
  if (v6)
  {
    v7 = v5 + 2;
    v8 = (uint64_t *)v3[11];
    if ((unint64_t)v8 >= v3[12])
    {
      v12 = sub_20BFCA068((char **)v3 + 10, v7);
    }
    else
    {
      v9 = *v7;
      *v8 = *v7;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      v12 = (char *)(v8 + 1);
    }
    v3[11] = (uint64_t)v12;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C3BD62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C3BCBB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a2, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v5;
  BOOL v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v7;
  _BOOL8 v8;
  const char *Text;
  uint64_t Identifier;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];
  char *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  char v60;

  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
  if (v5)
    v6 = *((_QWORD *)a2 + 1) == 0;
  else
    v6 = 1;
  if (v6)
  {
    v56 = "usd/primDefinition.cpp";
    v57 = "_PropertyTypesMatch";
    v58 = 250;
    v59 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)";
    v60 = 0;
    v8 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v56, "strongProp && weakProp", 0) & 1) == 0)
      return v8;
    v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
    if (!v5)
      goto LABEL_18;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 1)) == 8)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)a2 + 1);
    if (v7
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 1)) == 8)
    {
      return 1;
    }
    else
    {
      v56 = "usd/primDefinition.cpp";
      v57 = "_PropertyTypesMatch";
      v58 = 263;
      v59 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)";
      v60 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((_QWORD *)this + 1) + 8));
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)this
                                                                              + 1));
      if (*(char *)(Identifier + 23) >= 0)
        v11 = Identifier;
      else
        v11 = *(_QWORD *)Identifier;
      v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((_QWORD *)a2 + 1) + 8));
      v13 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)a2
                                                                       + 1));
      if (*(char *)(v13 + 23) >= 0)
        v15 = v13;
      else
        v15 = *(_QWORD *)v13;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Cannot compose schema specs: Schema relationship spec at path '%s' in layer '%s' is a different spec type than schema attribute spec at path '%s' in layer '%s'.", v14, Text, v11, v12, v15);
      return 0;
    }
  }
  else
  {
LABEL_18:
    v16 = *(_QWORD *)this;
    v55[0] = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
      {
        v55[0] = v16 & 0xFFFFFFFFFFFFFFF8;
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
    v55[1] = v19;
    if (v19
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 1)) == 1|| (v56 = "usd/primDefinition.cpp", v57 = "_PropertyTypesMatch", v58 = 270, v59 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)", v60 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v56, "strongAttr", 0) & 1) != 0))
    {
      v20 = *(_QWORD *)a2;
      v54[0] = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 2, v21));
        if ((v22 & 1) == 0)
        {
          v54[0] = v20 & 0xFFFFFFFFFFFFFFF8;
          v20 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)a2 + 1);
      v54[1] = v23;
      if (v23
        && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 1)) == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)v55, (uint64_t (**)(_QWORD, uint64_t))&v53);
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)v54, (uint64_t (**)(_QWORD, uint64_t))&v52);
        v24 = v52;
        v8 = (v52 & 0xFFFFFFFFFFFFFFF8) == (v53 & 0xFFFFFFFFFFFFFFF8);
        if ((v52 & 0xFFFFFFFFFFFFFFF8) != (v53 & 0xFFFFFFFFFFFFFFF8))
        {
          v56 = "usd/primDefinition.cpp";
          v57 = "_PropertyTypesMatch";
          v58 = 299;
          v59 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, c"
                "onst Property &)";
          v60 = 0;
          v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((_QWORD *)this + 1) + 8));
          v26 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)this
                                                                           + 1));
          if (*(char *)(v26 + 23) >= 0)
            v27 = v26;
          else
            v27 = *(_QWORD *)v26;
          v28 = v53 & 0xFFFFFFFFFFFFFFF8;
          if ((v53 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v29 = (const char *)(v28 + 16);
            if (*(char *)(v28 + 39) < 0)
              v29 = *(const char **)v29;
          }
          else
          {
            v29 = "";
          }
          v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((_QWORD *)a2 + 1) + 8));
          v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)a2
                                                                           + 1));
          if (*(char *)(v38 + 23) >= 0)
            v40 = v38;
          else
            v40 = *(_QWORD *)v38;
          v41 = v52 & 0xFFFFFFFFFFFFFFF8;
          if ((v52 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v42 = (const char *)(v41 + 16);
            if (*(char *)(v41 + 39) < 0)
              v42 = *(const char **)v42;
          }
          else
          {
            v42 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Cannot compose schema attribute specs: Mismatched type names.Schema attribute spec at path '%s' in layer '%s' has type name '%s' while schema attribute spec at path '%s' in layer '%s' has type name '%s'.", v39, v25, v27, v29, v37, v40, v42);
          v24 = v52;
        }
        if ((v24 & 7) != 0)
        {
          v43 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        if ((v53 & 7) != 0)
        {
          v45 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        v20 = v54[0];
      }
      else
      {
        v56 = "usd/primDefinition.cpp";
        v57 = "_PropertyTypesMatch";
        v58 = 282;
        v59 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)";
        v60 = 0;
        v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((_QWORD *)this + 1) + 8));
        v31 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)this
                                                                         + 1));
        if (*(char *)(v31 + 23) >= 0)
          v32 = v31;
        else
          v32 = *(_QWORD *)v31;
        v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((_QWORD *)a2 + 1) + 8));
        v34 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)a2
                                                                         + 1));
        if (*(char *)(v34 + 23) >= 0)
          v36 = v34;
        else
          v36 = *(_QWORD *)v34;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Cannot compose schema specs: Schema attribute spec at path '%s' in layer '%s' is a different spec type than schema relationship spec at path '%s' in layer '%s'.", v35, v30, v32, v33, v36);
        v8 = 0;
      }
      if ((v20 & 7) != 0)
      {
        v47 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      v16 = v55[0];
    }
    else
    {
      v8 = 0;
    }
    if ((v16 & 7) != 0)
    {
      v49 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
  }
  return v8;
}

void sub_20C3BDAC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsRelationship(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v1;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
  return v1
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 1)) == 8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a2;
  *result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  result[1] = a2[1];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *this@<X0>, uint64_t (**a2)(_QWORD, uint64_t)@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  *a2 = 0;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C3C0CB8(*v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDef(char **this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a2)
{
  uint64_t result;
  uint64_t *i;

  result = sub_20BFC9A6C(this + 10, ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3) + ((this[11] - this[10]) >> 3));
  for (i = (uint64_t *)*((_QWORD *)a2 + 4); i; i = (uint64_t *)*i)
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_AddOrComposeProperty((uint64_t)this, i + 2, (unsigned int *)i + 6);
  return result;
}

unsigned int *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_AddOrComposeProperty(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  unsigned int *result;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int *v25;

  result = (unsigned int *)sub_20C3C0970(a1 + 16, a2, a2, (uint64_t)a3);
  if (v7)
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = *(uint64_t **)(a1 + 88);
      if ((unint64_t)v9 >= *(_QWORD *)(a1 + 96))
      {
        result = (unsigned int *)sub_20BFCA068((char **)(a1 + 80), a2);
      }
      else
      {
        *v9 = v8;
        if ((v8 & 7) != 0)
        {
          v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 2, v10));
          if ((v11 & 1) == 0)
            *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        result = (unsigned int *)(v9 + 1);
      }
      *(_QWORD *)(a1 + 88) = result;
    }
  }
  else
  {
    v12 = result;
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_CreateComposedPropertyIfNeeded(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, result + 6, a3, &v25);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v25) & 1) == 0)
    {
      v14 = (uint64_t **)sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v25);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v20);
      v15 = v21;
      if (v21)
      {
        if (*(_BYTE *)(sub_20BEB47BC(&v21) + 14))
          v15 = v20;
        else
          v15 = 0;
      }
      v22 = v15;
      v16 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v25);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v23);
      *((_QWORD *)v12 + 3) = v22;
      sub_20BFD3EBC((int *)v12 + 8, &v23);
      sub_20BFD3F10((int *)v12 + 9, &v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
      sub_20BFD265C(&v23);
      v17 = v21;
      if (v21)
      {
        v13 = (unsigned int *)(v21 + 8);
        do
        {
          v18 = __ldxr(v13);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v13));
        if (!v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    return (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
  }
  return result;
}

void sub_20C3BDE3C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfToken *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDefInstance(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  unsigned int *i;
  uint64_t *EmptyString;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC9A6C((char **)(a1 + 80), ((uint64_t)(a2[11] - a2[10]) >> 3)+ ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
  for (i = (unsigned int *)a2[4]; i; i = *(unsigned int **)i)
  {
    if ((*((_QWORD *)i + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)i + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance((uint64_t)EmptyString, a3, (uint64_t)&v11);
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_AddOrComposeProperty(a1, &v11, i + 6);
    if ((v11 & 7) != 0)
    {
      v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_CreateComposedPropertyIfNeeded(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, unsigned int *a3@<X2>, unsigned int *a4@<X3>, unsigned int **a5@<X8>)
{
  unsigned __int8 v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *i;
  void *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28[2];
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  v29 = 0;
  v30 = a3;
  v28[0] = 0;
  v28[1] = a4;
  if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)&v29, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v28, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)a3))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_254988898);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254988898))
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v16 = *((_QWORD *)v15 + 11);
      v29 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 2, v17));
        if ((v18 & 1) == 0)
          v29 = (uint64_t)v17;
      }
      v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19)
        v19 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v20 = (unsigned int *)*((_QWORD *)v19 + 22);
      v30 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 2, v21));
        if ((v22 & 1) == 0)
          v30 = v21;
      }
      sub_20C374970(qword_254988880, &v29, 2uLL);
      v23 = &v31;
      do
      {
        v25 = *--v23;
        v24 = v25;
        if ((v25 & 7) != 0)
        {
          v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
      }
      while (v23 != &v29);
      __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_254988880, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988898);
    }
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)qword_254988880[0];
    for (i = (const pxrInternal__aapl__pxrReserved__::TfToken *)unk_254988888;
          v11 != i;
          v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v11 + 8))
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 2), v11, 0) & 1) == 0)
      {
        v30 = 0;
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 2), v11, (pxrInternal__aapl__pxrReserved__::VtValue *)&v29) & 1) != 0)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5))
          {
            pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_FindOrCreatePropertySpecForComposition(a1, a2, a3, v28);
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a5, v28);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v28);
          }
          v14 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5);
          pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v14, v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
        }
        sub_20BF4C2D8((uint64_t)&v29);
      }
    }
  }
}

void sub_20C3BE1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v12;
  unsigned int *v14;
  unsigned int v15;
  void *v16;

  if ((a12 & 7) != 0)
  {
    v14 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  __cxa_guard_abort(&qword_254988898);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, v12);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_FindOrCreatePropertySpecForComposition@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X2>, unsigned int **a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock *result;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  void *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *SpecType;
  uint64_t v23;
  unint64_t v24;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  uint64_t *v27;
  uint64_t Identifier;
  int v29;
  const char *v30;
  const char *Text;
  const char *v32;
  void *v33;
  int Variability;
  void *v35;
  pxrInternal__aapl__pxrReserved__::SdfSpec *p_p;
  unsigned __int8 v37;
  const pxrInternal__aapl__pxrReserved__::TfToken *i;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v40;
  std::string __p;
  const char *v42;
  char v43;
  uint64_t TypeName;
  unsigned int *v45;
  _BYTE v46[8];
  pxrInternal__aapl__pxrReserved__::SdfLayer ***v47;
  _QWORD *v48[2];
  unsigned int *v49[3];

  v49[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254988878);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988878))
  {
    sub_20BDDC0E4(&__p, "/ComposedProperties");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&unk_254988870, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))sub_20BFD1A18, &unk_254988870, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988878);
  }
  *a4 = 0;
  v10 = *(_QWORD *)(a1 + 104);
  v9 = (uint64_t *)(a1 + 104);
  if (!v10)
  {
    sub_20BDDC0E4(&__p, "schema-composed-properties");
    v48[0] = 0;
    v48[1] = 0;
    v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer ***)v48;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v47, (uint64_t *)v49);
    v14 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v9;
    *v9 = (uint64_t)v49[0];
    v49[0] = 0;
    sub_20BF1D8F4((int)v9, v14);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v49);
    sub_20BDE9D48((uint64_t)&v47, v48[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v46);
    v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&unk_254988870, &v45);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45))
    {
      sub_20C1034E8((uint64_t *)&v47, v9);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&unk_254988870);
      memset(&__p, 0, sizeof(__p));
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((uint64_t *)&v47, 0, v49);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v45, v49);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v49);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = v48[0];
      if (v48[0])
      {
        v18 = (unsigned int *)(v48[0] + 1);
        do
        {
          v19 = __ldxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          (*(void (**)(_QWORD *))(*v17 + 8))(v17);
      }
    }
    v47 = 0;
    v48[0] = a3;
    v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1);
    SpecType = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1));
    if ((_DWORD)SpecType == 1)
    {
      v23 = *(_QWORD *)a2;
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
      v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (v24)
        EmptyString = (uint64_t *)(v24 + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(SpecType);
      TypeName = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)&__p);
      Variability = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&__p);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45, (uint64_t)EmptyString, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName, Variability, 0, v49);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a4, v49);
      p_p = (pxrInternal__aapl__pxrReserved__::SdfSpec *)v49;
    }
    else
    {
      v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1));
      if ((_DWORD)v26 != 8)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/primDefinition.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_FindOrCreatePropertySpecForComposition";
        __p.__r_.__value_.__r.__words[2] = 439;
        v42 = "SdfPropertySpecHandle pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_FindOrCreatePropertySpecForCom"
              "position(const TfToken &, const _LayerAndPath &)";
        v43 = 0;
        Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3);
        v29 = *(char *)(Identifier + 23);
        v30 = *(const char **)Identifier;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v21);
        if (v29 >= 0)
          v32 = (const char *)Identifier;
        else
          v32 = v30;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create a property spec from spec at layer '%s' and path '%s'. The spec type is not an attribute or relationship.", v32, Text);
        goto LABEL_33;
      }
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        v27 = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
      v37 = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&v47) != 0;
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45, (uint64_t)v27, v37, 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a4, (unsigned int **)&__p);
      p_p = (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v35, p_p);
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields(&v47, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry **)&__p);
    size = __p.__r_.__value_.__l.__size_;
    for (i = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p.__r_.__value_.__r.__words[0];
          i != (const pxrInternal__aapl__pxrReserved__::TfToken *)size;
          i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
    {
      v49[1] = 0;
      pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1), i, (pxrInternal__aapl__pxrReserved__::VtValue *)v49);
      v40 = sub_20BFE6874((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4);
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v40, i, (const pxrInternal__aapl__pxrReserved__::VtValue *)v49);
      sub_20BF4C2D8((uint64_t)v49);
    }
    v49[0] = (unsigned int *)&__p;
    sub_20BEEB2B8((void ***)v49);
LABEL_33:
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v33, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v45);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v46);
  }
  v11 = sub_20C0EEAF8(v9);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&unk_254988870, a2, (int *)&v47);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfLayer *)v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v47);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a4, (unsigned int **)&__p);
  LOBYTE(v11) = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v12, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  result = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)sub_20BFD265C(&v47);
  if ((v11 & 1) != 0)
    goto LABEL_7;
  return result;
}

void sub_20C3BE6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254988878);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v1;

  v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((_QWORD *)this + 1);
  return v1
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 1)) == 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *this)
{
  unint64_t ***Instance;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;

  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken(this, (uint64_t (**)(_QWORD, uint64_t))&v6);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
  if ((v6 & 7) != 0)
  {
    v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this)
{
  _QWORD **v1;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  _QWORD *v4;
  unsigned int v6;
  uint64_t (**v7[3])(_QWORD, uint64_t);
  __int16 v8;

  v6 = 0;
  v1 = (_QWORD **)*((_QWORD *)this + 1);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 464);
  v4 = *v1;
  v7[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C5269D8;
  v8 = 0;
  v7[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E3D0;
  v7[1] = (uint64_t (**)(_QWORD, uint64_t))&v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 1), v3, v7);
  return v6;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeOverAndReplaceExistingProperty(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfLayer **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  _QWORD *result;
  pxrInternal__aapl__pxrReserved__::SdfLayer ***v8;
  int *v9;
  _QWORD *v10;
  const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v13;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v15;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v22;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v23;
  pxrInternal__aapl__pxrReserved__::SdfLayer ***v24[2];
  _QWORD v25[2];
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  int v27;
  int v28;
  void **v29[3];

  v29[2] = *(void ***)MEMORY[0x24BDAC8D0];
  result = sub_20BF2B388((_QWORD *)(a1 + 16), a2);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer ***)(result + 3);
  if (result)
    v9 = (int *)(result + 3);
  else
    v9 = 0;
  if (result)
  {
    v10 = result;
    v26 = *a3;
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a4, a2, &v27);
    v25[0] = 0;
    v25[1] = &v26;
    v24[0] = 0;
    v24[1] = v8;
    if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)v25, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v24, v11))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields(v24, &v22);
      v12 = v22;
      v13 = v23;
      if (v22 != v23)
      {
        v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4);
        do
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, v12, 0) & 1) == 0)
          {
            v29[1] = 0;
            if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)v9, v14, v12, (pxrInternal__aapl__pxrReserved__::VtValue *)v29))
            {
              v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)a3);
              pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)v29);
            }
            sub_20BF4C2D8((uint64_t)v29);
          }
          v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v12 + 8);
        }
        while (v12 != v13);
      }
      v29[0] = (void **)&v22;
      sub_20BEEB2B8(v29);
      LODWORD(v22) = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v24);
      if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v25) != (_DWORD)v22)
      {
        v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)a3);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v17)
          v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C0A9EAC(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 464), (int *)&v22);
      }
      *(_QWORD *)v9 = v26;
      sub_20BFD3EBC(v9 + 2, &v27);
      sub_20BFD3F10(v9 + 3, &v28);
      if (((uint64_t)v24[0] & 7) != 0)
      {
        v18 = (unsigned int *)((unint64_t)v24[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    if ((v25[0] & 7) != 0)
    {
      v20 = (unsigned int *)(v25[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    return sub_20BFD265C(&v27);
  }
  return result;
}

void sub_20C3BEBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  va_list va;

  va_start(va, a8);
  if ((a5 & 7) != 0)
  {
    v9 = (unsigned int *)(a5 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((a7 & 7) != 0)
  {
    v11 = (unsigned int *)(a7 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  sub_20C3BCBB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  _QWORD *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  uint64_t *v29;
  uint64_t result;
  int64x2_t v31;
  char *v32;
  uint64_t *v33[2];
  uint64_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  char *v37;
  char **v38;
  uint64_t v39;

  v33[0] = a1;
  v33[1] = &v34;
  v34 = a4;
  if (*a3)
  {
    v31 = 0uLL;
    v32 = 0;
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC9A6C((char **)&v31, (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    v8 = *(_QWORD **)(a2 + 56);
    for (i = *(_QWORD **)(a2 + 64); v8 != i; ++v8)
    {
      if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v10 = (*v8 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        v10 = (uint64_t)EmptyString;
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
        v11 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v10, (uint64_t)v11, (uint64_t)&v39);
      v12 = v31.i64[1];
      if (v31.i64[1] >= (unint64_t)v32)
      {
        v15 = (v31.i64[1] - v31.i64[0]) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_20BDDF694();
        v16 = (uint64_t)&v32[-v31.i64[0]] >> 2;
        if (v16 <= v15 + 1)
          v16 = v15 + 1;
        if ((unint64_t)&v32[-v31.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        v38 = &v32;
        if (v17)
          v18 = (char *)sub_20BDDF6A8((uint64_t)&v32, v17);
        else
          v18 = 0;
        v19 = &v18[8 * v15];
        v20 = &v18[8 * v17];
        v37 = v20;
        *(_QWORD *)v19 = v39;
        v14 = v19 + 8;
        v39 = 0;
        v36.i64[1] = (uint64_t)(v19 + 8);
        v21 = (_QWORD *)v31.i64[1];
        v22 = (_QWORD *)v31.i64[0];
        if (v31.i64[1] == v31.i64[0])
        {
          v24 = vdupq_n_s64(v31.u64[1]);
        }
        else
        {
          do
          {
            v23 = *--v21;
            *((_QWORD *)v19 - 1) = v23;
            v19 -= 8;
            *v21 = 0;
          }
          while (v21 != v22);
          v24 = v31;
          v14 = (_QWORD *)v36.i64[1];
          v20 = v37;
        }
        v31.i64[0] = (uint64_t)v19;
        v31.i64[1] = (uint64_t)v14;
        v36 = v24;
        v25 = v32;
        v32 = v20;
        v37 = v25;
        v35 = (int64x2_t *)v24.i64[0];
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1EE98((uint64_t)&v35);
        v13 = v39;
      }
      else
      {
        v13 = 0;
        *(_QWORD *)v31.i64[1] = v39;
        v14 = (_QWORD *)(v12 + 8);
        v39 = 0;
      }
      v31.i64[1] = (uint64_t)v14;
      if ((v13 & 7) != 0)
      {
        v26 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
    }
    v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C3BEF18(v33, (unsigned int ***)&v31);
    if (!(_DWORD)v28)
    {
      v35 = &v31;
      sub_20BEEB2B8((void ***)&v35);
      return 0;
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      v29 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDefInstance((uint64_t)a1, (_QWORD *)a2, (uint64_t)v29);
    v35 = &v31;
    sub_20BEEB2B8((void ***)&v35);
  }
  else
  {
    result = sub_20C3BEF18(v33, (unsigned int ***)(a2 + 56));
    if (!(_DWORD)result)
      return result;
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDef((char **)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)a2);
  }
  return 1;
}

void sub_20C3BEECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a9;
  sub_20BEEB2B8(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3BEF18(uint64_t **a1, unsigned int ***a2)
{
  uint64_t *v4;
  char **v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  _QWORD *SchemaInfo;
  _DWORD *v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  char *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  const char *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  unint64_t v65;
  void **v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  unint64_t *v70;

  v4 = *a1;
  v5 = (char **)(*a1 + 7);
  v6 = (*a1)[8] - (_QWORD)*v5;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  sub_20BFC9A6C(v5, a2[1] - *a2 + (v6 >> 3));
  v7 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
LABEL_36:
    v37 = 1;
    goto LABEL_37;
  }
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v7, (unsigned int **)&v61);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v61, v9);
    sub_20C157C64(&v59, SchemaInfo + 2, &v62);
    v11 = SchemaInfo + 3;
    v12 = sub_20C3C0284(*a1[1], &v59, &v59, (_DWORD *)SchemaInfo + 6);
    if (v13)
    {
      v14 = (_QWORD *)v4[8];
      if ((unint64_t)v14 >= v4[9])
      {
        v18 = sub_20BFCA068(v5, (uint64_t *)v7);
      }
      else
      {
        v15 = *v7;
        *v14 = *v7;
        if ((v15 & 7) != 0)
        {
          v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 2, v16));
          if ((v17 & 1) == 0)
            *v14 &= 0xFFFFFFFFFFFFFFF8;
        }
        v18 = (char *)(v14 + 1);
      }
      v4[8] = (uint64_t)v18;
      v20 = v64;
      if ((unint64_t)v64 >= v65)
      {
        v22 = ((char *)v64 - v63) >> 4;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          sub_20BDDF694();
        v24 = v65 - (_QWORD)v63;
        if ((uint64_t)(v65 - (_QWORD)v63) >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        v70 = &v65;
        v26 = (void **)sub_20BDEA2F0((uint64_t)&v65, v25);
        v27 = (char *)&v26[2 * v22];
        v66 = v26;
        v67 = v27;
        v69 = (const char *)&v26[2 * v28];
        *(_QWORD *)v27 = v59;
        v59 = 0;
        *((_QWORD *)v27 + 1) = v60;
        v60 = 0;
        v68 = (uint64_t)(v27 + 16);
        sub_20C1F3728((uint64_t *)&v63, &v66);
        v21 = v64;
        sub_20C1F38C8((uint64_t)&v66);
      }
      else
      {
        *v64 = v59;
        v20[1] = v60;
        v59 = 0;
        v60 = 0;
        v21 = v20 + 2;
      }
      v64 = v21;
      goto LABEL_23;
    }
    v19 = v12;
    if (*((_DWORD *)v12 + 8) != *v11)
      break;
LABEL_23:
    if ((v60 & 7) != 0)
    {
      v29 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if ((v59 & 7) != 0)
    {
      v31 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    if ((v62 & 7) != 0)
    {
      v33 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if ((v61 & 7) != 0)
    {
      v35 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
    if (++v7 == v8)
      goto LABEL_36;
  }
  sub_20C0E5D00((uint64_t)v5, v6 >> 3);
  v40 = v63;
  v41 = (char *)v64;
  while (v40 != v41)
  {
    sub_20C3C0518((_QWORD *)*a1[1], v40);
    v40 += 16;
  }
  v42 = (unint64_t)**a2 & 0xFFFFFFFFFFFFFFF8;
  v43 = (unint64_t)*v7 & 0xFFFFFFFFFFFFFFF8;
  if (v42 == v43)
  {
    v66 = (void **)"usd/primDefinition.cpp";
    v67 = "operator()";
    v68 = 613;
    v69 = "auto pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(const UsdPrimDefinit"
          "ion &, const TfToken &, _FamilyAndInstanceToVersionMap *)::(anonymous class)::operator()(const TfTokenVector &) const";
    LOBYTE(v70) = 0;
    if (v43)
    {
      v45 = (const char *)(v42 + 16);
      if (*(char *)(v42 + 39) < 0)
        v45 = *(const char **)v45;
    }
    else
    {
      v45 = "";
    }
    v49 = v19[2] & 0xFFFFFFFFFFFFFFF8;
    if (v49)
    {
      v50 = (const char *)(v49 + 16);
      if (*(char *)(v49 + 39) < 0)
        v50 = *(const char **)v50;
    }
    else
    {
      v50 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v66, (pxrInternal__aapl__pxrReserved__ *)"Failure composing the API schema definition for '%s' into another prim definition. Adding this schema would cause a version conflict with an already composed in API schema definition with family '%s' and version %u.", v39, v45, v50, *((unsigned int *)v19 + 8));
  }
  else
  {
    v66 = (void **)"usd/primDefinition.cpp";
    v67 = "operator()";
    v68 = 624;
    v69 = "auto pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(const UsdPrimDefinit"
          "ion &, const TfToken &, _FamilyAndInstanceToVersionMap *)::(anonymous class)::operator()(const TfTokenVector &) const";
    LOBYTE(v70) = 0;
    if (v42)
    {
      v44 = (const char *)(v42 + 16);
      if (*(char *)(v42 + 39) < 0)
        v44 = *(const char **)v44;
    }
    else
    {
      v44 = "";
    }
    if (v43)
    {
      v46 = (const char *)(v43 + 16);
      if (*(char *)(v43 + 39) < 0)
        v46 = *(const char **)v46;
    }
    else
    {
      v46 = "";
    }
    v47 = v19[2] & 0xFFFFFFFFFFFFFFF8;
    if (v47)
    {
      v48 = (const char *)(v47 + 16);
      if (*(char *)(v47 + 39) < 0)
        v48 = *(const char **)v48;
    }
    else
    {
      v48 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v66, (pxrInternal__aapl__pxrReserved__ *)"Failure composing the API schema definition for '%s' into another prim definition. Adding API schema '%s', which is built in to this schema definition would cause a version conflict with an already composed in API schema definition with family '%s' and version %u.", v39, v44, v46, v48, *((unsigned int *)v19 + 8));
  }
  if ((v60 & 7) != 0)
  {
    v51 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if ((v59 & 7) != 0)
  {
    v53 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  if ((v62 & 7) != 0)
  {
    v55 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  if ((v61 & 7) != 0)
  {
    v57 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v37 = 0;
LABEL_37:
  v66 = (void **)&v63;
  sub_20C1F3690(&v66);
  return v37;
}

void sub_20C3BF3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, char a19)
{
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  if ((a16 & 7) != 0)
  {
    v20 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((a15 & 7) != 0)
  {
    v22 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if ((a18 & 7) != 0)
  {
    v24 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((a17 & 7) != 0)
  {
    v26 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  a17 = (unint64_t)&a19;
  sub_20C1F3690((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  void *v9;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  uint64_t Identifier;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *i;
  const pxrInternal__aapl__pxrReserved__::TfToken *v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  const pxrInternal__aapl__pxrReserved__::TfToken *v24;
  const pxrInternal__aapl__pxrReserved__::TfToken *j;
  _QWORD *v26;
  uint64_t *v27;
  char v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _UNKNOWN **v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  const pxrInternal__aapl__pxrReserved__::TfToken *k;
  const pxrInternal__aapl__pxrReserved__::TfToken *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v44;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v45;
  __int128 __p;
  uint64_t v48;
  const char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  char v56[8];
  void **v57;
  unsigned int *p_p;
  _UNKNOWN **v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v56);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, a3, &v55);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a2, (uint64_t)a3, &__p);
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v55, (unsigned int **)&__p);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55))
    {
      *(_QWORD *)&__p = "usd/primDefinition.cpp";
      *((_QWORD *)&__p + 1) = "FlattenTo";
      v48 = 690;
      v49 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(const SdfLayerHandle &, const SdfPath &,"
            " SdfSpecifier) const";
      v50 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
      if (*(char *)(Identifier + 23) >= 0)
        v14 = Identifier;
      else
        v14 = *(_QWORD *)Identifier;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to create prim spec at path '%s' in layer '%s'", v13, Text, v14);
      v16 = 0;
      goto LABEL_47;
    }
    v23 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(v23, a4);
  }
  else
  {
    v17 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55);
    __p = 0uLL;
    v48 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetProperties(v17, &__p);
    p_p = (unsigned int *)&__p;
    sub_20BFE69E4((void ***)&p_p);
    v18 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55);
    pxrInternal__aapl__pxrReserved__::SdfSpec::ListInfoKeys(v18, (uint64_t)&__p);
    v21 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((_QWORD *)&__p + 1);
    for (i = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p;
          i != v21;
          i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
    {
      if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(i, v19))
      {
        v22 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearInfo(v22, i);
      }
    }
    p_p = (unsigned int *)&__p;
    sub_20BEEB2B8((void ***)&p_p);
  }
  v24 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 80);
  for (j = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 88);
        v24 != j;
        v24 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v24 + 8))
  {
    v26 = sub_20BF2B2B4((_QWORD *)(a1 + 16), v24);
    if (v26)
      v27 = v26 + 3;
    else
      v27 = 0;
    if (!v26)
    {
      *(_QWORD *)&__p = "usd/primDefinition.cpp";
      *((_QWORD *)&__p + 1) = "FlattenTo";
      v48 = 700;
      v49 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(const SdfLayerHandle &, const SdfPath &,"
            " SdfSpecifier) const";
      v50 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "layerAndPath", 0) & 1) == 0)
        continue;
    }
    sub_20C0E82E8(&p_p, *v27);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, v24, (int *)&__p);
    v28 = pxrInternal__aapl__pxrReserved__::SdfCopySpec((uint64_t *)&p_p, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 1), a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if ((v28 & 1) == 0)
    {
      *(_QWORD *)&__p = "usd/primDefinition.cpp";
      *((_QWORD *)&__p + 1) = "FlattenTo";
      v48 = 710;
      v49 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(const SdfLayerHandle &, const SdfPath &,"
            " SdfSpecifier) const";
      v50 = 0;
      v29 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
      if (v29)
      {
        v30 = (const char *)(v29 + 16);
        if (*(char *)(v29 + 39) < 0)
          v30 = *(const char **)v30;
      }
      else
      {
        v30 = "";
      }
      v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
      v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      v33 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v32);
      if (*(char *)(v33 + 23) >= 0)
        v35 = v33;
      else
        v35 = *(_QWORD *)v33;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to copy prim definition property '%s' to prim spec at path '%s' in layer '%s'.", v34, v30, v31, v35);
    }
    v36 = v59;
    if (v59)
    {
      v37 = (unsigned int *)(v59 + 1);
      do
      {
        v38 = __ldxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
        (*((void (**)(_UNKNOWN **))*v36 + 1))(v36);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)a1, (uint64_t)&__p);
  v41 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((_QWORD *)&__p + 1);
  for (k = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p;
        k != v41;
        k = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)k + 8))
  {
    v59 = 0;
    if (sub_20C3BFACC(a1, k, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
    {
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v42, a3, k, (const pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    }
    sub_20BF4C2D8((uint64_t)&p_p);
  }
  p_p = (unsigned int *)&__p;
  sub_20BEEB2B8((void ***)&p_p);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a2);
  v44 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v44)
    v44 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::CreateExplicit((uint64_t **)(a1 + 56), (uint64_t)&__p);
  v59 = &off_24C526D80;
  sub_20C036F00(&p_p, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v43, a3, v44, (const pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
  sub_20BF4C2D8((uint64_t)&p_p);
  v57 = (void **)&v54;
  sub_20BEEB2B8(&v57);
  v57 = (void **)&v53;
  sub_20BEEB2B8(&v57);
  v57 = (void **)&v52;
  sub_20BEEB2B8(&v57);
  v57 = (void **)&v51;
  sub_20BEEB2B8(&v57);
  v57 = (void **)&v50;
  sub_20BEEB2B8(&v57);
  v57 = (void **)&__p + 1;
  sub_20BEEB2B8(&v57);
  v45 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v55);
  p_p = 0;
  v59 = (_UNKNOWN **)a1;
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&p_p, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetDocumentation(v45, (uint64_t)&__p);
  v15 = SHIBYTE(v48);
  if ((v15 & 0x80000000) != 0)
    operator delete((void *)__p);
  v16 = 1;
LABEL_47:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v55);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v56);
  return v16;
}

void sub_20C3BF998(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v12 - 136));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v12 - 128));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3BFACC(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(a2, a2))
    return 0;
  v9 = 0;
  result = sub_20C3C0C6C(a1, &v9, a2, a3);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdObject *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  sub_20C348EEC((uint64_t)a2, (int *)&v26);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, a3, &v28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_20BFD265C(&v26);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2, v10, &v26);
  v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v26);
  EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v11);
  v13 = v27;
  if (v27)
  {
    v14 = (unsigned int *)(v27 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, &v24);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v24))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(a1, (uint64_t *)EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2, v17, &v26);
    v18 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v26);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, a5);
    v19 = v27;
    if (v27)
    {
      v20 = (unsigned int *)(v27 + 8);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  else
  {
    *(_DWORD *)a5 = 1;
    *(_QWORD *)(a5 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 20));
    *(_QWORD *)(a5 + 24) = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  return sub_20BFD265C(&v28);
}

void sub_20C3BFCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, int a12)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(uint64_t a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;

  sub_20C3AD22C((uint64_t)a2, (uint64_t)&v11);
  v8 = sub_20C398E78(a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v11, v8, a3, a4);
  if ((v15 & 7) != 0)
  {
    v9 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (v12)
    sub_20C35C614(v12);
}

void sub_20C3BFE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(_QWORD *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)a2;
  *this = *(_QWORD *)a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *this &= 0xFFFFFFFFFFFFFFF8;
  }
  this[1] = *((_QWORD *)a2 + 1);
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(_QWORD *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)a2;
  *this = *(_QWORD *)a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *this &= 0xFFFFFFFFFFFFFFF8;
  }
  this[1] = *((_QWORD *)a2 + 1);
  return this;
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)a2;
  *this = *(_QWORD *)a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *this &= 0xFFFFFFFFFFFFFFF8;
  }
  this[1] = *((_QWORD *)a2 + 1);
  return this;
}

_QWORD *sub_20C3BFF5C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C3C01C0(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C3C0240((uint64_t)v22, 0);
  return v11;
}

void sub_20C3C01A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3C0240((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3C01C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x28uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *v10 = 0;
  v10[1] = a2;
  v11 = *a3;
  *a3 = 0;
  v12 = *a4;
  v10[2] = v11;
  v10[3] = v12;
  sub_20BFD38A4((_DWORD *)v10 + 8, (_DWORD *)a4 + 2);
  result = sub_20BFD38DC((_DWORD *)v10 + 9, (_DWORD *)a4 + 3);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3C0240(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C358BF8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C3C0284(uint64_t a1, _QWORD *a2, uint64_t *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v10 = bswap64(0x9E3779B97F4A7C55 * (v9 + ((((v9 + v8) | 1) * (v9 + v8)) >> 1)));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if ((v14[2] & 0xFFFFFFFFFFFFFFF8) == v8 && (v14[3] & 0xFFFFFFFFFFFFFFF8) == v9)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v10;
  sub_20C15A32C(v14 + 2, a3);
  *((_DWORD *)v14 + 8) = *a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v14 = *v24;
LABEL_39:
    *v24 = v14;
    goto LABEL_40;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v23 + 8 * v4) = v16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C3C04FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BFC9F84(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3C0518(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_20C3C054C(a1, a2);
  if (result)
  {
    sub_20C3C0644(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_20C3C054C(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v5 = bswap64(0x9E3779B97F4A7C55 * (v4 + ((((v4 + v3) | 1) * (v4 + v3)) >> 1)));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20C3C0644(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    sub_20BFC9F84((uint64_t)&v6, v3);
  return v2;
}

_QWORD *sub_20C3C068C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C3C08F0(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C3C0240((uint64_t)v22, 0);
  return v11;
}

void sub_20C3C08D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3C0240((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3C08F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x28uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *v10 = 0;
  v10[1] = a2;
  v11 = *a3;
  *a3 = 0;
  v12 = *a4;
  v10[2] = v11;
  v10[3] = v12;
  sub_20BFD6E54((_DWORD *)v10 + 8, (_DWORD *)a4 + 2);
  result = sub_20BFD6EA4((_DWORD *)v10 + 9, (_DWORD *)a4 + 3);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

_QWORD *sub_20C3C0970(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if ((v13[2] & 0xFFFFFFFFFFFFFFF8) == v8)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  sub_20C3C0BF4((uint64_t)(v16 + 2), a3, a4);
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C3C0240((uint64_t)v26, 0);
  return v13;
}

void sub_20C3C0BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3C0240((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3C0BF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a3 + 8));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a3 + 12));
  return a1;
}

_QWORD *sub_20C3C0C6C(uint64_t a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)(a1 + 16), a2);
  if (result)
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4), a3, a4);
  return result;
}

uint64_t sub_20C3C0CB8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BCE0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C5286B0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 v7;
  char v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  char v12;

  v1 = atomic_load((unsigned __int8 *)&qword_2549888A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2549888A8))
  {
    v3 = operator new(0x18uLL);
    sub_20C3C0E00(0, 6u, &v7);
    v11 = v7;
    v12 = v8;
    v4 = sub_20C3C103C((uint64_t)&v11, 1);
    v9 = *(__n128 *)v4;
    v10 = *(_QWORD *)(v4 + 16);
    v11 = v9;
    v12 = v10;
    v5 = sub_20C3C103C((uint64_t)&v11, 0x100000005);
    v6 = *(_OWORD *)v5;
    v3[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)v3 = v6;
    qword_2549888A0 = (uint64_t)v3;
    __cxa_guard_release(&qword_2549888A8);
  }
  return qword_2549888A0;
}

void sub_20C3C0DD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549888A8);
  _Unwind_Resume(a1);
}

__n128 sub_20C3C0E00@<Q0>(unsigned int a1@<W0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 result;
  uint64_t v8;
  __int128 v9;
  char v10;

  v4 = a2;
  v9 = 0uLL;
  v10 = 0;
  v5 = sub_20C3C103C((uint64_t)&v9, a1);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_OWORD *)v5;
  v10 = v8;
  v6 = (__n128 *)sub_20C3C103C((uint64_t)&v9, v4);
  result = *v6;
  *a3 = *v6;
  a3[1].n128_u64[0] = v6[1].n128_u64[0];
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2549888C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2549888C8))
  {
    qword_2549888B0 = 0;
    *(_QWORD *)algn_2549888B8 = 0;
    byte_2549888C0 = 0;
    __cxa_guard_release(&qword_2549888C8);
  }
  return &qword_2549888B0;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  _BOOL4 v4;
  _QWORD v6[4];
  char v7;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, this) & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4);
    return sub_20C3C0F6C(a1, (pxrInternal__aapl__pxrReserved__ **)this + 1, v4);
  }
  else
  {
    v6[0] = "usd/primFlags.cpp";
    v6[1] = "operator()";
    v6[2] = 48;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()(const UsdPrim &) const";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Applying predicate to invalid prim.");
    return 0;
  }
}

BOOL sub_20C3C0F6C(uint64_t *a1, pxrInternal__aapl__pxrReserved__ **a2, int a3)
{
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v5 = *a2;
  if (!*a2 || (v6 = *((_QWORD *)v5 + 7), (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*a2, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    v6 = *((_QWORD *)v5 + 7);
  }
  v7 = v6 & 0xFFFFFFFFFFFFDFFFLL;
  v8 = 0x2000;
  if (!a3)
    v8 = 0;
  v9 = v7 | v8;
  v10 = *a1;
  v11 = a1[1];
  v14 = *a1 & v9;
  v13 = v11 & v10;
  return *((unsigned __int8 *)a1 + 16) != sub_20C37F938(&v14, 0, (uint64_t)&v14, 0xFu, &v13);
}

__n128 pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = a1[1].n128_u8[0] ^ 1;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = a1[1].n128_u8[0] ^ 1;
  return result;
}

uint64_t sub_20C3C103C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 1;
  if ((sub_20C39FA44(a1, (uint64_t)v7) & 1) == 0)
  {
    v4 = 1 << a2;
    if ((*(_QWORD *)a1 & (1 << a2)) != 0)
    {
      if ((BYTE4(a2) & 1) == ((*(_QWORD *)(a1 + 8) & v4) != 0))
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 16) = 1;
      }
    }
    else
    {
      *(_QWORD *)a1 |= v4;
      if ((a2 & 0x100000000) != 0)
        v5 = *(_QWORD *)(a1 + 8) & ~v4;
      else
        v5 = *(_QWORD *)(a1 + 8) | v4;
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage@<W0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__ *v13;
  int v14;
  int v15;
  uint64_t v16;

  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v5, (uint64_t)&v12);
  v7 = v13;
  if (!v13 || (*((_BYTE *)v13 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v13, v6);
  v8 = *((_QWORD *)v7 + 4);
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  sub_20C3C15FC(a3, v8, 0, &v12, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_20BFD265C(&v12);
  result = sub_20C3C1218((uint64_t *)a3);
  if (!result)
    ++*(_DWORD *)(a3 + 48);
  return result;
}

void sub_20C3C11DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C3C1218(uint64_t *a1)
{
  _DWORD *v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  _QWORD v9[2];
  uint64_t v10;
  int v11;
  char v12;
  char v13;

  sub_20C37ECB8(a1, (uint64_t)v9);
  v5 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
  v2 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
  v3 = 0;
  v7 = 0;
  v8 = 0;
  if ((uint64_t *)v9[1] == a1)
  {
    if (v9[0] == v5)
    {
      v3 = 0;
      if (v10 == v6 && !v11 && !v12)
        v3 = v13 == 0;
    }
    else
    {
      v3 = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_20BFD265C(&v10);
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  const char *Text;
  unsigned int *v2;
  unsigned int v3;
  _BYTE v4[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  if (*(_QWORD *)this == *(_QWORD *)(*((_QWORD *)this + 1) + 8))
  {
    v11 = "usd/primRange.cpp";
    v12 = "PruneChildren";
    v13 = 56;
    v14 = "void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren()";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Iterator past-the-end");
  }
  else if (*((_BYTE *)this + 29))
  {
    v11 = "usd/primRange.cpp";
    v12 = "PruneChildren";
    v13 = 62;
    v14 = "void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren()";
    v15 = 0;
    sub_20C37EEF4((uint64_t)this, (uint64_t)v4);
    sub_20C348EEC((uint64_t)v4, &v9);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot prune children during post-visit because thechildren have already been processed. Current node: %s", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_20BFD265C(&v9);
    if ((v8 & 7) != 0)
    {
      v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_20BFD265C(&v6);
    if (v5)
      sub_20C35C614(v5);
  }
  else
  {
    *((_BYTE *)this + 28) = 1;
  }
}

void sub_20C3C1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C37EFCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***v3;
  int v4;
  int v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  v3 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(v2 + 8);
  if (*(_BYTE *)(this + 29))
  {
    *(_BYTE *)(this + 29) = 0;
    this = sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)this, (int *)(this + 16), v3, (uint64_t *)(v2 + 24));
    if ((_DWORD)this)
    {
      v5 = *(_DWORD *)(v1 + 24);
      if (v5)
      {
        *(_DWORD *)(v1 + 24) = v5 - 1;
        *(_BYTE *)(v1 + 29) = 1;
      }
      else
      {
        *(_QWORD *)v1 = v3;
        v6 = 0;
        sub_20C019BD0(&v6);
        sub_20BFD3EBC((int *)(v1 + 16), (int *)&v6);
        sub_20BFD3F10((int *)(v1 + 20), (int *)&v6 + 1);
        return (uint64_t)sub_20BFD1A18(&v6);
      }
    }
  }
  else
  {
    if (!*(_BYTE *)(this + 28))
    {
      this = sub_20C39E4C4((pxrInternal__aapl__pxrReserved__::UsdStage ***)this, (int *)(this + 16), *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(v2 + 8), (uint64_t *)(v2 + 24));
      if ((this & 1) != 0)
      {
        ++*(_DWORD *)(v1 + 24);
        return this;
      }
      v2 = *(_QWORD *)(v1 + 8);
    }
    if (*(_BYTE *)(v2 + 52))
    {
      *(_BYTE *)(v1 + 29) = 1;
    }
    else
    {
      this = sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)v1, (int *)(v1 + 16), v3, (uint64_t *)(v2 + 24));
      if ((_DWORD)this)
      {
        while (1)
        {
          v4 = *(_DWORD *)(v1 + 24);
          if (!v4)
            break;
          *(_DWORD *)(v1 + 24) = v4 - 1;
          this = sub_20C39E5EC((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)v1, (int *)(v1 + 16), v3, (uint64_t *)(*(_QWORD *)(v1 + 8) + 24));
          if ((this & 1) == 0)
            goto LABEL_13;
        }
        *(_QWORD *)v1 = v3;
        v6 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
        sub_20BFD3EBC((int *)(v1 + 16), (int *)&v6);
        sub_20BFD3F10((int *)(v1 + 20), (int *)&v6 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
        this = (uint64_t)sub_20BFD265C(&v6);
      }
    }
LABEL_13:
    *(_BYTE *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t sub_20C3C15FC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  sub_20C37F6C8(a1, a2, a3, a4, a5);
  return a1;
}

void sub_20C3C1678(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::UsdPrimTypeInfo(_QWORD *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v3;
  uint64_t *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  a1[1] = *(_QWORD *)(a2 + 8);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)(a1 + 1);
  *(_QWORD *)(a2 + 8) = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  a1[4] = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = a1 + 5;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 5));
  a1[6] = 0;
  a1[8] = 0;
  a1[7] = 0;
  if (a1[1])
  {
    *v4 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName(v3, v5);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
    v6 = *v4;
    v7 = v9;
  }
  else
  {
    if (!*a1)
      return a1;
    *v4 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)a1, v5);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
    v6 = *v4;
    v7 = v9;
    v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)a1;
  }
  if (v6 != v7)
    sub_20BF32220(a1 + 6, v3);
  return a1;
}

void sub_20C3C1784(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C357D10(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *this)
{
  unint64_t Instance;
  _QWORD *v3;
  unint64_t *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v12;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  v3 = (_QWORD *)((char *)this + 48);
  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 3))
  {
    v7 = sub_20BF2B2B4((_QWORD *)(Instance + 32), v3);
    if (!v7 || (v6 = v7[3]) == 0)
      v6 = *(_QWORD *)(Instance + 112);
    *((_QWORD *)this + 7) = v6;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::BuildComposedPrimDefinition(Instance, v3, (uint64_t)this + 16, &v12);
    v4 = (unint64_t *)((char *)this + 56);
    v5 = v12;
    while (1)
    {
      v6 = __ldaxr(v4);
      if (v6)
        break;
      if (!__stlxr((unint64_t)v5, v4))
      {
        v8 = v12;
        v12 = 0;
        sub_20C358AEC((uint64_t *)this + 8, (uint64_t)v8);
        v6 = *((_QWORD *)this + 8);
        goto LABEL_13;
      }
    }
    __clrex();
LABEL_13:
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      v10 = (void *)sub_20C358B18((uint64_t)v9);
      operator delete(v10);
    }
  }
  return v6;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::GetEmptyPrimType(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254988918);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988918))
  {
    sub_20C3C19EC((uint64_t)&unk_2549888D0);
    __cxa_atexit((void (*)(void *))sub_20C3C1948, &unk_2549888D0, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988918);
  }
  return &unk_2549888D0;
}

void sub_20C3C1930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988918);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3C1948(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v11;

  sub_20C358AEC((uint64_t *)(a1 + 64), 0);
  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v11 = (void **)(a1 + 16);
  sub_20BEEB2B8(&v11);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return a1;
}

uint64_t sub_20C3C19EC(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 40));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_20C3C1A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C357D10(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack(pxrInternal__aapl__pxrReserved__ **a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  pxrInternal__aapl__pxrReserved__ *v7;

  v7 = a1[1];
  if (!v7 || (*((_BYTE *)v7 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetPropertyStack(*(_QWORD *)v7, a1, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStackWithLayerOffsets(pxrInternal__aapl__pxrReserved__ **a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  pxrInternal__aapl__pxrReserved__ *v7;

  v7 = a1[1];
  if (!v7 || (*((_BYTE *)v7 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetPropertyStackWithLayerOffsets(*(_QWORD *)v7, a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName@<X0>(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X8>)
{
  uint64_t *EmptyString;
  std::string::value_type v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD v12[4];
  char v13;

  if ((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v5 = sub_20C377708();
  result = std::string::rfind((const std::string *)EmptyString, v5, 0xFFFFFFFFFFFFFFFFLL);
  v7 = result;
  if (*((char *)EmptyString + 23) < 0)
    v8 = EmptyString[1];
  else
    v8 = *((unsigned __int8 *)EmptyString + 23);
  if (result != v8 - 1
    || (v12[0] = "usd/property.cpp",
        v12[1] = "GetBaseName",
        v12[2] = 51,
        v12[3] = "TfToken pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName() const",
        v13 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "delim != fullName.size()-1", 0), (result & 1) != 0))
  {
    if (v7 == -1)
    {
      v9 = *((_QWORD *)this + 3);
      *(_QWORD *)a2 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *(_QWORD *)a2 = v10;
      }
    }
    else
    {
      if (*((char *)EmptyString + 23) < 0)
        EmptyString = (uint64_t *)*EmptyString;
      return pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2, (const char *)EmptyString + v7 + 1);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *EmptyString;
  std::string::value_type v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string __p;
  const char *v9;
  char v10;
  char v11;

  if ((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v4 = sub_20C377708();
  v5 = std::string::rfind((const std::string *)EmptyString, v4, 0xFFFFFFFFFFFFFFFFLL);
  v6 = v5;
  if (*((char *)EmptyString + 23) < 0)
    v7 = EmptyString[1];
  else
    v7 = *((unsigned __int8 *)EmptyString + 23);
  if (v5 == v7 - 1
    && (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/property.cpp",
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetNamespace",
        __p.__r_.__value_.__r.__words[2] = 65,
        v9 = "TfToken pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace() const",
        v10 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "delim != fullName.size()-1", 0) & 1) == 0)
    || v6 == -1)
  {
    *a2 = 0;
  }
  else
  {
    std::string::basic_string(&__p, (const std::string *)EmptyString, 0, v6, (std::allocator<char> *)&v11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C3C1D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *EmptyString;

  if ((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier((unsigned __int8 *)EmptyString, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::GetDisplayGroup@<W0>(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C3699B0((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C3C1DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369820(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::ClearDisplayGroup(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 104));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::HasAuthoredDisplayGroup(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 104));
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetNestedDisplayGroups(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  char v4;

  pxrInternal__aapl__pxrReserved__::UsdProperty::GetDisplayGroup(this, __p);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)__p, ":", a2);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20C3C1FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SetNestedDisplayGroups(uint64_t a1, std::string **a2)
{
  uint64_t v3;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  v3 = pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_20C3C2024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::IsCustom(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_IsCustom(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SetCustom(pxrInternal__aapl__pxrReserved__::UsdProperty *this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;

  v7 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C369640((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 64), (uint64_t (**)(_QWORD, uint64_t))&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t HasSpec;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  int v11;
  int v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  uint64_t *v23;

  sub_20C35C4F8((uint64_t)&v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v3 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_20C368FF0((uint64_t)&v13, v2);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v18, v3, 1);
  if ((v17 & 7) != 0)
  {
    v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  if (v19 == v21 && v20 == v22)
    return 0;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)this + 24);
  do
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v23);
    v13 = v19;
    v14 = v20;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v7, &v11);
    HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_20BFD265C(&v11);
    if ((HasSpec & 1) != 0)
      break;
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v18);
  }
  while (v19 != v21 || v20 != v22);
  return HasSpec;
}

void sub_20C3C2268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthoredAt(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t HasSpec;
  int v9;
  int v10;
  int v11;
  int v12;

  v4 = sub_20BFD2F78(a2);
  if (!(v5 & 1 | (unint64_t)v4))
    return 0;
  sub_20C348EEC((uint64_t)this, &v9);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v11))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)a2);
    HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  }
  else
  {
    HasSpec = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_20BFD265C(&v11);
  return HasSpec;
}

void sub_20C3C2350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int **v7;

  v6 = *((_QWORD *)this + 1);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  v7 = (unsigned int **)sub_20C398E78(this);
  pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(this, a2, v7, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = *((_QWORD *)this + 1);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(this, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  v6 = *((_QWORD *)this + 1);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  sub_20C35C4F8((uint64_t)&v10, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  v7 = (unsigned int **)sub_20C398E78(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, v7, a3);
  if ((v14 & 7) != 0)
  {
    v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
}

void sub_20C3C2504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(uint64_t a1, int a2, uint64_t *a3, _BYTE *a4)
{
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__ **v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::PcpCache *v12;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *LayerStackIdentifier;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  const char *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__ *v24;
  uint64_t v25;
  int64x2_t v26;
  __int128 v27;
  uint64_t v28;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  unsigned int *v30;
  unsigned int v31;
  const pxrInternal__aapl__pxrReserved__::SdfPath *i;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  const char *Text;
  const char *v41;
  char *v42;
  __int128 v45;
  void **v46;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  int v54;
  __int128 v55[3];
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;

  if (a2 != 1 && a2 != 8)
  {
    __p = "usd/property.cpp";
    v48 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_GetTargets";
    v49 = 184;
    v50 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(SdfSpecType, SdfPathVector *, BOOL *) const";
    v51 = 0;
    v8 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "specType == SdfSpecTypeAttribute || specType == SdfSpecTypeRelationship", 0) & 1) == 0)return v8;
  }
  v10 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
  v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v9 || (*((_BYTE *)v9 + 57) & 8) != 0)
    return 0;
  v11 = *(_QWORD *)v9;
  v12 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*(_QWORD *)v9 + 128);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v9);
  LayerStackIdentifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v12);
  sub_20C348EEC(a1, (int *)&v45);
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&__p, LayerStackIdentifier, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_20BFD265C(&v45);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&v45);
  pxrInternal__aapl__pxrReserved__::PcpBuildPrimPropertyIndex((const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, v12, PrimIndex, &v45, (uint64_t)&v57);
  pxrInternal__aapl__pxrReserved__::PcpBuildTargetIndex((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&v45, a2, v55, &v57);
  sub_20BF1C150(&v46, 0);
  v60 = (void **)&v45;
  sub_20C21DAE8(&v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  sub_20BFD265C(&v53);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v52);
  *(_QWORD *)&v45 = &v51;
  sub_20BDE9EB0((void ***)&v45);
  v16 = (const char *)v50;
  if (v50)
  {
    v17 = (unsigned int *)(v50 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(const char *))(*(_QWORD *)v16 + 8))(v16);
  }
  v20 = v48;
  if (v48)
  {
    v21 = (unsigned int *)((char *)v48 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v20 + 8))(v20);
  }
  if (*(_QWORD *)&v55[0] == *((_QWORD *)&v55[0] + 1))
  {
    v26 = vdupq_n_s64(*(unint64_t *)&v55[0]);
  }
  else
  {
    v24 = *v10;
    if (!*v10 || (v25 = *((_QWORD *)v24 + 7), (v25 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*v10, v15);
      v25 = *((_QWORD *)v24 + 7);
    }
    if ((v25 & 0x1000) != 0)
    {
      sub_20C35C4F8((uint64_t)&__p, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdPrim::_GetProtoToInstancePathMap((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, v29, (uint64_t *)&v45);
      if ((v50 & 7) != 0)
      {
        v30 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
      sub_20BFD265C(&v49);
      if (v48)
        sub_20C35C614(v48);
      v33 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v55[0] + 1);
      for (i = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)&v55[0];
            i != v33;
            i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::_ProtoToInstancePathMap::MapProtoToInstance((char **)&v45, i, (int *)&__p);
        v34 = a3[1];
        if (v34 >= a3[2])
        {
          v35 = sub_20C12C530(a3, &__p);
        }
        else
        {
          sub_20BFD38A4((_DWORD *)a3[1], &__p);
          sub_20BFD38DC((_DWORD *)(v34 + 4), (_DWORD *)&__p + 1);
          v35 = v34 + 8;
        }
        a3[1] = v35;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3[1] - 8)))
        {
          v36 = (_DWORD *)(a3[1] - 8);
          sub_20BFD6F64((uint64_t)(a3 + 2), v36);
          a3[1] = (uint64_t)v36;
        }
      }
      __p = &v45;
      sub_20C22D004((void ***)&__p);
      goto LABEL_38;
    }
    v26 = (int64x2_t)v55[0];
  }
  v27 = *(_OWORD *)a3;
  *(int64x2_t *)a3 = v26;
  v55[0] = v27;
  v28 = a3[2];
  a3[2] = *(_QWORD *)&v55[1];
  *(_QWORD *)&v55[1] = v28;
LABEL_38:
  v37 = v57;
  v38 = v58;
  if (v57 != v58)
  {
    if (a2 == 1)
      v39 = "getting connections for attribute <%s>";
    else
      v39 = "getting targets for relationship <%s>";
    sub_20C348EEC(a1, (int *)&v45);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v39, v41, v42, Text);
    pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors(v11, &v57, (uint64_t *)&__p);
    if (SHIBYTE(v49) < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
    if (a4)
      *a4 = 1;
  }
  v8 = v37 == v38 && v56 != 0;
  __p = (char *)&v55[1] + 8;
  sub_20BDE9EB0((void ***)&__p);
  __p = v55;
  sub_20BFD6F90((void ***)&__p);
  __p = &v57;
  sub_20BDE9EB0((void ***)&__p);
  return v8;
}

void sub_20C3C2960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  uint64_t v28;

  sub_20C35C2E0((uint64_t)&__p);
  sub_20C219018(&a28);
  __p = (void *)(v28 - 128);
  sub_20BDE9EB0((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v3;

  v3 = (unsigned int **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v3, a2);
}

BOOL sub_20C3C2A58(pxrInternal__aapl__pxrReserved__::UsdObject *a1, __int128 *a2, int a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  _BOOL8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *Instance;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  char v31[8];
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v35;
  const char *v36;
  char v37;
  _QWORD **v38;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2) & 1) != 0)
  {
    sub_20C029E64((char *)__p, a2);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v32);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v32);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = sub_20C3C3904((uint64_t)__p, EditTarget);
    v10 = v33;
    if (v33)
    {
      v11 = (unsigned int *)(v33 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20C3C39EC(a1, v14, &v32);
      if (v32
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v32 + 8)) & 1) == 0)
      {
        v28 = v32;
        v29 = (std::__shared_weak_count *)v33;
        if (v33)
        {
          v20 = (unint64_t *)(v33 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        sub_20C3C3B04(&v28, (unsigned __int8 *)__p, a3);
        v22 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v26 = v30;
        v27 = atomic_load(Instance + 18);
        v15 = v26 >= v27
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v15 = 0;
      }
      v16 = (std::__shared_weak_count *)v33;
      if (v33)
      {
        v17 = (unint64_t *)(v33 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
    }
    else
    {
      v15 = 0;
    }
    sub_20BF49F14(&v38, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    if (SHIBYTE(v35) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Add";
    v35 = 117;
    v36 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Add(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal"
          "__aapl__pxrReserved__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<p"
          "xrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy>]";
    v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v15;
}

void sub_20C3C2CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;
  uint64_t v10;
  va_list va3;
  uint64_t v12;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v8 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v10 = va_arg(va4, _QWORD);
  v12 = va_arg(va4, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va3);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va2);
  sub_20C029F94((uint64_t)va4);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v7;
  _QWORD **v9;
  void *__p[2];
  char v11;
  int v12;
  _DWORD v13[5];
  _QWORD **v14;

  v9 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, a2, a3, a4, &v9);
  sub_20BF49F14(&v9, 0);
  v7 = sub_20C3C2A58(a1, (__int128 *)__p, a5);
  sub_20BF49F14(&v14, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_20BFD265C(&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_20C3C2DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C029F94((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v8;
  _QWORD **v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  int v14;
  _DWORD v15[5];
  _QWORD **v16;

  v11 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, a2, &v11, a3, &v10);
  sub_20BF49F14(&v10, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  v8 = sub_20C3C2A58(a1, (__int128 *)__p, a4);
  sub_20BF49F14(&v16, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
  sub_20BFD265C(&v14);
  if (v13 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_20C3C2EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C029F94((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v6;
  _QWORD **v8;
  void *__p[2];
  uint64_t v10;
  void *v11[2];
  char v12;
  int v13;
  _DWORD v14[5];
  _QWORD **v15;

  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v11, __p, a2, a3, &v8);
  sub_20BF49F14(&v8, 0);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v6 = sub_20C3C2A58(a1, (__int128 *)v11, a4);
  sub_20BF49F14(&v15, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v14);
  sub_20BFD265C(&v13);
  if (v12 < 0)
    operator delete(v11[0]);
  return v6;
}

void sub_20C3C2FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20C029F94((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20C3C3018(pxrInternal__aapl__pxrReserved__::UsdObject *a1, __int128 *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  _BOOL8 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *Instance;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  const char *v30;
  char v31;
  _QWORD **v32;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2) & 1) != 0)
  {
    sub_20C029E64((char *)__p, a2);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v26);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v26);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = sub_20C3C3904((uint64_t)__p, EditTarget);
    v8 = v27;
    if (v27)
    {
      v9 = (unsigned int *)(v27 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    if ((v7 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20C3C39EC(a1, v12, &v26);
      if (v26
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v26 + 8)) & 1) == 0)
      {
        sub_20C3C42B8(&v26, (unsigned __int8 *)__p);
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v22 = v24;
        v23 = atomic_load(Instance + 18);
        v13 = v22 >= v23
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v13 = 0;
      }
      v14 = (std::__shared_weak_count *)v27;
      if (v27)
      {
        v15 = (unint64_t *)(v27 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17)
        v17 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v18 = sub_20BEC5244(&v24, 0);
      LOBYTE(v26) = 0;
      v19 = (_QWORD *)sub_20BEB5B80(v17 + 19, &v26);
      if (v19 != v18)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v17, v18, v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
    }
    else
    {
      v13 = 0;
    }
    sub_20BF49F14(&v32, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
    sub_20BFD265C(&v30);
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Remove";
    v29 = 148;
    v30 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Remove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrRes"
          "erved__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aa"
          "pl__pxrReserved__::SdfReferenceTypePolicy>]";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v13;
}

void sub_20C3C3258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_20C029F94((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_20C3C32E0(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  unint64_t *Instance;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20C3C39EC(a1, v3, &v17);
    if (v17
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v17 + 1) & 1) == 0
      && sub_20C10525C((uint64_t)&v17)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v17 + 6))(v17))
    {
      Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!Instance)
        Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v5 = v15;
      v6 = atomic_load(Instance + 18);
      v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
    }
    else
    {
      v7 = 0;
    }
    v8 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v9 = (unint64_t *)(v18 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v11)
      v11 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v12 = sub_20BEC5244(&v15, 0);
    LOBYTE(v17) = 0;
    v13 = (_QWORD *)sub_20BEB5B80(v11 + 19, &v17);
    if (v13 != v12)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    v18 = "Clear";
    v19 = 174;
    v20 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Clear(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdReferences, Li"
          "stOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfRefe"
          "renceTypePolicy>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_20C3C3494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C3C34D0(pxrInternal__aapl__pxrReserved__::UsdObject *a1, __int128 **a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  __int128 *v12;
  char *v13;
  char *v14;
  unint64_t *Instance;
  unint64_t v16;
  unint64_t v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL8 v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  _BYTE v36[8];
  __int128 __p;
  uint64_t v38;
  const char *v39;
  char v40;
  _QWORD **v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &__p);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&__p);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = *((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v8 = (unsigned int *)(*((_QWORD *)&__p + 1) + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v45);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_20C3C4730((uint64_t *)&v42, 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
    v11 = *a2;
    v12 = a2[1];
    if (*a2 != v12)
    {
      do
      {
        sub_20C029E64((char *)&__p, v11);
        if (sub_20C3C3904((uint64_t)&__p, EditTarget))
        {
          v13 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v14 = (char *)sub_20C12D654((uint64_t *)&v42, &__p);
          }
          else
          {
            sub_20C029E64(v43, &__p);
            v14 = v13 + 56;
          }
          v43 = v14;
        }
        sub_20BF49F14(&v41, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
        sub_20BFD265C(&v39);
        if (SHIBYTE(v38) < 0)
          operator delete((void *)__p);
        v11 = (__int128 *)((char *)v11 + 56);
      }
      while (v11 != v12);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v16 = v45;
    v17 = atomic_load(Instance + 18);
    if (v16 >= v17
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v45, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v36);
      sub_20C3C39EC(a1, v18, &v35);
      if ((_QWORD)v35
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v35 + 8)) & 1) == 0)
      {
        if (v42 == v43)
        {
          if (sub_20C10525C((uint64_t)&v35))
            (*(void (**)(_QWORD))(*(_QWORD *)v35 + 56))(v35);
        }
        else
        {
          __p = v35;
          if (*((_QWORD *)&v35 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          LODWORD(v38) = 0;
          sub_20C3C47EC((unsigned int *)&__p, &v42);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v22)
        v22 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v23 = v45;
      v24 = atomic_load(v22 + 18);
      v25 = v23 >= v24
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v45, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v22);
      v26 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26)
        v26 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v27 = sub_20BEC5244(&v45, 0);
      LOBYTE(v35) = 0;
      v28 = (_QWORD *)sub_20BEB5B80(v26 + 19, &v35);
      if (v28 != v27)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v26, v27, v28);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v36);
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)&__p = &v42;
    sub_20C021740((void ***)&__p);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v45);
  }
  else
  {
    *(_QWORD *)&__p = "usd/listEditImpl.h";
    *((_QWORD *)&__p + 1) = "Set";
    v38 = 195;
    v39 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Set(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrRese"
          "rved__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aap"
          "l__pxrReserved__::SdfReferenceTypePolicy>]";
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v25;
}

void sub_20C3C3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a11);
  a12 = (void **)&a19;
  sub_20C021740(&a12);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v19 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_20C3C3904(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  uint64_t v4;
  int *v5;
  int *v6;
  int v8;
  int v9;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      return 1;
LABEL_5:
    v5 = (int *)(a1 + 24);
    sub_20BFD6E54(&v8, (_DWORD *)(a1 + 24));
    v6 = (int *)(a1 + 28);
    sub_20BFD6EA4(&v9, v6);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
    {
      if ((sub_20C396D0C(&v8, a2) & 1) == 0)
      {
        v4 = 0;
        goto LABEL_10;
      }
      sub_20C01A074(v5, &v8);
      sub_20C01A0C8(v6, &v9);
    }
    v4 = 1;
LABEL_10:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_20BFD265C(&v8);
    return v4;
  }
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_5;
  return 1;
}

void sub_20C3C39D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3C39EC@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int **v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (v15 = "usd/listEditImpl.h",
        v16 = "_GetListEditor",
        v17 = 238,
        v18 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdReferences, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::Sd"
              "fReferenceTypePolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserve"
              "d__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aa"
              "pl__pxrReserved__::SdfReferenceTypePolicy>]",
        v19 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v15);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v14);
    v7 = v16;
    if (v16)
    {
      v8 = (unsigned int *)(v16 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v14))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      v12 = (unsigned int **)sub_20C0B0CA4(&v14);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v12, a3);
    }
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_20C3C3ADC(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  _Unwind_Resume(a1);
}

void sub_20C3C3B04(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  switch(a3)
  {
    case 0:
      v6 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v32 = v6;
      v9 = 1;
      goto LABEL_11;
    case 1:
      v10 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v9 = 0;
      v32 = v10;
LABEL_11:
      v13 = 4;
      goto LABEL_21;
    case 2:
      v14 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v15 = (unint64_t *)&v5->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v32 = v14;
      v9 = 1;
      goto LABEL_20;
    case 3:
      v17 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v18 = (unint64_t *)&v5->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v9 = 0;
      v32 = v17;
LABEL_20:
      v13 = 5;
LABEL_21:
      v33 = v5;
      v34 = v13;
      break;
    default:
      v9 = 0;
      break;
  }
  if (!sub_20C102684((uint64_t)a1)
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1))
  {
    v21 = *a1;
    v20 = (std::__shared_weak_count *)a1[1];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = v33;
    v32 = v21;
    v33 = v20;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v34 = 0;
  }
  if (sub_20C3C3E5C((uint64_t)&v32))
  {
    v27 = sub_20C3C3E18((uint64_t)&v32, a2);
    if (v27 != -1)
    {
      if ((v9 & 1) != 0)
        v28 = 0;
      else
        v28 = sub_20C3C3E5C((uint64_t)&v32) - 1;
      if (v27 == v28)
        goto LABEL_42;
      sub_20C3C3EC0((unsigned int *)&v32, v27);
    }
    sub_20C3C3D58((unsigned int *)&v32, v9 - 1, (__int128 *)a2);
  }
  else
  {
    sub_20C3C3D58((unsigned int *)&v32, -1, (__int128 *)a2);
  }
LABEL_42:
  v29 = v33;
  if (v33)
  {
    v30 = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20C3C3D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3C3D58(unsigned int *a1, int a2, __int128 *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  if (a2 == -1)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, a1[4]);
      a2 = -1227133513 * ((v6[1] - *v6) >> 3);
    }
    else
    {
      a2 = 0;
    }
  }
  v7 = a2;
  sub_20C3C40FC(v8, 1uLL, a3);
  sub_20C3C3F20(a1, v7, 0, v8);
  v9 = (void **)v8;
  sub_20C021740(&v9);
}

void sub_20C3C3E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C021740((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3C3E18(uint64_t a1, unsigned __int8 *a2)
{
  if (sub_20C3C41A4(a1))
    return sub_20C3C4218(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), a2);
  else
    return -1;
}

uint64_t sub_20C3C3E5C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  if (!sub_20C3C41A4(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

void sub_20C3C3EC0(unsigned int *a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  sub_20C3C3F20(a1, a2, 1, v2);
  v3 = (void **)v2;
  sub_20C021740(&v3);
}

void sub_20C3C3F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20C021740(&a12);
  _Unwind_Resume(a1);
}

void sub_20C3C3F20(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *WhyNot;
  const char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p[2];
  char v16;
  char v17;

  if (sub_20C3C4088((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 32))(__p, *(_QWORD *)a1, a1[4]);
      if (v17)
      {
        v10 = "sdf/listProxy.h";
        v11 = "_Edit";
        v12 = 750;
        v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePoli"
              "cy>::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::Sdf"
              "ReferenceTypePolicy]";
        v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0)
          v9 = (const char *)WhyNot;
        else
          v9 = (const char *)*WhyNot;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0)
          operator delete(__p[0]);
      }
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      v10 = "sdf/listProxy.h";
      v11 = "_Edit";
      v12 = 758;
      v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy"
            ">::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfRefe"
            "renceTypePolicy]";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_20C3C4064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3C4088(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy"
            ">::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_QWORD *sub_20C3C40FC(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  char *v6;
  uint64_t v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE1B554(a1, a2);
    v6 = (char *)a1[1];
    v7 = 56 * a2;
    v8 = &v6[56 * a2];
    do
    {
      sub_20C029E64(v6, a3);
      v6 += 56;
      v7 -= 56;
    }
    while (v7);
    a1[1] = v8;
  }
  return a1;
}

void sub_20C3C4184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C021740(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3C41A4(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy"
            ">::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_20C3C4218(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (_QWORD *)v4;
  v6 = *(unsigned __int8 **)v4;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if (*(unsigned __int8 **)v4 == v7)
  {
    v8 = *(unsigned __int8 **)v4;
  }
  else
  {
    while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v6, a3) & 1) == 0)
    {
      v6 += 56;
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
    v8 = v6;
    v6 = (unsigned __int8 *)v5[1];
  }
  if (v8 == v6)
    return -1;
  else
    return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v8[-*v5] >> 3);
}

void sub_20C3C42B8(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  int v30;

  if (sub_20C10525C((uint64_t)a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1))
    {
      v4 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v30 = 0;
      sub_20C3C44F8((unsigned int *)&v28, a2);
      v7 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) & 1) == 0)
    {
      v10 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v30 = 1;
      sub_20C3C44F8((unsigned int *)&v28, a2);
      v13 = v29;
      if (v29)
      {
        v14 = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v30 = 4;
      sub_20C3C44F8((unsigned int *)&v28, a2);
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v30 = 5;
      sub_20C3C44F8((unsigned int *)&v28, a2);
      v25 = v29;
      if (v29)
      {
        v26 = (unint64_t *)&v29->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      sub_20C3C45C0(a1, 2, (__int128 *)a2);
    }
  }
}

void sub_20C3C44D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3C44F8(unsigned int *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  void **v7;

  v3 = sub_20C3C3E18((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(_QWORD *)a1)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a1[4]);
      v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[1] - *v4) >> 3);
    }
    else
    {
      v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_20C3C3F20(a1, v5, 0, v6);
    v7 = (void **)v6;
    sub_20C021740(&v7);
  }
  else
  {
    sub_20C3C3EC0(a1, v3);
  }
}

void sub_20C3C45A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C021740((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C3C45C0(uint64_t *a1, int a2, __int128 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;

  v4 = (std::__shared_weak_count *)a1[1];
  v10 = *a1;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v12 = a2;
  if (sub_20C3C3E18((uint64_t)&v10, (unsigned __int8 *)a3) == -1)
    sub_20C3C4674((unsigned int *)&v10, a3);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20C3C4660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3C4674(unsigned int *a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  void **v8;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 3);
  }
  else
  {
    v6 = 0;
  }
  sub_20C3C40FC(v7, 1uLL, a2);
  sub_20C3C3F20(a1, v6, 0, v7);
  v8 = (void **)v7;
  sub_20C021740(&v8);
}

void sub_20C3C4718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C021740((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20C3C4730(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE16B34((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 56 * v6;
    sub_20C12D770(a1, v7);
    return sub_20C12D538(v7);
  }
  return result;
}

void sub_20C3C47D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12D538((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C3C47EC(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 3);
  }
  else
  {
    v6 = 0;
  }
  sub_20C3C3F20(a1, 0, v6, a2);
  return a1;
}

double pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring@<D0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X2>, int *a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  _BOOL4 IsPathInPrototype;
  BOOL v11;
  double result;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  BOOL v16;
  char v17;
  const char *Text;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  uint64_t Identifier;
  const char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char *v35;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
    goto LABEL_7;
  sub_20C348EEC(a1, &v33);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v35);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (int *)&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_20BFD265C(&v35);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_20BFD265C(&v33);
  IsPathInPrototype = pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)&v25, v9);
  v11 = IsPathInPrototype;
  if (IsPathInPrototype)
  {
    if (a3)
      MEMORY[0x212B929D0](a3, "Cannot target a prototype or an object within a prototype.");
    *(_QWORD *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_20BFD265C(&v25);
  if (!v11)
  {
LABEL_7:
    v13 = *(_QWORD *)(a1 + 8);
    if (!v13 || (*(_BYTE *)(v13 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v8);
    v14 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v13;
    sub_20C348EEC(a1, &v27);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v14);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
    {
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, a2, &v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, a4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &v25);
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v33);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (int *)&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_20BFD265C(&v33);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v29);
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v31);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v33);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_20BFD265C(&v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_20BFD265C(&v29);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v35, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_20BFD265C(&v33);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
      sub_20BFD265C(&v35);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_20BFD265C(&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (a3)
      v17 = v16;
    else
      v17 = 1;
    if ((v17 & 1) == 0)
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v14);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v19);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v20);
      if (*(char *)(Identifier + 23) >= 0)
        v24 = Identifier;
      else
        v24 = *(_QWORD *)Identifier;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot map <%s> to layer @%s@ via stage's EditTarget", v22, v23, Text, v24);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      result = *(double *)&v25;
      *(_OWORD *)a3 = v25;
      *(_QWORD *)(a3 + 16) = v26;
    }
  }
  return result;
}

void sub_20C3C4B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20BFD1A18((int *)va2);
  sub_20BFD1A18((_DWORD *)(v3 - 56));
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget(pxrInternal__aapl__pxrReserved__::UsdRelationship *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  unint64_t *p_shared_owners;
  int IsDormant;
  unsigned int **v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  uint64_t v11;
  const char *Text;
  const char *v13;
  const char *v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v18;
  _QWORD v19[4];
  char v20;
  int v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring((uint64_t)a1, a2, (uint64_t)v23, &v21);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v21))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v18);
    if ((IsDormant & 1) == 0)
    {
      v8 = (unsigned int **)sub_20C0B22EC(&v18);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v8, &v16);
      sub_20C360F84(&v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a3);
      v9 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    v11 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(p_shared_owners, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
  }
  else
  {
    v19[0] = "usd/relationship.cpp";
    v19[1] = "AddTarget";
    v19[2] = 110;
    v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget(const SdfPath &, UsdListPosition) const";
    v20 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_20C348EEC((uint64_t)a1, (int *)&v18);
    v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
    v14 = (const char *)v23;
    if (v24 < 0)
      v14 = (const char *)v23[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot add target <%s> to relationship <%s>: %s", Text, v13, v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_20BFD265C(&v18);
    v11 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_20BFD265C(&v21);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return v11;
}

void sub_20C3C4DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va2);
  sub_20BFD1A18((_DWORD *)(v5 - 64));
  if (*(char *)(v5 - 33) < 0)
    operator delete(*(void **)(v5 - 56));
  _Unwind_Resume(a1);
}

void sub_20C3C4E1C()
{
  JUMPOUT(0x20C3C4E00);
}

void pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(pxrInternal__aapl__pxrReserved__::UsdRelationship *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfSpec *a3@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  void *v9;
  unint64_t *Instance;
  unint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t *EmptyString;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  char v18[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v23;
  char v24[8];
  unint64_t v25;

  v3 = a2;
  v6 = (uint64_t *)((char *)this + 8);
  v7 = *((_QWORD *)this + 1);
  if (!v7 || (*(_BYTE *)(v7 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  v8 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v7;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v25);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreateRelationshipSpecForEditing(v8, this);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, a3);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v11 = v25;
    v12 = atomic_load(Instance + 18);
    if (v11 >= v12
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v25, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
      sub_20C35C4F8((uint64_t)v18, v6, (_DWORD *)this + 4);
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v18, &v23);
      if ((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(&v23, (uint64_t)EmptyString, v3, 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
      if ((v22 & 7) != 0)
      {
        v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_20BFD265C(&v20);
      if (v19)
        sub_20C35C614(v19);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    }
    else
    {
      *(_QWORD *)a3 = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v25);
}

void sub_20C3C4FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget(pxrInternal__aapl__pxrReserved__::UsdRelationship *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t *v4;
  int IsDormant;
  unsigned int **v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  uint64_t v9;
  const char *Text;
  const char *v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  int v22;
  int v23;
  void *v24[2];
  uint64_t v25;

  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring((uint64_t)this, a2, (uint64_t)v24, &v22);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v15);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v14);
    if ((IsDormant & 1) == 0)
    {
      v6 = (unsigned int **)sub_20C0B22EC(&v14);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v6, &v17);
      sub_20C3613EC((uint64_t *)&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
      v7 = (std::__shared_weak_count *)v18;
      if (v18)
      {
        v4 = (unint64_t *)(v18 + 8);
        do
          v8 = __ldaxr(v4);
        while (__stlxr(v8 - 1, v4));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    v9 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v15);
  }
  else
  {
    v17 = "usd/relationship.cpp";
    v18 = "RemoveTarget";
    v19 = 138;
    v20 = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget(const SdfPath &) const";
    v21 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_20C348EEC((uint64_t)this, &v15);
    v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    v12 = (const char *)v24;
    if (v25 < 0)
      v12 = (const char *)v24[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove target <%s> from relationship <%s>: %s", Text, v11, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_20BFD265C(&v15);
    v9 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  return v9;
}

void sub_20C3C5194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v6, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_20BFD1A18((_DWORD *)(v4 - 48));
  if (*(char *)(v4 - 17) < 0)
    operator delete(*(void **)(v4 - 40));
  _Unwind_Resume(a1);
}

void sub_20C3C5210()
{
  JUMPOUT(0x20C3C51F4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t *v8;
  int IsDormant;
  unsigned int **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int **v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  uint64_t v21;
  const char *Text;
  const char *v23;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v26;
  int v27;
  int v28;
  void (***v29)(void **);
  const char *v30;
  uint64_t v31;
  const char *v32;
  char v33;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20C0B8D74(&v37, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_9:
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v27);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v26);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v26);
    if ((IsDormant & 1) == 0)
    {
      v10 = (unsigned int **)sub_20C0B22EC(&v26);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v10, &v29);
      if (sub_20C0AA0E4((uint64_t)&v29))
        (*v29)[7]((void **)v29);
      v11 = (std::__shared_weak_count *)v30;
      if (v30)
      {
        v12 = (unint64_t *)(v30 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (unsigned int **)sub_20C0B22EC(&v26);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v14, &__p);
      v29 = (void (***)(void **))__p;
      v30 = (const char *)v35;
      if (v35)
      {
        v15 = (unint64_t *)(v35 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      LODWORD(v31) = 0;
      sub_20C3619E0((unsigned int *)&v29, &v37);
      v17 = (std::__shared_weak_count *)v30;
      if (v30)
      {
        v8 = (unint64_t *)(v30 + 8);
        do
          v18 = __ldaxr(v8);
        while (__stlxr(v18 - 1, v8));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v19 = (std::__shared_weak_count *)v35;
      if (v35)
      {
        v8 = (unint64_t *)(v35 + 8);
        do
          v20 = __ldaxr(v8);
        while (__stlxr(v20 - 1, v8));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    v21 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v26);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v27);
  }
  else
  {
    while (1)
    {
      __p = 0;
      v35 = 0;
      v36 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring((uint64_t)a1, v4, (uint64_t)&__p, (int *)&v29);
      v6 = v38;
      if ((unint64_t)v38 >= v39)
      {
        v7 = (_DWORD *)sub_20C12C530(&v37, &v29);
      }
      else
      {
        sub_20BFD38A4(v38, &v29);
        sub_20BFD38DC(v6 + 1, (_DWORD *)&v29 + 1);
        v7 = v6 + 2;
      }
      v38 = v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
      sub_20BFD265C(&v29);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v38 - 2))
        break;
      if (SHIBYTE(v36) < 0)
        operator delete(__p);
      v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
      if (v4 == v5)
        goto LABEL_9;
    }
    v29 = (void (***)(void **))"usd/relationship.cpp";
    v30 = "SetTargets";
    v31 = 169;
    v32 = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets(const SdfPathVector &) const";
    v33 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v4);
    sub_20C348EEC((uint64_t)a1, &v27);
    v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
    p_p = (const char *)&__p;
    if (v36 < 0)
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set target <%s> on relationship <%s>: %s", Text, v23, p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
    v21 = 0;
  }
  v29 = (void (***)(void **))&v37;
  sub_20BFD6F90((void ***)&v29);
  return v21;
}

void sub_20C3C5520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  a17 = v27 - 72;
  sub_20BFD6F90((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this, int a2)
{
  unint64_t *p_shared_owners;
  int IsDormant;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v6;
  const std::type_info *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  std::__shared_weak_count *v12;
  unint64_t v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v20;
  std::__shared_weak_count *v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v24;
  _BYTE v25[8];

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v24);
  IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v24);
  if ((IsDormant & 1) == 0)
  {
    if (a2)
    {
      v6 = sub_20C0B22EC(&v24);
      pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v6, &v22);
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v22, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_24C527C50, v7))
      {
        v8 = v22;
        v20 = v22;
        if (v22)
        {
          do
            v9 = __ldaxr((unsigned int *)v8);
          while (__stlxr(v9 + 1, (unsigned int *)v8));
          v8 = v20;
          v23 = v20;
          if (v20)
          {
            do
              v10 = __ldaxr((unsigned int *)v20);
            while (__stlxr(v10 + 1, (unsigned int *)v20));
          }
        }
        else
        {
          v23 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20);
      }
      else
      {
        v23 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
      v14 = sub_20C0B0CA4(&v23);
      v15 = (unsigned int *)v24;
      v20 = v24;
      if (v24)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(v14, &v20);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v18, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    }
    else
    {
      v11 = (unsigned int **)sub_20C0B22EC(&v24);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v11, &v20);
      if (sub_20C0AA0E4((uint64_t)&v20))
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity *))(*(_QWORD *)v20 + 48))(v20);
      v12 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(p_shared_owners, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v24);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  return IsDormant ^ 1u;
}

void sub_20C3C575C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, char a5, int a6, __int16 a7, char a8, char a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v15;
  void *v16;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v13 - 24));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets(uint64_t a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(a1, 8, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargetsImpl(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, _BYTE *a5, unsigned int a6)
{
  BOOL Targets;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  int v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v21;
  char v22;
  char v23;
  int v24;
  char v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  pxrInternal__aapl__pxrReserved__::SdfPath **v44;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v45;
  int v46;
  int v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::SdfPath *v49;
  pxrInternal__aapl__pxrReserved__::SdfPath *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  Targets = pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets((uint64_t)a1, 8, (uint64_t *)&v49, a5);
  v10 = v49;
  v11 = v50;
  if (v49 == v50)
  {
    LOBYTE(v12) = Targets;
  }
  else
  {
    v12 = 0;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v10))
        goto LABEL_29;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v13, &v37);
      v14 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v37);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v10, &v42);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (uint64_t)&v44);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      v16 = v38;
      if (v38)
      {
        v17 = (unsigned int *)((char *)v38 + 8);
        do
        {
          v18 = __ldxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v16 + 8))(v16);
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v44, v15))goto LABEL_22;
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, NameToken, (uint64_t)&v37);
      if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v21))goto LABEL_14;
      sub_20C348EEC((uint64_t)&v37, &v42);
      sub_20C37F3F8(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, &v42);
      v23 = v22;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_20BFD265C(&v42);
      if ((v23 & 1) != 0)
        v12 |= pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargetsImpl(&v37, a2, a3, a4, a5, a6);
      if (!a6)
      {
        v25 = 0;
        v24 = 3;
      }
      else
      {
LABEL_14:
        v24 = 0;
        v25 = 1;
      }
      if ((v41 & 7) != 0)
      {
        v26 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
      sub_20BFD265C(&v39);
      if (v38)
        sub_20C35C614(v38);
      if ((v25 & 1) != 0)
LABEL_22:
        v24 = 0;
      if ((v48 & 7) != 0)
      {
        v28 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
      sub_20BFD265C(&v46);
      if (v45)
        sub_20C35C614(v45);
      if (!v24)
      {
LABEL_29:
        sub_20C0A7BE0(a3, v10, v10);
        if ((v30 & 1) != 0)
        {
          v31 = a4[1];
          if (v31 >= a4[2])
          {
            v32 = sub_20BFD7890(a4, v10);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)a4[1], v10);
            sub_20BFD6EA4((_DWORD *)(v31 + 4), (_DWORD *)v10 + 1);
            v32 = v31 + 8;
          }
          a4[1] = v32;
        }
        v12 = 1;
      }
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
    }
    while (v10 != v11);
  }
  v44 = &v49;
  sub_20BFD6F90((void ***)&v44);
  return v12 & 1;
}

void sub_20C3C5A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v20;

  a20 = (void **)(v20 - 104);
  sub_20BFD6F90(&a20);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargets(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2, unsigned int a3)
{
  unsigned int ForwardedTargetsImpl;
  uint64_t v4;
  char v6;
  uint64_t *v7;
  _QWORD *v8[2];
  uint64_t *v9;
  _QWORD *v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v8[1] = 0;
  v9 = (uint64_t *)v10;
  v7 = (uint64_t *)v8;
  v8[0] = 0;
  v6 = 0;
  ForwardedTargetsImpl = pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargetsImpl(a1, &v9, &v7, a2, &v6, a3);
  if (v6)
    v4 = 0;
  else
    v4 = ForwardedTargetsImpl;
  sub_20BFD7C28((uint64_t)&v7, v8[0]);
  sub_20BFD7C28((uint64_t)&v9, v10[0]);
  return v4;
}

void sub_20C3C5BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20BFD7C28((uint64_t)&a11, a12);
  sub_20BFD7C28((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2)
{
  _DWORD *v4;
  uint64_t v5;
  const char *Text;
  int v8;
  int v9;
  _QWORD v10[4];
  char v11;

  if (a2)
  {
    v5 = *a2;
    v4 = (_DWORD *)a2[1];
    if (v4 != (_DWORD *)*a2)
    {
      do
      {
        v4 -= 2;
        sub_20BFD6F64((uint64_t)(a2 + 2), v4);
      }
      while (v4 != (_DWORD *)v5);
    }
    a2[1] = v5;
    return pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargets(a1, a2, 0);
  }
  else
  {
    v10[0] = "usd/relationship.cpp";
    v10[1] = "GetForwardedTargets";
    v10[2] = 296;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(SdfPathVector *) const";
    v11 = 0;
    sub_20C348EEC((uint64_t)a1, &v8);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Passed null pointer for targets on <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_20BFD265C(&v8);
    return 0;
  }
}

void sub_20C3C5CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 424));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::_Create(pxrInternal__aapl__pxrReserved__::UsdRelationship *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  void *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v5;

  pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(this, a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  v2 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v5) ^ 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  return v2;
}

void sub_20C3C5D8C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_20C3C5DA0()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdResolveInfoSourceNone");
  sub_20BDDC0E4(__p, "No value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C539428, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdResolveInfoSourceFallback");
  sub_20BDDC0E4(__p, "Built-in fallback value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C539428, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdResolveInfoSourceDefault");
  sub_20BDDC0E4(__p, "Attribute default value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C539428, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdResolveInfoSourceTimeSamples");
  sub_20BDDC0E4(__p, "Attribute time samples");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C539428, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdResolveInfoSourceValueClips");
  sub_20BDDC0E4(__p, "Value clips");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C539428, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C3C5F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t NodeIteratorAtNode;
  uint64_t v12;
  _QWORD v14[2];

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(*(uint64_t **)a2, 6u, (uint64_t *)(a1 + 16));
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_20CA9D3F0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 32);
  NodeIteratorAtNode = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2, a3);
  *(_QWORD *)(a1 + 48) = NodeIteratorAtNode;
  *(_QWORD *)(a1 + 56) = v12;
  if (*(_QWORD *)(a1 + 32) != NodeIteratorAtNode || v12 != *(_QWORD *)(a1 + 40))
  {
    v14[0] = NodeIteratorAtNode;
    v14[1] = v12;
    *(_QWORD *)(a1 + 64) = sub_20C3C60B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14, a4);
  }
  return a1;
}

void sub_20C3C6098(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3C60B4(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, _QWORD *a2)
{
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v4;
  _QWORD *Layers;
  uint64_t (*v6)(uint64_t *);
  char v7;
  _QWORD *v8;
  _QWORD v10[4];
  char v11;

  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
  Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v4);
  v6 = sub_20BFD2F78(a2);
  v8 = (_QWORD *)*Layers;
  if (v7 & 1 | (unint64_t)v6)
  {
    while (v8 != (_QWORD *)Layers[1])
    {
      if (sub_20C1020E4(a2, v8))
        return v8;
      ++v8;
    }
    v10[0] = "usd/resolveTarget.cpp";
    v10[1] = "_GetLayerIteratorInNode";
    v10[2] = 50;
    v10[3] = "SdfLayerRefPtrVector::const_iterator pxrInternal__aapl__pxrReserved__::_GetLayerIteratorInNode(const PcpNod"
             "eRef &, const SdfLayerHandle &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer not present in node");
    return (_QWORD *)*Layers;
  }
  return v8;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(_QWORD *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, _QWORD *a4, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a5, _QWORD *a6)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t NodeIteratorAtNode;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  *a1 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  a1[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(*(uint64_t **)a2, 6u, a1 + 2);
  a1[8] = 0;
  a1[6] = 0;
  a1[7] = -1;
  a1[9] = 0;
  a1[10] = -1;
  a1[11] = 0;
  if (!*(_QWORD *)a5 || *((_QWORD *)a5 + 1) == -1)
  {
    NodeIteratorAtNode = a1[4];
    v17 = a1[5];
    v18 = NodeIteratorAtNode;
    v16 = v17;
  }
  else
  {
    NodeIteratorAtNode = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2, a5);
    v18 = a1[4];
    v17 = a1[5];
  }
  a1[9] = NodeIteratorAtNode;
  a1[10] = v16;
  if (v18 != NodeIteratorAtNode || v16 != v17)
  {
    v22 = NodeIteratorAtNode;
    v23 = v16;
    a1[11] = sub_20C3C60B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v22, a6);
  }
  v19 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2, a3);
  a1[6] = v19;
  a1[7] = v20;
  if (a1[4] != v19 || v20 != a1[5])
  {
    v22 = v19;
    v23 = v20;
    a1[8] = sub_20C3C60B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v22, a4);
  }
  return a1;
}

void sub_20C3C62B0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStartNode(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this)
{
  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 4) && *((_QWORD *)this + 7) == *((_QWORD *)this + 5))
    return 0;
  else
    return *((_QWORD *)this + 6);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStopNode(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this)
{
  if (*((_QWORD *)this + 9) == *((_QWORD *)this + 4) && *((_QWORD *)this + 10) == *((_QWORD *)this + 5))
    return 0;
  else
    return *((_QWORD *)this + 9);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStartLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 4) && *((_QWORD *)this + 7) == *((_QWORD *)this + 5))
  {
    v5 = 0;
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)**((_QWORD **)this + 8);
    sub_20BF1DD04((uint64_t *)&v5);
  }
  sub_20C1034E8(a2, (uint64_t *)&v5);
  return sub_20C103234(&v5);
}

void sub_20C3C637C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStopLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;

  if (*((_QWORD *)this + 9) == *((_QWORD *)this + 4) && *((_QWORD *)this + 10) == *((_QWORD *)this + 5))
  {
    v5 = 0;
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)**((_QWORD **)this + 11);
    sub_20BF1DD04((uint64_t *)&v5);
  }
  sub_20C1034E8(a2, (uint64_t *)&v5);
  return sub_20C103234(&v5);
}

void sub_20C3C63FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_Resolver *pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, char a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v7;
  _QWORD *Layers;
  _QWORD v10[2];
  _OWORD v11[2];

  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = -1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = -1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)v11);
  v4 = v11[1];
  *((_OWORD *)this + 1) = v11[0];
  *((_OWORD *)this + 2) = v4;
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes((uint64_t)this);
  v5 = *((_QWORD *)this + 3);
  if (*((_OWORD *)this + 1) != *((_OWORD *)this + 2))
  {
    v10[0] = *((_QWORD *)this + 2);
    v10[1] = v5;
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10);
    v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
    *((_QWORD *)this + 6) = *Layers;
    *((_QWORD *)this + 7) = Layers[1];
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v1 = (_QWORD *)this;
  v2 = *(_QWORD *)(this + 16);
  v3 = *(_QWORD *)(this + 24);
  v5 = v2 != *(_QWORD *)(this + 32) || v3 != *(_QWORD *)(this + 40);
  if (*(_BYTE *)(this + 8))
  {
    if (v5)
    {
      do
      {
        v10 = v2;
        v11 = v3;
        this = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v10);
        if ((_DWORD)this)
        {
          v6 = v1[3];
          v9[0] = v1[2];
          v9[1] = v6;
          this = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v9);
          if ((this & 1) == 0)
            break;
        }
        v2 = v1[2];
        v3 = v1[3] + 1;
        v1[3] = v3;
      }
      while (v2 != v1[4] || v3 != v1[5]);
    }
  }
  else if (v5)
  {
    do
    {
      v10 = v2;
      v11 = v3;
      this = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v10);
      if (!(_DWORD)this)
        break;
      v2 = v1[2];
      v3 = v1[3] + 1;
      v1[3] = v3;
    }
    while (v2 != v1[4] || v3 != v1[5]);
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::Usd_Resolver *pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this, uint64_t **a2, char a3)
{
  _OWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v12;
  const char *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v15;
  uint64_t *Layers;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  const char *v24;
  __int128 v25;
  char v26;

  *((_QWORD *)this + 2) = 0;
  v4 = (_OWORD *)((char *)this + 16);
  *((_BYTE *)this + 8) = a3;
  *((_QWORD *)this + 3) = -1;
  *((_QWORD *)this + 4) = 0;
  v5 = (_OWORD *)((char *)this + 32);
  *((_QWORD *)this + 5) = -1;
  *((_QWORD *)this + 6) = 0;
  v6 = (_QWORD *)((char *)this + 48);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a2;
  if (!a2)
  {
    v23 = "usd/resolver.cpp";
    v24 = "Usd_Resolver";
    *(_QWORD *)&v25 = 61;
    *((_QWORD *)&v25 + 1) = "pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver(const UsdResolveTarget *, BOOL)";
    v26 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "_resolveTarget", 0))
    {
      *(_QWORD *)this = 0;
      return this;
    }
    a2 = (uint64_t **)*((_QWORD *)this + 8);
  }
  v7 = *a2;
  *(_QWORD *)this = *a2;
  *v4 = *((_OWORD *)a2 + 3);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v7, 6u, (uint64_t *)&v23);
  *v5 = v25;
  v8 = *((_QWORD *)this + 8);
  if (*(_OWORD *)(v8 + 72) != *((_OWORD *)this + 2))
  {
    *v5 = *(_OWORD *)(v8 + 72);
    v10 = *(char **)(v8 + 72);
    v9 = *(const char **)(v8 + 80);
    v23 = v10;
    v24 = v9;
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
    v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    if (*(_QWORD *)(*((_QWORD *)this + 8) + 88) != *(_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v12))
      ++*((_QWORD *)this + 5);
  }
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes((uint64_t)this);
  v13 = (const char *)*((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 4) || v13 != *((const char **)this + 5))
  {
    v23 = (char *)*((_QWORD *)this + 2);
    v24 = v13;
    v14 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
    v15 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v14);
    Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v15);
    v17 = (_QWORD *)*((_QWORD *)this + 8);
    v19 = *((_QWORD *)this + 2);
    v18 = *((_QWORD *)this + 3);
    if (v19 == v17[6] && v18 == v17[7])
      v20 = v17[8];
    else
      v20 = *Layers;
    *v6 = v20;
    if (v19 == v17[9] && v18 == v17[10])
      v21 = v17[11];
    else
      v21 = Layers[1];
    *((_QWORD *)this + 7) = v21;
  }
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v10[2];

  ++*((_QWORD *)this + 3);
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 4) || v3 != *((_QWORD *)this + 5))
  {
    v10[0] = *((_QWORD *)this + 2);
    v10[1] = v3;
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10);
    v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
    result = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
    *((_QWORD *)this + 6) = *result;
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    if (v7 && (*((_QWORD *)this + 2) == v7[9] ? (v8 = *((_QWORD *)this + 3) == v7[10]) : (v8 = 0), v8))
      v9 = v7[11];
    else
      v9 = result[1];
    *((_QWORD *)this + 7) = v9;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 6) + 8;
  *((_QWORD *)this + 6) = v2;
  if (v2 == v1)
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode(this);
  return v2 == v1;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = off_24C539448;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  return this;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = off_24C539448;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  return this;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaBase::~UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;

  *(_QWORD *)this = off_24C539448;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_20BFD265C((_DWORD *)this + 4);
  v2 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  if (v2)
    sub_20C35C614(v2);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::~UsdSchemaBase(this);
  operator delete(v1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetSchemaClassPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v3;
  _QWORD *result;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)this + 40))(this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName(v3, (unsigned int **)&v7);
  if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)this + 16))(this) == 5
    || (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)this + 16))(this) == 6)
  {
    result = sub_20BF2B2B4((_QWORD *)(Instance + 72), &v7);
  }
  else
  {
    result = sub_20BF2B2B4((_QWORD *)(Instance + 32), &v7);
  }
  if (result)
    result = (_QWORD *)result[3];
  if ((v7 & 7) != 0)
  {
    v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254988928);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988928))
  {
    __cxa_guard_release(&qword_254988928);
  }
  return &qword_254988920;
}

void sub_20C3C6AA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988928);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_GetStaticTfType(this);
  return &qword_254988920;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, char a4@<W3>, int a5@<W4>, std::type_info *a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  int IsDefined;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  _BYTE v25[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_20C35C4F8((uint64_t)v25, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if (a7 && (a4 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v25, a2, a8);
    v31 = 0;
    if (!a6->__type_name
      || !pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a8)
      && pxrInternal__aapl__pxrReserved__::UsdAttribute::Get(a8, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v30, NAN)&& (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v30, a6, v15) & 1) != 0)
    {
      sub_20BF4C2D8((uint64_t)v30);
      goto LABEL_18;
    }
    sub_20BF4C2D8((uint64_t)v30);
    v16 = *(_QWORD *)(a8 + 24);
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a8 + 20));
    sub_20BFD265C((_DWORD *)(a8 + 16));
    v19 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a8 + 8);
    if (v19)
      sub_20C35C614(v19);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)v25, (uint64_t *)a2, a3, a4, a5, a8);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a8, v20);
  if (a6->__type_name)
    v22 = IsDefined;
  else
    v22 = 0;
  if (v22 == 1)
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a8, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a6, NAN);
LABEL_18:
  if ((v29 & 7) != 0)
  {
    v23 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (v26)
    sub_20C35C614(v26);
}

void sub_20C3C6C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3C6CEC()
{
  return 1;
}

uint64_t *sub_20C3C6CF4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C3C6DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAE5F8ELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)operator new(0x80uLL);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::UsdSchemaRegistry(v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegis"
                "try>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegis"
                "try>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_17UsdSchemaRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20C3C6FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistr"
            "y>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::DeleteInstance()
{
  unint64_t i;
  unint64_t v1;
  const void *v2;
  unsigned int **v3;
  void **v4;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance))
      {
        sub_20BF49F14((_QWORD ***)(i + 120), 0);
        sub_20C3CEED4(i + 72);
        sub_20C3CEED4(i + 32);
        v4 = (void **)(i + 8);
        sub_20C248B78(&v4);
        v3 = sub_20BEBCE60((unsigned int **)i, v2);
        operator delete(v3);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

void sub_20C3C7180()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA);
  }
}

void sub_20C3C71C4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t *EmptyString;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string __dst;
  int v14;

  v14 = (int)a2;
  if ((_DWORD)a2)
  {
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      v8 = *(_OWORD *)EmptyString;
      __dst.__r_.__value_.__r.__words[2] = EmptyString[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
    }
    std::string::append(&__dst, "_");
    sub_20BFECAD8();
    if ((v12 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v12 & 0x80u) == 0)
      v10 = v12;
    else
      v10 = (std::string::size_type)__p[1];
    std::string::append(&__dst, (const std::string::value_type *)v9, v10);
    if ((char)v12 < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *a3 = *(unsigned int **)this;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        *a3 = v6;
    }
  }
}

void sub_20C3C7310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, uint64_t a2@<X8>)
{
  const std::string *EmptyString;
  std::string::size_type v6;
  std::string::size_type v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  std::string __p;
  std::string v15;
  uint64_t v16;
  char v17;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v6 = sub_20C3C74D0((uint64_t)EmptyString);
  if (v6 == -1)
  {
    v11 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v11 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)a2 = v11;
    *(_DWORD *)(a2 + 8) = 0;
  }
  else
  {
    v7 = v6;
    std::string::basic_string(&v15, EmptyString, 0, v6, (std::allocator<char> *)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
    std::string::basic_string(&__p, EmptyString, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
    v8 = sub_20C3C7548(&__p, 0);
    *(_QWORD *)a2 = v16;
    v16 = 0;
    *(_DWORD *)(a2 + 8) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v16 & 7) != 0)
      {
        v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_20C3C7474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  unsigned int *v22;
  unsigned int v23;

  if (a14 < 0)
    operator delete(__p);
  if ((a21 & 7) != 0)
  {
    v22 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3C74D0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;

  v1 = (_QWORD *)a1;
  v2 = *(unsigned __int8 *)(a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  result = v2 - 2;
  if (v2 < 2)
    return -1;
  if (v3 < 0)
    v1 = (_QWORD *)*v1;
  if (*((char *)v1 + v2 - 1) < 0
    || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *((unsigned __int8 *)v1 + v2 - 1) + 60) & 0x400) == 0)
  {
    return -1;
  }
  while (1)
  {
    v5 = *((unsigned __int8 *)v1 + result);
    if (v5 == 95)
      break;
    if ((v5 & 0x80) == 0)
    {
      --result;
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v5 + 60) & 0x400) != 0)
        continue;
    }
    return -1;
  }
  return result;
}

uint64_t sub_20C3C7548(const std::string *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD v5[12];
  char v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  sub_20C3CEF6C(v5, a1, 8);
  MEMORY[0x212B92B2C](v5, &v8);
  if (a2 && (*((_BYTE *)&v5[4] + *(_QWORD *)(v5[0] - 24)) & 5) != 0)
    *a2 = 0;
  v3 = v8;
  v5[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v5[2] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212B92EB0](&v7);
  return v3;
}

void sub_20C3C762C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3CF050((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaFamily(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char *EmptyString;
  char *v4;
  int v5;
  BOOL v6;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v15;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (char *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  if (EmptyString[23] >= 0)
    v4 = EmptyString;
  else
    v4 = *(char **)EmptyString;
  v5 = *v4;
  if (*v4)
    v6 = (v5 - 48) >= 0xA;
  else
    v6 = 0;
  if (!v6)
    return 0;
  if (v5 != 95 && (v5 & 0xFFFFFFDF) - 65 > 0x19)
    return 0;
  do
  {
    v9 = *v4++;
    v8 = v9;
    v10 = (v9 & 0xFFFFFFDF) - 65;
    v11 = v9 - 48;
  }
  while (v9 == 95 || v10 < 0x1A || v11 < 0xA);
  if (v8)
    return 0;
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v15 = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
  return sub_20C3C74D0((uint64_t)v15) == -1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaIdentifier(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  _BOOL8 result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;

  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(this, (uint64_t)&v10);
  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaFamily((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v10, v3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)v11, (unsigned int **)&v9);
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    result = (v9 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 7) != 0)
    {
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  if ((v10 & 7) != 0)
  {
    v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

void sub_20C3C7798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a11 & 7) != 0)
  {
    v11 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  _QWORD *v3;

  sub_20C3C77FC();
  v3 = sub_20BEDA270(&xmmword_2549889A8, this);
  if (v3)
    return v3 + 3;
  else
    return 0;
}

void sub_20C3C77FC()
{
  unsigned __int8 v0;
  uint64_t v1;
  const std::type_info *v2;
  char *v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2549889F8);
  if ((v0 & 1) == 0)
  {
    v1 = __cxa_guard_acquire(&qword_2549889F8);
    if ((_DWORD)v1)
    {
      sub_20C3CCB24(v1, v2, v3);
      __cxa_atexit((void (*)(void *))sub_20C3CCF98, &xmmword_2549889A8, &dword_20BDBC000);
      __cxa_guard_release(&qword_2549889F8);
    }
  }
}

void sub_20C3C7868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549889F8);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  sub_20C3C77FC();
  result = sub_20BF2B2B4(xmmword_2549889D0, this);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

{
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;

  if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaFamily(this, a2))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion(this, a2, (unsigned int **)&v8);
  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v8, v4);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v3;
  unsigned __int8 v5;

  sub_20C3C79E4();
  v3 = sub_20C3C7A68(this);
  if (v3)
    return v3 + 3;
  v5 = atomic_load((unsigned __int8 *)&qword_254988948);
  if ((v5 & 1) != 0)
    return &qword_254988930;
  if (__cxa_guard_acquire(&qword_254988948))
  {
    qword_254988930 = 0;
    *(_QWORD *)algn_254988938 = 0;
    qword_254988940 = 0;
    __cxa_atexit((void (*)(void *))sub_20C3C7B44, &qword_254988930, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988948);
  }
  return &qword_254988930;
}

void sub_20C3C79E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254988A28);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254988A28))
    {
      sub_20C3CD338();
      __cxa_atexit((void (*)(void *))sub_20C3CD87C, &xmmword_254988A00, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988A28);
    }
  }
}

void sub_20C3C7A50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988A28);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3C7A68(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!*((_QWORD *)&xmmword_254988A00 + 1))
    return 0;
  v1 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v2 = bswap64(0x9E3779B97F4A7C55 * v1);
  v3 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_254988A00 + 8));
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = v2;
    if (v2 >= *((_QWORD *)&xmmword_254988A00 + 1))
      v4 = v2 % *((_QWORD *)&xmmword_254988A00 + 1);
  }
  else
  {
    v4 = v2 & (*((_QWORD *)&xmmword_254988A00 + 1) - 1);
  }
  v5 = *(_QWORD **)(xmmword_254988A00 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v2 == v7)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v1)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *((_QWORD *)&xmmword_254988A00 + 1))
            v7 %= *((_QWORD *)&xmmword_254988A00 + 1);
        }
        else
        {
          v7 &= *((_QWORD *)&xmmword_254988A00 + 1) - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20C3C7B44(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  sub_20C3C79E4();
  result = sub_20C3C7A68(a1);
  if (result)
  {
    switch(a3)
    {
      case 0:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        return sub_20C3CDBAC(a4, (const void *)result[3], result[4], (uint64_t)(result[4] - result[3]) >> 3);
      case 1:
        v9 = (char *)result[3];
        v10 = result[4];
        if ((char *)v10 != v9)
        {
          v11 = (v10 - (uint64_t)v9) >> 3;
          v10 = result[3];
          do
          {
            v12 = v11 >> 1;
            v13 = (uint64_t *)(v10 + 8 * (v11 >> 1));
            v15 = *v13;
            v14 = v13 + 1;
            v11 += ~(v11 >> 1);
            if (*(_DWORD *)(v15 + 24) > a2)
              v10 = (uint64_t)v14;
            else
              v11 = v12;
          }
          while (v11);
        }
        break;
      case 2:
        v9 = (char *)result[3];
        v10 = result[4];
        if ((char *)v10 != v9)
        {
          v16 = (v10 - (uint64_t)v9) >> 3;
          v10 = result[3];
          do
          {
            v17 = v16 >> 1;
            v18 = (uint64_t *)(v10 + 8 * (v16 >> 1));
            v20 = *v18;
            v19 = v18 + 1;
            v16 += ~(v16 >> 1);
            if (*(_DWORD *)(v20 + 24) < a2)
              v16 = v17;
            else
              v10 = (uint64_t)v19;
          }
          while (v16);
        }
        break;
      case 3:
        v9 = (char *)result[3];
        v10 = result[4];
        if ((char *)v10 == v9)
          goto LABEL_33;
        v21 = (v10 - (uint64_t)v9) >> 3;
        do
        {
          v22 = v21 >> 1;
          v23 = &v9[8 * (v21 >> 1)];
          v25 = *(_QWORD *)v23;
          v24 = v23 + 8;
          v21 += ~(v21 >> 1);
          if (*(_DWORD *)(v25 + 24) < a2)
            v21 = v22;
          else
            v9 = v24;
        }
        while (v21);
        break;
      case 4:
        v9 = (char *)result[3];
        v10 = result[4];
        if ((char *)v10 == v9)
        {
LABEL_33:
          v9 = (char *)v10;
        }
        else
        {
          v26 = (v10 - (uint64_t)v9) >> 3;
          do
          {
            v27 = v26 >> 1;
            v28 = &v9[8 * (v26 >> 1)];
            v30 = *(_QWORD *)v28;
            v29 = v28 + 8;
            v26 += ~(v26 >> 1);
            if (*(_DWORD *)(v30 + 24) > a2)
              v9 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        break;
      default:
        goto LABEL_4;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_20C3CDC24(a4, v9, v10, (v10 - (uint64_t)v9) >> 3);
  }
  else
  {
LABEL_4:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, unsigned int **a2@<X8>)
{
  _QWORD *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20C3C77FC();
  result = sub_20BEDA270(&xmmword_2549889A8, this);
  if (!result)
  {
    v7 = 0;
LABEL_8:
    *a2 = v7;
    return result;
  }
  v6 = (unsigned int *)result[3];
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      goto LABEL_8;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteSchemaTypeName@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, unsigned int **a2@<X8>)
{
  _QWORD *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20C3C77FC();
  result = sub_20BEDA270(&xmmword_2549889A8, this);
  if (!result || *((_DWORD *)result + 13) != 3)
  {
    v7 = 0;
LABEL_9:
    *a2 = v7;
    return result;
  }
  v6 = (unsigned int *)result[3];
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      goto LABEL_9;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaTypeName@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, unsigned int **a2@<X8>)
{
  _QWORD *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  sub_20C3C77FC();
  result = sub_20BEDA270(&xmmword_2549889A8, this);
  if (!result || (*((_DWORD *)result + 13) - 4) > 2)
  {
    v7 = 0;
LABEL_9:
    *a2 = v7;
    return result;
  }
  v6 = (unsigned int *)result[3];
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      goto LABEL_9;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *SchemaInfo;
  uint64_t v4;

  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (SchemaInfo)
    return SchemaInfo[1];
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v4);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *SchemaInfo;
  uint64_t v4;

  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (SchemaInfo && *((_DWORD *)SchemaInfo + 7) == 3)
    return SchemaInfo[1];
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v4);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPITypeFromSchemaTypeName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *SchemaInfo;
  uint64_t v4;

  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (SchemaInfo && (*((_DWORD *)SchemaInfo + 7) - 4) <= 2)
    return SchemaInfo[1];
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v4);
  return v4;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  _QWORD *result;

  sub_20C3C77FC();
  result = sub_20BEDA270(&xmmword_2549889A8, this);
  if (result)
    return (_QWORD *)*((unsigned int *)result + 13);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result)
    return (_QWORD *)*((unsigned int *)result + 7);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsConcrete(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) == 3;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsConcrete(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result)
    return (_QWORD *)(*((_DWORD *)result + 7) == 3);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAbstract(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) - 1 < 2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAbstract(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result)
    return (_QWORD *)((*((_DWORD *)result + 7) - 1) < 2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsMultipleApplyAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) == 6;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsMultipleApplyAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result)
    return (_QWORD *)(*((_DWORD *)result + 7) == 6);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAppliedAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) - 5 < 2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAppliedAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result)
    return (_QWORD *)((*((_DWORD *)result + 7) - 5) < 2);
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameTemplate(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  sub_20C3C8170();
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a1, (uint64_t)&qword_254988A30, (uint64_t)v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((char *)v6, a2, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_20C3C813C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_20C3C8170()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254988A48);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254988A48))
    {
      sub_20BDDC0E4(&qword_254988A30, "__INSTANCE_NAME__");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254988A30, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988A48);
    }
  }
}

void sub_20C3C81EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988A48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string __p;

  v6 = sub_20C3C8308((std::string *)a1);
  if (v6 == -1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  }
  else
  {
    v7 = v6;
    if (*(char *)(a1 + 23) < 0)
      sub_20BDDBFAC(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    sub_20C3C8170();
    if (byte_254988A47 >= 0)
      v8 = byte_254988A47;
    else
      v8 = qword_254988A38;
    v9 = *(char *)(a2 + 23);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)a2;
    else
      v10 = *(const std::string::value_type **)a2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    std::string::replace(&__p, v7, v8, v10, v11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C3C82EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_20C3C8308(std::string *this)
{
  unsigned __int8 v2;
  std::string::size_type size;
  std::string::size_type v4;
  std::string::size_type v5;
  size_t v6;
  unint64_t v7;
  std::string::size_type v8;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type v13;
  uint64_t *v14;
  size_t v15;
  std::string::size_type v17;
  uint64_t v19;

  v2 = atomic_load((unsigned __int8 *)&qword_254988A58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254988A58))
  {
    sub_20C3C8170();
    v19 = qword_254988A38;
    if (byte_254988A47 >= 0)
      v19 = byte_254988A47;
    qword_254988A50 = v19;
    __cxa_guard_release(&qword_254988A58);
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = 0;
    do
    {
      v5 = std::string::find(this, 58, v4);
      if (v5 == -1)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          v5 = this->__r_.__value_.__l.__size_;
        else
          v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      v6 = v5 - v4;
      if (v5 - v4 == qword_254988A50)
      {
        sub_20C3C8170();
        if (byte_254988A47 >= 0)
          v7 = byte_254988A47;
        else
          v7 = qword_254988A38;
        v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          v11 = this->__r_.__value_.__l.__size_;
          if (v7 == -1 || v11 < v4)
LABEL_48:
            sub_20BEB9180();
          v13 = v11 - v4;
          if (v13 < v6)
            v6 = v13;
          v10 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v7 == -1 || v8 < v4)
            goto LABEL_48;
          if (v8 - v4 < v6)
            v6 = v8 - v4;
          v10 = this;
        }
        if (byte_254988A47 >= 0)
          v14 = &qword_254988A30;
        else
          v14 = (uint64_t *)qword_254988A30;
        if (v6 >= v7)
          v15 = v7;
        else
          v15 = v6;
        if (!memcmp((char *)v10 + v4, v14, v15) && v6 == v7)
          return v4;
      }
      else
      {
        v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      v4 = v5 + 1;
      if ((v8 & 0x80u) == 0)
        v17 = v8;
      else
        v17 = this->__r_.__value_.__l.__size_;
    }
    while (v4 < v17);
  }
  return -1;
}

void sub_20C3C84B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988A58);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v4;
  std::string::size_type v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string __p;
  char v10;

  v4 = sub_20C3C8308((std::string *)a1);
  if (v4 == -1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    v5 = v4;
    sub_20C3C8170();
    v6 = qword_254988A38;
    if (byte_254988A47 >= 0)
      v6 = byte_254988A47;
    v7 = v5 + v6 + 1;
    v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 8);
    if (v7 >= v8)
    {
      *a2 = 0;
    }
    else
    {
      std::string::basic_string(&__p, (const std::string *)a1, v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20C3C85A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsMultipleApplyNameTemplate(std::string *a1)
{
  return sub_20C3C8308(a1) != -1;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::CollectAddtionalAutoApplyAPISchemasFromPlugins(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1)
{
  _BYTE *v2;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Instance;
  uint64_t *v4;
  uint64_t *i;
  const void ***v6;
  unint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *JsObject;
  unint64_t **v16;
  unint64_t **v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  const char *v23;
  const char *v24;
  char *v25;
  std::string *p_p;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t **v31;
  BOOL v32;
  std::string __p;
  __n128 v34;
  uint64_t v35;
  void **v36[3];
  uint64_t *v37;
  uint64_t *v38;

  v2 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
  if (!v2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
    v2 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
  }
  if (!*v2)
  {
    Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v37, Instance);
    v4 = v37;
    for (i = v38; v4 != i; v4 += 2)
    {
      v6 = (const void ***)sub_20BF444D8(v4);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v6, (uint64_t *)v36);
      v7 = sub_20C3C8960();
      v8 = (unint64_t **)sub_20C0E9D5C((pxrInternal__aapl__pxrReserved__::TfToken *)v36, (_QWORD *)(v7 + 120));
      if (v8)
      {
        if (sub_20C286E00(0))
        {
          v9 = sub_20BF444D8(v4);
          v10 = (_QWORD *)(v9 + 8);
          if (*(char *)(v9 + 31) < 0)
            v10 = (_QWORD *)*v10;
          v11 = sub_20BF444D8(v4);
          v14 = (_QWORD *)(v11 + 32);
          if (*(char *)(v11 + 55) < 0)
            v14 = (_QWORD *)*v14;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Collecting additional auto apply API schemas from 'AutoApplyAPISchemas' metadata in plugin '%s' at path '%s'.", v12, v13, v10, v14);
        }
        JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v8);
        v17 = (unint64_t **)(JsObject + 1);
        v16 = (unint64_t **)*JsObject;
        if ((_QWORD *)*JsObject != JsObject + 1)
        {
          do
          {
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v16 + 7)))
            {
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v35);
              v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v16 + 7);
              v19 = sub_20C3C8960();
              sub_20C3C94AC(v18, (_QWORD *)(v19 + 32), &v34);
              if (v34.n128_u64[0] != v34.n128_u64[1])
              {
                if (sub_20C286E00(0))
                {
                  v20 = sub_20BF444D8(v4);
                  v21 = (_QWORD *)(v20 + 8);
                  if (*(char *)(v20 + 31) < 0)
                    v21 = (_QWORD *)*v21;
                  v22 = v35 & 0xFFFFFFFFFFFFFFF8;
                  if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v23 = (const char *)(v22 + 16);
                    if (*(char *)(v22 + 39) < 0)
                      v23 = *(const char **)v23;
                  }
                  else
                  {
                    v23 = "";
                  }
                  sub_20C3AD8D0(", ", (std::string *)v34.n128_u64[0], (std::string *)v34.n128_u64[1], &__p);
                  p_p = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Plugin '%s' is adding automatic application of API schema '%s' to the following schema types: [%s].\n", v24, v25, v21, v23, p_p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                }
                v27 = sub_20BF2B388(a1, &v35);
                if (v27)
                  sub_20C1292A0(v27 + 3, (_QWORD *)v27[4], (uint64_t *)v34.n128_u64[0], (uint64_t *)v34.n128_u64[1], (uint64_t)(v34.n128_u64[1] - v34.n128_u64[0]) >> 3);
                else
                  sub_20C3CF274((uint64_t)a1, &v35, &v35, &v34);
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
              sub_20BEEB2B8((void ***)&__p);
              if ((v35 & 7) != 0)
              {
                v28 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
                do
                  v29 = __ldxr(v28);
                while (__stlxr(v29 - 2, v28));
              }
            }
            v30 = v16[1];
            if (v30)
            {
              do
              {
                v31 = (unint64_t **)v30;
                v30 = (unint64_t *)*v30;
              }
              while (v30);
            }
            else
            {
              do
              {
                v31 = (unint64_t **)v16[2];
                v32 = *v31 == (unint64_t *)v16;
                v16 = v31;
              }
              while (!v32);
            }
            v16 = v31;
          }
          while (v31 != v17);
        }
      }
      sub_20BE78E5C((uint64_t)v36, v36[1]);
    }
    v36[0] = (void **)&v37;
    sub_20BEB4844(v36);
  }
}

void sub_20C3C88B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25)
{
  sub_20BE78E5C((uint64_t)&a22, a23);
  a18 = &a25;
  sub_20BEB4844((void ***)&a18);
  _Unwind_Resume(a1);
}

unint64_t sub_20C3C8960()
{
  unint64_t *v0;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  void ***v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v0 = (unint64_t *)atomic_load(&qword_254988950);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0x98uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "appliedAPISchemas", 0);
    v107 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "multipleApplyAPISchemas", 0);
    v106 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "multipleApplyAPISchemaPrefixes", 0);
    v105 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "autoApplyAPISchemas", 0);
    v104 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "apiSchemaAutoApplyTo", 0);
    v103 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "apiSchemaCanOnlyApplyTo", 0);
    v102 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "apiSchemaAllowedInstanceNames", 0);
    v101 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "apiSchemaInstances", 0);
    v100 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "schemaKind", 0);
    v2 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "nonAppliedAPI", 0);
    v3 = (uint64_t *)(v0 + 10);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 10, "singleApplyAPI", 0);
    v4 = (uint64_t *)(v0 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 11, "multipleApplyAPI", 0);
    v5 = (uint64_t *)(v0 + 12);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 12, "concreteTyped", 0);
    v6 = (uint64_t *)(v0 + 13);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 13, "abstractTyped", 0);
    v7 = (uint64_t *)(v0 + 14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 14, "abstractBase", 0);
    v8 = (uint64_t *)(v0 + 15);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 15, "AutoApplyAPISchemas", 0);
    v9 = *v0;
    v108 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v108 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *v107;
    v109 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v109 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *v106;
    v110 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v110 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *v105;
    v111 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v111 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = *v104;
    v112 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v112 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = *v103;
    v113 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v113 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = *v102;
    v114 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v114 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = *v101;
    v115 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v115 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = *v100;
    v116 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        v116 &= 0xFFFFFFFFFFFFFFF8;
    }
    v36 = *v2;
    v117 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 2, v37));
      if ((v38 & 1) == 0)
        v117 &= 0xFFFFFFFFFFFFFFF8;
    }
    v39 = *v3;
    v118 = v39;
    if ((v39 & 7) != 0)
    {
      v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 2, v40));
      if ((v41 & 1) == 0)
        v118 &= 0xFFFFFFFFFFFFFFF8;
    }
    v42 = *v4;
    v119 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 2, v43));
      if ((v44 & 1) == 0)
        v119 &= 0xFFFFFFFFFFFFFFF8;
    }
    v45 = *v5;
    v120 = v45;
    if ((v45 & 7) != 0)
    {
      v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 2, v46));
      if ((v47 & 1) == 0)
        v120 &= 0xFFFFFFFFFFFFFFF8;
    }
    v48 = *v6;
    v121 = v48;
    if ((v48 & 7) != 0)
    {
      v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 2, v49));
      if ((v50 & 1) == 0)
        v121 &= 0xFFFFFFFFFFFFFFF8;
    }
    v51 = *v7;
    v122 = v51;
    if ((v51 & 7) != 0)
    {
      v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 2, v52));
      if ((v53 & 1) == 0)
        v122 &= 0xFFFFFFFFFFFFFFF8;
    }
    v54 = *v8;
    v123 = v54;
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 2, v55));
      if ((v56 & 1) == 0)
        v123 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[16] = 0;
    v0[17] = 0;
    v0[18] = 0;
    v57 = operator new(0x80uLL);
    v58 = 0;
    v0[16] = (unint64_t)v57;
    v0[17] = (unint64_t)v57;
    v0[18] = (unint64_t)(v57 + 16);
    do
    {
      v59 = *(&v108 + v58);
      *v57 = v59;
      if ((v59 & 7) != 0)
      {
        v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 2, v60));
        if ((v61 & 1) == 0)
          *v57 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v58;
      ++v57;
    }
    while (v58 != 16);
    v62 = (void ***)&v124;
    v0[17] = (unint64_t)v57;
    do
    {
      v64 = (uint64_t)*--v62;
      v63 = v64;
      if ((v64 & 7) != 0)
      {
        v65 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
    }
    while (v62 != (void ***)&v108);
    while (!__ldaxr(&qword_254988950))
    {
      if (!__stlxr((unint64_t)v0, &qword_254988950))
        return (unint64_t)v0;
    }
    __clrex();
    v108 = (unint64_t)(v0 + 16);
    sub_20BEEB2B8((void ***)&v108);
    if ((*v8 & 7) != 0)
    {
      v68 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    if ((*v7 & 7) != 0)
    {
      v70 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stlxr(v71 - 2, v70));
    }
    if ((*v6 & 7) != 0)
    {
      v72 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v73 = __ldxr(v72);
      while (__stlxr(v73 - 2, v72));
    }
    if ((*v5 & 7) != 0)
    {
      v74 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stlxr(v75 - 2, v74));
    }
    if ((*v4 & 7) != 0)
    {
      v76 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
    if ((*v3 & 7) != 0)
    {
      v78 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stlxr(v79 - 2, v78));
    }
    if ((*v2 & 7) != 0)
    {
      v80 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v81 = __ldxr(v80);
      while (__stlxr(v81 - 2, v80));
    }
    if ((*v100 & 7) != 0)
    {
      v82 = (unsigned int *)(*v100 & 0xFFFFFFFFFFFFFFF8);
      do
        v83 = __ldxr(v82);
      while (__stlxr(v83 - 2, v82));
    }
    if ((*v101 & 7) != 0)
    {
      v84 = (unsigned int *)(*v101 & 0xFFFFFFFFFFFFFFF8);
      do
        v85 = __ldxr(v84);
      while (__stlxr(v85 - 2, v84));
    }
    if ((*v102 & 7) != 0)
    {
      v86 = (unsigned int *)(*v102 & 0xFFFFFFFFFFFFFFF8);
      do
        v87 = __ldxr(v86);
      while (__stlxr(v87 - 2, v86));
    }
    if ((*v103 & 7) != 0)
    {
      v88 = (unsigned int *)(*v103 & 0xFFFFFFFFFFFFFFF8);
      do
        v89 = __ldxr(v88);
      while (__stlxr(v89 - 2, v88));
    }
    if ((*v104 & 7) != 0)
    {
      v90 = (unsigned int *)(*v104 & 0xFFFFFFFFFFFFFFF8);
      do
        v91 = __ldxr(v90);
      while (__stlxr(v91 - 2, v90));
    }
    if ((*v105 & 7) != 0)
    {
      v92 = (unsigned int *)(*v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stlxr(v93 - 2, v92));
    }
    if ((*v106 & 7) != 0)
    {
      v94 = (unsigned int *)(*v106 & 0xFFFFFFFFFFFFFFF8);
      do
        v95 = __ldxr(v94);
      while (__stlxr(v95 - 2, v94));
    }
    if ((*v107 & 7) != 0)
    {
      v96 = (unsigned int *)(*v107 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if ((*v0 & 7) != 0)
    {
      v98 = (unsigned int *)(*v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v99 = __ldxr(v98);
      while (__stlxr(v99 - 2, v98));
    }
    operator delete(v0);
    return atomic_load(&qword_254988950);
  }
  return (unint64_t)v0;
}

void sub_20C3C91C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, void **a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;

  sub_20BEEB2B8(&a17);
  v44 = &a35;
  while (1)
  {
    v46 = *--v44;
    v45 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
    if (v44 == (uint64_t *)&a19)
    {
      if ((*v41 & 7) != 0)
      {
        v49 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v40 & 7) != 0)
      {
        v51 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v39 & 7) != 0)
      {
        v53 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v38 & 7) != 0)
      {
        v55 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*v37 & 7) != 0)
      {
        v57 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v36 & 7) != 0)
      {
        v59 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if ((*v42 & 7) != 0)
      {
        v61 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((*a9 & 7) != 0)
      {
        v63 = (unsigned int *)(*a9 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      if ((*a10 & 7) != 0)
      {
        v65 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      if ((*a11 & 7) != 0)
      {
        v67 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      if ((*a12 & 7) != 0)
      {
        v69 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      if ((*a13 & 7) != 0)
      {
        v71 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      if ((*a14 & 7) != 0)
      {
        v73 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      if ((*a15 & 7) != 0)
      {
        v75 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      if ((*a16 & 7) != 0)
      {
        v77 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      if ((*v35 & 7) != 0)
      {
        v79 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      operator delete(v35);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C3C946C()
{
  JUMPOUT(0x20C3C9364);
}

void sub_20C3C9474()
{
  JUMPOUT(0x20C3C9388);
}

void sub_20C3C947C()
{
  JUMPOUT(0x20C3C93ACLL);
}

void sub_20C3C9484()
{
  JUMPOUT(0x20C3C93D0);
}

void sub_20C3C948C()
{
  JUMPOUT(0x20C3C93F4);
}

void sub_20C3C9494()
{
  JUMPOUT(0x20C3C9418);
}

void sub_20C3C949C()
{
  JUMPOUT(0x20C3C943CLL);
}

void sub_20C3C94A4()
{
  JUMPOUT(0x20C3C945CLL);
}

void sub_20C3C94AC(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::JsValue *v5;
  unint64_t **v6;
  unint64_t JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v8;
  pxrInternal__aapl__pxrReserved__::JsValue *v9;
  unint64_t v10;
  const char *v11;
  pxrInternal__aapl__pxrReserved__::JsValue **v12;
  pxrInternal__aapl__pxrReserved__::JsValue *v13;
  pxrInternal__aapl__pxrReserved__::JsValue *v14;
  __int128 *v15;
  unint64_t String;
  __int128 v17;
  __int128 v18;
  __int128 *v19[3];
  __int128 __dst;
  uint64_t v21;
  const char *v22;
  char v23;

  v5 = (pxrInternal__aapl__pxrReserved__::JsValue *)sub_20C0E9D5C(a1, a2);
  if (!v5)
  {
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v6 = (unint64_t **)v5;
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray(v5))
  {
LABEL_7:
    *(_QWORD *)&__dst = "usd/schemaRegistry.cpp";
    *((_QWORD *)&__dst + 1) = "_GetNameListFromMetadata";
    v21 = 806;
    v22 = "TfTokenVector pxrInternal__aapl__pxrReserved__::_GetNameListFromMetadata(const JsObject &, const TfToken &)";
    v23 = 0;
    v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin metadata value for key '%s' does not hold a string array", v11);
    goto LABEL_21;
  }
  JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v6);
  v8 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
  v9 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
  while (v8 != v9)
  {
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v8))
      goto LABEL_7;
    v8 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v8 + 16);
  }
  v12 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v6);
  sub_20BDE4F04(v19, (v12[1] - *v12) >> 4);
  v13 = *v12;
  v14 = v12[1];
  if (v13 != v14)
  {
    v15 = v19[0];
    do
    {
      String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v13);
      if (*(char *)(String + 23) < 0)
      {
        sub_20BDDBFAC(&__dst, *(void **)String, *(_QWORD *)(String + 8));
      }
      else
      {
        v17 = *(_OWORD *)String;
        v21 = *(_QWORD *)(String + 16);
        __dst = v17;
      }
      if (*((char *)v15 + 23) < 0)
        operator delete(*(void **)v15);
      v18 = __dst;
      *((_QWORD *)v15 + 2) = v21;
      *v15 = v18;
      v15 = (__int128 *)((char *)v15 + 24);
      v13 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v13 + 16);
    }
    while (v13 != v14);
  }
  pxrInternal__aapl__pxrReserved__::TfToTokenVector(v19, a3);
  *(_QWORD *)&__dst = v19;
  sub_20BDE5038((void ***)&__dst);
}

void sub_20C3C963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_SortAutoAppliedAPISchemas(uint64_t *a1)
{
  uint64_t result;
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;

  result = *a1;
  v2 = (uint64_t *)a1[1];
  if ((unint64_t)v2 - result >= 0x10)
  {
    v4 = 126 - 2 * __clz(((uint64_t)v2 - result) >> 3);
    if (v2 == (uint64_t *)result)
      v5 = 0;
    else
      v5 = v4;
    return sub_20C3CF5A4(result, v2, v5, 1);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_InitializePrimDefsAndSchematicsForPluginSchemas(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *this)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v1;
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v3;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v4;
  uint64_t *v5;
  _QWORD *SchemaInfo;
  unint64_t *v7;
  char *v8;
  uint64_t *v9;
  char **v10;
  char **v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *v20;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  __n128 *v27;
  uint64_t *v28;
  uint64_t (*v29)(uint64_t *);
  unint64_t v30;
  char v31;
  uint64_t *v32;
  __n128 *v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v65;
  pxrInternal__aapl__pxrReserved__::SdfPath *v66;
  pxrInternal__aapl__pxrReserved__::SdfPath *v67;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v68;
  int HasField;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  _BOOL4 v77;
  const char *v79;
  uint64_t v80;
  char *v81;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v82;
  uint64_t RealPath;
  const char *v84;
  char **v85;
  uint64_t *v86;
  _QWORD **v88;
  _QWORD **v89;
  __n128 v90;
  __n128 v91;
  __int128 v92;
  int v93;
  __n128 *v94;
  __n128 *v95;
  uint64_t v96;

  sub_20C3C77FC();
  v91 = 0u;
  v92 = 0u;
  v93 = 1065353216;
  sub_20C3CBB7C();
  v2 = (_QWORD *)qword_254988A70;
  if (qword_254988A70)
  {
    do
    {
      v95 = 0;
      v96 = 0;
      v94 = (__n128 *)&v95;
      v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v2[3];
      v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v2[4];
      if (v3 != v4)
      {
        v5 = v2 + 2;
        do
        {
          SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(v3, v1);
          if (SchemaInfo)
          {
            v7 = SchemaInfo + 1;
            sub_20BEB968C((uint64_t **)&v94, v7, (uint64_t *)v7);
            if ((v1 & 1) != 0)
              pxrInternal__aapl__pxrReserved__::TfType::GetAllDerivedTypes((uint64_t *)v7, (uint64_t **)&v94, v8);
          }
          v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v3 + 8);
        }
        while (v3 != v4);
        v9 = (uint64_t *)v94;
        if (v94 != (__n128 *)&v95)
        {
          do
          {
            v90.n128_u64[0] = (unint64_t)(v9 + 4);
            v10 = (char **)sub_20C3CDC9C((uint64_t)&v91, v9 + 4, (uint64_t)&unk_20CAC184C, &v90);
            v11 = v10;
            v12 = v10[4];
            if (v12 >= v10[5])
            {
              v16 = sub_20BFCA068(v10 + 3, v2 + 2);
            }
            else
            {
              v13 = *v5;
              *(_QWORD *)v12 = *v5;
              if ((v13 & 7) != 0)
              {
                v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
                do
                  v15 = __ldxr(v14);
                while (__stxr(v15 + 2, v14));
                if ((v15 & 1) == 0)
                  *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
              }
              v16 = v12 + 8;
            }
            v11[4] = v16;
            v17 = (uint64_t *)v9[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (uint64_t *)v9[2];
                v26 = *v18 == (_QWORD)v9;
                v9 = v18;
              }
              while (!v26);
            }
            v9 = v18;
          }
          while (v18 != (uint64_t *)&v95);
        }
      }
      sub_20BE6100C((uint64_t)&v94, v95);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  v19 = &v92;
  v20 = this;
  while (1)
  {
    v19 = *(__int128 **)v19;
    if (!v19)
      break;
    pxrInternal__aapl__pxrReserved__::Usd_SortAutoAppliedAPISchemas((uint64_t *)v19 + 3);
  }
  if ((__n128 *)((char *)this + 72) != &v91)
  {
    *((_DWORD *)this + 26) = v93;
    sub_20C3D1C8C((_QWORD *)this + 9, (_QWORD *)v92, 0);
  }
  v21 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20C3CDF48((uint64_t)&v91);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v22 = qword_2549889B8;
  if (qword_2549889B8)
  {
    v85 = (char **)((char *)this + 48);
    do
    {
      v23 = *(_DWORD *)(v22 + 52);
      v24 = v23 > 6;
      v25 = (1 << v23) & 0x68;
      v26 = v24 || v25 == 0;
      if (!v26)
      {
        v28 = (uint64_t *)v94;
        v27 = v95;
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v21);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(_QWORD *)(v22 + 32), &v90);
        v29 = sub_20BF46110(&v90);
        v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v28) >> 3);
        if (v31 & 1 | (unint64_t)v29)
        {
          v32 = (uint64_t *)v94;
          v33 = v95;
          if (v95 != v94)
          {
            v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3);
            do
            {
              v35 = (uint64_t)&v32[3 * (v34 >> 1)];
              v36 = sub_20BFF2B40(v35, (uint64_t)&v90);
              if (v36)
                v34 += ~(v34 >> 1);
              else
                v34 >>= 1;
              if (v36)
                v32 = (uint64_t *)(v35 + 24);
            }
            while (v34);
            v33 = (__n128 *)v32;
            v32 = (uint64_t *)v95;
          }
          v26 = v32 == (uint64_t *)v33;
          v20 = this;
          if (v26 || !sub_20BEB560C((uint64_t)v33, (uint64_t)&v90))
          {
            v91 = v90;
            if (v90.n128_u64[1])
            {
              v37 = (unsigned int *)(v90.n128_u64[1] + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            *(_QWORD *)&v92 = v30;
            sub_20C3C9E4C((uint64_t *)&v94, v33, &v91);
            v39 = v91.n128_u64[1];
            if (v91.n128_u64[1])
            {
              v40 = (unsigned int *)(v91.n128_u64[1] + 8);
              do
              {
                v41 = __ldxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
                (*(void (**)(unint64_t))(*(_QWORD *)v39 + 8))(v39);
            }
          }
          else
          {
            v30 = v33[1].n128_u64[0];
          }
        }
        else
        {
          v20 = this;
        }
        v21 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)v90.n128_u64[1];
        if (v90.n128_u64[1])
        {
          v43 = (unsigned int *)(v90.n128_u64[1] + 8);
          do
          {
            v44 = __ldxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
            v21 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::PlugRegistry *))(*(_QWORD *)v21 + 8))(v21);
        }
        v46 = v22 + 24;
        if (*(_DWORD *)(v22 + 52) == 3)
        {
          v48 = (uint64_t *)*((_QWORD *)v20 + 7);
          v47 = *((_QWORD *)v20 + 8);
          if ((unint64_t)v48 >= v47)
          {
            v51 = ((char *)v48 - *v85) >> 4;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 60)
              sub_20BDDF694();
            v53 = v47 - (_QWORD)*v85;
            if (v53 >> 3 > v52)
              v52 = v53 >> 3;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
              v54 = 0xFFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            v21 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20BDEA2F0((uint64_t)this + 64, v54);
            v56 = (uint64_t *)((char *)v21 + 16 * v51);
            *v56 = v46;
            v56[1] = v30;
            v58 = (char *)*((_QWORD *)v20 + 6);
            v57 = (char *)*((_QWORD *)v20 + 7);
            v59 = v56;
            if (v57 != v58)
            {
              do
              {
                *((_OWORD *)v59 - 1) = *((_OWORD *)v57 - 1);
                v59 -= 2;
                v57 -= 16;
              }
              while (v57 != v58);
              v57 = *v85;
            }
            v49 = v56 + 2;
            *((_QWORD *)v20 + 6) = v59;
            *((_QWORD *)v20 + 7) = v56 + 2;
            *((_QWORD *)v20 + 8) = (char *)v21 + 16 * v55;
            if (v57)
              operator delete(v57);
          }
          else
          {
            *v48 = v46;
            v48[1] = v30;
            v49 = v48 + 2;
          }
          *((_QWORD *)v20 + 7) = v49;
        }
        else
        {
          v91.n128_u64[0] = v22 + 24;
          v91.n128_u64[1] = v30;
          v92 = 0uLL;
          v93 = 0;
          sub_20C3D24C0((uint64_t)this + 8, (_QWORD *)(v22 + 24), (uint64_t *)(v22 + 24), &v91);
          v21 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)*((_QWORD *)&v92 + 1);
          *((_QWORD *)&v92 + 1) = 0;
          if (v21)
          {
            v50 = (void *)sub_20C358B18((uint64_t)v21);
            operator delete(v50);
          }
        }
      }
      v22 = *(_QWORD *)v22;
    }
    while (v22);
    v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3);
  }
  else
  {
    v60 = 0;
  }
  v61 = *(_QWORD *)v20;
  v62 = (uint64_t *)(*(_QWORD *)v20 + 8);
  sub_20C3C9FB4(v62, v60);
  v90.n128_u64[0] = (unint64_t)&v94;
  v90.n128_u64[1] = (unint64_t)v62;
  v91.n128_u64[0] = (unint64_t)off_24C539498;
  v91.n128_u64[1] = (unint64_t)&v90;
  tbb::interface7::internal::isolate_within_arena(&v91, 0);
  v64 = *(uint64_t **)(v61 + 8);
  v63 = *(uint64_t **)(v61 + 16);
  if (v64 != v63)
  {
    v86 = *(uint64_t **)(v61 + 16);
    do
    {
      v65 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20C0EEAF8(v64);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v65, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v89);
      v88 = 0;
      v66 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0EEAF8(v64);
      v67 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v66);
      v68 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v68)
        v68 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      WORD4(v92) = 0;
      v91.n128_u64[1] = (unint64_t)&v88;
      *(_QWORD *)&v92 = &stru_24C51D8B8;
      v91.n128_u64[0] = (unint64_t)&unk_24C52E698;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v66, v67, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v68 + 112), &v91);
      if (BYTE8(v92))
        v70 = 0;
      else
        v70 = HasField;
      if (v70 == 1)
      {
        v90.n128_u64[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v88);
        v90.n128_u64[1] = v71;
        v72 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v88);
        v74 = v73;
        while (1)
        {
          v75 = v90.n128_u64[0];
          v76 = !v74 || v90.n128_u64[0] == v72;
          v77 = v76;
          if (v90.n128_u64[1] == v74 && v77)
            break;
          v79 = (const char *)(v90.n128_u64[0] + 32);
          if (sub_20BFED450((pxrInternal__aapl__pxrReserved__::VtValue *)(v90.n128_u64[0] + 56)))
          {
            pxrInternal__aapl__pxrReserved__::VtDictionary::insert((pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(_QWORD *)this + 120), (const void **)(v75 + 32), (uint64_t)&v91);
          }
          else
          {
            v91.n128_u64[0] = (unint64_t)"usd/schemaRegistry.cpp";
            v91.n128_u64[1] = (unint64_t)"_InitializePrimDefsAndSchematicsForPluginSchemas";
            *(_QWORD *)&v92 = 1175;
            *((_QWORD *)&v92 + 1) = "void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_Ini"
                                    "tializePrimDefsAndSchematicsForPluginSchemas()";
            LOBYTE(v93) = 0;
            if (*(char *)(v75 + 55) < 0)
              v79 = *(const char **)v79;
            v82 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v64);
            RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v82);
            if (*(char *)(RealPath + 23) >= 0)
              v84 = (const char *)RealPath;
            else
              v84 = *(const char **)RealPath;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v91, 1, (pxrInternal__aapl__pxrReserved__ *)"Found a VtTokenArray value for type name key '%s' in fallbackPrimTypes layer metadata dictionary in generated schema file '%s'.", v79, v84);
          }
          sub_20BF4D354(&v90, v80, v81);
        }
        v63 = v86;
      }
      sub_20BF49F14(&v88, 0);
      sub_20BF49F14(&v89, 0);
      ++v64;
    }
    while (v64 != v63);
  }
  v91.n128_u64[0] = (unint64_t)&v94;
  sub_20BF2E3C4((void ***)&v91);
}

void sub_20C3C9D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20C3CDF48((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3C9E4C(uint64_t *a1, __n128 *a2, __n128 *a3)
{
  _QWORD *n128_u64;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  n128_u64 = a2->n128_u64;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v12)
      v14 = v12;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    v22 = v9;
    if (v15)
      v16 = (char *)sub_20BDE4FF4(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[24 * v8];
    v20 = v19;
    v21 = &v16[24 * v15];
    sub_20C3D202C(&v18, a3);
    n128_u64 = (_QWORD *)sub_20C3D2178(a1, &v18, n128_u64);
    sub_20BF2E6C0((unsigned int *)&v18);
  }
  else if (a2 == (__n128 *)v6)
  {
    *a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(_QWORD *)(v7 + 24 * v8 + 16) = a3[1].n128_u64[0];
    a1[1] = (uint64_t)&a2[1].n128_i64[1];
  }
  else
  {
    sub_20C3D1F6C((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)&a2[1].n128_i64[1]);
    sub_20C3D1FC4((uint64_t)n128_u64, (uint64_t)a3);
  }
  return n128_u64;
}

void sub_20C3C9FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2E6C0((unsigned int *)va);
  _Unwind_Resume(a1);
}

void sub_20C3C9FB4(uint64_t *a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v3;
  unint64_t v4;
  uint64_t v5;

  v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1[1];
  v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 8 * a2;
      while (v3 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v5)
        v3 = sub_20C103234(v3 - 1);
      a1[1] = v5;
    }
  }
  else
  {
    sub_20C3D27F0(a1, a2 - v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetOverridePropertyNames@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;

  v6 = atomic_load((unsigned __int8 *)&qword_254988960);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254988960))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_254988958, "apiSchemaOverridePropertyNames");
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_254988958, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988960);
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a1);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C3CA12C(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 72), (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_254988958, (uint64_t (**)(_QWORD, uint64_t))a3);
}

void sub_20C3CA100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988960);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CA12C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t (**a5)(_QWORD, uint64_t))
{
  uint64_t (**v6[3])(_QWORD, uint64_t);
  __int16 v7;

  if (!a5)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(a1, a2, a3, a4, 0);
  v6[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DDE0;
  v7 = 0;
  v6[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D970;
  v6[1] = a5;
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey((uint64_t)a1, (uint64_t)a2, a3, a4, v6);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetDirectBuiltinAPISchemas(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v11;
  int HasField;
  int v13;
  std::string *v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  unint64_t v18;
  const char *v19;
  const char *v20;
  char *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  int v25;
  std::string *v26;
  std::string *i;
  std::string *EmptyString;
  unsigned int *v29;
  unsigned int v30;
  std::string *v31;
  char *v32;
  std::string *p_p;
  unint64_t v34;
  const char *v35;
  std::string __p;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string v44;
  std::string *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v37);
  v10 = (_QWORD *)sub_20C0EEAF8(a2);
  v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
    v11 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v44.__r_.__value_.__r.__words[2] = (std::string::size_type)&stru_24C524D40;
  LOWORD(v45) = 0;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C539538;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)&v37;
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v10, a3, v11, &v44);
  if ((_BYTE)v45)
    v13 = 0;
  else
    v13 = HasField;
  if (v13 == 1)
  {
    v45 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(&v37, (uint64_t **)a5, (uint64_t)&v44);
    v14 = v45;
    if (v45 == &v44)
    {
      v15 = 4;
      v14 = &v44;
    }
    else
    {
      if (!v45)
        goto LABEL_12;
      v15 = 5;
    }
    (*(void (**)(void))(v14->__r_.__value_.__r.__words[0] + 8 * v15))();
  }
LABEL_12:
  v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BEDA270((_QWORD *)(a1 + 72), (_QWORD *)(a4 + 8));
  v17 = v16;
  if (v16)
  {
    if (sub_20C286E00(0))
    {
      v18 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      sub_20C3AD8D0(", ", *((std::string **)v17 + 3), *((std::string **)v17 + 4), &v44);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v44;
      else
        v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"The prim definition for schema type '%s' has these additional built-in auto applied API schemas: [%s].\n", v20, v21, v19, v22);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
    }
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C1292A0((uint64_t *)a5, *(_QWORD **)(a5 + 8), *((uint64_t **)v17 + 3), *((uint64_t **)v17 + 4), (uint64_t)(*((_QWORD *)v17 + 4) - *((_QWORD *)v17 + 3)) >> 3);
  }
  v23 = *(std::string **)a5;
  v24 = *(std::string **)(a5 + 8);
  if (*(std::string **)a5 != v24)
  {
    v25 = *(_DWORD *)(a4 + 28);
    while (1)
    {
      v26 = (v23->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0
          ? (std::string *)((v23->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16)
          : (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C3C8308(v26);
      if ((v25 == 6) == (v16 == (pxrInternal__aapl__pxrReserved__::TfToken *)-1))
        break;
      v23 = (std::string *)((char *)v23 + 8);
      if (v23 == v24)
      {
        v23 = v24;
        goto LABEL_46;
      }
    }
    if (v23 != v24)
    {
      for (i = (std::string *)&v23->__r_.__value_.__r.__words[1]; i != v24; i = (std::string *)((char *)i + 8))
      {
        if ((i->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (std::string *)((i->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
        v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C3C8308(EmptyString);
        if ((v25 == 6) != (v16 == (pxrInternal__aapl__pxrReserved__::TfToken *)-1))
        {
          if (i != v23)
          {
            if ((v23->__r_.__value_.__r.__words[0] & 7) != 0)
            {
              v29 = (unsigned int *)(v23->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v30 = __ldxr(v29);
              while (__stlxr(v30 - 2, v29));
            }
            v23->__r_.__value_.__r.__words[0] = i->__r_.__value_.__r.__words[0];
            i->__r_.__value_.__r.__words[0] = 0;
          }
          v23 = (std::string *)((char *)v23 + 8);
        }
      }
    }
LABEL_46:
    v31 = *(std::string **)(a5 + 8);
    if (v23 != v31)
    {
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/schemaRegistry.cpp";
      v44.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDirectBuiltinAPISchemas";
      v44.__r_.__value_.__r.__words[2] = 1297;
      v45 = (std::string *)"TfTokenVector pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_Get"
                           "DirectBuiltinAPISchemas(const SdfLayerRefPtr &, const SdfPath &, const SchemaInfo &) const";
      v46 = 0;
      sub_20C3AD8D0(", ", v23, v31, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v34 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v34)
      {
        v35 = (const char *)(v34 + 16);
        if (*(char *)(v34 + 39) < 0)
          v35 = *(const char **)v35;
      }
      else
      {
        v35 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"Invalid inclusion of API schemas (%s) by schema '%s'. Multiple apply API schema templates can only include or be included by other multiple apply API schema templates. These schemas will not be included as built-in schemas of '%s'", v32, p_p, v35, v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_20C117D14(a5, v23, *(_QWORD **)(a5 + 8));
    }
  }
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  sub_20BEEB2B8((void ***)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  sub_20BEEB2B8((void ***)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  sub_20BEEB2B8((void ***)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  sub_20BEEB2B8((void ***)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  sub_20BEEB2B8((void ***)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  sub_20BEEB2B8((void ***)&v44);
}

void sub_20C3CA560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  if (*(char *)(v8 - 89) < 0)
    operator delete(*(void **)(v8 - 112));
  sub_20C03507C((void **)va);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder::BuildPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder *this, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *a2)
{
  char v2;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *OverridePropertyNames;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *EmptyString;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int **v27;
  unsigned int **v28;
  int v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  const char *v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  const char *v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  const char *v42;
  const char *v43;
  unint64_t v44;
  const char *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  const pxrInternal__aapl__pxrReserved__::TfToken *v50;
  uint64_t v51;
  unint64_t v52;
  const char *v53;
  unsigned int *v54;
  unsigned int v55;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  const char *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  void *__p[2];
  __int128 v65;
  int v66;
  unsigned int **v67;
  unsigned int **v68;
  uint64_t v69;
  uint64_t v70[5];
  int v71;
  int v72[3];

  v2 = 1;
  if (*((_DWORD *)this + 8) != 2)
  {
    *((_DWORD *)this + 8) = 1;
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8 * *((_QWORD *)this + 1));
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v6, *(const pxrInternal__aapl__pxrReserved__::TfToken **)this, &v71);
    OverridePropertyNames = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetOverridePropertyNames(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (uint64_t)v70);
    v8 = *(uint64_t **)this;
    if (*(_DWORD *)(*(_QWORD *)this + 28) == 6)
    {
      v9 = *v8 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
        EmptyString = (uint64_t *)(v9 + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(OverridePropertyNames);
      sub_20BDDC0E4(__p, "");
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameTemplate((char *)EmptyString, (uint64_t)__p, (uint64_t)&v69);
      if (SBYTE7(v65) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v11 = *v8;
      v69 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          v69 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    v14 = operator new(0x70uLL);
    v14[6] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    v14[2] = 0u;
    v14[3] = 0u;
    *v14 = 0u;
    v14[1] = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v14 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v14 + 3);
    v14[1] = 0u;
    v14[2] = 0u;
    *((_DWORD *)v14 + 12) = 1065353216;
    *(_OWORD *)((char *)v14 + 56) = 0u;
    *(_OWORD *)((char *)v14 + 72) = 0u;
    *(_OWORD *)((char *)v14 + 88) = 0u;
    *((_QWORD *)v14 + 13) = 0;
    *((_QWORD *)this + 2) = v14;
    sub_20C1034E8((uint64_t *)__p, v5);
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForAPISchema((uint64_t)v14, &v69, (uint64_t *)__p, &v71, v70);
    v15 = __p[1];
    if (__p[1])
    {
      v16 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
    }
    sub_20C358AEC((uint64_t *)this + 3, *((_QWORD *)this + 2));
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetDirectBuiltinAPISchemas((uint64_t)a2, v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, *(_QWORD *)this, (uint64_t)&v67);
    if (v67 == v68)
    {
      *((_DWORD *)this + 8) = 2;
      v2 = 1;
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v65 = 0u;
      v66 = 1065353216;
      v19 = *(char **)(*(_QWORD *)this + 16);
      v57 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          v57 = (char *)v20;
      }
      v58 = 0;
      sub_20C3D2B20((uint64_t)__p, &v57, (uint64_t)&v57, (_DWORD *)(*(_QWORD *)this + 24));
      if ((v58 & 7) != 0)
      {
        v23 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((v57 & 7) != 0)
      {
        v25 = (unsigned int *)((unint64_t)v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      v28 = v67;
      v27 = v68;
      if (v67 != v68)
      {
        v29 = 0;
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v28, (unsigned int **)&v62);
          v30 = sub_20BF2B388((_QWORD *)a2 + 1, &v62);
          v32 = v30;
          if (!v30)
          {
            v57 = "usd/schemaRegistry.cpp";
            v58 = (unint64_t)"BuildPrimDefinition";
            v59 = 1412;
            v60 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuild"
                  "er::BuildPrimDefinition(_SchemaDefInitHelper *)";
            v61 = 0;
            v35 = (unint64_t)*v28 & 0xFFFFFFFFFFFFFFF8;
            if (v35)
            {
              v36 = (const char *)(v35 + 16);
              if (*(char *)(v35 + 39) < 0)
                v36 = *(const char **)v36;
            }
            else
            {
              v36 = "";
            }
            v39 = **(_QWORD **)this & 0xFFFFFFFFFFFFFFF8;
            if (v39)
            {
              v40 = (const char *)(v39 + 16);
              if (*(char *)(v39 + 39) < 0)
                v40 = *(const char **)v40;
            }
            else
            {
              v40 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"Could not find API schema definition for '%s' included by API schema '%s'", v31, v36, v40);
            goto LABEL_67;
          }
          if (*((_DWORD *)v30 + 14) != 1)
          {
            v29 |= pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder::BuildPrimDefinition((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder *)(v30 + 3), a2) ^ 1;
            if ((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(*((uint64_t **)this + 2), v32[5], &v63, (uint64_t)__p) & 1) == 0)
            {
              v57 = "usd/schemaRegistry.cpp";
              v58 = (unint64_t)"BuildPrimDefinition";
              v59 = 1451;
              v60 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBui"
                    "lder::BuildPrimDefinition(_SchemaDefInitHelper *)";
              v61 = 0;
              v37 = (unint64_t)*v28 & 0xFFFFFFFFFFFFFFF8;
              if (v37)
              {
                v38 = (const char *)(v37 + 16);
                if (*(char *)(v37 + 39) < 0)
                  v38 = *(const char **)v38;
              }
              else
              {
                v38 = "";
              }
              v44 = **(_QWORD **)this & 0xFFFFFFFFFFFFFFF8;
              if (v44)
              {
                v45 = (const char *)(v44 + 16);
                if (*(char *)(v44 + 39) < 0)
                  v45 = *(const char **)v45;
              }
              else
              {
                v45 = "";
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"Could not add API schema definition for '%s' included by API schema '%s'", v22, v38, v45);
            }
            goto LABEL_67;
          }
          v57 = "usd/schemaRegistry.cpp";
          v58 = (unint64_t)"BuildPrimDefinition";
          v59 = 1429;
          v60 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder"
                "::BuildPrimDefinition(_SchemaDefInitHelper *)";
          v61 = 0;
          v33 = (unint64_t)*v28 & 0xFFFFFFFFFFFFFFF8;
          if (v33)
          {
            v34 = (const char *)(v33 + 16);
            if (*(char *)(v33 + 39) < 0)
              v34 = *(const char **)v34;
          }
          else
          {
            v34 = "";
          }
          v41 = **(_QWORD **)this & 0xFFFFFFFFFFFFFFF8;
          if (v41)
          {
            v42 = (const char *)(v41 + 16);
            if (*(char *)(v41 + 39) < 0)
            {
              v42 = *(const char **)v42;
              if (v33)
              {
LABEL_54:
                v43 = (const char *)(v33 + 16);
                if (*(char *)(v33 + 39) < 0)
                  v43 = *(const char **)v43;
                goto LABEL_58;
              }
            }
            else if (v33)
            {
              goto LABEL_54;
            }
          }
          else
          {
            v42 = "";
            if (v33)
              goto LABEL_54;
          }
          v43 = "";
LABEL_58:
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"Skipping the inclusion of the API schema definition for schema '%s' as a built-in for API schema '%s' as '%s' is being built to be included directly or indirectly by the API schema for '%s' itself. Including this schema again would result in cycle.", v31, v34, v42, v42, v43);
          v29 = 1;
LABEL_67:
          if ((v63 & 7) != 0)
          {
            v46 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
            do
              v47 = __ldxr(v46);
            while (__stlxr(v47 - 2, v46));
          }
          if ((v62 & 7) != 0)
          {
            v48 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
            do
              v49 = __ldxr(v48);
            while (__stlxr(v49 - 2, v48));
          }
          if (++v28 == v27)
            goto LABEL_77;
        }
      }
      LOBYTE(v29) = 0;
LABEL_77:
      if (v70[0])
      {
        v50 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v70[4];
        v51 = 8 * v70[0];
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeOverAndReplaceExistingProperty(*((_QWORD *)this + 2), v50, (pxrInternal__aapl__pxrReserved__::SdfLayer **)v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
          v50 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v50 + 8);
          v51 -= 8;
        }
        while (v51);
      }
      if ((v29 & 1) != 0)
      {
        *((_DWORD *)this + 8) = 0;
        v57 = "usd/schemaRegistry.cpp";
        v58 = (unint64_t)"BuildPrimDefinition";
        v59 = 1477;
        v60 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder::"
              "BuildPrimDefinition(_SchemaDefInitHelper *)";
        v61 = 0;
        v52 = **(_QWORD **)this & 0xFFFFFFFFFFFFFFF8;
        if (v52)
        {
          v53 = (const char *)(v52 + 16);
          if (*(char *)(v52 + 39) < 0)
            v53 = *(const char **)v53;
        }
        else
        {
          v53 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"API schema inclusion cycle encountered while building API schema definition for API schema '%s'", v22, v53);
      }
      else
      {
        *((_DWORD *)this + 8) = 2;
      }
      v2 = v29 ^ 1;
      sub_20BFC9C88((uint64_t)__p);
    }
    __p[0] = &v67;
    sub_20BEEB2B8((void ***)__p);
    if ((v69 & 7) != 0)
    {
      v54 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    sub_20C00918C(v70);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v72);
    sub_20BFD265C(&v71);
  }
  return v2 & 1;
}

void sub_20C3CAC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20C00918C((_QWORD *)(v31 - 136));
  sub_20BFD1A18((_DWORD *)(v31 - 96));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(unsigned int **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v5;
  unint64_t v6;
  const char *v7;
  std::string::value_type v8;
  uint64_t *EmptyString;
  std::string::size_type v10;
  std::string::size_type v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  std::string v18;
  unsigned int *v19;

  v5 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v5)
    v5 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  v6 = *((_QWORD *)v5 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = "";
  }
  v8 = *v7;
  if (((unint64_t)*this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(((unint64_t)*this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  v10 = std::string::find((const std::string *)EmptyString, v8, 0);
  if (v10 == -1)
  {
    v14 = *this;
    *a2 = *this;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *a2 = v15;
    }
    a2[1] = 0;
  }
  else
  {
    v11 = v10;
    std::string::basic_string(&v18, (const std::string *)EmptyString, 0, v10, (std::allocator<char> *)&v17);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v19);
    if (*((char *)EmptyString + 23) < 0)
      EmptyString = (uint64_t *)*EmptyString;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v17, (const char *)EmptyString + v11 + 1);
    v12 = v19;
    v19 = 0;
    v13 = v17;
    *a2 = v12;
    a2[1] = v13;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_20C3CAEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  unsigned int *v18;
  unsigned int v19;

  if ((a17 & 7) != 0)
  {
    v18 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateAppliedAPIPrimDefinitions(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *this)
{
  _QWORD *i;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  BOOL v9;

  for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*i)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder::BuildPrimDefinition((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder *)(i + 3), this);
    v3 = *(_DWORD *)(i[3] + 28) == 6;
    v4 = *(_QWORD *)this + 72;
    v5 = i[6];
    i[6] = 0;
    v8 = v5;
    v9 = v3;
    sub_20C3D2DB8(v4, i + 2, i + 2, &v8);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      v7 = (void *)sub_20C358B18(v6);
      operator delete(v7);
    }
  }
}

void sub_20C3CAFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v10;

  if (a9)
  {
    v10 = (void *)sub_20C358B18(a9);
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateConcretePrimDefinitions(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _OWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  _OWORD v16[2];
  int v17;
  unsigned int **v18[3];
  uint64_t *v19;
  uint64_t v20[5];
  int v21;
  int v22;

  v1 = this[6];
  v2 = this[7];
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      v4 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v1;
      v5 = (uint64_t *)(*(_QWORD *)(*v3 + 8) + 8 * *(_QWORD *)(v1 + 8));
      v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v6, v4, &v21);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetOverridePropertyNames(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (uint64_t)v20);
      v7 = operator new(0x70uLL);
      v7[5] = 0u;
      v7[6] = 0u;
      v7[3] = 0u;
      v7[4] = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      *v7 = 0u;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v7 + 2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v7 + 3);
      v7[1] = 0u;
      v7[2] = 0u;
      *((_DWORD *)v7 + 12) = 1065353216;
      *(_OWORD *)((char *)v7 + 56) = 0u;
      *(_OWORD *)((char *)v7 + 72) = 0u;
      *(_OWORD *)((char *)v7 + 88) = 0u;
      *((_QWORD *)v7 + 13) = 0;
      v19 = (uint64_t *)v7;
      sub_20C1034E8((uint64_t *)v16, v5);
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForTypedSchema((uint64_t)v7, (uint64_t *)v16, &v21, v20);
      v8 = *((_QWORD *)&v16[0] + 1);
      if (*((_QWORD *)&v16[0] + 1))
      {
        v9 = (unsigned int *)(*((_QWORD *)&v16[0] + 1) + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetDirectBuiltinAPISchemas((uint64_t)v3, v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (uint64_t)v4, (uint64_t)v18);
      if (v18[0] != v18[1])
      {
        memset(v16, 0, sizeof(v16));
        v17 = 1065353216;
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(*v3, v19, v18, (uint64_t)v16);
        sub_20BFC9C88((uint64_t)v16);
      }
      if (v20[0])
      {
        v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v20[4];
        v13 = 8 * v20[0];
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeOverAndReplaceExistingProperty((uint64_t)v19, v12, (pxrInternal__aapl__pxrReserved__::SdfLayer **)v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
          v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v12 + 8);
          v13 -= 8;
        }
        while (v13);
      }
      sub_20C3D3110(*v3 + 32, v4, (uint64_t *)v4, (uint64_t *)&v19);
      *(_QWORD *)&v16[0] = v18;
      sub_20BEEB2B8((void ***)v16);
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        v15 = (void *)sub_20C358B18((uint64_t)v14);
        operator delete(v15);
      }
      sub_20C00918C(v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      this = (uint64_t *)sub_20BFD265C(&v21);
      v1 += 16;
    }
    while (v1 != v2);
  }
  return this;
}

void sub_20C3CB204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v21;
  void *v22;

  sub_20BFC9C88((uint64_t)&a9);
  a9 = (void **)&a15;
  sub_20BEEB2B8(&a9);
  v21 = a18;
  a18 = 0;
  if (v21)
  {
    v22 = (void *)sub_20C358B18(v21);
    operator delete(v22);
  }
  sub_20C00918C(&a19);
  sub_20BFD1A18((_DWORD *)(v19 - 88));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(uint64_t a1, uint64_t *a2, unsigned int ***a3, uint64_t a4)
{
  unsigned int **v4;
  unsigned int **v5;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD v19[4];
  char v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v8 = (_QWORD *)(a1 + 72);
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v4, (unsigned int **)&v21);
      v9 = sub_20BF2B2B4(v8, &v21);
      if (v9)
      {
        v11 = *((unsigned __int8 *)v9 + 32);
        if (v11 == (v22 != 0))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(a2, v9[3], &v22, a4);
        }
        else
        {
          v19[0] = "usd/schemaRegistry.cpp";
          v19[1] = "_ComposeAPISchemasIntoPrimDefinition";
          v19[2] = 1855;
          v19[3] = "void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(UsdPri"
                   "mDefinition *, const TfTokenVector &, _FamilyAndInstanceToVersionMap *) const";
          v20 = 0;
          v12 = (unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8;
          if (v12)
          {
            v13 = (const char *)(v12 + 16);
            if (*(char *)(v12 + 39) < 0)
              v13 = *(const char **)v13;
          }
          else
          {
            v13 = "";
          }
          if (v11)
            v14 = "without";
          else
            v14 = "with";
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v19, (pxrInternal__aapl__pxrReserved__ *)"API schema '%s' can not be added to a prim definition %s an instance name.", v10, v13, v14);
        }
      }
      if ((v22 & 7) != 0)
      {
        v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      if ((v21 & 7) != 0)
      {
        v17 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_20C3CB42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;

  if ((a18 & 7) != 0)
  {
    v18 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if ((a17 & 7) != 0)
  {
    v20 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::UsdSchemaRegistry(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this)
{
  _OWORD *v2;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  char *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  void *__p[2];
  _OWORD v14[2];
  uint64_t v15;
  int v16;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((_QWORD *)this + 15) = 0;
  v2 = operator new(0x70uLL);
  v2[5] = 0u;
  v2[6] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v2 + 2);
  v3 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v2 + 3);
  v2[1] = 0u;
  v2[2] = 0u;
  *((_DWORD *)v2 + 12) = 1065353216;
  *(_OWORD *)((char *)v2 + 56) = 0u;
  *(_OWORD *)((char *)v2 + 72) = 0u;
  *(_OWORD *)((char *)v2 + 88) = 0u;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)this + 14) = v2;
  v5 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA);
  if (!v5)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA);
    v5 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA);
  }
  if (!*v5)
  {
    v9 = (char *)this;
    v10 = 0u;
    v11 = 0u;
    v12 = 1065353216;
    *(_OWORD *)__p = 0u;
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v16 = 1065353216;
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_InitializePrimDefsAndSchematicsForPluginSchemas((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateAppliedAPIPrimDefinitions((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateConcretePrimDefinitions((uint64_t *)&v9);
    sub_20C3CDF48((uint64_t)v14 + 8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v3 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)sub_20C3CE7B8((uint64_t)&v10);
  }
  do
    v6 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance));
  if (v6)
  {
    v9 = "tf/instantiateSingleton.h";
    *(_QWORD *)&v10 = "SetInstanceConstructed";
    *((_QWORD *)&v10 + 1) = 56;
    *(_QWORD *)&v11 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSch"
                      "emaRegistry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
    BYTE8(v11) = 0;
    v12 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v9, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v4);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v3);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C539510);
  return this;
}

void sub_20C3CB638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int **v2;
  uint64_t v3;
  _QWORD ***v4;
  uint64_t v5;
  const void *v7;
  va_list va;

  va_start(va, a2);
  sub_20C3CB68C((uint64_t)va);
  sub_20BF49F14(v4, 0);
  sub_20C3CEED4(v3);
  sub_20C3CEED4((uint64_t)(v2 + 4));
  *(_QWORD *)(v5 - 56) = v2 + 1;
  sub_20C248B78((void ***)(v5 - 56));
  sub_20BEBCE60(v2, v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CB68C(uint64_t a1)
{
  void *v2;

  sub_20C3CDF48(a1 + 72);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  sub_20C3CE7B8(a1 + 8);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v3;

  v3 = atomic_load((unsigned __int8 *)&qword_254988970);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254988970))
  {
    qword_254988968 = (uint64_t)sub_20C3CB750();
    __cxa_guard_release(&qword_254988970);
  }
  return sub_20BF2B388((_QWORD *)qword_254988968, this) != 0;
}

void sub_20C3CB738(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988970);
  _Unwind_Resume(a1);
}

_OWORD *sub_20C3CB750()
{
  _OWORD *v0;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v1;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v14;
  uint64_t *v15;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  _QWORD v22[3];
  void **v23;

  v0 = operator new(0x28uLL);
  *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v1)
    v1 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v1 + 24, (uint64_t *)v1 + 24);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v2 + 30, (uint64_t *)v2 + 30);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v3 + 35, (uint64_t *)v3 + 35);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v4 + 38, (uint64_t *)v4 + 38);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v5 + 57, (uint64_t *)v5 + 57);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v6 + 59, (uint64_t *)v6 + 59);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v7 + 9, (uint64_t *)v7 + 9);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8)
    v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, v8, (uint64_t *)v8);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9)
    v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v9 + 25, (uint64_t *)v9 + 25);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v10 + 54, (uint64_t *)v10 + 54);
  v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11)
    v11 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v11 + 7, (uint64_t *)v11 + 7);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12)
    v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v12 + 53, (uint64_t *)v12 + 53);
  v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13)
    v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v13 + 39, (uint64_t *)v13 + 39);
  v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v14)
    v14 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v15 = (uint64_t *)*((_QWORD *)v14 + 9);
  v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v16)
    v16 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v17 = (uint64_t *)*((_QWORD *)v16 + 10);
  while (v15 != v17)
  {
    sub_20BF348DC((uint64_t)v0, v15, v15);
    ++v15;
  }
  pxrInternal__aapl__pxrReserved__::UsdGetClipRelatedFields(v22);
  v18 = (uint64_t *)v22[0];
  v19 = (uint64_t *)v22[1];
  while (v18 != v19)
  {
    sub_20BF348DC((uint64_t)v0, v18, v18);
    ++v18;
  }
  v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20)
    v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  sub_20BF348DC((uint64_t)v0, (_QWORD *)v20 + 26, (uint64_t *)v20 + 26);
  v23 = (void **)v22;
  sub_20BEEB2B8(&v23);
  return v0;
}

void sub_20C3CBA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsTyped(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const std::type_info *a2, char *a3)
{
  uint64_t v4;
  char *v5;

  return pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)this, v4, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::TfToken *Instance;
  uint64_t v5;
  uint64_t *EmptyString;
  const std::type_info *v8;
  char *v9;

  v2 = this;
  v3 = atomic_load((unsigned __int8 *)&qword_254988980);
  if ((v3 & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__cxa_guard_acquire(&qword_254988980);
    if ((_DWORD)this)
    {
      __cxa_guard_release(&qword_254988980);
    }
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  v5 = qword_254988978;
  if ((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Instance);
  return pxrInternal__aapl__pxrReserved__::PlugRegistry::FindDerivedTypeByName(v5, (uint64_t)EmptyString);
}

void sub_20C3CBB48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988980);
  _Unwind_Resume(a1);
}

__int128 *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAutoApplyAPISchemas(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this)
{
  sub_20C3CBB7C();
  return &xmmword_254988A60;
}

void sub_20C3CBB7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254988AD8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254988AD8))
    {
      sub_20C3CE850();
      __cxa_atexit((void (*)(void *))sub_20C3CE8F8, &xmmword_254988A60, &dword_20BDBC000);
      __cxa_guard_release(&qword_254988AD8);
    }
  }
}

void sub_20C3CBBE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988AD8);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *SchemaInfo;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;
  uint64_t *EmptyString;
  unint64_t v14;
  const char *v15;
  _BOOL8 v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  const char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  char v30;
  unint64_t v31;

  if (!*(_QWORD *)a2)
    return 0;
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (!SchemaInfo || *((_DWORD *)SchemaInfo + 7) != 6)
    return 0;
  sub_20C3CBB7C();
  v6 = sub_20BF2B2B4(&xmmword_254988AB0, this);
  if (v6 && v6[5])
  {
    v7 = (_QWORD *)v6[4];
    if (v7)
    {
      v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v9 = v7[4] & 0xFFFFFFFFFFFFFFF8;
        if (v8 >= v9)
        {
          if (v9 >= v8)
            goto LABEL_13;
          ++v7;
        }
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    return 0;
  }
LABEL_13:
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF2B2B4((_QWORD *)(Instance + 72), this);
  if (!v11 || (v12 = *((_QWORD *)v11 + 3)) == 0)
  {
    v26 = "usd/schemaRegistry.cpp";
    v27 = "IsAllowedAPISchemaInstanceName";
    v28 = 1719;
    v29 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(const TfToken "
          "&, const TfToken &)";
    v30 = 0;
    v14 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not find UsdPrimDefinition for multiple apply API schema '%s'", v15);
    return 0;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)EmptyString, (uint64_t *)&v26);
  v19 = v27;
  if (v26 == v27)
  {
    v16 = 0;
  }
  else
  {
    v20 = *(_QWORD **)(v12 + 80);
    v21 = *(_QWORD **)(v12 + 88);
    if (v20 == v21)
    {
      v16 = 1;
    }
    else
    {
      do
      {
        if ((*v20 & 0xFFFFFFFFFFFFFFF8) != 0)
          v22 = (uint64_t *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v22, &v31);
        v23 = *((_QWORD *)v19 - 1) & 0xFFFFFFFFFFFFFFF8;
        v24 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        v16 = v23 != (v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 7) != 0)
        {
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        if ((unsigned int *)v23 == v24)
          break;
        ++v20;
      }
      while (v20 != v21);
    }
  }
  v31 = (unint64_t)&v26;
  sub_20BEEB2B8((void ***)&v31);
  return v16;
}

void sub_20C3CBE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  sub_20BEEB2B8(&a16);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaCanOnlyApplyToTypeNames(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *v5;
  uint64_t *result;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned __int8 v10;
  void *__p;
  char v12;
  uint64_t v13;

  sub_20C3CBB7C();
  if (!*(_QWORD *)a2)
    goto LABEL_8;
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, a2, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13);
  if (v12 < 0)
    operator delete(__p);
  v5 = sub_20BF2B2B4(xmmword_254988A88, &v13);
  result = v5 + 3;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (!v5)
  {
LABEL_8:
    v9 = sub_20BF2B2B4(xmmword_254988A88, this);
    if (v9)
    {
      return v9 + 3;
    }
    else
    {
      v10 = atomic_load((unsigned __int8 *)&qword_2549889A0);
      if ((v10 & 1) != 0)
      {
        return &qword_254988988;
      }
      else
      {
        if (__cxa_guard_acquire(&qword_2549889A0))
        {
          qword_254988988 = 0;
          unk_254988990 = 0;
          qword_254988998 = 0;
          __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254988988, &dword_20BDBC000);
          __cxa_guard_release(&qword_2549889A0);
        }
        return &qword_254988988;
      }
    }
  }
  return result;
}

void sub_20C3CBF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  unsigned int *v15;
  unsigned int v16;

  if ((a15 & 7) != 0)
  {
    v15 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::BuildComposedPrimDefinition(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unsigned int **v10;
  unsigned int **v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  _QWORD *SchemaInfo;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;

  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
    *(_QWORD *)&v20 = "usd/schemaRegistry.cpp";
    *((_QWORD *)&v20 + 1) = "BuildComposedPrimDefinition";
    *(_QWORD *)&v21 = 1787;
    *((_QWORD *)&v21 + 1) = "std::unique_ptr<UsdPrimDefinition> pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::Buil"
                            "dComposedPrimDefinition(const TfToken &, const TfTokenVector &) const";
    LOBYTE(v22) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"BuildComposedPrimDefinition without applied API schemas is not allowed. If you want a prim definition for a single prim type with no appied schemas, use FindConcretePrimDefinition instead.");
    *a4 = 0;
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
    v22 = 1065353216;
    v7 = sub_20BF2B2B4((_QWORD *)(a1 + 32), a2);
    if (v7 && (v8 = v7[3]) != 0)
    {
      v9 = (char *)operator new(0x70uLL);
      sub_20C3CEA64((uint64_t)v9, v8);
      v10 = (unsigned int **)*((_QWORD *)v9 + 7);
    }
    else
    {
      v9 = (char *)operator new(0x70uLL);
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      *((_OWORD *)v9 + 3) = 0u;
      *(_OWORD *)v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v9 + 2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v9 + 3);
      v10 = 0;
      *((_OWORD *)v9 + 1) = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      *((_DWORD *)v9 + 12) = 1065353216;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *((_QWORD *)v9 + 13) = 0;
    }
    *a4 = v9;
    v11 = (unsigned int **)*((_QWORD *)v9 + 8);
    if (v10 != v11)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v10, (unsigned int **)&v18);
        SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v18, v12);
        sub_20BF32220(&v18, SchemaInfo + 2);
        sub_20C3D2B20((uint64_t)&v20, &v18, (uint64_t)&v18, (_DWORD *)SchemaInfo + 6);
        if ((v19 & 7) != 0)
        {
          v14 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        if ((v18 & 7) != 0)
        {
          v16 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        ++v10;
      }
      while (v10 != v11);
      v9 = *a4;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(a1, (uint64_t *)v9, (unsigned int ***)a3, (uint64_t)&v20);
    sub_20BFC9C88((uint64_t)&v20);
  }
}

void sub_20C3CC168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  sub_20BFC9C88((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t *);
  char v11;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v12;
  int v13;
  unint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t TypeName;
  const char *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  std::string::size_type size;
  uint64_t **v26;
  _QWORD *v27;
  unint64_t v28;
  pxrInternal__aapl__pxrReserved__::JsValue *v29;
  unint64_t **v30;
  _QWORD *JsObject;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  uint64_t *EmptyString;
  unint64_t v38;
  const char *v39;
  unint64_t v40;
  void **v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v44;
  const char *v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  const char *v52;
  std::string *v53;
  const char *v54;
  char *v55;
  std::string *v56;
  void **v57;
  uint64_t result;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  std::string v63;
  __int128 v64;
  void *v65;
  uint64_t v66[3];
  void *__p[2];
  uint64_t v68;
  const char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74[2];

  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(_QWORD *)a1, &v71);
  v10 = sub_20BF46110(&v71);
  if (!(v11 & 1 | (unint64_t)v10))
  {
    __p[0] = "usd/schemaRegistry.cpp";
    __p[1] = "Usd_GetAPISchemaPluginApplyToInfoForType";
    v68 = 1878;
    v69 = "void pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(const TfType &, const TfToken "
          "&, UsdSchemaRegistry::TokenToTokenVectorMap *, UsdSchemaRegistry::TokenToTokenVectorMap *, TfHashMap<TfToken, "
          "TfToken::Set, TfHash> *)";
    v70 = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    if (*(char *)(TypeName + 23) >= 0)
      v21 = (const char *)TypeName;
    else
      v21 = *(const char **)TypeName;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find plugin for schema type '%s'", v21);
    goto LABEL_76;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v71);
  pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v12, a1, v66);
  v13 = sub_20C3CC92C((pxrInternal__aapl__pxrReserved__::TfToken *)v66);
  if ((v13 - 5) < 2)
  {
    v14 = sub_20C3C8960();
    sub_20C3C94AC((pxrInternal__aapl__pxrReserved__::TfToken *)v66, (_QWORD *)(v14 + 40), &v64);
    if ((_QWORD)v64 != *((_QWORD *)&v64 + 1))
    {
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v15 = (void **)sub_20C3D33F8(a4, a2, (uint64_t)&unk_20CAC184C, (uint64_t **)&v63);
      sub_20C0B4038(v15 + 3);
      *(_OWORD *)(v15 + 3) = v64;
      v15[5] = v65;
      v65 = 0;
      v64 = 0uLL;
    }
    if (v13 == 5)
    {
      v16 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
      if (!v16)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
        v16 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
      }
      if (*v16)
        goto LABEL_74;
      v17 = sub_20C3C8960();
      sub_20C3C94AC((pxrInternal__aapl__pxrReserved__::TfToken *)v66, (_QWORD *)(v17 + 32), __p);
      if (__p[0] != __p[1])
      {
        if (sub_20C286E00(0))
        {
          v18 = *a2 & 0xFFFFFFFFFFFFFFF8;
          if (v18)
          {
            v19 = (const char *)(v18 + 16);
            if (*(char *)(v18 + 39) < 0)
              v19 = *(const char **)v19;
          }
          else
          {
            v19 = "";
          }
          sub_20C3AD8D0(", ", (std::string *)__p[0], (std::string *)__p[1], &v63);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v63;
          else
            v56 = (std::string *)v63.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"API schema '%s' is defined to auto apply to the following schema types: [%s].\n", v54, v55, v19, v56);
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
        }
        v74[0] = a2;
        v57 = (void **)sub_20C3D33F8(a3, a2, (uint64_t)&unk_20CAC184C, v74);
        sub_20C0B4038(v57 + 3);
        *(_OWORD *)(v57 + 3) = *(_OWORD *)__p;
        v57[5] = (void *)v68;
        __p[1] = 0;
        v68 = 0;
        __p[0] = 0;
      }
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v53 = &v63;
    }
    else
    {
      v22 = sub_20C3C8960();
      sub_20C3C94AC((pxrInternal__aapl__pxrReserved__::TfToken *)v66, (_QWORD *)(v22 + 48), &v63);
      if (v63.__r_.__value_.__r.__words[0] != v63.__r_.__value_.__l.__size_)
      {
        v74[0] = a2;
        v23 = sub_20C3D364C(a5, a2, (uint64_t)&unk_20CAC184C, v74);
        size = v63.__r_.__value_.__l.__size_;
        v24 = (uint64_t *)v63.__r_.__value_.__r.__words[0];
        if (v63.__r_.__value_.__r.__words[0] != v63.__r_.__value_.__l.__size_)
        {
          v26 = (uint64_t **)(v23 + 3);
          v27 = v23 + 4;
          do
          {
            sub_20BFD23A4(v26, v27, v24, v24);
            ++v24;
          }
          while (v24 != (uint64_t *)size);
        }
      }
      v28 = sub_20C3C8960();
      v29 = (pxrInternal__aapl__pxrReserved__::JsValue *)sub_20C0E9D5C((pxrInternal__aapl__pxrReserved__::TfToken *)v66, (_QWORD *)(v28 + 56));
      v30 = (unint64_t **)v29;
      if (v29)
      {
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject(v29))
        {
          JsObject = (_QWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v30);
          v32 = JsObject + 1;
          v33 = (_QWORD *)*JsObject;
          if ((_QWORD *)*JsObject != JsObject + 1)
          {
            do
            {
              v34 = (const char *)(v33 + 4);
              if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v33 + 7)))
              {
                v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)v33 + 7);
                v36 = v35;
                if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
                  EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
                else
                  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
                pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((char *)EmptyString, (uint64_t)(v33 + 4), (uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v62);
                if (SHIBYTE(v68) < 0)
                  operator delete(__p[0]);
                v40 = sub_20C3C8960();
                sub_20C3C94AC(v36, (_QWORD *)(v40 + 40), __p);
                if (__p[0] != __p[1])
                {
                  v73 = &v62;
                  v41 = (void **)sub_20C3D33F8(a4, &v62, (uint64_t)&unk_20CAC184C, &v73);
                  sub_20C0B4038(v41 + 3);
                  *(_OWORD *)(v41 + 3) = *(_OWORD *)__p;
                  v41[5] = (void *)v68;
                  __p[1] = 0;
                  v68 = 0;
                  __p[0] = 0;
                }
                v74[0] = (uint64_t *)__p;
                sub_20BEEB2B8((void ***)v74);
                if ((v62 & 7) != 0)
                {
                  v42 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v43 = __ldxr(v42);
                  while (__stlxr(v43 - 2, v42));
                }
              }
              else
              {
                __p[0] = "usd/schemaRegistry.cpp";
                __p[1] = "Usd_GetAPISchemaPluginApplyToInfoForType";
                v68 = 1962;
                v69 = "void pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(const TfType &, co"
                      "nst TfToken &, UsdSchemaRegistry::TokenToTokenVectorMap *, UsdSchemaRegistry::TokenToTokenVectorMa"
                      "p *, TfHashMap<TfToken, TfToken::Set, TfHash> *)";
                v70 = 0;
                v38 = *(_QWORD *)(sub_20C3C8960() + 56) & 0xFFFFFFFFFFFFFFF8;
                if (v38)
                {
                  v39 = (const char *)(v38 + 16);
                  if (*(char *)(v38 + 39) < 0)
                    v39 = *(const char **)v39;
                }
                else
                {
                  v39 = "";
                }
                if (*((char *)v33 + 55) < 0)
                  v34 = *(const char **)v34;
                v44 = *a2 & 0xFFFFFFFFFFFFFFF8;
                if (v44)
                {
                  v45 = (const char *)(v44 + 16);
                  if (*(char *)(v44 + 39) < 0)
                    v45 = *(const char **)v45;
                }
                else
                {
                  v45 = "";
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"%s value for instance name '%s' for API schema type '%s' is not holding a dictionary. PlugInfo may need to be regenerated.", v39, v34, v45);
              }
              v46 = (_QWORD *)v33[1];
              if (v46)
              {
                do
                {
                  v47 = v46;
                  v46 = (_QWORD *)*v46;
                }
                while (v46);
              }
              else
              {
                do
                {
                  v47 = (_QWORD *)v33[2];
                  v48 = *v47 == (_QWORD)v33;
                  v33 = v47;
                }
                while (!v48);
              }
              v33 = v47;
            }
            while (v47 != v32);
          }
        }
        else
        {
          __p[0] = "usd/schemaRegistry.cpp";
          __p[1] = "Usd_GetAPISchemaPluginApplyToInfoForType";
          v68 = 1946;
          v69 = "void pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(const TfType &, const Tf"
                "Token &, UsdSchemaRegistry::TokenToTokenVectorMap *, UsdSchemaRegistry::TokenToTokenVectorMap *, TfHashM"
                "ap<TfToken, TfToken::Set, TfHash> *)";
          v70 = 0;
          v49 = *(_QWORD *)(sub_20C3C8960() + 56) & 0xFFFFFFFFFFFFFFF8;
          if (v49)
          {
            v50 = (const char *)(v49 + 16);
            if (*(char *)(v49 + 39) < 0)
              v50 = *(const char **)v50;
          }
          else
          {
            v50 = "";
          }
          v51 = *a2 & 0xFFFFFFFFFFFFFFF8;
          if (v51)
          {
            v52 = (const char *)(v51 + 16);
            if (*(char *)(v51 + 39) < 0)
              v52 = *(const char **)v52;
          }
          else
          {
            v52 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Metadata value for key '%s' for API schema type '%s' is not holding a dictionary. PlugInfo may need to be regenerated.", v50, v52);
        }
      }
      __p[0] = &v63;
      v53 = (std::string *)__p;
    }
    sub_20BEEB2B8((void ***)v53);
LABEL_74:
    __p[0] = &v64;
    sub_20BEEB2B8((void ***)__p);
  }
  sub_20BE78E5C((uint64_t)v66, (_QWORD *)v66[1]);
LABEL_76:
  result = v72;
  if (v72)
  {
    v59 = (unsigned int *)(v72 + 8);
    do
    {
      v60 = __ldxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C3CC7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  if (a19 < 0)
    operator delete(__p);
  __p = &a26;
  sub_20BEEB2B8((void ***)&__p);
  a26 = &a20;
  sub_20BEEB2B8((void ***)&a26);
  sub_20BE78E5C((uint64_t)&a23, a24);
  v33 = *(unsigned int **)(v31 - 120);
  if (v33)
  {
    v34 = v33 + 2;
    do
    {
      v35 = __ldxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CC92C(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19;

  v2 = sub_20C3C8960();
  result = sub_20C0E9D5C(a1, (_QWORD *)(v2 + 64));
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)result);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v19);
    v4 = sub_20C3C8960();
    v5 = v19;
    if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFFFF8))
    {
      result = 4;
    }
    else
    {
      v6 = sub_20C3C8960();
      v5 = v19;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v6 + 80) & 0xFFFFFFFFFFFFFFF8))
      {
        result = 5;
      }
      else
      {
        v7 = sub_20C3C8960();
        v5 = v19;
        if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v7 + 88) & 0xFFFFFFFFFFFFFFF8))
        {
          result = 6;
        }
        else
        {
          v8 = sub_20C3C8960();
          v5 = v19;
          if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v8 + 96) & 0xFFFFFFFFFFFFFFF8))
          {
            result = 3;
          }
          else
          {
            v9 = sub_20C3C8960();
            v5 = v19;
            if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v9 + 104) & 0xFFFFFFFFFFFFFFF8))
            {
              result = 2;
            }
            else
            {
              v10 = sub_20C3C8960();
              v5 = v19;
              v11 = v19 & 0xFFFFFFFFFFFFFFF8;
              if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v10 + 112) & 0xFFFFFFFFFFFFFFF8))
              {
                result = 1;
              }
              else
              {
                v17[0] = "usd/schemaRegistry.cpp";
                v17[1] = "_GetSchemaKindFromMetadata";
                v17[2] = 132;
                v17[3] = "UsdSchemaKind pxrInternal__aapl__pxrReserved__::_GetSchemaKindFromMetadata(const JsObject &)";
                v18 = 0;
                if (v11)
                {
                  v12 = (const char *)(v11 + 16);
                  if (*(char *)(v11 + 39) < 0)
                    v12 = *(const char **)v12;
                }
                else
                {
                  v12 = "";
                }
                v13 = *(_QWORD *)(sub_20C3C8960() + 64) & 0xFFFFFFFFFFFFFFF8;
                if (v13)
                {
                  v14 = (const char *)(v13 + 16);
                  if (*(char *)(v13 + 39) < 0)
                    v14 = *(const char **)v14;
                }
                else
                {
                  v14 = "";
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid schema kind name '%s' found for plugin metadata key '%s'.", v12, v14);
                result = 0;
                v5 = v19;
              }
            }
          }
        }
      }
    }
    if ((v5 & 7) != 0)
    {
      v15 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
  }
  return result;
}

void sub_20C3CCAFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(v1 - 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

void sub_20C3CCB24(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v10;
  unsigned int v11;
  uint64_t TypeName;
  const char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  _QWORD v34[3];
  uint64_t *v35;
  _QWORD *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  const char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  xmmword_2549889A8 = 0u;
  *(_OWORD *)&qword_2549889B8 = 0u;
  dword_2549889C8 = 1065353216;
  xmmword_2549889D0[0] = 0u;
  xmmword_2549889D0[1] = 0u;
  dword_2549889F0 = 1065353216;
  v36[1] = 0;
  v37 = v3;
  v35 = (uint64_t *)v36;
  v36[0] = 0;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(v3, &v35);
  sub_20BEB968C(&v35, (unint64_t *)&v37, &v37);
  v5 = v35;
  if (v35 != (uint64_t *)v36)
  {
    do
    {
      v6 = v5 + 4;
      pxrInternal__aapl__pxrReserved__::TfType::GetAliases((uint64_t)&v37, v5[4], v4, (uint64_t)v34);
      if (v34[1] - v34[0] == 24)
      {
        v7 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v44, v34[0], 0);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v7);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*v6, &v42);
        v8 = sub_20BF46110(&v42);
        if (v9 & 1 | (unint64_t)v8)
        {
          v10 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v42);
          pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v10, (const pxrInternal__aapl__pxrReserved__::TfType *)(v5 + 4), (uint64_t *)&v38);
          v11 = sub_20C3CC92C((pxrInternal__aapl__pxrReserved__::TfToken *)&v38);
          sub_20BE78E5C((uint64_t)&v38, *((_QWORD **)&v38 + 1));
        }
        else
        {
          *(_QWORD *)&v38 = "usd/schemaRegistry.cpp";
          *((_QWORD *)&v38 + 1) = "_GetSchemaKindFromPlugin";
          v39 = 144;
          v40 = "UsdSchemaKind pxrInternal__aapl__pxrReserved__::_GetSchemaKindFromPlugin(const TfType &)";
          v41 = 0;
          TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v5 + 4));
          if (*(char *)(TypeName + 23) >= 0)
            v13 = (const char *)TypeName;
          else
            v13 = *(const char **)TypeName;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v38, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find plugin for schema type '%s'", v13);
          v11 = 0;
        }
        v14 = v43;
        if (v43)
        {
          v15 = (unsigned int *)(v43 + 8);
          do
          {
            v16 = __ldxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v44, (uint64_t)&v42);
        *(_QWORD *)&v38 = v44;
        if ((v44 & 7) != 0)
        {
          v18 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            *(_QWORD *)&v38 = v38 & 0xFFFFFFFFFFFFFFF8;
        }
        *((_QWORD *)&v38 + 1) = *v6;
        v39 = v42;
        if ((v42 & 7) != 0)
        {
          v20 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 2, v20));
          if ((v21 & 1) == 0)
            v39 &= 0xFFFFFFFFFFFFFFF8;
        }
        v40 = (const char *)__PAIR64__(v11, v43);
        v22 = sub_20C3CCFC0((uint64_t)&xmmword_2549889A8, v5 + 4, v5 + 4, &v38);
        if ((v39 & 7) != 0)
        {
          v23 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        if ((v38 & 7) != 0)
        {
          v25 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        *(_QWORD *)&v38 = v22 + 24;
        sub_20C1FCA70((uint64_t)xmmword_2549889D0, &v44, &v44, &v38);
        if ((v42 & 7) != 0)
        {
          v27 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        if ((v44 & 7) != 0)
        {
          v29 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
      }
      *(_QWORD *)&v38 = v34;
      sub_20BDE5038((void ***)&v38);
      v31 = (uint64_t *)v5[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (uint64_t *)v5[2];
          v33 = *v32 == (_QWORD)v5;
          v5 = v32;
        }
        while (!v33);
      }
      v5 = v32;
    }
    while (v32 != (uint64_t *)v36);
  }
  sub_20BE6100C((uint64_t)&v35, v36[0]);
}

void sub_20C3CCE70(_Unwind_Exception *a1)
{
  sub_20BF20BCC((uint64_t)xmmword_2549889D0);
  sub_20C3CD290((uint64_t)&xmmword_2549889A8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CCF98(uint64_t a1)
{
  sub_20BF20BCC(a1 + 40);
  return sub_20C3CD290(a1);
}

char *sub_20C3CCFC0(uint64_t a1, _QWORD *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  v15 = *a4;
  v16 = a4[1];
  *(_QWORD *)a4 = 0;
  *(_OWORD *)(v12 + 24) = v15;
  *((_QWORD *)a4 + 2) = 0;
  *(_OWORD *)(v12 + 40) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v12 = *v24;
LABEL_38:
    *v24 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v23 + 8 * v4) = v14;
  if (*(_QWORD *)v12)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20C3CD218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20C3CD234(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C3CD234(uint64_t a1, _QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = __p[5];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = __p[3];
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20C3CD290(uint64_t a1)
{
  void *v2;

  sub_20C3CD2C8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C3CD2C8(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[5];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      v7 = v2[3];
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C3CD338()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  float v12;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD **v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *i;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[2];
  char v40;

  sub_20C3C77FC();
  xmmword_254988A00 = 0u;
  *(_OWORD *)&qword_254988A10 = 0u;
  dword_254988A20 = 1065353216;
  v1 = qword_2549889B8;
  if (qword_2549889B8)
  {
    while (1)
    {
      v2 = *(_QWORD *)(v1 + 40);
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      v4 = bswap64(0x9E3779B97F4A7C55 * (v2 & 0xFFFFFFFFFFFFFFF8));
      v5 = *((_QWORD *)&xmmword_254988A00 + 1);
      if (*((_QWORD *)&xmmword_254988A00 + 1))
      {
        v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_254988A00 + 8));
        v6.i16[0] = vaddlv_u8(v6);
        if (v6.u32[0] > 1uLL)
        {
          v0 = v4;
          if (v4 >= *((_QWORD *)&xmmword_254988A00 + 1))
            v0 = v4 % *((_QWORD *)&xmmword_254988A00 + 1);
        }
        else
        {
          v0 = v4 & (*((_QWORD *)&xmmword_254988A00 + 1) - 1);
        }
        v7 = *(_QWORD **)(xmmword_254988A00 + 8 * v0);
        if (v7)
        {
          v8 = (_QWORD *)*v7;
          if (*v7)
          {
            do
            {
              v9 = v8[1];
              if (v9 == v4)
              {
                if ((unsigned int *)(v8[2] & 0xFFFFFFFFFFFFFFF8) == v3)
                  goto LABEL_77;
              }
              else
              {
                if (v6.u32[0] > 1uLL)
                {
                  if (v9 >= *((_QWORD *)&xmmword_254988A00 + 1))
                    v9 %= *((_QWORD *)&xmmword_254988A00 + 1);
                }
                else
                {
                  v9 &= *((_QWORD *)&xmmword_254988A00 + 1) - 1;
                }
                if (v9 != v0)
                  break;
              }
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
        }
      }
      v10 = operator new(0x30uLL);
      v39[0] = v10;
      v39[1] = &qword_254988A10;
      *v10 = 0;
      v10[1] = v4;
      v10[2] = v2;
      if ((v2 & 7) != 0)
      {
        do
          v11 = __ldxr(v3);
        while (__stxr(v11 + 2, v3));
        if ((v11 & 1) == 0)
          v10[2] &= 0xFFFFFFFFFFFFFFF8;
      }
      v10[3] = 0;
      v10[4] = 0;
      v10[5] = 0;
      v40 = 1;
      v12 = (float)(unint64_t)(qword_254988A18 + 1);
      if (v5 && (float)(*(float *)&dword_254988A20 * (float)v5) >= v12)
        goto LABEL_68;
      v13 = (v5 & (v5 - 1)) == 0;
      if (v5 < 3)
        v13 = 0;
      v14 = (2 * v5) | !v13;
      v15 = vcvtps_u32_f32(v12 / *(float *)&dword_254988A20);
      prime = (int8x8_t)(v14 <= v15 ? v15 : v14);
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v5 = *((_QWORD *)&xmmword_254988A00 + 1);
      if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_254988A00 + 1))
        break;
      if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_254988A00 + 1))
      {
        v23 = vcvtps_u32_f32((float)(unint64_t)qword_254988A18 / *(float *)&dword_254988A20);
        if (*((_QWORD *)&xmmword_254988A00 + 1) < 3uLL
          || (v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_254988A00 + 8)),
              v24.i16[0] = vaddlv_u8(v24),
              v24.u32[0] > 1uLL))
        {
          v23 = std::__next_prime(v23);
        }
        else
        {
          v25 = 1 << -(char)__clz(v23 - 1);
          if (v23 >= 2)
            v23 = v25;
        }
        if (*(_QWORD *)&prime <= v23)
          prime = (int8x8_t)v23;
        if (*(_QWORD *)&prime >= v5)
        {
          v5 = *((_QWORD *)&xmmword_254988A00 + 1);
        }
        else
        {
          if (prime)
            break;
          v38 = (void *)xmmword_254988A00;
          *(_QWORD *)&xmmword_254988A00 = 0;
          if (v38)
            operator delete(v38);
          v5 = 0;
          *((_QWORD *)&xmmword_254988A00 + 1) = 0;
        }
      }
LABEL_63:
      if ((v5 & (v5 - 1)) != 0)
      {
        if (v4 >= v5)
          v0 = v4 % v5;
        else
          v0 = v4;
      }
      else
      {
        v0 = (v5 - 1) & v4;
      }
LABEL_68:
      v28 = *(_QWORD **)(xmmword_254988A00 + 8 * v0);
      if (v28)
      {
        *(_QWORD *)v39[0] = *v28;
        *v28 = v39[0];
      }
      else
      {
        *(_QWORD *)v39[0] = qword_254988A10;
        qword_254988A10 = v39[0];
        *(_QWORD *)(xmmword_254988A00 + 8 * v0) = &qword_254988A10;
        if (*(_QWORD *)v39[0])
        {
          v29 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
          if ((v5 & (v5 - 1)) != 0)
          {
            if (v29 >= v5)
              v29 %= v5;
          }
          else
          {
            v29 &= v5 - 1;
          }
          *(_QWORD *)(xmmword_254988A00 + 8 * v29) = v39[0];
        }
      }
      v8 = (_QWORD *)v39[0];
      v39[0] = 0;
      ++qword_254988A18;
      sub_20C3CD900((uint64_t)v39);
LABEL_77:
      v31 = (char *)v8[3];
      v30 = (char *)v8[4];
      v32 = (uint64_t)(v8 + 3);
      v39[0] = v1 + 24;
      if (v30 != v31)
      {
        v33 = (v30 - v31) >> 3;
        do
        {
          v34 = v33 >> 1;
          v35 = &v31[8 * (v33 >> 1)];
          v37 = *(_QWORD *)v35;
          v36 = v35 + 8;
          v33 += ~(v33 >> 1);
          if (*(_DWORD *)(v37 + 24) > *(_DWORD *)(v1 + 48))
            v31 = v36;
          else
            v33 = v34;
        }
        while (v33);
        v30 = v31;
      }
      sub_20C3CD96C(v32, v30, (char *)v39);
      v1 = *(_QWORD *)v1;
      if (!v1)
        return;
    }
    if (*(_QWORD *)&prime >> 61)
      sub_20BDDF5B4();
    v17 = operator new(8 * *(_QWORD *)&prime);
    v18 = (void *)xmmword_254988A00;
    *(_QWORD *)&xmmword_254988A00 = v17;
    if (v18)
      operator delete(v18);
    v19 = 0;
    *((int8x8_t *)&xmmword_254988A00 + 1) = prime;
    do
      *(_QWORD *)(xmmword_254988A00 + 8 * v19++) = 0;
    while (*(_QWORD *)&prime != v19);
    v20 = (_QWORD **)qword_254988A10;
    if (qword_254988A10)
    {
      v21 = *(_QWORD *)(qword_254988A10 + 8);
      v22 = (uint8x8_t)vcnt_s8(prime);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        if (v21 >= *(_QWORD *)&prime)
          v21 %= *(_QWORD *)&prime;
      }
      else
      {
        v21 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(xmmword_254988A00 + 8 * v21) = &qword_254988A10;
      for (i = *v20; i; v21 = v27)
      {
        v27 = i[1];
        if (v22.u32[0] > 1uLL)
        {
          if (v27 >= *(_QWORD *)&prime)
            v27 %= *(_QWORD *)&prime;
        }
        else
        {
          v27 &= *(_QWORD *)&prime - 1;
        }
        if (v27 != v21)
        {
          if (!*(_QWORD *)(xmmword_254988A00 + 8 * v27))
          {
            *(_QWORD *)(xmmword_254988A00 + 8 * v27) = v20;
            goto LABEL_59;
          }
          *v20 = (_QWORD *)*i;
          *i = **(_QWORD **)(xmmword_254988A00 + 8 * v27);
          **(_QWORD **)(xmmword_254988A00 + 8 * v27) = i;
          i = v20;
        }
        v27 = v21;
LABEL_59:
        v20 = (_QWORD **)i;
        i = (_QWORD *)*i;
      }
    }
    v5 = (unint64_t)prime;
    goto LABEL_63;
  }
}

void sub_20C3CD850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3CD900((uint64_t)va);
  sub_20C3CD87C((uint64_t)&xmmword_254988A00);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CD87C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      v5 = v2[2];
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t sub_20C3CD900(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_20C3CD96C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_20BDDF694();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_20BDDF6A8(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_20BDDF6A8(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_20BEF2F0C((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_20C3CDB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3CDBAC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C3CDC08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3CDC24(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C3CDC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3CDC9C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3CDEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_20C3CDF00(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C3CDF00(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    sub_20BEEB2B8(&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C3CDF48(uint64_t a1)
{
  void *v2;

  sub_20C3CDF80(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C3CDF80(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      sub_20BEEB2B8(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C3CDFD0(pxrInternal__aapl__pxrReserved__ *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12[2];
  tbb::task_group_context *v13;
  _DWORD v14[32];
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((_QWORD *)a1 + 1);
  v3 = *v1;
  v2 = v1[1];
  v5 = *(_QWORD *)v3;
  v4 = *((_QWORD *)v3 + 1);
  v12[0] = v3;
  v12[1] = v2;
  if (v4 != v5)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v14[0] = 0;
      v15 = 65539;
      v16 = 55;
      tbb::task_group_context::init((uint64_t)v14, v7, v8, v9);
      v13 = (tbb::task_group_context *)v14;
      v10 = tbb::internal::allocate_root_with_context_proxy::allocate(&v13, 0x38uLL);
      *(_BYTE *)(v10 - 11) = 1;
      *(_QWORD *)v10 = &off_24C5394D8;
      *(_QWORD *)(v10 + 8) = v6;
      *(_OWORD *)(v10 + 16) = xmmword_20CA59F70;
      *(_QWORD *)(v10 + 32) = v12;
      initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v10);
      *(_DWORD *)(v10 + 48) = 0;
      *(_BYTE *)(v10 + 52) = 5;
      *(_QWORD *)(v10 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v10 - 40) + 16))(*(_QWORD *)(v10 - 40), v10, v10 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v14);
    }
    else
    {
      sub_20C3CE4F0(v12, 0, v6);
    }
  }
}

void sub_20C3CE104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::task *v15;

  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CE150(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v27[16];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      v2 = *((_QWORD *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(_BYTE *)(v2 + 8) = 1;
        v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1)
          LOBYTE(v3) = 1;
        *((_BYTE *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (__int128 *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 > 1)
      goto LABEL_12;
    if (v9 && *((_BYTE *)this + 52))
    {
      --*((_BYTE *)this + 52);
      *((_QWORD *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(_QWORD *)v10 = &unk_24C520F68;
        __dmb(0xBu);
        v10[8] = 0;
        *((_QWORD *)this - 4) = v10;
        *((_QWORD *)v10 - 3) = 2;
        v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(_BYTE *)(v11 - 11) = 1;
        *(_QWORD *)v11 = &off_24C5394D8;
        *(_QWORD *)(v11 + 8) = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2) + ((*((_QWORD *)this + 1) - *((_QWORD *)this + 2)) >> 1);
        *((_QWORD *)this + 1) = v12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        v13 = *((_QWORD *)this + 5) >> 1;
        *((_QWORD *)this + 5) = v13;
        *(_QWORD *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(_BYTE *)(v11 + 52) = *((_BYTE *)this + 52);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v11 - 40))(*(_QWORD *)(v11 - 40), v11, v11 - 8);
        v6 = *((_QWORD *)this + 2);
        v7 = *((_QWORD *)this + 3);
        v4 = *((_QWORD *)this + 1);
        v8 = v4 - v6;
        if (v7 >= v4 - v6)
          break;
        v14 = *((_QWORD *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((_BYTE *)this + 52))
            break;
          --*((_BYTE *)this + 52);
          *((_QWORD *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((_BYTE *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    v28 = *v5;
    v29 = *((_QWORD *)this + 3);
    while (1)
    {
      sub_20C15C670(v27, *((unsigned __int8 *)this + 52));
      v15 = *(_BYTE *)(*((_QWORD *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0)
        break;
      v18 = *((_BYTE *)this + 52) + 1;
      *((_BYTE *)this + 52) = v18;
      v17 = v27[2];
      if (v27[2] < 2u)
      {
        v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((_QWORD *)&v28 + 3 * v27[0] + 2) < *((_QWORD *)&v28 + 3 * v27[0]) - *((_QWORD *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      v19 = v27[1];
      v20 = v27[v27[1] + 3];
      v21 = (_BYTE *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(_QWORD *)v21 = &unk_24C520F68;
      __dmb(0xBu);
      v21[8] = 0;
      *((_QWORD *)this - 4) = v21;
      *((_QWORD *)v21 - 3) = 2;
      v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(_BYTE *)(v22 - 11) = 1;
      *(_QWORD *)v22 = &off_24C5394D8;
      v24 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)this + 4);
      v25 = *((_QWORD *)this + 5) >> 1;
      *((_QWORD *)this + 5) = v25;
      *(_QWORD *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(_BYTE *)(v22 + 52) = *((_BYTE *)this + 52) - v20;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v22 - 40))(*(_QWORD *)(v22 - 40), v22, v22 - 8);
      v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7)))
        return 0;
    }
    v16 = v27[0];
LABEL_22:
    sub_20C3CE4F0(*((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)this + 4), *((_QWORD *)&v28 + 3 * v16 + 1), *((_QWORD *)&v28 + 3 * v16));
    v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_20C3CE4F0(*((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)this + 4), v6, v4);
  return 0;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C3CE4F0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v4;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  _QWORD *v11;
  std::string *v12;
  const char *v13;
  std::string *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  void *__p;
  char *v24;
  uint64_t v25;
  const char *v26;
  char v27;
  std::string v28;

  v3 = a3 - a2;
  if (a3 != a2)
  {
    v4 = result;
    v5 = 24 * a2;
    do
    {
      v6 = (uint64_t *)(*(_QWORD *)*v4 + v5);
      v7 = (const void **)(sub_20BF444D8(v6) + 56);
      sub_20BDDC0E4(&__p, "generatedSchema.usda");
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths(v7, (uint64_t)&__p, &v28);
      if (SHIBYTE(v25) < 0)
        operator delete(__p);
      __p = 0;
      v24 = 0;
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous((uint64_t)&v28, 0, (uint64_t)&__p, &v21);
      if (SHIBYTE(v25) < 0)
        operator delete(__p);
      if (sub_20C286E00(10))
      {
        v8 = sub_20BF444D8(v6);
        v11 = (_QWORD *)(v8 + 8);
        if (*(char *)(v8 + 31) < 0)
          v11 = (_QWORD *)*v11;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v28;
        else
          v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
        v13 = "valid";
        if (!v21)
          v13 = "invalid";
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Looking up generated schema for plugin %s at path %s. Generated schema %s.\n", v9, v10, v11, v12, v13);
      }
      if (!v21)
      {
        __p = "usd/schemaRegistry.cpp";
        v24 = "_GetGeneratedSchema";
        v25 = 786;
        v26 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::_GetGeneratedSchema(const PlugPluginPtr &)";
        v27 = 0;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v28;
        else
          v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
        v15 = sub_20BF444D8(v6);
        v17 = (_QWORD *)(v15 + 8);
        if (*(char *)(v15 + 31) < 0)
          v17 = (_QWORD *)*v17;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to open schema layer at path '%s'. Any schemas defined in plugin library '%s' will not have valid prim definitions.", v16, v14, v17);
        v24 = 0;
        v25 = 0;
        __p = &v24;
        pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&v28, (pxrInternal__aapl__pxrReserved__::TfToken *)&__p, (uint64_t *)&v22);
        v18 = v21;
        v21 = v22;
        v22 = 0;
        sub_20BF1D8F4((int)&v21, v18);
        sub_20C103234(&v22);
        sub_20BDE9D48((uint64_t)&__p, v24);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(_QWORD *)v4[1]
                                                                                + 8
                                                                                * *(_QWORD *)(*(_QWORD *)*v4 + v5 + 16));
      v20 = *v19;
      *v19 = v21;
      v21 = 0;
      sub_20BF1D8F4((int)v19, v20);
      result = sub_20C103234(&v21);
      v5 += 24;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_20C3CE72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, __int16 a15, char a16, char a17, _QWORD *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_20C103234(&a14);
  sub_20BDE9D48((uint64_t)&a15, a18);
  sub_20C103234(&a13);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C3CE78C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x20C3CE774);
}

void sub_20C3CE7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x20C3CE780);
  JUMPOUT(0x20C3CE784);
}

uint64_t sub_20C3CE7B8(uint64_t a1)
{
  void *v2;

  sub_20C3CE7F0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C3CE7F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C358AEC(v2 + 6, 0);
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C3CE850()
{
  uint64_t *i;

  xmmword_254988A60 = 0u;
  *(_OWORD *)&qword_254988A70 = 0u;
  dword_254988A80 = 1065353216;
  xmmword_254988A88[0] = 0u;
  xmmword_254988A88[1] = 0u;
  dword_254988AA8 = 1065353216;
  xmmword_254988AB0 = 0u;
  unk_254988AC0 = 0u;
  dword_254988AD0 = 1065353216;
  sub_20C3C77FC();
  for (i = &qword_2549889B8;
        ;
        pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType((pxrInternal__aapl__pxrReserved__::PlugRegistry *)(i + 4), i + 3, (uint64_t)&xmmword_254988A60, (uint64_t)xmmword_254988A88, (uint64_t)&xmmword_254988AB0))
  {
    i = (uint64_t *)*i;
    if (!i)
      break;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::CollectAddtionalAutoApplyAPISchemasFromPlugins((pxrInternal__aapl__pxrReserved__::PlugRegistry *)&xmmword_254988A60);
}

void sub_20C3CE8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C3CE928(v1 + 80);
  sub_20C3CE9C0(v1 + 40);
  sub_20C3CE9C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CE8F8(uint64_t a1)
{
  sub_20C3CE928(a1 + 80);
  sub_20C3CE9C0(a1 + 40);
  return sub_20C3CE9C0(a1);
}

uint64_t sub_20C3CE928(uint64_t a1)
{
  void *v2;

  sub_20C3CE960(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C3CE960(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_20BF2B200((uint64_t)(v2 + 3), v2[4]);
      v4 = (unint64_t)v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

uint64_t sub_20C3CE9C0(uint64_t a1)
{
  void *v2;

  sub_20C3CE9F8(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C3CE9F8(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v7 = (void **)(v2 + 24);
      sub_20BEEB2B8(&v7);
      v4 = *((_QWORD *)v2 + 2);
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C3CEA64(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;

  v4 = (_DWORD *)(a2 + 12);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_DWORD *)(a1 + 12);
  sub_20BFD6E54((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_20BFD6EA4(v5, v4);
  sub_20C3CEB74(a1 + 16, a2 + 16);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20BFE538C((_QWORD *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BFE538C((_QWORD *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_20BF1DD04((uint64_t *)(a1 + 104));
  return a1;
}

void sub_20C3CEB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  sub_20BEEB2B8((void ***)va);
  sub_20C358B84(v3);
  sub_20C3BCBB4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CEB74(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20C3CEBE8(a1, i + 2, i + 2);
  return a1;
}

void sub_20C3CEBD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C358B84(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3CEBE8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  sub_20C3CEE5C((uint64_t)(v14 + 2), a3);
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C3C0240((uint64_t)v24, 0);
  return v11;
}

void sub_20C3CEE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3C0240((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CEE5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 8) = a2[1];
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)a2 + 5);
  return a1;
}

uint64_t sub_20C3CEED4(uint64_t a1)
{
  void *v2;

  sub_20C3CEF0C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C3CEF0C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C358AEC(v2 + 3, 0);
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20C3CEF6C(_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  sub_20C3CF0D4(v8, a2, a3 | 8);
  return a1;
}

void sub_20C3CF028(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212B92EB0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3CF050(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x212B92EB0](a1 + 120);
  return a1;
}

uint64_t sub_20C3CF0D4(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_20C3CF164(a1);
  return a1;
}

void sub_20C3CF140(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_20C3CF164(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t *sub_20C3CF274(uint64_t a1, _QWORD *a2, uint64_t *a3, __n128 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  uint64_t *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (uint64_t *)(a1 + 16);
  i = (uint64_t *)operator new(0x30uLL);
  *i = 0;
  i[1] = v9;
  sub_20C3CF4E0(i + 2, a3, a4);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = (uint64_t)i;
    goto LABEL_39;
  }
  *i = *v15;
  *v15 = (uint64_t)i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (uint64_t *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3CF4C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20C3CF538(v2, v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3CF4E0(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  __n128 result;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *a3;
  *(__n128 *)(a1 + 1) = *a3;
  a1[3] = a3[1].n128_i64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void sub_20C3CF538(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  if (*(_BYTE *)(a1 + 8))
  {
    v6 = (void **)(a2 + 24);
    sub_20BEEB2B8(&v6);
    v3 = *(_QWORD *)(a2 + 16);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

uint64_t sub_20C3CF5A4(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  uint64_t *k;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *n;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  char *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  char v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  char *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  char *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int v104;
  char *v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  char *v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  BOOL v120;
  uint64_t *m;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  int v136;
  char *v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  BOOL v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  int v148;
  char *v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t *v163;
  BOOL v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  char *v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *j;
  uint64_t *v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  int v187;
  char *v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  BOOL v193;
  unsigned int *v194;
  unsigned int v195;
  int64_t v196;
  int64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  BOOL v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  int v214;
  char *v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  BOOL v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t *v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  int v231;
  char *v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  int v241;
  char *v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  BOOL v247;
  unsigned int *v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  int v260;
  char *v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  BOOL v266;
  unsigned int *v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int *v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  char *v280;
  int v281;
  char *v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  BOOL v287;
  uint64_t v288;
  uint64_t *v289;
  unsigned int *v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  int v295;
  char *v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  BOOL v301;
  unsigned int *v302;
  unsigned int v303;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  int v309;
  char *v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  BOOL v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *i;
  uint64_t *v319;
  unsigned int *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  int v325;
  char *v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  BOOL v331;
  unsigned int *v332;
  unsigned int v333;
  uint64_t v334;
  char *v335;
  int v336;
  char *v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  BOOL v342;
  uint64_t v343;
  int64_t v344;
  uint64_t v345;
  unint64_t v347;
  uint64_t *v348;
  int64_t v349;
  char v351;

  v5 = (uint64_t *)result;
LABEL_2:
  v348 = a2 - 1;
  k = v5;
  while (2)
  {
    v5 = k;
    v7 = (char *)a2 - (char *)k;
    v8 = a2 - k;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v162 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v162 = result;
        }
        if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v334 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v334 = result;
        }
        if (*(char *)(v162 + 23) >= 0)
          v335 = (char *)v162;
        else
          v335 = *(char **)v162;
        v336 = *v335;
        if (*(char *)(v334 + 23) >= 0)
          v337 = (char *)v334;
        else
          v337 = *(char **)v334;
        if (v336 < 0
          || (v338 = *v337, v338 < 0)
          || ((v339 = v336,
               v340 = v338,
               v341 = (v338 ^ v339) & 0xFFFFFFDF,
               v339 >= 0x40)
            ? (v342 = v341 == 0)
            : (v342 = 1),
              v342 || v340 < 0x40))
        {
          result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v162, v334);
          if (!(_DWORD)result)
            return result;
        }
        else if ((((_BYTE)v339 + 5) & 0x1Fu) >= (((_BYTE)v340 + 5) & 0x1Fu))
        {
          return result;
        }
        v343 = *k;
        *k = *(a2 - 1);
        *(a2 - 1) = v343;
        return result;
      case 3uLL:
        return sub_20C3D1200((uint64_t)k, k + 1, v348);
      case 4uLL:
        return (uint64_t)sub_20C3D19F0(k, k + 1, k + 2, v348);
      case 5uLL:
        return (uint64_t)sub_20C3D0E98(k, k + 1, k + 2, k + 3, v348);
      default:
        if (v7 <= 191)
        {
          v163 = k + 1;
          v165 = k == a2 || v163 == a2;
          if ((a4 & 1) == 0)
          {
            if (v165)
              return result;
            while (1)
            {
              v305 = v5;
              v5 = v163;
              if ((*v305 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v306 = (*v305 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v306 = result;
              }
              if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v307 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v307 = result;
              }
              if (*(char *)(v306 + 23) >= 0)
                v308 = (char *)v306;
              else
                v308 = *(char **)v306;
              v309 = *v308;
              if (*(char *)(v307 + 23) >= 0)
                v310 = (char *)v307;
              else
                v310 = *(char **)v307;
              if (v309 < 0
                || (v311 = *v310, v311 < 0)
                || ((v312 = v309,
                     v313 = v311,
                     v314 = (v311 ^ v312) & 0xFFFFFFDF,
                     v312 >= 0x40)
                  ? (v315 = v314 == 0)
                  : (v315 = 1),
                    v315 || v313 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v306, v307);
                if ((_DWORD)result)
                {
LABEL_608:
                  v316 = 0;
                  v317 = *v5;
                  *v5 = 0;
                  for (i = v5; ; i = v319)
                  {
                    v319 = v305;
                    if ((v316 & 7) != 0)
                    {
                      v320 = (unsigned int *)(v316 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v321 = __ldxr(v320);
                      while (__stlxr(v321 - 2, v320));
                    }
                    *i = *v305;
                    *v305-- = 0;
                    if ((*(v319 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v322 = (*(v319 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v322 = result;
                    }
                    v323 = (v317 & 0xFFFFFFFFFFFFFFF8) + 16;
                    if ((v317 & 0xFFFFFFFFFFFFFFF8) == 0)
                    {
                      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v323 = result;
                    }
                    if (*(char *)(v322 + 23) >= 0)
                      v324 = (char *)v322;
                    else
                      v324 = *(char **)v322;
                    v325 = *v324;
                    if (*(char *)(v323 + 23) >= 0)
                      v326 = (char *)v323;
                    else
                      v326 = *(char **)v323;
                    if (v325 < 0
                      || (v327 = *v326, v327 < 0)
                      || ((v328 = v325,
                           v329 = v327,
                           v330 = (v327 ^ v328) & 0xFFFFFFDF,
                           v328 >= 0x40)
                        ? (v331 = v330 == 0)
                        : (v331 = 1),
                          v331 || v329 < 0x40))
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v322, v323);
                      if (!(_DWORD)result)
                      {
LABEL_633:
                        if ((*v319 & 7) != 0)
                        {
                          v332 = (unsigned int *)(*v319 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v333 = __ldxr(v332);
                          while (__stlxr(v333 - 2, v332));
                        }
                        *v319 = v317;
                        break;
                      }
                    }
                    else if ((((_BYTE)v328 + 5) & 0x1Fu) >= (((_BYTE)v329 + 5) & 0x1Fu))
                    {
                      goto LABEL_633;
                    }
                    v316 = *v319;
                  }
                }
              }
              else if ((((_BYTE)v312 + 5) & 0x1Fu) < (((_BYTE)v313 + 5) & 0x1Fu))
              {
                goto LABEL_608;
              }
              v163 = v5 + 1;
              if (v5 + 1 == a2)
                return result;
            }
          }
          if (v165)
            return result;
          v166 = k;
          while (1)
          {
            v167 = v166;
            v166 = v163;
            if ((*v167 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v168 = (*v167 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v168 = result;
            }
            if ((*v166 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v169 = (*v166 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v169 = result;
            }
            if (*(char *)(v168 + 23) >= 0)
              v170 = (char *)v168;
            else
              v170 = *(char **)v168;
            v171 = *v170;
            if (*(char *)(v169 + 23) >= 0)
              v172 = (char *)v169;
            else
              v172 = *(char **)v169;
            if (v171 < 0
              || (v173 = *v172, v173 < 0)
              || ((v174 = v171,
                   v175 = v173,
                   v176 = (v173 ^ v174) & 0xFFFFFFDF,
                   v174 >= 0x40)
                ? (v177 = v176 == 0)
                : (v177 = 1),
                  v177 || v175 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v168, v169);
              if (!(_DWORD)result)
                goto LABEL_377;
            }
            else if ((((_BYTE)v174 + 5) & 0x1Fu) >= (((_BYTE)v175 + 5) & 0x1Fu))
            {
              goto LABEL_377;
            }
            v178 = 0;
            v179 = *v166;
            *v166 = 0;
            for (j = v166; ; j = v181)
            {
              v181 = v167;
              if ((v178 & 7) != 0)
              {
                v182 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
                do
                  v183 = __ldxr(v182);
                while (__stlxr(v183 - 2, v182));
              }
              *j = *v167;
              *v167 = 0;
              if (v167 == k)
                break;
              --v167;
              if ((*(v181 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v184 = (*(v181 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v184 = result;
              }
              v185 = (v179 & 0xFFFFFFFFFFFFFFF8) + 16;
              if ((v179 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v185 = result;
              }
              if (*(char *)(v184 + 23) >= 0)
                v186 = (char *)v184;
              else
                v186 = *(char **)v184;
              v187 = *v186;
              if (*(char *)(v185 + 23) >= 0)
                v188 = (char *)v185;
              else
                v188 = *(char **)v185;
              if (v187 < 0
                || (v189 = *v188, v189 < 0)
                || ((v190 = v187,
                     v191 = v189,
                     v192 = (v189 ^ v190) & 0xFFFFFFDF,
                     v190 >= 0x40)
                  ? (v193 = v192 == 0)
                  : (v193 = 1),
                    v193 || v191 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v184, v185);
                if (!(_DWORD)result)
                  goto LABEL_373;
              }
              else if ((((_BYTE)v190 + 5) & 0x1Fu) >= (((_BYTE)v191 + 5) & 0x1Fu))
              {
                goto LABEL_373;
              }
              v178 = *v181;
            }
            v181 = k;
LABEL_373:
            if ((*v181 & 7) != 0)
            {
              v194 = (unsigned int *)(*v181 & 0xFFFFFFFFFFFFFFF8);
              do
                v195 = __ldxr(v194);
              while (__stlxr(v195 - 2, v194));
            }
            *v181 = v179;
LABEL_377:
            v163 = v166 + 1;
            if (v166 + 1 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (k == a2)
            return result;
          v196 = (v8 - 2) >> 1;
          v349 = v196;
          while (1)
          {
            v197 = v196;
            if (v349 < v196)
              goto LABEL_483;
            v198 = (2 * v196) | 1;
            v199 = &v5[v198];
            if (2 * v196 + 2 < (uint64_t)v8)
            {
              if ((v199[1] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v200 = (v199[1] & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v200 = result;
              }
              if ((*v199 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v201 = (*v199 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v201 = result;
              }
              if (*(char *)(v200 + 23) >= 0)
                v202 = (char *)v200;
              else
                v202 = *(char **)v200;
              v203 = *v202;
              if (*(char *)(v201 + 23) >= 0)
                v204 = (char *)v201;
              else
                v204 = *(char **)v201;
              if ((v203 & 0x80000000) == 0)
              {
                v205 = *v204;
                if ((v205 & 0x80000000) == 0)
                {
                  v206 = v203;
                  v207 = v205;
                  v208 = (v205 ^ v206) & 0xFFFFFFDF;
                  v209 = v206 < 0x40 || v208 == 0;
                  if (!v209 && v207 >= 0x40)
                  {
                    if ((((_BYTE)v206 + 5) & 0x1Fu) >= (((_BYTE)v207 + 5) & 0x1Fu))
                      goto LABEL_406;
LABEL_405:
                    ++v199;
                    v198 = 2 * v197 + 2;
                    goto LABEL_406;
                  }
                }
              }
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v200, v201);
              if ((_DWORD)result)
                goto LABEL_405;
            }
LABEL_406:
            v210 = &v5[v197];
            if ((*v210 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v211 = (*v210 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v211 = result;
            }
            if ((*v199 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v212 = (*v199 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v212 = result;
            }
            if (*(char *)(v211 + 23) >= 0)
              v213 = (char *)v211;
            else
              v213 = *(char **)v211;
            v214 = *v213;
            if (*(char *)(v212 + 23) >= 0)
              v215 = (char *)v212;
            else
              v215 = *(char **)v212;
            if (v214 < 0
              || (v216 = *v215, v216 < 0)
              || ((v217 = v214,
                   v218 = v216,
                   v219 = (v216 ^ v217) & 0xFFFFFFDF,
                   v217 >= 0x40)
                ? (v220 = v219 == 0)
                : (v220 = 1),
                  v220 || v218 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v211, v212);
              if ((result & 1) != 0)
                goto LABEL_483;
            }
            else if ((((_BYTE)v217 + 5) & 0x1Fu) < (((_BYTE)v218 + 5) & 0x1Fu))
            {
              goto LABEL_483;
            }
            v221 = *v210;
            *v210 = 0;
            v344 = v197;
            v345 = v221;
            v222 = v221 & 0xFFFFFFFFFFFFFFF8;
            v347 = (v221 & 0xFFFFFFFFFFFFFFF8) + 16;
            while (1)
            {
              v223 = v199;
              if (v199 != v210)
              {
                if ((*v210 & 7) != 0)
                {
                  v224 = (unsigned int *)(*v210 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v225 = __ldxr(v224);
                  while (__stlxr(v225 - 2, v224));
                }
                *v210 = *v199;
                *v199 = 0;
              }
              if (v349 < v198)
                break;
              v226 = 2 * v198;
              v198 = (2 * v198) | 1;
              v199 = &v5[v198];
              v227 = v226 + 2;
              if (v226 + 2 < (uint64_t)v8)
              {
                if ((v199[1] & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v228 = (v199[1] & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v228 = result;
                }
                if ((*v199 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v229 = (*v199 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v229 = result;
                }
                if (*(char *)(v228 + 23) >= 0)
                  v230 = (char *)v228;
                else
                  v230 = *(char **)v228;
                v231 = *v230;
                if (*(char *)(v229 + 23) >= 0)
                  v232 = (char *)v229;
                else
                  v232 = *(char **)v229;
                if (v231 < 0
                  || (v233 = *v232, v233 < 0)
                  || ((v234 = v231,
                       v235 = v233,
                       v236 = (v233 ^ v234) & 0xFFFFFFDF,
                       v234 >= 0x40)
                    ? (v237 = v236 == 0)
                    : (v237 = 1),
                      v237 || v235 < 0x40))
                {
                  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v228, v229);
                  if (!(_DWORD)result)
                    goto LABEL_455;
LABEL_454:
                  ++v199;
                  v198 = v227;
                  goto LABEL_455;
                }
                if ((((_BYTE)v234 + 5) & 0x1Fu) < (((_BYTE)v235 + 5) & 0x1Fu))
                  goto LABEL_454;
              }
LABEL_455:
              v238 = v347;
              if (!v222)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v238 = result;
              }
              if ((*v199 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v239 = (*v199 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v239 = result;
              }
              if (*(char *)(v238 + 23) >= 0)
                v240 = (char *)v238;
              else
                v240 = *(char **)v238;
              v241 = *v240;
              if (*(char *)(v239 + 23) >= 0)
                v242 = (char *)v239;
              else
                v242 = *(char **)v239;
              if (v241 < 0
                || (v243 = *v242, v243 < 0)
                || ((v244 = v241,
                     v245 = v243,
                     v246 = (v243 ^ v244) & 0xFFFFFFDF,
                     v244 >= 0x40)
                  ? (v247 = v246 == 0)
                  : (v247 = 1),
                    v247 || v245 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v238, v239);
                v210 = v223;
                if ((_DWORD)result)
                  break;
              }
              else
              {
                v210 = v223;
                if ((((_BYTE)v244 + 5) & 0x1Fu) < (((_BYTE)v245 + 5) & 0x1Fu))
                  break;
              }
            }
            if ((*v223 & 7) != 0)
            {
              v248 = (unsigned int *)(*v223 & 0xFFFFFFFFFFFFFFF8);
              do
                v249 = __ldxr(v248);
              while (__stlxr(v249 - 2, v248));
            }
            *v223 = v345;
            v197 = v344;
LABEL_483:
            v196 = v197 - 1;
            if (!v197)
            {
              v250 = (unint64_t)v7 >> 3;
              while (1)
              {
                v251 = 0;
                v252 = *v5;
                *v5 = 0;
                v253 = v5;
                do
                {
                  v254 = &v253[v251 + 1];
                  v255 = 2 * v251;
                  v251 = (2 * v251) | 1;
                  v256 = v255 + 2;
                  if (v255 + 2 >= v250)
                    goto LABEL_512;
                  if ((v254[1] & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v257 = (v254[1] & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  else
                  {
                    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                    v257 = result;
                  }
                  if ((*v254 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v258 = (*v254 & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  else
                  {
                    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                    v258 = result;
                  }
                  if (*(char *)(v257 + 23) >= 0)
                    v259 = (char *)v257;
                  else
                    v259 = *(char **)v257;
                  v260 = *v259;
                  if (*(char *)(v258 + 23) >= 0)
                    v261 = (char *)v258;
                  else
                    v261 = *(char **)v258;
                  if ((v260 & 0x80000000) == 0)
                  {
                    v262 = *v261;
                    if ((v262 & 0x80000000) == 0)
                    {
                      v263 = v260;
                      v264 = v262;
                      v265 = (v262 ^ v263) & 0xFFFFFFDF;
                      v266 = v263 < 0x40 || v265 == 0;
                      if (!v266 && v264 >= 0x40)
                      {
                        if ((((_BYTE)v263 + 5) & 0x1Fu) >= (((_BYTE)v264 + 5) & 0x1Fu))
                          goto LABEL_512;
LABEL_511:
                        ++v254;
                        v251 = v256;
                        goto LABEL_512;
                      }
                    }
                  }
                  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v257, v258);
                  if ((_DWORD)result)
                    goto LABEL_511;
LABEL_512:
                  if (v254 != v253)
                  {
                    if ((*v253 & 7) != 0)
                    {
                      v267 = (unsigned int *)(*v253 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v268 = __ldxr(v267);
                      while (__stlxr(v268 - 2, v267));
                    }
                    *v253 = *v254;
                    *v254 = 0;
                  }
                  v253 = v254;
                }
                while (v251 <= (uint64_t)((unint64_t)(v250 - 2) >> 1));
                v269 = *v254;
                v270 = *v254 & 7;
                if (v254 == --a2)
                {
                  if (v270)
                  {
                    v275 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v276 = __ldxr(v275);
                    while (__stlxr(v276 - 2, v275));
                  }
                  *v254 = v252;
                }
                else
                {
                  if (v270)
                  {
                    v271 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v272 = __ldxr(v271);
                    while (__stlxr(v272 - 2, v271));
                  }
                  *v254 = *a2;
                  *a2 = v252;
                  v273 = (char *)v254 - (char *)v5 + 8;
                  if (v273 >= 9)
                  {
                    if ((*v254 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v274 = (*v254 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v274 = result;
                    }
                    v277 = (((unint64_t)v273 >> 3) - 2) >> 1;
                    v278 = &v5[v277];
                    if ((*v278 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v279 = (*v278 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v279 = result;
                    }
                    if (*(char *)(v274 + 23) >= 0)
                      v280 = (char *)v274;
                    else
                      v280 = *(char **)v274;
                    v281 = *v280;
                    if (*(char *)(v279 + 23) >= 0)
                      v282 = (char *)v279;
                    else
                      v282 = *(char **)v279;
                    if (v281 < 0
                      || (v283 = *v282, v283 < 0)
                      || ((v284 = v281,
                           v285 = v283,
                           v286 = (v283 ^ v284) & 0xFFFFFFDF,
                           v284 >= 0x40)
                        ? (v287 = v286 == 0)
                        : (v287 = 1),
                          v287 || v285 < 0x40))
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v274, v279);
                      if ((_DWORD)result)
                        goto LABEL_550;
                    }
                    else if ((((_BYTE)v284 + 5) & 0x1Fu) < (((_BYTE)v285 + 5) & 0x1Fu))
                    {
LABEL_550:
                      v288 = *v254;
                      *v254 = 0;
                      while (1)
                      {
                        v289 = v278;
                        if (v278 != v254)
                        {
                          if ((*v254 & 7) != 0)
                          {
                            v290 = (unsigned int *)(*v254 & 0xFFFFFFFFFFFFFFF8);
                            do
                              v291 = __ldxr(v290);
                            while (__stlxr(v291 - 2, v290));
                          }
                          *v254 = *v278;
                          *v278 = 0;
                        }
                        if (!v277)
                          break;
                        v292 = (v288 & 0xFFFFFFFFFFFFFFF8) + 16;
                        if ((v288 & 0xFFFFFFFFFFFFFFF8) == 0)
                        {
                          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                          v292 = result;
                        }
                        v277 = (v277 - 1) >> 1;
                        v278 = &v5[v277];
                        if ((*v278 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          v293 = (*v278 & 0xFFFFFFFFFFFFFFF8) + 16;
                        }
                        else
                        {
                          result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                          v293 = result;
                        }
                        if (*(char *)(v292 + 23) >= 0)
                          v294 = (char *)v292;
                        else
                          v294 = *(char **)v292;
                        v295 = *v294;
                        if (*(char *)(v293 + 23) >= 0)
                          v296 = (char *)v293;
                        else
                          v296 = *(char **)v293;
                        if (v295 < 0
                          || (v297 = *v296, v297 < 0)
                          || ((v298 = v295,
                               v299 = v297,
                               v300 = (v297 ^ v298) & 0xFFFFFFDF,
                               v298 >= 0x40)
                            ? (v301 = v300 == 0)
                            : (v301 = 1),
                              v301 || v299 < 0x40))
                        {
                          result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v292, v293);
                          v254 = v289;
                          if ((result & 1) == 0)
                            break;
                        }
                        else
                        {
                          v254 = v289;
                          if ((((_BYTE)v298 + 5) & 0x1Fu) >= (((_BYTE)v299 + 5) & 0x1Fu))
                            break;
                        }
                      }
                      if ((*v289 & 7) != 0)
                      {
                        v302 = (unsigned int *)(*v289 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v303 = __ldxr(v302);
                        while (__stlxr(v303 - 2, v302));
                      }
                      *v289 = v288;
                    }
                  }
                }
                if (v250-- <= 2)
                  return result;
              }
            }
          }
        }
        v9 = &k[v8 >> 1];
        if ((unint64_t)v7 < 0x401)
        {
          result = sub_20C3D1200((uint64_t)&v5[v8 >> 1], v5, v348);
        }
        else
        {
          sub_20C3D1200((uint64_t)v5, &v5[v8 >> 1], v348);
          sub_20C3D1200((uint64_t)(v5 + 1), v9 - 1, a2 - 2);
          sub_20C3D1200((uint64_t)(v5 + 2), &v5[(v8 >> 1) + 1], a2 - 3);
          result = sub_20C3D1200((uint64_t)(v9 - 1), &v5[v8 >> 1], &v5[(v8 >> 1) + 1]);
          v10 = *v5;
          *v5 = *v9;
          *v9 = v10;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v11 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v11 = result;
          }
          if ((*(v5 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v12 = (*(v5 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v12 = result;
          }
          if (*(char *)(v11 + 23) >= 0)
            v13 = (char *)v11;
          else
            v13 = *(char **)v11;
          v14 = *v13;
          if (*(char *)(v12 + 23) >= 0)
            v15 = (char *)v12;
          else
            v15 = *(char **)v12;
          if (v14 < 0
            || (v16 = *v15, v16 < 0)
            || ((v17 = v14,
                 v18 = v16,
                 v19 = (v16 ^ v17) & 0xFFFFFFDF,
                 v17 >= 0x40)
              ? (v20 = v19 == 0)
              : (v20 = 1),
                v20 || v18 < 0x40))
          {
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v11, v12);
            if ((result & 1) != 0)
              goto LABEL_30;
          }
          else if ((((_BYTE)v17 + 5) & 0x1Fu) < (((_BYTE)v18 + 5) & 0x1Fu))
          {
            goto LABEL_30;
          }
          v89 = *v5;
          *v5 = 0;
          if ((*v348 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v90 = (*v348 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v90 = result;
          }
          v91 = v89 & 0xFFFFFFFFFFFFFFF8;
          if ((v89 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v92 = v91 + 16;
          }
          else
          {
            result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v92 = result;
          }
          if (*(char *)(v90 + 23) >= 0)
            v93 = (char *)v90;
          else
            v93 = *(char **)v90;
          v94 = *v93;
          if (*(char *)(v92 + 23) >= 0)
            v95 = (char *)v92;
          else
            v95 = *(char **)v92;
          if (v94 < 0
            || (v96 = *v95, v96 < 0)
            || ((v97 = v94,
                 v98 = v96,
                 v99 = (v96 ^ v97) & 0xFFFFFFDF,
                 v97 >= 0x40)
              ? (v100 = v99 == 0)
              : (v100 = 1),
                v100 || v98 < 0x40))
          {
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v90, v92);
            if ((_DWORD)result)
            {
LABEL_184:
              for (k = v5 + 1; ; ++k)
              {
                if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v101 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v101 = result;
                }
                v102 = v91 + 16;
                if (!v91)
                {
                  result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v102 = result;
                }
                if (*(char *)(v101 + 23) >= 0)
                  v103 = (char *)v101;
                else
                  v103 = *(char **)v101;
                v104 = *v103;
                if (*(char *)(v102 + 23) >= 0)
                  v105 = (char *)v102;
                else
                  v105 = *(char **)v102;
                if (v104 < 0
                  || (v106 = *v105, v106 < 0)
                  || ((v107 = v104,
                       v108 = v106,
                       v109 = (v106 ^ v107) & 0xFFFFFFDF,
                       v107 >= 0x40)
                    ? (v110 = v109 == 0)
                    : (v110 = 1),
                      v110 || v108 < 0x40))
                {
                  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v101, v102);
                  if ((result & 1) != 0)
                    goto LABEL_231;
                }
                else if ((((_BYTE)v107 + 5) & 0x1Fu) < (((_BYTE)v108 + 5) & 0x1Fu))
                {
                  goto LABEL_231;
                }
              }
            }
          }
          else if ((((_BYTE)v97 + 5) & 0x1Fu) < (((_BYTE)v98 + 5) & 0x1Fu))
          {
            goto LABEL_184;
          }
          for (k = v5 + 1; k < a2; ++k)
          {
            if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v111 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v111 = result;
            }
            v112 = v91 + 16;
            if (!v91)
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v112 = result;
            }
            if (*(char *)(v111 + 23) >= 0)
              v113 = (char *)v111;
            else
              v113 = *(char **)v111;
            v114 = *v113;
            if (*(char *)(v112 + 23) >= 0)
              v115 = (char *)v112;
            else
              v115 = *(char **)v112;
            if (v114 < 0
              || (v116 = *v115, v116 < 0)
              || ((v117 = v114,
                   v118 = v116,
                   v119 = (v116 ^ v117) & 0xFFFFFFDF,
                   v117 >= 0x40)
                ? (v120 = v119 == 0)
                : (v120 = 1),
                  v120 || v118 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v111, v112);
              if ((result & 1) != 0)
                break;
            }
            else if ((((_BYTE)v117 + 5) & 0x1Fu) < (((_BYTE)v118 + 5) & 0x1Fu))
            {
              break;
            }
          }
LABEL_231:
          m = a2;
          if (k < a2)
          {
            for (m = a2 - 1; ; --m)
            {
              if ((*m & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v122 = (*m & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v122 = result;
              }
              v123 = v91 + 16;
              if (!v91)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v123 = result;
              }
              if (*(char *)(v122 + 23) >= 0)
                v124 = (char *)v122;
              else
                v124 = *(char **)v122;
              v125 = *v124;
              if (*(char *)(v123 + 23) >= 0)
                v126 = (char *)v123;
              else
                v126 = *(char **)v123;
              if (v125 < 0
                || (v127 = *v126, v127 < 0)
                || ((v128 = v125,
                     v129 = v127,
                     v130 = (v127 ^ v128) & 0xFFFFFFDF,
                     v128 >= 0x40)
                  ? (v131 = v130 == 0)
                  : (v131 = 1),
                    v131 || v129 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v122, v123);
                if (!(_DWORD)result)
                  break;
              }
              else if ((((_BYTE)v128 + 5) & 0x1Fu) >= (((_BYTE)v129 + 5) & 0x1Fu))
              {
                break;
              }
            }
          }
          if (k >= m)
            goto LABEL_299;
          do
          {
            v132 = *k;
            *k++ = *m;
            *m = v132;
            while (1)
            {
              if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v133 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v133 = result;
              }
              v134 = v91 + 16;
              if (!v91)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v134 = result;
              }
              v135 = *(char *)(v133 + 23) >= 0 ? (char *)v133 : *(char **)v133;
              v136 = *v135;
              v137 = *(char *)(v134 + 23) >= 0 ? (char *)v134 : *(char **)v134;
              if (v136 < 0)
                break;
              v138 = *v137;
              if (v138 < 0)
                break;
              v139 = v136;
              v140 = v138;
              v141 = (v138 ^ v139) & 0xFFFFFFDF;
              v142 = v139 < 0x40 || v141 == 0;
              if (v142 || v140 < 0x40)
                break;
              if ((((_BYTE)v139 + 5) & 0x1Fu) < (((_BYTE)v140 + 5) & 0x1Fu))
                goto LABEL_277;
LABEL_275:
              ++k;
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v133, v134);
            if ((result & 1) == 0)
              goto LABEL_275;
            do
            {
              while (1)
              {
LABEL_277:
                v143 = *--m;
                v144 = v143 & 0xFFFFFFFFFFFFFFF8;
                if ((v143 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v145 = v144 + 16;
                }
                else
                {
                  result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v145 = result;
                }
                v146 = v91 + 16;
                if (!v91)
                {
                  result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v146 = result;
                }
                v147 = *(char *)(v145 + 23) >= 0 ? (char *)v145 : *(char **)v145;
                v148 = *v147;
                v149 = *(char *)(v146 + 23) >= 0 ? (char *)v146 : *(char **)v146;
                if (v148 < 0)
                  break;
                v150 = *v149;
                if (v150 < 0)
                  break;
                v151 = v148;
                v152 = v150;
                v153 = (v150 ^ v151) & 0xFFFFFFDF;
                v154 = v151 < 0x40 || v153 == 0;
                if (v154 || v152 < 0x40)
                  break;
                if ((((_BYTE)v151 + 5) & 0x1Fu) >= (((_BYTE)v152 + 5) & 0x1Fu))
                  goto LABEL_298;
              }
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v145, v146);
            }
            while ((_DWORD)result);
LABEL_298:
            ;
          }
          while (k < m);
LABEL_299:
          v155 = k - 1;
          v156 = *v5;
          v157 = *v5 & 7;
          if (k - 1 == v5)
          {
            if (v157)
            {
              v160 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
              do
                v161 = __ldxr(v160);
              while (__stlxr(v161 - 2, v160));
            }
          }
          else
          {
            if (v157)
            {
              v158 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
              do
                v159 = __ldxr(v158);
              while (__stlxr(v159 - 2, v158));
            }
            *v5 = *v155;
            *v155 = 0;
          }
          a4 = 0;
          *v155 = v89;
          continue;
        }
LABEL_30:
        v21 = 0;
        v22 = *v5;
        *v5 = 0;
        v23 = v22 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v23)
          {
            result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v24 = result;
          }
          if ((v5[v21 + 1] & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v25 = (v5[v21 + 1] & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v25 = result;
          }
          v26 = *(char *)(v24 + 23) >= 0 ? (char *)v24 : *(char **)v24;
          v27 = *v26;
          v28 = *(char *)(v25 + 23) >= 0 ? (char *)v25 : *(char **)v25;
          if (v27 < 0)
            break;
          v29 = *v28;
          if (v29 < 0)
            break;
          v30 = v27;
          v31 = v29;
          v32 = (v29 ^ v30) & 0xFFFFFFDF;
          v33 = v30 < 0x40 || v32 == 0;
          if (v33 || v31 < 0x40)
            break;
          if ((((_BYTE)v30 + 5) & 0x1Fu) >= (((_BYTE)v31 + 5) & 0x1Fu))
            goto LABEL_52;
LABEL_50:
          ++v21;
        }
        result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v24, v25);
        if ((_DWORD)result)
          goto LABEL_50;
LABEL_52:
        v34 = &v5[v21];
        v35 = (unint64_t)&v5[v21 + 1];
        n = a2 - 1;
        if (v21 * 8)
        {
          while (1)
          {
            v37 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v23)
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v37 = result;
            }
            if ((*n & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v38 = (*n & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v38 = result;
            }
            if (*(char *)(v37 + 23) >= 0)
              v39 = (char *)v37;
            else
              v39 = *(char **)v37;
            v40 = *v39;
            if (*(char *)(v38 + 23) >= 0)
              v41 = (char *)v38;
            else
              v41 = *(char **)v38;
            if (v40 < 0
              || (v42 = *v41, v42 < 0)
              || ((v43 = v40,
                   v44 = v42,
                   v45 = (v42 ^ v43) & 0xFFFFFFDF,
                   v43 >= 0x40)
                ? (v46 = v45 == 0)
                : (v46 = 1),
                  v46 || v44 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v37, v38);
              if ((result & 1) != 0)
                goto LABEL_104;
            }
            else if ((((_BYTE)v43 + 5) & 0x1Fu) < (((_BYTE)v44 + 5) & 0x1Fu))
            {
              goto LABEL_104;
            }
            --n;
          }
        }
        n = a2;
        if (v35 < (unint64_t)a2)
        {
          for (n = a2 - 1; ; --n)
          {
            v47 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v23)
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v47 = result;
            }
            if ((*n & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v48 = (*n & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v48 = result;
            }
            if (*(char *)(v47 + 23) >= 0)
              v49 = (char *)v47;
            else
              v49 = *(char **)v47;
            v50 = *v49;
            if (*(char *)(v48 + 23) >= 0)
              v51 = (char *)v48;
            else
              v51 = *(char **)v48;
            if (v50 < 0
              || (v52 = *v51, v52 < 0)
              || ((v53 = v50,
                   v54 = v52,
                   v55 = (v52 ^ v53) & 0xFFFFFFDF,
                   v53 >= 0x40)
                ? (v56 = v55 == 0)
                : (v56 = 1),
                  v56 || v54 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v47, v48);
              if (v35 >= (unint64_t)n)
                v58 = 1;
              else
                v58 = result;
              if ((v58 & 1) != 0)
                break;
            }
            else if ((((_BYTE)v53 + 5) & 0x1Fu) < (((_BYTE)v54 + 5) & 0x1Fu) || v35 >= (unint64_t)n)
            {
              break;
            }
          }
        }
LABEL_104:
        if (v35 >= (unint64_t)n)
          goto LABEL_151;
        v59 = &v5[v21 + 1];
        v60 = n;
        while (2)
        {
          v61 = *v59;
          *v59++ = *v60;
          *v60 = v61;
          while (2)
          {
            v62 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v23)
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v62 = result;
            }
            if ((*v59 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v63 = (*v59 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v63 = result;
            }
            if (*(char *)(v62 + 23) >= 0)
              v64 = (char *)v62;
            else
              v64 = *(char **)v62;
            v65 = *v64;
            if (*(char *)(v63 + 23) >= 0)
              v66 = (char *)v63;
            else
              v66 = *(char **)v63;
            if ((v65 & 0x80000000) == 0)
            {
              v67 = *v66;
              if ((v67 & 0x80000000) == 0)
              {
                v68 = v65;
                v69 = v67;
                v70 = (v67 ^ v68) & 0xFFFFFFDF;
                v71 = v68 < 0x40 || v70 == 0;
                if (!v71 && v69 >= 0x40)
                {
                  if ((((_BYTE)v68 + 5) & 0x1Fu) >= (((_BYTE)v69 + 5) & 0x1Fu))
                    goto LABEL_128;
                  goto LABEL_126;
                }
              }
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v62, v63);
            if ((_DWORD)result)
            {
LABEL_126:
              ++v59;
              continue;
            }
            break;
          }
          do
          {
            while (1)
            {
LABEL_128:
              --v60;
              v72 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
              if (!v23)
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v72 = result;
              }
              if ((*v60 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v73 = (*v60 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v73 = result;
              }
              v74 = *(char *)(v72 + 23) >= 0 ? (char *)v72 : *(char **)v72;
              v75 = *v74;
              v76 = *(char *)(v73 + 23) >= 0 ? (char *)v73 : *(char **)v73;
              if (v75 < 0)
                break;
              v77 = *v76;
              if (v77 < 0)
                break;
              v78 = v75;
              v79 = v77;
              v80 = (v77 ^ v78) & 0xFFFFFFDF;
              v81 = v78 < 0x40 || v80 == 0;
              if (v81 || v79 < 0x40)
                break;
              if ((((_BYTE)v78 + 5) & 0x1Fu) < (((_BYTE)v79 + 5) & 0x1Fu))
                goto LABEL_149;
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v351, v72, v73);
          }
          while ((result & 1) == 0);
LABEL_149:
          if (v59 < v60)
            continue;
          break;
        }
        v34 = v59 - 1;
LABEL_151:
        v82 = *v5;
        v83 = *v5 & 7;
        if (v34 == v5)
        {
          if (v83)
          {
            v86 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
            do
              v87 = __ldxr(v86);
            while (__stlxr(v87 - 2, v86));
          }
        }
        else
        {
          if (v83)
          {
            v84 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
            do
              v85 = __ldxr(v84);
            while (__stlxr(v85 - 2, v84));
          }
          *v5 = *v34;
          *v34 = 0;
        }
        *v34 = v22;
        if (v35 < (unint64_t)n)
        {
LABEL_162:
          result = sub_20C3CF5A4(v5, v34, a3, a4 & 1);
          a4 = 0;
          k = v34 + 1;
          continue;
        }
        v88 = sub_20C3D1604(v5, v34);
        k = v34 + 1;
        result = sub_20C3D1604(v34 + 1, a2);
        if (!(_DWORD)result)
        {
          if ((v88 & 1) != 0)
            continue;
          goto LABEL_162;
        }
        a2 = v34;
        if ((v88 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_20C3D0E0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20C3D0E98(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  char *v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;

  result = sub_20C3D19F0(a1, a2, a3, a4);
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v11 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v11 = (uint64_t)result;
  }
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (*a5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v12 = (uint64_t)result;
  }
  if (*(char *)(v11 + 23) >= 0)
    v13 = (char *)v11;
  else
    v13 = *(char **)v11;
  v14 = *v13;
  if (*(char *)(v12 + 23) >= 0)
    v15 = (char *)v12;
  else
    v15 = *(char **)v12;
  if (v14 < 0
    || (v16 = *v15, v16 < 0)
    || ((v17 = v14,
         v18 = v16,
         v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (v20 = v19 == 0)
      : (v20 = 1),
        v20 || v18 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v47, v11, v12);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v22 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v22 = (uint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v23 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v23 = (uint64_t)result;
  }
  if (*(char *)(v22 + 23) >= 0)
    v24 = (char *)v22;
  else
    v24 = *(char **)v22;
  v25 = *v24;
  if (*(char *)(v23 + 23) >= 0)
    v26 = (char *)v23;
  else
    v26 = *(char **)v23;
  if (v25 < 0
    || (v27 = *v26, v27 < 0)
    || ((v28 = v25,
         v29 = v27,
         v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (v31 = v30 == 0)
      : (v31 = 1),
        v31 || v29 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v48, v22, v23);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  v32 = *a3;
  *a3 = *a4;
  *a4 = v32;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v33 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v33 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v34 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v34 = (uint64_t)result;
  }
  if (*(char *)(v33 + 23) >= 0)
    v35 = (char *)v33;
  else
    v35 = *(char **)v33;
  v36 = *v35;
  if (*(char *)(v34 + 23) >= 0)
    v37 = (char *)v34;
  else
    v37 = *(char **)v34;
  if (v36 < 0
    || (v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v49, v33, v34);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v40 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v40 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v41 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v41 = (uint64_t)result;
  }
  if (*(char *)(v40 + 23) >= 0)
    v42 = (char *)v40;
  else
    v42 = *(char **)v40;
  v43 = *v42;
  if (*(char *)(v41 + 23) >= 0)
    v44 = (char *)v41;
  else
    v44 = *(char **)v41;
  if (v43 < 0
    || (v45 = *v44, v45 < 0)
    || v43 < 0x40u
    || ((v45 ^ v43) & 0xFFFFFFDF) == 0
    || v45 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v50, v40, v41);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
  {
    return result;
  }
  v46 = *a1;
  *a1 = *a2;
  *a2 = v46;
  return result;
}

uint64_t sub_20C3D1200(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  char *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v5 = (uint64_t *)result;
  if ((*(_QWORD *)result & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = (*(_QWORD *)result & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v6 = result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v7 = result;
  }
  if (*(char *)(v6 + 23) >= 0)
    v8 = (char *)v6;
  else
    v8 = *(char **)v6;
  v9 = *v8;
  if (*(char *)(v7 + 23) >= 0)
    v10 = (char *)v7;
  else
    v10 = *(char **)v7;
  if (v9 < 0
    || (v11 = *v10, v11 < 0)
    || ((v12 = v9,
         v13 = v11,
         v14 = (v11 ^ v12) & 0xFFFFFFDF,
         v12 >= 0x40)
      ? (v15 = v14 == 0)
      : (v15 = 1),
        v15 || v13 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v62, v6, v7);
    if ((result & 1) != 0)
      goto LABEL_21;
  }
  else if ((((_BYTE)v12 + 5) & 0x1Fu) < (((_BYTE)v13 + 5) & 0x1Fu))
  {
LABEL_21:
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v16 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v16 = result;
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v17 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v17 = result;
    }
    if (*(char *)(v16 + 23) >= 0)
      v18 = (char *)v16;
    else
      v18 = *(char **)v16;
    v19 = *v18;
    if (*(char *)(v17 + 23) >= 0)
      v20 = (char *)v17;
    else
      v20 = *(char **)v17;
    if (v19 < 0
      || (v21 = *v20, v21 < 0)
      || ((v22 = v19,
           v23 = v21,
           v24 = (v21 ^ v22) & 0xFFFFFFDF,
           v22 >= 0x40)
        ? (v25 = v24 == 0)
        : (v25 = 1),
          v25 || v23 < 0x40))
    {
      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v65, v16, v17);
      if ((result & 1) != 0)
        goto LABEL_41;
    }
    else if ((((_BYTE)v22 + 5) & 0x1Fu) < (((_BYTE)v23 + 5) & 0x1Fu))
    {
LABEL_41:
      a2 = a3;
LABEL_105:
      v61 = *v5;
      *v5 = *a2;
      *a2 = v61;
      return result;
    }
    v49 = *v5;
    *v5 = *a2;
    *a2 = v49;
    v50 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v50)
    {
      v51 = v50 + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v51 = result;
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v52 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v52 = result;
    }
    if (*(char *)(v51 + 23) >= 0)
      v53 = (char *)v51;
    else
      v53 = *(char **)v51;
    v54 = *v53;
    if (*(char *)(v52 + 23) >= 0)
      v55 = (char *)v52;
    else
      v55 = *(char **)v52;
    if (v54 < 0
      || (v56 = *v55, v56 < 0)
      || ((v57 = v54,
           v58 = v56,
           v59 = (v56 ^ v57) & 0xFFFFFFDF,
           v57 >= 0x40)
        ? (v60 = v59 == 0)
        : (v60 = 1),
          v60 || v58 < 0x40))
    {
      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v66, v51, v52);
      v5 = a2;
      a2 = a3;
      if (!(_DWORD)result)
        return result;
      goto LABEL_105;
    }
    v47 = ((_BYTE)v57 + 5) & 0x1F;
    v48 = ((_BYTE)v58 + 5) & 0x1F;
    v5 = a2;
    a2 = a3;
LABEL_104:
    if (v47 >= v48)
      return result;
    goto LABEL_105;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v26 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v26 = result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v27 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v27 = result;
  }
  if (*(char *)(v26 + 23) >= 0)
    v28 = (char *)v26;
  else
    v28 = *(char **)v26;
  v29 = *v28;
  if (*(char *)(v27 + 23) >= 0)
    v30 = (char *)v27;
  else
    v30 = *(char **)v27;
  if (v29 < 0
    || (v31 = *v30, v31 < 0)
    || ((v32 = v29,
         v33 = v31,
         v34 = (v31 ^ v32) & 0xFFFFFFDF,
         v32 >= 0x40)
      ? (v35 = v34 == 0)
      : (v35 = 1),
        v35 || v33 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v63, v26, v27);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v32 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
  {
    return result;
  }
  v36 = *a2;
  *a2 = *a3;
  *a3 = v36;
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v37 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v37 = result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v38 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v38 = result;
  }
  if (*(char *)(v37 + 23) >= 0)
    v39 = (char *)v37;
  else
    v39 = *(char **)v37;
  v40 = *v39;
  if (*(char *)(v38 + 23) >= 0)
    v41 = (char *)v38;
  else
    v41 = *(char **)v38;
  if ((v40 & 0x80000000) == 0)
  {
    v42 = *v41;
    if ((v42 & 0x80000000) == 0)
    {
      v43 = v40;
      v44 = v42;
      v45 = (v42 ^ v43) & 0xFFFFFFDF;
      v46 = v43 < 0x40 || v45 == 0;
      if (!v46 && v44 >= 0x40)
      {
        v47 = ((_BYTE)v43 + 5) & 0x1F;
        v48 = ((_BYTE)v44 + 5) & 0x1F;
        goto LABEL_104;
      }
    }
  }
  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v64, v37, v38);
  if ((result & 1) != 0)
    goto LABEL_105;
  return result;
}

uint64_t sub_20C3D1604(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t *EmptyString;
  char *v40;
  int v41;
  char *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v6 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)1);
        v6 = result;
      }
      if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      if (*(char *)(v6 + 23) >= 0)
        v40 = (char *)v6;
      else
        v40 = *(char **)v6;
      v41 = *v40;
      if (*((char *)EmptyString + 23) >= 0)
        v42 = (char *)EmptyString;
      else
        v42 = (char *)*EmptyString;
      if ((v41 & 0x80000000) == 0)
      {
        v43 = *v42;
        if ((v43 & 0x80000000) == 0)
        {
          v44 = v41;
          v45 = v43;
          v46 = (v43 ^ v44) & 0xFFFFFFDF;
          v47 = v44 < 0x40 || v46 == 0;
          if (!v47 && v45 >= 0x40)
          {
            if ((((_BYTE)v44 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
              return 1;
            goto LABEL_85;
          }
        }
      }
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v49, v6, (uint64_t)EmptyString))
      {
LABEL_85:
        v48 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v48;
      }
      return 1;
    case 3:
      sub_20C3D1200((uint64_t)a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20C3D19F0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_20C3D0E98(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      v8 = sub_20C3D1200((uint64_t)a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      while (2)
      {
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v11 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          v8 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
          v11 = v8;
        }
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          v8 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
          v12 = v8;
        }
        if (*(char *)(v11 + 23) >= 0)
          v13 = (char *)v11;
        else
          v13 = *(char **)v11;
        v14 = *v13;
        if (*(char *)(v12 + 23) >= 0)
          v15 = (char *)v12;
        else
          v15 = *(char **)v12;
        if (v14 < 0
          || (v16 = *v15, v16 < 0)
          || ((v17 = v14,
               v18 = v16,
               v19 = (v16 ^ v17) & 0xFFFFFFDF,
               v17 >= 0x40)
            ? (v20 = v19 == 0)
            : (v20 = 1),
              v20 || v18 < 0x40))
        {
          v8 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v50, v11, v12);
          if (!(_DWORD)v8)
            goto LABEL_60;
        }
        else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
        {
          goto LABEL_60;
        }
        v21 = *v9;
        *v9 = 0;
        v22 = v9;
        while (1)
        {
          v23 = v7;
          if (v7 != v22)
          {
            if ((*v22 & 7) != 0)
            {
              v24 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
              do
                v25 = __ldxr(v24);
              while (__stlxr(v25 - 2, v24));
            }
            *v22 = *v7;
            *v7 = 0;
          }
          if (v7 == a1)
            break;
          --v7;
          if ((*(v23 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v26 = (*(v23 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            v8 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
            v26 = v8;
          }
          v27 = (v21 & 0xFFFFFFFFFFFFFFF8) + 16;
          if ((v21 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            v8 = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
            v27 = v8;
          }
          if (*(char *)(v26 + 23) >= 0)
            v28 = (char *)v26;
          else
            v28 = *(char **)v26;
          v29 = *v28;
          if (*(char *)(v27 + 23) >= 0)
            v30 = (char *)v27;
          else
            v30 = *(char **)v27;
          if (v29 < 0
            || (v31 = *v30, v31 < 0)
            || ((v32 = v29,
                 v33 = v31,
                 v34 = (v31 ^ v32) & 0xFFFFFFDF,
                 v32 >= 0x40)
              ? (v35 = v34 == 0)
              : (v35 = 1),
                v35 || v33 < 0x40))
          {
            v8 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v51, v26, v27);
            v22 = v23;
            if ((v8 & 1) == 0)
              goto LABEL_56;
          }
          else
          {
            v36 = ((_BYTE)v33 + 5) & 0x1F;
            v22 = v23;
            if ((((_BYTE)v32 + 5) & 0x1Fu) >= v36)
              goto LABEL_56;
          }
        }
        v23 = a1;
LABEL_56:
        if ((*v23 & 7) != 0)
        {
          v37 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        *v23 = v21;
        if (++v10 != 8)
        {
LABEL_60:
          v7 = v9++;
          if (v9 == a2)
            return 1;
          continue;
        }
        return v9 + 1 == a2;
      }
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20C3D19F0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C3D1200((uint64_t)a1, a2, a3);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v9 = (uint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v10 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v10 = (uint64_t)result;
  }
  if (*(char *)(v9 + 23) >= 0)
    v11 = (char *)v9;
  else
    v11 = *(char **)v9;
  v12 = *v11;
  if (*(char *)(v10 + 23) >= 0)
    v13 = (char *)v10;
  else
    v13 = *(char **)v10;
  if (v12 < 0
    || (v14 = *v13, v14 < 0)
    || ((v15 = v12,
         v16 = v14,
         v17 = (v14 ^ v15) & 0xFFFFFFDF,
         v15 >= 0x40)
      ? (v18 = v17 == 0)
      : (v18 = 1),
        v18 || v16 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v38, v9, v10);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v15 + 5) & 0x1Fu) >= (((_BYTE)v16 + 5) & 0x1Fu))
  {
    return result;
  }
  v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v20 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v20 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v21 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v21 = (uint64_t)result;
  }
  if (*(char *)(v20 + 23) >= 0)
    v22 = (char *)v20;
  else
    v22 = *(char **)v20;
  v23 = *v22;
  if (*(char *)(v21 + 23) >= 0)
    v24 = (char *)v21;
  else
    v24 = *(char **)v21;
  if (v23 < 0
    || (v25 = *v24, v25 < 0)
    || ((v26 = v23,
         v27 = v25,
         v28 = (v25 ^ v26) & 0xFFFFFFDF,
         v26 >= 0x40)
      ? (v29 = v28 == 0)
      : (v29 = 1),
        v29 || v27 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v39, v20, v21);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v26 + 5) & 0x1Fu) >= (((_BYTE)v27 + 5) & 0x1Fu))
  {
    return result;
  }
  v30 = *a2;
  *a2 = *a3;
  *a3 = v30;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v31 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v31 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v32 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v32 = (uint64_t)result;
  }
  if (*(char *)(v31 + 23) >= 0)
    v33 = (char *)v31;
  else
    v33 = *(char **)v31;
  v34 = *v33;
  if (*(char *)(v32 + 23) >= 0)
    v35 = (char *)v32;
  else
    v35 = *(char **)v32;
  if (v34 < 0
    || (v36 = *v35, v36 < 0)
    || v34 < 0x40u
    || ((v36 ^ v34) & 0xFFFFFFDF) == 0
    || v36 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v40, v31, v32);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v36 + 5) & 0x1Fu))
  {
    return result;
  }
  v37 = *a1;
  *a1 = *a2;
  *a2 = v37;
  return result;
}

void sub_20C3D1C8C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  char *v8;
  BOOL v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (char *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 16;
        v13[1] = v8 + 24;
        sub_20C3D1DD0((uint64_t)v13, (uint64_t)(v4 + 2));
        v10 = *(char **)v8;
        v11 = bswap64(0x9E3779B97F4A7C55 * *((_QWORD *)v8 + 2));
        *((_QWORD *)v8 + 1) = v11;
        v12 = sub_20BEC5A00((uint64_t)a1, v11, (_QWORD *)v8 + 2);
        sub_20BEC5B54(a1, v8, v12);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_20C3CDF80((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20C3D1E20(a1, (uint64_t)(v4 + 2));
    v4 = (_QWORD *)*v4;
  }
}

void sub_20C3D1DA0(void *a1)
{
  uint64_t v1;
  char *v2;

  __cxa_begin_catch(a1);
  sub_20C3CDF80(v1, v2);
  __cxa_rethrow();
}

void sub_20C3D1DBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D1DD0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  **(_QWORD **)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD **)(a1 + 8);
  if (v3 != (_QWORD *)(a2 + 8))
    sub_20C106430(v3, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

_QWORD *sub_20C3D1E20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  sub_20C3D1EB4((uint64_t)a1, a2, (uint64_t)&v8);
  v3 = v8;
  v4 = v8 + 2;
  v5 = bswap64(0x9E3779B97F4A7C55 * v8[2]);
  v8[1] = v5;
  v6 = sub_20BEC5A00((uint64_t)a1, v5, v4);
  sub_20BEC5B54(a1, v3, v6);
  return v3;
}

void sub_20C3D1E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20C3CDF00((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3D1EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  v7 = *(uint64_t **)(a2 + 8);
  v6[2] = *(_QWORD *)a2;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  result = sub_20BFE538C(v6 + 3, v7, *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v7) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = bswap64(0x9E3779B97F4A7C55 * v6[2]);
  return result;
}

void sub_20C3D1F50(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  sub_20C3CDF00(v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D1F6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C3D2228(a2, v7, v6);
}

uint64_t sub_20C3D1FC4(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(unsigned int **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

__n128 sub_20C3D202C(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int64x2_t v22;
  uint64_t v23;
  __n128 result;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v6 = *a1;
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v11 = v4 - v6;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v28 = a1[4];
      v15 = (char *)sub_20BDE4FF4(v28, v13);
      v17 = &v15[24 * v14];
      v18 = a1[1];
      v19 = a1[2] - v18;
      if (v19)
      {
        v20 = &v17[v19];
        v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)v21 = *(_OWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          *((_QWORD *)v21 + 2) = *(_QWORD *)(v18 + 16);
          v21 += 24;
          v18 += 24;
        }
        while (v21 != v20);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v18);
        v20 = &v15[24 * v14];
      }
      v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      v26 = v22;
      v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      v27 = v23;
      sub_20BF2E6C0((unsigned int *)&v25);
      v4 = a1[2];
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -3 * (v8 >> 1);
      sub_20C3D2284(v5, v4, v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  result = *a2;
  *(__n128 *)v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  a1[2] += 24;
  return result;
}

uint64_t sub_20C3D2178(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_20C3D22E0((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C3D2378(v7, (uint64_t)a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C3D2228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 24;
      a3 -= 24;
      sub_20C3D1FC4(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_20C3D2284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C3D1FC4(a3, v4);
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_20C3D22E0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7 - 24;
    do
    {
      v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(_QWORD *)(v8 + 16) = a3[2];
      *((_QWORD *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C3D23F8((uint64_t)v12);
  return v10;
}

uint64_t sub_20C3D2378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
      v4 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  sub_20C3D242C((uint64_t)v6);
  return v4;
}

uint64_t sub_20C3D23F8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF2E660((unsigned int *)a1);
  return a1;
}

uint64_t sub_20C3D242C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C3D2460((_QWORD **)a1);
  return a1;
}

_QWORD **sub_20C3D2460(_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *result[2];
  v2 = *result[1];
  while (v1 != v2)
  {
    result = *(_QWORD ***)(v1 - 16);
    if (result)
    {
      v3 = (unsigned int *)(result + 1);
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
    }
    v1 -= 24;
  }
  return result;
}

_QWORD *sub_20C3D24C0(uint64_t a1, _QWORD *a2, uint64_t *a3, __n128 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x40uLL);
  *i = 0;
  i[1] = v9;
  sub_20C3D272C((uint64_t)(i + 2), a3, a4);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3D2710(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_20C3D2788(v2, v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3D272C(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  __n128 result;
  unint64_t v7;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  result = *a3;
  *(_QWORD *)(a1 + 24) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  v7 = a3[1].n128_u64[1];
  a3[1].n128_u64[1] = 0;
  *(_QWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = a3[2].n128_u32[0];
  return result;
}

void sub_20C3D2788(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20C358AEC(a2 + 6, 0);
    v3 = a2[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_20C3D27F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_20BDDF694();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)sub_20BDDF6A8(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[8 * v10];
    v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    v16 = &v15[8 * a2];
    sub_20C249340(a1, &v14);
    sub_20C249448((uint64_t)&v14);
  }
}

void sub_20C3D28DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C249448((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D28F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C313334(*(_QWORD *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C3D2970(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6[8];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  if (sub_20BFE517C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C3AE4C8(a2, v6);
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)v4 = v6[0];
    sub_20C0B4038((void **)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v7 = 0uLL;
    v8 = 0;
    sub_20C0B4038((void **)(v4 + 32));
    *(_OWORD *)(v4 + 32) = v9;
    *(_QWORD *)(v4 + 48) = v10;
    v9 = 0uLL;
    v10 = 0;
    sub_20C0B4038((void **)(v4 + 56));
    *(_OWORD *)(v4 + 56) = v11;
    *(_QWORD *)(v4 + 72) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20C0B4038((void **)(v4 + 80));
    *(_OWORD *)(v4 + 80) = v13;
    *(_QWORD *)(v4 + 96) = v14;
    v13 = 0uLL;
    v14 = 0;
    sub_20C0B4038((void **)(v4 + 104));
    *(_OWORD *)(v4 + 104) = v15;
    *(_QWORD *)(v4 + 120) = v16;
    v15 = 0uLL;
    v16 = 0;
    sub_20C0B4038((void **)(v4 + 128));
    *(_OWORD *)(v4 + 128) = v17;
    *(_QWORD *)(v4 + 144) = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = (void **)&v17;
    sub_20BEEB2B8(&v19);
    v19 = (void **)&v15;
    sub_20BEEB2B8(&v19);
    v19 = (void **)&v13;
    sub_20BEEB2B8(&v19);
    v19 = (void **)&v11;
    sub_20BEEB2B8(&v19);
    v19 = (void **)&v9;
    sub_20BEEB2B8(&v19);
    v19 = (void **)&v7;
    sub_20BEEB2B8(&v19);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_QWORD *sub_20C3D2B20(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v10 = bswap64(0x9E3779B97F4A7C55 * (v9 + ((((v9 + v8) | 1) * (v9 + v8)) >> 1)));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if ((v14[2] & 0xFFFFFFFFFFFFFFF8) == v8 && (v14[3] & 0xFFFFFFFFFFFFFFF8) == v9)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *((_DWORD *)v14 + 8) = *a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v14 = *v24;
LABEL_39:
    *v24 = v14;
    goto LABEL_40;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v23 + 8 * v4) = v16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C3D2D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BFC9F84(v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3D2DB8(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C3D300C(a1, v7, a3, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C3D2FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  if (a10)
    sub_20C3D30A8((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3D300C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;

  v9 = a1 + 16;
  result = operator new(0x28uLL);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v9;
  *result = 0;
  result[1] = a2;
  v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *a4;
  *a4 = 0;
  result[3] = v14;
  *((_BYTE *)result + 32) = *((_BYTE *)a4 + 8);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3D30A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20C358AEC(a2 + 3, 0);
    v3 = a2[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *sub_20C3D3110(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C3D3364(a1, v7, a3, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C3D3340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  if (a10)
    sub_20C3D30A8((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3D3364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;

  v9 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v9;
  *result = 0;
  result[1] = a2;
  v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *a4;
  *a4 = 0;
  result[3] = v14;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

_QWORD *sub_20C3D33F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BF23DDC(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C3D3628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    sub_20C3CF538((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3D364C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C3D38A0(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C3D387C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    sub_20C3D3928((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3D38A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = **a3;
  v8[2] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v8[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v8[4] = 0;
  v8[5] = 0;
  result = v8 + 4;
  *(result - 1) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C3D3928(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BF2B200(a2 + 24, *(_QWORD **)(a2 + 32));
    v3 = *(_QWORD *)(a2 + 16);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecializes,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v3;

  v3 = (unsigned int **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(v3, a2);
}

BOOL sub_20C3D39B8(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, int a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  _BOOL8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *Instance;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  char v31[8];
  int v32;
  int v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    sub_20BFD6E54(&v32, a2);
    sub_20BFD6EA4(&v33, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v34);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v34);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = sub_20C396D0C(&v32, EditTarget);
    v10 = v35;
    if (v35)
    {
      v11 = (unsigned int *)(v35 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v9 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20C3D4538(a1, v14, &v34);
      if (v34
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v34 + 1) & 1) == 0)
      {
        v28 = v34;
        v29 = (std::__shared_weak_count *)v35;
        if (v35)
        {
          v20 = (unint64_t *)(v35 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        sub_20C360F84(&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, a3);
        v22 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v26 = v30;
        v27 = atomic_load(Instance + 18);
        v15 = v26 >= v27
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v15 = 0;
      }
      v16 = (std::__shared_weak_count *)v35;
      if (v35)
      {
        v17 = (unint64_t *)(v35 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
    }
    else
    {
      v15 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
  }
  else
  {
    v34 = "usd/listEditImpl.h";
    v35 = "Add";
    v36 = 117;
    v37 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Add(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal__aap"
          "l__pxrReserved__::UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrIn"
          "ternal__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v15;
}

void sub_20C3D3BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, int a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  sub_20BFD1A18(&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20C3D3C90(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char v7;
  const char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  _BOOL8 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *Instance;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[8];
  int v26;
  int v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    sub_20BFD6E54(&v26, a2);
    sub_20BFD6EA4(&v27, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v28);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v28);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = sub_20C396D0C(&v26, EditTarget);
    v8 = v29;
    if (v29)
    {
      v9 = (unsigned int *)(v29 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(const char *))(*(_QWORD *)v8 + 8))(v8);
    }
    if ((v7 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20C3D4538(a1, v12, &v28);
      if (v28
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v28 + 1) & 1) == 0)
      {
        sub_20C3613EC((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        v22 = v24;
        v23 = atomic_load(Instance + 18);
        v13 = v22 >= v23
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      }
      else
      {
        v13 = 0;
      }
      v14 = (std::__shared_weak_count *)v29;
      if (v29)
      {
        v15 = (unint64_t *)(v29 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17)
        v17 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v18 = sub_20BEC5244(&v24, 0);
      LOBYTE(v28) = 0;
      v19 = (_QWORD *)sub_20BEB5B80(v17 + 19, &v28);
      if (v19 != v18)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v17, v18, v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v24);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
    }
    else
    {
      v13 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_20BFD265C(&v26);
  }
  else
  {
    v28 = "usd/listEditImpl.h";
    v29 = "Remove";
    v30 = 148;
    v31 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Remove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved"
          "__::UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__"
          "pxrReserved__::SdfPathKeyPolicy>]";
    v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v13;
}

void sub_20C3D3EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a10);
  sub_20BFD1A18(&a12);
  _Unwind_Resume(a1);
}

BOOL sub_20C3D3F4C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  unint64_t *Instance;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  _BYTE v16[8];
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20C3D4538(a1, v3, &v17);
    if (v17
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v17 + 1) & 1) == 0
      && sub_20C0AA0E4((uint64_t)&v17)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v17 + 6))(v17))
    {
      Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!Instance)
        Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v5 = v15;
      v6 = atomic_load(Instance + 18);
      v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
    }
    else
    {
      v7 = 0;
    }
    v8 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v9 = (unint64_t *)(v18 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v11)
      v11 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v12 = sub_20BEC5244(&v15, 0);
    LOBYTE(v17) = 0;
    v13 = (_QWORD *)sub_20BEB5B80(v11 + 19, &v17);
    if (v13 != v12)
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    v18 = "Clear";
    v19 = 174;
    v20 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Clear(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdSpecializes, ListOp"
          "ProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_20C3D4100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20C3D413C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  unint64_t *Instance;
  unint64_t v16;
  unint64_t v17;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL8 v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char **v35;
  std::__shared_weak_count *v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[8];
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  const char *v45;
  char v46;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v42);
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v42);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = v43;
    if (v43)
    {
      v8 = (unsigned int *)(v43 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_20C0B8D74((uint64_t *)&v42, (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
    v11 = *(_DWORD **)a2;
    v12 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (*(_DWORD **)a2 != v12)
    {
      do
      {
        sub_20BFD6E54(&v35, v11);
        sub_20BFD6EA4((_DWORD *)&v35 + 1, v11 + 1);
        if (sub_20C396D0C((int *)&v35, EditTarget))
        {
          v13 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v14 = (char *)sub_20BFD7890((uint64_t *)&v42, &v35);
          }
          else
          {
            sub_20BFD6E54(v43, &v35);
            sub_20BFD6EA4((_DWORD *)v13 + 1, (_DWORD *)&v35 + 1);
            v14 = v13 + 8;
          }
          v43 = v14;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
        sub_20BFD265C(&v35);
        v11 += 2;
      }
      while (v11 != v12);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v16 = v41;
    v17 = atomic_load(Instance + 18);
    if (v16 >= v17
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
      sub_20C3D4538(a1, v18, &v38);
      if (v38
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v38 + 8)) & 1) == 0)
      {
        if (v42 == v43)
        {
          if (sub_20C0AA0E4((uint64_t)&v38))
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
        }
        else
        {
          v35 = (char **)v38;
          v36 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
          }
          v37 = 0;
          sub_20C3619E0((unsigned int *)&v35, &v42);
          v32 = v36;
          if (v36)
          {
            v33 = (unint64_t *)&v36->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
      }
      v19 = v39;
      if (v39)
      {
        v20 = (unint64_t *)&v39->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v22)
        v22 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v23 = v41;
      v24 = atomic_load(v22 + 18);
      v25 = v23 >= v24
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v22);
      v26 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26)
        v26 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v27 = sub_20BEC5244(&v41, 0);
      LOBYTE(v38) = 0;
      v28 = (_QWORD *)sub_20BEB5B80(v26 + 19, &v38);
      if (v28 != v27)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v26, v27, v28);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v40);
    }
    else
    {
      v25 = 0;
    }
    v35 = &v42;
    sub_20BFD6F90((void ***)&v35);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
  }
  else
  {
    v42 = "usd/listEditImpl.h";
    v43 = "Set";
    v44 = 195;
    v45 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Set(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrReserved_"
          "_::UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__p"
          "xrReserved__::SdfPathKeyPolicy>]";
    v46 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v25;
}

void sub_20C3D44B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a14);
  a9 = &a20;
  sub_20BFD6F90((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D4538@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, _QWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int **v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (v15 = "usd/listEditImpl.h",
        v16 = "_GetListEditor",
        v17 = 238,
        v18 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdSpecializes, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::S"
              "dfPathKeyPolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::"
              "UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__"
              "pxrReserved__::SdfPathKeyPolicy>]",
        v19 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v15);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v14);
    v7 = v16;
    if (v16)
    {
      v8 = (unsigned int *)(v16 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(const char *))(*(_QWORD *)v7 + 8))(v7);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v14))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      v12 = (unsigned int **)sub_20C0B0CA4(&v14);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(v12, a3);
    }
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_20C3D4628(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D4654(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C46FE3C(a1, a3, (uint64_t)v6);
}

void sub_20C3D5654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4449C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D58C8(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4730E8(a1, a3, (uint64_t)v6);
}

void sub_20C3D6948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C473088((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3D6C18(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIbEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3D6C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C475DF4(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3D6CB0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIbEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3D6CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C47622C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<BOOL>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB770];
  v5[0] = &unk_24C537660;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIbEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t sub_20C3D6D74(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t ***Instance;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t Typeid;
  const char *v14;
  unint64_t v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  const char *Text;
  unint64_t v22;
  const char *v23;
  const char *v24;
  unint64_t v25;
  const char *v26;
  _BOOL8 v27;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v28;
  void *p_Type;
  const char *v30;
  char *v31;
  int v32;
  const char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  int IsDormant;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *v40;
  const char *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t Identifier;
  const char *v44;
  unsigned int *v45;
  const char *v46;
  double v47;
  uint64_t **v48;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  const char *v51;
  unsigned int v52;
  unsigned int v53;
  const std::type_info *v55;
  char *v56;
  void *__p[2];
  char v58;
  void *v59[2];
  char v60;
  int v61;
  int v62;
  void *v63;
  void *Type;
  const char *v65;
  uint64_t v66;
  const char *v67;
  char v68;
  double Inverse;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  unsigned int *v74[3];
  __int16 v75;
  uint64_t v76;
  double v77;

  v77 = a4;
  if (sub_20BDE150C(*(_QWORD *)(a3 + 16), (uint64_t)&stru_24C527B78))
    goto LABEL_56;
  v76 = 0;
  v74[2] = (unsigned int *)&stru_24C51BCE0;
  v75 = 0;
  v74[0] = (unsigned int *)&unk_24C5286B0;
  v74[1] = (unsigned int *)&v76;
  sub_20C4535E0((uint64_t)&Inverse, (uint64_t)v74, (uint64_t)a2);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Type = 0;
  sub_20C4577E8(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448), (uint64_t *)&Type, (uint64_t (****)(_QWORD, uint64_t))&Inverse);
  if ((Type & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)Type & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if (!v76)
  {
    Type = "usd/stage.cpp";
    v65 = "_SetValueImpl";
    v66 = 6738;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    v68 = 0;
    sub_20C348EEC((uint64_t)a2, (int *)v59);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v59);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 3, (pxrInternal__aapl__pxrReserved__ *)"Empty typeName for <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
LABEL_44:
    v20 = v59;
LABEL_45:
    sub_20BFD265C(v20);
    v32 = 1;
    goto LABEL_46;
  }
  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  Type = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v76);
  v63 = *(void **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
  if (v63 == Type)
  {
    Type = "usd/stage.cpp";
    v65 = "_SetValueImpl";
    v66 = 6745;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    v68 = 0;
    v22 = v76 & 0xFFFFFFFFFFFFFFF8;
    if ((v76 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v23 = (const char *)(v22 + 16);
      if (*(char *)(v22 + 39) < 0)
        v23 = *(const char **)v23;
    }
    else
    {
      v23 = "";
    }
    sub_20C348EEC((uint64_t)a2, (int *)v59);
    v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v59);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown typename for <%s>: '%s'", v23, v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
    goto LABEL_44;
  }
  if ((v11 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(pxrInternal__aapl__pxrReserved__::UsdTimeCode,pxrInternal__aapl__pxrReserved__::UsdAttribute const&,pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue const&)::opaqueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D80, v55, v56);
  }
  if (v63 == (void *)pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(pxrInternal__aapl__pxrReserved__::UsdTimeCode,pxrInternal__aapl__pxrReserved__::UsdAttribute const&,pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue const&)::opaqueType)
  {
    Type = "usd/stage.cpp";
    v65 = "_SetValueImpl";
    v66 = 6752;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    v68 = 0;
    sub_20C348EEC((uint64_t)a2, (int *)v59);
    v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v59);
    v25 = v76 & 0xFFFFFFFFFFFFFFF8;
    if ((v76 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v26 = (const char *)(v25 + 16);
      if (*(char *)(v25 + 39) < 0)
        v26 = *(const char **)v26;
    }
    else
    {
      v26 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s>: %s-typed attributes cannot have an authored default value", v24, v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
    goto LABEL_44;
  }
  v12 = *(_QWORD *)(a3 + 16);
  Typeid = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v63);
  if (strcmp((const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    Type = "usd/stage.cpp";
    v65 = "_SetValueImpl";
    v66 = 6760;
    v67 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    v68 = 0;
    sub_20C348EEC((uint64_t)a2, &v61);
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v61);
    v15 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v63);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v59);
    v16 = v60;
    v17 = (void **)v59[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v18 = v59;
    if (v16 < 0)
      v18 = v17;
    if (v58 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Type mismatch for <%s>: expected '%s', got '%s'", v14, (const char *)v18, (const char *)v19);
    if (v58 < 0)
      operator delete(__p[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
    v20 = (void **)&v61;
    goto LABEL_45;
  }
  if (sub_20C286E00(16))
  {
    Type = (void *)0x7FF8000000000000;
    v27 = sub_20C4588B4(&v77, (pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&Type);
    if (v27
      && pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability((pxrInternal__aapl__pxrReserved__::UsdStage *)v27, a2) == 1&& sub_20C286E00(16))
    {
      p_Type = &Type;
      pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&Type, a2, v28);
      if (v66 < 0)
        p_Type = Type;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Warning: authoring time sample value on uniform attribute <%s> at time %.3f\n", v30, v31, p_Type, *(_QWORD *)&v77);
      if (SHIBYTE(v66) < 0)
        operator delete(Type);
    }
  }
  v32 = 0;
LABEL_46:
  if ((v73 & 7) != 0)
  {
    v34 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
  sub_20BFD265C(&v72);
  if (v71)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v71);
  if ((v76 & 7) != 0)
  {
    v36 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  if (v32)
    return 0;
LABEL_56:
  sub_20C432A64(a1, (uint64_t)a2, v74);
  IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v74);
  if (IsDormant)
  {
    Inverse = COERCE_DOUBLE("usd/stage.cpp");
    v70 = "_SetValueImpl";
    v71 = 6785;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    LOBYTE(v73) = 0;
    sub_20C348EEC((uint64_t)a2, (int *)v59);
    v40 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v59, &Type);
    v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&Type);
    v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v40);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v42);
    if (*(char *)(Identifier + 23) >= 0)
      v44 = (const char *)Identifier;
    else
      v44 = *(const char **)Identifier;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Inverse, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot set attribute value.  Failed to create attribute spec <%s> in layer @%s@", v41, v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&Type + 1);
    sub_20BFD265C(&Type);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
    sub_20BFD265C(v59);
  }
  else
  {
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104));
    v70 = v46;
    v47 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v77);
    v48 = (uint64_t **)sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v74);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v48, (uint64_t *)&Type);
    v49 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&Type);
    v50 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v74);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v50, v59);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v49, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v59, a3, v47);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
    sub_20BFD265C(v59);
    v51 = v65;
    if (v65)
    {
      v45 = (unsigned int *)(v65 + 8);
      do
      {
        v52 = __ldxr(v45);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v45));
      if (!v53)
        (*(void (**)(const char *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v38 = IsDormant ^ 1u;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v45, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v74);
  return v38;
}

void sub_20C3D74F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;

  sub_20C444704((uint64_t)&a34);
  v37 = *(_QWORD *)(v35 - 96);
  if ((v37 & 7) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DCA8;
  v5[0] = &unk_24C539E98;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIbEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3D7720(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C476374(a1, a3, (uint64_t)v6);
}

void sub_20C3D87A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C476314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3D8A64(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C478E38(a1, a3, (uint64_t)v6);
}

void sub_20C3D9AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C478DD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3D9DB4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIhEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3D9DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C47B89C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3D9E4C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIhEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3D9E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C47B904(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned char>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB790];
  v5[0] = &unk_24C539F40;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIhEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DCD8;
  v5[0] = &unk_24C539F78;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIhEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3D9F50(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C47BB0C(a1, a3, (uint64_t)v6);
}

void sub_20C3DAFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C47BAAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3DB294(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C47E3F0(a1, a3, (uint64_t)v6);
}

void sub_20C3DC314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C47E390((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3DC5E4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIiEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3DC5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C480E54(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3DC67C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIiEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3DC67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C480EBC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<int>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB798];
  v5[0] = &unk_24C53A020;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIiEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DD20;
  v5[0] = &unk_24C53A058;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIiEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3DC780(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4810C4(a1, a3, (uint64_t)v6);
}

void sub_20C3DD800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C481064((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3DDAC4(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C483B88(a1, a3, (uint64_t)v6);
}

void sub_20C3DEB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C483B28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3DEE14(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIjEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3DEE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4865EC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3DEEAC(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIjEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3DEEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C486654(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned int>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB7A0];
  v5[0] = &unk_24C53A100;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIjEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DD38;
  v5[0] = &unk_24C53A138;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIjEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3DEFB0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C48685C(a1, a3, (uint64_t)v6);
}

void sub_20C3E0030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4867FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3E02F4(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C489320(a1, a3, (uint64_t)v6);
}

void sub_20C3E1374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4892C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E1644(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIxEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E1644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C48BD84(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E16DC(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIxEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E16DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C48BDEC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB7D0];
  v5[0] = &unk_24C53A1E0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIxEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DD50;
  v5[0] = &unk_24C53A218;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIxEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3E17E0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C48BFF0(a1, a3, (uint64_t)v6);
}

void sub_20C3E2860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C48BF90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3E2B24(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C48EAB4(a1, a3, (uint64_t)v6);
}

void sub_20C3E3BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C48EA54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E3E74(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIyEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E3E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C491518(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E3F0C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIyEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E3F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C491580(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB7D8];
  v5[0] = &unk_24C53A2C0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIyEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DD68;
  v5[0] = &unk_24C53A2F8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIyEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3E4010(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C491784(a1, a3, (uint64_t)v6);
}

void sub_20C3E5090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C491724((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3E5354(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C494078(a1, a3, (uint64_t)v6);
}

void sub_20C3E63D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C494018((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E66A4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_8pxr_half4halfEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E66A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C49690C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E673C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_8pxr_half4halfEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E673C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C496984(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51BF30;
  v5[0] = &unk_24C53A3A0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_8pxr_half4halfEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DDB0;
  v5[0] = &unk_24C53A3D8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_8pxr_half4halfEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS8_(a1, a2, a3, a4);
}

uint64_t sub_20C3E6840(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C496BAC(a1, a3, (uint64_t)v6);
}

void sub_20C3E78C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C496B4C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3E7B84(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4994A0(a1, a3, (uint64_t)v6);
}

void sub_20C3E8C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C499440((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E8ED4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIfEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E8ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C49BD34(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3E8F6C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIfEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3E8F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C49BDAC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<float>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB788];
  v5[0] = &unk_24C53A480;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIfEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DD98;
  v5[0] = &unk_24C53A4B8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIfEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3E9070(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C49BFCC(a1, a3, (uint64_t)v6);
}

void sub_20C3EA0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C49BF6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3EA3B4(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C49E8C0(a1, a3, (uint64_t)v6);
}

void sub_20C3EB434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C49E860((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3EB704(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoIdEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EB704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4A1154(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3EB79C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayIdEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EB79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4A11CC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<double>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = MEMORY[0x24BEDB780];
  v5[0] = &unk_24C537708;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueIdEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS4_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DD80;
  v5[0] = &unk_24C53A560;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayIdEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS6_(a1, a2, a3, a4);
}

uint64_t sub_20C3EB8A0(uint64_t a1, _DWORD *a2, double *a3, double a4)
{
  uint64_t v7;
  _QWORD v9[4];
  double v10;

  v10 = a4;
  v9[0] = a1;
  v9[1] = &v10;
  v9[2] = a2;
  v7 = sub_20C4A12C4(a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))a3, (uint64_t)v9);
  if ((_DWORD)v7)
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, a3, 1, v10);
  return v7;
}

void sub_20C3EBA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C424418((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3EBA44(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  _QWORD v12[4];
  double v13;

  v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = a2;
  v9 = sub_20C4A1408(a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))a3, (uint64_t)v12);
  if ((_DWORD)v9)
  {
    v10 = v13;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, *(double **)(a3 + 32), *(_QWORD *)a3, v10);
  }
  return v9;
}

void sub_20C3EBBB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C4257CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4, double a5)
{
  return sub_20C3EBC08(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_11SdfTimeCodeEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EBC08(uint64_t a1, _DWORD *a2, uint64_t a3, double *a4, double a5)
{
  uint64_t v8;
  _QWORD v10[4];
  double v11;

  v11 = a5;
  v10[0] = a1;
  v10[1] = a3;
  v10[2] = &v11;
  v10[3] = a2;
  if (!sub_20C4A154C(a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v10))return 0;
  v8 = 1;
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, a4, 1, v11);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, double a5)
{
  return sub_20C3EBCE8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_11SdfTimeCodeEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EBCE8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  double v11;
  _QWORD v12[4];
  double v13;

  v13 = a5;
  v12[0] = a1;
  v12[1] = a3;
  v12[2] = &v13;
  v12[3] = a2;
  result = (uint64_t)sub_20C4A15C4(a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v12);
  if ((_DWORD)result)
  {
    v11 = v13;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, *(double **)(a4 + 32), *(_QWORD *)a4, v11);
    return 1;
  }
  return result;
}

uint64_t sub_20C3EBDC4(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, double *a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v8;
  double *v9;
  double Inverse;
  double *v12;
  std::type_info *v13;
  double v14;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    v14 = *a3;
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v8);
    v12 = v9;
    a3 = &v14;
    v14 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, &v14);
  }
  v13 = &stru_24C525368;
  Inverse = COERCE_DOUBLE(&unk_24C53A608);
  v12 = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)&Inverse, a4);
}

uint64_t sub_20C3EBE70(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, __int128 *a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v8;
  uint64_t v9;
  __int128 v10;
  double *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  char *v16;
  double *v17;
  uint64_t v18;
  char *v19;
  double *v20;
  double Inverse;
  __int128 *v23;
  std::type_info *v24;
  __int128 v25;
  __int128 v26;
  double *v27;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    *(_QWORD *)&v26 = &stru_24C525430;
    *(_QWORD *)&v25 = &unk_24C53A640;
    *((_QWORD *)&v25 + 1) = a3;
    return sub_20C3D6D74(a1, a2, (uint64_t)&v25, a4);
  }
  else
  {
    v10 = a3[1];
    v25 = *a3;
    v26 = v10;
    v11 = (double *)*((_QWORD *)a3 + 4);
    v27 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 - 2);
      if (*((_QWORD *)&v26 + 1))
        v12 = (unint64_t *)*((_QWORD *)&v26 + 1);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v8);
    v23 = v14;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v25, v15, v16);
    v17 = v27;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v25, v18, v19);
    v20 = &v27[v25];
    while (v17 != v20)
    {
      *v17 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v17);
      ++v17;
    }
    v24 = &stru_24C525430;
    Inverse = COERCE_DOUBLE(&unk_24C53A640);
    v23 = &v25;
    v9 = sub_20C3D6D74(a1, a2, (uint64_t)&Inverse, a4);
    sub_20BF5618C((uint64_t)&v25);
  }
  return v9;
}

void sub_20C3EBFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3EBFE0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4A17A0(a1, a3, (uint64_t)v6);
}

void sub_20C3ED060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4A1740((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3ED324(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4A4210(a1, a3, (uint64_t)v6);
}

void sub_20C3EE3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4A41B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3EE674(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EE674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4A6C74(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3EE70C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EE70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4A6CDC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<std::string>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C516910;
  v5[0] = &unk_24C537698;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEENS2_9enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKSA_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DDC8;
  v5[0] = &unk_24C53A6E8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEENS3_9enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKSC_(a1, a2, a3, a4);
}

uint64_t sub_20C3EE810(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  _QWORD v5[4];
  double v6;

  v6 = a4;
  v5[0] = a1;
  v5[1] = &v6;
  v5[2] = a2;
  return sub_20C4A6DC4(a1, a3, (uint64_t)v5);
}

void sub_20C3EE940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C444704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3EE984(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4A70E4(a1, a3, (uint64_t)v6);
}

void sub_20C3EFA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4A7084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3EFCD4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7TfTokenEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EFCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4A9B48(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3EFD6C(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7TfTokenEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3EFD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4A9BB0(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51BCE0;
  v5[0] = &unk_24C5374F0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7TfTokenEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DDE0;
  v5[0] = &unk_24C53A790;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7TfTokenEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3EFE70(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  uint64_t v7;
  _QWORD v9[4];
  double v10;

  v10 = a4;
  v9[0] = a1;
  v9[1] = &v10;
  v9[2] = a2;
  v7 = sub_20C4A9C98((uint64_t)a1, a3, (uint64_t)v9);
  if ((_DWORD)v7)
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)a3, 1, 0, v10);
  return v7;
}

void sub_20C3EFFD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C421E08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F0018(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, double a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  _QWORD v12[4];
  double v13;

  v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = a2;
  v9 = sub_20C4A9FAC((uint64_t)a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))a3, (uint64_t)v12);
  if ((_DWORD)v9)
  {
    v10 = v13;
    sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, *(_QWORD *)(a3 + 32), *(_QWORD *)a3, 0, v10);
  }
  return v9;
}

void sub_20C3F0190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C42311C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdStage *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F01E0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_12SdfAssetPathEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F01E0(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t v8;
  _QWORD v10[4];
  double v11;

  v11 = a5;
  v10[0] = a1;
  v10[1] = a3;
  v10[2] = &v11;
  v10[3] = a2;
  if (!sub_20C4AA2C0((uint64_t)a1, a4, (uint64_t)v10))
    return 0;
  v8 = 1;
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)a4, 1, 0, v11);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__::UsdStage *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a3, uint64_t a4, double a5)
{
  return sub_20C3F02C4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_12SdfAssetPathEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F02C4(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  double v11;
  _QWORD v12[4];
  double v13;

  v13 = a5;
  v12[0] = a1;
  v12[1] = a3;
  v12[2] = &v13;
  v12[3] = a2;
  result = (uint64_t)sub_20C4AA328((uint64_t)a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v12);
  if ((_DWORD)result)
  {
    v11 = v13;
    sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, *(_QWORD *)(a4 + 32), *(_QWORD *)a4, 0, v11);
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C524DB0;
  v5[0] = &unk_24C537628;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_12SdfAssetPathEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C524DC0;
  v5[0] = &unk_24C5375F0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_12SdfAssetPathEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3F041C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4AA3F0(a1, a3, (uint64_t)v6);
}

void sub_20C3F149C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4AA390((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F1760(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4ACEB4(a1, a3, (uint64_t)v6);
}

void sub_20C3F27E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4ACE54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F2AB0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_14SdfOpaqueValueEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F2AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4AF918(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F2B48(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_14SdfOpaqueValueEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F2B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4AF980(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C524D80;
  v5[0] = &unk_24C53A8A8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_14SdfOpaqueValueEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C5257E0;
  v5[0] = &unk_24C53A8E0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_14SdfOpaqueValueEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3F2C4C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  uint64_t v7;
  _QWORD v9[4];
  double v10;

  v10 = a4;
  v9[0] = a1;
  v9[1] = &v10;
  v9[2] = a2;
  v7 = sub_20C4AFB08(a1, a3, (uint64_t)v9);
  if ((_DWORD)v7)
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, (uint64_t)a3, 1, v10);
  return v7;
}

void sub_20C3F2DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C426C38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F2DF0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  _QWORD v12[4];
  double v13;

  v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = a2;
  v9 = sub_20C4AFE1C(a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))a3, (uint64_t)v12);
  if ((_DWORD)v9)
  {
    v10 = v13;
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, *(_QWORD *)(a3 + 32), *(_QWORD *)a3, v10);
  }
  return v9;
}

void sub_20C3F2F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C4281E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F2FB4(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_17SdfPathExpressionEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F2FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t v8;
  _QWORD v10[4];
  double v11;

  v11 = a5;
  v10[0] = a1;
  v10[1] = a3;
  v10[2] = &v11;
  v10[3] = a2;
  if (!sub_20C4B0130(a1, a4, (uint64_t)v10))
    return 0;
  v8 = 1;
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, (uint64_t)a4, 1, v11);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return sub_20C3F3094(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_17SdfPathExpressionEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F3094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t result;
  uint64_t v9;
  char *v10;
  double v11;
  _QWORD v12[4];
  double v13;

  v13 = a5;
  v12[0] = a1;
  v12[1] = a3;
  v12[2] = &v13;
  v12[3] = a2;
  result = (uint64_t)sub_20C4B0198(a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v12);
  if ((_DWORD)result)
  {
    v11 = v13;
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, *(_QWORD *)(a4 + 32), *(_QWORD *)a4, v11);
    return 1;
  }
  return result;
}

uint64_t sub_20C3F3170(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  std::type_info *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  char v25;
  void *v26[3];
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  void **v31;

  sub_20C35C4F8((uint64_t)&v12, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C348EEC((uint64_t)&v12, &v17);
  sub_20C193954(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, (uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(a1 + 64, &v19, 0, 0, (uint64_t)v26);
  if (v25 < 0)
    operator delete(__p);
  v31 = (void **)&v23;
  sub_20C00E25C(&v31);
  v31 = (void **)&v22;
  sub_20C00D5A8(&v31);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  v21 = &stru_24C524DD8;
  v19 = &unk_24C53A988;
  v20 = v26;
  v10 = sub_20C3D6D74(a1, (pxrInternal__aapl__pxrReserved__ *)a2, (uint64_t)&v19, a4);
  if (v30 < 0)
    operator delete(v29);
  v19 = &v28;
  sub_20C00E25C((void ***)&v19);
  v19 = &v27;
  sub_20C00D5A8((void ***)&v19);
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  return v10;
}

void sub_20C3F330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  a14 = &a35;
  sub_20C00E25C((void ***)&a14);
  a14 = &a32;
  sub_20C00D5A8((void ***)&a14);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F3420(uint64_t a1, uint64_t a2, __int128 *a3, double a4)
{
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t i;
  void *v18;
  void **v19;
  __int128 v20;
  uint64_t v21;
  void *v24[3];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  void *__p[2];
  std::type_info *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void **v42[2];

  v6 = a3[1];
  v39 = *a3;
  v40 = v6;
  v7 = *((_QWORD *)a3 + 4);
  v41 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v40 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v40 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C35C4F8((uint64_t)__p, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C348EEC((uint64_t)__p, &v37);
  if ((v31 & 7) != 0)
  {
    v10 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_20BFD265C(&v30);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39, v12, v13);
  v14 = v41;
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39, v15, v16);
  for (i = v41 + 96 * v39; v14 != i; v14 += 96)
  {
    sub_20C193954(v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (uint64_t)v24);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(a1 + 64, v24, 0, 0, (uint64_t)__p);
    v18 = *(void **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)(v14 + 8) = v18;
      operator delete(v18);
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
    }
    *(_OWORD *)v14 = *(_OWORD *)__p;
    *(_QWORD *)(v14 + 16) = v30;
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    sub_20C00BC18((void **)(v14 + 24));
    *(_OWORD *)(v14 + 24) = v31;
    *(_QWORD *)(v14 + 40) = v32;
    v31 = 0uLL;
    v32 = 0;
    sub_20C00BCC0((void **)(v14 + 48));
    *(_OWORD *)(v14 + 48) = v33;
    *(_QWORD *)(v14 + 64) = v34;
    v33 = 0uLL;
    v34 = 0;
    v19 = (void **)(v14 + 72);
    if (*(char *)(v14 + 95) < 0)
      operator delete(*v19);
    v20 = v35;
    *(_QWORD *)(v14 + 88) = v36;
    *(_OWORD *)v19 = v20;
    HIBYTE(v36) = 0;
    LOBYTE(v35) = 0;
    v42[0] = (void **)&v33;
    sub_20C00E25C(v42);
    v42[0] = (void **)&v31;
    sub_20C00D5A8(v42);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v28 < 0)
      operator delete(v27);
    v42[0] = (void **)&v26;
    sub_20C00E25C(v42);
    v42[0] = (void **)&v25;
    sub_20C00D5A8(v42);
    if (v24[0])
    {
      v24[1] = v24[0];
      operator delete(v24[0]);
    }
  }
  v30 = &stru_24C524DE8;
  __p[0] = &unk_24C53A9C0;
  __p[1] = &v39;
  v21 = sub_20C3D6D74(a1, (pxrInternal__aapl__pxrReserved__ *)a2, (uint64_t)__p, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_20BFD265C(&v37);
  sub_20C00E910(&v39);
  return v21;
}

void sub_20C3F36E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 - 164));
  sub_20BFD265C((_DWORD *)(v29 - 168));
  sub_20C00E910((_QWORD *)(v29 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F37BC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4B0394(a1, a3, (uint64_t)v6);
}

void sub_20C3F483C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4B0334((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F4B00(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4B2C88(a1, a3, (uint64_t)v6);
}

void sub_20C3F5B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4B2C28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F5E50(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_10GfMatrix2dEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F5E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4B551C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F5EE8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_10GfMatrix2dEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F5EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4B5594(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51BF90;
  v5[0] = &unk_24C53AA68;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_10GfMatrix2dEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DB28;
  v5[0] = &unk_24C53AAA0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_10GfMatrix2dEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3F5FEC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4B576C(a1, a3, (uint64_t)v6);
}

void sub_20C3F706C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4B570C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F7330(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4B8060(a1, a3, (uint64_t)v6);
}

void sub_20C3F83B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4B8000((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F8680(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_10GfMatrix3dEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F8680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4BA8F4(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3F8718(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_10GfMatrix3dEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3F8718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4BA96C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51BFC0;
  v5[0] = &unk_24C53AB48;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_10GfMatrix3dEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DB10;
  v5[0] = &unk_24C53AB80;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_10GfMatrix3dEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3F881C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4BAB44(a1, a3, (uint64_t)v6);
}

void sub_20C3F989C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4BAAE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3F9B60(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4BD438(a1, a3, (uint64_t)v6);
}

void sub_20C3FABE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4BD3D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3FAEB0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_10GfMatrix4dEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3FAEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4BFCCC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3FAF48(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_10GfMatrix4dEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3FAF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4BFD44(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51BFE0;
  v5[0] = &unk_24C53AC28;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_10GfMatrix4dEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DAF8;
  v5[0] = &unk_24C53AC60;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_10GfMatrix4dEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3FB04C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4BFF1C(a1, a3, (uint64_t)v6);
}

void sub_20C3FC0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4BFEBC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3FC390(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4C2810(a1, a3, (uint64_t)v6);
}

void sub_20C3FD410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4C27B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3FD6E0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfQuathEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3FD6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4C50A4(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3FD778(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfQuathEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3FD778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4C511C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C030;
  v5[0] = &unk_24C53AD08;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfQuathEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DC00;
  v5[0] = &unk_24C53AD40;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfQuathEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C3FD87C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4C531C(a1, a3, (uint64_t)v6);
}

void sub_20C3FE8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4C52BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3FEBC0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4C7C10(a1, a3, (uint64_t)v6);
}

void sub_20C3FFC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4C7BB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3FFF10(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfQuatfEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3FFF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4CA4A4(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C3FFFA8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfQuatfEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C3FFFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4CA51C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C020;
  v5[0] = &unk_24C53ADE8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfQuatfEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DC18;
  v5[0] = &unk_24C53AE20;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfQuatfEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C4000AC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4CA730(a1, a3, (uint64_t)v6);
}

void sub_20C40112C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4CA6D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C4013F0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4CD024(a1, a3, (uint64_t)v6);
}

void sub_20C402470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4CCFC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C402740(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfQuatdEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C402740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4CF8B8(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C4027D8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfQuatdEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C4027D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4CF930(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C010;
  v5[0] = &unk_24C53AEC8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfQuatdEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DC30;
  v5[0] = &unk_24C53AF00;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfQuatdEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C4028DC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4CFB44(a1, a3, (uint64_t)v6);
}

void sub_20C40395C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4CFAE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C403C20(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4D2608(a1, a3, (uint64_t)v6);
}

void sub_20C404CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4D25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C404F70(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec2iEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C404F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4D506C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C405008(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec2iEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C405008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4D50D4(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C140;
  v5[0] = &unk_24C53AFA8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec2iEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51D9C0;
  v5[0] = &unk_24C53AFE0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec2iEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C40510C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4D52F0(a1, a3, (uint64_t)v6);
}

void sub_20C40618C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4D5290((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C406450(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4D7BE4(a1, a3, (uint64_t)v6);
}

void sub_20C4074D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4D7B84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C4077A0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec2hEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C4077A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4DA478(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C407838(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec2hEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C407838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4DA4F0(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C130;
  v5[0] = &unk_24C53B088;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec2hEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA08;
  v5[0] = &unk_24C53B0C0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec2hEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C40793C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4DA738(a1, a3, (uint64_t)v6);
}

void sub_20C4089BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4DA6D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C408C80(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4DD02C(a1, a3, (uint64_t)v6);
}

void sub_20C409D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4DCFCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C409FD0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec2fEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C409FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4DF8C0(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C40A068(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec2fEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C40A068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4DF938(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C120;
  v5[0] = &unk_24C53B168;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec2fEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA50;
  v5[0] = &unk_24C53B1A0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec2fEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C40A16C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4DFB70(a1, a3, (uint64_t)v6);
}

void sub_20C40B1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4DFB10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C40B4B0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4E2464(a1, a3, (uint64_t)v6);
}

void sub_20C40C530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4E2404((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C40C800(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec2dEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C40C800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4E4CF8(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C40C898(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec2dEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C40C898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4E4D70(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C110;
  v5[0] = &unk_24C53B248;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec2dEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA98;
  v5[0] = &unk_24C5376D0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec2dEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C40C99C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4E4EE4(a1, a3, (uint64_t)v6);
}

void sub_20C40DA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4E4E84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C40DCE0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4E79A8(a1, a3, (uint64_t)v6);
}

void sub_20C40ED60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4E7948((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C40F030(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec3iEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C40F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4EA40C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C40F0C8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec3iEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C40F0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4EA474(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C180;
  v5[0] = &unk_24C53B2F0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec3iEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51D9A8;
  v5[0] = &unk_24C53B328;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec3iEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C40F1CC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4EA668(a1, a3, (uint64_t)v6);
}

void sub_20C41024C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4EA608((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C410510(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4ECF5C(a1, a3, (uint64_t)v6);
}

void sub_20C411590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4ECEFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C411860(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec3hEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C411860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4EF7F0(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C4118F8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec3hEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C4118F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4EF868(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C170;
  v5[0] = &unk_24C53B3D0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec3hEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51D9F0;
  v5[0] = &unk_24C53B408;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec3hEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C4119FC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4EFA90(a1, a3, (uint64_t)v6);
}

void sub_20C412A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4EFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C412D40(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4F2384(a1, a3, (uint64_t)v6);
}

void sub_20C413DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4F2324((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C414090(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec3fEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C414090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4F4C18(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C414128(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec3fEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C414128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4F4C90(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C160;
  v5[0] = &unk_24C53B4B0;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec3fEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA38;
  v5[0] = &unk_24C53B4E8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec3fEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C41422C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4F4E94(a1, a3, (uint64_t)v6);
}

void sub_20C4152AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4F4E34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C415570(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4F7788(a1, a3, (uint64_t)v6);
}

void sub_20C4165F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4F7728((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C4168C0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec3dEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C4168C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4FA01C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C416958(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec3dEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C416958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4FA094(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C150;
  v5[0] = &unk_24C53B590;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec3dEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA80;
  v5[0] = &unk_24C53B5C8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec3dEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C416A5C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4FA298(a1, a3, (uint64_t)v6);
}

void sub_20C417ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4FA238((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C417DA0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4FCD5C(a1, a3, (uint64_t)v6);
}

void sub_20C418E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4FCCFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C4190F0(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec4iEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C4190F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4FF7C0(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C419188(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec4iEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C419188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C4FF828(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &unk_24C51C1C0;
  v5[0] = &unk_24C53B670;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec4iEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51D990;
  v5[0] = &unk_24C53B6A8;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec4iEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C41928C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C4FFA2C(a1, a3, (uint64_t)v6);
}

void sub_20C41A30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C4FF9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C41A5D0(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C502320(a1, a3, (uint64_t)v6);
}

void sub_20C41B650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C5022C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C41B920(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec4hEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C41B920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C504BB4(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C41B9B8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec4hEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C41B9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C504C2C(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C1B0;
  v5[0] = &unk_24C53B750;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec4hEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51D9D8;
  v5[0] = &unk_24C53B788;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec4hEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C41BABC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C504E40(a1, a3, (uint64_t)v6);
}

void sub_20C41CB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C504DE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C41CE00(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C507734(a1, a3, (uint64_t)v6);
}

void sub_20C41DE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C5076D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C41E150(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec4fEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C41E150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C509FC8(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C41E1E8(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec4fEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C41E1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C50A040(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C1A0;
  v5[0] = &unk_24C53B830;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec4fEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA20;
  v5[0] = &unk_24C53B868;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec4fEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t sub_20C41E2EC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C50A254(a1, a3, (uint64_t)v6);
}

void sub_20C41F36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C50A1F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C41F630(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double a4)
{
  double v5;
  _QWORD v6[4];

  v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_20C50CB48(a1, a3, (uint64_t)v6);
}

void sub_20C4206B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0)
  {
    v7 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_20C50CAE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C420980(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7GfVec4dEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C420980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C50F3DC(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_20C420A18(a1, a3, a2, a4, a5);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage24_GetValueFromResolveInfoINS_7VtArrayINS_7GfVec4dEEEEEbRKNS_14UsdResolveInfoENS_11UsdTimeCodeERKNS_12UsdAttributeEPT_(a1, a2, a3, a4, a5);
}

uint64_t sub_20C420A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  uint64_t result;
  _QWORD v6[4];
  double v7;

  v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  v6[3] = a2;
  result = (uint64_t)sub_20C50F454(a1, a4, (uint64_t)v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51C190;
  v5[0] = &unk_24C53B910;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7GfVec4dEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C51DA68;
  v5[0] = &unk_24C53B948;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_7VtArrayINS_7GfVec4dEEEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS7_(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  _QWORD v5[3];

  v5[2] = &stru_24C527B78;
  v5[0] = &unk_24C52E498;
  v5[1] = a3;
  return sub_20C3D6D74(a1, a2, (uint64_t)v5, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage9_SetValueINS_13SdfValueBlockEEENSt3__19enable_ifIXntsr21_IsEditTargetMappableIT_EE5valueEbE4typeENS_11UsdTimeCodeERKNS_12UsdAttributeERKS5_(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BOOL8 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (***v15[2])(_QWORD, uint64_t);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  v20[2] = &stru_24C524DB0;
  v21 = 0;
  v20[0] = &unk_24C52D9A8;
  v20[1] = a6;
  sub_20C4535E0((uint64_t)v15, (uint64_t)v20, a2);
  v11 = sub_20C420C44(a1, a2, a3, a4, a5, v15);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage32_GetTypeSpecificResolvedMetadataINS_12SdfAssetPathEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_bPT_(a1, a2, a3, a4, a5, a6);
}

void sub_20C420C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C421E08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C420C44(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v34;
  int v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v49;
  pxrInternal__aapl__pxrReserved__ *v50;
  unint64_t *v51;
  unint64_t v52;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v58;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  uint64_t *v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v81;
  _QWORD *Layers;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v88;
  unsigned int *v89;
  unsigned int v90;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v91;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v92;
  uint64_t *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  pxrInternal__aapl__pxrReserved__::SdfPath *v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v121;
  unsigned int *v122;
  unsigned int v123;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v125;
  pxrInternal__aapl__pxrReserved__::SdfPath *v126;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v127;
  int HasField;
  uint64_t v129;
  BOOL v130;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v132;
  uint64_t v133;
  uint64_t *v134;
  pxrInternal__aapl__pxrReserved__::SdfPath *v135;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  _BYTE *v142;
  int v143;
  int v144;
  unsigned int *v145;
  unsigned int v146;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v147;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v153;
  int v154;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v155;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  _QWORD *v165;
  pxrInternal__aapl__pxrReserved__::SdfPath *v166;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v167;
  int v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _BOOL8 v173;
  unint64_t v175;
  uint64_t v176;
  pxrInternal__aapl__pxrReserved__ *v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  __int128 v184;
  int v185;
  int v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v175);
  v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v188);
        v37 = *((_QWORD *)&v188 + 1);
        if (!*((_QWORD *)&v188 + 1) || (*(_BYTE *)(*((_QWORD *)&v188 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v188 + 1), v36);
        v38 = *(unint64_t **)(v37 + 24);
        PrimDefinition = atomic_load(v38 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        v40 = sub_20C398E78(&v188);
        *(_QWORD *)&v194 = 0;
        v41 = sub_20C45A220(PrimDefinition, v40, a3, &v194, *a6);
        *((_BYTE *)a6 + 40) = v41;
        if ((v194 & 7) != 0)
        {
          v42 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
          v41 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v41)
        {
          *(_QWORD *)&v194 = 0;
          sub_20C50F608((uint64_t)&v188, a3, (uint64_t *)&v194, a5, (uint64_t)a6);
          if ((v194 & 7) != 0)
          {
            v44 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
        }
        if ((BYTE8(v189) & 7) != 0)
        {
          v46 = (unsigned int *)(*((_QWORD *)&v189 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v189 + 1);
        sub_20BFD265C(&v189);
        v48 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v188 + 1);
        if (!*((_QWORD *)&v188 + 1))
        {
LABEL_180:
          if (*((_BYTE *)a6 + 40))
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_211;
            goto LABEL_210;
          }
LABEL_213:
          v173 = 0;
          goto LABEL_215;
        }
LABEL_179:
        sub_20C35C614(v48);
        goto LABEL_180;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v176);
        v50 = v177;
        if (!v177 || (*((_BYTE *)v177 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v177, v49);
        v51 = (unint64_t *)*((_QWORD *)v50 + 3);
        v52 = atomic_load(v51 + 7);
        if (!v52)
          v52 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v51);
        v53 = sub_20C398E78(&v176);
        v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v54)
          v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v188 = 0;
        v55 = sub_20C45A220(v52, v53, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v54 + 464), &v188, *a6);
        *((_BYTE *)a6 + 40) = v55;
        if ((v188 & 7) != 0)
        {
          v56 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
          v55 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v55)
        {
          v58 = sub_20C398E78(&v176);
          sub_20C35C4F8((uint64_t)&v184, (uint64_t *)&v177, &v178);
          v60 = (uint64_t *)sub_20C368FF0((uint64_t)&v184, v59);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v60, 6u, (uint64_t *)&v194);
          v192 = v194;
          v193 = v195;
          v188 = v195;
          v189 = v195;
          v190 = v194;
          v191 = v194;
          if ((v187 & 7) != 0)
          {
            v61 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v186);
          sub_20BFD265C(&v185);
          if (*((_QWORD *)&v184 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v184 + 1));
          if (v189 != v191)
          {
            while (1)
            {
              v65 = sub_20C444D70(&v188, v63, v64);
              v66 = v65[3] - 1;
              *(_QWORD *)&v194 = v65[2];
              *((_QWORD *)&v194 + 1) = v66;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194) & 1) == 0)
              {
                v69 = sub_20C444D70(&v188, v67, v68);
                v70 = v69[3] - 1;
                *(_QWORD *)&v184 = v69[2];
                *((_QWORD *)&v184 + 1) = v70;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184) & 1) != 0)
                  break;
              }
LABEL_90:
              sub_20C444E44(&v188);
              if (v189 == v191)
                goto LABEL_175;
            }
            v73 = sub_20C444D70(&v188, v71, v72);
            v74 = v73[3] - 1;
            *(_QWORD *)&v194 = v73[2];
            *((_QWORD *)&v194 + 1) = v74;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v58, &v182);
            v78 = sub_20C444D70(&v188, v76, v77);
            v79 = v78[3] - 1;
            *(_QWORD *)&v184 = v78[2];
            *((_QWORD *)&v184 + 1) = v79;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184);
            v81 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v81);
            *(_QWORD *)&v194 = Layers[1];
            *((_QWORD *)&v194 + 1) = v194;
            *(_QWORD *)&v195 = *Layers;
            *((_QWORD *)&v195 + 1) = v195;
            while (1)
            {
              if (*((_QWORD *)&v194 + 1) == *((_QWORD *)&v195 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
                sub_20BFD265C(&v182);
                goto LABEL_90;
              }
              *(_QWORD *)&v184 = sub_20C45A2E0(&v188, v83, v84);
              *((_QWORD *)&v184 + 1) = v85;
              v87 = (uint64_t *)sub_20C22F36C((uint64_t)&v194, v85, v86);
              v88 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v88)
                v88 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v181 = 0;
              sub_20C510F28((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184, v87, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v182, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v88 + 464), &v181);
              if ((v181 & 7) != 0)
              {
                v89 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
                do
                  v90 = __ldxr(v89);
                while (__stlxr(v90 - 2, v89));
              }
              if (*((_BYTE *)a6 + 40))
                break;
              sub_20C22F508((uint64_t)&v194);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
            sub_20BFD265C(&v182);
          }
        }
LABEL_175:
        if ((v180 & 7) != 0)
        {
          v161 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
          do
            v162 = __ldxr(v161);
          while (__stlxr(v162 - 2, v161));
        }
LABEL_178:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v179);
        sub_20BFD265C(&v178);
        v48 = v177;
        if (!v177)
          goto LABEL_180;
        goto LABEL_179;
      }
    }
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v176);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v176, (uint64_t)&v188);
      v18 = *((_QWORD *)&v188 + 1);
      if ((v188 & 7) != 0)
      {
        v19 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v18)
      {
        LOBYTE(v188) = 0;
        sub_20C45A3D8((uint64_t)*a6, &v188);
        *((_BYTE *)a6 + 40) = 1;
      }
      else
      {
        v91 = sub_20C398E78(&v176);
        sub_20C35C4F8((uint64_t)&v184, (uint64_t *)&v177, &v178);
        v93 = (uint64_t *)sub_20C368FF0((uint64_t)&v184, v92);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v93, 6u, (uint64_t *)&v194);
        v192 = v194;
        v193 = v195;
        v188 = v195;
        v189 = v195;
        v190 = v194;
        v191 = v194;
        if ((v187 & 7) != 0)
        {
          v94 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
          do
            v95 = __ldxr(v94);
          while (__stlxr(v95 - 2, v94));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v186);
        sub_20BFD265C(&v185);
        if (*((_QWORD *)&v184 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v184 + 1));
        if (v189 != v191)
        {
          while (1)
          {
            v98 = sub_20C444D70(&v188, v96, v97);
            v99 = v98[3] - 1;
            *(_QWORD *)&v194 = v98[2];
            *((_QWORD *)&v194 + 1) = v99;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194) & 1) == 0)
            {
              v102 = sub_20C444D70(&v188, v100, v101);
              v103 = v102[3] - 1;
              *(_QWORD *)&v184 = v102[2];
              *((_QWORD *)&v184 + 1) = v103;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184) & 1) != 0)
                break;
            }
LABEL_110:
            sub_20C444E44(&v188);
            if (v189 == v191)
              goto LABEL_146;
          }
          v106 = sub_20C444D70(&v188, v104, v105);
          v107 = v106[3] - 1;
          *(_QWORD *)&v194 = v106[2];
          *((_QWORD *)&v194 + 1) = v107;
          v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v108, v91, &v182);
          v111 = sub_20C444D70(&v188, v109, v110);
          v112 = v111[3] - 1;
          *(_QWORD *)&v184 = v111[2];
          *((_QWORD *)&v184 + 1) = v112;
          v113 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184);
          v114 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v113);
          v115 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v114);
          *(_QWORD *)&v194 = v115[1];
          *((_QWORD *)&v194 + 1) = v194;
          *(_QWORD *)&v195 = *v115;
          *((_QWORD *)&v195 + 1) = v195;
          while (1)
          {
            if (*((_QWORD *)&v194 + 1) == *((_QWORD *)&v195 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
              sub_20BFD265C(&v182);
              goto LABEL_110;
            }
            *(_QWORD *)&v184 = sub_20C45A2E0(&v188, v116, v117);
            *((_QWORD *)&v184 + 1) = v118;
            v120 = (uint64_t *)sub_20C22F36C((uint64_t)&v194, v118, v119);
            v121 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v121)
              v121 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v181 = 0;
            sub_20C510F28((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184, v120, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v182, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v121 + 64), &v181);
            if ((v181 & 7) != 0)
            {
              v122 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
              do
                v123 = __ldxr(v122);
              while (__stlxr(v123 - 2, v122));
            }
            if (*((_BYTE *)a6 + 40))
              break;
            sub_20C22F508((uint64_t)&v194);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
          sub_20BFD265C(&v182);
        }
      }
LABEL_146:
      if ((v180 & 7) != 0)
      {
        v145 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      goto LABEL_178;
    }
    goto LABEL_34;
  }
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 56), (v22 & 0x800) != 0))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
      v22 = *(_QWORD *)(v21 + 56);
    }
    v23 = *(_BYTE **)(a2 + 8);
    if ((v22 & 0x4000) == 0)
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, PrimIndex, 1);
        if (v189 == v190)
          goto LABEL_208;
        while (1)
        {
          v176 = 0;
          v125 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v191);
          v194 = v189;
          v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
          v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v127)
            v127 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v194 + 1) = &v176;
          *(_QWORD *)&v195 = &stru_24C51BCE0;
          WORD4(v195) = 0;
          *(_QWORD *)&v194 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v125, v126, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 448), (uint64_t (***)(_QWORD, uint64_t))&v194);
          v129 = v176;
          v130 = HasField && BYTE8(v195) == 0;
          if (v130 && v176 != 0)
          {
            v132 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v132)
              v132 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v129 = v176;
            if ((v176 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v132 & 0xFFFFFFFFFFFFFFF8))
            {
              v133 = *(_QWORD *)v23;
              v184 = v189;
              v134 = (uint64_t *)v191;
              v194 = v189;
              v135 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
              v136 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v136)
                v136 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v194 = 0;
              sub_20C510F28((uint64_t)a6, v133, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184, v134, v135, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v136 + 448), (uint64_t *)&v194);
              if ((v194 & 7) != 0)
              {
                v137 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
                do
                  v138 = __ldxr(v137);
                while (__stlxr(v138 - 2, v137));
              }
              v129 = v176;
              if (*((_BYTE *)a6 + 40))
                break;
            }
          }
          if ((v129 & 7) != 0)
          {
            v139 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v140 = __ldxr(v139);
            while (__stlxr(v140 - 2, v139));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188);
          if ((_QWORD)v189 == (_QWORD)v190 && *((_QWORD *)&v189 + 1) == *((_QWORD *)&v190 + 1))
            goto LABEL_208;
        }
        if ((v176 & 7) != 0)
        {
          v163 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
          do
            v164 = __ldxr(v163);
          while (__stlxr(v164 - 2, v163));
        }
LABEL_208:
        if (*((_BYTE *)a6 + 40))
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_211;
          goto LABEL_210;
        }
        goto LABEL_213;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
          || (v23[57] & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
        {
LABEL_141:
          v142 = a6;
          v143 = 0;
          goto LABEL_207;
        }
        v153 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, v153, 1);
        if ((_QWORD)v189 == (_QWORD)v190)
        {
          v154 = 1;
          if (*((_QWORD *)&v189 + 1) == *((_QWORD *)&v190 + 1))
          {
LABEL_163:
            v142 = a6;
            v143 = v154;
            goto LABEL_207;
          }
        }
        v154 = 1;
        while (1)
        {
          LODWORD(v184) = 1;
          v165 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v191);
          v194 = v189;
          v166 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
          v167 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v167)
            v167 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v194 + 1) = &v184;
          *(_QWORD *)&v195 = &stru_24C527CB0;
          WORD4(v195) = 0;
          *(_QWORD *)&v194 = &unk_24C539DB8;
          v168 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v165, v166, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v167 + 312), (uint64_t (***)(_QWORD, uint64_t))&v194);
          if (BYTE8(v195))
            v169 = 0;
          else
            v169 = v168;
          if (v169 == 1 && (_DWORD)v184 != 1)
          {
            if (!(_DWORD)v184)
              goto LABEL_141;
            v194 = v189;
            if (!(_QWORD)v189 || *((_QWORD *)&v189 + 1) == -1)
            {
LABEL_206:
              v142 = a6;
              v143 = 2;
LABEL_207:
              sub_20C45A43C(v142, v143);
              goto LABEL_208;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194))
            {
              *(_QWORD *)&v194 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
              *((_QWORD *)&v194 + 1) = v170;
              if (!(_QWORD)v194 || v170 == -1)
                goto LABEL_206;
            }
            v154 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188);
          if (v189 == v190)
            goto LABEL_163;
        }
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v147 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, v147, 1);
        *(_QWORD *)&v194 = 0;
        v148 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v148)
          v148 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v184 = 0;
        sub_20C511130((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v148 + 208), (uint64_t *)&v184, a5, (uint64_t)&v188, (uint64_t)a6);
        if ((v184 & 7) != 0)
        {
          v149 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v150 = __ldxr(v149);
          while (__stlxr(v150 - 2, v149));
        }
        if ((v194 & 7) != 0)
        {
          v151 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v152 = __ldxr(v151);
          while (__stlxr(v152 - 2, v151));
        }
        goto LABEL_208;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8))
      {
        v155 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, v155, 1);
        *(_QWORD *)&v194 = 0;
        v156 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v156)
          v156 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v184 = 0;
        sub_20C511130((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, v156, (uint64_t *)&v184, a5, (uint64_t)&v188, (uint64_t)a6);
        if ((v184 & 7) != 0)
        {
          v157 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        if ((v194 & 7) != 0)
        {
          v159 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v160 = __ldxr(v159);
          while (__stlxr(v160 - 2, v159));
        }
        goto LABEL_208;
      }
      goto LABEL_34;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    v30 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v30);
    *(_QWORD *)&v188 = v31;
    *((_QWORD *)&v188 + 1) = v32;
    if (*(_QWORD *)(a1 + 40)
      && (v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v188),
          v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v33),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(_QWORD *)(a1 + 40)))
    {
      v144 = sub_20C510F28((uint64_t)a6, *(_QWORD *)v23, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v188, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (*((_BYTE *)a6 + 40))
      {
LABEL_143:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_211;
        goto LABEL_210;
      }
      v35 = v144;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | sub_20C510F28((uint64_t)a6, *(_QWORD *)v23, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v188, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_213;
    goto LABEL_143;
  }
LABEL_34:
  if (!sub_20C50F608(a2, a3, a4, a5, (uint64_t)a6))
    goto LABEL_213;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_211;
LABEL_210:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_211:
  v171 = v175;
  v172 = atomic_load(Instance + 18);
  v173 = v171 >= v172
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v175, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_215:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v175);
  return v173;
}

void sub_20C421B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;

  v22 = *(_QWORD *)(v20 - 120);
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C421E08(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BOOL8 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (***v15[2])(_QWORD, uint64_t);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  v20[2] = &stru_24C524DC0;
  v21 = 0;
  v20[0] = &unk_24C52D9E0;
  v20[1] = a6;
  sub_20C4535E0((uint64_t)v15, (uint64_t)v20, a2);
  v11 = sub_20C421F58(a1, a2, a3, a4, a5, v15);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v11;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage32_GetTypeSpecificResolvedMetadataINS_7VtArrayINS_12SdfAssetPathEEEEEbRKNS_9UsdObjectERKNS_7TfTokenESA_bPT_(a1, a2, a3, a4, a5, a6);
}

void sub_20C421F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C42311C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C421F58(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v34;
  int v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v49;
  pxrInternal__aapl__pxrReserved__ *v50;
  unint64_t *v51;
  unint64_t v52;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v58;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  uint64_t *v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v81;
  _QWORD *Layers;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v88;
  unsigned int *v89;
  unsigned int v90;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v91;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v92;
  uint64_t *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  pxrInternal__aapl__pxrReserved__::SdfPath *v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v121;
  unsigned int *v122;
  unsigned int v123;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v125;
  pxrInternal__aapl__pxrReserved__::SdfPath *v126;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v127;
  int HasField;
  uint64_t v129;
  BOOL v130;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v132;
  uint64_t v133;
  uint64_t *v134;
  pxrInternal__aapl__pxrReserved__::SdfPath *v135;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  _BYTE *v142;
  int v143;
  int v144;
  unsigned int *v145;
  unsigned int v146;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v147;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v153;
  int v154;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v155;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  _QWORD *v165;
  pxrInternal__aapl__pxrReserved__::SdfPath *v166;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v167;
  int v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _BOOL8 v173;
  unint64_t v175;
  uint64_t v176;
  pxrInternal__aapl__pxrReserved__ *v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  __int128 v184;
  int v185;
  int v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v175);
  v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v188);
        v37 = *((_QWORD *)&v188 + 1);
        if (!*((_QWORD *)&v188 + 1) || (*(_BYTE *)(*((_QWORD *)&v188 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v188 + 1), v36);
        v38 = *(unint64_t **)(v37 + 24);
        PrimDefinition = atomic_load(v38 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        v40 = sub_20C398E78(&v188);
        *(_QWORD *)&v194 = 0;
        v41 = sub_20C45A220(PrimDefinition, v40, a3, &v194, *a6);
        *((_BYTE *)a6 + 40) = v41;
        if ((v194 & 7) != 0)
        {
          v42 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
          v41 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v41)
        {
          *(_QWORD *)&v194 = 0;
          sub_20C511FBC((uint64_t)&v188, a3, (uint64_t *)&v194, a5, (uint64_t)a6);
          if ((v194 & 7) != 0)
          {
            v44 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
        }
        if ((BYTE8(v189) & 7) != 0)
        {
          v46 = (unsigned int *)(*((_QWORD *)&v189 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v189 + 1);
        sub_20BFD265C(&v189);
        v48 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v188 + 1);
        if (!*((_QWORD *)&v188 + 1))
        {
LABEL_180:
          if (*((_BYTE *)a6 + 40))
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_211;
            goto LABEL_210;
          }
LABEL_213:
          v173 = 0;
          goto LABEL_215;
        }
LABEL_179:
        sub_20C35C614(v48);
        goto LABEL_180;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v176);
        v50 = v177;
        if (!v177 || (*((_BYTE *)v177 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v177, v49);
        v51 = (unint64_t *)*((_QWORD *)v50 + 3);
        v52 = atomic_load(v51 + 7);
        if (!v52)
          v52 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v51);
        v53 = sub_20C398E78(&v176);
        v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v54)
          v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v188 = 0;
        v55 = sub_20C45A220(v52, v53, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v54 + 464), &v188, *a6);
        *((_BYTE *)a6 + 40) = v55;
        if ((v188 & 7) != 0)
        {
          v56 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
          v55 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v55)
        {
          v58 = sub_20C398E78(&v176);
          sub_20C35C4F8((uint64_t)&v184, (uint64_t *)&v177, &v178);
          v60 = (uint64_t *)sub_20C368FF0((uint64_t)&v184, v59);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v60, 6u, (uint64_t *)&v194);
          v192 = v194;
          v193 = v195;
          v188 = v195;
          v189 = v195;
          v190 = v194;
          v191 = v194;
          if ((v187 & 7) != 0)
          {
            v61 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v186);
          sub_20BFD265C(&v185);
          if (*((_QWORD *)&v184 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v184 + 1));
          if (v189 != v191)
          {
            while (1)
            {
              v65 = sub_20C444D70(&v188, v63, v64);
              v66 = v65[3] - 1;
              *(_QWORD *)&v194 = v65[2];
              *((_QWORD *)&v194 + 1) = v66;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194) & 1) == 0)
              {
                v69 = sub_20C444D70(&v188, v67, v68);
                v70 = v69[3] - 1;
                *(_QWORD *)&v184 = v69[2];
                *((_QWORD *)&v184 + 1) = v70;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184) & 1) != 0)
                  break;
              }
LABEL_90:
              sub_20C444E44(&v188);
              if (v189 == v191)
                goto LABEL_175;
            }
            v73 = sub_20C444D70(&v188, v71, v72);
            v74 = v73[3] - 1;
            *(_QWORD *)&v194 = v73[2];
            *((_QWORD *)&v194 + 1) = v74;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v58, &v182);
            v78 = sub_20C444D70(&v188, v76, v77);
            v79 = v78[3] - 1;
            *(_QWORD *)&v184 = v78[2];
            *((_QWORD *)&v184 + 1) = v79;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184);
            v81 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v81);
            *(_QWORD *)&v194 = Layers[1];
            *((_QWORD *)&v194 + 1) = v194;
            *(_QWORD *)&v195 = *Layers;
            *((_QWORD *)&v195 + 1) = v195;
            while (1)
            {
              if (*((_QWORD *)&v194 + 1) == *((_QWORD *)&v195 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
                sub_20BFD265C(&v182);
                goto LABEL_90;
              }
              *(_QWORD *)&v184 = sub_20C45A2E0(&v188, v83, v84);
              *((_QWORD *)&v184 + 1) = v85;
              v87 = (uint64_t *)sub_20C22F36C((uint64_t)&v194, v85, v86);
              v88 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v88)
                v88 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v181 = 0;
              sub_20C5138DC((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184, v87, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v182, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v88 + 464), &v181);
              if ((v181 & 7) != 0)
              {
                v89 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
                do
                  v90 = __ldxr(v89);
                while (__stlxr(v90 - 2, v89));
              }
              if (*((_BYTE *)a6 + 40))
                break;
              sub_20C22F508((uint64_t)&v194);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
            sub_20BFD265C(&v182);
          }
        }
LABEL_175:
        if ((v180 & 7) != 0)
        {
          v161 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
          do
            v162 = __ldxr(v161);
          while (__stlxr(v162 - 2, v161));
        }
LABEL_178:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v179);
        sub_20BFD265C(&v178);
        v48 = v177;
        if (!v177)
          goto LABEL_180;
        goto LABEL_179;
      }
    }
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v176);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v176, (uint64_t)&v188);
      v18 = *((_QWORD *)&v188 + 1);
      if ((v188 & 7) != 0)
      {
        v19 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v18)
      {
        LOBYTE(v188) = 0;
        sub_20C45A3D8((uint64_t)*a6, &v188);
        *((_BYTE *)a6 + 40) = 1;
      }
      else
      {
        v91 = sub_20C398E78(&v176);
        sub_20C35C4F8((uint64_t)&v184, (uint64_t *)&v177, &v178);
        v93 = (uint64_t *)sub_20C368FF0((uint64_t)&v184, v92);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v93, 6u, (uint64_t *)&v194);
        v192 = v194;
        v193 = v195;
        v188 = v195;
        v189 = v195;
        v190 = v194;
        v191 = v194;
        if ((v187 & 7) != 0)
        {
          v94 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
          do
            v95 = __ldxr(v94);
          while (__stlxr(v95 - 2, v94));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v186);
        sub_20BFD265C(&v185);
        if (*((_QWORD *)&v184 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v184 + 1));
        if (v189 != v191)
        {
          while (1)
          {
            v98 = sub_20C444D70(&v188, v96, v97);
            v99 = v98[3] - 1;
            *(_QWORD *)&v194 = v98[2];
            *((_QWORD *)&v194 + 1) = v99;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194) & 1) == 0)
            {
              v102 = sub_20C444D70(&v188, v100, v101);
              v103 = v102[3] - 1;
              *(_QWORD *)&v184 = v102[2];
              *((_QWORD *)&v184 + 1) = v103;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184) & 1) != 0)
                break;
            }
LABEL_110:
            sub_20C444E44(&v188);
            if (v189 == v191)
              goto LABEL_146;
          }
          v106 = sub_20C444D70(&v188, v104, v105);
          v107 = v106[3] - 1;
          *(_QWORD *)&v194 = v106[2];
          *((_QWORD *)&v194 + 1) = v107;
          v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v108, v91, &v182);
          v111 = sub_20C444D70(&v188, v109, v110);
          v112 = v111[3] - 1;
          *(_QWORD *)&v184 = v111[2];
          *((_QWORD *)&v184 + 1) = v112;
          v113 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184);
          v114 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v113);
          v115 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v114);
          *(_QWORD *)&v194 = v115[1];
          *((_QWORD *)&v194 + 1) = v194;
          *(_QWORD *)&v195 = *v115;
          *((_QWORD *)&v195 + 1) = v195;
          while (1)
          {
            if (*((_QWORD *)&v194 + 1) == *((_QWORD *)&v195 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
              sub_20BFD265C(&v182);
              goto LABEL_110;
            }
            *(_QWORD *)&v184 = sub_20C45A2E0(&v188, v116, v117);
            *((_QWORD *)&v184 + 1) = v118;
            v120 = (uint64_t *)sub_20C22F36C((uint64_t)&v194, v118, v119);
            v121 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v121)
              v121 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v181 = 0;
            sub_20C5138DC((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184, v120, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v182, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v121 + 64), &v181);
            if ((v181 & 7) != 0)
            {
              v122 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
              do
                v123 = __ldxr(v122);
              while (__stlxr(v123 - 2, v122));
            }
            if (*((_BYTE *)a6 + 40))
              break;
            sub_20C22F508((uint64_t)&v194);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
          sub_20BFD265C(&v182);
        }
      }
LABEL_146:
      if ((v180 & 7) != 0)
      {
        v145 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      goto LABEL_178;
    }
    goto LABEL_34;
  }
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 56), (v22 & 0x800) != 0))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
      v22 = *(_QWORD *)(v21 + 56);
    }
    v23 = *(_BYTE **)(a2 + 8);
    if ((v22 & 0x4000) == 0)
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, PrimIndex, 1);
        if (v189 == v190)
          goto LABEL_208;
        while (1)
        {
          v176 = 0;
          v125 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v191);
          v194 = v189;
          v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
          v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v127)
            v127 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v194 + 1) = &v176;
          *(_QWORD *)&v195 = &stru_24C51BCE0;
          WORD4(v195) = 0;
          *(_QWORD *)&v194 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v125, v126, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 448), (uint64_t (***)(_QWORD, uint64_t))&v194);
          v129 = v176;
          v130 = HasField && BYTE8(v195) == 0;
          if (v130 && v176 != 0)
          {
            v132 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v132)
              v132 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v129 = v176;
            if ((v176 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v132 & 0xFFFFFFFFFFFFFFF8))
            {
              v133 = *(_QWORD *)v23;
              v184 = v189;
              v134 = (uint64_t *)v191;
              v194 = v189;
              v135 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
              v136 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v136)
                v136 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v194 = 0;
              sub_20C5138DC((uint64_t)a6, v133, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v184, v134, v135, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v136 + 448), (uint64_t *)&v194);
              if ((v194 & 7) != 0)
              {
                v137 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
                do
                  v138 = __ldxr(v137);
                while (__stlxr(v138 - 2, v137));
              }
              v129 = v176;
              if (*((_BYTE *)a6 + 40))
                break;
            }
          }
          if ((v129 & 7) != 0)
          {
            v139 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v140 = __ldxr(v139);
            while (__stlxr(v140 - 2, v139));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188);
          if ((_QWORD)v189 == (_QWORD)v190 && *((_QWORD *)&v189 + 1) == *((_QWORD *)&v190 + 1))
            goto LABEL_208;
        }
        if ((v176 & 7) != 0)
        {
          v163 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
          do
            v164 = __ldxr(v163);
          while (__stlxr(v164 - 2, v163));
        }
LABEL_208:
        if (*((_BYTE *)a6 + 40))
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_211;
          goto LABEL_210;
        }
        goto LABEL_213;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
          || (v23[57] & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
        {
LABEL_141:
          v142 = a6;
          v143 = 0;
          goto LABEL_207;
        }
        v153 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, v153, 1);
        if ((_QWORD)v189 == (_QWORD)v190)
        {
          v154 = 1;
          if (*((_QWORD *)&v189 + 1) == *((_QWORD *)&v190 + 1))
          {
LABEL_163:
            v142 = a6;
            v143 = v154;
            goto LABEL_207;
          }
        }
        v154 = 1;
        while (1)
        {
          LODWORD(v184) = 1;
          v165 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v191);
          v194 = v189;
          v166 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
          v167 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v167)
            v167 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v194 + 1) = &v184;
          *(_QWORD *)&v195 = &stru_24C527CB0;
          WORD4(v195) = 0;
          *(_QWORD *)&v194 = &unk_24C539DB8;
          v168 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v165, v166, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v167 + 312), (uint64_t (***)(_QWORD, uint64_t))&v194);
          if (BYTE8(v195))
            v169 = 0;
          else
            v169 = v168;
          if (v169 == 1 && (_DWORD)v184 != 1)
          {
            if (!(_DWORD)v184)
              goto LABEL_141;
            v194 = v189;
            if (!(_QWORD)v189 || *((_QWORD *)&v189 + 1) == -1)
            {
LABEL_206:
              v142 = a6;
              v143 = 2;
LABEL_207:
              sub_20C45A43C(v142, v143);
              goto LABEL_208;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194))
            {
              *(_QWORD *)&v194 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v194);
              *((_QWORD *)&v194 + 1) = v170;
              if (!(_QWORD)v194 || v170 == -1)
                goto LABEL_206;
            }
            v154 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188);
          if (v189 == v190)
            goto LABEL_163;
        }
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v147 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, v147, 1);
        *(_QWORD *)&v194 = 0;
        v148 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v148)
          v148 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v184 = 0;
        sub_20C513A90((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v148 + 208), (uint64_t *)&v184, a5, (uint64_t)&v188, (uint64_t)a6);
        if ((v184 & 7) != 0)
        {
          v149 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v150 = __ldxr(v149);
          while (__stlxr(v150 - 2, v149));
        }
        if ((v194 & 7) != 0)
        {
          v151 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v152 = __ldxr(v151);
          while (__stlxr(v152 - 2, v151));
        }
        goto LABEL_208;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8))
      {
        v155 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v188, v155, 1);
        *(_QWORD *)&v194 = 0;
        v156 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v156)
          v156 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v184 = 0;
        sub_20C513A90((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v194, v156, (uint64_t *)&v184, a5, (uint64_t)&v188, (uint64_t)a6);
        if ((v184 & 7) != 0)
        {
          v157 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        if ((v194 & 7) != 0)
        {
          v159 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v160 = __ldxr(v159);
          while (__stlxr(v160 - 2, v159));
        }
        goto LABEL_208;
      }
      goto LABEL_34;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    v30 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v30);
    *(_QWORD *)&v188 = v31;
    *((_QWORD *)&v188 + 1) = v32;
    if (*(_QWORD *)(a1 + 40)
      && (v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v188),
          v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v33),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(_QWORD *)(a1 + 40)))
    {
      v144 = sub_20C5138DC((uint64_t)a6, *(_QWORD *)v23, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v188, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (*((_BYTE *)a6 + 40))
      {
LABEL_143:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_211;
        goto LABEL_210;
      }
      v35 = v144;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | sub_20C5138DC((uint64_t)a6, *(_QWORD *)v23, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v188, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_213;
    goto LABEL_143;
  }
LABEL_34:
  if (!sub_20C511FBC(a2, a3, a4, a5, (uint64_t)a6))
    goto LABEL_213;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_211;
LABEL_210:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_211:
  v171 = v175;
  v172 = atomic_load(Instance + 18);
  v173 = v171 >= v172
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v175, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_215:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v175);
  return v173;
}

void sub_20C422E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;

  v22 = *(_QWORD *)(v20 - 120);
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C42311C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BOOL8 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (***v15[2])(_QWORD, uint64_t);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  v20[2] = &stru_24C525368;
  v21 = 0;
  v20[0] = &unk_24C52D8C8;
  v20[1] = a6;
  sub_20C4535E0((uint64_t)v15, (uint64_t)v20, a2);
  v11 = sub_20C42326C(a1, a2, a3, a4, a5, v15);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v11;
}

void sub_20C423258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C424418((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C42326C(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v34;
  int v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v49;
  pxrInternal__aapl__pxrReserved__ *v50;
  unint64_t *v51;
  unint64_t v52;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v58;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  uint64_t *v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v81;
  _QWORD *Layers;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v88;
  unsigned int *v89;
  unsigned int v90;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v91;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v92;
  uint64_t *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  pxrInternal__aapl__pxrReserved__::SdfPath *v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v121;
  unsigned int *v122;
  unsigned int v123;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v125;
  pxrInternal__aapl__pxrReserved__::SdfPath *v126;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v127;
  int HasField;
  uint64_t v129;
  BOOL v130;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v132;
  uint64_t *v133;
  pxrInternal__aapl__pxrReserved__::SdfPath *v134;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  _BYTE *v141;
  int v142;
  int v143;
  unsigned int *v144;
  unsigned int v145;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v146;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v152;
  int v153;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v154;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  _QWORD *v164;
  pxrInternal__aapl__pxrReserved__::SdfPath *v165;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v166;
  int v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _BOOL8 v172;
  unint64_t v174;
  uint64_t v175;
  pxrInternal__aapl__pxrReserved__ *v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  __int128 v183;
  int v184;
  int v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v174);
  v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v187);
        v37 = *((_QWORD *)&v187 + 1);
        if (!*((_QWORD *)&v187 + 1) || (*(_BYTE *)(*((_QWORD *)&v187 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v187 + 1), v36);
        v38 = *(unint64_t **)(v37 + 24);
        PrimDefinition = atomic_load(v38 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        v40 = sub_20C398E78(&v187);
        *(_QWORD *)&v193 = 0;
        v41 = sub_20C45A220(PrimDefinition, v40, a3, &v193, *a6);
        *((_BYTE *)a6 + 40) = v41;
        if ((v193 & 7) != 0)
        {
          v42 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
          v41 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v41)
        {
          *(_QWORD *)&v193 = 0;
          sub_20C51491C((uint64_t)&v187, a3, (uint64_t *)&v193, a5, (uint64_t)a6);
          if ((v193 & 7) != 0)
          {
            v44 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
        }
        if ((BYTE8(v188) & 7) != 0)
        {
          v46 = (unsigned int *)(*((_QWORD *)&v188 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v188 + 1);
        sub_20BFD265C(&v188);
        v48 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v187 + 1);
        if (!*((_QWORD *)&v187 + 1))
        {
LABEL_180:
          if (*((_BYTE *)a6 + 40))
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_211;
            goto LABEL_210;
          }
LABEL_213:
          v172 = 0;
          goto LABEL_215;
        }
LABEL_179:
        sub_20C35C614(v48);
        goto LABEL_180;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v175);
        v50 = v176;
        if (!v176 || (*((_BYTE *)v176 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v176, v49);
        v51 = (unint64_t *)*((_QWORD *)v50 + 3);
        v52 = atomic_load(v51 + 7);
        if (!v52)
          v52 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v51);
        v53 = sub_20C398E78(&v175);
        v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v54)
          v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v187 = 0;
        v55 = sub_20C45A220(v52, v53, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v54 + 464), &v187, *a6);
        *((_BYTE *)a6 + 40) = v55;
        if ((v187 & 7) != 0)
        {
          v56 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
          v55 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v55)
        {
          v58 = sub_20C398E78(&v175);
          sub_20C35C4F8((uint64_t)&v183, (uint64_t *)&v176, &v177);
          v60 = (uint64_t *)sub_20C368FF0((uint64_t)&v183, v59);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v60, 6u, (uint64_t *)&v193);
          v191 = v193;
          v192 = v194;
          v187 = v194;
          v188 = v194;
          v189 = v193;
          v190 = v193;
          if ((v186 & 7) != 0)
          {
            v61 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v185);
          sub_20BFD265C(&v184);
          if (*((_QWORD *)&v183 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v183 + 1));
          if (v188 != v190)
          {
            while (1)
            {
              v65 = sub_20C444D70(&v187, v63, v64);
              v66 = v65[3] - 1;
              *(_QWORD *)&v193 = v65[2];
              *((_QWORD *)&v193 + 1) = v66;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193) & 1) == 0)
              {
                v69 = sub_20C444D70(&v187, v67, v68);
                v70 = v69[3] - 1;
                *(_QWORD *)&v183 = v69[2];
                *((_QWORD *)&v183 + 1) = v70;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183) & 1) != 0)
                  break;
              }
LABEL_90:
              sub_20C444E44(&v187);
              if (v188 == v190)
                goto LABEL_175;
            }
            v73 = sub_20C444D70(&v187, v71, v72);
            v74 = v73[3] - 1;
            *(_QWORD *)&v193 = v73[2];
            *((_QWORD *)&v193 + 1) = v74;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v58, &v181);
            v78 = sub_20C444D70(&v187, v76, v77);
            v79 = v78[3] - 1;
            *(_QWORD *)&v183 = v78[2];
            *((_QWORD *)&v183 + 1) = v79;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183);
            v81 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v81);
            *(_QWORD *)&v193 = Layers[1];
            *((_QWORD *)&v193 + 1) = v193;
            *(_QWORD *)&v194 = *Layers;
            *((_QWORD *)&v194 + 1) = v194;
            while (1)
            {
              if (*((_QWORD *)&v193 + 1) == *((_QWORD *)&v194 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
                sub_20BFD265C(&v181);
                goto LABEL_90;
              }
              *(_QWORD *)&v183 = sub_20C45A2E0(&v187, v83, v84);
              *((_QWORD *)&v183 + 1) = v85;
              v87 = (uint64_t *)sub_20C22F36C((uint64_t)&v193, v85, v86);
              v88 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v88)
                v88 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v180 = 0;
              sub_20C51623C((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183, v87, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v181, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v88 + 464), &v180);
              if ((v180 & 7) != 0)
              {
                v89 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
                do
                  v90 = __ldxr(v89);
                while (__stlxr(v90 - 2, v89));
              }
              if (*((_BYTE *)a6 + 40))
                break;
              sub_20C22F508((uint64_t)&v193);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
            sub_20BFD265C(&v181);
          }
        }
LABEL_175:
        if ((v179 & 7) != 0)
        {
          v160 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
          do
            v161 = __ldxr(v160);
          while (__stlxr(v161 - 2, v160));
        }
LABEL_178:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v178);
        sub_20BFD265C(&v177);
        v48 = v176;
        if (!v176)
          goto LABEL_180;
        goto LABEL_179;
      }
    }
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v175);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v175, (uint64_t)&v187);
      v18 = *((_QWORD *)&v187 + 1);
      if ((v187 & 7) != 0)
      {
        v19 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v18)
      {
        LOBYTE(v187) = 0;
        sub_20C45A3D8((uint64_t)*a6, &v187);
        *((_BYTE *)a6 + 40) = 1;
      }
      else
      {
        v91 = sub_20C398E78(&v175);
        sub_20C35C4F8((uint64_t)&v183, (uint64_t *)&v176, &v177);
        v93 = (uint64_t *)sub_20C368FF0((uint64_t)&v183, v92);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v93, 6u, (uint64_t *)&v193);
        v191 = v193;
        v192 = v194;
        v187 = v194;
        v188 = v194;
        v189 = v193;
        v190 = v193;
        if ((v186 & 7) != 0)
        {
          v94 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
          do
            v95 = __ldxr(v94);
          while (__stlxr(v95 - 2, v94));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v185);
        sub_20BFD265C(&v184);
        if (*((_QWORD *)&v183 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v183 + 1));
        if (v188 != v190)
        {
          while (1)
          {
            v98 = sub_20C444D70(&v187, v96, v97);
            v99 = v98[3] - 1;
            *(_QWORD *)&v193 = v98[2];
            *((_QWORD *)&v193 + 1) = v99;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193) & 1) == 0)
            {
              v102 = sub_20C444D70(&v187, v100, v101);
              v103 = v102[3] - 1;
              *(_QWORD *)&v183 = v102[2];
              *((_QWORD *)&v183 + 1) = v103;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183) & 1) != 0)
                break;
            }
LABEL_110:
            sub_20C444E44(&v187);
            if (v188 == v190)
              goto LABEL_146;
          }
          v106 = sub_20C444D70(&v187, v104, v105);
          v107 = v106[3] - 1;
          *(_QWORD *)&v193 = v106[2];
          *((_QWORD *)&v193 + 1) = v107;
          v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v108, v91, &v181);
          v111 = sub_20C444D70(&v187, v109, v110);
          v112 = v111[3] - 1;
          *(_QWORD *)&v183 = v111[2];
          *((_QWORD *)&v183 + 1) = v112;
          v113 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183);
          v114 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v113);
          v115 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v114);
          *(_QWORD *)&v193 = v115[1];
          *((_QWORD *)&v193 + 1) = v193;
          *(_QWORD *)&v194 = *v115;
          *((_QWORD *)&v194 + 1) = v194;
          while (1)
          {
            if (*((_QWORD *)&v193 + 1) == *((_QWORD *)&v194 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
              sub_20BFD265C(&v181);
              goto LABEL_110;
            }
            *(_QWORD *)&v183 = sub_20C45A2E0(&v187, v116, v117);
            *((_QWORD *)&v183 + 1) = v118;
            v120 = (uint64_t *)sub_20C22F36C((uint64_t)&v193, v118, v119);
            v121 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v121)
              v121 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v180 = 0;
            sub_20C51623C((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183, v120, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v181, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v121 + 64), &v180);
            if ((v180 & 7) != 0)
            {
              v122 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
              do
                v123 = __ldxr(v122);
              while (__stlxr(v123 - 2, v122));
            }
            if (*((_BYTE *)a6 + 40))
              break;
            sub_20C22F508((uint64_t)&v193);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
          sub_20BFD265C(&v181);
        }
      }
LABEL_146:
      if ((v179 & 7) != 0)
      {
        v144 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      goto LABEL_178;
    }
    goto LABEL_34;
  }
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 56), (v22 & 0x800) != 0))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
      v22 = *(_QWORD *)(v21 + 56);
    }
    v23 = *(_BYTE **)(a2 + 8);
    if ((v22 & 0x4000) == 0)
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, PrimIndex, 1);
        if (v188 == v189)
          goto LABEL_208;
        while (1)
        {
          v175 = 0;
          v125 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v190);
          v193 = v188;
          v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
          v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v127)
            v127 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v193 + 1) = &v175;
          *(_QWORD *)&v194 = &stru_24C51BCE0;
          WORD4(v194) = 0;
          *(_QWORD *)&v193 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v125, v126, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 448), (uint64_t (***)(_QWORD, uint64_t))&v193);
          v129 = v175;
          v130 = HasField && BYTE8(v194) == 0;
          if (v130 && v175 != 0)
          {
            v132 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v132)
              v132 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v129 = v175;
            if ((v175 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v132 & 0xFFFFFFFFFFFFFFF8))
            {
              v183 = v188;
              v133 = (uint64_t *)v190;
              v193 = v188;
              v134 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
              v135 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v135)
                v135 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v193 = 0;
              sub_20C51623C((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183, v133, v134, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v135 + 448), (uint64_t *)&v193);
              if ((v193 & 7) != 0)
              {
                v136 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
                do
                  v137 = __ldxr(v136);
                while (__stlxr(v137 - 2, v136));
              }
              v129 = v175;
              if (*((_BYTE *)a6 + 40))
                break;
            }
          }
          if ((v129 & 7) != 0)
          {
            v138 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v139 = __ldxr(v138);
            while (__stlxr(v139 - 2, v138));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187);
          if ((_QWORD)v188 == (_QWORD)v189 && *((_QWORD *)&v188 + 1) == *((_QWORD *)&v189 + 1))
            goto LABEL_208;
        }
        if ((v175 & 7) != 0)
        {
          v162 = (unsigned int *)(v175 & 0xFFFFFFFFFFFFFFF8);
          do
            v163 = __ldxr(v162);
          while (__stlxr(v163 - 2, v162));
        }
LABEL_208:
        if (*((_BYTE *)a6 + 40))
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_211;
          goto LABEL_210;
        }
        goto LABEL_213;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
          || (v23[57] & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
        {
LABEL_141:
          v141 = a6;
          v142 = 0;
          goto LABEL_207;
        }
        v152 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, v152, 1);
        if ((_QWORD)v188 == (_QWORD)v189)
        {
          v153 = 1;
          if (*((_QWORD *)&v188 + 1) == *((_QWORD *)&v189 + 1))
          {
LABEL_163:
            v141 = a6;
            v142 = v153;
            goto LABEL_207;
          }
        }
        v153 = 1;
        while (1)
        {
          LODWORD(v183) = 1;
          v164 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v190);
          v193 = v188;
          v165 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
          v166 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v166)
            v166 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v193 + 1) = &v183;
          *(_QWORD *)&v194 = &stru_24C527CB0;
          WORD4(v194) = 0;
          *(_QWORD *)&v193 = &unk_24C539DB8;
          v167 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v164, v165, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v166 + 312), (uint64_t (***)(_QWORD, uint64_t))&v193);
          if (BYTE8(v194))
            v168 = 0;
          else
            v168 = v167;
          if (v168 == 1 && (_DWORD)v183 != 1)
          {
            if (!(_DWORD)v183)
              goto LABEL_141;
            v193 = v188;
            if (!(_QWORD)v188 || *((_QWORD *)&v188 + 1) == -1)
            {
LABEL_206:
              v141 = a6;
              v142 = 2;
LABEL_207:
              sub_20C45A43C(v141, v142);
              goto LABEL_208;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193))
            {
              *(_QWORD *)&v193 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
              *((_QWORD *)&v193 + 1) = v169;
              if (!(_QWORD)v193 || v169 == -1)
                goto LABEL_206;
            }
            v153 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187);
          if (v188 == v189)
            goto LABEL_163;
        }
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v146 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, v146, 1);
        *(_QWORD *)&v193 = 0;
        v147 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v147)
          v147 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v183 = 0;
        sub_20C5162DC((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v147 + 208), (uint64_t *)&v183, a5, (uint64_t)&v187, (uint64_t)a6);
        if ((v183 & 7) != 0)
        {
          v148 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFFFF8);
          do
            v149 = __ldxr(v148);
          while (__stlxr(v149 - 2, v148));
        }
        if ((v193 & 7) != 0)
        {
          v150 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v151 = __ldxr(v150);
          while (__stlxr(v151 - 2, v150));
        }
        goto LABEL_208;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8))
      {
        v154 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, v154, 1);
        *(_QWORD *)&v193 = 0;
        v155 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v155)
          v155 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v183 = 0;
        sub_20C5162DC((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193, v155, (uint64_t *)&v183, a5, (uint64_t)&v187, (uint64_t)a6);
        if ((v183 & 7) != 0)
        {
          v156 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFFFF8);
          do
            v157 = __ldxr(v156);
          while (__stlxr(v157 - 2, v156));
        }
        if ((v193 & 7) != 0)
        {
          v158 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v159 = __ldxr(v158);
          while (__stlxr(v159 - 2, v158));
        }
        goto LABEL_208;
      }
      goto LABEL_34;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    v30 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v30);
    *(_QWORD *)&v187 = v31;
    *((_QWORD *)&v187 + 1) = v32;
    if (*(_QWORD *)(a1 + 40)
      && (v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v187),
          v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v33),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(_QWORD *)(a1 + 40)))
    {
      v143 = sub_20C51623C((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v187, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (*((_BYTE *)a6 + 40))
      {
LABEL_143:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_211;
        goto LABEL_210;
      }
      v35 = v143;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | sub_20C51623C((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v187, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_213;
    goto LABEL_143;
  }
LABEL_34:
  if (!sub_20C51491C(a2, a3, a4, a5, (uint64_t)a6))
    goto LABEL_213;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_211;
LABEL_210:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_211:
  v170 = v174;
  v171 = atomic_load(Instance + 18);
  v172 = v170 >= v171
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v174, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_215:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v174);
  return v172;
}

void sub_20C424194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C424418(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(_QWORD *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v10;
  double *v11;
  double Inverse;
  double *v14;
  std::type_info *v15;
  double v16;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13)))
  {
    v16 = *a5;
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v10);
    v14 = v11;
    a5 = &v16;
    v16 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, &v16);
  }
  v15 = &stru_24C525368;
  Inverse = COERCE_DOUBLE(&unk_24C53A608);
  v14 = a5;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&Inverse);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage28_SetEditTargetMappedMetadataINS_11SdfTimeCodeEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_RKT_(a1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return (uint64_t)this + 48;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BOOL8 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (***v15[2])(_QWORD, uint64_t);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  v20[2] = &stru_24C525430;
  v21 = 0;
  v20[0] = &unk_24C52D900;
  v20[1] = a6;
  sub_20C4535E0((uint64_t)v15, (uint64_t)v20, a2);
  v11 = sub_20C424620(a1, a2, a3, a4, a5, v15);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v11;
}

void sub_20C42460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C4257CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C424620(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v34;
  int v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v49;
  pxrInternal__aapl__pxrReserved__ *v50;
  unint64_t *v51;
  unint64_t v52;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v58;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  uint64_t *v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v81;
  _QWORD *Layers;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v88;
  unsigned int *v89;
  unsigned int v90;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v91;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v92;
  uint64_t *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  pxrInternal__aapl__pxrReserved__::SdfPath *v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v121;
  unsigned int *v122;
  unsigned int v123;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v125;
  pxrInternal__aapl__pxrReserved__::SdfPath *v126;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v127;
  int HasField;
  uint64_t v129;
  BOOL v130;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v132;
  uint64_t *v133;
  pxrInternal__aapl__pxrReserved__::SdfPath *v134;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  _BYTE *v141;
  int v142;
  int v143;
  unsigned int *v144;
  unsigned int v145;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v146;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v152;
  int v153;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v154;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  _QWORD *v164;
  pxrInternal__aapl__pxrReserved__::SdfPath *v165;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v166;
  int v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _BOOL8 v172;
  unint64_t v174;
  uint64_t v175;
  pxrInternal__aapl__pxrReserved__ *v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  __int128 v183;
  int v184;
  int v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v174);
  v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v187);
        v37 = *((_QWORD *)&v187 + 1);
        if (!*((_QWORD *)&v187 + 1) || (*(_BYTE *)(*((_QWORD *)&v187 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v187 + 1), v36);
        v38 = *(unint64_t **)(v37 + 24);
        PrimDefinition = atomic_load(v38 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        v40 = sub_20C398E78(&v187);
        *(_QWORD *)&v193 = 0;
        v41 = sub_20C45A220(PrimDefinition, v40, a3, &v193, *a6);
        *((_BYTE *)a6 + 40) = v41;
        if ((v193 & 7) != 0)
        {
          v42 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
          v41 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v41)
        {
          *(_QWORD *)&v193 = 0;
          sub_20C517164((uint64_t)&v187, a3, (uint64_t *)&v193, a5, (uint64_t)a6);
          if ((v193 & 7) != 0)
          {
            v44 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
        }
        if ((BYTE8(v188) & 7) != 0)
        {
          v46 = (unsigned int *)(*((_QWORD *)&v188 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v188 + 1);
        sub_20BFD265C(&v188);
        v48 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v187 + 1);
        if (!*((_QWORD *)&v187 + 1))
        {
LABEL_180:
          if (*((_BYTE *)a6 + 40))
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_211;
            goto LABEL_210;
          }
LABEL_213:
          v172 = 0;
          goto LABEL_215;
        }
LABEL_179:
        sub_20C35C614(v48);
        goto LABEL_180;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v175);
        v50 = v176;
        if (!v176 || (*((_BYTE *)v176 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v176, v49);
        v51 = (unint64_t *)*((_QWORD *)v50 + 3);
        v52 = atomic_load(v51 + 7);
        if (!v52)
          v52 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v51);
        v53 = sub_20C398E78(&v175);
        v54 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v54)
          v54 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v187 = 0;
        v55 = sub_20C45A220(v52, v53, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v54 + 464), &v187, *a6);
        *((_BYTE *)a6 + 40) = v55;
        if ((v187 & 7) != 0)
        {
          v56 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
          v55 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v55)
        {
          v58 = sub_20C398E78(&v175);
          sub_20C35C4F8((uint64_t)&v183, (uint64_t *)&v176, &v177);
          v60 = (uint64_t *)sub_20C368FF0((uint64_t)&v183, v59);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v60, 6u, (uint64_t *)&v193);
          v191 = v193;
          v192 = v194;
          v187 = v194;
          v188 = v194;
          v189 = v193;
          v190 = v193;
          if ((v186 & 7) != 0)
          {
            v61 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v185);
          sub_20BFD265C(&v184);
          if (*((_QWORD *)&v183 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v183 + 1));
          if (v188 != v190)
          {
            while (1)
            {
              v65 = sub_20C444D70(&v187, v63, v64);
              v66 = v65[3] - 1;
              *(_QWORD *)&v193 = v65[2];
              *((_QWORD *)&v193 + 1) = v66;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193) & 1) == 0)
              {
                v69 = sub_20C444D70(&v187, v67, v68);
                v70 = v69[3] - 1;
                *(_QWORD *)&v183 = v69[2];
                *((_QWORD *)&v183 + 1) = v70;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183) & 1) != 0)
                  break;
              }
LABEL_90:
              sub_20C444E44(&v187);
              if (v188 == v190)
                goto LABEL_175;
            }
            v73 = sub_20C444D70(&v187, v71, v72);
            v74 = v73[3] - 1;
            *(_QWORD *)&v193 = v73[2];
            *((_QWORD *)&v193 + 1) = v74;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v58, &v181);
            v78 = sub_20C444D70(&v187, v76, v77);
            v79 = v78[3] - 1;
            *(_QWORD *)&v183 = v78[2];
            *((_QWORD *)&v183 + 1) = v79;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183);
            v81 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v81);
            *(_QWORD *)&v193 = Layers[1];
            *((_QWORD *)&v193 + 1) = v193;
            *(_QWORD *)&v194 = *Layers;
            *((_QWORD *)&v194 + 1) = v194;
            while (1)
            {
              if (*((_QWORD *)&v193 + 1) == *((_QWORD *)&v194 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
                sub_20BFD265C(&v181);
                goto LABEL_90;
              }
              *(_QWORD *)&v183 = sub_20C45A2E0(&v187, v83, v84);
              *((_QWORD *)&v183 + 1) = v85;
              v87 = (uint64_t *)sub_20C22F36C((uint64_t)&v193, v85, v86);
              v88 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v88)
                v88 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v180 = 0;
              sub_20C518A84((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183, v87, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v181, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v88 + 464), &v180);
              if ((v180 & 7) != 0)
              {
                v89 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
                do
                  v90 = __ldxr(v89);
                while (__stlxr(v90 - 2, v89));
              }
              if (*((_BYTE *)a6 + 40))
                break;
              sub_20C22F508((uint64_t)&v193);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
            sub_20BFD265C(&v181);
          }
        }
LABEL_175:
        if ((v179 & 7) != 0)
        {
          v160 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
          do
            v161 = __ldxr(v160);
          while (__stlxr(v161 - 2, v160));
        }
LABEL_178:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v178);
        sub_20BFD265C(&v177);
        v48 = v176;
        if (!v176)
          goto LABEL_180;
        goto LABEL_179;
      }
    }
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v175);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v175, (uint64_t)&v187);
      v18 = *((_QWORD *)&v187 + 1);
      if ((v187 & 7) != 0)
      {
        v19 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v18)
      {
        LOBYTE(v187) = 0;
        sub_20C45A3D8((uint64_t)*a6, &v187);
        *((_BYTE *)a6 + 40) = 1;
      }
      else
      {
        v91 = sub_20C398E78(&v175);
        sub_20C35C4F8((uint64_t)&v183, (uint64_t *)&v176, &v177);
        v93 = (uint64_t *)sub_20C368FF0((uint64_t)&v183, v92);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v93, 6u, (uint64_t *)&v193);
        v191 = v193;
        v192 = v194;
        v187 = v194;
        v188 = v194;
        v189 = v193;
        v190 = v193;
        if ((v186 & 7) != 0)
        {
          v94 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
          do
            v95 = __ldxr(v94);
          while (__stlxr(v95 - 2, v94));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v185);
        sub_20BFD265C(&v184);
        if (*((_QWORD *)&v183 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v183 + 1));
        if (v188 != v190)
        {
          while (1)
          {
            v98 = sub_20C444D70(&v187, v96, v97);
            v99 = v98[3] - 1;
            *(_QWORD *)&v193 = v98[2];
            *((_QWORD *)&v193 + 1) = v99;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193) & 1) == 0)
            {
              v102 = sub_20C444D70(&v187, v100, v101);
              v103 = v102[3] - 1;
              *(_QWORD *)&v183 = v102[2];
              *((_QWORD *)&v183 + 1) = v103;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183) & 1) != 0)
                break;
            }
LABEL_110:
            sub_20C444E44(&v187);
            if (v188 == v190)
              goto LABEL_146;
          }
          v106 = sub_20C444D70(&v187, v104, v105);
          v107 = v106[3] - 1;
          *(_QWORD *)&v193 = v106[2];
          *((_QWORD *)&v193 + 1) = v107;
          v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v108, v91, &v181);
          v111 = sub_20C444D70(&v187, v109, v110);
          v112 = v111[3] - 1;
          *(_QWORD *)&v183 = v111[2];
          *((_QWORD *)&v183 + 1) = v112;
          v113 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183);
          v114 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v113);
          v115 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v114);
          *(_QWORD *)&v193 = v115[1];
          *((_QWORD *)&v193 + 1) = v193;
          *(_QWORD *)&v194 = *v115;
          *((_QWORD *)&v194 + 1) = v194;
          while (1)
          {
            if (*((_QWORD *)&v193 + 1) == *((_QWORD *)&v194 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
              sub_20BFD265C(&v181);
              goto LABEL_110;
            }
            *(_QWORD *)&v183 = sub_20C45A2E0(&v187, v116, v117);
            *((_QWORD *)&v183 + 1) = v118;
            v120 = (uint64_t *)sub_20C22F36C((uint64_t)&v193, v118, v119);
            v121 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v121)
              v121 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v180 = 0;
            sub_20C518A84((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183, v120, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v181, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v121 + 64), &v180);
            if ((v180 & 7) != 0)
            {
              v122 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
              do
                v123 = __ldxr(v122);
              while (__stlxr(v123 - 2, v122));
            }
            if (*((_BYTE *)a6 + 40))
              break;
            sub_20C22F508((uint64_t)&v193);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v182);
          sub_20BFD265C(&v181);
        }
      }
LABEL_146:
      if ((v179 & 7) != 0)
      {
        v144 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      goto LABEL_178;
    }
    goto LABEL_34;
  }
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 56), (v22 & 0x800) != 0))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
      v22 = *(_QWORD *)(v21 + 56);
    }
    v23 = *(_BYTE **)(a2 + 8);
    if ((v22 & 0x4000) == 0)
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, PrimIndex, 1);
        if (v188 == v189)
          goto LABEL_208;
        while (1)
        {
          v175 = 0;
          v125 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v190);
          v193 = v188;
          v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
          v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v127)
            v127 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v193 + 1) = &v175;
          *(_QWORD *)&v194 = &stru_24C51BCE0;
          WORD4(v194) = 0;
          *(_QWORD *)&v193 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v125, v126, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 448), (uint64_t (***)(_QWORD, uint64_t))&v193);
          v129 = v175;
          v130 = HasField && BYTE8(v194) == 0;
          if (v130 && v175 != 0)
          {
            v132 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v132)
              v132 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v129 = v175;
            if ((v175 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v132 & 0xFFFFFFFFFFFFFFF8))
            {
              v183 = v188;
              v133 = (uint64_t *)v190;
              v193 = v188;
              v134 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
              v135 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v135)
                v135 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v193 = 0;
              sub_20C518A84((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v183, v133, v134, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v135 + 448), (uint64_t *)&v193);
              if ((v193 & 7) != 0)
              {
                v136 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
                do
                  v137 = __ldxr(v136);
                while (__stlxr(v137 - 2, v136));
              }
              v129 = v175;
              if (*((_BYTE *)a6 + 40))
                break;
            }
          }
          if ((v129 & 7) != 0)
          {
            v138 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v139 = __ldxr(v138);
            while (__stlxr(v139 - 2, v138));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187);
          if ((_QWORD)v188 == (_QWORD)v189 && *((_QWORD *)&v188 + 1) == *((_QWORD *)&v189 + 1))
            goto LABEL_208;
        }
        if ((v175 & 7) != 0)
        {
          v162 = (unsigned int *)(v175 & 0xFFFFFFFFFFFFFFF8);
          do
            v163 = __ldxr(v162);
          while (__stlxr(v163 - 2, v162));
        }
LABEL_208:
        if (*((_BYTE *)a6 + 40))
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_211;
          goto LABEL_210;
        }
        goto LABEL_213;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
          || (v23[57] & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
        {
LABEL_141:
          v141 = a6;
          v142 = 0;
          goto LABEL_207;
        }
        v152 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, v152, 1);
        if ((_QWORD)v188 == (_QWORD)v189)
        {
          v153 = 1;
          if (*((_QWORD *)&v188 + 1) == *((_QWORD *)&v189 + 1))
          {
LABEL_163:
            v141 = a6;
            v142 = v153;
            goto LABEL_207;
          }
        }
        v153 = 1;
        while (1)
        {
          LODWORD(v183) = 1;
          v164 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v190);
          v193 = v188;
          v165 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
          v166 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v166)
            v166 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v193 + 1) = &v183;
          *(_QWORD *)&v194 = &stru_24C527CB0;
          WORD4(v194) = 0;
          *(_QWORD *)&v193 = &unk_24C539DB8;
          v167 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v164, v165, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v166 + 312), (uint64_t (***)(_QWORD, uint64_t))&v193);
          if (BYTE8(v194))
            v168 = 0;
          else
            v168 = v167;
          if (v168 == 1 && (_DWORD)v183 != 1)
          {
            if (!(_DWORD)v183)
              goto LABEL_141;
            v193 = v188;
            if (!(_QWORD)v188 || *((_QWORD *)&v188 + 1) == -1)
            {
LABEL_206:
              v141 = a6;
              v142 = 2;
LABEL_207:
              sub_20C45A43C(v141, v142);
              goto LABEL_208;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193))
            {
              *(_QWORD *)&v193 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193);
              *((_QWORD *)&v193 + 1) = v169;
              if (!(_QWORD)v193 || v169 == -1)
                goto LABEL_206;
            }
            v153 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187);
          if (v188 == v189)
            goto LABEL_163;
        }
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v146 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, v146, 1);
        *(_QWORD *)&v193 = 0;
        v147 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v147)
          v147 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v183 = 0;
        sub_20C518BCC((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v147 + 208), (uint64_t *)&v183, a5, (uint64_t)&v187, (uint64_t)a6);
        if ((v183 & 7) != 0)
        {
          v148 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFFFF8);
          do
            v149 = __ldxr(v148);
          while (__stlxr(v149 - 2, v148));
        }
        if ((v193 & 7) != 0)
        {
          v150 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v151 = __ldxr(v150);
          while (__stlxr(v151 - 2, v150));
        }
        goto LABEL_208;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8))
      {
        v154 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v187, v154, 1);
        *(_QWORD *)&v193 = 0;
        v155 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v155)
          v155 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v183 = 0;
        sub_20C518BCC((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193, v155, (uint64_t *)&v183, a5, (uint64_t)&v187, (uint64_t)a6);
        if ((v183 & 7) != 0)
        {
          v156 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFFFF8);
          do
            v157 = __ldxr(v156);
          while (__stlxr(v157 - 2, v156));
        }
        if ((v193 & 7) != 0)
        {
          v158 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v159 = __ldxr(v158);
          while (__stlxr(v159 - 2, v158));
        }
        goto LABEL_208;
      }
      goto LABEL_34;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    v30 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v30);
    *(_QWORD *)&v187 = v31;
    *((_QWORD *)&v187 + 1) = v32;
    if (*(_QWORD *)(a1 + 40)
      && (v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v187),
          v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v33),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(_QWORD *)(a1 + 40)))
    {
      v143 = sub_20C518A84((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v187, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (*((_BYTE *)a6 + 40))
      {
LABEL_143:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_211;
        goto LABEL_210;
      }
      v35 = v143;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | sub_20C518A84((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v187, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_213;
    goto LABEL_143;
  }
LABEL_34:
  if (!sub_20C517164(a2, a3, a4, a5, (uint64_t)a6))
    goto LABEL_213;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_211;
LABEL_210:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_211:
  v170 = v174;
  v171 = atomic_load(Instance + 18);
  v172 = v170 >= v171
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v174, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_215:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v174);
  return v172;
}

void sub_20C425548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C4257CC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(_QWORD *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, __int128 *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v10;
  uint64_t v11;
  __int128 v12;
  double *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  char *v21;
  double *v22;
  double Inverse;
  __int128 *v25;
  std::type_info *v26;
  __int128 v27;
  __int128 v28;
  double *v29;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13)))
  {
    *(_QWORD *)&v28 = &stru_24C525430;
    *(_QWORD *)&v27 = &unk_24C53A640;
    *((_QWORD *)&v27 + 1) = a5;
    return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&v27);
  }
  else
  {
    v12 = a5[1];
    v27 = *a5;
    v28 = v12;
    v13 = (double *)*((_QWORD *)a5 + 4);
    v29 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 - 2);
      if (*((_QWORD *)&v28 + 1))
        v14 = (unint64_t *)*((_QWORD *)&v28 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v10);
    v25 = v16;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v27, v17, v18);
    v19 = v29;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v27, v20, v21);
    v22 = &v29[v27];
    while (v19 != v22)
    {
      *v19 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v19);
      ++v19;
    }
    v26 = &stru_24C525430;
    Inverse = COERCE_DOUBLE(&unk_24C53A640);
    v25 = &v27;
    v11 = pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&Inverse);
    sub_20BF5618C((uint64_t)&v27);
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage28_SetEditTargetMappedMetadataINS_7VtArrayINS_11SdfTimeCodeEEEEEbRKNS_9UsdObjectERKNS_7TfTokenESA_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C425984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BOOL8 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15[2];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  v20[2] = &stru_24C524DD8;
  v21 = 0;
  v20[0] = &unk_24C52DA88;
  v20[1] = a6;
  sub_20C4535E0((uint64_t)v15, (uint64_t)v20, a2);
  v11 = sub_20C425A94(a1, a2, a3, a4, a5, v15);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v11;
}

void sub_20C425A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C426C38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C425A94(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t *a6)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v34;
  int v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__ *v47;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  pxrInternal__aapl__pxrReserved__ *v49;
  unint64_t *v50;
  unint64_t v51;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  unsigned int *v54;
  unsigned int v55;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v56;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  uint64_t *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v79;
  _QWORD *Layers;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v86;
  unsigned int *v87;
  unsigned int v88;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v89;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v90;
  uint64_t *v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  pxrInternal__aapl__pxrReserved__::SdfPath *v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t *v111;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v119;
  unsigned int *v120;
  unsigned int v121;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v123;
  pxrInternal__aapl__pxrReserved__::SdfPath *v124;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v125;
  int HasField;
  uint64_t v127;
  BOOL v128;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v130;
  uint64_t *v131;
  pxrInternal__aapl__pxrReserved__::SdfPath *v132;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t *v139;
  int v140;
  int v141;
  unsigned int *v142;
  unsigned int v143;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v144;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v150;
  int v151;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v152;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  _QWORD *v162;
  pxrInternal__aapl__pxrReserved__::SdfPath *v163;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v164;
  int v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _BOOL8 v170;
  unint64_t v172;
  uint64_t v173;
  pxrInternal__aapl__pxrReserved__ *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  __int128 v181;
  int v182;
  int v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v172);
  v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v185);
        v37 = *((_QWORD *)&v185 + 1);
        if (!*((_QWORD *)&v185 + 1) || (*(_BYTE *)(*((_QWORD *)&v185 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v185 + 1), v36);
        v38 = *(unint64_t **)(v37 + 24);
        PrimDefinition = atomic_load(v38 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        v40 = sub_20C398E78(&v185);
        *(_QWORD *)&v191 = 0;
        sub_20C51B374(a6, PrimDefinition, v40, a3, &v191);
        if ((v191 & 7) != 0)
        {
          v41 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
          do
            v42 = __ldxr(v41);
          while (__stlxr(v42 - 2, v41));
        }
        if (!*((_BYTE *)a6 + 40))
        {
          *(_QWORD *)&v191 = 0;
          sub_20C519A54((uint64_t)&v185, a3, (uint64_t *)&v191, a5, (uint64_t)a6);
          if ((v191 & 7) != 0)
          {
            v43 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
            do
              v44 = __ldxr(v43);
            while (__stlxr(v44 - 2, v43));
          }
        }
        if ((BYTE8(v186) & 7) != 0)
        {
          v45 = (unsigned int *)(*((_QWORD *)&v186 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v186 + 1);
        sub_20BFD265C(&v186);
        v47 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v185 + 1);
        if (!*((_QWORD *)&v185 + 1))
        {
LABEL_178:
          if (*((_BYTE *)a6 + 40))
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_209;
            goto LABEL_208;
          }
LABEL_211:
          v170 = 0;
          goto LABEL_213;
        }
LABEL_177:
        sub_20C35C614(v47);
        goto LABEL_178;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v173);
        v49 = v174;
        if (!v174 || (*((_BYTE *)v174 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v174, v48);
        v50 = (unint64_t *)*((_QWORD *)v49 + 3);
        v51 = atomic_load(v50 + 7);
        if (!v51)
          v51 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v50);
        v52 = sub_20C398E78(&v173);
        v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v53)
          v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v185 = 0;
        sub_20C51B374(a6, v51, v52, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v53 + 464), &v185);
        if ((v185 & 7) != 0)
        {
          v54 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
        if (!*((_BYTE *)a6 + 40))
        {
          v56 = sub_20C398E78(&v173);
          sub_20C35C4F8((uint64_t)&v181, (uint64_t *)&v174, &v175);
          v58 = (uint64_t *)sub_20C368FF0((uint64_t)&v181, v57);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v58, 6u, (uint64_t *)&v191);
          v189 = v191;
          v190 = v192;
          v185 = v192;
          v186 = v192;
          v187 = v191;
          v188 = v191;
          if ((v184 & 7) != 0)
          {
            v59 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
            do
              v60 = __ldxr(v59);
            while (__stlxr(v60 - 2, v59));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
          sub_20BFD265C(&v182);
          if (*((_QWORD *)&v181 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v181 + 1));
          if (v186 != v188)
          {
            while (1)
            {
              v63 = sub_20C444D70(&v185, v61, v62);
              v64 = v63[3] - 1;
              *(_QWORD *)&v191 = v63[2];
              *((_QWORD *)&v191 + 1) = v64;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191) & 1) == 0)
              {
                v67 = sub_20C444D70(&v185, v65, v66);
                v68 = v67[3] - 1;
                *(_QWORD *)&v181 = v67[2];
                *((_QWORD *)&v181 + 1) = v68;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181) & 1) != 0)
                  break;
              }
LABEL_88:
              sub_20C444E44(&v185);
              if (v186 == v188)
                goto LABEL_173;
            }
            v71 = sub_20C444D70(&v185, v69, v70);
            v72 = v71[3] - 1;
            *(_QWORD *)&v191 = v71[2];
            *((_QWORD *)&v191 + 1) = v72;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v56, &v179);
            v76 = sub_20C444D70(&v185, v74, v75);
            v77 = v76[3] - 1;
            *(_QWORD *)&v181 = v76[2];
            *((_QWORD *)&v181 + 1) = v77;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181);
            v79 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v79);
            *(_QWORD *)&v191 = Layers[1];
            *((_QWORD *)&v191 + 1) = v191;
            *(_QWORD *)&v192 = *Layers;
            *((_QWORD *)&v192 + 1) = v192;
            while (1)
            {
              if (*((_QWORD *)&v191 + 1) == *((_QWORD *)&v192 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
                sub_20BFD265C(&v179);
                goto LABEL_88;
              }
              *(_QWORD *)&v181 = sub_20C45A2E0(&v185, v81, v82);
              *((_QWORD *)&v181 + 1) = v83;
              v85 = (uint64_t *)sub_20C22F36C((uint64_t)&v191, v83, v84);
              v86 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v86)
                v86 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v178 = 0;
              sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181, v85, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v179, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v86 + 464), &v178);
              if ((v178 & 7) != 0)
              {
                v87 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
                do
                  v88 = __ldxr(v87);
                while (__stlxr(v88 - 2, v87));
              }
              if (*((_BYTE *)a6 + 40))
                break;
              sub_20C22F508((uint64_t)&v191);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
            sub_20BFD265C(&v179);
          }
        }
LABEL_173:
        if ((v177 & 7) != 0)
        {
          v158 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
          do
            v159 = __ldxr(v158);
          while (__stlxr(v159 - 2, v158));
        }
LABEL_176:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v176);
        sub_20BFD265C(&v175);
        v47 = v174;
        if (!v174)
          goto LABEL_178;
        goto LABEL_177;
      }
    }
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v173);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v173, (uint64_t)&v185);
      v18 = *((_QWORD *)&v185 + 1);
      if ((v185 & 7) != 0)
      {
        v19 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v18)
      {
        LOBYTE(v185) = 0;
        sub_20C45A3D8(*a6, &v185);
        *((_BYTE *)a6 + 40) = 1;
      }
      else
      {
        v89 = sub_20C398E78(&v173);
        sub_20C35C4F8((uint64_t)&v181, (uint64_t *)&v174, &v175);
        v91 = (uint64_t *)sub_20C368FF0((uint64_t)&v181, v90);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v91, 6u, (uint64_t *)&v191);
        v189 = v191;
        v190 = v192;
        v185 = v192;
        v186 = v192;
        v187 = v191;
        v188 = v191;
        if ((v184 & 7) != 0)
        {
          v92 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v93 = __ldxr(v92);
          while (__stlxr(v93 - 2, v92));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
        sub_20BFD265C(&v182);
        if (*((_QWORD *)&v181 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v181 + 1));
        if (v186 != v188)
        {
          while (1)
          {
            v96 = sub_20C444D70(&v185, v94, v95);
            v97 = v96[3] - 1;
            *(_QWORD *)&v191 = v96[2];
            *((_QWORD *)&v191 + 1) = v97;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191) & 1) == 0)
            {
              v100 = sub_20C444D70(&v185, v98, v99);
              v101 = v100[3] - 1;
              *(_QWORD *)&v181 = v100[2];
              *((_QWORD *)&v181 + 1) = v101;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181) & 1) != 0)
                break;
            }
LABEL_108:
            sub_20C444E44(&v185);
            if (v186 == v188)
              goto LABEL_144;
          }
          v104 = sub_20C444D70(&v185, v102, v103);
          v105 = v104[3] - 1;
          *(_QWORD *)&v191 = v104[2];
          *((_QWORD *)&v191 + 1) = v105;
          v106 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v106, v89, &v179);
          v109 = sub_20C444D70(&v185, v107, v108);
          v110 = v109[3] - 1;
          *(_QWORD *)&v181 = v109[2];
          *((_QWORD *)&v181 + 1) = v110;
          v111 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181);
          v112 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v111);
          v113 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v112);
          *(_QWORD *)&v191 = v113[1];
          *((_QWORD *)&v191 + 1) = v191;
          *(_QWORD *)&v192 = *v113;
          *((_QWORD *)&v192 + 1) = v192;
          while (1)
          {
            if (*((_QWORD *)&v191 + 1) == *((_QWORD *)&v192 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
              sub_20BFD265C(&v179);
              goto LABEL_108;
            }
            *(_QWORD *)&v181 = sub_20C45A2E0(&v185, v114, v115);
            *((_QWORD *)&v181 + 1) = v116;
            v118 = (uint64_t *)sub_20C22F36C((uint64_t)&v191, v116, v117);
            v119 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v119)
              v119 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v178 = 0;
            sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181, v118, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v179, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v119 + 64), &v178);
            if ((v178 & 7) != 0)
            {
              v120 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
              do
                v121 = __ldxr(v120);
              while (__stlxr(v121 - 2, v120));
            }
            if (*((_BYTE *)a6 + 40))
              break;
            sub_20C22F508((uint64_t)&v191);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
          sub_20BFD265C(&v179);
        }
      }
LABEL_144:
      if ((v177 & 7) != 0)
      {
        v142 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      goto LABEL_176;
    }
    goto LABEL_34;
  }
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 56), (v22 & 0x800) != 0))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
      v22 = *(_QWORD *)(v21 + 56);
    }
    v23 = *(_BYTE **)(a2 + 8);
    if ((v22 & 0x4000) == 0)
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, PrimIndex, 1);
        if (v186 == v187)
          goto LABEL_206;
        while (1)
        {
          v173 = 0;
          v123 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v188);
          v191 = v186;
          v124 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
          v125 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v125)
            v125 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v191 + 1) = &v173;
          *(_QWORD *)&v192 = &stru_24C51BCE0;
          WORD4(v192) = 0;
          *(_QWORD *)&v191 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v123, v124, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v125 + 448), (uint64_t (***)(_QWORD, uint64_t))&v191);
          v127 = v173;
          v128 = HasField && BYTE8(v192) == 0;
          if (v128 && v173 != 0)
          {
            v130 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v130)
              v130 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v127 = v173;
            if ((v173 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v130 & 0xFFFFFFFFFFFFFFF8))
            {
              v181 = v186;
              v131 = (uint64_t *)v188;
              v191 = v186;
              v132 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
              v133 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v133)
                v133 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v191 = 0;
              sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181, v131, v132, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v133 + 448), (uint64_t *)&v191);
              if ((v191 & 7) != 0)
              {
                v134 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
                do
                  v135 = __ldxr(v134);
                while (__stlxr(v135 - 2, v134));
              }
              v127 = v173;
              if (*((_BYTE *)a6 + 40))
                break;
            }
          }
          if ((v127 & 7) != 0)
          {
            v136 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFFFF8);
            do
              v137 = __ldxr(v136);
            while (__stlxr(v137 - 2, v136));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185);
          if ((_QWORD)v186 == (_QWORD)v187 && *((_QWORD *)&v186 + 1) == *((_QWORD *)&v187 + 1))
            goto LABEL_206;
        }
        if ((v173 & 7) != 0)
        {
          v160 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
          do
            v161 = __ldxr(v160);
          while (__stlxr(v161 - 2, v160));
        }
LABEL_206:
        if (*((_BYTE *)a6 + 40))
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_209;
          goto LABEL_208;
        }
        goto LABEL_211;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
          || (v23[57] & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
        {
LABEL_139:
          v139 = a6;
          v140 = 0;
          goto LABEL_205;
        }
        v150 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, v150, 1);
        if ((_QWORD)v186 == (_QWORD)v187)
        {
          v151 = 1;
          if (*((_QWORD *)&v186 + 1) == *((_QWORD *)&v187 + 1))
          {
LABEL_161:
            v139 = a6;
            v140 = v151;
            goto LABEL_205;
          }
        }
        v151 = 1;
        while (1)
        {
          LODWORD(v181) = 1;
          v162 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v188);
          v191 = v186;
          v163 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
          v164 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v164)
            v164 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v191 + 1) = &v181;
          *(_QWORD *)&v192 = &stru_24C527CB0;
          WORD4(v192) = 0;
          *(_QWORD *)&v191 = &unk_24C539DB8;
          v165 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v162, v163, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v164 + 312), (uint64_t (***)(_QWORD, uint64_t))&v191);
          if (BYTE8(v192))
            v166 = 0;
          else
            v166 = v165;
          if (v166 == 1 && (_DWORD)v181 != 1)
          {
            if (!(_DWORD)v181)
              goto LABEL_139;
            v191 = v186;
            if (!(_QWORD)v186 || *((_QWORD *)&v186 + 1) == -1)
            {
LABEL_204:
              v139 = a6;
              v140 = 2;
LABEL_205:
              sub_20C45A43C(v139, v140);
              goto LABEL_206;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191))
            {
              *(_QWORD *)&v191 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
              *((_QWORD *)&v191 + 1) = v167;
              if (!(_QWORD)v191 || v167 == -1)
                goto LABEL_204;
            }
            v151 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185);
          if (v186 == v187)
            goto LABEL_161;
        }
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v144 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, v144, 1);
        *(_QWORD *)&v191 = 0;
        v145 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v145)
          v145 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v181 = 0;
        sub_20C51C214((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v191, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v145 + 208), (uint64_t *)&v181, a5, (uint64_t)&v185, (uint64_t)a6);
        if ((v181 & 7) != 0)
        {
          v146 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
          do
            v147 = __ldxr(v146);
          while (__stlxr(v147 - 2, v146));
        }
        if ((v191 & 7) != 0)
        {
          v148 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
          do
            v149 = __ldxr(v148);
          while (__stlxr(v149 - 2, v148));
        }
        goto LABEL_206;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8))
      {
        v152 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, v152, 1);
        *(_QWORD *)&v191 = 0;
        v153 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v153)
          v153 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v181 = 0;
        sub_20C51C214((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v191, v153, (uint64_t *)&v181, a5, (uint64_t)&v185, (uint64_t)a6);
        if ((v181 & 7) != 0)
        {
          v154 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
          do
            v155 = __ldxr(v154);
          while (__stlxr(v155 - 2, v154));
        }
        if ((v191 & 7) != 0)
        {
          v156 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
          do
            v157 = __ldxr(v156);
          while (__stlxr(v157 - 2, v156));
        }
        goto LABEL_206;
      }
      goto LABEL_34;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    v30 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v30);
    *(_QWORD *)&v185 = v31;
    *((_QWORD *)&v185 + 1) = v32;
    if (*(_QWORD *)(a1 + 40)
      && (v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v185),
          v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v33),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(_QWORD *)(a1 + 40)))
    {
      v141 = sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v185, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (*((_BYTE *)a6 + 40))
      {
LABEL_141:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_209;
        goto LABEL_208;
      }
      v35 = v141;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v185, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_211;
    goto LABEL_141;
  }
LABEL_34:
  if (!sub_20C519A54(a2, a3, a4, a5, (uint64_t)a6))
    goto LABEL_211;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_209;
LABEL_208:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_209:
  v168 = v172;
  v169 = atomic_load(Instance + 18);
  v170 = v168 >= v169
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v172, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_213:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v172);
  return v170;
}

void sub_20C4269B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C426C38(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  std::type_info *v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  char v27;
  void *v28[3];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  void **v33;

  sub_20C35C4F8((uint64_t)&v14, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C348EEC((uint64_t)&v14, &v19);
  sub_20C193954(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource((uint64_t)(a1 + 8), &v21, 0, 0, (uint64_t)v28);
  if (v27 < 0)
    operator delete(__p);
  v33 = (void **)&v25;
  sub_20C00E25C(&v33);
  v33 = (void **)&v24;
  sub_20C00D5A8(&v33);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_20BFD265C(&v19);
  if ((v18 & 7) != 0)
  {
    v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  v23 = &stru_24C524DD8;
  v21 = &unk_24C53A988;
  v22 = v28;
  v12 = pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, (int *)a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&v21);
  if (v32 < 0)
    operator delete(v31);
  v21 = &v30;
  sub_20C00E25C((void ***)&v21);
  v21 = &v29;
  sub_20C00D5A8((void ***)&v21);
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  return v12;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage28_SetEditTargetMappedMetadataINS_17SdfPathExpressionEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C426E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  a14 = &a35;
  sub_20C00E25C((void ***)&a14);
  a14 = &a32;
  sub_20C00D5A8((void ***)&a14);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  _BOOL8 v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15[2];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  __int16 v21;

  v20[2] = &stru_24C524DE8;
  v21 = 0;
  v20[0] = &unk_24C52DAC0;
  v20[1] = a6;
  sub_20C4535E0((uint64_t)v15, (uint64_t)v20, a2);
  v11 = sub_20C42703C(a1, a2, a3, a4, a5, v15);
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v11;
}

void sub_20C427028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C4281E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C42703C(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t *a6)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v27;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v34;
  int v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__ *v47;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  pxrInternal__aapl__pxrReserved__ *v49;
  unint64_t *v50;
  unint64_t v51;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v53;
  unsigned int *v54;
  unsigned int v55;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v56;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  uint64_t *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v79;
  _QWORD *Layers;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v86;
  unsigned int *v87;
  unsigned int v88;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v89;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v90;
  uint64_t *v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  pxrInternal__aapl__pxrReserved__::SdfPath *v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t *v111;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v119;
  unsigned int *v120;
  unsigned int v121;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v123;
  pxrInternal__aapl__pxrReserved__::SdfPath *v124;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v125;
  int HasField;
  uint64_t v127;
  BOOL v128;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v130;
  uint64_t *v131;
  pxrInternal__aapl__pxrReserved__::SdfPath *v132;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t *v139;
  int v140;
  int v141;
  unsigned int *v142;
  unsigned int v143;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v144;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v150;
  int v151;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v152;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  _QWORD *v162;
  pxrInternal__aapl__pxrReserved__::SdfPath *v163;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v164;
  int v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _BOOL8 v170;
  unint64_t v172;
  uint64_t v173;
  pxrInternal__aapl__pxrReserved__ *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  __int128 v181;
  int v182;
  int v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;

  v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v172);
  v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v185);
        v37 = *((_QWORD *)&v185 + 1);
        if (!*((_QWORD *)&v185 + 1) || (*(_BYTE *)(*((_QWORD *)&v185 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v185 + 1), v36);
        v38 = *(unint64_t **)(v37 + 24);
        PrimDefinition = atomic_load(v38 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        v40 = sub_20C398E78(&v185);
        *(_QWORD *)&v191 = 0;
        sub_20C51B374(a6, PrimDefinition, v40, a3, &v191);
        if ((v191 & 7) != 0)
        {
          v41 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
          do
            v42 = __ldxr(v41);
          while (__stlxr(v42 - 2, v41));
        }
        if (!*((_BYTE *)a6 + 40))
        {
          *(_QWORD *)&v191 = 0;
          sub_20C51D098((uint64_t)&v185, a3, (uint64_t *)&v191, a5, (uint64_t)a6);
          if ((v191 & 7) != 0)
          {
            v43 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
            do
              v44 = __ldxr(v43);
            while (__stlxr(v44 - 2, v43));
          }
        }
        if ((BYTE8(v186) & 7) != 0)
        {
          v45 = (unsigned int *)(*((_QWORD *)&v186 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v186 + 1);
        sub_20BFD265C(&v186);
        v47 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v185 + 1);
        if (!*((_QWORD *)&v185 + 1))
        {
LABEL_178:
          if (*((_BYTE *)a6 + 40))
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_209;
            goto LABEL_208;
          }
LABEL_211:
          v170 = 0;
          goto LABEL_213;
        }
LABEL_177:
        sub_20C35C614(v47);
        goto LABEL_178;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16)
        v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v173);
        v49 = v174;
        if (!v174 || (*((_BYTE *)v174 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v174, v48);
        v50 = (unint64_t *)*((_QWORD *)v49 + 3);
        v51 = atomic_load(v50 + 7);
        if (!v51)
          v51 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v50);
        v52 = sub_20C398E78(&v173);
        v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v53)
          v53 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v185 = 0;
        sub_20C51B374(a6, v51, v52, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v53 + 464), &v185);
        if ((v185 & 7) != 0)
        {
          v54 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
        if (!*((_BYTE *)a6 + 40))
        {
          v56 = sub_20C398E78(&v173);
          sub_20C35C4F8((uint64_t)&v181, (uint64_t *)&v174, &v175);
          v58 = (uint64_t *)sub_20C368FF0((uint64_t)&v181, v57);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v58, 6u, (uint64_t *)&v191);
          v189 = v191;
          v190 = v192;
          v185 = v192;
          v186 = v192;
          v187 = v191;
          v188 = v191;
          if ((v184 & 7) != 0)
          {
            v59 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
            do
              v60 = __ldxr(v59);
            while (__stlxr(v60 - 2, v59));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
          sub_20BFD265C(&v182);
          if (*((_QWORD *)&v181 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v181 + 1));
          if (v186 != v188)
          {
            while (1)
            {
              v63 = sub_20C444D70(&v185, v61, v62);
              v64 = v63[3] - 1;
              *(_QWORD *)&v191 = v63[2];
              *((_QWORD *)&v191 + 1) = v64;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191) & 1) == 0)
              {
                v67 = sub_20C444D70(&v185, v65, v66);
                v68 = v67[3] - 1;
                *(_QWORD *)&v181 = v67[2];
                *((_QWORD *)&v181 + 1) = v68;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181) & 1) != 0)
                  break;
              }
LABEL_88:
              sub_20C444E44(&v185);
              if (v186 == v188)
                goto LABEL_173;
            }
            v71 = sub_20C444D70(&v185, v69, v70);
            v72 = v71[3] - 1;
            *(_QWORD *)&v191 = v71[2];
            *((_QWORD *)&v191 + 1) = v72;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v56, &v179);
            v76 = sub_20C444D70(&v185, v74, v75);
            v77 = v76[3] - 1;
            *(_QWORD *)&v181 = v76[2];
            *((_QWORD *)&v181 + 1) = v77;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181);
            v79 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v79);
            *(_QWORD *)&v191 = Layers[1];
            *((_QWORD *)&v191 + 1) = v191;
            *(_QWORD *)&v192 = *Layers;
            *((_QWORD *)&v192 + 1) = v192;
            while (1)
            {
              if (*((_QWORD *)&v191 + 1) == *((_QWORD *)&v192 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
                sub_20BFD265C(&v179);
                goto LABEL_88;
              }
              *(_QWORD *)&v181 = sub_20C45A2E0(&v185, v81, v82);
              *((_QWORD *)&v181 + 1) = v83;
              v85 = (uint64_t *)sub_20C22F36C((uint64_t)&v191, v83, v84);
              v86 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v86)
                v86 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v178 = 0;
              sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181, v85, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v179, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v86 + 464), &v178);
              if ((v178 & 7) != 0)
              {
                v87 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
                do
                  v88 = __ldxr(v87);
                while (__stlxr(v88 - 2, v87));
              }
              if (*((_BYTE *)a6 + 40))
                break;
              sub_20C22F508((uint64_t)&v191);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
            sub_20BFD265C(&v179);
          }
        }
LABEL_173:
        if ((v177 & 7) != 0)
        {
          v158 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
          do
            v159 = __ldxr(v158);
          while (__stlxr(v159 - 2, v158));
        }
LABEL_176:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v176);
        sub_20BFD265C(&v175);
        v47 = v174;
        if (!v174)
          goto LABEL_178;
        goto LABEL_177;
      }
    }
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17)
      v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v173);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v173, (uint64_t)&v185);
      v18 = *((_QWORD *)&v185 + 1);
      if ((v185 & 7) != 0)
      {
        v19 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if (v18)
      {
        LOBYTE(v185) = 0;
        sub_20C45A3D8(*a6, &v185);
        *((_BYTE *)a6 + 40) = 1;
      }
      else
      {
        v89 = sub_20C398E78(&v173);
        sub_20C35C4F8((uint64_t)&v181, (uint64_t *)&v174, &v175);
        v91 = (uint64_t *)sub_20C368FF0((uint64_t)&v181, v90);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v91, 6u, (uint64_t *)&v191);
        v189 = v191;
        v190 = v192;
        v185 = v192;
        v186 = v192;
        v187 = v191;
        v188 = v191;
        if ((v184 & 7) != 0)
        {
          v92 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v93 = __ldxr(v92);
          while (__stlxr(v93 - 2, v92));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
        sub_20BFD265C(&v182);
        if (*((_QWORD *)&v181 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v181 + 1));
        if (v186 != v188)
        {
          while (1)
          {
            v96 = sub_20C444D70(&v185, v94, v95);
            v97 = v96[3] - 1;
            *(_QWORD *)&v191 = v96[2];
            *((_QWORD *)&v191 + 1) = v97;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191) & 1) == 0)
            {
              v100 = sub_20C444D70(&v185, v98, v99);
              v101 = v100[3] - 1;
              *(_QWORD *)&v181 = v100[2];
              *((_QWORD *)&v181 + 1) = v101;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181) & 1) != 0)
                break;
            }
LABEL_108:
            sub_20C444E44(&v185);
            if (v186 == v188)
              goto LABEL_144;
          }
          v104 = sub_20C444D70(&v185, v102, v103);
          v105 = v104[3] - 1;
          *(_QWORD *)&v191 = v104[2];
          *((_QWORD *)&v191 + 1) = v105;
          v106 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v106, v89, &v179);
          v109 = sub_20C444D70(&v185, v107, v108);
          v110 = v109[3] - 1;
          *(_QWORD *)&v181 = v109[2];
          *((_QWORD *)&v181 + 1) = v110;
          v111 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181);
          v112 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v111);
          v113 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v112);
          *(_QWORD *)&v191 = v113[1];
          *((_QWORD *)&v191 + 1) = v191;
          *(_QWORD *)&v192 = *v113;
          *((_QWORD *)&v192 + 1) = v192;
          while (1)
          {
            if (*((_QWORD *)&v191 + 1) == *((_QWORD *)&v192 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
              sub_20BFD265C(&v179);
              goto LABEL_108;
            }
            *(_QWORD *)&v181 = sub_20C45A2E0(&v185, v114, v115);
            *((_QWORD *)&v181 + 1) = v116;
            v118 = (uint64_t *)sub_20C22F36C((uint64_t)&v191, v116, v117);
            v119 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v119)
              v119 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v178 = 0;
            sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181, v118, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v179, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v119 + 64), &v178);
            if ((v178 & 7) != 0)
            {
              v120 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
              do
                v121 = __ldxr(v120);
              while (__stlxr(v121 - 2, v120));
            }
            if (*((_BYTE *)a6 + 40))
              break;
            sub_20C22F508((uint64_t)&v191);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
          sub_20BFD265C(&v179);
        }
      }
LABEL_144:
      if ((v177 & 7) != 0)
      {
        v142 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      goto LABEL_176;
    }
    goto LABEL_34;
  }
  if (v14 == 1)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 56), (v22 & 0x800) != 0))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
      v22 = *(_QWORD *)(v21 + 56);
    }
    v23 = *(_BYTE **)(a2 + 8);
    if ((v22 & 0x4000) == 0)
    {
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, PrimIndex, 1);
        if (v186 == v187)
          goto LABEL_206;
        while (1)
        {
          v173 = 0;
          v123 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v188);
          v191 = v186;
          v124 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
          v125 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v125)
            v125 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v191 + 1) = &v173;
          *(_QWORD *)&v192 = &stru_24C51BCE0;
          WORD4(v192) = 0;
          *(_QWORD *)&v191 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v123, v124, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v125 + 448), (uint64_t (***)(_QWORD, uint64_t))&v191);
          v127 = v173;
          v128 = HasField && BYTE8(v192) == 0;
          if (v128 && v173 != 0)
          {
            v130 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v130)
              v130 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v127 = v173;
            if ((v173 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v130 & 0xFFFFFFFFFFFFFFF8))
            {
              v181 = v186;
              v131 = (uint64_t *)v188;
              v191 = v186;
              v132 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
              v133 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v133)
                v133 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v191 = 0;
              sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v181, v131, v132, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v133 + 448), (uint64_t *)&v191);
              if ((v191 & 7) != 0)
              {
                v134 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
                do
                  v135 = __ldxr(v134);
                while (__stlxr(v135 - 2, v134));
              }
              v127 = v173;
              if (*((_BYTE *)a6 + 40))
                break;
            }
          }
          if ((v127 & 7) != 0)
          {
            v136 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFFFF8);
            do
              v137 = __ldxr(v136);
            while (__stlxr(v137 - 2, v136));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185);
          if ((_QWORD)v186 == (_QWORD)v187 && *((_QWORD *)&v186 + 1) == *((_QWORD *)&v187 + 1))
            goto LABEL_206;
        }
        if ((v173 & 7) != 0)
        {
          v160 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
          do
            v161 = __ldxr(v160);
          while (__stlxr(v161 - 2, v160));
        }
LABEL_206:
        if (*((_BYTE *)a6 + 40))
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_209;
          goto LABEL_208;
        }
        goto LABEL_211;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
          || (v23[57] & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
        {
LABEL_139:
          v139 = a6;
          v140 = 0;
          goto LABEL_205;
        }
        v150 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, v150, 1);
        if ((_QWORD)v186 == (_QWORD)v187)
        {
          v151 = 1;
          if (*((_QWORD *)&v186 + 1) == *((_QWORD *)&v187 + 1))
          {
LABEL_161:
            v139 = a6;
            v140 = v151;
            goto LABEL_205;
          }
        }
        v151 = 1;
        while (1)
        {
          LODWORD(v181) = 1;
          v162 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v188);
          v191 = v186;
          v163 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
          v164 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v164)
            v164 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v191 + 1) = &v181;
          *(_QWORD *)&v192 = &stru_24C527CB0;
          WORD4(v192) = 0;
          *(_QWORD *)&v191 = &unk_24C539DB8;
          v165 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v162, v163, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v164 + 312), (uint64_t (***)(_QWORD, uint64_t))&v191);
          if (BYTE8(v192))
            v166 = 0;
          else
            v166 = v165;
          if (v166 == 1 && (_DWORD)v181 != 1)
          {
            if (!(_DWORD)v181)
              goto LABEL_139;
            v191 = v186;
            if (!(_QWORD)v186 || *((_QWORD *)&v186 + 1) == -1)
            {
LABEL_204:
              v139 = a6;
              v140 = 2;
LABEL_205:
              sub_20C45A43C(v139, v140);
              goto LABEL_206;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191))
            {
              *(_QWORD *)&v191 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v191);
              *((_QWORD *)&v191 + 1) = v167;
              if (!(_QWORD)v191 || v167 == -1)
                goto LABEL_204;
            }
            v151 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185);
          if (v186 == v187)
            goto LABEL_161;
        }
      }
      v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26)
        v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v144 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, v144, 1);
        *(_QWORD *)&v191 = 0;
        v145 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v145)
          v145 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v181 = 0;
        sub_20C51E9B8((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v191, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v145 + 208), (uint64_t *)&v181, a5, (uint64_t)&v185, (uint64_t)a6);
        if ((v181 & 7) != 0)
        {
          v146 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
          do
            v147 = __ldxr(v146);
          while (__stlxr(v147 - 2, v146));
        }
        if ((v191 & 7) != 0)
        {
          v148 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
          do
            v149 = __ldxr(v148);
          while (__stlxr(v149 - 2, v148));
        }
        goto LABEL_206;
      }
      v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27)
        v27 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8))
      {
        v152 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v185, v152, 1);
        *(_QWORD *)&v191 = 0;
        v153 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v153)
          v153 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v181 = 0;
        sub_20C51E9B8((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v191, v153, (uint64_t *)&v181, a5, (uint64_t)&v185, (uint64_t)a6);
        if ((v181 & 7) != 0)
        {
          v154 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
          do
            v155 = __ldxr(v154);
          while (__stlxr(v155 - 2, v154));
        }
        if ((v191 & 7) != 0)
        {
          v156 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
          do
            v157 = __ldxr(v156);
          while (__stlxr(v157 - 2, v156));
        }
        goto LABEL_206;
      }
      goto LABEL_34;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    v30 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v30);
    *(_QWORD *)&v185 = v31;
    *((_QWORD *)&v185 + 1) = v32;
    if (*(_QWORD *)(a1 + 40)
      && (v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v185),
          v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v33),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(_QWORD *)(a1 + 40)))
    {
      v141 = sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v185, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (*((_BYTE *)a6 + 40))
      {
LABEL_141:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_209;
        goto LABEL_208;
      }
      v35 = v141;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | sub_20C51B838(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v185, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_211;
    goto LABEL_141;
  }
LABEL_34:
  if (!sub_20C51D098(a2, a3, a4, a5, (uint64_t)a6))
    goto LABEL_211;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_209;
LABEL_208:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_209:
  v168 = v172;
  v169 = atomic_load(Instance + 18);
  v170 = v168 >= v169
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v172, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_213:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v172);
  return v170;
}

void sub_20C427F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C4281E0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, __int128 *a5)
{
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t i;
  void *v18;
  void **v19;
  __int128 v20;
  uint64_t v21;
  void *v26[3];
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  void *__p[2];
  std::type_info *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  void **v44[2];

  v6 = a5[1];
  v41 = *a5;
  v42 = v6;
  v7 = *((_QWORD *)a5 + 4);
  v43 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v42 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v42 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20C35C4F8((uint64_t)__p, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C348EEC((uint64_t)__p, &v39);
  if ((v33 & 7) != 0)
  {
    v10 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41, v12, v13);
  v14 = v43;
  sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41, v15, v16);
  for (i = v43 + 96 * v41; v14 != i; v14 += 96)
  {
    sub_20C193954(v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (uint64_t)v26);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource((uint64_t)(a1 + 8), v26, 0, 0, (uint64_t)__p);
    v18 = *(void **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)(v14 + 8) = v18;
      operator delete(v18);
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
    }
    *(_OWORD *)v14 = *(_OWORD *)__p;
    *(_QWORD *)(v14 + 16) = v32;
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    sub_20C00BC18((void **)(v14 + 24));
    *(_OWORD *)(v14 + 24) = v33;
    *(_QWORD *)(v14 + 40) = v34;
    v33 = 0uLL;
    v34 = 0;
    sub_20C00BCC0((void **)(v14 + 48));
    *(_OWORD *)(v14 + 48) = v35;
    *(_QWORD *)(v14 + 64) = v36;
    v35 = 0uLL;
    v36 = 0;
    v19 = (void **)(v14 + 72);
    if (*(char *)(v14 + 95) < 0)
      operator delete(*v19);
    v20 = v37;
    *(_QWORD *)(v14 + 88) = v38;
    *(_OWORD *)v19 = v20;
    HIBYTE(v38) = 0;
    LOBYTE(v37) = 0;
    v44[0] = (void **)&v35;
    sub_20C00E25C(v44);
    v44[0] = (void **)&v33;
    sub_20C00D5A8(v44);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v30 < 0)
      operator delete(v29);
    v44[0] = (void **)&v28;
    sub_20C00E25C(v44);
    v44[0] = (void **)&v27;
    sub_20C00D5A8(v44);
    if (v26[0])
    {
      v26[1] = v26[0];
      operator delete(v26[0]);
    }
  }
  v32 = &stru_24C524DE8;
  __p[0] = &unk_24C53A9C0;
  __p[1] = &v41;
  v21 = pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, (int *)a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
  sub_20BFD265C(&v39);
  sub_20C00E910(&v41);
  return v21;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage28_SetEditTargetMappedMetadataINS_7VtArrayINS_17SdfPathExpressionEEEEEbRKNS_9UsdObjectERKNS_7TfTokenESA_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C4284FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v31 - 148));
  sub_20BFD265C((_DWORD *)(v31 - 152));
  sub_20C00E910((_QWORD *)(v31 - 144));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<std::map<double,pxrInternal__aapl__pxrReserved__::VtValue>>(_QWORD *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, _QWORD *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v10;
  uint64_t v11;
  uint64_t (***v12)(_QWORD, uint64_t);
  double Inverse;
  uint64_t (***v15)(_QWORD, uint64_t);
  std::type_info *v16;
  uint64_t (**v17)(_QWORD, uint64_t);
  _QWORD *v18;
  std::type_info *v19;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13)))
  {
    v19 = &stru_24C524D90;
    v17 = (uint64_t (**)(_QWORD, uint64_t))&unk_24C53B980;
    v18 = a5;
    return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, &v17);
  }
  else
  {
    sub_20BFECEF8((uint64_t *)&v17, (uint64_t)a5);
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v10);
    v15 = v12;
    sub_20C35BB00((uint64_t)&v17, &Inverse);
    v16 = &stru_24C524D90;
    Inverse = COERCE_DOUBLE(&unk_24C53B980);
    v15 = &v17;
    v11 = pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&Inverse);
    sub_20BFED2B4((uint64_t)&v17, v18);
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage28_SetEditTargetMappedMetadataINSt3__13mapIdNS_7VtValueENS2_4lessIdEENS2_9allocatorINS2_4pairIKdS4_EEEEEEEEbRKNS_9UsdObjectERKNS_7TfTokenESI_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C4286D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20BFED2B4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  unint64_t *Instance;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v32;
  int v33;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t PrimDefinition;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  pxrInternal__aapl__pxrReserved__ *v45;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  pxrInternal__aapl__pxrReserved__ *v47;
  unint64_t *v48;
  unint64_t v49;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v50;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v51;
  unsigned int *v52;
  unsigned int v53;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v54;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v55;
  uint64_t *v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *LayerStack;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v77;
  _QWORD *Layers;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v87;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v88;
  uint64_t *v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  pxrInternal__aapl__pxrReserved__::SdfPath *v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v117;
  unsigned int *v118;
  unsigned int v119;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *PrimIndex;
  _QWORD *v121;
  pxrInternal__aapl__pxrReserved__::SdfPath *v122;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v123;
  int HasField;
  uint64_t v125;
  BOOL v126;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v128;
  uint64_t v129;
  uint64_t *v130;
  pxrInternal__aapl__pxrReserved__::SdfPath *v131;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v138;
  int v139;
  unsigned int *v140;
  unsigned int v141;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v142;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v148;
  int v149;
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v150;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  _QWORD *v160;
  pxrInternal__aapl__pxrReserved__::SdfPath *v161;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v162;
  int v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _BOOL8 v168;
  unsigned int *v169;
  unsigned int v170;
  uint64_t v172[2];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v173;
  int v174;
  int v175;
  uint64_t v176;
  char v177;
  _QWORD v178[3];
  __int16 v179;
  unint64_t v180;
  uint64_t v181;
  pxrInternal__aapl__pxrReserved__ *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  __int128 v189;
  int v190;
  int v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;

  v178[2] = &stru_24C51D8B8;
  v179 = 0;
  v178[0] = &unk_24C52E698;
  v178[1] = a6;
  sub_20C4535E0((uint64_t)v172, (uint64_t)v178, a2);
  v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v180);
  v13 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v13 == 3)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14)
        v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v193);
        v35 = *((_QWORD *)&v193 + 1);
        if (!*((_QWORD *)&v193 + 1) || (*(_BYTE *)(*((_QWORD *)&v193 + 1) + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v193 + 1), v34);
        v36 = *(unint64_t **)(v35 + 24);
        PrimDefinition = atomic_load(v36 + 7);
        if (!PrimDefinition)
          PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        v38 = sub_20C398E78(&v193);
        *(_QWORD *)&v199 = 0;
        sub_20C521290(v172, PrimDefinition, v38, a3, &v199);
        if ((v199 & 7) != 0)
        {
          v39 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        if (!v177)
        {
          *(_QWORD *)&v199 = 0;
          sub_20C51F970((uint64_t)&v193, a3, (uint64_t *)&v199, a5, v172);
          if ((v199 & 7) != 0)
          {
            v41 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFFFF8);
            do
              v42 = __ldxr(v41);
            while (__stlxr(v42 - 2, v41));
          }
        }
        if ((BYTE8(v194) & 7) != 0)
        {
          v43 = (unsigned int *)(*((_QWORD *)&v194 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v194 + 1);
        sub_20BFD265C(&v194);
        v45 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v193 + 1);
        if (!*((_QWORD *)&v193 + 1))
        {
LABEL_180:
          if (v177)
          {
            Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (Instance)
              goto LABEL_212;
            goto LABEL_211;
          }
LABEL_214:
          v168 = 0;
          goto LABEL_216;
        }
LABEL_179:
        sub_20C35C614(v45);
        goto LABEL_180;
      }
      v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15)
        v15 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C3AD760(a2, (uint64_t)&v181);
        v47 = v182;
        if (!v182 || (*((_BYTE *)v182 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v182, v46);
        v48 = (unint64_t *)*((_QWORD *)v47 + 3);
        v49 = atomic_load(v48 + 7);
        if (!v49)
          v49 = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v48);
        v50 = sub_20C398E78(&v181);
        v51 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v51)
          v51 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v193 = 0;
        sub_20C521290(v172, v49, v50, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v51 + 464), &v193);
        if ((v193 & 7) != 0)
        {
          v52 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
          do
            v53 = __ldxr(v52);
          while (__stlxr(v53 - 2, v52));
        }
        if (!v177)
        {
          v54 = sub_20C398E78(&v181);
          sub_20C35C4F8((uint64_t)&v189, (uint64_t *)&v182, &v183);
          v56 = (uint64_t *)sub_20C368FF0((uint64_t)&v189, v55);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v56, 6u, (uint64_t *)&v199);
          v197 = v199;
          v198 = v200;
          v193 = v200;
          v194 = v200;
          v195 = v199;
          v196 = v199;
          if ((v192 & 7) != 0)
          {
            v57 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
            do
              v58 = __ldxr(v57);
            while (__stlxr(v58 - 2, v57));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v191);
          sub_20BFD265C(&v190);
          if (*((_QWORD *)&v189 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v189 + 1));
          if (v194 != v196)
          {
            while (1)
            {
              v61 = sub_20C444D70(&v193, v59, v60);
              v62 = v61[3] - 1;
              *(_QWORD *)&v199 = v61[2];
              *((_QWORD *)&v199 + 1) = v62;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199) & 1) == 0)
              {
                v65 = sub_20C444D70(&v193, v63, v64);
                v66 = v65[3] - 1;
                *(_QWORD *)&v189 = v65[2];
                *((_QWORD *)&v189 + 1) = v66;
                if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189) & 1) != 0)
                  break;
              }
LABEL_88:
              sub_20C444E44(&v193);
              if (v194 == v196)
                goto LABEL_175;
            }
            v69 = sub_20C444D70(&v193, v67, v68);
            v70 = v69[3] - 1;
            *(_QWORD *)&v199 = v69[2];
            *((_QWORD *)&v199 + 1) = v70;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v54, &v187);
            v74 = sub_20C444D70(&v193, v72, v73);
            v75 = v74[3] - 1;
            *(_QWORD *)&v189 = v74[2];
            *((_QWORD *)&v189 + 1) = v75;
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189);
            v77 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(LayerStack);
            Layers = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v77);
            *(_QWORD *)&v199 = Layers[1];
            *((_QWORD *)&v199 + 1) = v199;
            *(_QWORD *)&v200 = *Layers;
            *((_QWORD *)&v200 + 1) = v200;
            while (1)
            {
              if (*((_QWORD *)&v199 + 1) == *((_QWORD *)&v200 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v188);
                sub_20BFD265C(&v187);
                goto LABEL_88;
              }
              *(_QWORD *)&v189 = sub_20C45A2E0(&v193, v79, v80);
              *((_QWORD *)&v189 + 1) = v81;
              v83 = (uint64_t *)sub_20C22F36C((uint64_t)&v199, v81, v82);
              v84 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v84)
                v84 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              v186 = 0;
              sub_20C521378((uint64_t)v172, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189, v83, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v84 + 464), &v186);
              if ((v186 & 7) != 0)
              {
                v85 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
                do
                  v86 = __ldxr(v85);
                while (__stlxr(v86 - 2, v85));
              }
              if (v177)
                break;
              sub_20C22F508((uint64_t)&v199);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v188);
            sub_20BFD265C(&v187);
          }
        }
LABEL_175:
        if ((v185 & 7) != 0)
        {
          v156 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
          do
            v157 = __ldxr(v156);
          while (__stlxr(v157 - 2, v156));
        }
LABEL_178:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v184);
        sub_20BFD265C(&v183);
        v45 = v182;
        if (!v182)
          goto LABEL_180;
        goto LABEL_179;
      }
    }
    v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16)
      v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C3AD664(a2, (uint64_t)&v181);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v181, (uint64_t)&v193);
      v17 = *((_QWORD *)&v193 + 1);
      if ((v193 & 7) != 0)
      {
        v18 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      if (v17)
      {
        LOBYTE(v193) = 0;
        sub_20C45A3D8(v172[0], &v193);
        v177 = 1;
      }
      else
      {
        v87 = sub_20C398E78(&v181);
        sub_20C35C4F8((uint64_t)&v189, (uint64_t *)&v182, &v183);
        v89 = (uint64_t *)sub_20C368FF0((uint64_t)&v189, v88);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v89, 6u, (uint64_t *)&v199);
        v197 = v199;
        v198 = v200;
        v193 = v200;
        v194 = v200;
        v195 = v199;
        v196 = v199;
        if ((v192 & 7) != 0)
        {
          v90 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
          do
            v91 = __ldxr(v90);
          while (__stlxr(v91 - 2, v90));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v191);
        sub_20BFD265C(&v190);
        if (*((_QWORD *)&v189 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v189 + 1));
        if (v194 != v196)
        {
          while (1)
          {
            v94 = sub_20C444D70(&v193, v92, v93);
            v95 = v94[3] - 1;
            *(_QWORD *)&v199 = v94[2];
            *((_QWORD *)&v199 + 1) = v95;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199) & 1) == 0)
            {
              v98 = sub_20C444D70(&v193, v96, v97);
              v99 = v98[3] - 1;
              *(_QWORD *)&v189 = v98[2];
              *((_QWORD *)&v189 + 1) = v99;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189) & 1) != 0)
                break;
            }
LABEL_108:
            sub_20C444E44(&v193);
            if (v194 == v196)
              goto LABEL_145;
          }
          v102 = sub_20C444D70(&v193, v100, v101);
          v103 = v102[3] - 1;
          *(_QWORD *)&v199 = v102[2];
          *((_QWORD *)&v199 + 1) = v103;
          v104 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v104, v87, &v187);
          v107 = sub_20C444D70(&v193, v105, v106);
          v108 = v107[3] - 1;
          *(_QWORD *)&v189 = v107[2];
          *((_QWORD *)&v189 + 1) = v108;
          v109 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189);
          v110 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v109);
          v111 = (_QWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v110);
          *(_QWORD *)&v199 = v111[1];
          *((_QWORD *)&v199 + 1) = v199;
          *(_QWORD *)&v200 = *v111;
          *((_QWORD *)&v200 + 1) = v200;
          while (1)
          {
            if (*((_QWORD *)&v199 + 1) == *((_QWORD *)&v200 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v188);
              sub_20BFD265C(&v187);
              goto LABEL_108;
            }
            *(_QWORD *)&v189 = sub_20C45A2E0(&v193, v112, v113);
            *((_QWORD *)&v189 + 1) = v114;
            v116 = (uint64_t *)sub_20C22F36C((uint64_t)&v199, v114, v115);
            v117 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v117)
              v117 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            v186 = 0;
            sub_20C521378((uint64_t)v172, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189, v116, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v117 + 64), &v186);
            if ((v186 & 7) != 0)
            {
              v118 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
              do
                v119 = __ldxr(v118);
              while (__stlxr(v119 - 2, v118));
            }
            if (v177)
              break;
            sub_20C22F508((uint64_t)&v199);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v188);
          sub_20BFD265C(&v187);
        }
      }
LABEL_145:
      if ((v185 & 7) != 0)
      {
        v140 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      goto LABEL_178;
    }
    goto LABEL_34;
  }
  if (v13 == 1)
  {
    v20 = *(_QWORD *)(a2 + 8);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 56), (v21 & 0x800) != 0))
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v12);
      v21 = *(_QWORD *)(v20 + 56);
      v20 = *(_QWORD *)(a2 + 8);
    }
    if ((v21 & 0x4000) == 0)
    {
      v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22)
        v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v193, PrimIndex, 1);
        if (v194 == v195)
          goto LABEL_209;
        while (1)
        {
          v181 = 0;
          v121 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v196);
          v199 = v194;
          v122 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199);
          v123 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v123)
            v123 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v199 + 1) = &v181;
          *(_QWORD *)&v200 = &stru_24C51BCE0;
          WORD4(v200) = 0;
          *(_QWORD *)&v199 = &unk_24C5286B0;
          HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v121, v122, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v123 + 448), (uint64_t (***)(_QWORD, uint64_t))&v199);
          v125 = v181;
          v126 = HasField && BYTE8(v200) == 0;
          if (v126 && v181 != 0)
          {
            v128 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v128)
              v128 = sub_20BFE0E90(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            v125 = v181;
            if ((v181 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v128 & 0xFFFFFFFFFFFFFFF8))
            {
              v129 = *(_QWORD *)v20;
              v189 = v194;
              v130 = (uint64_t *)v196;
              v199 = v194;
              v131 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199);
              v132 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v132)
                v132 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              *(_QWORD *)&v199 = 0;
              sub_20C521378((uint64_t)v172, v129, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v189, v130, v131, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v132 + 448), (uint64_t *)&v199);
              if ((v199 & 7) != 0)
              {
                v133 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFFFF8);
                do
                  v134 = __ldxr(v133);
                while (__stlxr(v134 - 2, v133));
              }
              v125 = v181;
              if (v177)
                break;
            }
          }
          if ((v125 & 7) != 0)
          {
            v135 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
            do
              v136 = __ldxr(v135);
            while (__stlxr(v136 - 2, v135));
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v193);
          if ((_QWORD)v194 == (_QWORD)v195 && *((_QWORD *)&v194 + 1) == *((_QWORD *)&v195 + 1))
            goto LABEL_209;
        }
        if ((v181 & 7) != 0)
        {
          v158 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
          do
            v159 = __ldxr(v158);
          while (__stlxr(v159 - 2, v158));
        }
LABEL_209:
        if (v177)
        {
          Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (Instance)
            goto LABEL_212;
          goto LABEL_211;
        }
        goto LABEL_214;
      }
      v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23)
        v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v20 + 16))
          || (*(_BYTE *)(v20 + 57) & 0x10) != 0
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v20 + 16)))
        {
LABEL_139:
          v138 = v172[0];
          if (strcmp((const char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(v172[0] + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
          {
            goto LABEL_207;
          }
          **(_DWORD **)(v138 + 8) = 0;
          goto LABEL_208;
        }
        v148 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v193, v148, 1);
        if ((_QWORD)v194 == (_QWORD)v195)
        {
          v149 = 1;
          if (*((_QWORD *)&v194 + 1) == *((_QWORD *)&v195 + 1))
          {
LABEL_162:
            v138 = v172[0];
            if (strcmp((const char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(v172[0] + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
            {
              goto LABEL_207;
            }
            **(_DWORD **)(v138 + 8) = v149;
            goto LABEL_208;
          }
        }
        v149 = 1;
        while (1)
        {
          LODWORD(v189) = 1;
          v160 = (_QWORD *)sub_20C0EEAF8((uint64_t *)v196);
          v199 = v194;
          v161 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199);
          v162 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v162)
            v162 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          *((_QWORD *)&v199 + 1) = &v189;
          *(_QWORD *)&v200 = &stru_24C527CB0;
          WORD4(v200) = 0;
          *(_QWORD *)&v199 = &unk_24C539DB8;
          v163 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v160, v161, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v162 + 312), (uint64_t (***)(_QWORD, uint64_t))&v199);
          if (BYTE8(v200))
            v164 = 0;
          else
            v164 = v163;
          if (v164 == 1 && (_DWORD)v189 != 1)
          {
            if (!(_DWORD)v189)
              goto LABEL_139;
            v199 = v194;
            if (!(_QWORD)v194 || *((_QWORD *)&v194 + 1) == -1)
            {
LABEL_206:
              v138 = v172[0];
              if (!strcmp((const char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(v172[0] + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))**(_DWORD **)(v138 + 8) = 2;
              else
LABEL_207:
                *(_BYTE *)(v138 + 25) = 1;
LABEL_208:
              v177 = 1;
              goto LABEL_209;
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199) != 1
                 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199))
            {
              *(_QWORD *)&v199 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v199);
              *((_QWORD *)&v199 + 1) = v165;
              if (!(_QWORD)v199 || v165 == -1)
                goto LABEL_206;
            }
            v149 = 2;
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v193);
          if (v194 == v195)
            goto LABEL_162;
        }
      }
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24)
        v24 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        v142 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v193, v142, 1);
        *(_QWORD *)&v199 = 0;
        v143 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v143)
          v143 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v189 = 0;
        sub_20C521664((uint64_t *)v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v199, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v143 + 208), (uint64_t *)&v189, a5, (uint64_t)&v193, v172);
        if ((v189 & 7) != 0)
        {
          v144 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
          do
            v145 = __ldxr(v144);
          while (__stlxr(v145 - 2, v144));
        }
        if ((v199 & 7) != 0)
        {
          v146 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFFFF8);
          do
            v147 = __ldxr(v146);
          while (__stlxr(v147 - 2, v146));
        }
        goto LABEL_209;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25)
        v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8))
      {
        v150 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v193, v150, 1);
        *(_QWORD *)&v199 = 0;
        v151 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v151)
          v151 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        *(_QWORD *)&v189 = 0;
        sub_20C521664((uint64_t *)v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v199, v151, (uint64_t *)&v189, a5, (uint64_t)&v193, v172);
        if ((v189 & 7) != 0)
        {
          v152 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
          do
            v153 = __ldxr(v152);
          while (__stlxr(v153 - 2, v152));
        }
        if ((v199 & 7) != 0)
        {
          v154 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFFFF8);
          do
            v155 = __ldxr(v154);
          while (__stlxr(v155 - 2, v154));
        }
        goto LABEL_209;
      }
      goto LABEL_34;
    }
    v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v11);
    v28 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v28);
    *(_QWORD *)&v193 = v29;
    *((_QWORD *)&v193 + 1) = v30;
    if (*(_QWORD *)(a1 + 40)
      && (v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193),
          v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FE500(v31),
          **(_QWORD **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(_QWORD *)(a1 + 40)))
    {
      v139 = sub_20C521378((uint64_t)v172, *(_QWORD *)v20, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (v177)
      {
LABEL_142:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (Instance)
          goto LABEL_212;
        goto LABEL_211;
      }
      v33 = v139;
    }
    else
    {
      v33 = 0;
    }
    if ((v33 | sub_20C521378((uint64_t)v172, *(_QWORD *)v20, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v193, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_214;
    goto LABEL_142;
  }
LABEL_34:
  if (!sub_20C51F970(a2, a3, a4, a5, v172))
    goto LABEL_214;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (Instance)
    goto LABEL_212;
LABEL_211:
  Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
LABEL_212:
  v166 = v180;
  v167 = atomic_load(Instance + 18);
  v168 = v166 >= v167
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v180, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
LABEL_216:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v180);
  if ((v176 & 7) != 0)
  {
    v169 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v170 = __ldxr(v169);
    while (__stlxr(v170 - 2, v169));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v175);
  sub_20BFD265C(&v174);
  if (v173)
    sub_20C35C614(v173);
  return v168;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__8UsdStage32_GetTypeSpecificResolvedMetadataINS_12VtDictionaryEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_bPT_(a1, a2, a3, a4, a5, a6);
}

void sub_20C429728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 112);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  sub_20C4299C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C4299C0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>(_QWORD *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtDictionary *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v12;
  double Inverse;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v15;
  std::type_info *v16;
  _QWORD **v17;
  pxrInternal__aapl__pxrReserved__::VtValue *p_Inverse;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13)))
  {
    v16 = &stru_24C51D8B8;
    Inverse = COERCE_DOUBLE(&unk_24C53B9B8);
    v15 = a5;
    return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&Inverse);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17, a5);
    Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v10);
    v15 = v12;
    p_Inverse = (pxrInternal__aapl__pxrReserved__::VtValue *)&Inverse;
    sub_20C35B9F8((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17, &p_Inverse);
    v16 = &stru_24C51D8B8;
    Inverse = COERCE_DOUBLE(&unk_24C53B9B8);
    v15 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17;
    v11 = pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(a1, a2, a3, a4, (uint64_t (***)(_QWORD, uint64_t))&Inverse);
    sub_20BF49F14(&v17, 0);
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage28_SetEditTargetMappedMetadataINS_12VtDictionaryEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C429B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtValue>(_QWORD *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  const char *v11;
  unint64_t v12;
  const char *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  uint64_t Schema;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  unsigned int SpecType;
  uint64_t **v30;
  const char **v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  unsigned int *v34;
  unsigned int v35;
  BOOL v36;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  uint64_t Identifier;
  const char *v40;
  unint64_t v42;
  const char *v43;
  uint64_t **v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  unsigned int *v47;
  unsigned int v48;
  void **v49;
  void *__p[2];
  char v51;
  int v52;
  int v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  char *v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;

  Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(Instance, a3, 0))
  {
    v11 = (const char *)a1[149];
    if (v11)
    {
      if (v11[23] < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "UsdStages in aggregate";
    }
    v57 = (char *)v11;
    sub_20C45E830((uint64_t)&v55, "Usd", (char *)&v57);
    v54 = 0;
    if (*a2 < 2)
    {
      if (*a2 != 1)
      {
        v57 = "usd/stage.cpp";
        v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
        v59 = 1884;
        v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, con"
                                "st TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
        v61 = 0;
        sub_20C348EEC((uint64_t)a2, &v52);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, __p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1 + 6);
        Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v38);
        if (*(char *)(Identifier + 23) >= 0)
          v40 = (const char *)Identifier;
        else
          v40 = *(const char **)Identifier;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata at path <%s> in layer @%s@; a prim or property is required",
          Text,
          v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
        goto LABEL_40;
      }
      sub_20C386D74((uint64_t)a2, (uint64_t)&v57);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v57, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v54, (unsigned int **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v60 & 7) != 0)
      {
        v18 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    else
    {
      sub_20C3AD664((uint64_t)a2, (uint64_t)&v57);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v57, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v54, (unsigned int **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v60 & 7) != 0)
      {
        v15 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
    sub_20BFD265C(&v59);
    if (v58)
      sub_20C35C614(v58);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54))
    {
      v57 = "usd/stage.cpp";
      v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
      v59 = 1892;
      v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const"
                              " TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
      v61 = 0;
      sub_20C348EEC((uint64_t)a2, &v52);
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, __p);
      v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1 + 6);
      v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v21);
      if (*(char *)(v22 + 23) >= 0)
        v23 = (const char *)v22;
      else
        v23 = *(const char **)v22;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. Failed to create spec <%s> in layer @%s@", v20, v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
LABEL_40:
      sub_20BFD265C(&v52);
LABEL_41:
      v24 = 0;
      goto LABEL_42;
    }
    v26 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
    Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v26);
    v28 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
    SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v28);
    if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(Schema, a3, SpecType) & 1) == 0)
    {
      v57 = "usd/stage.cpp";
      v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
      v59 = 1902;
      v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const"
                              " TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
      v61 = 0;
      v42 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v42)
      {
        v43 = (const char *)(v42 + 16);
        if (*(char *)(v42 + 39) < 0)
          v43 = *(const char **)v43;
      }
      else
      {
        v43 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, SpecType, (uint64_t)__p);
      if (v51 >= 0)
        v49 = __p;
      else
        v49 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. '%s' is not registered as valid metadata for spec type %s.", v43, (const char *)v49);
      if (v51 < 0)
        operator delete(__p[0]);
      goto LABEL_41;
    }
    if (*(_QWORD *)a4)
    {
      v30 = (uint64_t **)sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v30, (uint64_t *)&v57);
      v31 = (const char **)sub_20BFCF650((uint64_t *)&v57);
      v32 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, __p);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a4, a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      v33 = v58;
      if (v58)
      {
        v34 = (unsigned int *)((char *)v58 + 8);
        do
        {
          v35 = __ldxr(v34);
          v36 = --v35 == 0;
        }
        while (__stlxr(v35, v34));
        goto LABEL_51;
      }
    }
    else
    {
      v44 = (uint64_t **)sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v44, (uint64_t *)&v57);
      v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v57);
      v46 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, __p);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      v33 = v58;
      if (v58)
      {
        v47 = (unsigned int *)((char *)v58 + 8);
        do
        {
          v48 = __ldxr(v47);
          v36 = --v48 == 0;
        }
        while (__stlxr(v48, v47));
LABEL_51:
        if (v36)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v33 + 8))(v33);
      }
    }
    v24 = 1;
LABEL_42:
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v54);
    while (v56--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v55);
    return v24;
  }
  v57 = "usd/stage.cpp";
  v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
  v59 = 1868;
  v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const TfT"
                          "oken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
  v61 = 0;
  v12 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0)
      v13 = *(const char **)v13;
  }
  else
  {
    v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Unregistered metadata field: %s", v13);
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage16_SetMetadataImplINS_7VtValueEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C42A0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28)
{
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  sub_20BFD1A18(&__p);
  v29 = a28;
  if (a28)
  {
    v30 = (unsigned int *)(a28 + 8);
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a19);
  sub_20BEB24F4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;

  result = pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(this, a2, "create prim spec");
  if ((result & 1) != 0)
  {
    sub_20C348EEC((uint64_t)a2, &v7);
    sub_20C43223C((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    return (uint64_t)sub_20BFD265C(&v7);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C42A2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(_QWORD *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t (***a5)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  const char *v11;
  unint64_t v12;
  const char *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  uint64_t Schema;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  unsigned int SpecType;
  uint64_t **v30;
  const char **v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  unsigned int *v34;
  unsigned int v35;
  BOOL v36;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  uint64_t Identifier;
  const char *v40;
  unint64_t v42;
  const char *v43;
  uint64_t **v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  unsigned int *v47;
  unsigned int v48;
  void **v49;
  void *__p[2];
  char v51;
  int v52;
  int v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  char *v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;

  Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(Instance, a3, 0))
  {
    v11 = (const char *)a1[149];
    if (v11)
    {
      if (v11[23] < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "UsdStages in aggregate";
    }
    v57 = (char *)v11;
    sub_20C45E830((uint64_t)&v55, "Usd", (char *)&v57);
    v54 = 0;
    if (*a2 < 2)
    {
      if (*a2 != 1)
      {
        v57 = "usd/stage.cpp";
        v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
        v59 = 1884;
        v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, con"
                                "st TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbst"
                                "ractDataConstValue]";
        v61 = 0;
        sub_20C348EEC((uint64_t)a2, &v52);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, __p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1 + 6);
        Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v38);
        if (*(char *)(Identifier + 23) >= 0)
          v40 = (const char *)Identifier;
        else
          v40 = *(const char **)Identifier;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata at path <%s> in layer @%s@; a prim or property is required",
          Text,
          v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
        goto LABEL_40;
      }
      sub_20C386D74((uint64_t)a2, (uint64_t)&v57);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v57, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v54, (unsigned int **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v60 & 7) != 0)
      {
        v18 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    else
    {
      sub_20C3AD664((uint64_t)a2, (uint64_t)&v57);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v57, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v54, (unsigned int **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v60 & 7) != 0)
      {
        v15 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
    sub_20BFD265C(&v59);
    if (v58)
      sub_20C35C614(v58);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54))
    {
      v57 = "usd/stage.cpp";
      v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
      v59 = 1892;
      v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const"
                              " TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
      v61 = 0;
      sub_20C348EEC((uint64_t)a2, &v52);
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, __p);
      v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1 + 6);
      v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v21);
      if (*(char *)(v22 + 23) >= 0)
        v23 = (const char *)v22;
      else
        v23 = *(const char **)v22;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. Failed to create spec <%s> in layer @%s@", v20, v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
LABEL_40:
      sub_20BFD265C(&v52);
LABEL_41:
      v24 = 0;
      goto LABEL_42;
    }
    v26 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
    Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v26);
    v28 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
    SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v28);
    if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(Schema, a3, SpecType) & 1) == 0)
    {
      v57 = "usd/stage.cpp";
      v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
      v59 = 1902;
      v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const"
                              " TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
      v61 = 0;
      v42 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v42)
      {
        v43 = (const char *)(v42 + 16);
        if (*(char *)(v42 + 39) < 0)
          v43 = *(const char **)v43;
      }
      else
      {
        v43 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, SpecType, (uint64_t)__p);
      if (v51 >= 0)
        v49 = __p;
      else
        v49 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. '%s' is not registered as valid metadata for spec type %s.", v43, (const char *)v49);
      if (v51 < 0)
        operator delete(__p[0]);
      goto LABEL_41;
    }
    if (*(_QWORD *)a4)
    {
      v30 = (uint64_t **)sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v30, (uint64_t *)&v57);
      v31 = (const char **)sub_20BFCF650((uint64_t *)&v57);
      v32 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, __p);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a4, (uint64_t)a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      v33 = v58;
      if (v58)
      {
        v34 = (unsigned int *)((char *)v58 + 8);
        do
        {
          v35 = __ldxr(v34);
          v36 = --v35 == 0;
        }
        while (__stlxr(v35, v34));
        goto LABEL_51;
      }
    }
    else
    {
      v44 = (uint64_t **)sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v44, (uint64_t *)&v57);
      v45 = sub_20BFCF650((uint64_t *)&v57);
      v46 = sub_20BFD5244((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v54);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, __p);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      v33 = v58;
      if (v58)
      {
        v47 = (unsigned int *)((char *)v58 + 8);
        do
        {
          v48 = __ldxr(v47);
          v36 = --v48 == 0;
        }
        while (__stlxr(v48, v47));
LABEL_51:
        if (v36)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v33 + 8))(v33);
      }
    }
    v24 = 1;
LABEL_42:
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v54);
    while (v56--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v55);
    return v24;
  }
  v57 = "usd/stage.cpp";
  v58 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_SetMetadataImpl";
  v59 = 1868;
  v60 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const TfT"
                          "oken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
  v61 = 0;
  v12 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0)
      v13 = *(const char **)v13;
  }
  else
  {
    v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Unregistered metadata field: %s", v13);
  return 0;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8UsdStage16_SetMetadataImplINS_25SdfAbstractDataConstValueEEEbRKNS_9UsdObjectERKNS_7TfTokenES8_RKT_(a1, a2, a3, a4, a5);
}

void sub_20C42A830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28)
{
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  sub_20BFD1A18(&__p);
  v29 = a28;
  if (a28)
  {
    v30 = (unsigned int *)(a28 + 8);
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a19);
  sub_20BEB24F4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdStage::GetGlobalVariantFallbacks@<X0>(uint64_t *a1@<X8>)
{
  const void ***v3;
  unint64_t *v5;
  char v6;

  v6 = 0;
  v5 = (unint64_t *)sub_20C42A9F0();
  tbb::spin_rw_mutex_v3::internal_acquire_reader(v5);
  v3 = (const void ***)sub_20C42AA68();
  sub_20C220F7C(a1, v3);
  return sub_20BEBF29C(&v5);
}

void sub_20C42A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C42A9F0()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254988B30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254988B30))
  {
    v2 = operator new(8uLL);
    *v2 = 0;
    qword_254988B28 = (uint64_t)v2;
    __cxa_guard_release(&qword_254988B30);
  }
  return qword_254988B28;
}

void sub_20C42AA50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988B30);
  _Unwind_Resume(a1);
}

unint64_t sub_20C42AA68()
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v0;
  pxrInternal__aapl__pxrReserved__::PlugRegistry *Instance;
  uint64_t *v3;
  uint64_t *v4;
  const void ***v5;
  const void ***JsObject;
  _QWORD **v7;
  pxrInternal__aapl__pxrReserved__::JsValue **JsArray;
  pxrInternal__aapl__pxrReserved__::JsValue *v9;
  pxrInternal__aapl__pxrReserved__::JsValue *v10;
  std::string *v11;
  unint64_t String;
  __int128 v13;
  __int128 v14;
  std::string **v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  _QWORD *v19;
  _QWORD **v20;
  BOOL v21;
  uint64_t v22;
  const char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v28;
  std::string *v29;
  __int128 *v30;
  void *__p[2];
  _QWORD *v32;
  _QWORD **v33;
  _QWORD *v34[2];
  __int128 __dst;
  uint64_t v36;
  const char *v37;
  char v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t v41[3];
  uint64_t *v42;
  uint64_t *v43;
  __int128 *v44;
  __int128 v45;
  void **v46;

  v0 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)atomic_load(&qword_254988AE0);
  if (!v0)
  {
    v0 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)operator new(0x18uLL);
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 1) = 0;
    *(_QWORD *)v0 = (char *)v0 + 8;
    v45 = 0uLL;
    v44 = &v45;
    Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v0);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v42, Instance);
    v4 = v42;
    v3 = v43;
    if (v42 != v43)
    {
      v28 = v43;
      do
      {
        v5 = (const void ***)sub_20BF444D8(v4);
        pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v5, v41);
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v39);
        if (sub_20C455CA0((uint64_t)v41, "UsdVariantFallbacks", &v39))
        {
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v39))
          {
            JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v39);
            sub_20BF1BE5C((uint64_t *)&v33, JsObject);
            v7 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*((char *)v7 + 55) < 0)
                {
                  sub_20BDDBFAC(__p, v7[4], (unint64_t)v7[5]);
                }
                else
                {
                  *(_OWORD *)__p = *((_OWORD *)v7 + 2);
                  v32 = v7[6];
                }
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v7 + 7)))
                {
                  JsArray = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v7 + 7);
                  sub_20BDE4F04(&v29, (JsArray[1] - *JsArray) >> 4);
                  v9 = *JsArray;
                  v10 = JsArray[1];
                  if (v9 != v10)
                  {
                    v11 = v29;
                    do
                    {
                      String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v9);
                      if (*(char *)(String + 23) < 0)
                      {
                        sub_20BDDBFAC(&__dst, *(void **)String, *(_QWORD *)(String + 8));
                      }
                      else
                      {
                        v13 = *(_OWORD *)String;
                        v36 = *(_QWORD *)(String + 16);
                        __dst = v13;
                      }
                      if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v11->__r_.__value_.__l.__data_);
                      v14 = __dst;
                      v11->__r_.__value_.__r.__words[2] = v36;
                      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
                      ++v11;
                      v9 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v9 + 16);
                    }
                    while (v9 != v10);
                  }
                  if (v29 != (std::string *)v30)
                  {
                    v46 = __p;
                    v15 = (std::string **)(sub_20C455D34((uint64_t **)&v44, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v46)+ 7);
                    if (v15 != &v29)
                      sub_20BE75818((uint64_t)v15, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
                  }
                  *(_QWORD *)&__dst = &v29;
                  sub_20BDE5038((void ***)&__dst);
                }
                else
                {
                  *(_QWORD *)&__dst = "usd/stage.cpp";
                  *((_QWORD *)&__dst + 1) = "_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl";
                  v36 = 208;
                  v37 = "void pxrInternal__aapl__pxrReserved__::_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl(std"
                        "::remove_const_t<PcpVariantFallbackMap> *)";
                  v38 = 0;
                  v16 = sub_20BF444D8(v4);
                  v17 = (const char *)(v16 + 8);
                  if (*(char *)(v16 + 31) < 0)
                    v17 = *(const char **)v17;
                  if (SHIBYTE(v32) >= 0)
                    v18 = __p;
                  else
                    v18 = (void **)__p[0];
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdVariantFallbacks] value for %s must be an arrays.", v17, (const char *)v18);
                }
                if (SHIBYTE(v32) < 0)
                  operator delete(__p[0]);
                v19 = v7[1];
                if (v19)
                {
                  do
                  {
                    v20 = (_QWORD **)v19;
                    v19 = (_QWORD *)*v19;
                  }
                  while (v19);
                }
                else
                {
                  do
                  {
                    v20 = (_QWORD **)v7[2];
                    v21 = *v20 == v7;
                    v7 = v20;
                  }
                  while (!v21);
                }
                v7 = v20;
              }
              while (v20 != v34);
            }
            sub_20BE78E5C((uint64_t)&v33, v34[0]);
            v3 = v28;
          }
          else
          {
            *(_QWORD *)&__dst = "usd/stage.cpp";
            *((_QWORD *)&__dst + 1) = "_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl";
            v36 = 198;
            v37 = "void pxrInternal__aapl__pxrReserved__::_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl(std::remo"
                  "ve_const_t<PcpVariantFallbackMap> *)";
            v38 = 0;
            v22 = sub_20BF444D8(v4);
            v23 = (const char *)(v22 + 8);
            if (*(char *)(v22 + 31) < 0)
              v23 = *(const char **)v23;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdVariantFallbacks] was not a dictionary.", v23);
          }
        }
        v24 = v40;
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        sub_20BE78E5C((uint64_t)v41, (_QWORD *)v41[1]);
        v4 += 2;
      }
      while (v4 != v3);
    }
    sub_20C221320((uint64_t **)v0, v44, &v45);
    *(_QWORD *)&__dst = &v42;
    sub_20BEB4844((void ***)&__dst);
    sub_20C220ECC((uint64_t)&v44, (_QWORD *)v45);
    while (!__ldaxr(&qword_254988AE0))
    {
      if (!__stlxr((unint64_t)v0, &qword_254988AE0))
        return (unint64_t)v0;
    }
    __clrex();
    sub_20C220ECC((uint64_t)v0, *((_QWORD **)v0 + 1));
    operator delete(v0);
    return atomic_load(&qword_254988AE0);
  }
  return (unint64_t)v0;
}

void sub_20C42AE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  a34 = v35 - 152;
  sub_20BEB4844((void ***)&a34);
  sub_20C220ECC(v35 - 128, *(_QWORD **)(v35 - 120));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdStage::SetGlobalVariantFallbacks(uint64_t a1)
{
  uint64_t **v2;
  tbb::spin_rw_mutex_v3 *v4;
  char v5;

  v5 = 1;
  v4 = (tbb::spin_rw_mutex_v3 *)sub_20C42A9F0();
  tbb::spin_rw_mutex_v3::internal_acquire_writer(v4);
  v2 = (uint64_t **)sub_20C42AA68();
  if (v2 != (uint64_t **)a1)
    sub_20C221320(v2, *(__int128 **)a1, (__int128 *)(a1 + 8));
  return sub_20BEBF29C(&v4);
}

void sub_20C42AFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C42AFDC()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "UsdStage::LoadAll");
  sub_20BDDC0E4(__p, "Load all loadable prims");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5395B8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "UsdStage::LoadNone");
  sub_20BDDC0E4(__p, "Load no loadable prims");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C5395B8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C42B0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  _BYTE v11[24];
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  int v14;
  _DWORD v15[5];
  void **v16;

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAssetPathContext((uint64_t)a1, a2, (uint64_t)&v12, a6);
  if (v13)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext(a1, (uint64_t)v11);
    sub_20C42B5F8(&v12, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)v11, a3, a4, a5);
    v16 = (void **)v11;
    sub_20BDE9EB0(&v16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
  sub_20BFD265C(&v14);
  return sub_20C103234(&v13);
}

void sub_20C42B190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 56) = v5;
  sub_20BDE9EB0((void ***)(v6 - 56));
  sub_20C42BD2C((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdStage::_GetAssetPathContext@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v10;
  uint64_t ClipIndexForTime;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  _BOOL4 HasAuthoredTimeSamples;
  pxrInternal__aapl__pxrReserved__::Usd_Clip **v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v35;
  unsigned int *v36;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v37;
  __int128 v38;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v39[2];
  std::__shared_weak_count *v40;
  int v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v43;
  unsigned int *v44;
  __int128 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v51;
  double v52;

  v52 = a4;
  v51 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v49);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v50);
  sub_20C361C1C((uint64_t)&v41);
  v40 = 0;
  v38 = 0u;
  *(_OWORD *)v39 = 0u;
  v35 = a2;
  sub_20C46E2DC(a1, a2, &v41, (void **)&v52, &v38, (uint64_t)&v35);
  if ((v48 & 0xFFFFFFFE) == 2)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v44;
    if (v44)
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v44) + 14))
        v7 = v43;
      else
        v7 = 0;
    }
    v35 = v7;
    sub_20BF1DD04((uint64_t *)&v35);
    v8 = v51;
    v51 = v35;
    v35 = 0;
    sub_20BF1D8F4((int)&v51, v8);
    sub_20C103234(&v35);
    v9 = sub_20C398E78(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, v9, (int *)&v35);
    sub_20BFD3EBC(&v49, (int *)&v35);
    sub_20BFD3F10(&v50, (int *)&v35 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_20BFD265C(&v35);
  }
  else if (v48 == 4)
  {
    v10 = v39[1];
    ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v39[1], v52);
    v12 = *((_QWORD *)v10 + 11);
    v13 = sub_20C398E78(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, v13, (int *)&v35);
    sub_20BFD3EBC(&v49, (int *)&v35);
    sub_20BFD3F10(&v50, (int *)&v35 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_20BFD265C(&v35);
    HasAuthoredTimeSamples = pxrInternal__aapl__pxrReserved__::Usd_Clip::HasAuthoredTimeSamples(*(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v12 + 16 * ClipIndexForTime), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v49);
    v15 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)((char *)v39[1] + 72);
    if (HasAuthoredTimeSamples)
      v15 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v12 + 16 * ClipIndexForTime);
    pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*v15, (uint64_t *)&v35);
    v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v36;
    if (v36)
    {
      if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)&v36) + 14))
        v16 = v35;
      else
        v16 = 0;
    }
    v37 = v16;
    sub_20BF1DD04((uint64_t *)&v37);
    v17 = v51;
    v51 = v37;
    v37 = 0;
    sub_20BF1D8F4((int)&v51, v17);
    sub_20C103234(&v37);
    v18 = (uint64_t)v36;
    if (v36)
    {
      v19 = v36 + 2;
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  v22 = v51;
  if (v51)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v22;
    v51 = 0;
    sub_20BFD38A4((_DWORD *)(a3 + 16), &v49);
    sub_20BFD38DC((_DWORD *)(a3 + 20), &v50);
    *(_OWORD *)(a3 + 24) = v45;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = -1;
  }
  v23 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  sub_20BFD265C(&v46);
  v26 = (uint64_t)v44;
  if (v44)
  {
    v27 = v44 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v30 = v42;
  if (v42)
  {
    v31 = (unsigned int *)(v42 + 8);
    do
    {
      v32 = __ldxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
  sub_20BFD265C(&v49);
  return sub_20C103234(&v51);
}

void sub_20C42B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20C35FEE4((uint64_t)va1);
  sub_20BFD1A18((_DWORD *)(v8 - 72));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v8 - 64));
  _Unwind_Resume(a1);
}

void sub_20C42B5F0()
{
  JUMPOUT(0x20C42B5D8);
}

void sub_20C42B5F8(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *LayerStack;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  __int128 v15;
  void **v16;
  int v17;
  pxrInternal__aapl__pxrReserved__ *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *Resolver;
  uint64_t v23;
  void *v24;
  void *v25;
  char v26;
  void **v27;
  void **v28;
  void **v29;
  int v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  void **v35;
  int v36;
  uint64_t *v37;
  void *__dst[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  void *v45[2];
  uint64_t *v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[48];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v49, a2);
  if (a4)
  {
    v8 = 0;
    v37 = a1 + 1;
    do
    {
      v9 = a3 + 48 * v8;
      if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression(v9))
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 3));
        v11 = *(_QWORD *)(sub_20C1FE500(LayerStack) + 392);
        pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(__p, a3 + 48 * v8);
        sub_20C2169A0((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)__p, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(v11 + 16), (uint64_t *)v45);
        pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)__p);
        v13 = v46;
        v12 = (uint64_t *)v47;
        if (v46 == (uint64_t *)v47)
        {
          if (sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)v45))
          {
            if (((uint64_t)v45[1] & 4) != 0)
              v14 = (char *)(*(uint64_t (**)(void **))(((unint64_t)v45[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v45);
            else
              v14 = (char *)v45[0];
            if (v14[23] < 0)
            {
              sub_20BDDBFAC(__dst, *(void **)v14, *((_QWORD *)v14 + 1));
            }
            else
            {
              v15 = *(_OWORD *)v14;
              v40 = *((_QWORD *)v14 + 2);
              *(_OWORD *)__dst = v15;
            }
          }
          else
          {
            __dst[0] = 0;
            __dst[1] = 0;
            v40 = 0;
          }
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, __dst);
          if (*(char *)(v9 + 23) < 0)
            operator delete(*(void **)v9);
          *(_OWORD *)v9 = *(_OWORD *)__p;
          *(_QWORD *)(v9 + 16) = v42;
          HIBYTE(v42) = 0;
          LOBYTE(__p[0]) = 0;
          v16 = (void **)(a3 + 48 * v8 + 24);
          if (*(char *)(v9 + 47) < 0)
          {
            operator delete(*v16);
            v17 = SHIBYTE(v42);
            *(_OWORD *)v16 = v43;
            *(_QWORD *)(a3 + 48 * v8 + 40) = v44;
            HIBYTE(v44) = 0;
            LOBYTE(v43) = 0;
            if (v17 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_OWORD *)v16 = v43;
            *(_QWORD *)(a3 + 48 * v8 + 40) = v44;
            HIBYTE(v44) = 0;
            LOBYTE(v43) = 0;
          }
          if (SHIBYTE(v40) < 0)
            operator delete(__dst[0]);
        }
        else
        {
          sub_20C450340(a1, &v46);
        }
        sub_20BEB3F28((uint64_t)&v48);
        __p[0] = &v46;
        sub_20BDE5038((void ***)__p);
        sub_20BF4C2D8((uint64_t)v45);
        if (v13 != v12)
          goto LABEL_70;
      }
      if (!a5)
      {
        sub_20C1034E8((uint64_t *)__dst, v37);
        sub_20C450080((uint64_t *)__dst, v9, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v45, v9, __p);
        if (*(char *)(v9 + 23) < 0)
          operator delete(*(void **)v9);
        *(_OWORD *)v9 = *(_OWORD *)v45;
        *(_QWORD *)(v9 + 16) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45[0]) = 0;
        v29 = (void **)(a3 + 48 * v8 + 24);
        if (*(char *)(v9 + 47) < 0)
        {
          operator delete(*v29);
          v30 = SHIBYTE(v46);
          *(_OWORD *)v29 = v47;
          *(_QWORD *)(a3 + 48 * v8 + 40) = v48;
          HIBYTE(v48) = 0;
          LOBYTE(v47) = 0;
          if (v30 < 0)
            operator delete(v45[0]);
        }
        else
        {
          *(_OWORD *)v29 = v47;
          *(_QWORD *)(a3 + 48 * v8 + 40) = v48;
          HIBYTE(v48) = 0;
          LOBYTE(v47) = 0;
        }
        if (SHIBYTE(v42) < 0)
          operator delete(__p[0]);
        v31 = __dst[1];
        if (__dst[1])
        {
          v32 = (unsigned int *)((char *)__dst[1] + 8);
          do
          {
            v33 = __ldxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
            (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
        }
        goto LABEL_70;
      }
      sub_20C1034E8((uint64_t *)v45, v37);
      sub_20C45040C((uint64_t *)v45, v9, (uint64_t)__p);
      v18 = (pxrInternal__aapl__pxrReserved__ *)v45[1];
      if (v45[1])
      {
        v19 = (unsigned int *)((char *)v45[1] + 8);
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          v18 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v18 + 8))(v18);
      }
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v18);
      v45[0] = 0;
      v45[1] = 0;
      v46 = 0;
      pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
      if (SHIBYTE(v46) < 0)
        operator delete(v45[0]);
      v23 = HIBYTE(v42);
      if (v42 >= 0)
        v24 = (void *)HIBYTE(v42);
      else
        v24 = __p[1];
      v25 = (void *)HIBYTE(v40);
      v26 = HIBYTE(v40);
      if (v40 < 0)
        v25 = __dst[1];
      if (v24 != v25)
        goto LABEL_59;
      if (v40 >= 0)
        v27 = __dst;
      else
        v27 = (void **)__dst[0];
      if (v42 < 0)
      {
        if (memcmp(__p[0], v27, (size_t)__p[1]))
          goto LABEL_59;
      }
      else if (HIBYTE(v42))
      {
        v28 = __p;
        while (*(unsigned __int8 *)v28 == *(unsigned __int8 *)v27)
        {
          v28 = (void **)((char *)v28 + 1);
          v27 = (void **)((char *)v27 + 1);
          if (!--v23)
            goto LABEL_66;
        }
LABEL_59:
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v45, __p);
        if (*(char *)(v9 + 23) < 0)
          operator delete(*(void **)v9);
        *(_OWORD *)v9 = *(_OWORD *)v45;
        *(_QWORD *)(v9 + 16) = v46;
        HIBYTE(v46) = 0;
        LOBYTE(v45[0]) = 0;
        v35 = (void **)(a3 + 48 * v8 + 24);
        if (*(char *)(v9 + 47) < 0)
        {
          operator delete(*v35);
          v36 = SHIBYTE(v46);
          *(_OWORD *)v35 = v47;
          *(_QWORD *)(a3 + 48 * v8 + 40) = v48;
          HIBYTE(v48) = 0;
          LOBYTE(v47) = 0;
          if (v36 < 0)
            operator delete(v45[0]);
        }
        else
        {
          *(_OWORD *)v35 = v47;
          *(_QWORD *)(a3 + 48 * v8 + 40) = v48;
        }
        v26 = HIBYTE(v40);
      }
LABEL_66:
      if (v26 < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(v42) < 0)
        operator delete(__p[0]);
LABEL_70:
      ++v8;
    }
    while (v8 != a4);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v49);
}

void sub_20C42BB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpCache *v4;
  uint64_t LayerStackIdentifier;
  char *v6;
  char *v7;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[4];
  char v13;

  v4 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((_QWORD *)this + 16);
  if (v4)
    goto LABEL_2;
  v12[0] = "usd/stage.cpp";
  v12[1] = "GetPathResolverContext";
  v12[2] = 3901;
  v12[3] = "ArResolverContext pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext() const";
  v13 = 0;
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "_GetPcpCache()", 0))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((_QWORD *)this + 16);
LABEL_2:
    LayerStackIdentifier = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v4);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v6 = *(char **)(LayerStackIdentifier + 32);
    v7 = *(char **)(LayerStackIdentifier + 40);
    return sub_20BFB73DC((char *)a2, v6, v7, (v7 - v6) >> 4);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254988AF8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254988AF8))
  {
    v11 = operator new(0x18uLL);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    qword_254988AF0 = (uint64_t)v11;
    __cxa_guard_release(&qword_254988AF8);
  }
  v10 = qword_254988AF0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(char **)v10;
  v7 = *(char **)(v10 + 8);
  return sub_20BFB73DC((char *)a2, v6, v7, (v7 - v6) >> 4);
}

void sub_20C42BD14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988AF8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C42BD2C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPathsValue(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, __int128 **a3, int a4, double a5)
{
  __int128 *v10;
  void *v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  void *v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  __int128 v34;
  void *v35;
  void *v36;
  void *v37[2];
  void *__p[3];
  uint64_t v39;

  if (sub_20BFED488((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v37);
    v10 = sub_20C1D1C98(a3);
    v11 = (void *)*((_QWORD *)v10 + 2);
    v12 = *v10;
    v13 = __p[0];
    *v10 = *(_OWORD *)v37;
    *((_QWORD *)v10 + 2) = v13;
    *(_OWORD *)v37 = v12;
    __p[0] = v11;
    v14 = *((_QWORD *)v10 + 5);
    v15 = *(__int128 *)((char *)v10 + 24);
    v16 = v39;
    *(__int128 *)((char *)v10 + 24) = *(_OWORD *)&__p[1];
    *((_QWORD *)v10 + 5) = v16;
    *(_OWORD *)&__p[1] = v15;
    v39 = v14;
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)v37, 1, a4, a5);
    v17 = sub_20C1D1C98(a3);
    v18 = (void *)*((_QWORD *)v17 + 2);
    v19 = *v17;
    v20 = __p[0];
    *v17 = *(_OWORD *)v37;
    *((_QWORD *)v17 + 2) = v20;
    *(_OWORD *)v37 = v19;
    __p[0] = v18;
    v21 = *((_QWORD *)v17 + 5);
    v22 = *(__int128 *)((char *)v17 + 24);
    v23 = v39;
    *(__int128 *)((char *)v17 + 24) = *(_OWORD *)&__p[1];
    *((_QWORD *)v17 + 5) = v23;
    *(_OWORD *)&__p[1] = v22;
    v39 = v21;
    if (SHIBYTE(v21) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v37[0]);
  }
  else if (sub_20BFED500((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(_OWORD *)v37 = 0u;
    memset(__p, 0, sizeof(__p));
    v24 = sub_20C1D1DF4(a3);
    v25 = *(void **)(v24 + 32);
    *(_QWORD *)(v24 + 32) = 0;
    __p[2] = v25;
    v26 = *(_OWORD *)v24;
    *(_OWORD *)v24 = *(_OWORD *)v37;
    v27 = *(void **)(v24 + 16);
    v28 = *(void **)(v24 + 24);
    *(_QWORD *)(v24 + 16) = 0;
    *(void **)(v24 + 24) = __p[1];
    *(_OWORD *)v37 = v26;
    __p[0] = v27;
    __p[1] = v28;
    sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v29, v30);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)__p[2], (uint64_t)v37[0], a4, a5);
    v31 = sub_20C1D1DF4(a3);
    v32 = *(void **)(v31 + 32);
    v33 = __p[0];
    *(void **)(v31 + 32) = __p[2];
    __p[2] = v32;
    v34 = *(_OWORD *)v31;
    *(_OWORD *)v31 = *(_OWORD *)v37;
    v35 = *(void **)(v31 + 16);
    v36 = *(void **)(v31 + 24);
    *(_QWORD *)(v31 + 16) = v33;
    *(void **)(v31 + 24) = __p[1];
    *(_OWORD *)v37 = v34;
    __p[0] = v35;
    __p[1] = v36;
    sub_20C00A724(v37);
  }
}

void sub_20C42BF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00A724(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4, double a5)
{
  BOOL IsIdentity;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22[2];
  int v23;
  _DWORD v24[3];
  void *v25;
  _DWORD *v26;

  v25 = *(void **)&a5;
  sub_20C361C1C((uint64_t)&v19);
  v26 = a2;
  sub_20C46E2DC(a1, a2, &v19, &v25, 0, (uint64_t)&v26);
  IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v22);
  if (a4)
    v10 = IsIdentity;
  else
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    do
    {
      *a3 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(v22, a3);
      ++a3;
      --a4;
    }
    while (a4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v24);
  sub_20BFD265C(&v23);
  v11 = v21;
  if (v21)
  {
    v12 = (unsigned int *)(v21 + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  result = v20;
  if (v20)
  {
    v16 = (unsigned int *)(v20 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C42C0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35FEE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(uint64_t a1, _DWORD *a2, _DWORD *a3, void **a4)
{
  _DWORD *v4;

  v4 = a2;
  sub_20C46E2DC(a1, a2, a3, a4, 0, (uint64_t)&v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **MapToRoot;
  const char *v10;
  char *v11;
  void *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t result;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  void *__p[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38[3];
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  _DWORD v44[3];
  void *v45;
  void **v46;

  v45 = *(void **)&a5;
  sub_20C361C1C((uint64_t)&v39);
  __p[0] = (void *)a2;
  sub_20C46E2DC(a1, (_DWORD *)a2, &v39, &v45, 0, (uint64_t)__p);
  *(_OWORD *)__p = v42;
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
  v12 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v10, v11);
  sub_20C35C4F8((uint64_t)__p, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetProtoToInstancePathMap((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, v13, v38);
  if ((v32 & 7) != 0)
  {
    v14 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_20BFD265C(&v31);
  if (__p[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p[1]);
  if (a4)
  {
    v16 = 0;
    v17 = 96 * a4;
    do
    {
      v18 = (_QWORD *)(a3 + v16);
      sub_20C42C3A8((_QWORD *)(a3 + v16), (uint64_t)v12, (uint64_t)v38, (uint64_t)__p);
      v19 = *(void **)(a3 + v16);
      if (v19)
      {
        *(_QWORD *)(a3 + v16 + 8) = v19;
        operator delete(v19);
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      v20 = a3 + v16;
      *(_OWORD *)v20 = *(_OWORD *)__p;
      *(_QWORD *)(v20 + 16) = v31;
      __p[1] = 0;
      v31 = 0;
      __p[0] = 0;
      sub_20C00BC18((void **)(a3 + v16 + 24));
      *(_OWORD *)(v20 + 24) = v32;
      *(_QWORD *)(v20 + 40) = v33;
      v33 = 0;
      v32 = 0uLL;
      sub_20C00BCC0((void **)(a3 + v16 + 48));
      *(_OWORD *)(v20 + 48) = v34;
      *(_QWORD *)(v20 + 64) = v35;
      v35 = 0;
      v34 = 0uLL;
      v21 = (void **)(a3 + v16 + 72);
      if (*(char *)(a3 + v16 + 95) < 0)
        operator delete(*v21);
      *(_OWORD *)v21 = v36;
      *(_QWORD *)(v20 + 88) = v37;
      HIBYTE(v37) = 0;
      LOBYTE(v36) = 0;
      v46 = (void **)&v34;
      sub_20C00E25C(&v46);
      v46 = (void **)&v32;
      sub_20C00D5A8(&v46);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v16 += 96;
    }
    while (v17 != v16);
  }
  __p[0] = v38;
  sub_20C22D004((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v44);
  sub_20BFD265C(&v43);
  v22 = v41;
  if (v41)
  {
    v23 = (unsigned int *)(v41 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  result = v40;
  if (v40)
  {
    v27 = (unsigned int *)(v40 + 8);
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C42C364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_20C35C2E0((uint64_t)&a9);
  sub_20C35FEE4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20C42C3A8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v5[3];
  void **v6[3];
  uint64_t *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v8[0] = a2;
  v8[1] = a3;
  v6[0] = (void **)&v9;
  v6[1] = (void **)v8;
  v6[2] = (void **)&v12;
  v7 = &v9;
  v5[0] = &v9;
  v5[1] = v8;
  v5[2] = &v13;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(a1, (uint64_t)&v7, (uint64_t)sub_20C455E70, (uint64_t)v6, sub_20C4561A8, (uint64_t)v5, (void (*)(uint64_t, uint64_t))sub_20C4566B4);
  if (v9 == v10)
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    sub_20C00D1F0((_QWORD *)a4, v10 - 96);
  }
  v6[0] = (void **)&v9;
  sub_20C1504D4(v6);
}

void sub_20C42C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1504D4((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAttributeValue(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t *a3, double a4)
{
  void **v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *__p[2];
  __int128 v42;
  void **v43[9];

  if (sub_20C1D0F74((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    v8 = (void **)sub_20C1D1088(a3);
    v9 = *v8;
    *v8 = 0;
    v37[0] = v9;
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes((uint64_t)a1, a2, (double *)v37, 1, a4);
    v10 = (void **)sub_20C1D1088(a3);
    *v10 = v37[0];
  }
  else if (sub_20C1D1114((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(_QWORD *)&v39 = 0;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    v11 = sub_20C1D1258(a3);
    v12 = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)&v39 = v12;
    v13 = *(_OWORD *)v11;
    *(_OWORD *)v11 = *(_OWORD *)v37;
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_OWORD *)(v11 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), 0);
    *(_OWORD *)v37 = v13;
    *(_QWORD *)&v38 = v14;
    *((_QWORD *)&v38 + 1) = v15;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v16, v17);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes((uint64_t)a1, a2, (double *)v39, (uint64_t)v37[0], a4);
    v18 = sub_20C1D1258(a3);
    v19 = *(_QWORD *)(v18 + 32);
    v20 = v38;
    *(_QWORD *)(v18 + 32) = v39;
    *(_QWORD *)&v39 = v19;
    v21 = *(_OWORD *)v18;
    *(_OWORD *)v18 = *(_OWORD *)v37;
    v22 = *(_QWORD *)(v18 + 16);
    v23 = *(_QWORD *)(v18 + 24);
    *(_OWORD *)(v18 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), v20);
    *(_OWORD *)v37 = v21;
    *(_QWORD *)&v38 = v22;
    *((_QWORD *)&v38 + 1) = v23;
    sub_20BF5618C((uint64_t)v37);
  }
  else if (sub_20BFEFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(_OWORD *)__p = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    sub_20C1D25C4(a3, (uint64_t)v37);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions((uint64_t)a1, (uint64_t)a2, (uint64_t)v37, 1, a4);
    sub_20C1D25C4(a3, (uint64_t)v37);
    if (SHIBYTE(v42) < 0)
      operator delete(__p[1]);
    v43[0] = (void **)&v40;
    sub_20C00E25C(v43);
    v43[0] = (void **)&v38 + 1;
    sub_20C00D5A8(v43);
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
  }
  else if (sub_20BFEFDCC((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(_QWORD *)&v39 = 0;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    v24 = sub_20C1939F0(a3);
    v25 = *(_QWORD *)(v24 + 32);
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)&v39 = v25;
    v26 = *(_OWORD *)v24;
    *(_OWORD *)v24 = *(_OWORD *)v37;
    v27 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    *(_OWORD *)(v24 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), 0);
    *(_OWORD *)v37 = v26;
    *(_QWORD *)&v38 = v27;
    *((_QWORD *)&v38 + 1) = v28;
    sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v29, v30);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions((uint64_t)a1, (uint64_t)a2, v39, (uint64_t)v37[0], a4);
    v31 = sub_20C1939F0(a3);
    v32 = *(_QWORD *)(v31 + 32);
    v33 = v38;
    *(_QWORD *)(v31 + 32) = v39;
    *(_QWORD *)&v39 = v32;
    v34 = *(_OWORD *)v31;
    *(_OWORD *)v31 = *(_OWORD *)v37;
    v35 = *(_QWORD *)(v31 + 16);
    v36 = *(_QWORD *)(v31 + 24);
    *(_OWORD *)(v31 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), v33);
    *(_OWORD *)v37 = v34;
    *(_QWORD *)&v38 = v35;
    *((_QWORD *)&v38 + 1) = v36;
    sub_20C00E910(v37);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPathsValue(a1, a2, (__int128 **)a3, 0, a4);
  }
}

void sub_20C42C74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00E910(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::UsdStage(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, _DWORD **a5, int a6)
{
  uint64_t *v12;
  void *v13;
  pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *v14;
  uint64_t *EmptyString;
  const char *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  std::string::size_type size;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache *v32;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *v33;
  _OWORD *v34;
  uint64_t i;
  void ***v36;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  uint64_t Identifier;
  const char *v39;
  char *v40;
  uint64_t v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t v43;
  const char *v44;
  unsigned __int8 v45;
  void **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned __int8 v48;
  std::string *v49;
  __int128 v50;
  void **v51;
  uint64_t v52;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string v59;
  const char *v60;
  char v61;
  uint64_t v62;
  double v63[2];
  void **v64;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C539570;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a2;
  v12 = (uint64_t *)(a1 + 32);
  sub_20BF1DD04((uint64_t *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = *a3;
  sub_20BF1DD04((uint64_t *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v63, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a1 + 48, v12, v63[0], v63[1]);
  *(_BYTE *)(a1 + 120) = 1;
  v13 = operator new(0x130uLL);
  sub_20C1034E8(&v57, v12);
  sub_20C1034E8(&v55, (uint64_t *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v54);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(&v59, &v57, &v55, a4, v54);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
  if (!v14)
    v14 = sub_20C45695C(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
  if ((*((_QWORD *)v14 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v14 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
  pxrInternal__aapl__pxrReserved__::PcpCache::PcpCache(v13, &v59, EmptyString, 1);
  *(_QWORD *)(a1 + 128) = v13;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v62);
  v64 = (void **)&v61;
  sub_20BDE9EB0(&v64);
  v16 = v60;
  if (v60)
  {
    v17 = (unsigned int *)(v60 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(const char *))(*(_QWORD *)v16 + 8))(v16);
  }
  size = v59.__r_.__value_.__l.__size_;
  if (v59.__r_.__value_.__l.__size_)
  {
    v21 = (unsigned int *)(v59.__r_.__value_.__l.__size_ + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v54);
  v24 = v56;
  if (v56)
  {
    v25 = (unsigned int *)(v56 + 8);
    do
    {
      v26 = __ldxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v28 = v58;
  if (v58)
  {
    v29 = (unsigned int *)(v58 + 8);
    do
    {
      v30 = __ldxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  v32 = (pxrInternal__aapl__pxrReserved__::Usd_ClipCache *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Usd_ClipCache(v32);
  *(_QWORD *)(a1 + 136) = v32;
  v33 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)operator new(0x110uLL);
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::Usd_InstanceCache(v33);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_QWORD *)(a1 + 192) = 0;
  v34 = (_OWORD *)(a1 + 728);
  for (i = 736; i != 784; i += 24)
    *(_QWORD *)(a1 + i) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  __dmb(0xBu);
  *(_QWORD *)(a1 + 200) = 0;
  __dmb(0xBu);
  *(_QWORD *)(a1 + 720) = 0;
  *v34 = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 208) = v34;
  __dmb(0xBu);
  *(_QWORD *)(a1 + 200) = 1;
  *(_DWORD *)(a1 + 784) = 1;
  *(_BYTE *)(a1 + 1184) = 0;
  v36 = (void ***)(a1 + 1192);
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 833) = 0u;
  *(_DWORD *)(a1 + 1200) = a6;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 1208), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 3);
  *(_WORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  if (*(_QWORD *)(a1 + 32)
    || (v59.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp",
        v59.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdStage",
        v59.__r_.__value_.__r.__words[2] = 680,
        v60 = "pxrInternal__aapl__pxrReserved__::UsdStage::UsdStage(const SdfLayerRefPtr &, const SdfLayerRefPtr &, const"
              " ArResolverContext &, const UsdStagePopulationMask &, InitialLoadSet)",
        v61 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v59, "_rootLayer", 0) & 1) != 0))
  {
    if (sub_20C286E00(12))
    {
      v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(v12);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v37);
      if (*(char *)(Identifier + 23) >= 0)
        v41 = Identifier;
      else
        v41 = *(_QWORD *)Identifier;
      if (*(_QWORD *)(a1 + 40))
      {
        v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)(a1 + 40));
        v43 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v42);
        if (*(char *)(v43 + 23) >= 0)
          v44 = (const char *)v43;
        else
          v44 = *(const char **)v43;
      }
      else
      {
        v44 = "<null>";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::UsdStage(rootLayer=@%s@, sessionLayer=@%s@)\n", v39, v40, v41, v44);
    }
    v45 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if ((v45 & 1) != 0)
    {
      v46 = (void **)operator new(0x18uLL);
      v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v47);
      v48 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
      if ((v48 & 1) != 0)
      {
        std::operator+<char>();
        v49 = std::string::append(&v59, "@");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v46[2] = (void *)v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)v46 = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
      }
      else
      {
        *v46 = 0;
        v46[1] = 0;
        v46[2] = 0;
      }
      v51 = *v36;
      *v36 = v46;
      if (v51)
        sub_20C456C64(a1 + 1192, v51);
    }
    v52 = *(_QWORD *)(a1 + 128);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetGlobalVariantFallbacks((uint64_t *)&v59);
    pxrInternal__aapl__pxrReserved__::PcpCache::SetVariantFallbacks(v52, (uint64_t)&v59, 0);
    sub_20C220ECC((uint64_t)&v59, (_QWORD *)v59.__r_.__value_.__l.__size_);
  }
  return a1;
}

